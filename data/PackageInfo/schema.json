{
  "name": "git",
  "_childDocuments_": [
    {
      "title": "Why is it faster to process a sorted array than an unsorted array?",
      "tags": [
        "java",
        "c++",
        "performance",
        "optimization",
        "branch-prediction"
      ],
      "code_snippet": [
        "<code>#include &lt;algorithm&gt;\n#include &lt;ctime&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    // Generate data\n    const unsigned arraySize = 32768;\n    int data[arraySize];\n\n    for (unsigned c = 0; c &lt; arraySize; ++c)\n        data[c] = std::rand() % 256;\n\n    // !!! With this, the next loop runs faster\n    std::sort(data, data + arraySize);\n\n    // Test\n    clock_t start = clock();\n    long long sum = 0;\n\n    for (unsigned i = 0; i &lt; 100000; ++i)\n    {\n        // Primary loop\n        for (unsigned c = 0; c &lt; arraySize; ++c)\n        {\n            if (data[c] &gt;= 128)\n                sum += data[c];\n        }\n    }\n\n    double elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;\n\n    std::cout &lt;&lt; elapsedTime &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"sum = \" &lt;&lt; sum &lt;&lt; std::endl;\n}\n</code>",
        "<code>std::sort(data, data + arraySize);</code>",
        "<code>import java.util.Arrays;\nimport java.util.Random;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        // Generate data\n        int arraySize = 32768;\n        int data[] = new int[arraySize];\n\n        Random rnd = new Random(0);\n        for (int c = 0; c &lt; arraySize; ++c)\n            data[c] = rnd.nextInt() % 256;\n\n        // !!! With this, the next loop runs faster\n        Arrays.sort(data);\n\n        // Test\n        long start = System.nanoTime();\n        long sum = 0;\n\n        for (int i = 0; i &lt; 100000; ++i)\n        {\n            // Primary loop\n            for (int c = 0; c &lt; arraySize; ++c)\n            {\n                if (data[c] &gt;= 128)\n                    sum += data[c];\n            }\n        }\n\n        System.out.println((System.nanoTime() - start) / 1000000000.0);\n        System.out.println(\"sum = \" + sum);\n    }\n}\n</code>",
        "<code>cmov</code>",
        "<code>pcmpgtd</code>",
        "<code>if (data[c] &gt;= 128)\n    sum += data[c];\n</code>",
        "<code>T = branch taken\nN = branch not taken\n\ndata[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...\nbranch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...\n\n       = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)\n</code>",
        "<code>data[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, 133, ...\nbranch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T,   N  ...\n\n       = TTNTTTTNTNNTTTN ...   (completely random - hard to predict)\n</code>",
        "<code>if (data[c] &gt;= 128)\n    sum += data[c];\n</code>",
        "<code>int t = (data[c] - 128) &gt;&gt; 31;\nsum += ~t &amp; data[c];\n</code>",
        "<code>data[]</code>",
        "<code>//  Branch - Random\nseconds = 11.777\n\n//  Branch - Sorted\nseconds = 2.352\n\n//  Branchless - Random\nseconds = 2.564\n\n//  Branchless - Sorted\nseconds = 2.587\n</code>",
        "<code>//  Branch - Random\nseconds = 10.93293813\n\n//  Branch - Sorted\nseconds = 5.643797077\n\n//  Branchless - Random\nseconds = 3.113581453\n\n//  Branchless - Sorted\nseconds = 3.186068823\n</code>",
        "<code>-O3</code>",
        "<code>-ftree-vectorize</code>",
        "<code>/Ox</code>",
        "<code>int t=-((data[c]&gt;=128))</code>",
        "<code>int t = (data[c] - 128) &gt;&gt; 31; sum += ~t &amp; data[c];</code>",
        "<code>data[c] &gt;= 128</code>",
        "<code>false</code>",
        "<code>true</code>",
        "<code>if (data[c] &gt;= 128)\n    sum += data[c];\n</code>",
        "<code>if... else...</code>",
        "<code>cmovl</code>",
        "<code>x86</code>",
        "<code>C</code>",
        "<code>C++</code>",
        "<code>x86</code>",
        "<code>... ? ... : ...</code>",
        "<code>sum += data[c] &gt;=128 ? data[c] : 0;\n</code>",
        "<code>//  Branch - Random\nseconds = 8.885\n\n//  Branch - Sorted\nseconds = 1.528\n\n//  Branchless - Random\nseconds = 3.716\n\n//  Branchless - Sorted\nseconds = 3.71\n</code>",
        "<code>//  Branch - Random\nseconds = 11.302\n\n//  Branch - Sorted\n seconds = 1.830\n\n//  Branchless - Random\nseconds = 2.736\n\n//  Branchless - Sorted\nseconds = 2.737\n</code>",
        "<code>x86</code>",
        "<code>max1</code>",
        "<code>max2</code>",
        "<code>max1</code>",
        "<code>if... else ...</code>",
        "<code>int max1(int a, int b) {\n    if (a &gt; b)\n        return a;\n    else\n        return b;\n}\n</code>",
        "<code>max2</code>",
        "<code>... ? ... : ...</code>",
        "<code>int max2(int a, int b) {\n    return a &gt; b ? a : b;\n}\n</code>",
        "<code>GCC -S</code>",
        "<code>:max1\n    movl    %edi, -4(%rbp)\n    movl    %esi, -8(%rbp)\n    movl    -4(%rbp), %eax\n    cmpl    -8(%rbp), %eax\n    jle     .L2\n    movl    -4(%rbp), %eax\n    movl    %eax, -12(%rbp)\n    jmp     .L4\n.L2:\n    movl    -8(%rbp), %eax\n    movl    %eax, -12(%rbp)\n.L4:\n    movl    -12(%rbp), %eax\n    leave\n    ret\n\n:max2\n    movl    %edi, -4(%rbp)\n    movl    %esi, -8(%rbp)\n    movl    -4(%rbp), %eax\n    cmpl    %eax, -8(%rbp)\n    cmovge  -8(%rbp), %eax\n    leave\n    ret\n</code>",
        "<code>max2</code>",
        "<code>cmovge</code>",
        "<code>max2</code>",
        "<code>jmp</code>",
        "<code>x86</code>",
        "<code>Fetch</code>",
        "<code>Decode</code>",
        "<code>-O0</code>",
        "<code>for (unsigned i = 0; i &lt; 100000; ++i)\n{\n    for (unsigned j = 0; j &lt; arraySize; ++j)\n    {\n        if (data[j] &gt;= 128)\n            sum += data[j];\n    }\n}\n</code>",
        "<code>for (unsigned j = 0; j &lt; arraySize; ++j)\n{\n    for (unsigned i = 0; i &lt; 100000; ++i)\n    {\n        if (data[j] &gt;= 128)\n            sum += data[j];\n    }\n}\n</code>",
        "<code>if</code>",
        "<code>i</code>",
        "<code>if</code>",
        "<code>for (unsigned j = 0; j &lt; arraySize; ++j)\n{\n    if (data[j] &gt;= 128)\n    {\n        for (unsigned i = 0; i &lt; 100000; ++i)\n        {\n            sum += data[j];\n        }\n    }\n}\n</code>",
        "<code>for (unsigned j = 0; j &lt; arraySize; ++j)\n{\n    if (data[j] &gt;= 128)\n    {\n        sum += data[j] * 100000;\n    }\n}\n</code>",
        "<code>i</code>",
        "<code>if</code>",
        "<code>sum += (data[j] &gt;= 128) ? data[j] * 100000 : 0;</code>",
        "<code>cmovge</code>",
        "<code>cachegrind</code>",
        "<code>--branch-sim=yes</code>",
        "<code>g++</code>",
        "<code>==32551== Branches:        656,645,130  (  656,609,208 cond +    35,922 ind)\n==32551== Mispredicts:         169,556  (      169,095 cond +       461 ind)\n==32551== Mispred rate:            0.0% (          0.0%     +       1.2%   )\n</code>",
        "<code>==32555== Branches:        655,996,082  (  655,960,160 cond +  35,922 ind)\n==32555== Mispredicts:     164,073,152  (  164,072,692 cond +     460 ind)\n==32555== Mispred rate:           25.0% (         25.0%     +     1.2%   )\n</code>",
        "<code>cg_annotate</code>",
        "<code>          Bc    Bcm Bi Bim\n      10,001      4  0   0      for (unsigned i = 0; i &lt; 10000; ++i)\n           .      .  .   .      {\n           .      .  .   .          // primary loop\n 327,690,000 10,016  0   0          for (unsigned c = 0; c &lt; arraySize; ++c)\n           .      .  .   .          {\n 327,680,000 10,006  0   0              if (data[c] &gt;= 128)\n           0      0  0   0                  sum += data[c];\n           .      .  .   .          }\n           .      .  .   .      }\n</code>",
        "<code>          Bc         Bcm Bi Bim\n      10,001           4  0   0      for (unsigned i = 0; i &lt; 10000; ++i)\n           .           .  .   .      {\n           .           .  .   .          // primary loop\n 327,690,000      10,038  0   0          for (unsigned c = 0; c &lt; arraySize; ++c)\n           .           .  .   .          {\n 327,680,000 164,050,007  0   0              if (data[c] &gt;= 128)\n           0           0  0   0                  sum += data[c];\n           .           .  .   .          }\n           .           .  .   .      }\n</code>",
        "<code>if (data[c] &gt;= 128)</code>",
        "<code>Bcm</code>",
        "<code>perf stat ./sumtest_sorted\n</code>",
        "<code> Performance counter stats for './sumtest_sorted':\n\n  11808.095776 task-clock                #    0.998 CPUs utilized          \n         1,062 context-switches          #    0.090 K/sec                  \n            14 CPU-migrations            #    0.001 K/sec                  \n           337 page-faults               #    0.029 K/sec                  \n26,487,882,764 cycles                    #    2.243 GHz                    \n41,025,654,322 instructions              #    1.55  insns per cycle        \n 6,558,871,379 branches                  #  555.455 M/sec                  \n       567,204 branch-misses             #    0.01% of all branches        \n\n  11.827228330 seconds time elapsed\n</code>",
        "<code> Performance counter stats for './sumtest_unsorted':\n\n  28877.954344 task-clock                #    0.998 CPUs utilized          \n         2,584 context-switches          #    0.089 K/sec                  \n            18 CPU-migrations            #    0.001 K/sec                  \n           335 page-faults               #    0.012 K/sec                  \n65,076,127,595 cycles                    #    2.253 GHz                    \n41,032,528,741 instructions              #    0.63  insns per cycle        \n 6,560,579,013 branches                  #  227.183 M/sec                  \n 1,646,394,749 branch-misses             #   25.10% of all branches        \n\n  28.935500947 seconds time elapsed\n</code>",
        "<code>perf record -e branch-misses ./sumtest_unsorted\nperf annotate -d sumtest_unsorted\n</code>",
        "<code> Percent |      Source code &amp; Disassembly of sumtest_unsorted\n------------------------------------------------\n...\n         :                      sum += data[c];\n    0.00 :        400a1a:       mov    -0x14(%rbp),%eax\n   39.97 :        400a1d:       mov    %eax,%eax\n    5.31 :        400a1f:       mov    -0x20040(%rbp,%rax,4),%eax\n    4.60 :        400a26:       cltq   \n    0.00 :        400a28:       add    %rax,-0x30(%rbp)\n...\n</code>",
        "<code>data[c] &gt;= 128</code>",
        "<code>c &lt; arraySize</code>",
        "<code>for (int i=0; i&lt;array.Length; ++i)\n   // use array[i]\n</code>",
        "<code>&amp; 0x[something]FFF</code>",
        "<code>// generate data\nint arraySize = 32768;\nint[] data = new int[arraySize];\n\nRandom rnd = new Random(0);\nfor (int c = 0; c &lt; arraySize; ++c)\n    data[c] = rnd.Next(256);\n\n\n// Too keep the spirit of the code in-tact I'll make a separate lookup table\n// (I assume we cannot modify 'data' or the number of loops)\nint[] lookup = new int[256];\n\nfor (int c = 0; c &lt; 256; ++c)\n    lookup[c] = (c &gt;= 128) ? c : 0;\n\n// test\nDateTime startTime = System.DateTime.Now;\nlong sum = 0;\n\nfor (int i = 0; i &lt; 100000; ++i)\n{\n    // primary loop\n    for (int j = 0; j &lt; arraySize; ++j)\n    {\n        // here you basically want to use simple operations - so no \n        // random branches, but things like &amp;, |, *, -, +, etc are fine.\n        sum += lookup[data[j]];\n    }\n}\n\nDateTime endTime = System.DateTime.Now;\nConsole.WriteLine(endTime - startTime);\nConsole.WriteLine(\"sum = \" + sum);\n\nConsole.ReadLine();\n</code>",
        "<code>sum += lookup[data[j]]</code>",
        "<code>lookup</code>",
        "<code>if (data[c] &gt;= 128)\n    sum += data[c];\n</code>",
        "<code>for (int i = 0; i &lt; max; i++) if (condition) sum++;\n</code>",
        "<code>Condition           Pattern              Time (ms)\n\n(i &amp; 0×80000000) == 0   T repeated        322\n\n(i &amp; 0xffffffff) == 0   F repeated        276\n\n(i &amp; 1) == 0            TF alternating    760\n\n(i &amp; 3) == 0            TFFFTFFF…         513\n\n(i &amp; 2) == 0            TTFFTTFF…         1675\n\n(i &amp; 4) == 0            TTTTFFFFTTTTFFFF… 1275\n\n(i &amp; 8) == 0            8T 8F 8T 8F …     752\n\n(i &amp; 16) == 0           16T 16F 16T 16F … 490\n</code>",
        "<code>// Test\nclock_t start = clock();\nlong long a[] = {0, 0};\nlong long sum;\n\nfor (unsigned i = 0; i &lt; 100000; ++i)\n{\n    // Primary loop\n    for (unsigned c = 0; c &lt; arraySize; ++c)\n    {\n        int j = (data[c] &gt;&gt; 7);\n        a[j] += data[c];\n    }\n}\n\ndouble elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;\nsum = a[1];\n</code>",
        "<code>lut</code>",
        "<code>// declare and then fill in the lookup table\nint lut[256];\nfor (unsigned c = 0; c &lt; 256; ++c)\n    lut[c] = (c &gt;= 128) ? c : 0;\n\n// use the lookup table after it is built\nfor (unsigned i = 0; i &lt; 100000; ++i)\n{\n    // Primary loop\n    for (unsigned c = 0; c &lt; arraySize; ++c)\n    {\n        sum += lut[data[c]];\n    }\n}\n</code>",
        "<code>if</code>",
        "<code>pLeft</code>",
        "<code>pRight</code>",
        "<code>if (x &lt; node-&gt;value)\n    node = node-&gt;pLeft;\nelse\n    node = node-&gt;pRight;\n</code>",
        "<code>i = (x &lt; node-&gt;value);\nnode = node-&gt;link[i];\n</code>",
        "<code>data[c]&gt;&gt;7</code>",
        "<code>typeof(int) = 4</code>",
        "<code>sizeof(int) == 4</code>",
        "<code>j</code>",
        "<code>j</code>",
        "<code>1-j</code>",
        "<code>j</code>",
        "<code>int c = data[j]; sum += c &amp; -(c &gt;&gt; 7);</code>",
        "<code>data &lt; 128</code>",
        "<code>data &gt;= 128</code>",
        "<code>Lg(arraySize) = 15</code>",
        "<code>int i= 0, j, k= arraySize;\nwhile (i &lt; k)\n{\n  j= (i + k) &gt;&gt; 1;\n  if (data[j] &gt;= 128)\n    k= j;\n  else\n    i= j;\n}\nsum= 0;\nfor (; i &lt; arraySize; i++)\n  sum+= data[i];\n</code>",
        "<code>int i, k, j= (i + k) &gt;&gt; 1;\nfor (i= 0, k= arraySize; i &lt; k; (data[j] &gt;= 128 ? k : i)= j)\n  j= (i + k) &gt;&gt; 1;\nfor (sum= 0; i &lt; arraySize; i++)\n  sum+= data[i];\n</code>",
        "<code>sum= 3137536;</code>",
        "<code>sum= 3137536</code>",
        "<code>std::partition</code>",
        "<code>std::sort</code>",
        "<code>                        A) if (data[c] &gt;= 128)\n                                /\\\n                               /  \\\n                              /    \\\n                        true /      \\ false\n                            /        \\\n                           /          \\\n                          /            \\\n                         /              \\\n              B) sum += data[c];          C) for loop or print().\n</code>",
        "<code>data[c] = std::rand() % 256;\n</code>",
        "<code>std::rand()</code>",
        "<code>if (likely( everything_is_ok ))\n{\n    /* Do something */\n}\n</code>",
        "<code>if (unlikely(very_improbable_condition))\n{\n    /* Do something */    \n}\n</code>",
        "<code>likely()</code>",
        "<code>unlikely()</code>",
        "<code>__builtin_expect</code>",
        "<code>0</code>",
        "<code>false</code>",
        "<code>1</code>",
        "<code>true</code>",
        "<code>0</code>",
        "<code>1</code>",
        "<code>0</code>",
        "<code>1</code>",
        "<code>bool a, b, c, d;\nc = a &amp;&amp; b;\nd = a || b;\n</code>",
        "<code>bool a, b, c, d;\nif (a != 0) {\n    if (b != 0) {\n        c = 1;\n    }\n    else {\n        goto CFALSE;\n    }\n}\nelse {\n    CFALSE:\n    c = 0;\n}\nif (a == 0) {\n    if (b == 0) {\n        d = 0;\n    }\n    else {\n        goto DTRUE;\n    }\n}\nelse {\n    DTRUE:\n    d = 1;\n}\n</code>",
        "<code>0</code>",
        "<code>1</code>",
        "<code>a</code>",
        "<code>b</code>",
        "<code>char a = 0, b = 1, c, d;\nc = a &amp; b;\nd = a | b;\n</code>",
        "<code>char</code>",
        "<code>bool</code>",
        "<code>&amp;</code>",
        "<code>|</code>",
        "<code>&amp;&amp;</code>",
        "<code>||</code>",
        "<code>|</code>",
        "<code>a</code>",
        "<code>b</code>",
        "<code>0</code>",
        "<code>1</code>",
        "<code>&amp;</code>",
        "<code>^</code>",
        "<code>0</code>",
        "<code>1</code>",
        "<code>~</code>",
        "<code>0</code>",
        "<code>1</code>",
        "<code>1</code>",
        "<code>bool a, b;\nb = !a;\n</code>",
        "<code>char a = 0, b;\nb = a ^ 1;\n</code>",
        "<code>a &amp;&amp; b</code>",
        "<code>a &amp; b</code>",
        "<code>b</code>",
        "<code>a</code>",
        "<code>false</code>",
        "<code>&amp;&amp;</code>",
        "<code>b</code>",
        "<code>&amp;</code>",
        "<code>a || b</code>",
        "<code>a | b</code>",
        "<code>b</code>",
        "<code>a</code>",
        "<code>true</code>",
        "<code>bool a; double x, y, z;\na = x &gt; y &amp;&amp; z &lt; 5.0;\n</code>",
        "<code>&amp;&amp;</code>",
        "<code>data[c] &gt;= 128</code>",
        "<code>if (expression)\n{\n    // run 1\n} else {\n    // run 2\n}\n</code>",
        "<code>if-else</code>",
        "<code>switch</code>",
        "<code>if</code>",
        "<code>if</code>",
        "<code> O       route1  /-------------------------------\n/|\\             /\n |  ---------##/    \n/ \\            \\ \n                \\\n         route2  \\--------------------------------\n</code>",
        "<code> // sort backwards (higher values first)\n std::sort(data, data + arraySize, std::greater&lt;int&gt;());\n\n for (unsigned c = 0; c &lt; arraySize; ++c)\n {\n       if (data[c] &lt; 128)\n              break;\n       sum += data[c];               \n }\n</code>",
        "<code>MOV R0, #0     // R0 = sum = 0\nMOV R1, #0     // R1 = c = 0\nADR R2, data   // R2 = addr of data array (put this instruction outside outer loop)\n.inner_loop    // Inner loop branch label\n    LDRB R3, [R2, R1]     // R3 = data[c]\n    CMP R3, #128          // compare R3 to 128\n    ADDGE R0, R0, R3      // if R3 &gt;= 128, then sum += data[c] -- no branch needed!\n    ADD R1, R1, #1        // c++\n    CMP R1, #arraySize    // compare c to arraySize\n    BLT inner_loop        // Branch to inner_loop if c &lt; arraySize\n</code>"
      ],
      "_childDocuments_": [
        {
          "last_activity_date": 1470383590,
          "score": 3452,
          "down_vote_count": 13,
          "last_edit_date": 1470383590,
          "body_markdown": "**Branch prediction.**\r\n\r\n With a sorted array, the condition `data[c] &gt;= 128` is first `false` for a streak of values, then becomes `true` for all later values. That&#39;s easy to predict. With an unsorted array, you pay for the branching cost.",
          "up_vote_count": 3465,
          "tags": [],
          "creation_date": 1340805285,
          "is_accepted": false,
          "answer_id": 11227877
        },
        {
          "last_activity_date": 1519187096,
          "score": 27459,
          "down_vote_count": 19,
          "last_edit_date": 1519187096,
          "body_markdown": "**You are a victim of [branch prediction][1] fail.**\r\n\r\n----------\r\n\r\n##What is Branch Prediction?\r\n \r\nConsider a railroad junction:\r\n\r\n[![Licensed Image][2]][5]\r\n&lt;sub&gt;[Image][5] by Mecanismo, via Wikimedia Commons. Used under the [CC-By-SA 3.0](//creativecommons.org/licenses/by-sa/3.0/deed.en) license.&lt;/sub&gt;\r\n\r\nNow for the sake of argument, suppose this is back in the 1800s - before long distance or radio communication.\r\n\r\nYou are the operator of a junction and you hear a train coming. You have no idea which way it is supposed to go. You stop the train to ask the driver which direction they want. And then you set the switch appropriately.\r\n\r\n*Trains are heavy and have a lot of inertia. So they take forever to start up and slow down.*\r\n\r\nIs there a better way? You guess which direction the train will go!\r\n\r\n - If you guessed right, it continues on.\r\n - If you guessed wrong, the captain will stop, back up, and yell at you to flip the switch. Then it can restart down the other path.\r\n\r\n**If you guess right every time**, the train will never have to stop.&lt;br&gt;\r\n**If you guess wrong too often**, the train will spend a lot of time stopping, backing up, and restarting.\r\n\r\n----------\r\n\r\n**Consider an if-statement:** At the processor level, it is a branch instruction:\r\n\r\n![image2][3]\r\n\r\nYou are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.\r\n\r\n*Modern processors are complicated and have long pipelines. So they take forever to &quot;warm up&quot; and &quot;slow down&quot;.*\r\n\r\nIs there a better way? You guess which direction the branch will go!\r\n\r\n - If you guessed right, you continue executing.\r\n - If you guessed wrong, you need to flush the pipeline and roll back to the branch. Then you can restart down the other path.\r\n\r\n**If you guess right every time**, the execution will never have to stop.&lt;br&gt;\r\n**If you guess wrong too often**, you spend a lot of time stalling, rolling back, and restarting.\r\n\r\n----------\r\n\r\nThis is branch prediction. I admit it&#39;s not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn&#39;t know which direction a branch will go until the last moment.\r\n\r\nSo how would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every 3 times, you guess the same...\r\n\r\n***In other words, you try to identify a pattern and follow it.*** This is more or less how branch predictors work.\r\n\r\nMost applications have well-behaved branches. So modern branch predictors will typically achieve &gt;90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.\r\n\r\nFurther reading: [&quot;Branch predictor&quot; article on Wikipedia][1].\r\n\r\n----------\r\n\r\n##As hinted from above, the culprit is this if-statement:\r\n\r\n    if (data[c] &gt;= 128)\r\n        sum += data[c];\r\n\r\nNotice that the data is evenly distributed between 0 and 255. \r\nWhen the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.\r\n\r\nThis is very friendly to the branch predictor since the branch consecutively goes the same direction many times.\r\nEven a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.\r\n\r\n**Quick visualization:**\r\n\r\n    T = branch taken\r\n    N = branch not taken\r\n\r\n    data[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...\r\n    branch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...\r\n\r\n           = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)\r\n\r\nHowever, when the data is completely random, the branch predictor is rendered useless because it can&#39;t predict random data.\r\nThus there will probably be around 50% misprediction. (no better than random guessing)\r\n\r\n    data[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, 133, ...\r\n    branch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T,   N  ...\r\n\r\n           = TTNTTTTNTNNTTTN ...   (completely random - hard to predict)\r\n\r\n----------\r\n\r\n**So what can be done?**\r\n\r\nIf the compiler isn&#39;t able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.\r\n\r\nReplace:\r\n\r\n    if (data[c] &gt;= 128)\r\n        sum += data[c];\r\n\r\nwith:\r\n\r\n    int t = (data[c] - 128) &gt;&gt; 31;\r\n    sum += ~t &amp; data[c];\r\n\r\nThis eliminates the branch and replaces it with some bitwise operations.\r\n\r\n&lt;sub&gt;(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it&#39;s valid for all the input values of `data[]`.)&lt;/sub&gt;\r\n\r\n**Benchmarks: Core i7 920 @ 3.5 GHz**\r\n\r\nC++ - Visual Studio 2010 - x64 Release\r\n\r\n    //  Branch - Random\r\n    seconds = 11.777\r\n\r\n    //  Branch - Sorted\r\n    seconds = 2.352\r\n\r\n    //  Branchless - Random\r\n    seconds = 2.564\r\n\r\n    //  Branchless - Sorted\r\n    seconds = 2.587\r\n\r\nJava - Netbeans 7.1.1 JDK 7 - x64\r\n\r\n    //  Branch - Random\r\n    seconds = 10.93293813\r\n\r\n    //  Branch - Sorted\r\n    seconds = 5.643797077\r\n\r\n    //  Branchless - Random\r\n    seconds = 3.113581453\r\n\r\n    //  Branchless - Sorted\r\n    seconds = 3.186068823\r\n\r\nObservations:\r\n\r\n - **With the Branch:** There is a huge difference between the sorted and unsorted data.\r\n - **With the Hack:** There is no difference between sorted and unsorted data.\r\n - In the C++ case, the hack is actually a tad slower than with the branch when the data is sorted.\r\n\r\nA general rule of thumb is to avoid data-dependent branching in critical loops. (such as in this example)\r\n\r\n----------\r\n\r\n**Update:**\r\n\r\n - GCC 4.6.1 with `-O3` or `-ftree-vectorize` on x64 is able to generate a conditional move. So there is no difference between the sorted and unsorted data - both are fast.\r\n\r\n - VC++ 2010 is unable to generate conditional moves for this branch even under `/Ox`.\r\n\r\n - Intel Compiler 11 does something miraculous. It [interchanges the two loops][4], thereby hoisting the unpredictable branch to the outer loop. So not only is it immune the mispredictions, it is also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...\r\n\r\n - If you give the Intel Compiler the branchless code, it just out-right vectorizes it... and is just as fast as with the branch (with the loop interchange).\r\n\r\nThis goes to show that even mature modern compilers can vary wildly in their ability to optimize code...\r\n\r\n\r\n  [1]: //en.wikipedia.org/wiki/Branch_predictor\r\n  [2]: //i.stack.imgur.com/muxnt.jpg\r\n  [3]: //i.stack.imgur.com/pyfwC.png\r\n  [4]: //en.wikipedia.org/wiki/Loop_interchange\r\n  [5]: //commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG",
          "up_vote_count": 27478,
          "tags": [],
          "creation_date": 1340805402,
          "is_accepted": true,
          "answer_id": 11227902
        },
        {
          "last_activity_date": 1479089100,
          "score": 2802,
          "down_vote_count": 11,
          "last_edit_date": 1495540989,
          "body_markdown": "The reason why performance improves drastically when the data is sorted is that the branch prediction penalty is removed, as explained beautifully in [Mysticial][1]&#39;s answer.\r\n\r\nNow, if we look at the code\r\n\r\n    if (data[c] &gt;= 128)\r\n        sum += data[c];\r\n\r\nwe can find that the meaning of this particular `if... else...` branch is to add something when a condition is satisfied. This type of branch can be easily transformed into a **conditional move** statement, which would be compiled into a conditional move instruction: `cmovl`, in an `x86` system. The branch and thus the potential branch prediction penalty is removed.\r\n\r\nIn `C`, thus `C++`, the statement, which would compile directly (without any optimization) into the conditional move instruction in `x86`, is the ternary operator `... ? ... : ...`. So we rewrite the above statement into an equivalent one:\r\n\r\n    sum += data[c] &gt;=128 ? data[c] : 0;\r\n\r\nWhile maintaining readability, we can check the speedup factor.\r\n\r\nOn an Intel [Core i7][2]-2600K @ 3.4&amp;nbsp;GHz and Visual Studio 2010 Release Mode, the benchmark is (format copied from Mysticial):\r\n\r\n**x86**\r\n\r\n    //  Branch - Random\r\n    seconds = 8.885\r\n\r\n    //  Branch - Sorted\r\n    seconds = 1.528\r\n\r\n    //  Branchless - Random\r\n    seconds = 3.716\r\n\r\n    //  Branchless - Sorted\r\n    seconds = 3.71\r\n\r\n**x64**\r\n\r\n    //  Branch - Random\r\n    seconds = 11.302\r\n\r\n    //  Branch - Sorted\r\n     seconds = 1.830\r\n\r\n    //  Branchless - Random\r\n    seconds = 2.736\r\n\r\n    //  Branchless - Sorted\r\n    seconds = 2.737\r\n\r\nThe result is robust in multiple tests. We get a great speedup when the branch result is unpredictable, but we suffer a little bit when it is predictable. In fact, when using a conditional move, the performance is the same regardless of the data pattern.\r\n\r\nNow let&#39;s look more closely by investigating the `x86` assembly they generate. For simplicity, we use two functions `max1` and `max2`.\r\n\r\n`max1` uses the conditional branch `if... else ...`:\r\n\r\n    int max1(int a, int b) {\r\n        if (a &gt; b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n`max2` uses the ternary operator `... ? ... : ...`:\r\n\r\n    int max2(int a, int b) {\r\n        return a &gt; b ? a : b;\r\n    }\r\n\r\nOn a x86-64 machine, `GCC -S` generates the assembly below.\r\n\r\n    :max1\r\n        movl    %edi, -4(%rbp)\r\n        movl    %esi, -8(%rbp)\r\n        movl    -4(%rbp), %eax\r\n        cmpl    -8(%rbp), %eax\r\n        jle     .L2\r\n        movl    -4(%rbp), %eax\r\n        movl    %eax, -12(%rbp)\r\n        jmp     .L4\r\n    .L2:\r\n        movl    -8(%rbp), %eax\r\n        movl    %eax, -12(%rbp)\r\n    .L4:\r\n        movl    -12(%rbp), %eax\r\n        leave\r\n        ret\r\n\r\n    :max2\r\n        movl    %edi, -4(%rbp)\r\n        movl    %esi, -8(%rbp)\r\n        movl    -4(%rbp), %eax\r\n        cmpl    %eax, -8(%rbp)\r\n        cmovge  -8(%rbp), %eax\r\n        leave\r\n        ret\r\n\r\n`max2` uses much less code due to the usage of instruction `cmovge`. But the real gain is that `max2` does not involve branch jumps, `jmp`, which would have a significant performance penalty if the predicted result is not right.\r\n\r\nSo why does a conditional move perform better?\r\n\r\nIn a typical `x86` processor, the execution of an instruction is divided into several stages. Roughly, we have different hardware to deal with different stages. So we do not have to wait for one instruction to finish to start a new one. This is called **[pipelining][3]**.\r\n\r\nIn a branch case, the following instruction is determined by the preceding one, so we cannot do pipelining. We have to either wait or predict.\r\n\r\nIn a conditional move case, the execution conditional move instruction is divided into several stages, but the earlier stages like `Fetch` and `Decode` does not depend on the result of the previous instruction; only latter stages need the result. Thus, we wait a fraction of one instruction&#39;s execution time. This is why the conditional move version is slower than the branch when prediction is easy.\r\n\r\nThe book *[Computer Systems: A Programmer&#39;s Perspective, second edition][4]* explains this in detail. You can check Section 3.6.6 for *Conditional Move Instructions*, entire Chapter 4 for *Processor Architecture*, and Section 5.11.2 for a special treatment for *Branch Prediction and Misprediction Penalties*.\r\n\r\nSometimes, some modern compilers can optimize our code to assembly with better performance, sometimes some compilers can&#39;t (the code in question is using Visual Studio&#39;s native compiler). Knowing the performance difference between branch and conditional move when unpredictable can help us write code with better performance when the scenario gets so complex that the compiler can not optimize them automatically.\r\n\r\n  [1]: https://stackoverflow.com/users/922184/mysticial\r\n  [2]: http://en.wikipedia.org/wiki/Intel_Core#Core_i7\r\n  [3]: http://en.wikipedia.org/wiki/Pipeline_%28computing%29\r\n  [4]: http://www.amazon.com/Computer-Systems-Programmers-Perspective-Edition/dp/0136108040/\r\n",
          "up_vote_count": 2813,
          "tags": [],
          "creation_date": 1340849643,
          "is_accepted": false,
          "answer_id": 11237235
        },
        {
          "last_activity_date": 1500210560,
          "score": 1917,
          "down_vote_count": 21,
          "last_edit_date": 1500210560,
          "body_markdown": "If you are curious about even more optimizations that can be done to this code, consider this:\r\n\r\nStarting with the original loop:\r\n\r\n    for (unsigned i = 0; i &lt; 100000; ++i)\r\n    {\r\n        for (unsigned j = 0; j &lt; arraySize; ++j)\r\n        {\r\n            if (data[j] &gt;= 128)\r\n                sum += data[j];\r\n        }\r\n    }\r\n\r\nWith loop interchange, we can safely change this loop to:\r\n\r\n    for (unsigned j = 0; j &lt; arraySize; ++j)\r\n    {\r\n        for (unsigned i = 0; i &lt; 100000; ++i)\r\n        {\r\n            if (data[j] &gt;= 128)\r\n                sum += data[j];\r\n        }\r\n    }\r\n\r\nThen, you can see that the `if` conditional is constant throughout the execution of the `i` loop, so you can hoist the `if` out:\r\n\r\n    for (unsigned j = 0; j &lt; arraySize; ++j)\r\n    {\r\n        if (data[j] &gt;= 128)\r\n        {\r\n            for (unsigned i = 0; i &lt; 100000; ++i)\r\n            {\r\n                sum += data[j];\r\n            }\r\n        }\r\n    }\r\n\r\nThen, you see that the inner loop can be collapsed into one single expression, assuming the floating point model allows it (/fp:fast is thrown, for example)\r\n\r\n    for (unsigned j = 0; j &lt; arraySize; ++j)\r\n    {\r\n        if (data[j] &gt;= 128)\r\n        {\r\n            sum += data[j] * 100000;\r\n        }\r\n    }\r\n\r\nThat one is 100,000x faster than before \r\n",
          "up_vote_count": 1938,
          "tags": [],
          "creation_date": 1341282330,
          "is_accepted": false,
          "answer_id": 11303693
        },
        {
          "last_activity_date": 1350588021,
          "score": 1597,
          "down_vote_count": 3,
          "last_edit_date": 1350588021,
          "body_markdown": "No doubt some of us would be interested in ways of identifying code that is problematic for the CPU&#39;s branch-predictor. The Valgrind tool `cachegrind` has a branch-predictor simulator, enabled by using the `--branch-sim=yes` flag. Running it over the examples in this question, with the number of outer loops reduced to 10000 and compiled with `g++`, gives these results:\r\n\r\n**Sorted:**\r\n\r\n    ==32551== Branches:        656,645,130  (  656,609,208 cond +    35,922 ind)\r\n    ==32551== Mispredicts:         169,556  (      169,095 cond +       461 ind)\r\n    ==32551== Mispred rate:            0.0% (          0.0%     +       1.2%   )\r\n\r\n**Unsorted:**\r\n\r\n    ==32555== Branches:        655,996,082  (  655,960,160 cond +  35,922 ind)\r\n    ==32555== Mispredicts:     164,073,152  (  164,072,692 cond +     460 ind)\r\n    ==32555== Mispred rate:           25.0% (         25.0%     +     1.2%   )\r\n\r\nDrilling down into the line-by-line output produced by `cg_annotate` we see for the loop in question:\r\n\r\n**Sorted:**\r\n\r\n              Bc    Bcm Bi Bim\r\n          10,001      4  0   0      for (unsigned i = 0; i &lt; 10000; ++i)\r\n               .      .  .   .      {\r\n               .      .  .   .          // primary loop\r\n     327,690,000 10,016  0   0          for (unsigned c = 0; c &lt; arraySize; ++c)\r\n               .      .  .   .          {\r\n     327,680,000 10,006  0   0              if (data[c] &gt;= 128)\r\n               0      0  0   0                  sum += data[c];\r\n               .      .  .   .          }\r\n               .      .  .   .      }\r\n\r\n**Unsorted:**\r\n\r\n              Bc         Bcm Bi Bim\r\n          10,001           4  0   0      for (unsigned i = 0; i &lt; 10000; ++i)\r\n               .           .  .   .      {\r\n               .           .  .   .          // primary loop\r\n     327,690,000      10,038  0   0          for (unsigned c = 0; c &lt; arraySize; ++c)\r\n               .           .  .   .          {\r\n     327,680,000 164,050,007  0   0              if (data[c] &gt;= 128)\r\n               0           0  0   0                  sum += data[c];\r\n               .           .  .   .          }\r\n               .           .  .   .      }\r\n\r\nThis lets you easily identify the problematic line - in the unsorted version the `if (data[c] &gt;= 128)` line is causing 164,050,007 mispredicted conditional branches (`Bcm`) under cachegrind&#39;s branch-predictor model, whereas it&#39;s only causing 10,006 in the sorted version.\r\n\r\n----------\r\n\r\nAlternatively, on Linux you can use the performance counters subsystem to accomplish the same task, but with native performance using CPU counters.\r\n\r\n    perf stat ./sumtest_sorted\r\n\r\n**Sorted:**\r\n\r\n     Performance counter stats for &#39;./sumtest_sorted&#39;:\r\n\r\n      11808.095776 task-clock                #    0.998 CPUs utilized          \r\n             1,062 context-switches          #    0.090 K/sec                  \r\n                14 CPU-migrations            #    0.001 K/sec                  \r\n               337 page-faults               #    0.029 K/sec                  \r\n    26,487,882,764 cycles                    #    2.243 GHz                    \r\n    41,025,654,322 instructions              #    1.55  insns per cycle        \r\n     6,558,871,379 branches                  #  555.455 M/sec                  \r\n           567,204 branch-misses             #    0.01% of all branches        \r\n\r\n      11.827228330 seconds time elapsed\r\n\r\n**Unsorted:**\r\n\r\n     Performance counter stats for &#39;./sumtest_unsorted&#39;:\r\n\r\n      28877.954344 task-clock                #    0.998 CPUs utilized          \r\n             2,584 context-switches          #    0.089 K/sec                  \r\n                18 CPU-migrations            #    0.001 K/sec                  \r\n               335 page-faults               #    0.012 K/sec                  \r\n    65,076,127,595 cycles                    #    2.253 GHz                    \r\n    41,032,528,741 instructions              #    0.63  insns per cycle        \r\n     6,560,579,013 branches                  #  227.183 M/sec                  \r\n     1,646,394,749 branch-misses             #   25.10% of all branches        \r\n\r\n      28.935500947 seconds time elapsed\r\n\r\nIt can also do source code annotation with dissassembly.\r\n\r\n    perf record -e branch-misses ./sumtest_unsorted\r\n    perf annotate -d sumtest_unsorted\r\n&lt;div&gt;&lt;/div&gt;\r\n     Percent |      Source code &amp; Disassembly of sumtest_unsorted\r\n    ------------------------------------------------\r\n    ...\r\n             :                      sum += data[c];\r\n        0.00 :        400a1a:       mov    -0x14(%rbp),%eax\r\n       39.97 :        400a1d:       mov    %eax,%eax\r\n        5.31 :        400a1f:       mov    -0x20040(%rbp,%rax,4),%eax\r\n        4.60 :        400a26:       cltq   \r\n        0.00 :        400a28:       add    %rax,-0x30(%rbp)\r\n    ...\r\n\r\nSee [the performance tutorial][1] for more details.\r\n\r\n  [1]: https://perf.wiki.kernel.org/index.php/Tutorial\r\n",
          "up_vote_count": 1600,
          "tags": [],
          "creation_date": 1350021213,
          "is_accepted": false,
          "answer_id": 12853037
        },
        {
          "last_activity_date": 1363954810,
          "score": 954,
          "down_vote_count": 2,
          "last_edit_date": 1363954810,
          "body_markdown": "As data is distributed between 0 and 255 when array is sorted, around first half of the iterations will not enter the if-statement (if statement shared below).\r\n\r\n    if (data[c] &gt;= 128)\r\n        sum += data[c];\r\n\r\nQuestion is what make the above statement not execute in certain case as in case of sorted data? Here comes the &quot;Branch predictor&quot; a branch predictor is a digital circuit that tries to guess which way a branch (e.g. an if-then-else structure) will go before this is known for sure. The purpose of the branch predictor is to improve the flow in the instruction pipeline. Branch predictors play a critical role in achieving high effective performance!\r\n\r\n**Lets do some bench marking to understand it better**\r\n\r\nThe performance of an if-statement depends on whether its condition has a predictable pattern. If the condition is always true or always false, the branch prediction logic in the processor will pick up the pattern. On the other hand, if the pattern is unpredictable, the if-statement will be much more expensive.\r\n\r\nLet’s measure the performance of this loop with different conditions:\r\n\r\n    for (int i = 0; i &lt; max; i++) if (condition) sum++;\r\n\r\nHere are the timings of the loop with different True-False patterns:\r\n\r\n\r\n    Condition\t        Pattern\t             Time (ms)\r\n    \r\n    (i &amp; 0&#215;80000000) == 0\tT repeated\t      322\r\n    \r\n    (i &amp; 0xffffffff) == 0\tF repeated\t      276\r\n    \r\n    (i &amp; 1) == 0\t        TF alternating    760\r\n    \r\n    (i &amp; 3) == 0\t        TFFFTFFF…\t      513\r\n    \r\n    (i &amp; 2) == 0\t        TTFFTTFF…\t      1675\r\n    \r\n    (i &amp; 4) == 0\t        TTTTFFFFTTTTFFFF… 1275\r\n    \r\n    (i &amp; 8) == 0\t        8T 8F 8T 8F …     752\r\n    \r\n    (i &amp; 16) == 0\t        16T 16F 16T 16F … 490\r\n\r\nA “**bad**” true-false pattern can make an if-statement up to six times slower than a “**good**” pattern! Of course, which pattern is good and which is bad depends on the exact instructions generated by the compiler and on the specific processor.\r\n\r\nSo there is no doubt about impact of branch prediction on performance!",
          "up_vote_count": 956,
          "tags": [],
          "creation_date": 1360913056,
          "is_accepted": false,
          "answer_id": 14889969
        },
        {
          "last_activity_date": 1395051672,
          "score": 1071,
          "down_vote_count": 1,
          "last_edit_date": 1395051672,
          "body_markdown": "Just read up on the thread and I feel an answer is missing. A common way to eliminate branch prediction that I&#39;ve found to work particularly good in managed languages is a table lookup instead of using a branch. (although I haven&#39;t tested it in this case)\r\n\r\nThis approach works in general if:\r\n\r\n1. It&#39;s a small table and is likely to be cached in the processor\r\n2. You are running things in a quite tight loop and/or the processor can pre-load the data\r\n\r\n**Background and why**\r\n\r\nPfew, so what the hell is that supposed to mean?\r\n\r\nFrom a processor perspective, your memory is slow. To compensate for the difference in speed, they build in a couple of caches in your processor (L1/L2 cache) that compensate for that. So imagine that you&#39;re doing your nice calculations and figure out that you need a piece of memory. The processor will get his &#39;load&#39; operation and loads the piece of memory into cache - and then uses the cache to do the rest of the calculations. Because memory is relatively slow, this &#39;load&#39; will slow down your program. \r\n\r\nLike branch prediction, this was optimized in the Pentium processors: the processor predicts that it needs to load a piece of data and attempts to load that into the cache before the operation actually hits the cache. As we&#39;ve already seen, branch prediction sometimes goes horribly wrong -- in the worst case scenario you need to go back and actually wait for a memory load, which will take forever (**in other words: failing branch prediction is bad, a memory load after a branch prediction fail is just horrible!**).\r\n\r\nFortunately for us, if the memory access pattern is predictable, the processor will load it in its fast cache and all is well.\r\n\r\nFirst thing we need to know is what is *small*? While smaller is generally better, a rule of thumb is to stick to lookup tables that are &lt;=4096 bytes in size. As an upper limit: if your lookup table is larger than 64K it&#39;s probably worth reconsidering.\r\n\r\n**Constructing a table**\r\n\r\nSo we&#39;ve figured out that we can create a small table. Next thing to do is get a lookup function in place. Lookup functions are usually small functions that use a couple of basic integer operations (and, or, xor, shift, add, remove and perhaps a multiply). What you want is to have your input translated by the lookup function to some kind of &#39;unique key&#39; in your table, which then simply gives you the answer of all the work you wanted it to do.\r\n\r\nIn this case: &gt;=128 means we can keep the value, &lt;128 means we get rid of it. The easiest way to do that is by using an &#39;AND&#39;: if we keep it, we AND it with 7FFFFFFF ; if we want to get rid of it, we AND it with 0. Notice also that 128 is a power of 2 -- so we can go ahead and make a table of 32768/128 integers and fill it with one zero and a lot of 7FFFFFFFF&#39;s.\r\n\r\n**Managed languages**\r\n\r\nYou might wonder why this works well in managed languages. After all, managed languages check the boundaries of the arrays with a branch to ensure you don&#39;t mess up...\r\n\r\nWell, not exactly... :-)\r\n\r\nThere has been quite some work on eliminating this branch for managed languages. For example:\r\n\r\n    for (int i=0; i&lt;array.Length; ++i)\r\n       // use array[i]\r\n\r\nin this case it&#39;s obvious to the compiler that the boundary condition will never hit. At least the Microsoft JIT compiler (but I expect Java does similar things) will notice this and remove the check all together. WOW - that means no branch. Similarly, it will deal with other obvious cases.\r\n\r\nIf you run into trouble with lookups on managed languages - the key is to add a `&amp; 0x[something]FFF` to your lookup function to make the boundary check predictable - and watch it going faster.\r\n\r\n**The result for this case**\r\n\r\n    // generate data\r\n    int arraySize = 32768;\r\n    int[] data = new int[arraySize];\r\n\r\n    Random rnd = new Random(0);\r\n    for (int c = 0; c &lt; arraySize; ++c)\r\n        data[c] = rnd.Next(256);\r\n\r\n\r\n    // Too keep the spirit of the code in-tact I&#39;ll make a separate lookup table\r\n    // (I assume we cannot modify &#39;data&#39; or the number of loops)\r\n    int[] lookup = new int[256];\r\n\r\n    for (int c = 0; c &lt; 256; ++c)\r\n        lookup[c] = (c &gt;= 128) ? c : 0;\r\n\r\n    // test\r\n    DateTime startTime = System.DateTime.Now;\r\n    long sum = 0;\r\n\r\n    for (int i = 0; i &lt; 100000; ++i)\r\n    {\r\n        // primary loop\r\n        for (int j = 0; j &lt; arraySize; ++j)\r\n        {\r\n            // here you basically want to use simple operations - so no \r\n            // random branches, but things like &amp;, |, *, -, +, etc are fine.\r\n            sum += lookup[data[j]];\r\n        }\r\n    }\r\n\r\n    DateTime endTime = System.DateTime.Now;\r\n    Console.WriteLine(endTime - startTime);\r\n    Console.WriteLine(&quot;sum = &quot; + sum);\r\n\r\n    Console.ReadLine();",
          "up_vote_count": 1072,
          "tags": [],
          "creation_date": 1366784788,
          "is_accepted": false,
          "answer_id": 16184827
        },
        {
          "last_activity_date": 1440357142,
          "score": 899,
          "down_vote_count": 2,
          "last_edit_date": 1440357142,
          "body_markdown": "One way to avoid branch prediction errors is to build a lookup table, and index it using the data.  Stefan de Bruijn discussed that in his answer.\r\n\r\nBut in this case, we know values are in the range [0, 255] and we only care about values &gt;= 128.  That means we can easily extract a single bit that will tell us whether we want a value or not: by shifting the data to the right 7 bits, we are left with a 0 bit or a 1 bit, and we only want to add the value when we have a 1 bit.  Let&#39;s call this bit the &quot;decision bit&quot;.\r\n\r\nBy using the 0/1 value of the decision bit as an index into an array, we can make code that will be equally fast whether the data is sorted or not sorted.  Our code will always add a value, but when the decision bit is 0, we will add the value somewhere we don&#39;t care about.  Here&#39;s the code:\r\n\r\n    // Test\r\n    clock_t start = clock();\r\n    long long a[] = {0, 0};\r\n    long long sum;\r\n\r\n    for (unsigned i = 0; i &lt; 100000; ++i)\r\n    {\r\n        // Primary loop\r\n        for (unsigned c = 0; c &lt; arraySize; ++c)\r\n        {\r\n            int j = (data[c] &gt;&gt; 7);\r\n            a[j] += data[c];\r\n        }\r\n    }\r\n\r\n    double elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;\r\n    sum = a[1];\r\n\r\n\r\nThis code wastes half of the adds, but never has a branch prediction failure.  It&#39;s tremendously faster on random data than the version with an actual if statement.\r\n\r\nBut in my testing, an explicit lookup table was slightly faster than this, probably because indexing into a lookup table was slightly faster than bit shifting.  This shows how my code sets up and uses the lookup table (unimaginatively called `lut` for &quot;LookUp Table&quot; in the code).  Here&#39;s the C++ code:\r\n\r\n    // declare and then fill in the lookup table\r\n    int lut[256];\r\n    for (unsigned c = 0; c &lt; 256; ++c)\r\n        lut[c] = (c &gt;= 128) ? c : 0;\r\n\r\n    // use the lookup table after it is built\r\n    for (unsigned i = 0; i &lt; 100000; ++i)\r\n    {\r\n        // Primary loop\r\n        for (unsigned c = 0; c &lt; arraySize; ++c)\r\n        {\r\n            sum += lut[data[c]];\r\n        }\r\n    }\r\n\r\n\r\nIn this case the lookup table was only 256 bytes, so it fit nicely in cache and all was fast.  This technique wouldn&#39;t work well if the data was 24-bit values and we only wanted half of them... the lookup table would be far too big to be practical.  On the other hand, we can combine the two techniques shown above: first shift the bits over, then index a lookup table.  For a 24-bit value that we only want the top half value, we could potentially shift the data right by 12 bits, and be left with a 12-bit value for a table index.  A 12-bit table index implies a table of 4096 values, which might be practical.\r\n\r\n\r\nEDIT: One thing I forgot to put in.\r\n\r\nThe technique of indexing into an array, instead of using an `if` statement, can be used for deciding which pointer to use.  I saw a library that implemented binary trees, and instead of having two named pointers (`pLeft` and `pRight` or whatever) had a length-2 array of pointers, and used the &quot;decision bit&quot; technique to decide which one to follow.  For example, instead of:\r\n\r\n    if (x &lt; node-&gt;value)\r\n        node = node-&gt;pLeft;\r\n    else\r\n        node = node-&gt;pRight;\r\n\r\nthis library would do something like:\r\n\r\n    i = (x &lt; node-&gt;value);\r\n    node = node-&gt;link[i];\r\n\r\nHere&#39;s a link to this code: [Red Black Trees](http://www.eternallyconfuzzled.com/tuts/datastructures/jsw_tut_rbtree.aspx), *Eternally Confuzzled*\r\n",
          "up_vote_count": 901,
          "tags": [],
          "creation_date": 1374481770,
          "is_accepted": false,
          "answer_id": 17782979
        },
        {
          "last_activity_date": 1429736844,
          "score": 828,
          "down_vote_count": 1,
          "last_edit_date": 1429736844,
          "body_markdown": "In the sorted case, you can do better than relying on successful branch prediction or any branchless comparison trick: completely remove the branch.\r\n\r\nIndeed, the array is partitioned in a contiguous zone with `data &lt; 128` and another with `data &gt;= 128`. So you should find the partition point with a dichotomic search (using `Lg(arraySize) = 15` comparisons), then do a straight accumulation from that point.\r\n\r\nSomething like (unchecked)\r\n\r\n    int i= 0, j, k= arraySize;\r\n    while (i &lt; k)\r\n    {\r\n      j= (i + k) &gt;&gt; 1;\r\n      if (data[j] &gt;= 128)\r\n        k= j;\r\n      else\r\n        i= j;\r\n    }\r\n    sum= 0;\r\n    for (; i &lt; arraySize; i++)\r\n      sum+= data[i];\r\n\r\nor, slightly more obfuscated\r\n\r\n    int i, k, j= (i + k) &gt;&gt; 1;\r\n    for (i= 0, k= arraySize; i &lt; k; (data[j] &gt;= 128 ? k : i)= j)\r\n      j= (i + k) &gt;&gt; 1;\r\n    for (sum= 0; i &lt; arraySize; i++)\r\n      sum+= data[i];\r\n\r\nA yet faster approach, that gives an **approximate** solution for both sorted or unsorted is: `sum= 3137536;` (assuming a truly uniform distribution, 16384 samples with expected value 191.5) **:-)**\r\n\r\n\r\n\r\n\r\n",
          "up_vote_count": 829,
          "tags": [],
          "creation_date": 1374652659,
          "is_accepted": false,
          "answer_id": 17828251
        },
        {
          "last_activity_date": 1503528762,
          "score": 627,
          "down_vote_count": 0,
          "last_edit_date": 1503528762,
          "body_markdown": "The above behavior is happening because of Branch prediction.\r\n\r\nTo understand branch prediction one must first understand **Instruction Pipeline**:\r\n\r\nAny instruction is broken into sequence of steps so that different steps can be executed concurrently in parallel. This technique is known as instruction pipeline and this is used to increase throughput in modern processors. To understand this better please see this [example on Wikipedia][1].\r\n\r\nGenerally modern processors have quite long pipelines, but for ease let&#39;s consider these 4 steps only.\r\n&lt;ol&gt;  \r\n  &lt;li&gt;IF -- Fetch the instruction from memory \r\n  &lt;li&gt;ID -- Decode the instruction\r\n  &lt;li&gt;EX -- Execute the instruction \r\n  &lt;li&gt;WB -- Write back to CPU register\r\n&lt;/ol&gt;\r\n ***4-stage pipeline in general for 2 instructions.***\r\n![4-stage pipeline in general][2]\r\n\r\nMoving back to the above question let&#39;s consider the following instructions:\r\n\r\n\t\t\t\t\t\t\tA) if (data[c] &gt;= 128)\r\n\t\t\t\t\t                /\\\r\n\t\t\t\t                   /  \\\r\n\t\t\t\t                  /    \\\r\n                            true /      \\ false\r\n\t\t\t                    /        \\\r\n                               /          \\\r\n                              /            \\\r\n                             /              \\\r\n                  B) sum += data[c];          C) for loop or print().\r\n\r\n\r\nWithout branch prediction the following would occur:\r\n\r\nTo execute instruction B or instruction C the processor will have to wait till the instruction A doesn&#39;t reach till EX stage in the pipeline, as the decision to go to instruction B or instruction C depends on the result of instruction A. So the pipeline will look like this.\r\n\r\n***when if condition returns true:***\r\n![enter image description here][3]\r\n\r\n***When if condition returns false:***\r\n![enter image description here][4]\r\n\r\nAs a result of waiting for the result of instruction A, the total CPU cycles spent in the above case (without branch prediction; for both true and false) is 7.\r\n\r\n**So what is branch prediction?**\r\n\r\nBranch predictor will try to guess which way a branch (an if-then-else structure) will go before this is known for sure. It will not wait for the instruction A to reach the EX stage of the pipeline, but it will guess the decision and go onto that instruction (B or C in case of our example).\r\n\r\n***In case of a correct guess, the pipeline looks something like this:***\r\n![enter image description here][5]\r\n\r\nIf it is later detected that the guess was wrong then the partially executed instructions are discarded and the pipeline starts over with the correct branch, incurring a delay. \r\nThe time that is wasted in case of a branch misprediction is equal to the number of stages in the pipeline from the fetch stage to the execute stage. Modern microprocessors tend to have quite long pipelines so that the misprediction delay is between 10 and 20 clock cycles. The longer the pipeline the greater the need for a good [branch predictor][6].\r\n\r\nIn the OP&#39;s code, the first time when the conditional, the branch predictor does not have any information to base up prediction, so first time it will randomly choose the next instruction. Later in the for loop it can base the prediction on the history. \r\nFor an array sorted in ascending order, there are three possibilities:\r\n&lt;ol&gt;\r\n&lt;li&gt; All the elements are less than 128\r\n&lt;li&gt; All the elements are greater than 128\r\n&lt;li&gt; Some starting new elements are less than 128 and later it become greater than 128\r\n&lt;/ol&gt;\r\n\r\nLet us assume that the predictor will always assume the true branch on the first run.\r\n\r\nSo in the first case it will always take the true branch since historically all its predictions are correct.\r\nIn the 2nd case, initially it will predict wrong, but after a few iterations it will predict correctly.\r\nIn the 3rd case it will initially predict correctly till the elements are less than 128. After which it will fail for some time and the correct itself when it see branch prediction failure in history. \r\n \r\nIn all these cases the failure will be too less in number and as a result only few times it will need to discard the partially executed instructions and start over with the correct branch, resulting in less CPU cycles. \r\n\r\nBut in case of random unsorted array, the prediction will need to discard the partially executed instructions and start over with the correct branch most of the time and result in more CPU cycles compared to the sorted array.\r\n\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Pipeline_(computing)#Concept_and_motivation\r\n  [2]: http://i.stack.imgur.com/PqBBR.png\r\n  [3]: http://i.stack.imgur.com/0H4gP.png\r\n  [4]: http://i.stack.imgur.com/APpca.png\r\n  [5]: http://i.stack.imgur.com/ZYUbs.png\r\n  [6]: https://en.wikipedia.org/wiki/Branch_predictor",
          "up_vote_count": 627,
          "tags": [],
          "creation_date": 1435937752,
          "is_accepted": false,
          "answer_id": 31210295
        },
        {
          "last_activity_date": 1477650491,
          "score": 527,
          "down_vote_count": 2,
          "last_edit_date": 1477650491,
          "body_markdown": "In the same line (I think this was not highlighted by any answer) it&#39;s good to mention that sometimes (specially in software where the performance matters—like in the Linux kernel) you can find some if statements like the following:\r\n\r\n    if (likely( everything_is_ok ))\r\n    {\r\n        /* Do something */\r\n    }\r\n\r\nor similarly:\r\n\r\n    if (unlikely(very_improbable_condition))\r\n    {\r\n        /* Do something */    \r\n    }\r\n\r\nBoth `likely()` and `unlikely()` are in fact macros that are defined by using something like the GCC&#39;s `__builtin_expect` to help the compiler insert prediction code to favour the condition taking into account the information provided by the user. GCC supports other builtins that could change the behavior of the running program or emit low level instructions like clearing the cache, etc. See [this documentation][1] that goes through the available GCC&#39;s builtins.\r\n\r\nNormally this kind of optimizations are mainly found in hard-real time applications or embedded systems where execution time matters and it&#39;s critical. For example, if you are checking for some error condition that only happens 1/10000000 times, then why not inform the compiler about this? This way, by default, the branch prediction would assume that the condition is false.\r\n\r\n\r\n  [1]: https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html",
          "up_vote_count": 529,
          "tags": [],
          "creation_date": 1443020267,
          "is_accepted": false,
          "answer_id": 32742980
        },
        {
          "last_activity_date": 1444439481,
          "score": 507,
          "down_vote_count": 2,
          "last_edit_date": 1444439481,
          "body_markdown": "Frequently used Boolean operations in C++ produce many branches in compiled program. If these branches are inside loops and are hard to predict they can slow down execution significantly. Boolean variables are stored as 8-bit integers with the value `0` for `false` and `1` for `true`.\r\n\r\nBoolean variables are overdetermined in the sense that all operators that have Boolean variables as input check if the inputs have any other value than `0` or `1`, but operators that have Booleans as output can produce no other value than `0` or `1`. This makes operations with Boolean variables as input less efficient than necessary.\r\nConsider example:\r\n\r\n    bool a, b, c, d;\r\n    c = a &amp;&amp; b;\r\n    d = a || b;\r\nThis is typically implemented by the compiler in the following way:\r\n\r\n    bool a, b, c, d;\r\n    if (a != 0) {\r\n        if (b != 0) {\r\n            c = 1;\r\n        }\r\n        else {\r\n            goto CFALSE;\r\n        }\r\n    }\r\n    else {\r\n        CFALSE:\r\n        c = 0;\r\n    }\r\n    if (a == 0) {\r\n        if (b == 0) {\r\n            d = 0;\r\n        }\r\n        else {\r\n            goto DTRUE;\r\n        }\r\n    }\r\n    else {\r\n        DTRUE:\r\n        d = 1;\r\n    }\r\nThis code is far from optimal. The branches may take a long time in case of mispredictions. The Boolean operations can be made much more efficient if it is known with certainty that the operands have no other values than `0` and `1`. The reason why the compiler does not make such an assumption is that the variables might have other values if they are uninitialized or come from unknown sources. The above code can be optimized if `a` and `b` have been initialized to valid values or if they come from operators that produce Boolean output. The optimized code looks like this:\r\n\r\n    char a = 0, b = 1, c, d;\r\n    c = a &amp; b;\r\n    d = a | b;\r\n`char` is used instead of `bool` in order to make it possible to use the bitwise operators (`&amp;` and `|`) instead of the Boolean operators (`&amp;&amp;` and `||`). The bitwise operators are single instructions that take only one clock cycle. The OR operator (`|`) works even if `a` and `b` have other values than `0` or `1`. The AND operator (`&amp;`) and the EXCLUSIVE OR operator (`^`) may give inconsistent results if the operands have other values than `0` and `1`.\r\n\r\n`~` can not be used for NOT. Instead, you can make a Boolean NOT on a variable which is known to be `0` or `1` by XOR&#39;ing it with `1`:\r\n\r\n    bool a, b;\r\n    b = !a;\r\ncan be optimized to:\r\n\r\n    char a = 0, b;\r\n    b = a ^ 1;\r\n`a &amp;&amp; b` cannot be replaced with `a &amp; b` if `b` is an expression that should not be evaluated if `a` is `false` ( `&amp;&amp;` will not evaluate `b`, `&amp;` will). Likewise, `a || b` can not be replaced with `a | b` if `b` is an expression that should not be evaluated if `a` is `true`.\r\n\r\nUsing bitwise operators is more advantageous if the operands are variables than if the operands are comparisons:\r\n\r\n    bool a; double x, y, z;\r\n    a = x &gt; y &amp;&amp; z &lt; 5.0;\r\nis optimal in most cases (unless you expect the `&amp;&amp;` expression to generate many branch mispredictions).",
          "up_vote_count": 509,
          "tags": [],
          "creation_date": 1444437042,
          "is_accepted": false,
          "answer_id": 33048998
        },
        {
          "last_activity_date": 1485862773,
          "score": 560,
          "down_vote_count": 1,
          "last_edit_date": 1485862773,
          "body_markdown": "An official answer would be from\r\n\r\n 1. [Intel - Avoiding the Cost of Branch Misprediction][1]\r\n 2. [Intel - Branch and Loop Reorganization to Prevent Mispredicts][2]\r\n 3. [Scientific papers - branch prediction computer architecture][3]\r\n 4. Books: J.L. Hennessy, D.A. Patterson: Computer architecture: a quantitative approach\r\n 5. Articles in scientific publications: T.Y. Yeh, Y.N. Patt made a lot of these on branch predictions.\r\n\r\nYou can also see from this lovely [diagram][4] why the branch predictor gets confused.\r\n\r\n[![2-bit state diagram][5]][5]\r\n\r\nEach element in the original code is a random value\r\n\r\n    data[c] = std::rand() % 256;\r\n\r\nso the predictor will change sides as the `std::rand()` blow.\r\n\r\nOn the other hand, once it&#39;s sorted, the predictor will first move into a state of strongly not taken and when the values change to the high value the predictor will in three runs through change all the way from strongly not taken to strongly taken.\r\n\r\n  [1]: https://software.intel.com/en-us/articles/avoiding-the-cost-of-branch-misprediction\r\n  [2]: https://software.intel.com/en-us/articles/branch-and-loop-reorganization-to-prevent-mispredicts\r\n  [3]: https://scholar.google.com/scholar?q=branch%20prediction%20computer%20architecture&amp;hl=da&amp;as_sdt=0&amp;as_vis=1&amp;oi=scholart\r\n  [4]: https://en.wikipedia.org/wiki/Branch_predictor#/media/File:Branch_prediction_2bit_saturating_counter-dia.svg\r\n  [5]: https://i.stack.imgur.com/pBMV2.png\r\n** **\r\n\r\n\r\n\r\n\r\n\r\n",
          "up_vote_count": 561,
          "tags": [],
          "creation_date": 1444597518,
          "is_accepted": false,
          "answer_id": 33070112
        },
        {
          "last_activity_date": 1484676151,
          "score": 175,
          "down_vote_count": 1,
          "last_edit_date": 1484676151,
          "body_markdown": "This question has already been answered excellently many times over. Still I&#39;d like to draw the group&#39;s attention to yet another interesting analysis.\r\n\r\nRecently this example (modified very slightly) was also used as a way to demonstrate how a piece of code can be profiled within the program itself on Windows. Along the way, the author also shows how to use the results to determine where the code is spending most of its time in both the sorted &amp; unsorted case. Finally the piece also shows how to use a little known feature of the HAL (Hardware Abstraction Layer) to determine just how much branch misprediction is happening in the unsorted case.\r\n\r\nThe link is here:\r\nhttp://www.geoffchappell.com/studies/windows/km/ntoskrnl/api/ex/profile/demo.htm\r\n",
          "up_vote_count": 176,
          "tags": [],
          "creation_date": 1484185828,
          "is_accepted": false,
          "answer_id": 41603849
        },
        {
          "last_activity_date": 1515054227,
          "score": 158,
          "down_vote_count": 0,
          "last_edit_date": 1515054227,
          "body_markdown": "That&#39;s for sure!...\r\n\r\n**Branch Prediction** makes the logic run slower, because of the switching which happens in the code! It&#39;s like you are going a straight street or a street with a lot of turnings, for sure the straight one gonna be done quicker!...\r\n\r\nIf the array is sorted, your condition is false at the first step: `data[c] &gt;= 128`, then becomes a true value for the whole way to the end of the street. That&#39;s how you get to the end of the logic faster. on the other hand, using unsorted array, you need alot of turning and processing which make your code run slower for sure...\r\n\r\nLook at the image I created for you below, which street gonna be finished faster?\r\n\r\n[![Branch Prediction][1]][1]\r\n\r\nSo programmatically, **Branch Prediction** causes the process be slower...\r\n\r\nAlso at the end, it&#39;s good to know we have 2 kinds of branch predictions that each gonna effects your code differently:\r\n\r\n **1. static**\r\n\r\n **2. dynamic**\r\n\r\n[![enter image description here][2]][2]\r\n\r\n&gt; Static branch prediction is used by the microprocessor the first time\r\n&gt; a conditional branch is encountered, and dynamic branch prediction is\r\n&gt; used for succeeding executions of the conditional branch code.\r\n\r\n&gt; In order to effectively write your code to take advantage of these\r\n&gt; rules, when writing **if-else** or **switch** statements, check the most\r\n&gt; common cases first and work progressively down to the least common.\r\n&gt; Loops do not necessarily require any special ordering of code for\r\n&gt; static branch prediction, as only the condition of the loop iterator\r\n&gt; is normally used.\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/cSmCa.jpg\r\n  [2]: https://i.stack.imgur.com/ZfhDu.jpg",
          "up_vote_count": 158,
          "tags": [],
          "creation_date": 1497786043,
          "is_accepted": false,
          "answer_id": 44614591
        },
        {
          "last_activity_date": 1501870345,
          "score": 81,
          "down_vote_count": 0,
          "last_edit_date": 1501870345,
          "body_markdown": "**Branch-prediction gain!**. It is important to understand, branch misprediction doesn&#39;t slow down programs. Cost of missed prediction is just as if branch prediction didn&#39;t exist and you waited for the evaluation of the expression to decide what code to run (further explanation in the next paragraph).\r\n\r\n\r\n    if (expression)\r\n    {\r\n        // run 1\r\n    } else {\r\n        // run 2\r\n    }\r\n\r\n&lt;br&gt;Whenever there&#39;s an `if-else` \\ `switch` statement, the expression has to be evaluated to determine which block should be executed. In the assembly code generated by the compiler, conditional [branch][1] instructions are inserted. A branch instruction can cause a computer to begin executing a different instruction sequence and thus deviate from its default behavior of executing instructions in order (i.e. if the expression is false, the program skips the code of the `if` block) depending on some condition, which is the expression evaluation in our case.\r\n\r\nThat being said, the compiler tries to predict the outcome prior to it being actually evaluated. It will fetch instructions from the `if` block, if the expression turns out to be true, then wonderful! we gained the time it took to evaluate it and made progress in the code, if not then we are running the wrong code, the pipeline is flushed and the correct block is run. \r\n\r\n**Visualization:**\r\nLets say you need to pick route 1 or route 2. Waiting for your partner to check the map, you have stopped at ## and waited, or you could just pick route1 and if you were lucky (route 1 is the correct route), then great you didn&#39;t have to wait for your partner to check the map (you saved the time it would have taken him to check the map), otherwise you will just turn back. While flushing pipelines is super fast now-a-day taking this gamble is worthy. Predicting sorted data or a data that changes slowly is always easier and better than predicting fast changes. \r\n\r\n    \r\n     O       route1  /-------------------------------\r\n    /|\\             /\r\n     |  ---------##/    \r\n    / \\            \\ \r\n                    \\\r\n             route2  \\--------------------------------\r\n\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Branch_(computer_science)",
          "up_vote_count": 81,
          "tags": [],
          "creation_date": 1501841232,
          "is_accepted": false,
          "answer_id": 45503985
        },
        {
          "last_activity_date": 1507024074,
          "score": 42,
          "down_vote_count": 0,
          "body_markdown": "It&#39;s about branch prediction, what is it?\r\n\r\n•Branch predictor is one of the ancient performance improving techniques which still finds \r\nrelevance into modern architectures. While the simple prediction techniques provide fast \r\nlookup and power efficiency they suffer from high misprediction rate. \r\n\r\n•On the other hand, complex branch predictions –either neural based or variants of two-level branch prediction –provide better prediction accuracy but consume more power and complexity increases exponentially.\r\n\r\n•In addition to this, in complex prediction techniques the time taken to predict the branches is itself very high –ranging from 2 to 5 cycles –which is comparable to the execution time of actual branches.   \r\n\r\n\r\n•Branch prediction is essentially an optimization (minimization) problem where the emphasis is on to achieve lowest possible miss rate, low power consumption and low complexity with minimum resources. \r\n\r\n\r\nThere really are three different kinds of branches: \r\n\r\n**Forward conditional branches** - based on a run-time condition, the PC (Program Counter) is changed to point to an address forward in the instruction stream. \r\n\r\n**Backward conditional branches** - the PC is changed to point backward in the instruction stream. The branch is based on some condition, such as branching backwards to the beginning of a program loop when a test at the end of the loop states the loop should be executed again. \r\n\r\n**Unconditional branches** - this includes jumps, procedure calls and returns that have no \r\nspecific condition. For example, an unconditional jump instruction might be coded in assembly language as simply &quot;jmp&quot;, and the instruction stream must immediately be directed to the target location pointed to by the jump instruction, whereas a conditional jump that might be coded as &quot;jmpne&quot; would redirect the instruction stream only if the result of a comparison of two values in a previous &quot;compare&quot; instructions shows the values to not be equal. (The segmented addressing scheme used by the x86 architecture adds extra complexity, since jumps can be either &quot;near&quot; (within a segment) or &quot;far&quot; (outside the segment). Each type has different effects on branch prediction algorithms.) \r\n\r\n\r\n**Static/dynamic Branch Prediction** : Static branch prediction is used by the microprocessor the first time a conditional branch is encountered, and dynamic branch prediction is used for succeeding executions of the conditional branch code.\r\n\r\n\r\nRefrences:\r\n\r\nhttps://en.wikipedia.org/wiki/Branch_predictor\r\n\r\nhttp://www.geoffchappell.com/studies/windows/km/ntoskrnl/api/ex/profile/demo.htm\r\n\r\nhttps://courses.cs.washington.edu/courses/csep548/06au/lectures/branchPred.pdf\r\n\r\nhttps://web.njit.edu/~rlopes/Mod5.3.pdf",
          "up_vote_count": 42,
          "tags": [],
          "creation_date": 1507024074,
          "is_accepted": false,
          "answer_id": 46541691
        },
        {
          "last_activity_date": 1509984916,
          "score": 66,
          "down_vote_count": 0,
          "body_markdown": "As what has already been mentioned by others, what behind the mystery is [Branch Predictor][1]. \r\n\r\nI&#39;m not trying to add something but explaining the concept in another way. \r\nThere is concise introduction on the wiki which contains text and diagram.\r\nI do like the explanation below which uses diagram to elaborate the Branch Predictor intuitively.\r\n\r\n&gt; In computer architecture, a branch predictor is a\r\n&gt; digital circuit that tries to guess which way a branch (e.g. an\r\n&gt; if-then-else structure) will go before this is known for sure. The\r\n&gt; purpose of the branch predictor is to improve the flow in the\r\n&gt; instruction pipeline. Branch predictors play a critical role in\r\n&gt; achieving high effective performance in many modern pipelined\r\n&gt; microprocessor architectures such as x86.\r\n&gt; \r\n&gt; Two-way branching is usually implemented with a conditional jump\r\n&gt; instruction. A conditional jump can either be &quot;not taken&quot; and continue\r\n&gt; execution with the first branch of code which follows immediately\r\n&gt; after the conditional jump, or it can be &quot;taken&quot; and jump to a\r\n&gt; different place in program memory where the second branch of code is\r\n&gt; stored. It is not known for certain whether a conditional jump will be\r\n&gt; taken or not taken until the condition has been calculated and the\r\n&gt; conditional jump has passed the execution stage in the instruction\r\n&gt; pipeline (see fig. 1).\r\n\r\n\r\n\r\n [![figure 1][2]][2]\r\n\r\nBased on described scenario, I have written an animation demo to show how instructions are executed in pipeline in different situations.\r\n\r\n 1. Without the Branch Predictor. \r\n\r\n&gt;  Without branch prediction, the processor would have to wait until the\r\n&gt; conditional jump instruction has passed the execute stage before the\r\n&gt; next instruction can enter the fetch stage in the pipeline.\r\n\r\nThe example contains three instructions and the first one is a conditional jump instruction. The latter two instructions can go into the pipeline until the conditional jump instruction is executed. \r\n\r\n[![without branch predictor][3]][3]\r\n\r\nIt will take 9 clock cycles for 3 instructions to be completed.\r\n\r\n 2. Use Branch Predictor and don&#39;t take conditional jump. Let&#39;s assume that the predict is **not** taking the conditional jump.\r\n\r\n[![enter image description here][4]][4]\r\n\r\nIt will take 7 clock cycles for 3 instructions to be completed.\r\n\r\n 3. Use Branch Predictor and take conditional jump. Let&#39;s assume that the predict is **not** taking the conditional jump.\r\n\r\n[![enter image description here][5]][5]\r\n\r\nIt will take 9 clock cycles for 3 instructions to be completed.\r\n\r\n&gt; The time that is wasted in case of a branch misprediction is equal to\r\n&gt; the number of stages in the pipeline from the fetch stage to the\r\n&gt; execute stage. Modern microprocessors tend to have quite long\r\n&gt; pipelines so that the misprediction delay is between 10 and 20 clock\r\n&gt; cycles. As a result, making a pipeline longer increases the need for a\r\n&gt; more advanced branch predictor.\r\n\r\nAs you can see, it seems we don&#39;t have reason not to use Branch Predictor.\r\n\r\nIt&#39;s quite a simple demo that clarifies the very basic part of Branch Predictor. If those gifs are annoying, please feel free to remove them from the answer and visitors can also get the demo from [git][6]\r\n\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Branch_predictor\r\n  [2]: https://i.stack.imgur.com/unxnb.png\r\n  [3]: https://i.stack.imgur.com/GMFQ6.gif\r\n  [4]: https://i.stack.imgur.com/Ms5p1.gif\r\n  [5]: https://i.stack.imgur.com/HIpG3.gif\r\n  [6]: https://github.com/Gearon/BPViewer.git",
          "up_vote_count": 66,
          "tags": [],
          "creation_date": 1509984916,
          "is_accepted": false,
          "answer_id": 47141245
        },
        {
          "last_activity_date": 1514721984,
          "score": 26,
          "down_vote_count": 1,
          "last_edit_date": 1514721984,
          "body_markdown": "Besides the fact that the branch prediction may slow you down, a sorted array has another advantage:   \r\nYou can have a stop condition instead of just checking the value, this way you only loop over the relevant data, and ignore the rest.   \r\nThe branch prediction will miss only once.\r\n\r\n     // sort backwards (higher values first)\r\n     std::sort(data, data + arraySize, std::greater&lt;int&gt;());\r\n\r\n     for (unsigned c = 0; c &lt; arraySize; ++c)\r\n     {\r\n           if (data[c] &lt; 128)\r\n                  break;\r\n           sum += data[c];               \r\n     }",
          "up_vote_count": 27,
          "tags": [],
          "creation_date": 1511447309,
          "is_accepted": false,
          "answer_id": 47457772
        },
        {
          "last_activity_date": 1513330156,
          "score": 5,
          "down_vote_count": 11,
          "last_edit_date": 1513330156,
          "body_markdown": "In Simple Words: Summary of everyone&#39;s wonderful answers for beginners...&lt;br&gt;\r\nThis happens due to something called the branch prediction. &lt;br&gt;\r\nBasically what happens is that the computer predicts the next step and executes it, if its wrong, it comes one step back and executes with another prediction and if its right, then it will just continue. The answer your question is very simple. If the array is unsorted, the computer has to make many predictions which may lead to an increased chance of errors. But if the data is sorted, the computer makes fewer predictions and there is less chance of error.&lt;br&gt;\r\n\r\nSorted Array: Striaght Road&lt;br&gt;\r\n____________________________________________________________________________&lt;br&gt;\r\n-&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; &lt;br&gt;\r\nTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT&lt;br&gt;\r\n\r\nUnsorted Array: Curved Road&lt;br&gt;\r\n______&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_______&lt;br&gt;\r\n|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|__|\r\n\r\nBranch Prediction: Guessing/Predicting Which road is staight and following it without checking&lt;br&gt;\r\n___________________________________________ Straight Road&lt;br&gt;\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;|_________________________________________|Longer Road&lt;br&gt;\r\nAlthough Both the road reach the same destination, Straight road is shorter and the other is longer. If the you choose the other by mistake, there is no turning back and so you will waste some extra time if you choose the longer road. THis is similar to what happens in the computer, I hope this helped you understand better.&lt;br&gt;\r\nThank you.",
          "up_vote_count": 16,
          "tags": [],
          "creation_date": 1512667709,
          "is_accepted": false,
          "answer_id": 47700573
        },
        {
          "last_activity_date": 1513948385,
          "score": 19,
          "down_vote_count": 0,
          "body_markdown": "On ARM, there is no branch needed, because every instruction has a 4-bit condition field, which is tested at zero cost. This eliminates the need for short branches. The inner loop would look something like the following, and there would be no branch prediction hit. Therefore, the sorted version would run slower than the unsorted version on ARM, because of the extra overhead of sorting:\r\n\r\n    MOV R0, #0     // R0 = sum = 0\r\n    MOV R1, #0     // R1 = c = 0\r\n    ADR R2, data   // R2 = addr of data array (put this instruction outside outer loop)\r\n    .inner_loop    // Inner loop branch label\r\n        LDRB R3, [R2, R1]     // R3 = data[c]\r\n        CMP R3, #128          // compare R3 to 128\r\n        ADDGE R0, R0, R3      // if R3 &gt;= 128, then sum += data[c] -- no branch needed!\r\n        ADD R1, R1, #1        // c++\r\n        CMP R1, #arraySize    // compare c to arraySize\r\n        BLT inner_loop        // Branch to inner_loop if c &lt; arraySize\r\n\r\n",
          "up_vote_count": 19,
          "tags": [],
          "creation_date": 1513948385,
          "is_accepted": false,
          "answer_id": 47942152
        }
      ],
      "answer_count": 21,
      "link": "https://stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array",
      "last_edit_date": 1519930284,
      "creation_date": 1340805096,
      "up_vote_count": 20754,
      "view_count": 1167058,
      "body_markdown": "Here is a piece of C++ code that seems very peculiar. For some strange reason, sorting the data miraculously makes the code almost six times faster.\r\n\r\n&lt;!-- language: lang-cpp --&gt;\r\n\r\n    #include &lt;algorithm&gt;\r\n    #include &lt;ctime&gt;\r\n    #include &lt;iostream&gt;\r\n\r\n    int main()\r\n    {\r\n        // Generate data\r\n        const unsigned arraySize = 32768;\r\n        int data[arraySize];\r\n\r\n        for (unsigned c = 0; c &lt; arraySize; ++c)\r\n            data[c] = std::rand() % 256;\r\n\r\n        // !!! With this, the next loop runs faster\r\n        std::sort(data, data + arraySize);\r\n\r\n        // Test\r\n        clock_t start = clock();\r\n        long long sum = 0;\r\n\r\n        for (unsigned i = 0; i &lt; 100000; ++i)\r\n        {\r\n            // Primary loop\r\n            for (unsigned c = 0; c &lt; arraySize; ++c)\r\n            {\r\n                if (data[c] &gt;= 128)\r\n                    sum += data[c];\r\n            }\r\n        }\r\n\r\n        double elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;\r\n\r\n        std::cout &lt;&lt; elapsedTime &lt;&lt; std::endl;\r\n        std::cout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; std::endl;\r\n    }\r\n\r\n - Without `std::sort(data, data + arraySize);`, the code runs in 11.54 seconds.\r\n - With the sorted data, the code runs in 1.93 seconds.\r\n\r\nInitially, I thought this might be just a language or compiler anomaly. So I tried it in Java.\r\n\r\n&lt;!-- language: lang-java --&gt;\r\n\r\n    import java.util.Arrays;\r\n    import java.util.Random;\r\n\r\n    public class Main\r\n    {\r\n        public static void main(String[] args)\r\n        {\r\n            // Generate data\r\n            int arraySize = 32768;\r\n            int data[] = new int[arraySize];\r\n\r\n            Random rnd = new Random(0);\r\n            for (int c = 0; c &lt; arraySize; ++c)\r\n                data[c] = rnd.nextInt() % 256;\r\n\r\n            // !!! With this, the next loop runs faster\r\n            Arrays.sort(data);\r\n\r\n            // Test\r\n            long start = System.nanoTime();\r\n            long sum = 0;\r\n\r\n            for (int i = 0; i &lt; 100000; ++i)\r\n            {\r\n                // Primary loop\r\n                for (int c = 0; c &lt; arraySize; ++c)\r\n                {\r\n                    if (data[c] &gt;= 128)\r\n                        sum += data[c];\r\n                }\r\n            }\r\n\r\n            System.out.println((System.nanoTime() - start) / 1000000000.0);\r\n            System.out.println(&quot;sum = &quot; + sum);\r\n        }\r\n    }\r\n\r\nWith a somewhat similar but less extreme result.\r\n\r\n----------\r\n\r\nMy first thought was that sorting brings the data into the cache, but then I thought how silly that is because the array was just generated.\r\n\r\n - What is going on?\r\n - Why is it faster to process a sorted array than an unsorted array?\r\n - The code is summing up some independent terms, and the order should not matter.\r\n\r\n"
    }
  ]
}