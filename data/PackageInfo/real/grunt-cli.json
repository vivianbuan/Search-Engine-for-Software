{"_childDocuments_": [{"tags": ["json", "node.js", "npm"], "_childDocuments_": [{"tags": [], "down_vote_count": 3, "creation_date": 1352905358, "answer_id": 13381344, "path": "stack.gulp.answer", "score": 148, "up_vote_count": 151, "is_accepted": false, "last_activity_date": 1352905358, "body_markdown": "I just wrote a simple script to collect the dependencies in ./node_modules. It fulfills my requirement at the moment. This may help some others, I post it here.\r\n\r\n    var fs = require(&quot;fs&quot;);\r\n\r\n    function main() {\r\n      fs.readdir(&quot;./node_modules&quot;, function (err, dirs) {\r\n        if (err) {\r\n          console.log(err);\r\n          return;\r\n        }\r\n        dirs.forEach(function(dir){\r\n          if (dir.indexOf(&quot;.&quot;) !== 0) {\r\n            var packageJsonFile = &quot;./node_modules/&quot; + dir + &quot;/package.json&quot;;\r\n            if (fs.existsSync(packageJsonFile)) {\r\n              fs.readFile(packageJsonFile, function (err, data) {\r\n                if (err) {\r\n                  console.log(err);\r\n                }\r\n                else {\r\n                  var json = JSON.parse(data);\r\n                  console.log(&#39;&quot;&#39;+json.name+&#39;&quot;: &quot;&#39; + json.version + &#39;&quot;,&#39;);\r\n                }\r\n              });\r\n            }\r\n          }\r\n        });\r\n    \r\n      });\r\n    }\r\n    \r\n    main();\r\n\r\nIn my case, the above script outputs:\r\n\r\n    &quot;colors&quot;: &quot;0.6.0-1&quot;,\r\n    &quot;commander&quot;: &quot;1.0.5&quot;,\r\n    &quot;htmlparser&quot;: &quot;1.7.6&quot;,\r\n    &quot;optimist&quot;: &quot;0.3.5&quot;,\r\n    &quot;progress&quot;: &quot;0.1.0&quot;,\r\n    &quot;request&quot;: &quot;2.11.4&quot;,\r\n    &quot;soupselect&quot;: &quot;0.2.0&quot;,   // Remember: remove the comma character in the last line.\r\n\r\nNow, you can copy&amp;paste them. Have fun!"}, {"tags": [], "down_vote_count": 2, "creation_date": 1354728139, "answer_id": 13728837, "path": "stack.gulp.answer", "score": 540, "up_vote_count": 542, "is_accepted": false, "last_activity_date": 1502055514, "last_edit_date": 1502055514, "body_markdown": "The package.json file is used by **npm** to learn about your node.js project.\r\n\r\nUse `npm init` to generate package.json files for you!\r\n\r\nIt comes bundled with npm. Read its documentation here: https://docs.npmjs.com/cli/init\r\n\r\nAlso, there is a tool you can use in your own projects to generate this file programmatically (it&#39;s made by the maker of npm): https://github.com/isaacs/init-package-json"}, {"tags": [], "down_vote_count": 3, "creation_date": 1359921116, "answer_id": 14676564, "path": "stack.gulp.answer", "score": 187, "up_vote_count": 190, "is_accepted": false, "last_activity_date": 1402050244, "last_edit_date": 1402050244, "body_markdown": "First off, run\r\n\r\n    npm init\r\n\r\n...will ask you a few questions ([read this first](https://www.npmjs.org/doc/json.html)) about your project/package and then generate a package.json file for you.\r\n\r\nThen, once you have a package.json file, use\r\n\r\n    npm install &lt;pkg&gt; --save\r\n\r\nor\r\n\r\n    npm install &lt;pkg&gt; --save-dev\r\n\r\n...to install a dependency and automatically it to your `package.json`&#39;s `dependencies` list.\r\n\r\n(Note: You may need to manually tweak the version ranges for your dependencies.)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1389731366, "answer_id": 21123358, "path": "stack.gulp.answer", "score": 74, "up_vote_count": 74, "is_accepted": false, "last_activity_date": 1392327810, "last_edit_date": 1392327810, "body_markdown": "`npm init`\r\n\r\n to create the package.json file and then you use \r\n\r\n`ls node_modules/ |xargs npm install --save` \r\n\r\nto fill in the modules you have in the node_modules folder.\r\n\r\nEdit: @paldepind pointed out that the second command is redundant because `npm init` now automatically adds what you have in your node_modules/ folder. I don&#39;t know if this has always been the case, but now at least, it works without the second command."}, {"tags": [], "down_vote_count": 0, "creation_date": 1392555351, "answer_id": 21811398, "path": "stack.gulp.answer", "score": 23, "up_vote_count": 23, "is_accepted": false, "last_activity_date": 1392627332, "last_edit_date": 1392627332, "body_markdown": "**Command line**:\r\n\r\n    npm init\r\n\r\nwill create package.json file \r\n\r\nTo install , update and uninstall packages under dependencies into package.json file: \r\n \r\n**Command line** :\r\n\r\n    npm install &lt;pkg&gt;@* --save \r\n\r\nwill automatically add the latest version for the package under dependencies into           package.json file  \r\n\r\nEX: \r\n\r\n    npm install node-markdown@* --save\r\n\r\n**Command line**: \r\n\r\n    npm install &lt;pkg&gt; --save\r\n\r\n\r\nalso will automatically add the latest version for the package under dependencies into package.json file\r\n\r\n**if** you need specific version for a package use this **Command line**:\r\n\r\n    npm install &lt;pkg&gt;@&lt;version&gt; --save\r\n\r\nwill automatically add specific version of package under dependencies into package.json file\r\n\r\nEX:\r\n\r\n\r\n    npm install koa-views@1.0.0 --save\r\n\r\n \r\n**if** you need specific range of version for a package use this **Command line**:\r\n\r\n    npm install &lt;pkg&gt;@&lt;version range&gt;\r\n\r\nwill automatically add the latest version for the package between range of version under dependencies into package.json file\r\n\r\nEX:\r\n\r\n    npm install koa-views@&quot;&gt;1.0.0 &lt;1.2.0&quot; --save\r\n\r\n**For** more details about how to write version for package [npm Doc][1]  \r\n\r\n\r\n  [1]: https://www.npmjs.org/doc/files/package.json.html#dependencies\r\n\r\n**Command line**:\r\n\r\n    npm update --save\r\n\r\nwill update packages  into package.json file and will automatically add updated version for all packages under dependencies into package.json file\r\n\r\n**Command line**:\r\n\r\n    npm uninstall &lt;pkg&gt; --save\r\n\r\nwill automatically remove package from dependencies into package.json file and remove package from node_module folder "}, {"tags": [], "down_vote_count": 0, "creation_date": 1413986849, "answer_id": 26509432, "path": "stack.gulp.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1413986849, "body_markdown": "Based on Pylinux&#39;s answer, below is a solution for Windows OS,\r\n\r\n    dir node_modules &gt; abc.txt\r\n    FOR /F %k in (abc.txt) DO npm install --save\r\n\r\nHope it helps."}, {"tags": [], "down_vote_count": 0, "creation_date": 1439650063, "answer_id": 32025833, "path": "stack.gulp.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1445411443, "last_edit_date": 1445411443, "body_markdown": "You can now use [Yeoman - Modern Web App Scaffolding Tool][1] on node terminal using 3 easy steps.\r\n\r\nFirst, you&#39;ll need to install yo and other required tools:\r\n\r\n    $ npm install -g yo bower grunt-cli gulp\r\n\r\nTo scaffold a web application, install the *generator-webapp* generator:\r\n\r\n    $ npm install -g generator-webapp  // create scaffolding \r\n\r\nRun yo and... you are all done: \r\n\r\n    $ yo webapp  // create scaffolding \r\n\r\n\r\nYeoman can write boilerplate code for your entire web application or Controllers and Models. It can fire up a live-preview web server for edits and compile; not just that you can also run your unit tests, minimize and concatenate your code, optimize images, and more...\r\n\r\n**[Yeoman (yo)][1]** - scaffolding tool that offers an ecosystem of framework-specific scaffolds, called generators, that can be used to perform some of the tedious tasks mentioned earlier.\r\n\r\n**[Grunt][2] / [gulp][3]** - used to build, preview, and test your project.\r\n\r\n**[Bower][4]** - is used for dependency management, so that you no longer have to manually download your front-end libraries.\r\n\r\n\r\n  [1]: http://yeoman.io/\r\n  [2]: http://gruntjs.com/\r\n  [3]: http://gulpjs.com/\r\n  [4]: http://bower.io/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1444806960, "answer_id": 33118953, "path": "stack.gulp.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1444806960, "body_markdown": "use command npm init -f to generate package.json file and after that use --save after each command so that each module will automatically get updated inside your package.json\r\nfor ex: npm install express --save\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1467902387, "answer_id": 38248386, "path": "stack.gulp.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1467902387, "body_markdown": "Running `npm init -y` makes your `package.json` with all the defaults.\r\n&lt;br&gt;\r\nYou can then change `package.json` accordingly\r\n&lt;br&gt;\r\nThis saves time many a times by preventing pressing `enter` on every command in `npm init`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1519918242, "answer_id": 49053110, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1519918242, "body_markdown": "## 1. Choice\r\n\r\n**If** you git and GitHub user:\r\n\r\n\u2005\u2005\u2005\u2005[**`generate-package`**](https://www.npmjs.com/package/generate-package) more simply, than `npm init`.\r\n\r\n**else**\r\n\r\n**and/or** you don&#39;t like `package.json` template, that generate-package or `npm init` generate:\r\n\r\n\u2005\u2005\u2005\u2005you can generate your own template via scaffolding apps as [**generate**](https://www.npmjs.com/package/generate), [**sails**](https://sailsjs.com/) or [**yeoman**](http://yeoman.io/).\r\n\r\n---\r\n\r\n## 2. Relevance\r\n\r\nThis answer is relevant for March 2018. In the future, the data from this answer may be obsolete.\r\n\r\nAuthor of this answer personally used generate-package at March 2018.\r\n\r\n---\r\n\r\n## 3. Limitations\r\n\r\nYou need use git and GitHub for using generate-package.\r\n\r\n---\r\n\r\n## 4. Demonstration\r\n\r\nFor example, I create blank folder `sasha-npm-init-vs-generate-package`.\r\n\r\n### 4.1. generate-package\r\n\r\nCommand:\r\n\r\n&lt;!-- language: lang-node --&gt;\r\n\r\n    D:\\SashaDemoRepositories\\sasha-npm-init-vs-generate-package&gt;gen package\r\n    [16:58:52] starting generate\r\n    [16:59:01] \u221a running tasks: [ &#39;package&#39; ]\r\n    [16:59:04] starting package\r\n    ? Project description? generate-package demo\r\n    ? Author&#39;s name? Sasha Chernykh\r\n    ? Author&#39;s URL? https://vk.com/hair_in_the_wind\r\n    [17:00:19] finished package \u221a 1m\r\n\r\n`package.json`:\r\n\r\n&lt;!-- language: lang-json --&gt;\r\n\r\n    {\r\n      &quot;name&quot;: &quot;sasha-npm-init-vs-generate-package&quot;,\r\n      &quot;description&quot;: &quot;generate-package demo&quot;,\r\n      &quot;version&quot;: &quot;0.1.0&quot;,\r\n      &quot;homepage&quot;: &quot;https://github.com/Kristinita/sasha-npm-init-vs-generate-package&quot;,\r\n      &quot;author&quot;: &quot;Sasha Chernykh (https://vk.com/hair_in_the_wind)&quot;,\r\n      &quot;repository&quot;: &quot;Kristinita/sasha-npm-init-vs-generate-package&quot;,\r\n      &quot;bugs&quot;: {\r\n        &quot;url&quot;: &quot;https://github.com/Kristinita/sasha-npm-init-vs-generate-package/issues&quot;\r\n      },\r\n      &quot;license&quot;: &quot;MIT&quot;,\r\n      &quot;engines&quot;: {\r\n        &quot;node&quot;: &quot;&gt;=4&quot;\r\n      },\r\n      &quot;scripts&quot;: {\r\n        &quot;test&quot;: &quot;mocha&quot;\r\n      },\r\n      &quot;keywords&quot;: [\r\n        &quot;generate&quot;,\r\n        &quot;init&quot;,\r\n        &quot;npm&quot;,\r\n        &quot;package&quot;,\r\n        &quot;sasha&quot;,\r\n        &quot;vs&quot;\r\n      ]\r\n    }\r\n\r\n### 4.2. npm init\r\n\r\n&lt;!-- language: lang-json --&gt;\r\n\r\n    D:\\SashaDemoRepositories\\sasha-npm-init-vs-generate-package&gt;npm init\r\n    This utility will walk you through creating a package.json file.\r\n    It only covers the most common items, and tries to guess sensible defaults.\r\n\r\n    See `npm help json` for definitive documentation on these fields\r\n    and exactly what they do.\r\n\r\n    Use `npm install &lt;pkg&gt;` afterwards to install a package and\r\n    save it as a dependency in the package.json file.\r\n\r\n    Press ^C at any time to quit.\r\n    package name: (sasha-npm-init-vs-generate-package)\r\n    version: (1.0.0) 0.1.0\r\n    description: npm init demo\r\n    entry point: (index.js)\r\n    test command: mocha\r\n    git repository: https://github.com/Kristinita/sasha-npm-init-vs-generate-package\r\n    keywords: generate, package, npm, package, sasha, vs\r\n    author: Sasha Chernykh\r\n    license: (ISC) MIT\r\n    About to write to D:\\SashaDemoRepositories\\sasha-npm-init-vs-generate-package\\package.json:\r\n\r\n    {\r\n      &quot;name&quot;: &quot;sasha-npm-init-vs-generate-package&quot;,\r\n      &quot;version&quot;: &quot;0.1.0&quot;,\r\n      &quot;description&quot;: &quot;npm init demo&quot;,\r\n      &quot;main&quot;: &quot;index.js&quot;,\r\n      &quot;scripts&quot;: {\r\n        &quot;test&quot;: &quot;mocha&quot;\r\n      },\r\n      &quot;repository&quot;: {\r\n        &quot;type&quot;: &quot;git&quot;,\r\n        &quot;url&quot;: &quot;git+https://github.com/Kristinita/sasha-npm-init-vs-generate-package.git&quot;\r\n      },\r\n      &quot;keywords&quot;: [\r\n        &quot;generate&quot;,\r\n        &quot;package&quot;,\r\n        &quot;npm&quot;,\r\n        &quot;package&quot;,\r\n        &quot;sasha&quot;,\r\n        &quot;vs&quot;\r\n      ],\r\n      &quot;author&quot;: &quot;Sasha Chernykh&quot;,\r\n      &quot;license&quot;: &quot;MIT&quot;,\r\n      &quot;bugs&quot;: {\r\n        &quot;url&quot;: &quot;https://github.com/Kristinita/sasha-npm-init-vs-generate-package/issues&quot;\r\n      },\r\n      &quot;homepage&quot;: &quot;https://github.com/Kristinita/sasha-npm-init-vs-generate-package#readme&quot;\r\n    }\r\n\r\n\r\n    Is this ok? (yes) y\r\n\r\n&lt;!-- language: lang-json --&gt;\r\n\r\n    {\r\n      &quot;name&quot;: &quot;sasha-npm-init-vs-generate-package&quot;,\r\n      &quot;version&quot;: &quot;0.1.0&quot;,\r\n      &quot;description&quot;: &quot;npm init demo&quot;,\r\n      &quot;main&quot;: &quot;index.js&quot;,\r\n      &quot;scripts&quot;: {\r\n        &quot;test&quot;: &quot;mocha&quot;\r\n      },\r\n      &quot;repository&quot;: {\r\n        &quot;type&quot;: &quot;git&quot;,\r\n        &quot;url&quot;: &quot;git+https://github.com/Kristinita/sasha-npm-init-vs-generate-package.git&quot;\r\n      },\r\n      &quot;keywords&quot;: [\r\n        &quot;generate&quot;,\r\n        &quot;package&quot;,\r\n        &quot;npm&quot;,\r\n        &quot;package&quot;,\r\n        &quot;sasha&quot;,\r\n        &quot;vs&quot;\r\n      ],\r\n      &quot;author&quot;: &quot;Sasha Chernykh&quot;,\r\n      &quot;license&quot;: &quot;MIT&quot;,\r\n      &quot;bugs&quot;: {\r\n        &quot;url&quot;: &quot;https://github.com/Kristinita/sasha-npm-init-vs-generate-package/issues&quot;\r\n      },\r\n      &quot;homepage&quot;: &quot;https://github.com/Kristinita/sasha-npm-init-vs-generate-package#readme&quot;\r\n    }\r\n\r\nI think, that `generate-package` more simply, that `npm init`.\r\n\r\n---\r\n\r\n## 5. Customizing\r\n\r\nThat create your own `package.json` template, see [**generate**](https://github.com/generate/generate-package/blob/master/templates/%24package.json) and [**yeoman**](https://github.com/cajacko/generator-package-json/blob/develop/generators/app/index.js) examples."}], "creation_date": 1333248356, "body_markdown": "Is package.json supposed to be manually edited? Couldn&#39;t a program like npm just look through the files, see the &quot;require&quot; statements, and then use that to put the necessary entries in the package.json file? Are there any programs like that?", "title": "Is there a way to automatically build the package.json file for Node.js projects", "view_count": 199537, "up_vote_count": 346, "answer_count": 10, "link": "https://stackoverflow.com/questions/9961502/is-there-a-way-to-automatically-build-the-package-json-file-for-node-js-projects", "code_snippet": ["<code>npm link</code>", "<code>npm init</code>", "<code>npm init</code>", "<code>npm shrinkwrap</code>", "<code>npm-shrinkwrap.json</code>", "<code>npm init</code>", "<code>npm install &lt;pkg&gt; --save</code>", "<code>npm init</code>", "<code>[...] Press ^C at any time to quit.</code>", "<code>npm init\n</code>", "<code>npm install &lt;pkg&gt; --save\n</code>", "<code>npm install &lt;pkg&gt; --save-dev\n</code>", "<code>package.json</code>", "<code>dependencies</code>", "<code>npm uninstall &lt;pkg&gt; --save</code>", "<code>package.json</code>", "<code>var fs = require(\"fs\");\n\nfunction main() {\n  fs.readdir(\"./node_modules\", function (err, dirs) {\n    if (err) {\n      console.log(err);\n      return;\n    }\n    dirs.forEach(function(dir){\n      if (dir.indexOf(\".\") !== 0) {\n        var packageJsonFile = \"./node_modules/\" + dir + \"/package.json\";\n        if (fs.existsSync(packageJsonFile)) {\n          fs.readFile(packageJsonFile, function (err, data) {\n            if (err) {\n              console.log(err);\n            }\n            else {\n              var json = JSON.parse(data);\n              console.log('\"'+json.name+'\": \"' + json.version + '\",');\n            }\n          });\n        }\n      }\n    });\n\n  });\n}\n\nmain();\n</code>", "<code>\"colors\": \"0.6.0-1\",\n\"commander\": \"1.0.5\",\n\"htmlparser\": \"1.7.6\",\n\"optimist\": \"0.3.5\",\n\"progress\": \"0.1.0\",\n\"request\": \"2.11.4\",\n\"soupselect\": \"0.2.0\",   // Remember: remove the comma character in the last line.\n</code>", "<code>npm ls --depth=0</code>", "<code>a</code>", "<code>a</code>", "<code>b</code>", "<code>c</code>", "<code>a</code>", "<code>b</code>", "<code>c</code>", "<code>a</code>", "<code>npm init</code>", "<code>ls node_modules/ |xargs npm install --save</code>", "<code>npm init</code>", "<code>npm init</code>", "<code>npm dedupe</code>", "<code>node_modules</code>", "<code>package.json</code>", "<code>npm init\n</code>", "<code>npm install &lt;pkg&gt;@* --save \n</code>", "<code>npm install node-markdown@* --save\n</code>", "<code>npm install &lt;pkg&gt; --save\n</code>", "<code>npm install &lt;pkg&gt;@&lt;version&gt; --save\n</code>", "<code>npm install koa-views@1.0.0 --save\n</code>", "<code>npm install &lt;pkg&gt;@&lt;version range&gt;\n</code>", "<code>npm install koa-views@\"&gt;1.0.0 &lt;1.2.0\" --save\n</code>", "<code>npm update --save\n</code>", "<code>npm uninstall &lt;pkg&gt; --save\n</code>", "<code>npm init -y</code>", "<code>package.json</code>", "<code>package.json</code>", "<code>enter</code>", "<code>npm init</code>", "<code>$ npm install -g yo bower grunt-cli gulp\n</code>", "<code>$ npm install -g generator-webapp  // create scaffolding \n</code>", "<code>$ yo webapp  // create scaffolding \n</code>", "<code>dir node_modules &gt; abc.txt\nFOR /F %k in (abc.txt) DO npm install --save\n</code>", "<code>generate-package</code>", "<code>npm init</code>", "<code>package.json</code>", "<code>npm init</code>", "<code>sasha-npm-init-vs-generate-package</code>", "<code>D:\\SashaDemoRepositories\\sasha-npm-init-vs-generate-package&gt;gen package\n[16:58:52] starting generate\n[16:59:01] \u221a running tasks: [ 'package' ]\n[16:59:04] starting package\n? Project description? generate-package demo\n? Author's name? Sasha Chernykh\n? Author's URL? https://vk.com/hair_in_the_wind\n[17:00:19] finished package \u221a 1m\n</code>", "<code>package.json</code>", "<code>{\n  \"name\": \"sasha-npm-init-vs-generate-package\",\n  \"description\": \"generate-package demo\",\n  \"version\": \"0.1.0\",\n  \"homepage\": \"https://github.com/Kristinita/sasha-npm-init-vs-generate-package\",\n  \"author\": \"Sasha Chernykh (https://vk.com/hair_in_the_wind)\",\n  \"repository\": \"Kristinita/sasha-npm-init-vs-generate-package\",\n  \"bugs\": {\n    \"url\": \"https://github.com/Kristinita/sasha-npm-init-vs-generate-package/issues\"\n  },\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \"&gt;=4\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha\"\n  },\n  \"keywords\": [\n    \"generate\",\n    \"init\",\n    \"npm\",\n    \"package\",\n    \"sasha\",\n    \"vs\"\n  ]\n}\n</code>", "<code>D:\\SashaDemoRepositories\\sasha-npm-init-vs-generate-package&gt;npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install &lt;pkg&gt;` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (sasha-npm-init-vs-generate-package)\nversion: (1.0.0) 0.1.0\ndescription: npm init demo\nentry point: (index.js)\ntest command: mocha\ngit repository: https://github.com/Kristinita/sasha-npm-init-vs-generate-package\nkeywords: generate, package, npm, package, sasha, vs\nauthor: Sasha Chernykh\nlicense: (ISC) MIT\nAbout to write to D:\\SashaDemoRepositories\\sasha-npm-init-vs-generate-package\\package.json:\n\n{\n  \"name\": \"sasha-npm-init-vs-generate-package\",\n  \"version\": \"0.1.0\",\n  \"description\": \"npm init demo\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"mocha\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/Kristinita/sasha-npm-init-vs-generate-package.git\"\n  },\n  \"keywords\": [\n    \"generate\",\n    \"package\",\n    \"npm\",\n    \"package\",\n    \"sasha\",\n    \"vs\"\n  ],\n  \"author\": \"Sasha Chernykh\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/Kristinita/sasha-npm-init-vs-generate-package/issues\"\n  },\n  \"homepage\": \"https://github.com/Kristinita/sasha-npm-init-vs-generate-package#readme\"\n}\n\n\nIs this ok? (yes) y\n</code>", "<code>{\n  \"name\": \"sasha-npm-init-vs-generate-package\",\n  \"version\": \"0.1.0\",\n  \"description\": \"npm init demo\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"mocha\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/Kristinita/sasha-npm-init-vs-generate-package.git\"\n  },\n  \"keywords\": [\n    \"generate\",\n    \"package\",\n    \"npm\",\n    \"package\",\n    \"sasha\",\n    \"vs\"\n  ],\n  \"author\": \"Sasha Chernykh\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/Kristinita/sasha-npm-init-vs-generate-package/issues\"\n  },\n  \"homepage\": \"https://github.com/Kristinita/sasha-npm-init-vs-generate-package#readme\"\n}\n</code>", "<code>generate-package</code>", "<code>npm init</code>", "<code>package.json</code>"], "path": "stack.grunt-cli"}, {"tags": ["windows", "node.js", "module", "require", "npm"], "creation_date": 1331050879, "body_markdown": "I am learning nodejs at the moment on Windows. Several modules are installed globally with npm.cmd, and nodejs failed to find the installed modules. Take jade for example,\r\n\r\n    npm install jade -g\r\n\r\nJade is installed in directory `&quot;C:\\Program Files (x86)\\nodejs\\node_modules&quot;`, but the following code will fail with a `&quot;Cannot find module &#39;jade&#39;&quot;` error,\r\n\r\n    var jade = require(&#39;jade&#39;);\r\n\r\nHowever, the code will run successfully when jade is locally installed (without -g option in npm). I don&#39;t want to use locally-installed modules, it&#39;s a waste of disk space for me, can someone help me to make the globally-installed modules work on Windows?", "last_edit_date": 1354416872, "up_vote_count": 190, "link": "https://stackoverflow.com/questions/9587665/nodejs-cannot-find-installed-module-on-windows", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1331052236, "answer_id": 9588052, "path": "stack.gulp.answer", "score": 271, "up_vote_count": 271, "is_accepted": true, "last_activity_date": 1513255115, "last_edit_date": 1513255115, "body_markdown": "Add an environment variable called `NODE_PATH` and set it to `%USERPROFILE%\\Application Data\\npm\\node_modules` (Windows XP), `%AppData%\\npm\\node_modules` (Windows 7/8/10), or wherever npm ends up installing the modules on your Windows flavor. To be done with it once and for all, add this as a System variable in the Advanced tab of the System Properties dialog (run `control.exe sysdm.cpl,System,3`).\r\n\r\nQuick solution in Windows 7+ is to just run:\r\n\r\n    rem for future\r\n    setx NODE_PATH %AppData%\\npm\\node_modules\r\n    rem for current session\r\n    set NODE_PATH=%AppData%\\npm\\node_modules\r\n\r\nIt&#39;s worth to mention that `NODE_PATH` is only used when importing modules in Node apps. When you want to use globally installed modules&#39; binaries in your CLI you need to add it also to your `PATH`, but without `node_modules` part (for example `%AppData%\\npm` in Windows 7/8/10).\r\n\r\n---\r\n_Old story_\r\n\r\n\r\nI&#39;m pretty much new to node.js myself so I can be not entirely right but from my experience it&#39;s works this way:\r\n\r\n1. **-g** is not a way to install global libraries, it&#39;s only a way to place them on system path so you can call them from command line without writing the full path to them. It is useful, for example, then node app is converting local files, like **less** \u2014 if you install it globally you can use it in any directory.\r\n2. node.js itself didn&#39;t look at the npm global dir, it is using another algorithm to find required files: http://nodejs.org/api/modules.html#modules_file_modules (basically its scanning every folder in the path, starting from the current for **node_modules** folder and checks it).\r\n\r\nSee similar question for more details: https://stackoverflow.com/questions/5817874/node-js-npm-is-not-installing-module-in-the-default-path\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1331053623, "answer_id": 9588420, "path": "stack.gulp.answer", "score": 12, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1506585239, "last_edit_date": 1506585239, "body_markdown": "I&#39;ll just quote from this node&#39;s [blog post][1]...\r\n\r\n&gt; In general, the rule of thumb is:\r\n&gt; \r\n&gt; - If you\u2019re installing something that you want to use in your program, using require(&#39;whatever&#39;), then install it locally, at the root of\r\n&gt; your project.\r\n&gt; - If you\u2019re installing something that you want to use in your shell, on the command line or something, install it globally, so that its\r\n&gt; binaries end up in your PATH environment variable.\r\n&gt;  \r\n&gt; ...\r\n&gt; \r\n&gt; Of course, there are some cases where you want to do both.\r\n&gt; Coffee-script and Express both are good examples of apps that have a\r\n&gt; command line interface, as well as a library. In those cases, you can\r\n&gt; do one of the following:\r\n&gt; \r\n&gt; 1. Install it in both places. Seriously, are you that short on disk space? It\u2019s fine, really. They\u2019re tiny JavaScript programs.\r\n&gt; 2. Install it globally, and then npm link coffee-script or npm link express (if you\u2019re on a platform that supports symbolic links.) Then\r\n&gt; you only need to update the global copy to update all the symlinks as\r\n&gt; well.\r\n\r\n\r\n  [1]: https://nodejs.org/en/blog/npm/npm-1-0-global-vs-local-installation/"}, {"tags": [], "down_vote_count": 3, "creation_date": 1331053768, "answer_id": 9588454, "path": "stack.gulp.answer", "score": 9, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1331053768, "body_markdown": "To make it short, use `npm link jade` in your app directory."}, {"tags": [], "down_vote_count": 6, "creation_date": 1360761814, "answer_id": 14854596, "path": "stack.gulp.answer", "score": -3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1360761814, "body_markdown": "if you are using windows , it takes some steps ,\r\n1) create a file called package.json\r\n\r\n     {\r\n      &quot;name&quot;: &quot;hello&quot;\r\n    , &quot;version&quot;: &quot;0.0.1&quot;\r\n    , &quot;dependencies&quot;: {\r\n        &quot;express&quot;: &quot;*&quot;\r\n      }\r\n    }\r\nwhere hello is the name of the package   and * means the latest version of your dependency\r\n\r\n2) code to you project directory and run the following command\r\n   \r\nnpm install\r\n\r\nIt installs the dependencies "}, {"tags": [], "down_vote_count": 1, "creation_date": 1364959622, "answer_id": 15778350, "path": "stack.gulp.answer", "score": 32, "up_vote_count": 33, "is_accepted": false, "last_activity_date": 1445010579, "last_edit_date": 1445010579, "body_markdown": "if you are in the windows7 platform maybe you should change the NODE_PATH like this:\r\n`%AppData%\\npm\\node_modules`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1392746929, "answer_id": 21861962, "path": "stack.gulp.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1392746929, "body_markdown": "Alternatively you could add to `~/.npmrc` right [prefix](https://www.npmjs.org/doc/files/npmrc.html). I&#39;ve got `C:\\Program Files\\nodejs` for 64 Win7."}, {"tags": [], "down_vote_count": 0, "creation_date": 1401806970, "answer_id": 24018268, "path": "stack.gulp.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1401806970, "body_markdown": "From my expierience with win8.1 npm installs modules on \r\n`C:\\Users\\[UserName]\\AppData\\Roaming\\npm\\node_modules` \r\n  but dumply searches them on\r\n`C:\\Users\\[UserName]\\node_modules`.\r\n\r\nOne simple solution reference module in application by full path:\r\n\r\n    var jsonminify = require(&quot;C:/Users/Saulius/AppData/Roaming/npm/node_modules/jsonminify&quot;);"}, {"tags": [], "down_vote_count": 0, "creation_date": 1428372527, "answer_id": 29482574, "path": "stack.gulp.answer", "score": 20, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1483345691, "last_edit_date": 1483345691, "body_markdown": "I know i can awake a zombie but i think this is still a problem, if you need global access to node modules on Windows 7  you need to add this to your global variable path: \r\n\r\n    C:\\Users\\{USER}\\AppData\\Roaming\\npm\r\n\r\nImportant: only this without the `node_modules` part, took me half hour to see this."}, {"tags": [], "down_vote_count": 0, "creation_date": 1437942480, "answer_id": 31641615, "path": "stack.gulp.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1437942480, "body_markdown": "I ran into this issue on Windows 7, running\r\n\r\n    npm install -g gulp\r\n\r\nas administrator while being logged on as a normal user.\r\n\r\n**Solution:** When executing the same installation as normal user (not &quot;run as admin&quot; for cmd) all was fine. I guess it is related to the default install and search path."}, {"tags": [], "down_vote_count": 0, "creation_date": 1452014207, "answer_id": 34617497, "path": "stack.gulp.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1452014207, "body_markdown": "Tried to add/edit environment variables and come to conclude that:\r\n\r\n 1. Edit/add `User variables` (of the upper box) instead of `System variables` (of the lower part); otherwise you have to &quot;run as administrator&quot; to get it work.\r\n 2. Append `;%AppData%\\npm` to `Path` in order to use it as a command line tool (if supported, like `jshint` and `grunt-cli`).\r\n 3. Create `NODE_PATH` and set it `%AppData%\\npm\\node_modules` in order to `require(&#39;&lt;pkg_name&gt;&#39;)` in scripts without install it in the project directory. (But [`npm link` is suggested][1] for this requirement if you&#39;re working on OS with `mklink` such as Vista and newer.)\r\n\r\nTest environment:\r\n\r\n - Win 7 (Ent., 64-bit, SP1), Node.js 4.2.4, npm 2.14.12\r\n - Win 8.1 (Ent., 64-bit), Node.js 0.10.30, npm 1.4.21\r\n\r\n\r\n  [1]: https://nodejs.org/en/blog/npm/npm-1-0-global-vs-local-installation/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1452224311, "answer_id": 34669100, "path": "stack.gulp.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1476006751, "last_edit_date": 1476006751, "body_markdown": "For windows, everybody said you should set environment variables for nodejs and npm modules, but do you know why?\r\nFor some modules, they have command line tool, after installed the module, there&#39;are **[module].cmd** file in **C:\\Program Files\\nodejs**, and it&#39;s used for launch in window command. So if you don&#39;t add the path containing the cmd file to environment variables **%PATH%** , you won&#39;t launch them successfully through command window."}, {"tags": [], "down_vote_count": 0, "creation_date": 1453566130, "answer_id": 34965823, "path": "stack.gulp.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1453566130, "body_markdown": "I stumbled on this question because I want to use node.js with visual studio 2015 on my new computer with windows 10. I used node.js on windows 7 and 8 and 8.1 Never a problem node.js finding a module. I use a legacy node.js 0.10.39 because I have to use this version  because of the serial and RFXCOM module.\r\n\r\nThe answer for windows 10 is to set the NODE_PATH in the enviroment variables with C:\\Users\\User\\node_modules."}, {"tags": [], "down_vote_count": 0, "creation_date": 1476278294, "answer_id": 39999651, "path": "stack.gulp.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1476278294, "body_markdown": "For making it work on windows 10 I solved it by adding the folder `%USERPROFILE%\\AppData\\Roaming\\npm` to my PATH. Having `\\node_modules` appended like this: `%USERPROFILE%\\AppData\\Roaming\\npm\\node_modules\\` did not work for me.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1487525282, "answer_id": 42330431, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1487525282, "body_markdown": "For Windows 10, I had to locally install gulp in the folder:\r\n\r\nC:\\Users\\myaccount\\AppData\\Roaming\\npm\\node_modules\r\n\r\n    npm install gulp\r\n\r\nThis fixed my issue of &quot;gulp is not recognized&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1492950060, "answer_id": 43571088, "path": "stack.gulp.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1492950060, "body_markdown": "I had a terrible time getting global modules to work. Eventually, I explicitly added `C:\\Users\\yourusername\\AppData\\Roaming\\npm` to the PATH variable under System Variables. I also needed to have this variable come before the nodejs path variable in the list.\r\n\r\nI am running Windows 10."}, {"tags": [], "down_vote_count": 0, "creation_date": 1505385062, "answer_id": 46216721, "path": "stack.gulp.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1505385912, "last_edit_date": 1505385912, "body_markdown": "I had the same issue, trying to install bower with `npm install -g bower`\r\n\r\nI think this was because **node was installed by another user**, not me.\r\n\r\nI uninstalled node, and then I reinstalled it. During installation, I saw this text for the option *Add to PATH &gt; npm modules*:\r\n\r\nMessage in node installation\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\nAfter node installation, I executed `npm install -g bower` again. And now bower works.\r\n\r\nSure is not necessary reinstall node with own user, like me. Solution must be via *NODE_PATH* or *PATH* variables, as other users have explained.\r\n\r\nThis is only to remark that this problem occurs only if node has been installed by another user (or if during installation the option *Add to PATH &gt; npm modules* has not been marked).\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/QOSbC.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1506660467, "answer_id": 46481980, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1506660467, "body_markdown": "Just download and re-install the node from [this][1] and this will fix all the path issues. \r\n\r\nDon&#39;t forget to restart your command prompt or terminal.\r\n\r\n\r\n  [1]: https://nodejs.org/en/download/"}], "title": "Nodejs cannot find installed module on Windows?", "view_count": 207668, "answer_count": 17, "code_snippet": ["<code>npm install jade -g\n</code>", "<code>\"C:\\Program Files (x86)\\nodejs\\node_modules\"</code>", "<code>\"Cannot find module 'jade'\"</code>", "<code>var jade = require('jade');\n</code>", "<code>NODE_PATH</code>", "<code>%USERPROFILE%\\Application Data\\npm\\node_modules</code>", "<code>%AppData%\\npm\\node_modules</code>", "<code>control.exe sysdm.cpl,System,3</code>", "<code>rem for future\nsetx NODE_PATH %AppData%\\npm\\node_modules\nrem for current session\nset NODE_PATH=%AppData%\\npm\\node_modules\n</code>", "<code>NODE_PATH</code>", "<code>PATH</code>", "<code>node_modules</code>", "<code>%AppData%\\npm</code>", "<code>set NODE_PATH=C:\\Documents and Settings\\DevUser\\Application Data\\npm\\node_modules</code>", "<code>C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules</code>", "<code>npm install -g express</code>", "<code>C:\\Documents and Settings\\swapnil\\Application Data\\npm\\node_modules</code>", "<code>%USERPROFILE%\\AppData\\Roaming\\npm\\node_modules</code>", "<code>npm list -g</code>", "<code>{output}\\node_modules</code>", "<code>npm install --global {xyz}</code>", "<code>%AppData%\\npm\\node_modules</code>", "<code>C:\\Users\\{USER}\\AppData\\Roaming\\npm\n</code>", "<code>node_modules</code>", "<code>node_modules</code>", "<code>%USERPROFILE%\\AppData\\Roaming\\npm</code>", "<code>\\node_modules</code>", "<code>%USERPROFILE%\\AppData\\Roaming\\npm\\node_modules\\</code>", "<code>path</code>", "<code>They\u2019re tiny JavaScript programs.</code>", "<code>npm link jade</code>", "<code>npm link jade</code>", "<code>npm ERR! Error: npm link not supported on windows</code>", "<code>npm link</code>", "<code>User variables</code>", "<code>System variables</code>", "<code>;%AppData%\\npm</code>", "<code>Path</code>", "<code>jshint</code>", "<code>grunt-cli</code>", "<code>NODE_PATH</code>", "<code>%AppData%\\npm\\node_modules</code>", "<code>require('&lt;pkg_name&gt;')</code>", "<code>npm link</code>", "<code>mklink</code>", "<code>npm install -g gulp\n</code>", "<code>C:\\Users\\yourusername\\AppData\\Roaming\\npm</code>", "<code>C:\\Users\\[UserName]\\AppData\\Roaming\\npm\\node_modules</code>", "<code>C:\\Users\\[UserName]\\node_modules</code>", "<code>var jsonminify = require(\"C:/Users/Saulius/AppData/Roaming/npm/node_modules/jsonminify\");\n</code>", "<code>~/.npmrc</code>", "<code>C:\\Program Files\\nodejs</code>", "<code>C:\\Users\\User\\node_modules</code>", "<code>C:\\Users\\User\\AppData\\Roaming\\npm\\node_modules</code>", "<code>C:\\Users\\User\\node_modules</code>", "<code>C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\node_modules</code>", "<code>npm install -g bower</code>", "<code>npm install -g bower</code>", "<code>npm install gulp\n</code>", "<code> {\n  \"name\": \"hello\"\n, \"version\": \"0.0.1\"\n, \"dependencies\": {\n    \"express\": \"*\"\n  }\n}\n</code>"], "path": "stack.grunt-cli"}, {"tags": ["javascript", "gruntjs"], "creation_date": 1355801997, "body_markdown": "I removed the old grunt first,and I install the new grunt.But I got an error:\r\n\r\n\r\n&gt; D:\\www\\grunt-test\\grunt grunt-cli: The grunt command line interface.\r\n&gt; (v0.1.4)\r\n&gt; \r\n&gt; Fatal error: Unable to find local grunt.\r\n&gt; \r\n&gt; If you&#39;re seeing this message, either a Gruntfile wasn&#39;t found or\r\n&gt; grunt hasn&#39;t been installed locally to your project. For more\r\n&gt; information about installing and configuring grunt, please see the\r\n&gt; Getting Started guide: http://gruntjs.com/getting-started\r\n\r\n\r\nIs there haven&#39;t a grunt in my system path, or something else? I tried to re-install it for few times.", "last_edit_date": 1463042205, "up_vote_count": 311, "link": "https://stackoverflow.com/questions/13925916/fatal-error-unable-to-find-local-grunt", "_childDocuments_": [{"tags": [], "down_vote_count": 3, "creation_date": 1355812872, "answer_id": 13927654, "path": "stack.grunt-cli.answer", "score": 256, "up_vote_count": 259, "is_accepted": true, "last_activity_date": 1450265243, "last_edit_date": 1450265243, "body_markdown": "I think you don&#39;t have a `grunt.js` file in your project directory.  Use `grunt:init`, which gives you options such as `jQuery, node,commonjs`.  Select what you want, then proceed.  This really works. For more information you can visit [this](http://net.tutsplus.com/tutorials/javascript-ajax/meeting-grunt-the-build-tool-for-javascript/).\r\n\r\nDo this: \r\n\r\n     1. npm install -g grunt\r\n     2. grunt:init  ( you will get following options ):\r\n          jquery: A jQuery plugin\r\n          node: A Node module\r\n          commonjs: A CommonJS module\r\n          gruntplugin: A Grunt plugin\r\n          gruntfile: A Gruntfile (grunt.js)\r\n     3 .grunt init:jquery (if you want to create a jQuery related project.).\r\n\r\nIt should work.\r\n\r\nSolution for v1.4:\r\n\r\n    1. npm install -g grunt-cli\r\n    2. npm init\r\n       fill all details and it will create a package.json file.\r\n    3. npm install grunt (for grunt dependencies.)\r\n\r\n\r\n**Edit : Updated solution for new versions:** \r\n   \r\n\r\n     npm install grunt --save-dev"}, {"tags": [], "down_vote_count": 0, "creation_date": 1416867974, "answer_id": 27115342, "path": "stack.grunt-cli.answer", "score": 132, "up_vote_count": 132, "is_accepted": false, "last_activity_date": 1426069390, "last_edit_date": 1426069390, "body_markdown": "## Install Grunt in node_modules rather than globally\r\n\r\n`Unable to find local Grunt` likely means that you have installed Grunt globally. \r\n\r\nThe Grunt CLI insists that you install grunt in your local node_modules directory, so Grunt is local to your project. \r\n\r\nThis will fail:\r\n\r\n    npm install -g grunt\r\n\r\nDo this instead:\r\n\r\n    npm install grunt --save-dev\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1422156372, "answer_id": 28132898, "path": "stack.grunt-cli.answer", "score": 25, "up_vote_count": 25, "is_accepted": false, "last_activity_date": 1422156372, "body_markdown": "If you already have a file `package.json` in the project and it contains `grunt` in dependency, \r\n\r\n      &quot;devDependencies&quot;: {\r\n        &quot;grunt&quot;: &quot;~0.4.0&quot;,\r\n\r\n\r\nThen you can run `npm install` to resolve the issue"}, {"tags": [], "down_vote_count": 1, "creation_date": 1424198018, "answer_id": 28568619, "path": "stack.grunt-cli.answer", "score": 68, "up_vote_count": 69, "is_accepted": false, "last_activity_date": 1424198018, "body_markdown": "Do\r\n\r\n    npm install\r\n\r\nto install Grunt locally in `./node_modules` (and everything else specified in the `package.json` file)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1436312109, "answer_id": 31281186, "path": "stack.grunt-cli.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1436312109, "body_markdown": "Could be a few problems here depending on what version of grunt is being used. Newer versions of grunt actually specify that you have a file named `Gruntfile.js` (instead of the old `grunt.js`). \r\n\r\nYou should have the `grunt-cli` tool be installed globally (this is done via `npm install -g grunt-cli`). This allows you to actually run `grunt` commands from the command line. \r\n\r\nSecondly make sure you&#39;ve installed grunt locally for your project. If you see your `package.json` doesn&#39;t have something like `&quot;grunt&quot;: &quot;0.4.5&quot;` in it then you should do `npm install grunt --save` in your project directory. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1443713460, "answer_id": 32891453, "path": "stack.grunt-cli.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1454701312, "last_edit_date": 1454701312, "body_markdown": "It says you don&#39;t have a local `grunt` so try:\r\n\r\n`npm install grunt`\r\n\r\n(without the `-g` it&#39;s a local `grunt`)\r\n\r\nThough not directly related, make sure you have `Gruntfile.js` in your current folder."}, {"tags": [], "down_vote_count": 0, "creation_date": 1444850606, "answer_id": 33133887, "path": "stack.grunt-cli.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1444850606, "body_markdown": "I made the mistake to install some packages using sudo and other without privileges , this fixed my problem.\r\n\r\n    sudo chown -R $(whoami) $HOME/.npm\r\n\r\nhope it helps someone."}, {"tags": [], "down_vote_count": 1, "creation_date": 1459320262, "answer_id": 36301515, "path": "stack.grunt-cli.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1459320262, "body_markdown": "Being new to grunt and setting it up, I am running (perhaps foolishly) my grunt project/folder from a Google Drive so I can access the same code/builds from either my laptop or workstation. \r\n\r\nThere is a fair bit of synchronisation of the nodes_modules folders back to Google Drive and there seemed to be a conflict at some point, and the /nodes_modules/grunt folder was renamed to /nodes_modules/grunt (1)\r\n\r\nRenaming it back by removing the (1) seemed to fix it for me."}, {"tags": [], "down_vote_count": 0, "creation_date": 1469103141, "answer_id": 38503968, "path": "stack.grunt-cli.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1469103141, "body_markdown": "I had to execute the following commands on ubuntu to solve this problem (I know grunt for 1 hour) :\r\n\r\n    sudo npm install -g grunt\r\n    sudo npm install -g grunt-cli\r\n\r\n    cd /usr/local/bin\r\n    # current symlink points to ../lib/node_modules/grunt/bin/grunt*\r\n    sudo rm /usr/local/bin/grunt\r\n    sudo ln -s ../lib/node_modules/grunt-cli/bin/grunt* grunt\r\n\r\nIt is dirty but it is the only one solution I found... :("}, {"tags": [], "down_vote_count": 0, "creation_date": 1502418670, "answer_id": 45626042, "path": "stack.grunt-cli.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1502433743, "last_edit_date": 1502433743, "body_markdown": "Just `npm install` to install `node_modules`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1512715646, "answer_id": 47709098, "path": "stack.grunt-cli.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1512715646, "body_markdown": "You can simply run this command \r\n\r\n**npm install grunt --save-dev**"}], "title": "Fatal error: Unable to find local grunt", "view_count": 333297, "answer_count": 11, "code_snippet": ["<code>npm install grunt -g</code>", "<code>Gruntfile.js</code>", "<code>npm install grunt --save-dev</code>", "<code>package.json</code>", "<code>npm install</code>", "<code>grunt.js</code>", "<code>grunt:init</code>", "<code>jQuery, node,commonjs</code>", "<code> 1. npm install -g grunt\n 2. grunt:init  ( you will get following options ):\n      jquery: A jQuery plugin\n      node: A Node module\n      commonjs: A CommonJS module\n      gruntplugin: A Grunt plugin\n      gruntfile: A Gruntfile (grunt.js)\n 3 .grunt init:jquery (if you want to create a jQuery related project.).\n</code>", "<code>1. npm install -g grunt-cli\n2. npm init\n   fill all details and it will create a package.json file.\n3. npm install grunt (for grunt dependencies.)\n</code>", "<code> npm install grunt --save-dev\n</code>", "<code>npm install grunt</code>", "<code>grunt-cli</code>", "<code>grunt.js</code>", "<code>Unable to find local Grunt</code>", "<code>npm install -g grunt\n</code>", "<code>npm install grunt --save-dev\n</code>", "<code>npm install\n</code>", "<code>./node_modules</code>", "<code>package.json</code>", "<code>node_modules/.bin</code>", "<code>PATH</code>", "<code>git stash</code>", "<code>node_modules</code>", "<code>npm install</code>", "<code>package.json</code>", "<code>grunt</code>", "<code>  \"devDependencies\": {\n    \"grunt\": \"~0.4.0\",\n</code>", "<code>npm install</code>", "<code>Gruntfile.js</code>", "<code>grunt.js</code>", "<code>grunt-cli</code>", "<code>npm install -g grunt-cli</code>", "<code>grunt</code>", "<code>package.json</code>", "<code>\"grunt\": \"0.4.5\"</code>", "<code>npm install grunt --save</code>", "<code>sudo chown -R $(whoami) $HOME/.npm\n</code>", "<code>grunt</code>", "<code>npm install grunt</code>", "<code>-g</code>", "<code>grunt</code>", "<code>Gruntfile.js</code>", "<code>sudo npm install -g grunt\nsudo npm install -g grunt-cli\n\ncd /usr/local/bin\n# current symlink points to ../lib/node_modules/grunt/bin/grunt*\nsudo rm /usr/local/bin/grunt\nsudo ln -s ../lib/node_modules/grunt-cli/bin/grunt* grunt\n</code>", "<code>npm install</code>", "<code>node_modules</code>"], "path": "stack.grunt-cli"}, {"tags": ["node.js", "coffeescript", "npm", "node-modules"], "creation_date": 1331623866, "body_markdown": "How do I use a local version of a module in `node.js`. For example, in my app, I installed coffee-script:\r\n\r\n    npm install coffee-script\r\n\r\nThis installs it in `./node_modules` and the coffee command is in `./node_modules/.bin/coffee`. Is there a way to run this command when I&#39;m in my project&#39;s main folder? I guess I&#39;m looking for something similar to `bundle exec` in bundler. Basically, I&#39;d like to specify a version of coffee-script that everyone involved with the project should use.\r\n\r\nI know I can add the `-g` flag to install it globally so coffee works fine anywhere, but what if I wanted to have different versions of coffee per project?\r\n", "last_edit_date": 1443516577, "up_vote_count": 301, "link": "https://stackoverflow.com/questions/9679932/how-to-use-package-installed-locally-in-node-modules", "_childDocuments_": [{"tags": [], "down_vote_count": 8, "creation_date": 1331625480, "answer_id": 9680221, "path": "stack.gulp.answer", "score": -8, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1331625480, "body_markdown": "Include coffee-script in package.json with the specific version required in each project, typically like this:\r\n\r\n    &quot;dependencies&quot;:{\r\n      &quot;coffee-script&quot;: &quot;&gt;= 1.2.0&quot;\r\n\r\nThen run npm install to install dependencies in each project. This will install the specified version of coffee-script which will be accessible locally to each project."}, {"tags": [], "down_vote_count": 9, "creation_date": 1331639541, "answer_id": 9683472, "path": "stack.gulp.answer", "score": 38, "up_vote_count": 47, "is_accepted": false, "last_activity_date": 1444140131, "last_edit_date": 1444140131, "body_markdown": "**Update:** I no longer recommend this method, both for the mentioned security reasons and not the least the newer `npm bin` command. Original answer below:\r\n\r\nAs you have found out, any locally installed binaries are in `./node_modules/.bin`. In order to always run binaries in this directory rather than globally available binaries, if present, I suggest you put `./node_modules/.bin` first in your path:\r\n\r\n    export PATH=&quot;./node_modules/.bin:$PATH&quot;\r\n\r\nIf you put this in your `~/.profile`, `coffee` will always be `./node_modules/.bin/coffee` if available, otherwise `/usr/local/bin/coffee` (or whatever prefix you are installing node modules under)."}, {"tags": [], "down_vote_count": 2, "creation_date": 1362139563, "answer_id": 15157360, "path": "stack.gulp.answer", "score": 421, "up_vote_count": 423, "is_accepted": true, "last_activity_date": 1490830498, "last_edit_date": 1490830498, "body_markdown": "The problem with putting\r\n\r\n    ./node_modules/.bin\r\n\r\ninto your PATH is that it only works when your current working directory is the root of your project directory structure (i.e. the location of `node_modules`)\r\n\r\nIndependent of what your working directory is, you can get the path of locally installed binaries with\r\n\r\n    npm bin\r\n\r\nTo execute a locally installed `coffee` binary independent of where you are in the project directory hierarchy you can use this bash construct\r\n\r\n    PATH=$(npm bin):$PATH coffee\r\n\r\nI aliased this to npm-exec\r\n\r\n    alias npm-exec=&#39;PATH=$(npm bin):$PATH&#39;\r\n\r\nSo, now I can\r\n\r\n    npm-exec coffee\r\n\r\nto run the correct copy of coffee no matter of where I am\r\n\r\n    $ pwd\r\n    /Users/regular/project1\r\n    \r\n    $ npm-exec which coffee\r\n    /Users/regular/project1/node_modules/.bin/coffee\r\n\r\n    $ cd lib/\r\n    $ npm-exec which coffee\r\n    /Users/regular/project1/node_modules/.bin/coffee\r\n\r\n    $ cd ~/project2\r\n    $ npm-exec which coffee\r\n    /Users/regular/project2/node_modules/.bin/coffee\r\n    "}, {"tags": [], "down_vote_count": 1, "creation_date": 1384150450, "answer_id": 19899975, "path": "stack.gulp.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1384150450, "body_markdown": "If you want your PATH variable to correctly update based on your current working directory, add this to the end of your `.bashrc`-equivalent (or after anything that defines `PATH`):\r\n\r\n    __OLD_PATH=$PATH\r\n    function updatePATHForNPM() {\r\n      export PATH=$(npm bin):$__OLD_PATH\r\n    }\r\n\r\n    function node-mode() {\r\n      PROMPT_COMMAND=updatePATHForNPM\r\n    }\r\n\r\n    function node-mode-off() {\r\n      unset PROMPT_COMMAND\r\n      PATH=$__OLD_PATH\r\n    }\r\n\r\n    # Uncomment to enable node-mode by default:\r\n    # node-mode\r\n\r\nThis may add a short delay every time the bash prompt gets rendered (depending on the size of your project, most likely), so it&#39;s disabled by default.\r\n\r\nYou can enable and disable it within your terminal by running `node-mode` and `node-mode-off`, respectively."}, {"tags": [], "down_vote_count": 1, "creation_date": 1418433535, "answer_id": 27454532, "path": "stack.gulp.answer", "score": 79, "up_vote_count": 80, "is_accepted": false, "last_activity_date": 1418433535, "body_markdown": "Use the `npm bin` command to get the node modules /bin directory of your project\r\n\r\n    $ $(npm bin)/&lt;binary-name&gt; [args]\r\n\r\ne.g.\r\n\r\n    $ $(npm bin)/bower install\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1419978043, "answer_id": 27713427, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1419978413, "last_edit_date": 1495540510, "body_markdown": "I encountered the same problem and I don&#39;t particularly like using aliases (as [regular][1]&#39;s suggested), and if you don&#39;t like them too then here&#39;s another workaround that I use, you first have to create a tiny executable bash script, say **setenv.sh**:\r\n\r\n    #!/bin/sh\r\n\r\n    # Add your local node_modules bin to the path\r\n    export PATH=&quot;$(npm bin):$PATH&quot;\r\n\r\n    # execute the rest of the command\r\n    exec &quot;$@&quot;\r\n\r\nand then you can then use any executables in your local `/bin` using this command:\r\n\r\n    ./setenv.sh &lt;command&gt;\r\n    ./setenv.sh 6to5-node server.js\r\n    ./setenv.sh grunt\r\n\r\nIf you&#39;re using `scripts` in package.json then:\r\n\r\n    ...,\r\n    scripts: {\r\n        &#39;start&#39;: &#39;./setenv.sh &lt;command&gt;&#39;\r\n    }\r\n\r\n\r\n\r\n  [1]: https://stackoverflow.com/users/1196043/regular"}, {"tags": [], "down_vote_count": 0, "creation_date": 1424117451, "answer_id": 28549523, "path": "stack.gulp.answer", "score": 61, "up_vote_count": 61, "is_accepted": false, "last_activity_date": 1424117451, "body_markdown": "Use `npm run[-script] &lt;script name&gt;`\r\n\r\nAfter using npm to install the bin package to your local ./node_modules directory, modify package.json to add &lt;script name&gt; like this:\r\n\r\n    $ npm install --save learnyounode\r\n    $ edit packages.json\r\n    &gt;&gt;&gt; in packages.json\r\n    ...\r\n    &quot;scripts&quot;: {\r\n        &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\r\n        &quot;learnyounode&quot;: &quot;learnyounode&quot;\r\n    },\r\n    ...\r\n    $ npm run learnyounode\r\n\r\n*It would be nice if npm install had a --add-script option or something or if npm run would work without adding to the scripts block.*"}, {"tags": [], "down_vote_count": 0, "creation_date": 1439845782, "answer_id": 32059751, "path": "stack.gulp.answer", "score": 22, "up_vote_count": 22, "is_accepted": false, "last_activity_date": 1439845782, "body_markdown": "The PATH solution has the issue that if $(npm bin) is placed in your .profile/.bashrc/etc it is evaluated once and is forever set to whichever directory the path was first evaluated in. If instead you modify the current path then every time you run the script your path will grow. \r\n\r\nTo get around these issues, I create a function and used that. It doesn&#39;t modify your environment and is simple to use:\r\n\r\n    function npm-exec {\r\n       $(npm bin)/$@  \r\n    }\r\nThis can then be used like this without making any changes to your environment:\r\n\r\n    npm-exec r.js &lt;args&gt;\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1441723369, "answer_id": 32460731, "path": "stack.gulp.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1486468698, "last_edit_date": 1486468698, "body_markdown": "Same @regular &#39;s accepted solution, but Fish shell flavour\r\n\r\n&lt;!-- language: fish --&gt;\r\n\r\n    if not contains (npm bin) $PATH\r\n        set PATH (npm bin) $PATH\r\n    end"}, {"tags": [], "down_vote_count": 0, "creation_date": 1453154963, "answer_id": 34864975, "path": "stack.gulp.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1453154963, "body_markdown": "[zxc][] is like &quot;bundle exec&quot; for nodejs. It is similar to using `PATH=$(npm bin):$PATH`:\r\n\r\n    $ npm install -g zxc\r\n    $ npm install gulp\r\n    $ zxc which gulp\r\n    /home/nathan/code/project1/node_modules/.bin/gulp\r\n    \r\n\r\n\r\n[zxc]: https://www.npmjs.com/package/zxc"}, {"tags": [], "down_vote_count": 1, "creation_date": 1468547312, "answer_id": 38386701, "path": "stack.gulp.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1471930217, "last_edit_date": 1471930217, "body_markdown": "I&#39;d love to know if this is an insecure/bad idea, but after thinking about it a bit I don&#39;t see an issue here:\r\n\r\nModifying Linus&#39;s insecure solution to add it to the end, using `npm bin` to find the directory, and making the script only call `npm bin` when a `package.json` is present in a parent (for speed), this is what I came up with for `zsh`:\r\n\r\n    find-up () {\r\n      path=$(pwd)\r\n      while [[ &quot;$path&quot; != &quot;&quot; &amp;&amp; ! -e &quot;$path/$1&quot; ]]; do\r\n        path=${path%/*}\r\n      done\r\n      echo &quot;$path&quot;\r\n    }\r\n\r\n    precmd() {\r\n      if [ &quot;$(find-up package.json)&quot; != &quot;&quot; ]; then\r\n        new_bin=$(npm bin)\r\n        if [ &quot;$NODE_MODULES_PATH&quot; != &quot;$new_bin&quot; ]; then\r\n          export PATH=${PATH%:$NODE_MODULES_PATH}:$new_bin\r\n          export NODE_MODULES_PATH=$new_bin\r\n        fi\r\n      else\r\n        if [ &quot;$NODE_MODULES_PATH&quot; != &quot;&quot; ]; then\r\n          export PATH=${PATH%:$NODE_MODULES_PATH}\r\n          export NODE_MODULES_PATH=&quot;&quot;\r\n        fi\r\n      fi\r\n    }\r\n\r\nFor `bash`, instead of using the `precmd` hook, you can use the `$PROMPT_COMMAND` variable (I haven&#39;t tested this but you get the idea):\r\n\r\n    __add-node-to-path() {\r\n      if [ &quot;$(find-up package.json)&quot; != &quot;&quot; ]; then\r\n        new_bin=$(npm bin)\r\n        if [ &quot;$NODE_MODULES_PATH&quot; != &quot;$new_bin&quot; ]; then\r\n          export PATH=${PATH%:$NODE_MODULES_PATH}:$new_bin\r\n          export NODE_MODULES_PATH=$new_bin\r\n        fi\r\n      else\r\n        if [ &quot;$NODE_MODULES_PATH&quot; != &quot;&quot; ]; then\r\n          export PATH=${PATH%:$NODE_MODULES_PATH}\r\n          export NODE_MODULES_PATH=&quot;&quot;\r\n        fi\r\n      fi   \r\n    }\r\n\r\n    export PROMPT_COMMAND=&quot;__add-node-to-path&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1470265209, "answer_id": 38754980, "path": "stack.gulp.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1510745907, "last_edit_date": 1510745907, "body_markdown": "# For Windows\r\n\r\nStore the following in a file called `npm-exec.bat` and add it to your `%PATH%`\r\n\r\n    @echo off\r\n    set cmd=&quot;npm bin&quot;\r\n    FOR /F &quot;tokens=*&quot; %%i IN (&#39; %cmd% &#39;) DO SET modules=%%i\r\n    &quot;%modules%&quot;\\%*\r\n\r\n\r\n## Usage\r\nThen you can use it like \r\n`npm-exec &lt;command&gt; &lt;arg0&gt; &lt;arg1&gt; ...` \r\n\r\n**For example**\r\n\r\nTo execute `wdio` installed in local node_modules directory, do:\r\n\r\n    npm-exec wdio wdio.conf.js\r\n\r\n i.e. it will run  `.\\node_modules\\.bin\\wdio wdio.conf.js`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1477689646, "answer_id": 40313363, "path": "stack.gulp.answer", "score": 42, "up_vote_count": 42, "is_accepted": false, "last_activity_date": 1477689646, "body_markdown": "Use [`npm-run`](https://www.npmjs.com/package/npm-run).\r\n\r\nFrom the readme:\r\n\r\n# npm-run\r\n\r\n### Find &amp; run local executables from node_modules\r\n\r\nAny executable available to an npm lifecycle script is available to `npm-run`.\r\n\r\n## Usage\r\n\r\n    $ npm install mocha # mocha installed in ./node_modules\r\n    $ npm-run mocha test/* # uses locally installed mocha executable \r\n\r\n## Installation\r\n\r\n    $ npm install -g npm-run"}, {"tags": [], "down_vote_count": 0, "creation_date": 1479255743, "answer_id": 40622066, "path": "stack.gulp.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1479255743, "body_markdown": "You can also use direnv and change the $PATH variable only in your working folder.\r\n\r\n    $ cat .envrc\r\n    &gt; export PATH=$(npm bin):$PATH"}, {"tags": [], "down_vote_count": 0, "creation_date": 1482166170, "answer_id": 41227356, "path": "stack.gulp.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1485397548, "last_edit_date": 1485397548, "body_markdown": "Add this script to your `.bashrc`. Then you can call `coffee` or anyhting locally. This is handy for your laptop, but don&#39;t use it on your server.\r\n\r\n    DEFAULT_PATH=$PATH;\r\n    \r\n    add_local_node_modules_to_path(){\r\n      NODE_MODULES=&#39;./node_modules/.bin&#39;;\r\n      if [ -d $NODE_MODULES ]; then\r\n        PATH=$DEFAULT_PATH:$NODE_MODULES;\r\n      else\r\n        PATH=$DEFAULT_PATH;\r\n      fi\r\n    }\r\n    \r\n    cd () {\r\n      builtin cd &quot;$@&quot;;\r\n      add_local_node_modules_to_path;\r\n    }\r\n    \r\n    add_local_node_modules_to_path;\r\n\r\n*note*: this script makes aliase of `cd` command, and after each call of `cd` it checks `node_modules/.bin` and add it to your `$PATH`.\r\n\r\n*note2*: you can change the third line to `NODE_MODULES=$(npm bin);`. But that would make `cd` command too slow."}, {"tags": [], "down_vote_count": 0, "creation_date": 1485422862, "answer_id": 41870325, "path": "stack.gulp.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1485422862, "body_markdown": "I am a `Windows` user and this is what worked for me:\r\n\r\n\r\n    // First set some variable - i.e. replace is with &quot;xo&quot;\r\n    D:\\project\\root&gt; set xo=&quot;./node_modules/.bin/&quot;\r\n    \r\n    // Next, work with it\r\n    D:\\project\\root&gt; %xo%/bower install\r\n\r\n\r\nGood Luck.\r\n "}, {"tags": [], "down_vote_count": 0, "creation_date": 1486040358, "answer_id": 42002907, "path": "stack.gulp.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1487781308, "last_edit_date": 1487781308, "body_markdown": "For Windows use this:\r\n\r\n    /* cmd into &quot;node_modules&quot; folder */\r\n    &quot;%CD%\\.bin\\grunt&quot; --version"}, {"tags": [], "down_vote_count": 0, "creation_date": 1495211341, "answer_id": 44074849, "path": "stack.gulp.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1495212351, "last_edit_date": 1495212351, "body_markdown": "In case you are using `fish shell` and do not want to add to `$path` for security reason. We can add the below function to run local node executables. \r\n\r\n    ### run executables in node_module/.bin directory\r\n    function n \r\n      set -l npmbin (npm bin)   \r\n      set -l argvCount (count $argv)\r\n      switch $argvCount\r\n        case 0\r\n          echo please specify the local node executable as 1st argument\r\n        case 1\r\n          # for one argument, we can eval directly \r\n          eval $npmbin/$argv\r\n        case &#39;*&#39;\r\n          set --local executable $argv[1]\r\n          # for 2 or more arguments we cannot append directly after the $npmbin/ since the fish will apply each array element after the the start string: $npmbin/arg1 $npmbin/arg2... \r\n          # This is just how fish interoperate array. \r\n          set --erase argv[1]\r\n          eval $npmbin/$executable $argv \r\n      end\r\n    end\r\n\r\nNow you can run thing like: \r\n\r\n`n coffee`\r\n\r\nor more arguments like:\r\n\r\n`n browser-sync --version`\r\n\r\nNote, if you are `bash` user, then @Bob9630 answers is the way to go by leveraging bash&#39;s `$@`, which is not available in `fishshell`. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1500375581, "answer_id": 45164863, "path": "stack.gulp.answer", "score": 65, "up_vote_count": 65, "is_accepted": false, "last_activity_date": 1519874908, "last_edit_date": 1519874908, "body_markdown": "[![Nice example][2]][2]\r\n\r\nYou don&#39;t have to manipulate `$PATH` anymore!\r\n\r\n\r\nFrom [npm@5.2.0][1], **npm** ships with `npx` package which lets you run commands from a local `node_modules/.bin` or from a central cache.\r\n\r\nSimply run:\r\n\r\n\r\n    $ npx [options] &lt;command&gt;[@version] [command-arg]...\r\n\r\n\r\nBy default, `npx` will check whether `&lt;command&gt;` exists in `$PATH`, or in the local project binaries, and execute that.\r\n\r\nCalling `npx &lt;command&gt;` when `&lt;command&gt;` isn&#39;t already in your `$PATH` will automatically install a package with that name from the NPM registry for you, and invoke it. When it&#39;s done, the installed package won\u2019t be anywhere in your globals, so you won\u2019t have to worry about pollution in the long-term. You can prevent this behaviour by providing `--no-install` option.\r\n\r\n\r\nFor `npm &lt; 5.2.0`, you can install `npx` package manually by running the following command:\r\n\r\n    $ npm install -g npx\r\n\r\n\r\n  [1]: https://github.com/npm/npm/releases/tag/v5.2.0\r\n  [2]: https://i.stack.imgur.com/zyFua.gif"}, {"tags": [], "down_vote_count": 0, "creation_date": 1502448844, "answer_id": 45633460, "path": "stack.gulp.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1517842480, "last_edit_date": 1517842480, "body_markdown": "If you want to keep npm, then [npx](https://stackoverflow.com/a/45164863/457268) should do what you need.\r\n\r\n---\r\n\r\nIf switching to yarn (a npm replacement by facebook) is an option for you, then you can call:\r\n\r\n     yarn yourCmd\r\n\r\nscripts inside the package.json will take precedence, if none is found it will look inside the `./node_modules/.bin/` folder.\r\n\r\nIt also outputs what it ran:\r\n\r\n    $ yarn tsc\r\n    yarn tsc v0.27.5\r\n    $ &quot;/home/philipp/rate-pipeline/node_modules/.bin/tsc&quot;\r\n\r\nSo you don&#39;t have to setup scripts for each command in your `package.json`.\r\n\r\n\r\n---\r\n\r\nIf you had a script defined at `.scripts` inside your `package.json`:\r\n\r\n    &quot;tsc&quot;: &quot;tsc&quot; // each command defined in the scripts will be executed from `./node_modules/.bin/` first\r\n\r\n`yarn tsc` would be equivalent to `yarn run tsc` or `npm run tsc`:\r\n\r\n     yarn tsc\r\n     yarn tsc v0.27.5\r\n     $ tsc\r\n\r\n"}], "title": "How to use package installed locally in node_modules?", "view_count": 135620, "answer_count": 20, "code_snippet": ["<code>node.js</code>", "<code>npm install coffee-script\n</code>", "<code>./node_modules</code>", "<code>./node_modules/.bin/coffee</code>", "<code>bundle exec</code>", "<code>-g</code>", "<code>npm install niftycommand</code>", "<code>niftycommand</code>", "<code>coffee</code>", "<code>npm scripts</code>", "<code>\"build\": \"coffee -co target/directory source/directoy\", so you can run </code>", "<code>./node_modules/.bin\n</code>", "<code>node_modules</code>", "<code>npm bin\n</code>", "<code>coffee</code>", "<code>PATH=$(npm bin):$PATH coffee\n</code>", "<code>alias npm-exec='PATH=$(npm bin):$PATH'\n</code>", "<code>npm-exec coffee\n</code>", "<code>$ pwd\n/Users/regular/project1\n\n$ npm-exec which coffee\n/Users/regular/project1/node_modules/.bin/coffee\n\n$ cd lib/\n$ npm-exec which coffee\n/Users/regular/project1/node_modules/.bin/coffee\n\n$ cd ~/project2\n$ npm-exec which coffee\n/Users/regular/project2/node_modules/.bin/coffee\n</code>", "<code>alias coffee=\"npm-exec coffee\"</code>", "<code>npm bin</code>", "<code>PATH</code>", "<code>npm bin</code>", "<code>$ $(npm bin)/&lt;binary-name&gt; [args]\n</code>", "<code>$ $(npm bin)/bower install\n</code>", "<code>export PATH=\"./node_modules/.bin:$PATH\"</code>", "<code>$(npm bin)/jasmine</code>", "<code>node $(npm bin)/jasmine</code>", "<code>$PATH</code>", "<code>npx</code>", "<code>node_modules/.bin</code>", "<code>$ npx [options] &lt;command&gt;[@version] [command-arg]...\n</code>", "<code>npx</code>", "<code>&lt;command&gt;</code>", "<code>$PATH</code>", "<code>npx &lt;command&gt;</code>", "<code>&lt;command&gt;</code>", "<code>$PATH</code>", "<code>--no-install</code>", "<code>npm &lt; 5.2.0</code>", "<code>npx</code>", "<code>$ npm install -g npx\n</code>", "<code>npm run[-script] &lt;script name&gt;</code>", "<code>$ npm install --save learnyounode\n$ edit packages.json\n&gt;&gt;&gt; in packages.json\n...\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n    \"learnyounode\": \"learnyounode\"\n},\n...\n$ npm run learnyounode\n</code>", "<code>npm install</code>", "<code>npm run eslint</code>", "<code>npm start</code>", "<code>--</code>", "<code>npm run learnyounode -- --normal-switches --watch -d *.js</code>", "<code>npm-run</code>", "<code>npm-run</code>", "<code>$ npm install mocha # mocha installed in ./node_modules\n$ npm-run mocha test/* # uses locally installed mocha executable \n</code>", "<code>$ npm install -g npm-run\n</code>", "<code>npm bin</code>", "<code>./node_modules/.bin</code>", "<code>./node_modules/.bin</code>", "<code>export PATH=\"./node_modules/.bin:$PATH\"\n</code>", "<code>~/.profile</code>", "<code>coffee</code>", "<code>./node_modules/.bin/coffee</code>", "<code>/usr/local/bin/coffee</code>", "<code>./node_modules/.bin/coffee --output lib/ --compile --bare --watch src</code>", "<code>/tmp</code>", "<code>ls</code>", "<code>cp</code>", "<code>alias npm-exec='PATH=$(npm bin):$PATH'</code>", "<code>PATH</code>", "<code>$(npm bin)</code>", "<code>npm bin</code>", "<code>PATH</code>", "<code>npm</code>", "<code>function npm-exec {\n   $(npm bin)/$@  \n}\n</code>", "<code>npm-exec r.js &lt;args&gt;\n</code>", "<code>n</code>", "<code> yarn yourCmd\n</code>", "<code>./node_modules/.bin/</code>", "<code>$ yarn tsc\nyarn tsc v0.27.5\n$ \"/home/philipp/rate-pipeline/node_modules/.bin/tsc\"\n</code>", "<code>package.json</code>", "<code>.scripts</code>", "<code>package.json</code>", "<code>\"tsc\": \"tsc\" // each command defined in the scripts will be executed from `./node_modules/.bin/` first\n</code>", "<code>yarn tsc</code>", "<code>yarn run tsc</code>", "<code>npm run tsc</code>", "<code> yarn tsc\n yarn tsc v0.27.5\n $ tsc\n</code>", "<code>.bashrc</code>", "<code>PATH</code>", "<code>__OLD_PATH=$PATH\nfunction updatePATHForNPM() {\n  export PATH=$(npm bin):$__OLD_PATH\n}\n\nfunction node-mode() {\n  PROMPT_COMMAND=updatePATHForNPM\n}\n\nfunction node-mode-off() {\n  unset PROMPT_COMMAND\n  PATH=$__OLD_PATH\n}\n\n# Uncomment to enable node-mode by default:\n# node-mode\n</code>", "<code>node-mode</code>", "<code>node-mode-off</code>", "<code>npm-exec.bat</code>", "<code>%PATH%</code>", "<code>@echo off\nset cmd=\"npm bin\"\nFOR /F \"tokens=*\" %%i IN (' %cmd% ') DO SET modules=%%i\n\"%modules%\"\\%*\n</code>", "<code>npm-exec &lt;command&gt; &lt;arg0&gt; &lt;arg1&gt; ...</code>", "<code>wdio</code>", "<code>npm-exec wdio wdio.conf.js\n</code>", "<code>.\\node_modules\\.bin\\wdio wdio.conf.js</code>", "<code>$ cat .envrc\n&gt; export PATH=$(npm bin):$PATH\n</code>", "<code>.bashrc</code>", "<code>coffee</code>", "<code>DEFAULT_PATH=$PATH;\n\nadd_local_node_modules_to_path(){\n  NODE_MODULES='./node_modules/.bin';\n  if [ -d $NODE_MODULES ]; then\n    PATH=$DEFAULT_PATH:$NODE_MODULES;\n  else\n    PATH=$DEFAULT_PATH;\n  fi\n}\n\ncd () {\n  builtin cd \"$@\";\n  add_local_node_modules_to_path;\n}\n\nadd_local_node_modules_to_path;\n</code>", "<code>cd</code>", "<code>cd</code>", "<code>node_modules/.bin</code>", "<code>$PATH</code>", "<code>NODE_MODULES=$(npm bin);</code>", "<code>cd</code>", "<code>$(npm bin)</code>", "<code>./node_modules/.bin</code>", "<code>$(npm bin)</code>", "<code>cd</code>", "<code>if not contains (npm bin) $PATH\n    set PATH (npm bin) $PATH\nend\n</code>", "<code>/* cmd into \"node_modules\" folder */\n\"%CD%\\.bin\\grunt\" --version\n</code>", "<code>PATH=$(npm bin):$PATH</code>", "<code>$ npm install -g zxc\n$ npm install gulp\n$ zxc which gulp\n/home/nathan/code/project1/node_modules/.bin/gulp\n</code>", "<code>npm bin</code>", "<code>npm bin</code>", "<code>package.json</code>", "<code>zsh</code>", "<code>find-up () {\n  path=$(pwd)\n  while [[ \"$path\" != \"\" &amp;&amp; ! -e \"$path/$1\" ]]; do\n    path=${path%/*}\n  done\n  echo \"$path\"\n}\n\nprecmd() {\n  if [ \"$(find-up package.json)\" != \"\" ]; then\n    new_bin=$(npm bin)\n    if [ \"$NODE_MODULES_PATH\" != \"$new_bin\" ]; then\n      export PATH=${PATH%:$NODE_MODULES_PATH}:$new_bin\n      export NODE_MODULES_PATH=$new_bin\n    fi\n  else\n    if [ \"$NODE_MODULES_PATH\" != \"\" ]; then\n      export PATH=${PATH%:$NODE_MODULES_PATH}\n      export NODE_MODULES_PATH=\"\"\n    fi\n  fi\n}\n</code>", "<code>bash</code>", "<code>precmd</code>", "<code>$PROMPT_COMMAND</code>", "<code>__add-node-to-path() {\n  if [ \"$(find-up package.json)\" != \"\" ]; then\n    new_bin=$(npm bin)\n    if [ \"$NODE_MODULES_PATH\" != \"$new_bin\" ]; then\n      export PATH=${PATH%:$NODE_MODULES_PATH}:$new_bin\n      export NODE_MODULES_PATH=$new_bin\n    fi\n  else\n    if [ \"$NODE_MODULES_PATH\" != \"\" ]; then\n      export PATH=${PATH%:$NODE_MODULES_PATH}\n      export NODE_MODULES_PATH=\"\"\n    fi\n  fi   \n}\n\nexport PROMPT_COMMAND=\"__add-node-to-path\"\n</code>", "<code>npm bin</code>", "<code>$PATH</code>", "<code>Windows</code>", "<code>// First set some variable - i.e. replace is with \"xo\"\nD:\\project\\root&gt; set xo=\"./node_modules/.bin/\"\n\n// Next, work with it\nD:\\project\\root&gt; %xo%/bower install\n</code>", "<code>fish shell</code>", "<code>$path</code>", "<code>### run executables in node_module/.bin directory\nfunction n \n  set -l npmbin (npm bin)   \n  set -l argvCount (count $argv)\n  switch $argvCount\n    case 0\n      echo please specify the local node executable as 1st argument\n    case 1\n      # for one argument, we can eval directly \n      eval $npmbin/$argv\n    case '*'\n      set --local executable $argv[1]\n      # for 2 or more arguments we cannot append directly after the $npmbin/ since the fish will apply each array element after the the start string: $npmbin/arg1 $npmbin/arg2... \n      # This is just how fish interoperate array. \n      set --erase argv[1]\n      eval $npmbin/$executable $argv \n  end\nend\n</code>", "<code>n coffee</code>", "<code>n browser-sync --version</code>", "<code>bash</code>", "<code>$@</code>", "<code>fishshell</code>", "<code>#!/bin/sh\n\n# Add your local node_modules bin to the path\nexport PATH=\"$(npm bin):$PATH\"\n\n# execute the rest of the command\nexec \"$@\"\n</code>", "<code>/bin</code>", "<code>./setenv.sh &lt;command&gt;\n./setenv.sh 6to5-node server.js\n./setenv.sh grunt\n</code>", "<code>scripts</code>", "<code>...,\nscripts: {\n    'start': './setenv.sh &lt;command&gt;'\n}\n</code>", "<code>\"dependencies\":{\n  \"coffee-script\": \"&gt;= 1.2.0\"\n</code>", "<code>npm install svgo</code>", "<code>npm install</code>", "<code>grunt-cli</code>", "<code>grunt</code>", "<code>grunt</code>"], "path": "stack.grunt-cli"}, {"tags": ["comments", "npm"], "creation_date": 1357669439, "body_markdown": "I&#39;ve got a simple package.json file and I want to add a comment. Is there a way to do this, or are there any hacks to make this work?\r\n\r\n    {\r\n      &quot;name&quot;: &quot;My Project&quot;,\r\n      &quot;version&quot;: &quot;0.0.1&quot;,\r\n      &quot;private&quot;: true,\r\n      &quot;dependencies&quot;: {\r\n        &quot;express&quot;: &quot;3.x&quot;,\r\n        &quot;mongoose&quot;: &quot;3.x&quot;\r\n      },\r\n      &quot;devDependencies&quot; :  {\r\n        &quot;should&quot;: &quot;*&quot;\r\n        /* &quot;mocha&quot;: &quot;*&quot; not needed as should be globally installed */\r\n      }\r\n    }\r\n\r\nThe example comment above doesn&#39;t work as npm breaks. I&#39;ve also tried // style comments.\r\n\r\n\r\n", "last_edit_date": 1380701048, "up_vote_count": 248, "link": "https://stackoverflow.com/questions/14221579/how-do-i-add-comments-to-package-json-for-npm-install", "_childDocuments_": [{"tags": [], "down_vote_count": 3, "creation_date": 1357670203, "answer_id": 14221781, "path": "stack.gulp.answer", "score": 316, "up_vote_count": 319, "is_accepted": true, "last_activity_date": 1446553053, "last_edit_date": 1446553053, "body_markdown": "This has recently been discussed in the [node.js mailing list][1].\r\n\r\nAccording to Isaac Schlueter who created npm:\r\n\r\n&gt; ... the &quot;//&quot; key will never be used by npm for any purpose, and is reserved for comments ... If you want to use a multiple line comment, you can use either an \r\narray, or multiple &quot;//&quot; keys.\r\n\r\n    { &quot;//&quot;: &quot;this is the first line of a comment&quot;, \r\n      &quot;//&quot;: &quot;this is the second line of the comment&quot; } \r\n    \r\n    { &quot;//&quot;: [ \r\n      &quot;first line&quot;, \r\n      &quot;second line&quot; ] } \r\n\r\n\r\n  [1]: https://groups.google.com/d/msg/nodejs/NmL7jdeuw0M/yTqI05DRQrIJ"}, {"tags": [], "down_vote_count": 3, "creation_date": 1375654713, "answer_id": 18048155, "path": "stack.gulp.answer", "score": 82, "up_vote_count": 85, "is_accepted": false, "last_activity_date": 1498681971, "last_edit_date": 1498681971, "body_markdown": "Here is another hack for adding comments in JSON.  Since:\r\n\r\n    {&quot;a&quot;: 1, &quot;a&quot;: 2}\r\n\r\nIs equivalent to \r\n  \r\n    {&quot;a&quot;: 2}\r\n\r\nYou can do something like:\r\n\r\n    {\r\n      &quot;devDependencies&quot;: &quot;&#39;mocha&#39; not needed as should be globally installed&quot;,\r\n      &quot;devDependencies&quot; :  {\r\n        &quot;should&quot;: &quot;*&quot;\r\n      }\r\n    }\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1400697177, "answer_id": 23791175, "path": "stack.gulp.answer", "score": 12, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1401134952, "last_edit_date": 1495535496, "body_markdown": "You can always abuse the fact that duplicated keys are overwritten. This is what I just wrote:\r\n\r\n    &quot;dependencies&quot;: {\r\n      &quot;grunt&quot;: &quot;...&quot;,\r\n      &quot;grunt-cli&quot;: &quot;...&quot;,\r\n\r\n      &quot;api-easy&quot;: &quot;# Here is the pull request: https://github.com/...&quot;,\r\n      &quot;api-easy&quot;: &quot;git://...&quot;\r\n\r\n      &quot;grunt-vows&quot;: &quot;...&quot;,\r\n      &quot;vows&quot;: &quot;...&quot;\r\n    }\r\n\r\nHowever, it is not clear whether JSON allows duplicated keys (see\r\n[Does JSON syntax allow duplicate keys in an object?][1]. It seems to work with npm, so I take the risk.\r\n\r\nThe recommened hack is to use `&quot;//&quot;` keys (from the [nodejs mailing list][2]). When I tested it, it did not work with &quot;dependencies&quot; sections, though. Also, the example in the post uses multiple `&quot;//&quot;` keys, which implies that npm does not reject JSON files with duplicated keys. In other words, the hack above should always be fine.\r\n\r\n**Update:** One annoying disadvantage of the duplicated key hack is that `npm install --save` silently eliminates all duplicates. Unfortunately, it is very easy to overlook it and your well-intentioned comments are gone.\r\n\r\nThe `&quot;//&quot;` hack is still the safest as it seems. However, multi-line comments will be removed by `npm install --save`, too.\r\n\r\n  [1]: https://stackoverflow.com/q/21832701/783510\r\n  [2]: https://groups.google.com/forum/#!msg/nodejs/NmL7jdeuw0M/yTqI05DRQrIJ"}, {"tags": [], "down_vote_count": 0, "creation_date": 1423301243, "answer_id": 28380502, "path": "stack.gulp.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1428857588, "last_edit_date": 1428857588, "body_markdown": "Here&#39;s my take on comments within `package.json` / `bower.json`:\r\n\r\nI have `package.json.js` that contains a script that exports the actual `package.json`. Running the script overwrites the old `package.json` and tells me what changes it made, perfect to help you keep track of automatic changes `npm` made. That way I can even programatically define what packages I want to use. \r\n\r\nThe latest grunt task is here:\r\nhttps://gist.github.com/MarZab/72fa6b85bc9e71de5991\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1463134075, "answer_id": 37207193, "path": "stack.gulp.answer", "score": 8, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1463134390, "last_edit_date": 1463134390, "body_markdown": "I have a funny hack idea.\r\n\r\nCreate npm package name suitably as comment divider for `dependencies` and `devDependencies` block in package.json, for example `x----x----x`\r\n\r\n\t{\r\n\t    &quot;name&quot;: &quot;app-name&quot;,\r\n\t    &quot;dependencies&quot;: {\r\n\t    \t&quot;x----x----x&quot;: &quot;this is the first line of a comment&quot;,\r\n\t        &quot;babel-cli&quot;: &quot;6.x.x&quot;,\r\n\t        &quot;babel-core&quot;: &quot;6.x.x&quot;,\r\n\t    \t&quot;x----x----x&quot;: &quot;this is the second line of a comment&quot;,\r\n\t        &quot;knex&quot;: &quot;^0.11.1&quot;,\r\n\t        &quot;mocha&quot;: &quot;1.20.1&quot;,\r\n\t    \t&quot;x----x----x&quot;: &quot;*&quot;\r\n\t    }\r\n\t}\r\n    \r\n**NOTE**: Must add last comment divider line with valid version like `*` in block."}, {"tags": [], "down_vote_count": 0, "creation_date": 1491282199, "answer_id": 43198652, "path": "stack.gulp.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1501943184, "last_edit_date": 1501943184, "body_markdown": "So far, most &quot;hacks&quot; here suggest to abuse JSON. But instead, why not abuse the underlying scripting language?\r\n\r\n**Edit** The initial response was putting the description on the right using `# add comments here` to wrap it; however, this does not work on Windows, because flags (e.g. npm run myframework -- --myframework-flags) would be ignored. I changed my response to make it work on all platforms, and added some indents for readability purposes.\r\n\r\n    {\r\n     &quot;scripts&quot;: {\r\n        &quot;help&quot;: &quot;       echo &#39;Display help information (this screen)&#39;;          npm run&quot;,\r\n        &quot;myframework&quot;: &quot;echo &#39;Run myframework binary&#39;;                          myframework&quot;,\r\n        &quot;develop&quot;: &quot;    echo &#39;Run in development mode (with terminal output)&#39;;  npm run myframework&quot;\r\n        &quot;start&quot;: &quot;      echo &#39;Start myFramework as a daemon&#39;;                   myframework start&quot;,\r\n        &quot;stop&quot;:  &quot;      echo &#39;Stop the myFramework daemon&#39;;                     myframework stop&quot;\r\n        &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\r\n      }\r\n    }\r\n\r\nThis will:\r\n\r\n  1. Not break JSON compliance (or at least its not a hack, and your IDE will not give you warnings for doing strange, dangerous stuff)\r\n  2. Works cross platform (tested on macOS and windows, assuming it would work just fine on Linux)\r\n  3. Does not get in the way of running `npm run myframework -- --help` \r\n  4. Will output meaningful info when running `npm run` (which is the actual command to run to get information about available scripts)\r\n  5. Presents a more explicit help command (in case some devs are not aware that npm run presents such output)\r\n  6. Will show both the commands AND its description when running the command itself\r\n  7. Is somewhat readable when just opening `package.json` (using `less` or your favorite IDE)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1500035072, "answer_id": 45102957, "path": "stack.gulp.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1500035072, "body_markdown": "NPS (Node Package Scripts) solved this problem for me. Lets you put your NPM scripts into a separate JS file, where you can add comments galore and any other JS logic you need to.\r\nhttps://www.npmjs.com/package/nps\r\n\r\nSample of the `package-scripts.js` from one of my projects\r\n\r\n    module.exports = {\r\n      scripts: {\r\n        // makes sure e2e webdrivers are up to date\r\n        postinstall: &#39;nps webdriver-update&#39;,\r\n    \r\n        // run the webpack dev server and open it in browser on port 7000\r\n        server: &#39;webpack-dev-server --inline --progress --port 7000 --open&#39;,\r\n\r\n        // start webpack dev server with full reload on each change\r\n        default: &#39;nps server&#39;,\r\n\r\n        // start webpack dev server with hot module replacement\r\n        hmr: &#39;nps server -- --hot&#39;,\r\n    \r\n        // generates icon font via a gulp task\r\n        iconFont: &#39;gulp default --gulpfile src/deps/build-scripts/gulp-icon-font.js&#39;,\r\n    \r\n        // No longer used\r\n        // copyFonts: &#39;copyfiles -f src/app/glb/font/webfonts/**/* dist/1-0-0/font&#39;\r\n      }\r\n    }\r\n\r\nI just did a local install `npm install nps -save-dev` and put this in my `package.json` scripts.\r\n\r\n    &quot;scripts&quot;: {\r\n        &quot;start&quot;: &quot;nps&quot;,\r\n        &quot;test&quot;: &quot;nps test&quot;\r\n    }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1503398326, "answer_id": 45815391, "path": "stack.gulp.answer", "score": 21, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1503401809, "last_edit_date": 1503401809, "body_markdown": "After wasting an hour on complex and hacky solutions I&#39;ve found myself a pretty simple, elegant and valid solution for commenting my bulky dependencies section in `package.json`. Just like this:\r\n\r\n    {\r\n      &quot;name&quot;: &quot;package name&quot;,\r\n      &quot;version&quot;: &quot;1.0&quot;,\r\n      &quot;description&quot;: &quot;package description&quot;,\r\n      &quot;scripts&quot;: {\r\n        &quot;start&quot;: &quot;npm install &amp;&amp; node server.js&quot;\r\n      },\r\n      &quot;scriptsComments&quot;: {\r\n        &quot;start&quot;: &quot;Runs development build on a local server configured by server.js&quot;\r\n      },\r\n      &quot;dependencies&quot;: {\r\n        &quot;ajv&quot;: &quot;^5.2.2&quot;\r\n      },\r\n      &quot;dependenciesComments&quot;: {\r\n        &quot;ajv&quot;: &quot;JSON-Schema Validator for validation of API data&quot;\r\n      }\r\n    }\r\n\r\nWhen sorted the same way, it&#39;s now very easy for me to track these pairs of dependencies/comments either in git commit diffs or in editor while working with `package.json`.\r\n\r\nAnd no extra tools involved, just plain and valid JSON.\r\n\r\nHope this helps anyone."}], "title": "How do I add comments to package.json for npm install?", "view_count": 61632, "answer_count": 8, "code_snippet": ["<code>{\n  \"name\": \"My Project\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"express\": \"3.x\",\n    \"mongoose\": \"3.x\"\n  },\n  \"devDependencies\" :  {\n    \"should\": \"*\"\n    /* \"mocha\": \"*\" not needed as should be globally installed */\n  }\n}\n</code>", "<code>package.json</code>", "<code>package.json</code>", "<code>package.json</code>", "<code>{ \"//\": \"this is the first line of a comment\", \n  \"//\": \"this is the second line of the comment\" } \n\n{ \"//\": [ \n  \"first line\", \n  \"second line\" ] } \n</code>", "<code>{ \"//\": \"first\",  \"//\": \"second\"}</code>", "<code>npm version</code>", "<code>package.json</code>", "<code>{ \"dependencies\": { \"//\": \"comment?\" }}</code>", "<code>{ \"//\": \"comment!\", \"dependencies\":{}}</code>", "<code>\"//\"</code>", "<code>{\"a\": 1, \"a\": 2}\n</code>", "<code>{\"a\": 2}\n</code>", "<code>{\n  \"devDependencies\": \"'mocha' not needed as should be globally installed\",\n  \"devDependencies\" :  {\n    \"should\": \"*\"\n  }\n}\n</code>", "<code>\"express\": \"makes routing better so I don't want to gouge my eyes out\", \"express\": \"3.x\"</code>", "<code>package.json</code>", "<code>npm version 1.2.3</code>", "<code>package.json</code>", "<code>{\n  \"name\": \"package name\",\n  \"version\": \"1.0\",\n  \"description\": \"package description\",\n  \"scripts\": {\n    \"start\": \"npm install &amp;&amp; node server.js\"\n  },\n  \"scriptsComments\": {\n    \"start\": \"Runs development build on a local server configured by server.js\"\n  },\n  \"dependencies\": {\n    \"ajv\": \"^5.2.2\"\n  },\n  \"dependenciesComments\": {\n    \"ajv\": \"JSON-Schema Validator for validation of API data\"\n  }\n}\n</code>", "<code>package.json</code>", "<code>\"dependencies\": {\n  \"grunt\": \"...\",\n  \"grunt-cli\": \"...\",\n\n  \"api-easy\": \"# Here is the pull request: https://github.com/...\",\n  \"api-easy\": \"git://...\"\n\n  \"grunt-vows\": \"...\",\n  \"vows\": \"...\"\n}\n</code>", "<code>\"//\"</code>", "<code>\"//\"</code>", "<code>npm install --save</code>", "<code>\"//\"</code>", "<code>npm install --save</code>", "<code>\"//\"</code>", "<code>mocha</code>", "<code>dependencies</code>", "<code>devDependencies</code>", "<code>x----x----x</code>", "<code>{\n    \"name\": \"app-name\",\n    \"dependencies\": {\n        \"x----x----x\": \"this is the first line of a comment\",\n        \"babel-cli\": \"6.x.x\",\n        \"babel-core\": \"6.x.x\",\n        \"x----x----x\": \"this is the second line of a comment\",\n        \"knex\": \"^0.11.1\",\n        \"mocha\": \"1.20.1\",\n        \"x----x----x\": \"*\"\n    }\n}\n</code>", "<code>*</code>", "<code>npm install</code>", "<code>package.json</code>", "<code>bower.json</code>", "<code>package.json.js</code>", "<code>package.json</code>", "<code>package.json</code>", "<code>npm</code>", "<code>npm install --save</code>", "<code>--save-dev</code>", "<code>package-scripts.js</code>", "<code>module.exports = {\n  scripts: {\n    // makes sure e2e webdrivers are up to date\n    postinstall: 'nps webdriver-update',\n\n    // run the webpack dev server and open it in browser on port 7000\n    server: 'webpack-dev-server --inline --progress --port 7000 --open',\n\n    // start webpack dev server with full reload on each change\n    default: 'nps server',\n\n    // start webpack dev server with hot module replacement\n    hmr: 'nps server -- --hot',\n\n    // generates icon font via a gulp task\n    iconFont: 'gulp default --gulpfile src/deps/build-scripts/gulp-icon-font.js',\n\n    // No longer used\n    // copyFonts: 'copyfiles -f src/app/glb/font/webfonts/**/* dist/1-0-0/font'\n  }\n}\n</code>", "<code>npm install nps -save-dev</code>", "<code>package.json</code>", "<code>\"scripts\": {\n    \"start\": \"nps\",\n    \"test\": \"nps test\"\n}\n</code>", "<code># add comments here</code>", "<code>{\n \"scripts\": {\n    \"help\": \"       echo 'Display help information (this screen)';          npm run\",\n    \"myframework\": \"echo 'Run myframework binary';                          myframework\",\n    \"develop\": \"    echo 'Run in development mode (with terminal output)';  npm run myframework\"\n    \"start\": \"      echo 'Start myFramework as a daemon';                   myframework start\",\n    \"stop\":  \"      echo 'Stop the myFramework daemon';                     myframework stop\"\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  }\n}\n</code>", "<code>npm run myframework -- --help</code>", "<code>npm run</code>", "<code>package.json</code>", "<code>less</code>", "<code>\"//\":\"\"</code>", "<code>&amp;&amp;</code>", "<code>;</code>", "<code>\"help\": \"echo 'Display help information (this screen)' &amp;&amp;  npm run\",</code>", "<code>scripts</code>", "<code>package.json</code>"], "path": "stack.grunt-cli"}, {"tags": ["node.js", "ubuntu", "gruntjs"], "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1413076930, "answer_id": 26320915, "path": "stack.gulp.answer", "score": 702, "up_vote_count": 703, "is_accepted": true, "last_activity_date": 1413076930, "last_edit_date": 1495540056, "body_markdown": "Found the answer. Just in case it helps someone, I do post it here:\r\n\r\nDoing a symlink solves the issue: `ln -s /usr/bin/nodejs /usr/bin/node`\r\n(My thanks and +1 vote to [bodokaiser][1]).\r\n\r\nNOTE: I think this post is not an exact duplicate, because that post was somewhat a  browserify question.\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/20886217/browserify-error-usr-bin-env-node-no-such-file-or-directory"}, {"tags": [], "down_vote_count": 3, "creation_date": 1413077037, "answer_id": 26320925, "path": "stack.gulp.answer", "score": 39, "up_vote_count": 42, "is_accepted": false, "last_activity_date": 1413077189, "last_edit_date": 1413077189, "body_markdown": "I think you should upgrade lastest node version\r\n\r\n    sudo npm cache clean -f\r\n    sudo npm install -g n\r\n    sudo n stable"}, {"tags": [], "down_vote_count": 0, "creation_date": 1418276383, "answer_id": 27416100, "path": "stack.gulp.answer", "score": 88, "up_vote_count": 88, "is_accepted": false, "last_activity_date": 1418276383, "body_markdown": "The issue is not with the version of node. Instead its the way NodeJS is installed by default in Ubuntu. When running a node application in ubuntu you have to run &#39;nodejs somethign.js&#39; instead of &#39;node something.js&#39;\r\n\r\nSo the application name called in the terminal is nodejs and not node. This is why it there is a need of a symlink to simply forward all the commands received as node to nodejs.\r\n\r\n    ln -s /usr/bin/nodejs /usr/bin/node"}, {"tags": [], "down_vote_count": 1, "creation_date": 1455311626, "answer_id": 35372283, "path": "stack.gulp.answer", "score": 27, "up_vote_count": 28, "is_accepted": false, "last_activity_date": 1486663827, "last_edit_date": 1486663827, "body_markdown": "if you are able to access node on ubuntu terminal using nodejs command,then this problem can be simply solved using\r\n-creating a symbolic link of nodejs and node using\r\n\r\n`ln -s /usr/bin/nodejs /usr/bin/node`\r\n\r\nand this may solve the problem"}, {"tags": [], "down_vote_count": 1, "creation_date": 1459071882, "answer_id": 36245941, "path": "stack.gulp.answer", "score": 21, "up_vote_count": 22, "is_accepted": false, "last_activity_date": 1487282438, "last_edit_date": 1487282438, "body_markdown": "In my case installing nodejs-legacy solved the issue.\r\nHope that it helps.\r\n\r\n```sudo apt-get install nodejs-legacy\r\n```"}, {"tags": [], "down_vote_count": 2, "creation_date": 1469786058, "answer_id": 38655797, "path": "stack.gulp.answer", "score": 7, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1469786058, "body_markdown": "I&#39;ve found this is often a misnaming error, if you install from a package manager you bin may be called nodejs so you just need to symlink it like so \r\n\r\n    ln -s /usr/bin/nodejs /usr/bin/node"}, {"tags": [], "down_vote_count": 0, "creation_date": 1470198904, "answer_id": 38734497, "path": "stack.gulp.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1470198904, "body_markdown": "If you already have nodejs installed (check with `which nodejs`) and don&#39;t want to install another package, you can, as root:\r\n\r\n    update-alternatives --install /usr/bin/node node /usr/bin/nodejs 99"}, {"tags": [], "down_vote_count": 0, "creation_date": 1477666010, "answer_id": 40307629, "path": "stack.gulp.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1477666010, "body_markdown": "While `ln -s` is the obvious easiest fix, a piece of explanation:\r\n\r\n&gt; Because of a conflict with another package, the executable from the\r\n&gt; Ubuntu repositories is called nodejs instead of node. Keep this in\r\n&gt; mind as you are running software.\r\n\r\nThis advice comes up, when installing `sudo apt-get install nodejs`.\r\n\r\nSo some other known tool (I don&#39;t know what it does. While being known to ubuntu repositories, it is not installed by default in 16.04) occupies that namespace.\r\n\r\nWould have been nice, if Ubuntu had offered an advice how to fix this &#39;cleanly&#39;, if not by doing by hand what otherwise the package would do. (a collision remains a collision... if+when it would occur)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1490354556, "answer_id": 42998248, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1490354556, "body_markdown": "    sudo PATH=&quot;$PATH:/usr/local/bin&quot; npm install -g &lt;package-name&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1493542500, "answer_id": 43704629, "path": "stack.gulp.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1509029692, "last_edit_date": 1509029692, "body_markdown": "When I was using gulp i got this error.\r\n\r\n    ~$ gulp\r\n\r\n/usr/bin/env: \u2018node\u2019: No such file or directory\r\n\r\nThis was removed by executing following command you have to keep in mind that /usr/bin directory has all permissions.\r\n\r\n    ~$ ln -s /usr/bin/nodejs /usr/bin/node\r\n\r\nthis works for me..\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1496831235, "answer_id": 44410063, "path": "stack.gulp.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1496831235, "body_markdown": "Just do\r\n\r\n    $ sudo apt-get install nodejs-legacy\r\n\r\nAnd it will start working."}, {"tags": [], "down_vote_count": 0, "creation_date": 1512730816, "answer_id": 47712996, "path": "stack.gulp.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1512730816, "body_markdown": "For my case link **did** **NOT** **work** as follow\r\n\r\n&gt; ln -s /usr/bin/nodejs /usr/bin/node\r\n\r\nBut you can open /usr/local/bin/lessc as root, and change the first line from node to nodejs.\r\n\r\n&gt; -#!/usr/bin/env node\r\n\r\n&gt; +#!/usr/bin/env nodejs\r\n\r\n"}], "creation_date": 1413076664, "body_markdown": "I&#39;m trying to install nodeJs into my Ubuntu 14.04 in order to use GruntJs.\r\n\r\nI&#39;ve read about [Ubuntu different way][1] of doing it ([issues?][2]), so this is what I&#39;ve done in order to install it:\r\n\r\n    sudo apt-get install npm\r\n\r\n    sudo npm install -g grunt-cli\r\n\r\nTyping grunt after that I&#39;ve got the error:\r\n\r\n    /usr/bin/env: node: No such file or directory\r\n\r\nSo, I&#39;ve tried:\r\n\r\n    curl -sL https://deb.nodesource.com/setup | sudo bash -\r\n\r\n    sudo apt-get install -y nodejs\r\n\r\n    sudo apt-get update\r\n\r\nAnd trying again, and still getting the error, I&#39;ve tried:\r\n\r\n    sudo add-apt-repository https://launchpad.net/~chris-lea/+archive/node.js/\r\n\r\n    sudo apt-get install -y nodejs\r\n\r\nI&#39;ve got this message:\r\n\r\n    nodejs is already the newest version.\r\n    0 to upgrade, 0 to newly install, 0 to remove and 3 not to upgrade.\r\n\r\nI did try a cleanup just in case:\r\n\r\n    sudo apt-get autoremove\r\n\r\nBut nope, the error is still there: when I type grunt I still get `/usr/bin/env: node: No such file or directory`\r\n\r\nWhat should I do?\r\n\r\n\r\n\r\n\r\n\r\n  [1]: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager#debian-and-ubuntu-based-linux-distributions\r\n  [2]: https://github.com/atom/atom/issues/2241\r\n", "title": "Cannot install NodeJs: /usr/bin/env: node: No such file or directory", "view_count": 153071, "up_vote_count": 251, "answer_count": 12, "link": "https://stackoverflow.com/questions/26320901/cannot-install-nodejs-usr-bin-env-node-no-such-file-or-directory", "code_snippet": ["<code>sudo apt-get install npm\n\nsudo npm install -g grunt-cli\n</code>", "<code>/usr/bin/env: node: No such file or directory\n</code>", "<code>curl -sL https://deb.nodesource.com/setup | sudo bash -\n\nsudo apt-get install -y nodejs\n\nsudo apt-get update\n</code>", "<code>sudo add-apt-repository https://launchpad.net/~chris-lea/+archive/node.js/\n\nsudo apt-get install -y nodejs\n</code>", "<code>nodejs is already the newest version.\n0 to upgrade, 0 to newly install, 0 to remove and 3 not to upgrade.\n</code>", "<code>sudo apt-get autoremove\n</code>", "<code>/usr/bin/env: node: No such file or directory</code>", "<code>ln -s /usr/bin/nodejs /usr/bin/node</code>", "<code>sudo apt-get install nodejs-legacy</code>", "<code>ln -s /usr/bin/nodejs /usr/bin/node\n</code>", "<code>sudo npm cache clean -f\nsudo npm install -g n\nsudo n stable\n</code>", "<code>n</code>", "<code>n</code>", "<code>ln -s /usr/bin/nodejs /usr/bin/node</code>", "<code>sudo apt-get install nodejs-legacy\n</code>", "<code>$ sudo apt-get install nodejs-legacy\n</code>", "<code>ln -s /usr/bin/nodejs /usr/bin/node\n</code>", "<code>which nodejs</code>", "<code>update-alternatives --install /usr/bin/node node /usr/bin/nodejs 99\n</code>", "<code>~$ gulp\n</code>", "<code>~$ ln -s /usr/bin/nodejs /usr/bin/node\n</code>", "<code>ln -s</code>", "<code>sudo apt-get install nodejs</code>", "<code>sudo PATH=\"$PATH:/usr/local/bin\" npm install -g &lt;package-name&gt;\n</code>"], "path": "stack.grunt-cli"}, {"tags": ["node.js", "build", "package", "npm"], "creation_date": 1337448343, "body_markdown": "I&#39;m trying to build a [github jquery-ui library][1] using `grunt`, but after running `npm install` I still can&#39;t run the command according to the [readme file][2].  It just gives `No command &#39;grunt&#39; found`:\r\n\r\n    james@ubuntu:~/Documents/projects/ad2/lib/jquery-ui$ grunt build\r\n    No command &#39;grunt&#39; found, did you mean:\r\n     Command &#39;grun&#39; from package &#39;grun&#39; (universe)\r\n    grunt: command not found\r\n    james@ubuntu:~/Documents/projects/ad2/lib/jquery-ui$ npm ls\r\n    jquery-ui@1.9.0pre /home/james/Documents/projects/ad2/lib/jquery-ui\r\n    \u251c\u2500\u252c grunt@0.3.9 \r\n    \u2502 \u251c\u2500\u2500 async@0.1.18 \r\n    \u2502 \u251c\u2500\u2500 colors@0.6.0-1 \r\n    \u2502 \u251c\u2500\u252c connect@1.8.7 \r\n    \u2502 \u2502 \u251c\u2500\u2500 formidable@1.0.9 \r\n    \u2502 \u2502 \u251c\u2500\u2500 mime@1.2.5 \r\n    \u2502 \u2502 \u2514\u2500\u2500 qs@0.5.0 \r\n    \u2502 \u251c\u2500\u2500 dateformat@1.0.2-1.2.3 \r\n    \u2502 \u251c\u2500\u252c glob-whatev@0.1.6 \r\n    \u2502 \u2502 \u2514\u2500\u252c minimatch@0.2.4 \r\n    \u2502 \u2502   \u2514\u2500\u2500 lru-cache@1.0.6 \r\n    \u2502 \u251c\u2500\u252c gzip-js@0.3.1 \r\n    \u2502 \u2502 \u251c\u2500\u2500 crc32@0.2.2 \r\n    \u2502 \u2502 \u2514\u2500\u2500 deflate-js@0.2.2 \r\n    \u2502 \u251c\u2500\u2500 hooker@0.2.3 \r\n    \u2502 \u251c\u2500\u252c jshint@0.5.9 \r\n    \u2502 \u2502 \u251c\u2500\u2500 argsparser@0.0.6 \r\n    \u2502 \u2502 \u2514\u2500\u252c minimatch@0.2.4 \r\n    \u2502 \u2502   \u2514\u2500\u2500 lru-cache@1.0.6 \r\n    \u2502 \u251c\u2500\u252c nodeunit@0.6.4 \r\n    \u2502 \u2502 \u251c\u2500\u2500 tap-assert@0.0.10 \r\n    \u2502 \u2502 \u2514\u2500\u252c tap-producer@0.0.1 \r\n    \u2502 \u2502   \u251c\u2500\u2500 inherits@1.0.0 \r\n    \u2502 \u2502   \u251c\u2500\u2500 tap-results@0.0.2 \r\n    \u2502 \u2502   \u2514\u2500\u2500 yamlish@0.0.5 \r\n    \u2502 \u251c\u2500\u252c nopt@1.0.10 \r\n    \u2502 \u2502 \u2514\u2500\u2500 abbrev@1.0.3 \r\n    \u2502 \u251c\u2500\u252c prompt@0.1.12 \r\n    \u2502 \u2502 \u251c\u2500\u2500 pkginfo@0.2.3 \r\n    \u2502 \u2502 \u2514\u2500\u252c winston@0.5.11 \r\n    \u2502 \u2502   \u251c\u2500\u2500 eyes@0.1.7 \r\n    \u2502 \u2502   \u251c\u2500\u252c loggly@0.3.11 \r\n    \u2502 \u2502   \u2502 \u2514\u2500\u2500 timespan@2.2.0 \r\n    \u2502 \u2502   \u2514\u2500\u2500 stack-trace@0.0.6 \r\n    \u2502 \u251c\u2500\u2500 semver@1.0.13 \r\n    \u2502 \u251c\u2500\u252c temporary@0.0.2 \r\n    \u2502 \u2502 \u2514\u2500\u2500 package@1.0.0 \r\n    \u2502 \u251c\u2500\u2500 uglify-js@1.0.7 \r\n    \u2502 \u251c\u2500\u2500 underscore@1.2.4 \r\n    \u2502 \u2514\u2500\u2500 underscore.string@2.1.1 \r\n    \u251c\u2500\u2500 grunt-compare-size@0.1.4 \r\n    \u251c\u2500\u252c grunt-css@0.2.0 \r\n    \u2502 \u251c\u2500\u2500 csslint@0.9.8 \r\n    \u2502 \u2514\u2500\u2500 sqwish@0.2.0 \r\n    \u251c\u2500\u2500 grunt-html@0.1.1 \r\n    \u251c\u2500\u2500 request@2.9.153 \r\n    \u251c\u2500\u252c rimraf@2.0.1 \r\n    \u2502 \u2514\u2500\u2500 graceful-fs@1.1.8 \r\n    \u2514\u2500\u252c testswarm@0.2.2 \r\n      \u2514\u2500\u2500 request@2.9.202 \r\n\r\nI&#39;m confused, what am I missing please?\r\n\r\n\r\n  [1]: https://github.com/jquery/jquery-ui\r\n  [2]: https://github.com/jquery/jquery-ui#building-jquery-ui", "last_edit_date": 1401455384, "up_vote_count": 172, "link": "https://stackoverflow.com/questions/10667381/node-package-grunt-installed-but-not-available", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1337448430, "answer_id": 10667388, "path": "stack.grunt-cli.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1337448430, "body_markdown": "Sometimes you have to `npm install package_name -g` for it to work. "}, {"tags": [], "down_vote_count": 2, "creation_date": 1345053976, "answer_id": 11974634, "path": "stack.grunt-cli.answer", "score": 22, "up_vote_count": 24, "is_accepted": false, "last_activity_date": 1361802673, "last_edit_date": 1495539196, "body_markdown": "If you did have installed Grunt package by running `npm install -g grunt` and it still say&#39;s `No command &#39;grunt&#39; found` or `grunt: command not found`, a quick and dirty way to get this working is linking node binaries to your $PATH manually.\r\n\r\nOn MacOSX/Linux you can add this line to your `~/.bash_profile` or `~/.bashrc` file.\r\n\r\n    PATH=$PATH:/usr/local/Cellar/node/HEAD/bin # Add NPM binaries\r\n\r\nYou probably should replace `/usr/local/Cellar/node/HEAD/bin` by the path where your node binaries could be found.\r\n\r\nIf this is **quick and dirty** to me, it&#39;s because everything should work without doing this, but for an unknown reason, a link seem broken. As nobody on IRC could tell me why this happened, I found my own way to make it (grunt) work.\r\n\r\n*PS: This should help you make grunt works, this answer is not jquery-ui related.*\r\n\r\n***Update 02/2013** : You should take a look at [@tom-p&#39;s answer][1] which explains better what is going on. Tom gives us the real solution instead of hacking your bashrc file : both should work, but **you should try installing `grunt-cli` first**.*\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/10667381/node-package-grunt-installed-but-not-available/11974634#answer-14953653"}, {"tags": [], "down_vote_count": 5, "creation_date": 1347438937, "answer_id": 12384183, "path": "stack.grunt-cli.answer", "score": 2, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1389126276, "last_edit_date": 1389126276, "body_markdown": "The right way to install grunt is by running this command:\r\n\r\n    npm install grunt -g\r\n\r\n(Prepend &quot;sudo&quot; to the command above if you get a EACCESS error message)\r\n\r\n-g will make npm install the package globally, so you will be able to use it whenever you want in your current machine."}, {"tags": [], "down_vote_count": 0, "creation_date": 1349715049, "answer_id": 12785986, "path": "stack.grunt-cli.answer", "score": 26, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1349715049, "body_markdown": "Add ```/usr/local/share/npm/bin/``` to your ```$PATH```"}, {"tags": [], "down_vote_count": 0, "creation_date": 1361264991, "answer_id": 14953653, "path": "stack.grunt-cli.answer", "score": 389, "up_vote_count": 389, "is_accepted": true, "last_activity_date": 1361264991, "body_markdown": "The command line tools are not included with the latest version of Grunt (0.4 at time of writing) instead you need to install them separately.\r\n\r\nThis is a good idea because it means you can have different versions of Grunt running on different projects but still use the nice concise `grunt` command to run them.\r\n\r\nSo first install the grunt cli tools globally:\r\n\r\n    npm install -g grunt-cli\r\n\r\n(or possibly `sudo npm install -g grunt-cli` ).\r\n\r\nYou can establish that&#39;s working by typing `grunt --version`\r\n\r\nNow you can install the current version of Grunt local to your project. So from your project&#39;s location...\r\n\r\n    npm install grunt --save-dev\r\n\r\nThe `save-dev` switch isn&#39;t strictly necessary but is a good idea because it will mark grunt in its package.json devDependencies section as a development only module."}, {"tags": [], "down_vote_count": 1, "creation_date": 1396388120, "answer_id": 22797341, "path": "stack.grunt-cli.answer", "score": 12, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1406210122, "last_edit_date": 1406210122, "body_markdown": "In my case, i need modify the file /usr/local/bin/grunt in line 1 ( don&#39;t make this ):\r\n\r\n     #!/usr/bin/env node //remove this line\r\n     #!/usr/bin/env nodejs // and put this line to run with nodejs\r\n\r\n\r\nEdited:\r\n\r\n To avoid problems, I created a link with the name of &quot;node&quot; because many other programs still use &quot;node&quot; command.\r\n\r\n     sudo ln -s /usr/bin/nodejs /usr/sbin/node"}, {"tags": [], "down_vote_count": 0, "creation_date": 1406735720, "answer_id": 25041435, "path": "stack.grunt-cli.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1406735720, "body_markdown": "On WIN7 I had to manually add the path to the npm folder (which contains the elusive &#39;grunt&#39; file)  to the Windows PATH environmental variable.   In my case that was C:\\Users\\mhaagsma\\AppData\\Roaming\\npm"}, {"tags": [], "down_vote_count": 0, "creation_date": 1429132784, "answer_id": 29661123, "path": "stack.grunt-cli.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1429132784, "body_markdown": "Other solution is to remove the ubuntu bundler in my case i used:\r\n\r\n    sudo apt-get remove ruby-bundler \r\nThat worked for me."}, {"tags": [], "down_vote_count": 0, "creation_date": 1457804512, "answer_id": 35961131, "path": "stack.grunt-cli.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1459198959, "last_edit_date": 1459198959, "body_markdown": "On Windows, part of the mystery appears to be where npm installs the Grunt.cmd file. While on my Linux box, I just had to run sudo npm install -g grunt-cli, on my Windows 8 work laptop, Grunt was placed in the &#39;.npm-global&#39; directory: %USER_HOME%\\\\.npm-global and I had to add that to the Path.\r\n\r\nSo on Windows my steps were:\r\n\r\n- npm install -g grunt-cli \r\n\r\n- figure out where the heck grunt.cmd was (I guess for some it is in %USER_HOME%\\App_Data\\Roaming)\r\n\r\n- Added the location to my Path environment variable. Opened a new cmd prompt and the grunt command ran fine."}, {"tags": [], "down_vote_count": 0, "creation_date": 1471634534, "answer_id": 39046355, "path": "stack.grunt-cli.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1471640198, "last_edit_date": 1471640198, "body_markdown": "There is one more way to run grunt on windows, without adding anything globally. This is a case when you don&#39;t have to do anything with %PATH%\r\n\r\nif you have grunt and grunt-cli installed (without -g switch).\r\nEither by:\r\n\r\n    npm install grunt-cli\r\n    npm install grunt@0.4.5\r\n   \r\n\r\nOr by having that in your packages.json file like:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    &quot;devDependencies&quot;: {\r\n    \t&quot;grunt-cli&quot;: &quot;^1.2.0&quot;,\r\n\t\t&quot;grunt&quot;: &quot;^0.4.5&quot;,\r\n\r\nYou can call grunt from your local installation by:\r\n\r\n&lt;!-- language: lang-sh --&gt;\r\n\r\n    node node_modules\\grunt-cli\\bin\\grunt --version\r\n\r\nThis is a solution for those who for some reasons don&#39;t want to or can&#39;t play with PATH, or have something else messing it all the time, for instance on a build agent.\r\n\r\nEdit:\r\nAdded versions as the grunt-cli works with grunt &gt; 0.3"}], "title": "Node package ( Grunt ) installed but not available", "view_count": 116257, "answer_count": 10, "code_snippet": ["<code>grunt</code>", "<code>npm install</code>", "<code>No command 'grunt' found</code>", "<code>james@ubuntu:~/Documents/projects/ad2/lib/jquery-ui$ grunt build\nNo command 'grunt' found, did you mean:\n Command 'grun' from package 'grun' (universe)\ngrunt: command not found\njames@ubuntu:~/Documents/projects/ad2/lib/jquery-ui$ npm ls\njquery-ui@1.9.0pre /home/james/Documents/projects/ad2/lib/jquery-ui\n\u251c\u2500\u252c grunt@0.3.9 \n\u2502 \u251c\u2500\u2500 async@0.1.18 \n\u2502 \u251c\u2500\u2500 colors@0.6.0-1 \n\u2502 \u251c\u2500\u252c connect@1.8.7 \n\u2502 \u2502 \u251c\u2500\u2500 formidable@1.0.9 \n\u2502 \u2502 \u251c\u2500\u2500 mime@1.2.5 \n\u2502 \u2502 \u2514\u2500\u2500 qs@0.5.0 \n\u2502 \u251c\u2500\u2500 dateformat@1.0.2-1.2.3 \n\u2502 \u251c\u2500\u252c glob-whatev@0.1.6 \n\u2502 \u2502 \u2514\u2500\u252c minimatch@0.2.4 \n\u2502 \u2502   \u2514\u2500\u2500 lru-cache@1.0.6 \n\u2502 \u251c\u2500\u252c gzip-js@0.3.1 \n\u2502 \u2502 \u251c\u2500\u2500 crc32@0.2.2 \n\u2502 \u2502 \u2514\u2500\u2500 deflate-js@0.2.2 \n\u2502 \u251c\u2500\u2500 hooker@0.2.3 \n\u2502 \u251c\u2500\u252c jshint@0.5.9 \n\u2502 \u2502 \u251c\u2500\u2500 argsparser@0.0.6 \n\u2502 \u2502 \u2514\u2500\u252c minimatch@0.2.4 \n\u2502 \u2502   \u2514\u2500\u2500 lru-cache@1.0.6 \n\u2502 \u251c\u2500\u252c nodeunit@0.6.4 \n\u2502 \u2502 \u251c\u2500\u2500 tap-assert@0.0.10 \n\u2502 \u2502 \u2514\u2500\u252c tap-producer@0.0.1 \n\u2502 \u2502   \u251c\u2500\u2500 inherits@1.0.0 \n\u2502 \u2502   \u251c\u2500\u2500 tap-results@0.0.2 \n\u2502 \u2502   \u2514\u2500\u2500 yamlish@0.0.5 \n\u2502 \u251c\u2500\u252c nopt@1.0.10 \n\u2502 \u2502 \u2514\u2500\u2500 abbrev@1.0.3 \n\u2502 \u251c\u2500\u252c prompt@0.1.12 \n\u2502 \u2502 \u251c\u2500\u2500 pkginfo@0.2.3 \n\u2502 \u2502 \u2514\u2500\u252c winston@0.5.11 \n\u2502 \u2502   \u251c\u2500\u2500 eyes@0.1.7 \n\u2502 \u2502   \u251c\u2500\u252c loggly@0.3.11 \n\u2502 \u2502   \u2502 \u2514\u2500\u2500 timespan@2.2.0 \n\u2502 \u2502   \u2514\u2500\u2500 stack-trace@0.0.6 \n\u2502 \u251c\u2500\u2500 semver@1.0.13 \n\u2502 \u251c\u2500\u252c temporary@0.0.2 \n\u2502 \u2502 \u2514\u2500\u2500 package@1.0.0 \n\u2502 \u251c\u2500\u2500 uglify-js@1.0.7 \n\u2502 \u251c\u2500\u2500 underscore@1.2.4 \n\u2502 \u2514\u2500\u2500 underscore.string@2.1.1 \n\u251c\u2500\u2500 grunt-compare-size@0.1.4 \n\u251c\u2500\u252c grunt-css@0.2.0 \n\u2502 \u251c\u2500\u2500 csslint@0.9.8 \n\u2502 \u2514\u2500\u2500 sqwish@0.2.0 \n\u251c\u2500\u2500 grunt-html@0.1.1 \n\u251c\u2500\u2500 request@2.9.153 \n\u251c\u2500\u252c rimraf@2.0.1 \n\u2502 \u2514\u2500\u2500 graceful-fs@1.1.8 \n\u2514\u2500\u252c testswarm@0.2.2 \n  \u2514\u2500\u2500 request@2.9.202 \n</code>", "<code>grunt</code>", "<code>npm install -g grunt-cli\n</code>", "<code>sudo npm install -g grunt-cli</code>", "<code>grunt --version</code>", "<code>npm install grunt --save-dev\n</code>", "<code>save-dev</code>", "<code>sudo</code>", "<code>node not found</code>", "<code>sudo ln -s /usr/local/bin/nodejs /usr/local/bin/node</code>", "<code>/usr/local/share/npm/bin/</code>", "<code>$PATH</code>", "<code>$HOME/npm/bin</code>", "<code>npm install -g grunt</code>", "<code>No command 'grunt' found</code>", "<code>grunt: command not found</code>", "<code>~/.bash_profile</code>", "<code>~/.bashrc</code>", "<code>PATH=$PATH:/usr/local/Cellar/node/HEAD/bin # Add NPM binaries\n</code>", "<code>/usr/local/Cellar/node/HEAD/bin</code>", "<code>grunt-cli</code>", "<code> #!/usr/bin/env node //remove this line\n #!/usr/bin/env nodejs // and put this line to run with nodejs\n</code>", "<code> sudo ln -s /usr/bin/nodejs /usr/sbin/node\n</code>", "<code>apt-get install nodejs-legacy</code>", "<code>brew install nodejs-leacy</code>", "<code>npm install grunt-cli\nnpm install grunt@0.4.5\n</code>", "<code>\"devDependencies\": {\n    \"grunt-cli\": \"^1.2.0\",\n    \"grunt\": \"^0.4.5\",\n</code>", "<code>node node_modules\\grunt-cli\\bin\\grunt --version\n</code>", "<code>npm install grunt -g\n</code>", "<code>grunt</code>", "<code>grunt-cli</code>", "<code>npm install package_name -g</code>", "<code>sudo apt-get remove ruby-bundler \n</code>"], "path": "stack.grunt-cli"}, {"tags": ["html", "css", "twitter-bootstrap-3"], "creation_date": 1376976437, "body_markdown": "After downloading a complete pack of bootstrap 3 from http://getbootstrap.com, I noticed that there is a separate css file for theme. How to make use of it? Please explain?\r\n\r\nI included `bootstrap-theme.css` in my existing bootstrap project, but there is no difference in output.", "last_edit_date": 1402906230, "up_vote_count": 176, "link": "https://stackoverflow.com/questions/18327543/how-to-use-bootstrap-theme-css-with-bootstrap-3", "_childDocuments_": [{"tags": [], "down_vote_count": 40, "creation_date": 1377456516, "answer_id": 18432455, "path": "stack.grunt-cli.answer", "score": 72, "up_vote_count": 112, "is_accepted": false, "last_activity_date": 1428768081, "last_edit_date": 1428768081, "body_markdown": "First, `bootstrap-theme.css` is nothing else but equivalent of Bootstrap 2.x style in Bootstrap 3. If you really want to use it, just add it ALONG with `bootstrap.css` (minified version will work too)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1382100855, "answer_id": 19450210, "path": "stack.grunt-cli.answer", "score": 32, "up_vote_count": 32, "is_accepted": false, "last_activity_date": 1382100855, "body_markdown": "Bootstrap-theme.css is the additional CSS file, which is optional for you to use. It gives 3D effects on the buttons and some other elements."}, {"tags": [], "down_vote_count": 0, "creation_date": 1389910780, "answer_id": 21174123, "path": "stack.grunt-cli.answer", "score": 90, "up_vote_count": 90, "is_accepted": false, "last_activity_date": 1421252750, "last_edit_date": 1421252750, "body_markdown": "For an example of the css styles have a look at: http://getbootstrap.com/examples/theme/\r\n\r\n&lt;strike&gt;If you want to see how the example looks *without* the bootstrap-theme.css file open up your browser developer tools and delete the link from the &amp;lt;head&amp;gt; of the example and then you can compare it.\r\n\r\nI know this is an old question but posted it just in case anyone is looking for an example of  how it looks like I was.&lt;/strike&gt;\r\n\r\n**Update**\r\n\r\n`bootstrap.css` = main css framework (grids, basic styles, etc)\r\n\r\n`bootstrap-theme.css` = extended styling (3D buttons, gradients etc). *This file is optional and does not effect the functionality of bootstrap at all, it only enhances the appearance.*\r\n\r\n**Update 2**\r\n\r\nWith the release of v3.2.0 Bootstrap have added an option to view the theme css on the doc pages. If you go to one of the doc pages ([css][1], [components][2], [javascript][3]) you should see a &quot;Preview theme&quot; link at the bottom of the side nav which you can use to turn the theme css on and off.\r\n\r\n\r\n  [1]: http://getbootstrap.com/css/\r\n  [2]: http://getbootstrap.com/components/\r\n  [3]: http://getbootstrap.com/javascript/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1399477256, "answer_id": 23522301, "path": "stack.grunt-cli.answer", "score": 374, "up_vote_count": 374, "is_accepted": true, "last_activity_date": 1428770074, "last_edit_date": 1428770074, "body_markdown": "Upon downloading Bootstrap 3.x, you&#39;ll get **bootstrap.css** and **bootstrap-theme.css** (not to mention the minified versions of these files that are also present).\r\n\r\n# bootstrap.css #\r\n\r\n`bootstrap.css` is completely styled and ready to use, if such is your desire. It is perhaps a bit plain but it is ready and it is there.\r\n\r\n&gt; You do not need to use bootstrap-theme.css if you don&#39;t want to and things will be just fine.\r\n\r\n# bootstrap-theme.css #\r\n\r\n`bootstrap-theme.css` is just what the name of the file is trying to suggest: it is a theme for bootstrap that is creatively considered &#39;THE bootstrap theme&#39;. The name of the file confuses things just a bit since the base `bootstrap.css` already has styling applied and I, for one, would consider those styles to be the default. But that conclusion is apparently incorrect in light of things said in the Bootstrap documentation&#39;s examples section in regard to this `bootstrap-theme.css` file:\r\n\r\n&gt; &quot;Load the optional Bootstrap theme for a visually enhanced experience.&quot;\r\n\r\nThe above quote is found here *http://getbootstrap.com/getting-started/#examples* on a thumbnail that links to this example page *http://getbootstrap.com/examples/theme/*. The idea is that `bootstrap-theme.css` is **THE** bootstrap theme AND it&#39;s optional.\r\n\r\n# Themes at BootSwatch.com #\r\n\r\nAbout the themes at BootSwatch.com: These themes are not implemented like `bootstrap-theme.css`. The BootSwatch themes are modified versions of the original `bootstrap.css`. So, you should definitely NOT use a theme from BootSwatch AND the `bootstrap-theme.css` file at the same time.\r\n\r\n# Custom Theme #\r\n\r\nAbout Your Own Custom Theme: You might choose to modify `bootstrap-theme.css` when creating your own theme. Doing so may make it easier to make styling changes without accidentally breaking any of that built-in Bootstrap goodness."}, {"tags": [], "down_vote_count": 0, "creation_date": 1414362635, "answer_id": 26578723, "path": "stack.grunt-cli.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1414362635, "body_markdown": "As stated by others, the filename **bootstrap-theme.css** is very confusing.  I would have chosen something like **bootstrap-3d.css** or **bootstrap-fancy.css** which would be more descriptive of what it actually does.  What the world sees as a &quot;Bootstrap Theme&quot; is a thing you can get from BootSwatch which is a totally different beast.\r\n\r\nWith that said, the effects are quite nice - gradients and shadows and such.  Unfortunately this file will wreak havoc on BootSwatch Themes, so I decided to dig into what it would take to make it play nice with them.\r\n\r\n# LESS #\r\nBootstrap-theme.css is generated from the **theme.less** file in the Bootstrap source.  The affected elements are (as of Bootstrap v3.2.0):\r\n\r\n - List items\r\n - Buttons\r\n - Images\r\n - Dropdowns\r\n - Navbars\r\n - Alerts\r\n - Progress bars\r\n - List Groups\r\n - Panels\r\n - Wells\r\n\r\nThe theme.less file depends on:\r\n\r\n    @import &quot;variables.less&quot;;\r\n    @import &quot;mixins.less&quot;;\r\n\r\nThe code uses colors defined in variables.less in several places, for example:\r\n\r\n    // Give the progress background some depth\r\n    .progress {\r\n        #gradient &gt; .vertical(@start-color: darken(@progress-bg, 4%); @end-color: @progress-bg)\r\n    }\r\n\r\nThis why bootstrap-theme.css totally messes up BootSwatch Themes.  The good news is that BootSwatch Themes are also created from variables.less files, so you can simply build a bootstrap-theme.css for your BootSwatch Theme.\r\n\r\n# Building bootstrap-theme.css #\r\nThe right way to do it is to update the Theme build process, but here here is the quick and dirty way.  Replace the variables.less file in the Bootstrap source with the one from your Bootswatch Theme and build it and voila you have a bootstrap-theme.css file for your Bootswatch Theme.\r\n\r\n# Building Bootstrap itself #\r\nBuilding Bootstrap may sound daunting, but it is actually very simple:\r\n\r\n 1. Download the Bootstrap source code\r\n 2. Download and install NodeJS\r\n 3. Open a command prompt and navigate to the bootstrap source folder.  Type &quot;npm install&quot;.  This will add the &quot;node_modules&quot; folder to the project and download all the Node stuff you need.\r\n 4. Install grunt globally (the -g option) by typing &quot;npm install -g grunt-cli&quot;\r\n 5. Rename the &quot;dist&quot; folder to &quot;dist-orig&quot; then rebuild it by typing &quot;grunt dist&quot;.  Now check that there is a new &quot;dist&quot; folder which contains all you need to use your custom Bootstrap build.\r\n\r\nDone.  See, that was easy, wasn&#39;t it?"}, {"tags": [], "down_vote_count": 0, "creation_date": 1427989863, "answer_id": 29417195, "path": "stack.grunt-cli.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1427989863, "body_markdown": "I know this post is kinda old but...\r\n\r\n&amp;nbsp; As &#39;witttness&#39; pointed out.\r\n&gt;&lt;b&gt;About Your Own Custom Theme&lt;/b&gt; You might choose to modify bootstrap-theme.css when creating your own theme. Doing so may make it easier to make styling changes without accidentally breaking any of that built-in Bootstrap goodness.\r\n\r\n&amp;nbsp; I see it as Bootstrap has seen over the years that everyone wants something a bit different than the core styles.  While you could modify bootstrap.css it might break things and it could make updating to a newer version a real pain and time consuming.  Downloading from a &#39;theme&#39; site means you have to wait on &lt;i&gt;if&lt;/i&gt; that creator updates that theme, big &lt;b&gt;if&lt;/b&gt; sometimes, right?\r\n\r\n&amp;nbsp; Some build their own &#39;custom.css&#39; file and that&#39;s ok, but if you use &#39;bootstrap-theme.css&#39; a lot of stuff is already built and this allows you to roll your own theme faster &#39;without&#39; disrupting the core of bootstrap.css.  I for one don&#39;t like the 3D buttons and gradients most of the time, so change them using bootstrap-theme.css.  Add margins or padding, change the radius to your buttons, &lt;i&gt;and so on&lt;/i&gt;...  "}, {"tags": [], "down_vote_count": 0, "creation_date": 1453406528, "answer_id": 34933219, "path": "stack.grunt-cli.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1453406528, "body_markdown": "A rather old post but I thought I would add my two cents about themes. It&#39;s understandable that alot of people (myself included) love the bootstrap framework with it&#39;s responsive grid layout, but we also want to differentiate ourselves from other &quot;*out of the box*&quot; websites. The availability of unique bootstrap themes and templates has exploded in the last several years. I&#39;ve recently created my own site to provide some of these themes at: [http://thetoolsmith.com][1] (Shameless plug) \r\n\r\nThe bottom line is that you&#39;ll still need the basic bootstrap framework but you can modify or add styles to bootstrap-theme.css so that it works in conjunction with the core files but provides a different look and feel you can make your own.\r\n\r\n\r\n  [1]: http://thetoolsmith.com"}], "title": "How to use bootstrap-theme.css with bootstrap 3?", "view_count": 120523, "answer_count": 7, "code_snippet": ["<code>bootstrap-theme.css</code>", "<code>bootstrap.css</code>", "<code>bootstrap-theme.css</code>", "<code>bootstrap.css</code>", "<code>bootstrap-theme.css</code>", "<code>bootstrap-theme.css</code>", "<code>bootstrap-theme.css</code>", "<code>bootstrap.css</code>", "<code>bootstrap-theme.css</code>", "<code>bootstrap-theme.css</code>", "<code>bootstrap.css</code>", "<code>bootstrap-theme.css</code>", "<code>bootstrap.css</code>", "<code>bootstrap-theme.css</code>", "<code>bootstrap-theme</code>", "<code>bootstrap-theme.css</code>", "<code>bootstrap.css</code>", "<code>@import \"variables.less\";\n@import \"mixins.less\";\n</code>", "<code>// Give the progress background some depth\n.progress {\n    #gradient &gt; .vertical(@start-color: darken(@progress-bg, 4%); @end-color: @progress-bg)\n}\n</code>"], "path": "stack.grunt-cli"}], "name": "grunt-cli"}