{"_childDocuments_": [{"tags": ["python", "django", "django-models"], "creation_date": 1324584663, "body_markdown": "When we add a database field in django we generally write `models.CharField(max_length=100, null=True, blank=True)`. The same is done with `ForeignKey`, `DecimalField` etc. What is the basic difference in having \r\n\r\n1. `null=True` only\r\n2. `blank=True` only\r\n3. `null=True`, `blank=True`\r\n\r\nin respect to different (`CharField`, `ForeignKey`, `ManyToManyField`, `DateTimeField`) fields. What are the advantages/disadvantages of using 1/2/3?", "last_edit_date": 1450510570, "up_vote_count": 548, "link": "https://stackoverflow.com/questions/8609192/differentiate-null-true-blank-true-in-django", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1324586126, "answer_id": 8609425, "path": "stack.django.answer", "score": 664, "up_vote_count": 665, "is_accepted": true, "last_activity_date": 1516652510, "last_edit_date": 1516652510, "body_markdown": "**`null` is for the DataBase column value**\r\n\r\n`null=True` sets `NULL` (versus `NOT NULL`) on the column in your DB. Blank values for Django field types such as `DateTimeField` or `ForeignKey` will be stored as `NULL` in the DB.\r\n\r\n**`blank` is for the field requirement in forms**\r\n\r\n`blank=True` determines whether the field will be required in forms. This includes the admin and your own custom forms. If `blank=True` then the field will not be required, whereas if it&#39;s `False` the field cannot be blank.\r\n\r\nThe combo of the two is so frequent because typically if you&#39;re going to allow a field to be blank in your form, you&#39;re going to also need your database to allow `NULL` values for that field. The exception is `CharField`s and `TextField`s, which in Django are *never* saved as `NULL`. Blank values are stored in the DB as an empty string (`&#39;&#39;`).\r\n\r\nA few examples:\r\n\r\n    models.DateTimeField(blank=True) # raises IntegrityError if blank\r\n\r\n    models.DateTimeField(null=True) # NULL allowed, but must be filled out in a form\r\n\r\nObviously those two options don&#39;t make logical sense to use (though, there might be a use case for `null=True, blank=False` if you want a field to always be required in forms, but optional when dealing with an object through something like the shell.)\r\n\r\n    models.CharField(blank=True) # No problem, blank is stored as &#39;&#39;\r\n\r\n    models.CharField(null=True) # NULL allowed, but will never be set as NULL\r\n\r\n`CHAR` and `TEXT` types are never saved as `NULL` by Django, so `null=True` is unnecessary. However, you can manually set one of these fields to `None` to force set it as `NULL`. If you have a scenario where that might be necessary, you should still include `null=True`."}, {"tags": [], "down_vote_count": 7, "creation_date": 1392559200, "answer_id": 21812150, "path": "stack.django.answer", "score": 67, "up_vote_count": 74, "is_accepted": false, "last_activity_date": 1439544038, "last_edit_date": 1439544038, "body_markdown": "This is how the ORM maps `blank` &amp; `null` fields for Django 1.8\r\n\r\n    class Test(models.Model):\r\n        charNull        = models.CharField(max_length=10, null=True)\r\n        charBlank       = models.CharField(max_length=10, blank=True)\r\n        charNullBlank   = models.CharField(max_length=10, null=True, blank=True)\r\n\r\n        intNull         = models.IntegerField(null=True)\r\n        intBlank        = models.IntegerField(blank=True)\r\n        intNullBlank    = models.IntegerField(null=True, blank=True)\r\n\r\n        dateNull        = models.DateTimeField(null=True)\r\n        dateBlank       = models.DateTimeField(blank=True)\r\n        dateNullBlank   = models.DateTimeField(null=True, blank=True)        \r\n\r\n\r\nThe database fields created for **PostgreSQL 9.4** are : \r\n\r\n    CREATE TABLE Test (\r\n      id              serial                    NOT NULL,\r\n\r\n      &quot;charNull&quot;      character varying(10),\r\n      &quot;charBlank&quot;     character varying(10)     NOT NULL,\r\n      &quot;charNullBlank&quot; character varying(10),\r\n\r\n      &quot;intNull&quot;       integer,\r\n      &quot;intBlank&quot;      integer                   NOT NULL,\r\n      &quot;intNullBlank&quot;  integer,\r\n\r\n      &quot;dateNull&quot;      timestamp with time zone,\r\n      &quot;dateBlank&quot;     timestamp with time zone  NOT NULL,\r\n      &quot;dateNullBlank&quot; timestamp with time zone,\r\n      CONSTRAINT Test_pkey PRIMARY KEY (id)\r\n    )\r\n\r\nThe database fields created for **MySQL 5.6** are : \r\n\r\n    CREATE TABLE Test (\r\n         `id`            INT(11)     NOT  NULL    AUTO_INCREMENT,\r\n\r\n         `charNull`      VARCHAR(10) NULL DEFAULT NULL,\r\n         `charBlank`     VARCHAR(10) NOT  NULL,\r\n         `charNullBlank` VARCHAR(10) NULL DEFAULT NULL,\r\n\r\n         `intNull`       INT(11)     NULL DEFAULT NULL,\r\n         `intBlank`      INT(11)     NOT  NULL,\r\n         `intNullBlank`  INT(11)     NULL DEFAULT NULL,\r\n\r\n         `dateNull`      DATETIME    NULL DEFAULT NULL,\r\n         `dateBlank`     DATETIME    NOT  NULL,\r\n         `dateNullBlank` DATETIME    NULL DEFAULT NULL\r\n    )\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1397674466, "answer_id": 23117850, "path": "stack.django.answer", "score": 14, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1436960365, "last_edit_date": 1436960365, "body_markdown": "As said in Django Model Field reference: [Link][1]\r\n\r\n## Field options ##\r\n*The following arguments are available to all field types. All are optional.*\r\n\r\n&lt;br&gt;\r\n### `null` ###\r\n####`Field.null`&lt;br&gt;&lt;br&gt;\r\nIf `True`, Django will store empty values as `NULL` in the database. Default is `False`.\r\n\r\nAvoid using `null` on string-based fields such as `CharField` and `TextField` because empty string values will always be stored as empty strings, not as `NULL`. If a string-based field has `null=True`, that means it has two possible values for &quot;no data&quot;: `NULL`, and the empty string. In most cases, it\u2019s redundant to have two possible values for &quot;no data&quot;; the Django convention is to use the empty string, not `NULL`.\r\n\r\nFor both string-based and non-string-based fields, you will also need to set `blank=True` if you wish to permit empty values in forms, as the `null` parameter only affects database storage (see `blank`).\r\n\r\n&gt;**Note**\r\n&gt;\r\n&gt; When using the Oracle database backend, the value NULL will be stored to denote the empty string regardless of this attribute\r\n\r\n&lt;br&gt;\r\n### `blank` ###\r\n\r\n#### `Field.blank` &lt;br&gt;&lt;br&gt;\r\n\r\nIf `True`, the field is allowed to be blank. Default is `False`.\r\n\r\nNote that this is different than `null`. `null` is purely database-related, whereas `blank` is validation-related. If a field has `blank=True`, form validation will allow entry of an empty value. If a field has `blank=False`, the field will be required.\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/dev/ref/models/fields/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1410409575, "answer_id": 25779074, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1410409575, "body_markdown": "Simply `null=True` defines database should accept `NULL` values, on other hand `blank=True` defines on form validation this field should accept blank values or not(If `blank=True` it accept form without a value in that field and `blank=False`[default value] on form validation it will show **This field is required** error.\r\n\r\n`null=True/False` related to database\r\n\r\n`blank=True/False` related to form validation\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1483306968, "answer_id": 41419291, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1483309027, "last_edit_date": 1483309027, "body_markdown": "Here is an example of the field with blank= true and null= true\r\n    description = models.TextField(blank=True, null= True)\r\n\r\nIn this case: \r\nblank = True: tells our form that it is ok to leave the description field blank\r\n\r\n\r\nand\r\n\r\nnull = True: tells our database that it is ok to record a null value in our db field and not give an error.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1494547139, "answer_id": 43927371, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1494547139, "body_markdown": "When we save anything in Django admin two steps validation happens, on Django level and on Database level. We can&#39;t save text in a number field.\r\n\r\nDatabase has data type NULL, it&#39;s nothing. When Django creates columns in the database it specifies that they can&#39;t be empty. And if you will try to save NULL you will get the database error.\r\n\r\nAlso on Django-Admin level, all fields are required by default, you can&#39;t save blank field, Django will throw you an error.\r\n\r\nSo, if you want to save blank field you need to allow it on Django and Database level.\r\nblank=True - will allow empty field in admin panel\r\nnull=True - will allow saving NULL to the database column."}, {"tags": [], "down_vote_count": 0, "creation_date": 1512120057, "answer_id": 47590145, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1512120057, "body_markdown": "When looking at the options in a Django model definition, it&#39;s crucial to understand that they serve (at least) two purposes: defining the database tables, and defining the default format and validation of model forms. (I say &quot;default&quot; because the values can always be overridden by providing a custom form.) Some options affect the database, some options affect forms, and some affect both.\r\n\r\nWhen it comes to `null` and `blank`, other answers have already made clear that the former affects the database table definition and the latter affects model validation. I think the distinction can be made even clearer by looking at the use cases for all four possible configurations:\r\n\r\n- `null=False`, `blank=False`: This is the default configuration and means that the value is required in all circumstances.\r\n\r\n- `null=True`, `blank=True`: This means that the field is optional in all circumstances. (As noted below, though, this is *not* the recommended way to make string-based fields optional.)\r\n\r\n- `null=False`, `blank=True`: This means that the form doesn&#39;t require a value, but the database does. There are a number of use cases for this:\r\n\r\n  - The most common use of this configuration is for optional string-based fields. As [noted in the documentation](https://docs.djangoproject.com/en/dev/ref/models/fields/#null), the Django idiom is to use the empty string to indicate a missing value. If `NULL` was also allowed you would end up with two different ways to indicate a missing value, which would be less than ideal.\r\n\r\n  - Another common situation is that you want to calculate one field automatically based on the value of another (in your `save()` method, say). You don&#39;t want the user to provide the value in a form (hence `blank=True`), but you do want the database to enforce that a value is always provided (`null=False`).\r\n\r\n  - Another use of this configuration is when you want to indicate that a `ManyToManyField` is optional. Because this field is implemented as a separate table rather than a database column, [`null` is meaningless](https://stackoverflow.com/a/18244527/2395796). The value of `blank` will still affect forms, though, controlling whether or not validation will succeed when there are no relations.\r\n\r\n- `null=True`, `blank=False`: This means that the form requires a value, but the database doesn&#39;t. This may be the most infrequently used configuration, but there are some use cases for it:\r\n\r\n  - It&#39;s perfectly reasonable to require your users to always include a value even if it&#39;s not actually required by your business logic. After all, forms are only one way of adding and editing data. You may have code that is generating data which doesn&#39;t need the same stringent validation that you want to require of a human editor.\r\n\r\n  - Another use case for this that I&#39;ve seen is when you have a `ForeignKey` for which you don&#39;t wish to allow [cascade deletion](https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.on_delete). That is, in normal use the relation should always be there (`blank=False`), but if the thing it points to happens to be deleted, you don&#39;t want this object to be deleted too. In that case you can use `null=True` and `on_delete=models.SET_NULL` to implement a simple kind of [soft deletion](https://stackoverflow.com/questions/378331/physical-vs-logical-soft-delete-of-database-record)."}], "title": "differentiate null=True, blank=True in django", "view_count": 129302, "answer_count": 7, "code_snippet": ["<code>models.CharField(max_length=100, null=True, blank=True)</code>", "<code>ForeignKey</code>", "<code>DecimalField</code>", "<code>null=True</code>", "<code>blank=True</code>", "<code>null=True</code>", "<code>blank=True</code>", "<code>CharField</code>", "<code>ForeignKey</code>", "<code>ManyToManyField</code>", "<code>DateTimeField</code>", "<code>ForeignKey</code>", "<code>blank=True</code>", "<code>null=True</code>", "<code>null</code>", "<code>null</code>", "<code>null=True</code>", "<code>NULL</code>", "<code>NOT NULL</code>", "<code>DateTimeField</code>", "<code>ForeignKey</code>", "<code>NULL</code>", "<code>blank</code>", "<code>blank=True</code>", "<code>blank=True</code>", "<code>False</code>", "<code>NULL</code>", "<code>CharField</code>", "<code>TextField</code>", "<code>NULL</code>", "<code>''</code>", "<code>models.DateTimeField(blank=True) # raises IntegrityError if blank\n\nmodels.DateTimeField(null=True) # NULL allowed, but must be filled out in a form\n</code>", "<code>null=True, blank=False</code>", "<code>models.CharField(blank=True) # No problem, blank is stored as ''\n\nmodels.CharField(null=True) # NULL allowed, but will never be set as NULL\n</code>", "<code>CHAR</code>", "<code>TEXT</code>", "<code>NULL</code>", "<code>null=True</code>", "<code>None</code>", "<code>NULL</code>", "<code>null=True</code>", "<code>IntegrityError</code>", "<code>CHAR</code>", "<code>TEXT</code>", "<code>NULL</code>", "<code>None</code>", "<code>blank</code>", "<code>null</code>", "<code>class Test(models.Model):\n    charNull        = models.CharField(max_length=10, null=True)\n    charBlank       = models.CharField(max_length=10, blank=True)\n    charNullBlank   = models.CharField(max_length=10, null=True, blank=True)\n\n    intNull         = models.IntegerField(null=True)\n    intBlank        = models.IntegerField(blank=True)\n    intNullBlank    = models.IntegerField(null=True, blank=True)\n\n    dateNull        = models.DateTimeField(null=True)\n    dateBlank       = models.DateTimeField(blank=True)\n    dateNullBlank   = models.DateTimeField(null=True, blank=True)        \n</code>", "<code>CREATE TABLE Test (\n  id              serial                    NOT NULL,\n\n  \"charNull\"      character varying(10),\n  \"charBlank\"     character varying(10)     NOT NULL,\n  \"charNullBlank\" character varying(10),\n\n  \"intNull\"       integer,\n  \"intBlank\"      integer                   NOT NULL,\n  \"intNullBlank\"  integer,\n\n  \"dateNull\"      timestamp with time zone,\n  \"dateBlank\"     timestamp with time zone  NOT NULL,\n  \"dateNullBlank\" timestamp with time zone,\n  CONSTRAINT Test_pkey PRIMARY KEY (id)\n)\n</code>", "<code>CREATE TABLE Test (\n     `id`            INT(11)     NOT  NULL    AUTO_INCREMENT,\n\n     `charNull`      VARCHAR(10) NULL DEFAULT NULL,\n     `charBlank`     VARCHAR(10) NOT  NULL,\n     `charNullBlank` VARCHAR(10) NULL DEFAULT NULL,\n\n     `intNull`       INT(11)     NULL DEFAULT NULL,\n     `intBlank`      INT(11)     NOT  NULL,\n     `intNullBlank`  INT(11)     NULL DEFAULT NULL,\n\n     `dateNull`      DATETIME    NULL DEFAULT NULL,\n     `dateBlank`     DATETIME    NOT  NULL,\n     `dateNullBlank` DATETIME    NULL DEFAULT NULL\n)\n</code>", "<code>blank</code>", "<code>null</code>", "<code>NULL</code>", "<code>blank</code>", "<code>blank</code>", "<code>null</code>", "<code>blank</code>", "<code>null</code>", "<code>Field.null</code>", "<code>True</code>", "<code>NULL</code>", "<code>False</code>", "<code>null</code>", "<code>CharField</code>", "<code>TextField</code>", "<code>NULL</code>", "<code>null=True</code>", "<code>NULL</code>", "<code>NULL</code>", "<code>blank=True</code>", "<code>null</code>", "<code>blank</code>", "<code>blank</code>", "<code>Field.blank</code>", "<code>True</code>", "<code>False</code>", "<code>null</code>", "<code>null</code>", "<code>blank</code>", "<code>blank=True</code>", "<code>blank=False</code>", "<code>null=True</code>", "<code>NULL</code>", "<code>blank=True</code>", "<code>blank=True</code>", "<code>blank=False</code>", "<code>null=True/False</code>", "<code>blank=True/False</code>", "<code>null</code>", "<code>blank</code>", "<code>null=False</code>", "<code>blank=False</code>", "<code>null=True</code>", "<code>blank=True</code>", "<code>null=False</code>", "<code>blank=True</code>", "<code>NULL</code>", "<code>save()</code>", "<code>blank=True</code>", "<code>null=False</code>", "<code>ManyToManyField</code>", "<code>null</code>", "<code>blank</code>", "<code>null=True</code>", "<code>blank=False</code>", "<code>ForeignKey</code>", "<code>blank=False</code>", "<code>null=True</code>", "<code>on_delete=models.SET_NULL</code>"], "path": "stack.django"}, {"tags": ["python", "git", "pip"], "creation_date": 1384966002, "body_markdown": "Trying to `pip` install a repo&#39;s specific branch. Google tells me to  \r\n\r\n&gt; pip install https://github.com/user/repo.git@branch\r\n \r\nThe branch&#39;s name is `issue/34/oscar-0.6` so I did `pip  install https://github.com/tangentlabs/django-oscar-paypal.git@/issue/34/oscar-0.6` but its returning a 404.\r\n\r\nHow do I install this branch?", "last_edit_date": 1488273313, "up_vote_count": 370, "link": "https://stackoverflow.com/questions/20101834/pip-install-from-git-repo-branch", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1384966292, "answer_id": 20101940, "path": "stack.django.answer", "score": 522, "up_vote_count": 522, "is_accepted": true, "last_activity_date": 1484924962, "last_edit_date": 1484924962, "body_markdown": "Prepend the url prefix `git+` (See [VCS Support][1]):\r\n\r\n    pip install git+https://github.com/tangentlabs/django-oscar-paypal.git@issue/34/oscar-0.6\r\n\r\nAnd specify the branch name without the leading `/`.\r\n\r\n\r\n  [1]: https://pip.pypa.io/en/stable/reference/pip_install/#vcs-support"}, {"tags": [], "down_vote_count": 1, "creation_date": 1405623742, "answer_id": 24811490, "path": "stack.django.answer", "score": 200, "up_vote_count": 201, "is_accepted": false, "last_activity_date": 1502174467, "last_edit_date": 1502174467, "body_markdown": "Using pip with git+ to clone a repository can be extremely slow (test with https://github.com/django/django@stable/1.6.x for example, it will take a few minutes). The fastest thing I&#39;ve found, which works with GitHub and BitBucket, is:\r\n\r\n    pip install https://github.com/user/repository/archive/branch.zip\r\n\r\nwhich becomes for django master:\r\n\r\n    pip install https://github.com/django/django/archive/master.zip\r\n\r\nfor django stable/1.7.x:\r\n\r\n    pip install https://github.com/django/django/archive/stable/1.7.x.zip\r\n\r\nWith BitBucket it&#39;s about the same predictable pattern:\r\n\r\n    pip install https://bitbucket.org/izi/django-admin-tools/get/default.zip\r\n\r\nHere, the master branch is generally named default.\r\nThis will make your requirements.txt installing much faster.\r\n\r\nSome other answers mention variations required when placing the package to be installed into your `requirements.txt`.  Note that with this archive syntax, the leading `-e` and trailing `#egg=blah-blah` are _not_ required, and you can just simply paste the URL, so your requirements.txt looks like:\r\n\r\n    https://github.com/user/repository/archive/branch.zip\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1424970078, "answer_id": 28748345, "path": "stack.django.answer", "score": 32, "up_vote_count": 32, "is_accepted": false, "last_activity_date": 1429338722, "last_edit_date": 1429338722, "body_markdown": "Just to add an extra, if you want to install it in your pip file it can be added like this:\r\n\r\n    -e git+https://github.com/tangentlabs/django-oscar-paypal.git@issue/34/oscar-0.6#egg=django-oscar-paypal\r\n\r\nIt will be saved as an egg though."}, {"tags": [], "down_vote_count": 0, "creation_date": 1507637746, "answer_id": 46666538, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1507801414, "last_edit_date": 1507801414, "body_markdown": "Instructions to install from private repo using **git credentials**.\r\n\r\n**For usage:**\r\n\r\n    $ pip install git+ssh://git@github.com/myuser/foo.git@my_version\r\n\r\n**For development:**\r\n\r\n    $ git clone git@github.com/myuser/foo.git@my_version\r\n    $ pip install --editable ./\r\n\r\n"}], "title": "pip install from git repo branch", "view_count": 196501, "answer_count": 4, "code_snippet": ["<code>pip</code>", "<code>issue/34/oscar-0.6</code>", "<code>pip  install https://github.com/tangentlabs/django-oscar-paypal.git@/issue/34/oscar-0.6</code>", "<code>git+</code>", "<code>pip install git+https://github.com/tangentlabs/django-oscar-paypal.git@issue/34/oscar-0.6\n</code>", "<code>/</code>", "<code>@</code>", "<code>@</code>", "<code>tree</code>", "<code>tree</code>", "<code>pip install -U git+https://github.com/danreeves/wagtailgmaps@3.0.0</code>", "<code>pip install https://github.com/user/repository/archive/branch.zip\n</code>", "<code>pip install https://github.com/django/django/archive/master.zip\n</code>", "<code>pip install https://github.com/django/django/archive/stable/1.7.x.zip\n</code>", "<code>pip install https://bitbucket.org/izi/django-admin-tools/get/default.zip\n</code>", "<code>requirements.txt</code>", "<code>-e</code>", "<code>#egg=blah-blah</code>", "<code>https://github.com/user/repository/archive/branch.zip\n</code>", "<code>.zip</code>", "<code>.tar.gz</code>", "<code>--depth 0</code>", "<code>pip install https://github.com/django/django/archive/ebaa08b.zip</code>", "<code>.zip</code>", "<code>.tar.gz</code>", "<code>-e git+https://github.com/tangentlabs/django-oscar-paypal.git@issue/34/oscar-0.6#egg=django-oscar-paypal\n</code>", "<code>-e</code>", "<code>-e</code>", "<code>-e git+https://github.com/tangentlabs/django-oscar-paypal.git@issue/34/oscar-0.6#egg=django-oscar-paypal[PDF]</code>", "<code>-e</code>", "<code>-e</code>", "<code>$ pip install git+ssh://git@github.com/myuser/foo.git@my_version\n</code>", "<code>$ git clone git@github.com/myuser/foo.git@my_version\n$ pip install --editable ./\n</code>"], "path": "stack.django"}, {"tags": ["javascript", "jquery", "ajax"], "creation_date": 1366296525, "body_markdown": "I have a javascript app that sends ajax POST requests to a certain URL. Response might be a JSON string or it might be a file (as an attachment). I can easily detect Content-Type and Content-Disposition in my ajax call, but once I detect that the response contains a file, how do I offer the client to download it? I&#39;ve read a number of similar threads here but none of them provide the answer I&#39;m looking for. \r\n\r\nPlease, please, please do not post answers suggesting that I shouldn&#39;t use ajax for this or that I should redirect the browser, because none of this is an option. Using a plain HTML form is also not an option. What I do need is to show a download dialog to the client. Can this be done and how?\r\n\r\nEDIT:\r\n\r\nApparently, this cannot be done, but there is a simple workaround, as suggested by the accepted answer. For anyone who comes across this issue in the future, here&#39;s how I solved it:\r\n\r\n    $.ajax({\r\n\t\ttype: &quot;POST&quot;,\r\n\t\turl: url,\r\n\t\tdata: params,\r\n\t\tsuccess: function(response, status, request) {\r\n\t\t\tvar disp = request.getResponseHeader(&#39;Content-Disposition&#39;);\r\n\t\t\tif (disp &amp;&amp; disp.search(&#39;attachment&#39;) != -1) {\r\n\t\t\t\tvar form = $(&#39;&lt;form method=&quot;POST&quot; action=&quot;&#39; + url + &#39;&quot;&gt;&#39;);\r\n\t\t\t\t$.each(params, function(k, v) {\r\n\t\t\t\t\tform.append($(&#39;&lt;input type=&quot;hidden&quot; name=&quot;&#39; + k +\r\n                            &#39;&quot; value=&quot;&#39; + v + &#39;&quot;&gt;&#39;));\r\n\t\t\t\t});\r\n\t\t\t\t$(&#39;body&#39;).append(form);\r\n\t\t\t\tform.submit();\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\nSo basically, just generate a HTML form with the same params that were used in AJAX request and submit it. ", "last_edit_date": 1379968739, "up_vote_count": 286, "link": "https://stackoverflow.com/questions/16086162/handle-file-download-from-ajax-post", "_childDocuments_": [{"tags": [], "down_vote_count": 15, "creation_date": 1366297221, "answer_id": 16086435, "path": "stack.django.answer", "score": 85, "up_vote_count": 100, "is_accepted": true, "last_activity_date": 1366297221, "body_markdown": "Create a form, use the POST method, submit the form - there&#39;s no need for an iframe.  When the server page responds to the request, write a response header for the mime type of the file, and it will present a download dialog - I&#39;ve done this a number of times.\r\n\r\nYou want content-type of application/download - just search for how to provide a download for whatever language you&#39;re using."}, {"tags": [], "down_vote_count": 2, "creation_date": 1366297245, "answer_id": 16086443, "path": "stack.django.answer", "score": 25, "up_vote_count": 27, "is_accepted": false, "last_activity_date": 1379965176, "last_edit_date": 1379965176, "body_markdown": "What server-side language are you using? In my app I can easily download a file from an AJAX call by setting the correct headers in PHP&#39;s response:\r\n\r\nSetting headers server-side\r\n------\r\n\r\n    header(&quot;HTTP/1.1 200 OK&quot;);\r\n    header(&quot;Pragma: public&quot;);\r\n    header(&quot;Cache-Control: must-revalidate, post-check=0, pre-check=0&quot;);\r\n    \r\n    // The optional second &#39;replace&#39; parameter indicates whether the header\r\n    // should replace a previous similar header, or add a second header of\r\n    // the same type. By default it will replace, but if you pass in FALSE\r\n    // as the second argument you can force multiple headers of the same type.\r\n    header(&quot;Cache-Control: private&quot;, false);\r\n    \r\n    header(&quot;Content-type: &quot; . $mimeType);\r\n    \r\n    // $strFileName is, of course, the filename of the file being downloaded. \r\n    // This won&#39;t have to be the same name as the actual file.\r\n    header(&quot;Content-Disposition: attachment; filename=\\&quot;{$strFileName}\\&quot;&quot;); \r\n    \r\n    header(&quot;Content-Transfer-Encoding: binary&quot;);\r\n    header(&quot;Content-Length: &quot; . mb_strlen($strFile));\r\n    \r\n    // $strFile is a binary representation of the file that is being downloaded.\r\n    echo $strFile;\r\n\r\nThis will in fact &#39;redirect&#39; the browser to this download page, but as @ahren alread said in his comment, it won&#39;t navigate away from the current page.\r\n\r\nIt&#39;s all about setting the correct headers so I&#39;m sure you&#39;ll find a suitable solution for the server-side language you&#39;re using if it&#39;s not PHP.\r\n\r\nHandling the response client side\r\n-----\r\nAssuming you already know how to make an AJAX call, on the client side you execute an AJAX request to the server. The server then generates a link from where this file can be downloaded, e.g. the &#39;forward&#39; URL where you want to point to.\r\nFor example, the server responds with:\r\n\r\n    {\r\n        status: 1, // ok\r\n        // unique one-time download token, not required of course\r\n        message: &#39;http://yourwebsite.com/getdownload/ska08912dsa&#39;\r\n    }\r\n\r\nWhen processing the response, you inject an `iframe` in your body and set the `iframe`&#39;s SRC to the URL you just received like this (using jQuery for the ease of this example): \r\n\r\n    $(&quot;body&quot;).append(&quot;&lt;iframe src=&#39;&quot; + data.message +\r\n      &quot;&#39; style=&#39;display: none;&#39; &gt;&lt;/iframe&gt;&quot;);\r\n\r\nIf you&#39;ve set the correct headers as shown above, the iframe will force a download dialog without navigating the browser away from the current page.\r\n\r\nNote\r\n---\r\nExtra addition in relation to your question; I think it&#39;s best to always return JSON when requesting stuff with AJAX technology. After you&#39;ve received the JSON response, you can then decide client-side what to do with it. Maybe, for example, later on you want the user to click a download link to the URL instead of forcing the download directly, in your current setup you would have to update both client and server-side to do so.\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1400729193, "answer_id": 23797348, "path": "stack.django.answer", "score": 402, "up_vote_count": 403, "is_accepted": false, "last_activity_date": 1506613979, "last_edit_date": 1506613979, "body_markdown": "Don&#39;t give up so quickly, because this can be done (in modern browsers) using parts of the FileAPI:\r\n\r\n**Edit 2017-09-28: Updated to use File constructor when available so it works in Safari &gt;= 10.1.**\r\n\r\n**Edit 2015-10-16: jQuery ajax is not able to handle binary responses properly (can&#39;t set responseType), so it&#39;s better to use a plain XMLHttpRequest call.**\r\n\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open(&#39;POST&#39;, url, true);\r\n    xhr.responseType = &#39;arraybuffer&#39;;\r\n    xhr.onload = function () {\r\n        if (this.status === 200) {\r\n            var filename = &quot;&quot;;\r\n            var disposition = xhr.getResponseHeader(&#39;Content-Disposition&#39;);\r\n            if (disposition &amp;&amp; disposition.indexOf(&#39;attachment&#39;) !== -1) {\r\n                var filenameRegex = /filename[^;=\\n]*=(([&#39;&quot;]).*?\\2|[^;\\n]*)/;\r\n                var matches = filenameRegex.exec(disposition);\r\n                if (matches != null &amp;&amp; matches[1]) filename = matches[1].replace(/[&#39;&quot;]/g, &#39;&#39;);\r\n            }\r\n            var type = xhr.getResponseHeader(&#39;Content-Type&#39;);\r\n\r\n            var blob = typeof File === &#39;function&#39;\r\n                ? new File([this.response], filename, { type: type })\r\n                : new Blob([this.response], { type: type });\r\n            if (typeof window.navigator.msSaveBlob !== &#39;undefined&#39;) {\r\n                // IE workaround for &quot;HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed.&quot;\r\n                window.navigator.msSaveBlob(blob, filename);\r\n            } else {\r\n                var URL = window.URL || window.webkitURL;\r\n                var downloadUrl = URL.createObjectURL(blob);\r\n\r\n                if (filename) {\r\n                    // use HTML5 a[download] attribute to specify filename\r\n                    var a = document.createElement(&quot;a&quot;);\r\n                    // safari doesn&#39;t support this yet\r\n                    if (typeof a.download === &#39;undefined&#39;) {\r\n                        window.location = downloadUrl;\r\n                    } else {\r\n                        a.href = downloadUrl;\r\n                        a.download = filename;\r\n                        document.body.appendChild(a);\r\n                        a.click();\r\n                    }\r\n                } else {\r\n                    window.location = downloadUrl;\r\n                }\r\n\r\n                setTimeout(function () { URL.revokeObjectURL(downloadUrl); }, 100); // cleanup\r\n            }\r\n        }\r\n    };\r\n    xhr.setRequestHeader(&#39;Content-type&#39;, &#39;application/x-www-form-urlencoded&#39;);\r\n    xhr.send($.param(params));\r\n\r\n\r\nHere is the old version using jQuery.ajax. It might mangle binary data when the response is converted to a string of some charset.\r\n\r\n    $.ajax({\r\n        type: &quot;POST&quot;,\r\n        url: url,\r\n        data: params,\r\n        success: function(response, status, xhr) {\r\n            // check for a filename\r\n            var filename = &quot;&quot;;\r\n            var disposition = xhr.getResponseHeader(&#39;Content-Disposition&#39;);\r\n            if (disposition &amp;&amp; disposition.indexOf(&#39;attachment&#39;) !== -1) {\r\n                var filenameRegex = /filename[^;=\\n]*=(([&#39;&quot;]).*?\\2|[^;\\n]*)/;\r\n                var matches = filenameRegex.exec(disposition);\r\n                if (matches != null &amp;&amp; matches[1]) filename = matches[1].replace(/[&#39;&quot;]/g, &#39;&#39;);\r\n            }\r\n            \r\n            var type = xhr.getResponseHeader(&#39;Content-Type&#39;);\r\n            var blob = new Blob([response], { type: type });\r\n\r\n            if (typeof window.navigator.msSaveBlob !== &#39;undefined&#39;) {\r\n                // IE workaround for &quot;HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed.&quot;\r\n                window.navigator.msSaveBlob(blob, filename);\r\n            } else {\r\n                var URL = window.URL || window.webkitURL;\r\n                var downloadUrl = URL.createObjectURL(blob);\r\n\r\n                if (filename) {\r\n                    // use HTML5 a[download] attribute to specify filename\r\n                    var a = document.createElement(&quot;a&quot;);\r\n                    // safari doesn&#39;t support this yet\r\n                    if (typeof a.download === &#39;undefined&#39;) {\r\n                        window.location = downloadUrl;\r\n                    } else {\r\n                        a.href = downloadUrl;\r\n                        a.download = filename;\r\n                        document.body.appendChild(a);\r\n                        a.click();\r\n                    }\r\n                } else {\r\n                    window.location = downloadUrl;\r\n                }\r\n\r\n                setTimeout(function () { URL.revokeObjectURL(downloadUrl); }, 100); // cleanup\r\n            }\r\n        }\r\n    });\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1400849071, "answer_id": 23829618, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1412114452, "last_edit_date": 1412114452, "body_markdown": "I see you&#39;ve already found out a solution, however I just wanted to add some information which may help someone trying to achieve the same thing with big POST requests.\r\n\r\nI had the same issue a couple of weeks ago, indeed it isn&#39;t possible to achieve a &quot;clean&quot; download through AJAX, the Filament Group created a jQuery plugin which works exactly how you&#39;ve already found out, it is called [jQuery File Download][1] however there is a downside to this technique.\r\n\r\nIf you&#39;re sending big requests through AJAX (say files +1MB) it will negatively impact responsiveness. In slow Internet connections you&#39;ll have to wait *a lot* until the request is sent and also wait for the file to download. It isn&#39;t like an instant &quot;click&quot; =&gt; &quot;popup&quot; =&gt; &quot;download start&quot;. It&#39;s more like &quot;click&quot; =&gt; &quot;wait until data is sent&quot; =&gt; &quot;wait for response&quot; =&gt; &quot;download start&quot; which makes it appear the file double its size because you&#39;ll have to wait for the request to be sent through AJAX and get it back as a downloadable file.\r\n\r\nIf you&#39;re working with small file sizes &lt;1MB you won&#39;t notice this. But as I discovered in my own app, for bigger file sizes it is almost unbearable.\r\n\r\nMy app allow users to export images dynamically generated, these images are sent through POST requests in base64 format to the server (it is the only possible way), then processed and sent back to users in form of .png, .jpg files, base64 strings for images +1MB are huge, this force users to wait more than necessary for the file to start downloading. In slow Internet connections it can be really annoying.\r\n\r\nMy solution for this was to temporary write the file to the server, once it is ready, dynamically generate a link to the file in form of a button which changes between &quot;Please wait...&quot; and &quot;Download&quot; states and at the same time, print the base64 image in a preview popup window so users can &quot;right-click&quot; and save it. This makes all the waiting time more bearable for users, and also speed things up.\r\n\r\n**Update Sep 30, 2014:**\r\n&gt; Months have passed since I posted this, finally I&#39;ve found a better approach to speed things up when working with big base64 strings. I now store base64 strings into the database (using longtext or longblog fields), then I pass its record ID through the jQuery File Download, finally on the download script file I query the database using this ID to pull the base64 string and pass it through the download function.\r\n\r\n**Download Script Example:**\r\n\r\n    &lt;?php\r\n    // Record ID\r\n    $downloadID = (int)$_POST[&#39;id&#39;];\r\n    // Query Data (this example uses CodeIgniter)\r\n    $data \t\t= $CI-&gt;MyQueries-&gt;GetDownload( $downloadID );\r\n    // base64 tags are replaced by [removed], so we strip them out\r\n    $base64   \t= base64_decode( preg_replace(&#39;#\\[removed\\]#&#39;, &#39;&#39;, $data[0]-&gt;image) );\r\n    // This example is for base64 images\r\n    $imgsize \t= getimagesize( $base64 );\r\n    // Set content headers\r\n    header(&#39;Content-Disposition: attachment; filename=&quot;my-file.png&quot;&#39;);\r\n    header(&#39;Content-type: &#39;.$imgsize[&#39;mime&#39;]);\r\n    // Force download\r\n    echo $base64;\r\n    ?&gt;\r\n\r\n_I know this is way beyond what the OP asked, however I felt it would be good to update my answer with my findings. When I was searching for solutions to my problem, I read lots of **&quot;Download from AJAX POST data&quot;** threads which didn&#39;t give me the answer I was looking for, I hope this information helps someone looking to achieve something like this._\r\n\r\n  [1]: https://github.com/filamentgroup/jQuery-File-Download"}, {"tags": [], "down_vote_count": 0, "creation_date": 1437596971, "answer_id": 31573390, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1437596971, "body_markdown": "As others have stated, you can create and submit a form to download via a POST request.  However, you don&#39;t have to do this manually.\r\n\r\nOne really simple library for doing exactly this is [jquery.redirect](https://github.com/mgalante/jquery.redirect).  It provides an API similar to the standard `jQuery.post` method:\r\n\r\n    $.redirect(url, [values, [method, [target]]])"}, {"tags": [], "down_vote_count": 0, "creation_date": 1453424735, "answer_id": 34937289, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1453424735, "last_edit_date": 1495542396, "body_markdown": "I used this [FileSaver.js][1]. In my case with csv files, i did this (in coffescript):\r\n\r\n      $.ajax\r\n        url: &quot;url-to-server&quot;\r\n        data: &quot;data-to-send&quot;\r\n        success: (csvData)-&gt;\r\n          blob = new Blob([csvData], { type: &#39;text/csv&#39; })\r\n          saveAs(blob, &quot;filename.csv&quot;)\r\n\r\nI think for most complicated case, the data must be processed properly. Under the hood FileSaver.js implement the same approach of the answer of [Jonathan Amend][2].\r\n\r\n\r\n  [1]: https://github.com/eligrey/FileSaver.js\r\n  [2]: https://stackoverflow.com/users/530630/jonathan-amend"}, {"tags": [], "down_vote_count": 0, "creation_date": 1457377521, "answer_id": 35851873, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1457377521, "body_markdown": "For those looking for a solution from an Angular perspective, this worked for me:\r\n\r\n    $http.post(\r\n      &#39;url&#39;,\r\n      {},\r\n      {responseType: &#39;arraybuffer&#39;}\r\n    ).then(function (response) {\r\n      var headers = response.headers();\r\n      var blob = new Blob([response.data],{type:headers[&#39;content-type&#39;]});\r\n      var link = document.createElement(&#39;a&#39;);\r\n      link.href = window.URL.createObjectURL(blob);\r\n      link.download = &quot;Filename&quot;;\r\n      link.click();\r\n    });"}, {"tags": [], "down_vote_count": 0, "creation_date": 1457698627, "answer_id": 35940090, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1457698627, "body_markdown": "I want to point out some difficulties that arise when using the technique in the accepted answer, i.e. using a form post:\r\n\r\n1. You can&#39;t set headers on the request. If your authentication schema involves headers, a Json-Web-Token passed in the Authorization header, you&#39;ll have to find other way to send it, for example as a query parameter.\r\n\r\n2. You can&#39;t really tell when the request has finished. Well, you can use a cookie that gets set on response, as done by [jquery.fileDownload](https://github.com/johnculviner/jquery.fileDownload), but it&#39;s FAR from perfect. It won&#39;t work for concurrent requests and it will break if a response never arrives.\r\n\r\n3. If the server responds with a error, the user will be redirected to the error page.\r\n\r\n4. You can only use the content types supported by a [form](https://www.w3.org/TR/html401/interact/forms.html#h-17.13.4). Which means you can&#39;t use JSON.\r\n\r\nI ended up using the method of saving the file on S3 and sending a pre-signed URL to get the file."}, {"tags": [], "down_vote_count": 0, "creation_date": 1462579094, "answer_id": 37083012, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1462579094, "body_markdown": "This is a 3 years old question but I had the same problem today. I looked your edited solution but I think that it can sacrifice the performance because it has to make a double request. So if anyone needs another solution that doesn&#39;t imply to call the service twice then this is the way I did it: \r\n\r\n    &lt;form id=&quot;export-csv-form&quot; method=&quot;POST&quot; action=&quot;/the/path/to/file&quot;&gt;\r\n\t   \t&lt;input type=&quot;hidden&quot; name=&quot;anyValueToPassTheServer&quot; value=&quot;&quot;&gt;\r\n\t&lt;/form&gt;\r\nThis form is just used to call the service and avoid to use a window.location(). After that you just simply have to make a form submit from jquery in order to call the service and get the file. It&#39;s pretty simple but this way you can make a download using a **POST**. I now that this could be easier if the service you&#39;re calling is a **GET**, but that&#39;s not my case."}, {"tags": [], "down_vote_count": 0, "creation_date": 1467618964, "answer_id": 38179502, "path": "stack.django.answer", "score": 19, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1470746291, "last_edit_date": 1470746291, "body_markdown": "I faced the same issue and successfully solved it. My use-case is this.\r\n\r\n&quot;&lt;i&gt;Post JSON data to the server and receive an excel file.\r\nThat excel file is created by the server and returned as a response to the client. Download that response as a file with custom name in browser&lt;/i&gt;&quot;\r\n    \r\n    $(&quot;#my-button&quot;).on(&quot;click&quot;, function(){\r\n\r\n    // Data to post\r\n    data = {\r\n        ids: [1, 2, 3, 4, 5]\r\n    };\r\n\r\n    // Use XMLHttpRequest instead of Jquery $ajax\r\n    xhttp = new XMLHttpRequest();\r\n    xhttp.onreadystatechange = function() {\r\n        var a;\r\n        if (xhttp.readyState === 4 &amp;&amp; xhttp.status === 200) {\r\n            // Trick for making downloadable link\r\n            a = document.createElement(&#39;a&#39;);\r\n            a.href = window.URL.createObjectURL(xhttp.response);\r\n            // Give filename you wish to download\r\n            a.download = &quot;test-file.xls&quot;;\r\n            a.style.display = &#39;none&#39;;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n        }\r\n    };\r\n    // Post data to URL which handles post request\r\n    xhttp.open(&quot;POST&quot;, excelDownloadUrl);\r\n    xhttp.setRequestHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);\r\n    // You should set responseType as blob for binary responses\r\n    xhttp.responseType = &#39;blob&#39;;\r\n    xhttp.send(JSON.stringify(data));\r\n    });\r\nThe above snippet is just doing following\r\n\r\n* Posting an array as JSON to the server using XMLHttpRequest.\r\n* After fetching content as a blob(binary), we are creating a downloadable URL and attaching it to invisible &quot;a&quot; link then clicking it.\r\n\r\nHere we need to carefully set few things at the server side. I set few headers in Python Django HttpResponse. You need to set them accordingly if you use other programming languages.\r\n\r\n    # In python django code\r\n    response = HttpResponse(file_content, content_type=&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;)\r\n\r\nSince I download xls(excel) here, I adjusted contentType to above one. You need to set it according to your file type. You can use this technique to download any kind of files."}, {"tags": [], "down_vote_count": 0, "creation_date": 1477572856, "answer_id": 40285115, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1477572856, "body_markdown": "see: http://www.henryalgus.com/reading-binary-files-using-jquery-ajax/\r\nit&#39;ll return a blob as a response, which can then be put into filesaver"}, {"tags": [], "down_vote_count": 0, "creation_date": 1504119966, "answer_id": 45968028, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1504119966, "body_markdown": "Here is how I got this working\r\nhttps://stackoverflow.com/a/27563953/2845977\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    $.ajax({\r\n      url: &#39;&lt;URL_TO_FILE&gt;&#39;,\r\n      success: function(data) {\r\n        var blob=new Blob([data]);\r\n        var link=document.createElement(&#39;a&#39;);\r\n        link.href=window.URL.createObjectURL(blob);\r\n        link.download=&quot;&lt;FILENAME_TO_SAVE_WITH_EXTENSION&gt;&quot;;\r\n        link.click();\r\n      }\r\n    });\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n##Updated answer using [download.js][1]\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    $.ajax({\r\n      url: &#39;&lt;URL_TO_FILE&gt;&#39;,\r\n      success: download.bind(true, &quot;&lt;FILENAME_TO_SAVE_WITH_EXTENSION&gt;&quot;, &quot;&lt;FILE_MIME_TYPE&gt;&quot;)\r\n    });\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: http://danml.com/download.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1504258136, "answer_id": 45997132, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1504258136, "body_markdown": "Here is my solution using a temporary hidden form.\r\n\r\n    //Create an hidden form\r\n    var form = $(&#39;&lt;form&gt;&#39;, {&#39;method&#39;: &#39;POST&#39;, &#39;action&#39;: this.href}).hide();\r\n    \r\n    //Add params\r\n    var params = { ...your params... };\r\n    $.each(params, function (k, v) {\r\n        form.append($(&#39;&lt;input&gt;&#39;, {&#39;type&#39;: &#39;hidden&#39;, &#39;name&#39;: k, &#39;value&#39;: v}));\r\n    });\r\n\r\n    //Make it part of the document and submit\r\n    $(&#39;body&#39;).append(form);\r\n    form.submit();\r\n\r\n    //Clean up\r\n    form.remove();\r\n\r\nNote that I massively use JQuery but you can do the same with native JS."}], "title": "Handle file download from ajax post", "view_count": 299943, "answer_count": 13, "code_snippet": ["<code>$.ajax({\n    type: \"POST\",\n    url: url,\n    data: params,\n    success: function(response, status, request) {\n        var disp = request.getResponseHeader('Content-Disposition');\n        if (disp &amp;&amp; disp.search('attachment') != -1) {\n            var form = $('&lt;form method=\"POST\" action=\"' + url + '\"&gt;');\n            $.each(params, function(k, v) {\n                form.append($('&lt;input type=\"hidden\" name=\"' + k +\n                        '\" value=\"' + v + '\"&gt;'));\n            });\n            $('body').append(form);\n            form.submit();\n        }\n    }\n});\n</code>", "<code>&lt;form target=\"myiframe\" method=\"POST\"&gt;...&lt;/form&gt;</code>", "<code>var xhr = new XMLHttpRequest();\nxhr.open('POST', url, true);\nxhr.responseType = 'arraybuffer';\nxhr.onload = function () {\n    if (this.status === 200) {\n        var filename = \"\";\n        var disposition = xhr.getResponseHeader('Content-Disposition');\n        if (disposition &amp;&amp; disposition.indexOf('attachment') !== -1) {\n            var filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n            var matches = filenameRegex.exec(disposition);\n            if (matches != null &amp;&amp; matches[1]) filename = matches[1].replace(/['\"]/g, '');\n        }\n        var type = xhr.getResponseHeader('Content-Type');\n\n        var blob = typeof File === 'function'\n            ? new File([this.response], filename, { type: type })\n            : new Blob([this.response], { type: type });\n        if (typeof window.navigator.msSaveBlob !== 'undefined') {\n            // IE workaround for \"HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed.\"\n            window.navigator.msSaveBlob(blob, filename);\n        } else {\n            var URL = window.URL || window.webkitURL;\n            var downloadUrl = URL.createObjectURL(blob);\n\n            if (filename) {\n                // use HTML5 a[download] attribute to specify filename\n                var a = document.createElement(\"a\");\n                // safari doesn't support this yet\n                if (typeof a.download === 'undefined') {\n                    window.location = downloadUrl;\n                } else {\n                    a.href = downloadUrl;\n                    a.download = filename;\n                    document.body.appendChild(a);\n                    a.click();\n                }\n            } else {\n                window.location = downloadUrl;\n            }\n\n            setTimeout(function () { URL.revokeObjectURL(downloadUrl); }, 100); // cleanup\n        }\n    }\n};\nxhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\nxhr.send($.param(params));\n</code>", "<code>$.ajax({\n    type: \"POST\",\n    url: url,\n    data: params,\n    success: function(response, status, xhr) {\n        // check for a filename\n        var filename = \"\";\n        var disposition = xhr.getResponseHeader('Content-Disposition');\n        if (disposition &amp;&amp; disposition.indexOf('attachment') !== -1) {\n            var filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n            var matches = filenameRegex.exec(disposition);\n            if (matches != null &amp;&amp; matches[1]) filename = matches[1].replace(/['\"]/g, '');\n        }\n\n        var type = xhr.getResponseHeader('Content-Type');\n        var blob = new Blob([response], { type: type });\n\n        if (typeof window.navigator.msSaveBlob !== 'undefined') {\n            // IE workaround for \"HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed.\"\n            window.navigator.msSaveBlob(blob, filename);\n        } else {\n            var URL = window.URL || window.webkitURL;\n            var downloadUrl = URL.createObjectURL(blob);\n\n            if (filename) {\n                // use HTML5 a[download] attribute to specify filename\n                var a = document.createElement(\"a\");\n                // safari doesn't support this yet\n                if (typeof a.download === 'undefined') {\n                    window.location = downloadUrl;\n                } else {\n                    a.href = downloadUrl;\n                    a.download = filename;\n                    document.body.appendChild(a);\n                    a.click();\n                }\n            } else {\n                window.location = downloadUrl;\n            }\n\n            setTimeout(function () { URL.revokeObjectURL(downloadUrl); }, 100); // cleanup\n        }\n    }\n});\n</code>", "<code>header(\"HTTP/1.1 200 OK\");\nheader(\"Pragma: public\");\nheader(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n\n// The optional second 'replace' parameter indicates whether the header\n// should replace a previous similar header, or add a second header of\n// the same type. By default it will replace, but if you pass in FALSE\n// as the second argument you can force multiple headers of the same type.\nheader(\"Cache-Control: private\", false);\n\nheader(\"Content-type: \" . $mimeType);\n\n// $strFileName is, of course, the filename of the file being downloaded. \n// This won't have to be the same name as the actual file.\nheader(\"Content-Disposition: attachment; filename=\\\"{$strFileName}\\\"\"); \n\nheader(\"Content-Transfer-Encoding: binary\");\nheader(\"Content-Length: \" . mb_strlen($strFile));\n\n// $strFile is a binary representation of the file that is being downloaded.\necho $strFile;\n</code>", "<code>{\n    status: 1, // ok\n    // unique one-time download token, not required of course\n    message: 'http://yourwebsite.com/getdownload/ska08912dsa'\n}\n</code>", "<code>iframe</code>", "<code>iframe</code>", "<code>$(\"body\").append(\"&lt;iframe src='\" + data.message +\n  \"' style='display: none;' &gt;&lt;/iframe&gt;\");\n</code>", "<code>$(\"#my-button\").on(\"click\", function(){\n\n// Data to post\ndata = {\n    ids: [1, 2, 3, 4, 5]\n};\n\n// Use XMLHttpRequest instead of Jquery $ajax\nxhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\n    var a;\n    if (xhttp.readyState === 4 &amp;&amp; xhttp.status === 200) {\n        // Trick for making downloadable link\n        a = document.createElement('a');\n        a.href = window.URL.createObjectURL(xhttp.response);\n        // Give filename you wish to download\n        a.download = \"test-file.xls\";\n        a.style.display = 'none';\n        document.body.appendChild(a);\n        a.click();\n    }\n};\n// Post data to URL which handles post request\nxhttp.open(\"POST\", excelDownloadUrl);\nxhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n// You should set responseType as blob for binary responses\nxhttp.responseType = 'blob';\nxhttp.send(JSON.stringify(data));\n});\n</code>", "<code># In python django code\nresponse = HttpResponse(file_content, content_type=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n</code>", "<code>$http.post(\n  'url',\n  {},\n  {responseType: 'arraybuffer'}\n).then(function (response) {\n  var headers = response.headers();\n  var blob = new Blob([response.data],{type:headers['content-type']});\n  var link = document.createElement('a');\n  link.href = window.URL.createObjectURL(blob);\n  link.download = \"Filename\";\n  link.click();\n});\n</code>", "<code>&lt;?php\n// Record ID\n$downloadID = (int)$_POST['id'];\n// Query Data (this example uses CodeIgniter)\n$data       = $CI-&gt;MyQueries-&gt;GetDownload( $downloadID );\n// base64 tags are replaced by [removed], so we strip them out\n$base64     = base64_decode( preg_replace('#\\[removed\\]#', '', $data[0]-&gt;image) );\n// This example is for base64 images\n$imgsize    = getimagesize( $base64 );\n// Set content headers\nheader('Content-Disposition: attachment; filename=\"my-file.png\"');\nheader('Content-type: '.$imgsize['mime']);\n// Force download\necho $base64;\n?&gt;\n</code>", "<code>jQuery File Download</code>", "<code>jQuery.download(\"api/ide/download-this-file.php\", {filePath: path2Down}, \"POST\");</code>", "<code>$.ajax({\r\n  url: '&lt;URL_TO_FILE&gt;',\r\n  success: function(data) {\r\n    var blob=new Blob([data]);\r\n    var link=document.createElement('a');\r\n    link.href=window.URL.createObjectURL(blob);\r\n    link.download=\"&lt;FILENAME_TO_SAVE_WITH_EXTENSION&gt;\";\r\n    link.click();\r\n  }\r\n});</code>", "<code>$.ajax({\r\n  url: '&lt;URL_TO_FILE&gt;',\r\n  success: download.bind(true, \"&lt;FILENAME_TO_SAVE_WITH_EXTENSION&gt;\", \"&lt;FILE_MIME_TYPE&gt;\")\r\n});</code>", "<code>jQuery.post</code>", "<code>$.redirect(url, [values, [method, [target]]])\n</code>", "<code>&lt;form id=\"export-csv-form\" method=\"POST\" action=\"/the/path/to/file\"&gt;\n    &lt;input type=\"hidden\" name=\"anyValueToPassTheServer\" value=\"\"&gt;\n&lt;/form&gt;\n</code>", "<code>  $.ajax\n    url: \"url-to-server\"\n    data: \"data-to-send\"\n    success: (csvData)-&gt;\n      blob = new Blob([csvData], { type: 'text/csv' })\n      saveAs(blob, \"filename.csv\")\n</code>", "<code>//Create an hidden form\nvar form = $('&lt;form&gt;', {'method': 'POST', 'action': this.href}).hide();\n\n//Add params\nvar params = { ...your params... };\n$.each(params, function (k, v) {\n    form.append($('&lt;input&gt;', {'type': 'hidden', 'name': k, 'value': v}));\n});\n\n//Make it part of the document and submit\n$('body').append(form);\nform.submit();\n\n//Clean up\nform.remove();\n</code>"], "path": "stack.django"}, {"tags": ["mysql", "sqlite", "migration"], "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1219288371, "answer_id": 19278, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1219288371, "body_markdown": "I recently had to migrate from MySQL to JavaDB for a project that our team is working on.  I found a [Java library written by Apache called DdlUtils][1] that made this pretty easy.  It provides an API that lets you do the following:\r\n\r\n1. Discover a database&#39;s schema and export it as an XML file. \r\n2. Modify a DB based upon this schema.\r\n3. Import records from one DB to another, assuming they have the same schema.\r\n\r\nThe tools that we ended up with weren&#39;t completely automated, but they worked pretty well.  Even if your application is not in Java, it shouldn&#39;t be too difficult to whip up a few small tools to do a one-time migration.  I think I was able to pull of our migration with less than 150 lines of code.\r\n\r\n  [1]: http://db.apache.org/ddlutils/"}, {"tags": [], "down_vote_count": 6, "creation_date": 1219662604, "answer_id": 25860, "path": "stack.django.answer", "score": 6, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1219662604, "body_markdown": "Probably the quick easiest way is using the sqlite .dump command, in this case create a dump of the sample database.\r\n\r\n    sqlite3 sample.db .dump &gt; dump.sql\r\n\r\nYou can then (in theory) import this into the mysql database, in this case the test database on the database server 127.0.0.1, using user root.\r\n\r\n    mysql -p -u root -h 127.0.0.1 test &lt; dump.sql\r\n\r\nI say in theory as there are a few differences between grammars.\r\n\r\nIn sqlite transactions begin\r\n\r\n    BEGIN TRANSACTION;\r\n    ...\r\n    COMMIT;\r\n\r\nMySQL uses just \r\n\r\n    BEGIN;\r\n    ...\r\n    COMMIT;\r\n\r\nThere are other similar problems (varchars and double quotes spring back to mind) but nothing find and replace couldn&#39;t fix.\r\n\r\nPerhaps you should ask why you are migrating, if performance/ database size is the issue perhaps look at reoginising the schema, if the system is moving to a more powerful product this might be the ideal time to plan for the future of your data."}, {"tags": [], "down_vote_count": 2, "creation_date": 1221684589, "answer_id": 87531, "path": "stack.django.answer", "score": 94, "up_vote_count": 96, "is_accepted": false, "last_activity_date": 1221684589, "body_markdown": "Everyone seems to starts off with a few greps and perl expressions and you sorta kinda get something that works for your particular dataset but you have no idea if it&#39;s imported the data correctly or not. I&#39;m seriously surprised nobody&#39;s built a solid library that can convert between the two.\r\n\r\nHere a list of ALL the differences in SQL syntax that I know about between the two file formats:\r\nThe lines starting with:\r\n\r\n - BEGIN TRANSACTION\r\n - COMMIT\r\n - sqlite_sequence\r\n - CREATE UNIQUE INDEX\r\n\r\nare not used in MySQL\r\n\r\n - SQLlite uses CREATE TABLE/INSERT INTO &quot;table_name&quot; and MySQL uses CREATE TABLE/INSERT INTO table_name\r\n - MySQL doesn&#39;t use quotes inside the schema definition\r\n - MySQL uses single quotes for strings inside the INSERT INTO clauses\r\n - SQLlite and MySQL have different ways of escaping strings inside INSERT INTO clauses\r\n - SQLlite uses &#39;t&#39; and &#39;f&#39; for booleans, MySQL uses 1 and 0 (a simple regex for this can fail when you have a string like: &#39;I do, you don\\&#39;t&#39; inside your INSERT INTO)\r\n - SQLLite uses AUTOINCREMENT, MySQL uses AUTO_INCREMENT\r\n\r\nHere is a very basic hacked up perl script which works for *my* dataset and checks for many more of these conditions that other perl scripts I found on the web. Nu guarentees that it will work for your data but feel free to modify and post back here.\r\n\r\n    #! /usr/bin/perl\r\n    \r\n    while ($line = &lt;&gt;){\r\n    \tif (($line !~  /BEGIN TRANSACTION/) &amp;&amp; ($line !~ /COMMIT/) &amp;&amp; ($line !~ /sqlite_sequence/) &amp;&amp; ($line !~ /CREATE UNIQUE INDEX/)){\r\n    \t\t\r\n    \t\tif ($line =~ /CREATE TABLE \\&quot;([a-z_]*)\\&quot;(.*)/){\r\n    \t\t\t$name = $1;\r\n    \t\t\t$sub = $2;\r\n    \t\t\t$sub =~ s/\\&quot;//g;\r\n    \t\t\t$line = &quot;DROP TABLE IF EXISTS $name;\\nCREATE TABLE IF NOT EXISTS $name$sub\\n&quot;;\r\n    \t\t}\r\n    \t\telsif ($line =~ /INSERT INTO \\&quot;([a-z_]*)\\&quot;(.*)/){\r\n    \t\t\t$line = &quot;INSERT INTO $1$2\\n&quot;;\r\n    \t\t\t$line =~ s/\\&quot;/\\\\\\&quot;/g;\r\n    \t\t\t$line =~ s/\\&quot;/\\&#39;/g;\r\n    \t\t}else{\r\n    \t\t\t$line =~ s/\\&#39;\\&#39;/\\\\\\&#39;/g;\r\n    \t\t}\r\n    \t\t$line =~ s/([^\\\\&#39;])\\&#39;t\\&#39;(.)/$1THIS_IS_TRUE$2/g;\r\n    \t\t$line =~ s/THIS_IS_TRUE/1/g;\r\n    \t\t$line =~ s/([^\\\\&#39;])\\&#39;f\\&#39;(.)/$1THIS_IS_FALSE$2/g;\r\n    \t\t$line =~ s/THIS_IS_FALSE/0/g;\r\n    \t\t$line =~ s/AUTOINCREMENT/AUTO_INCREMENT/g;\r\n    \t\tprint $line;\r\n    \t}\r\n    }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1226499030, "answer_id": 284044, "path": "stack.django.answer", "score": 22, "up_vote_count": 22, "is_accepted": false, "last_activity_date": 1371502025, "last_edit_date": 1371502025, "body_markdown": "It&#39;s messy because dump files are database vendor specific. \r\n\r\nIf you&#39;re using Rails, a great plugin exists for this. Read: http://blog.heroku.com/archives/2007/11/23/yamldb_for_databaseindependent_data_dumps/\r\n\r\n### Update\r\n\r\nCurrently maintained fork: https://github.com/ludicast/yaml_db"}, {"tags": [], "down_vote_count": 2, "creation_date": 1246424977, "answer_id": 1067365, "path": "stack.django.answer", "score": 41, "up_vote_count": 43, "is_accepted": false, "last_activity_date": 1471540892, "last_edit_date": 1495540048, "body_markdown": "Here is a python script, built off of Shalmanese&#39;s answer and some help from Alex martelli over at [https://stackoverflow.com/questions/1067060/perl-to-python][1]\r\n\r\nI&#39;m making it community wiki, so please feel free to edit, and refactor as long as it doesn&#39;t break the functionality (thankfully we can just roll back) - It&#39;s pretty ugly but works\r\n\r\nuse like so (assuming the script is called `dump_for_mysql.py`:\r\n\r\n    sqlite3 sample.db .dump | python dump_for_mysql.py &gt; dump.sql\r\n\r\nWhich you can then import into mysql\r\n\r\nnote - you need to add foreign key constrains manually since sqlite doesn&#39;t actually support them\r\n\r\nhere is the script:\r\n    \r\n    #!/usr/bin/env python\r\n\r\n    import re\r\n    import fileinput\r\n\r\n    def this_line_is_useless(line):\r\n        useless_es = [\r\n            &#39;BEGIN TRANSACTION&#39;,\r\n            &#39;COMMIT&#39;,\r\n            &#39;sqlite_sequence&#39;,\r\n            &#39;CREATE UNIQUE INDEX&#39;,\r\n            &#39;PRAGMA foreign_keys=OFF&#39;,\r\n        ]\r\n        for useless in useless_es:\r\n            if re.search(useless, line):\r\n                return True\r\n\r\n    def has_primary_key(line):\r\n        return bool(re.search(r&#39;PRIMARY KEY&#39;, line))\r\n\r\n    searching_for_end = False\r\n    for line in fileinput.input():\r\n        if this_line_is_useless(line):\r\n            continue\r\n\r\n        # this line was necessary because &#39;&#39;);\r\n        # would be converted to \\&#39;); which isn&#39;t appropriate\r\n        if re.match(r&quot;.*, &#39;&#39;\\);&quot;, line):\r\n            line = re.sub(r&quot;&#39;&#39;\\);&quot;, r&#39;``);&#39;, line)\r\n\r\n        if re.match(r&#39;^CREATE TABLE.*&#39;, line):\r\n            searching_for_end = True\r\n\r\n        m = re.search(&#39;CREATE TABLE &quot;?(\\w*)&quot;?(.*)&#39;, line)\r\n        if m:\r\n            name, sub = m.groups()\r\n            line = &quot;DROP TABLE IF EXISTS %(name)s;\\nCREATE TABLE IF NOT EXISTS `%(name)s`%(sub)s\\n&quot;\r\n            line = line % dict(name=name, sub=sub)\r\n        else:\r\n            m = re.search(&#39;INSERT INTO &quot;(\\w*)&quot;(.*)&#39;, line)\r\n            if m:\r\n                line = &#39;INSERT INTO %s%s\\n&#39; % m.groups()\r\n                line = line.replace(&#39;&quot;&#39;, r&#39;\\&quot;&#39;)\r\n                line = line.replace(&#39;&quot;&#39;, &quot;&#39;&quot;)\r\n        line = re.sub(r&quot;([^&#39;])&#39;t&#39;(.)&quot;, &quot;\\1THIS_IS_TRUE\\2&quot;, line)\r\n        line = line.replace(&#39;THIS_IS_TRUE&#39;, &#39;1&#39;)\r\n        line = re.sub(r&quot;([^&#39;])&#39;f&#39;(.)&quot;, &quot;\\1THIS_IS_FALSE\\2&quot;, line)\r\n        line = line.replace(&#39;THIS_IS_FALSE&#39;, &#39;0&#39;)\r\n\r\n        # Add auto_increment if it is not there since sqlite auto_increments ALL\r\n        # primary keys\r\n        if searching_for_end:\r\n            if re.search(r&quot;integer(?:\\s+\\w+)*\\s*PRIMARY KEY(?:\\s+\\w+)*\\s*,&quot;, line):\r\n                line = line.replace(&quot;PRIMARY KEY&quot;, &quot;PRIMARY KEY AUTO_INCREMENT&quot;)\r\n            # replace &quot; and &#39; with ` because mysql doesn&#39;t like quotes in CREATE commands \r\n            if line.find(&#39;DEFAULT&#39;) == -1:\r\n                line = line.replace(r&#39;&quot;&#39;, r&#39;`&#39;).replace(r&quot;&#39;&quot;, r&#39;`&#39;)\r\n            else:\r\n                parts = line.split(&#39;DEFAULT&#39;)\r\n                parts[0] = parts[0].replace(r&#39;&quot;&#39;, r&#39;`&#39;).replace(r&quot;&#39;&quot;, r&#39;`&#39;)\r\n                line = &#39;DEFAULT&#39;.join(parts)\r\n\r\n        # And now we convert it back (see above)\r\n        if re.match(r&quot;.*, ``\\);&quot;, line):\r\n            line = re.sub(r&#39;``\\);&#39;, r&quot;&#39;&#39;);&quot;, line)\r\n\r\n        if searching_for_end and re.match(r&#39;.*\\);&#39;, line):\r\n            searching_for_end = False\r\n\r\n        if re.match(r&quot;CREATE INDEX&quot;, line):\r\n            line = re.sub(&#39;&quot;&#39;, &#39;`&#39;, line)\r\n\r\n        if re.match(r&quot;AUTOINCREMENT&quot;, line):\r\n            line = re.sub(&quot;AUTOINCREMENT&quot;, &quot;AUTO_INCREMENT&quot;, line)\r\n\r\n        print line,\r\n\r\n  [1]: https://stackoverflow.com/questions/1067060/perl-to-python\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1251191551, "answer_id": 1327056, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1251191551, "body_markdown": "I use data loader for migrating almost any data, it helps me to convert MSSQL to MYSQL, MS access to MSSQL, mysql, csv loader, foxpro and MSSQL to MS access, MYSQl, CSV, foxpro etc. In my view this is a best Data Migration Tool  \r\n\r\n\r\nDownload Free : http://www.dbload.com"}, {"tags": [], "down_vote_count": 1, "creation_date": 1254321765, "answer_id": 1498558, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1254322254, "last_edit_date": 1254322254, "body_markdown": "This script is ok except for this case that of course, I&#39;ve met :\r\n&lt;pre&gt;\r\nINSERT INTO &quot;requestcomparison_stopword&quot; VALUES(149,&#39;f&#39;);\r\nINSERT INTO &quot;requestcomparison_stopword&quot; VALUES(420,&#39;t&#39;);\r\n&lt;/pre&gt;\r\nThe script should give this output :\r\n&lt;pre&gt;\r\nINSERT INTO requestcomparison_stopword VALUES(149,&#39;f&#39;);\r\nINSERT INTO requestcomparison_stopword VALUES(420,&#39;t&#39;);\r\n&lt;/pre&gt;\r\nBut gives instead that output :\r\n&lt;pre&gt;\r\nINSERT INTO requestcomparison_stopword VALUES(1490;\r\nINSERT INTO requestcomparison_stopword VALUES(4201;\r\n&lt;/pre&gt;\r\nwith some strange non-ascii characters around the last 0 and 1.\r\n\r\nThis didn&#39;t show up anymore when I commented the following lines of the code (43-46) but others problems appeared:\r\n\r\n\r\n&lt;pre&gt;&lt;code&gt;\r\n    line = re.sub(r&quot;([^&#39;])&#39;t&#39;(.)&quot;, &quot;\\1THIS\\_IS\\_TRUE\\2&quot;, line)\r\n    line = line.replace(&#39;THIS\\_IS\\_TRUE&#39;, &#39;1&#39;)\r\n    line = re.sub(r&quot;([^&#39;])&#39;f&#39;(.)&quot;, &quot;\\1THIS\\_IS\\_FALSE\\2&quot;, line)\r\n    line = line.replace(&#39;THIS\\_IS\\_FALSE&#39;, &#39;0&#39;)\r\n&lt;/pre&gt;&lt;/code&gt;\r\n\r\nThis is just a special case, when we want to add a value being &#39;f&#39; or &#39;t&#39; but I&#39;m not really comfortable with regular expressions, I just wanted to spot this case to be corrected by someone.\r\n\r\nAnyway thanks a lot for that handy script !!!\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1269930752, "answer_id": 2543241, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1269930752, "last_edit_date": 1495542387, "body_markdown": "Ha... I wish I had found this first! My response was to this post... https://stackoverflow.com/questions/489277/script-to-convert-mysql-dump-sql-file-into-format-that-can-be-imported-into-sqlit\r\n\r\nCombining the two would be exactly what I needed:\r\n\r\n\r\n----------\r\n\r\n\r\nWhen the sqlite3 database is going to be used with ruby you may want to change:\r\n\r\n    tinyint([0-9]*) \r\nto:\r\n\r\n    sed &#39;s/ tinyint(1*) / boolean/g &#39; |\r\n    sed &#39;s/ tinyint([0|2-9]*) / integer /g&#39; |\r\n\r\nalas, this only half works because even though you are inserting 1&#39;s and 0&#39;s into a field marked boolean, sqlite3 stores them as 1&#39;s and 0&#39;s so you have to go through and do something like:\r\n\r\n    Table.find(:all, :conditions =&gt; {:column =&gt; 1 }).each { |t| t.column = true }.each(&amp;:save)\r\n    Table.find(:all, :conditions =&gt; {:column =&gt; 0 }).each { |t| t.column = false}.each(&amp;:save)\r\n\r\nbut it was helpful to have the sql file to look at to find all the booleans.\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1287673165, "answer_id": 3988857, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1352809077, "last_edit_date": 1352809077, "body_markdown": "fallino correctly identified the location of the error in the script.  I have the solution.  The problem is the following lines:\r\n\r\n    line = re.sub(r&quot;([^&#39;])&#39;t&#39;(.)&quot;, &quot;\\1THIS_IS_TRUE\\2&quot;, line)\r\n    line = line.replace(&#39;THIS_IS_TRUE&#39;, &#39;1&#39;)\r\n    line = re.sub(r&quot;([^&#39;])&#39;f&#39;(.)&quot;, &quot;\\1THIS_IS_FALSE\\2&quot;, line)\r\n    line = line.replace(&#39;THIS_IS_FALSE&#39;, &#39;0&#39;)\r\n\r\nThe replacement pattern (2nd parameter) in the re.sub calls is a &quot;regular&quot; string, so instead of \\1 expanding to the first regexp match, it expands to a literal 0x01.  Likewise, \\2 expands to 0x02.  For example, a line containing:\r\n       ,&#39;t&#39;,&#39;f&#39;,\r\nwould be replaced with:\r\n       &lt;0x01&gt;10&lt;0x02&gt;  \r\n(First substitution changes ,&#39;t&#39;, to &lt;0x1&gt;1&lt;0x2&gt;\r\n Second substitution changes &lt;0x02&gt;&#39;f&#39;, to &lt;0x1&gt;0&lt;0x1&gt;)\r\n\r\nThe fix is to either change the replacement strings by adding an &#39;r&#39; prefix, or by escaping the \\1 and \\2 in the existing string.  Since easy manipulation of regexp strings is what raw strings are for, here&#39;s the fix using those:\r\n\r\n    line = re.sub(r&quot;([^&#39;])&#39;t&#39;(.)&quot;, r&quot;\\1THIS_IS_TRUE\\2&quot;, line)\r\n    line = line.replace(&#39;THIS_IS_TRUE&#39;, &#39;1&#39;)\r\n    line = re.sub(r&quot;([^&#39;])&#39;f&#39;(.)&quot;, r&quot;\\1THIS_IS_FALSE\\2&quot;, line)\r\n    line = line.replace(&#39;THIS_IS_FALSE&#39;, &#39;0&#39;)\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1295436737, "answer_id": 4734714, "path": "stack.django.answer", "score": 7, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1295436737, "body_markdown": "Surprised no one&#39;s mentioned this by now, but there&#39;s actually a tool explicitly for this.\r\nIt&#39;s in perl, SQL:Translator:\r\nhttp://sqlfairy.sourceforge.net/\r\n\r\nConverts between most any form of tabular data (Different SQL formats, Excel spreadsheet), and even makes diagrams of your SQL schema."}, {"tags": [], "down_vote_count": 1, "creation_date": 1305357105, "answer_id": 6000355, "path": "stack.django.answer", "score": 47, "up_vote_count": 48, "is_accepted": true, "last_activity_date": 1472273394, "last_edit_date": 1472273394, "body_markdown": " Here is a list of converters (not updated since 2011):\r\n\r\n  - http://www.sqlite.org/cvstrac/wiki?p=ConverterTools (or [snapshot at archive.org][1])\r\n\r\n&lt;hr/&gt;\r\nAn alternative method that would work nicely but is rarely mentioned is: use an ORM class that abstracts specific database differences away for you.  e.g. you get these in PHP ([RedBean][2]), Python (Django&#39;s ORM layer, [Storm][3], [SqlAlchemy][4]), Ruby on Rails ([ActiveRecord][5]), Cocoa ([CoreData][6])\r\n\r\ni.e. you could do this:\r\n\r\n  1.  Load data from source database using the ORM class.\r\n  2.  Store data in memory or serialize to disk.\r\n  3.  Store data into destination database using the ORM class.\r\n\r\n\r\n  [1]: https://web.archive.org/web/20160716191418/https://www.sqlite.org/cvstrac/wiki?p=ConverterTools\r\n  [2]: http://www.redbeanphp.com\r\n  [3]: https://storm.canonical.com/\r\n  [4]: http://www.sqlalchemy.org\r\n  [5]: http://ar.rubyonrails.org/\r\n  [6]: http://developer.apple.com/technologies/mac/data-management.html"}, {"tags": [], "down_vote_count": 1, "creation_date": 1306806810, "answer_id": 6182229, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1431000978, "last_edit_date": 1431000978, "body_markdown": "The python script worked after a few modifications as follows:\r\n\r\n    # Remove &quot;PRAGMA foreign_keys=OFF; from beginning of script\r\n    # Double quotes were not removed from INSERT INTO &quot;BaselineInfo&quot; table, check if removed from subsequent tables.  Regex needed A-Z added.\r\n    # Removed backticks from CREATE TABLE\r\n    # Added replace AUTOINCREMENT with AUTO_INCREMENT\r\n    # Removed replacement,\r\n    #line = line.replace(&#39;&quot;&#39;, &#39;`&#39;).replace(&quot;&#39;&quot;, &#39;`&#39;)\r\n#...\r\n    useless_es = [\r\n        &#39;BEGIN TRANSACTION&#39;,\r\n        &#39;COMMIT&#39;,\r\n        &#39;sqlite_sequence&#39;,\r\n        &#39;CREATE UNIQUE INDEX&#39;,\r\n        &#39;PRAGMA foreign_keys=OFF&#39;,\r\n        ]\r\n#...\r\n    m = re.search(&#39;CREATE TABLE &quot;?([A-Za-z_]*)&quot;?(.*)&#39;, line)\r\n    if m:\r\n        name, sub = m.groups()\r\n        line = &quot;DROP TABLE IF EXISTS %(name)s;\\nCREATE TABLE IF NOT EXISTS %(name)s%(sub)s\\n&quot;\r\n        line = line % dict(name=name, sub=sub)\r\n\t    line = line.replace(&#39;AUTOINCREMENT&#39;,&#39;AUTO_INCREMENT&#39;)\r\n\t    line = line.replace(&#39;UNIQUE&#39;,&#39;&#39;)\r\n\t    line = line.replace(&#39;&quot;&#39;,&#39;&#39;)\r\n    else:\r\n        m = re.search(&#39;INSERT INTO &quot;([A-Za-z_]*)&quot;(.*)&#39;, line)\r\n        if m:\r\n            line = &#39;INSERT INTO %s%s\\n&#39; % m.groups()\r\n            line = line.replace(&#39;&quot;&#39;, r&#39;\\&quot;&#39;)\r\n            line = line.replace(&#39;&quot;&#39;, &quot;&#39;&quot;)\r\n#..."}, {"tags": [], "down_vote_count": 1, "creation_date": 1308571972, "answer_id": 6410922, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1352807703, "last_edit_date": 1495540968, "body_markdown": "Based on Jims&#39;s solution:\r\nhttps://stackoverflow.com/questions/18671/quick-easy-way-to-migrate-sqlite3-to-mysql/1067365#1067365\r\n\r\n    sqlite3 your_sql3_database.db .dump | python ./dump.py &gt; your_dump_name.sql\r\n    cat your_dump_name.sql | sed &#39;1d&#39; | mysql --user=your_mysql_user --default-character-set=utf8 your_mysql_db -p  \r\n\r\nThis works for me. I use sed just to throw the first line, which is not mysql-like, but you might as well modify dump.py script to throw this line away."}, {"tags": [], "down_vote_count": 0, "creation_date": 1318456906, "answer_id": 7747146, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1318457228, "last_edit_date": 1318457228, "body_markdown": "- http://sqlfairy.sourceforge.net/\r\n- http://search.cpan.org/dist/SQL-Translator/\r\n\r\n&lt;!-- language: lang-bsh --&gt;\r\n\r\n    aptitude install sqlfairy libdbd-sqlite3-perl\r\n\r\n    sqlt -f DBI --dsn dbi:SQLite:../.open-tran/ten-sq.db -t MySQL --add-drop-table &gt; mysql-ten-sq.sql\r\n    sqlt -f DBI --dsn dbi:SQLite:../.open-tran/ten-sq.db -t Dumper --use-same-auth &gt; sqlite2mysql-dumper.pl\r\n    chmod +x sqlite2mysql-dumper.pl\r\n    ./sqlite2mysql-dumper.pl --help\r\n    ./sqlite2mysql-dumper.pl --add-truncate --mysql-loadfile &gt; mysql-dump.sql\r\n    sed -e &#39;s/LOAD DATA INFILE/LOAD DATA LOCAL INFILE/&#39; -i mysql-dump.sql\r\n\r\n    echo &#39;drop database `ten-sq`&#39; | mysql -p -u root\r\n    echo &#39;create database `ten-sq` charset utf8&#39; | mysql -p -u root\r\n    mysql -p -u root -D ten-sq &lt; mysql-ten-sq.sql\r\n    mysql -p -u root -D ten-sq &lt; mysql-dump.sql\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 5, "creation_date": 1333924360, "answer_id": 10067099, "path": "stack.django.answer", "score": -5, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1351246326, "last_edit_date": 1351246326, "body_markdown": "    echo &quot;.dump&quot; | sqlite3 /tmp/db.sqlite &gt; db.sql\r\n\r\nwatch out for CREATE statements"}, {"tags": [], "down_vote_count": 1, "creation_date": 1352826375, "answer_id": 13365275, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1490197386, "last_edit_date": 1495540968, "body_markdown": "I&#39;ve just gone through this process, and there&#39;s a lot of very good help and information in this Q/A, but I found I had to pull together various elements (plus some from other Q/As) to get a working solution in order to successfully migrate.\r\n\r\nHowever, even after combining the existing answers, I found that the Python script did not fully work for me as it did not work where there were multiple boolean occurrences in an INSERT. See [here][1] why that was the case.\r\n\r\nSo, I thought I&#39;d post up my merged answer here.  Credit goes to those that have contributed elsewhere, of course.  But I wanted to give something back, and save others time that follow.\r\n\r\nI&#39;ll post the script below.  But firstly, here&#39;s the instructions for a conversion...\r\n\r\nI ran the script on OS X 10.7.5 Lion.  Python worked out of the box.\r\n\r\nTo generate the MySQL input file from your existing SQLite3 database, run the script on your own files as follows,\r\n\r\n    Snips$ sqlite3 original_database.sqlite3 .dump | python ~/scripts/dump_for_mysql.py &gt; dumped_data.sql\r\n\r\nI then copied the resulting dumped_sql.sql file over to a Linux box running Ubuntu 10.04.4 LTS where my MySQL database was to reside.\r\n\r\nAnother issue I had when importing the MySQL file was that some unicode UTF-8 characters (specifically single quotes) were not being imported correctly, so I had to add a switch to the command to specify UTF-8.\r\n\r\nThe resulting command to input the data into a spanking new empty MySQL database is as follows:\r\n\r\n    Snips$ mysql -p -u root -h 127.0.0.1 test_import --default-character-set=utf8 &lt; dumped_data.sql\r\n\r\nLet it cook, and that should be it!  Don&#39;t forget to scrutinise your data, before and after.\r\n\r\nSo, as the OP requested, it&#39;s quick and easy, when you know how! :-)\r\n\r\nAs an aside, one thing I wasn&#39;t sure about before I looked into this migration, was whether created_at and updated_at field values would be preserved - the good news for me is that they are, so I could migrate my existing production data.\r\n\r\nGood luck!\r\n\r\n*UPDATE*\r\n\r\nSince making this switch, I&#39;ve noticed a problem that I hadn&#39;t noticed before.  In my Rails application, my text fields are defined as &#39;string&#39;, and this carries through to the database schema.  The process outlined here results in these being defined as VARCHAR(255) in the MySQL database.  This places a 255 character limit on these field sizes - and anything beyond this was silently truncated during the import.  To support text length greater than 255, the MySQL schema would need to use &#39;TEXT&#39; rather than VARCHAR(255), I believe.  The process defined here does not include this conversion.\r\n\r\n\r\n----------\r\n\r\n\r\nHere&#39;s the merged and revised Python script that worked for my data:\r\n\r\n    #!/usr/bin/env python\r\n    \r\n    import re\r\n    import fileinput\r\n    \r\n    def this_line_is_useless(line):\r\n        useless_es = [\r\n            &#39;BEGIN TRANSACTION&#39;,\r\n            &#39;COMMIT&#39;,\r\n            &#39;sqlite_sequence&#39;,\r\n            &#39;CREATE UNIQUE INDEX&#39;,\t\t  \r\n            &#39;PRAGMA foreign_keys=OFF&#39;\r\n            ]\r\n        for useless in useless_es:\r\n        \tif re.search(useless, line):\r\n        \t\treturn True\r\n    \r\n    def has_primary_key(line):\r\n        return bool(re.search(r&#39;PRIMARY KEY&#39;, line))\r\n    \r\n    searching_for_end = False\r\n    for line in fileinput.input():\r\n        if this_line_is_useless(line): continue\r\n    \r\n        # this line was necessary because &#39;&#39;); was getting\r\n        # converted (inappropriately) to \\&#39;);\r\n        if re.match(r&quot;.*, &#39;&#39;\\);&quot;, line):\r\n        \tline = re.sub(r&quot;&#39;&#39;\\);&quot;, r&#39;``);&#39;, line)\r\n    \r\n        if re.match(r&#39;^CREATE TABLE.*&#39;, line):\r\n        \tsearching_for_end = True\r\n    \r\n        m = re.search(&#39;CREATE TABLE &quot;?([A-Za-z_]*)&quot;?(.*)&#39;, line)\r\n        if m:\r\n        \tname, sub = m.groups()\r\n        \tline = &quot;DROP TABLE IF EXISTS %(name)s;\\nCREATE TABLE IF NOT EXISTS `%(name)s`%(sub)s\\n&quot;\r\n        \tline = line % dict(name=name, sub=sub)\r\n        \tline = line.replace(&#39;AUTOINCREMENT&#39;,&#39;AUTO_INCREMENT&#39;)\r\n        \tline = line.replace(&#39;UNIQUE&#39;,&#39;&#39;)\r\n        \tline = line.replace(&#39;&quot;&#39;,&#39;&#39;)\r\n        else:\r\n        \tm = re.search(&#39;INSERT INTO &quot;([A-Za-z_]*)&quot;(.*)&#39;, line)\r\n        \tif m:\r\n                line = &#39;INSERT INTO %s%s\\n&#39; % m.groups()\r\n                line = line.replace(&#39;&quot;&#39;, r&#39;\\&quot;&#39;)\r\n                line = line.replace(&#39;&quot;&#39;, &quot;&#39;&quot;)\r\n                line = re.sub(r&quot;(?&lt;!&#39;)&#39;t&#39;(?=.)&quot;, r&quot;1&quot;, line)\r\n                line = re.sub(r&quot;(?&lt;!&#39;)&#39;f&#39;(?=.)&quot;, r&quot;0&quot;, line)\r\n    \r\n        # Add auto_increment if it&#39;s not there since sqlite auto_increments ALL\r\n        # primary keys\r\n        if searching_for_end:\r\n        \tif re.search(r&quot;integer(?:\\s+\\w+)*\\s*PRIMARY KEY(?:\\s+\\w+)*\\s*,&quot;, line):\r\n        \t\tline = line.replace(&quot;PRIMARY KEY&quot;, &quot;PRIMARY KEY AUTO_INCREMENT&quot;)\r\n        \t# replace &quot; and &#39; with ` because mysql doesn&#39;t like quotes in CREATE commands\r\n    \r\n        # And now we convert it back (see above)\r\n        if re.match(r&quot;.*, ``\\);&quot;, line):\r\n        \tline = re.sub(r&#39;``\\);&#39;, r&quot;&#39;&#39;);&quot;, line)\r\n    \r\n        if searching_for_end and re.match(r&#39;.*\\);&#39;, line):\r\n        \tsearching_for_end = False\r\n    \r\n        if re.match(r&quot;CREATE INDEX&quot;, line):\r\n        \tline = re.sub(&#39;&quot;&#39;, &#39;`&#39;, line)\r\n    \r\n        print line,\r\n\r\n  [1]: https://stackoverflow.com/questions/13363473/re-sub-not-replacing-all-occurrences/13363620#13363620"}, {"tags": [], "down_vote_count": 7, "creation_date": 1370779297, "answer_id": 17009384, "path": "stack.django.answer", "score": 6, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1371901011, "last_edit_date": 1371901011, "body_markdown": "Get a SQL dump\r\n===============\r\n\r\n    moose@pc08$ sqlite3 mySqliteDatabase.db .dump &gt; myTemporarySQLFile.sql\r\n\r\nImport dump to MySQL\r\n==================\r\nFor small imports:\r\n------------------\r\n\r\n    moose@pc08$ mysql -u &lt;username&gt; -p\r\n    Enter password:\r\n    ....\r\n    mysql&gt; use somedb;\r\n    Database changed\r\n    mysql&gt; source myTemporarySQLFile.sql;\r\n\r\nor\r\n\r\n    mysql -u root -p somedb &lt; myTemporarySQLFile.sql\r\n\r\nThis will prompt you for a password. Please note: If you want to enter your password directly, you have to do it WITHOUT space, directly after `-p`:\r\n\r\n    mysql -u root -pYOURPASS somedb &lt; myTemporarySQLFile.sql\r\n\r\nFor larger dumps:\r\n-----------------\r\n\r\nmysqlimport or other import tools like [BigDump][1].\r\n\r\nBigDump gives you a progress bar:\r\n\r\n![enter image description here][2]\r\n\r\n\r\n  [1]: http://www.ozerov.de/bigdump/\r\n  [2]: http://i.stack.imgur.com/TuDhM.png"}, {"tags": [], "down_vote_count": 1, "creation_date": 1424144015, "answer_id": 28554190, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1424144015, "last_edit_date": 1495540048, "body_markdown": "I have carefully checked all the answers in this post, as well as the answers in another related post https://stackoverflow.com/questions/1067060/translating-perl-to-python. Yet none could fully solve my problem. \r\n\r\nMy scenario is I need to migrate a database of Trac from sqlite to MySQL, and the database contains a lot of tech-based wiki content. Therefore inside the `INSERT INTO` values, there could be SQL statements like `CREATE TABLE` and `AUTOINCREMENT`. But the line-by-line replacement could have wrong replacements there.\r\n\r\nEventually I have written my own tool for this purpose:\r\n\r\nhttps://github.com/motherapp/sqlite_sql_parser\r\n\r\nThe usage is relatively simple:\r\n\r\n`python parse_sqlite_sql.py export.sql`\r\n\r\nTwo files would be generated: `export.sql.schema.sql` and `export.sql.data.sql`. One for updated DB schema, and the other for updated DB data.\r\n\r\nOne could do further manual modifications on the DB schema file using any text editor, without worrying about changing the content.\r\n\r\nHope it could helps others in future.\r\n\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1437600063, "answer_id": 31574201, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1437624743, "last_edit_date": 1437624743, "body_markdown": "this software out of the box - works for me. try it and let other know.\r\n\r\nhttps://dbconvert.com/sqlite/mysql/\r\n\r\nIn addition:\r\n\r\nI had to make one small change: somehow the auto_increment of one field (a field found from error message) was not enabled. So in phpmyadmin i check property A_I of this field and it works completely. Hope it helps.\r\n\r\nDunn."}, {"tags": [], "down_vote_count": 1, "creation_date": 1440662994, "answer_id": 32243979, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1442055485, "last_edit_date": 1442055485, "body_markdown": "I wrote this simple script in Python3. It can be used as an included class or standalone script invoked via a terminal shell. By default it imports all integers as `int(11)`and strings as `varchar(300)`, but all that can be adjusted in the constructor or script arguments respectively.\r\n\r\n**NOTE:** It requires MySQL Connector/Python 2.0.4 or higher\r\n\r\nHere&#39;s a link to the source on GitHub if you find the code below hard to read: https://gist.github.com/techouse/4deb94eee58a02d104c6\r\n\r\n    #!/usr/bin/env python3\r\n    \r\n    __author__ = &quot;Klemen Tu\u0161ar&quot;\r\n    __email__ = &quot;techouse@gmail.com&quot;\r\n    __copyright__ = &quot;GPL&quot;\r\n    __version__ = &quot;1.0.1&quot;\r\n    __date__ = &quot;2015-09-12&quot;\r\n    __status__ = &quot;Production&quot;\r\n    \r\n    import os.path, sqlite3, mysql.connector\r\n    from mysql.connector import errorcode\r\n    \r\n    \r\n    class SQLite3toMySQL:\r\n        &quot;&quot;&quot;\r\n        Use this class to transfer an SQLite 3 database to MySQL.\r\n    \r\n        NOTE: Requires MySQL Connector/Python 2.0.4 or higher (https://dev.mysql.com/downloads/connector/python/)\r\n        &quot;&quot;&quot;\r\n        def __init__(self, **kwargs):\r\n            self._properties = kwargs\r\n            self._sqlite_file = self._properties.get(&#39;sqlite_file&#39;, None)\r\n            if not os.path.isfile(self._sqlite_file):\r\n                print(&#39;SQLite file does not exist!&#39;)\r\n                exit(1)\r\n            self._mysql_user = self._properties.get(&#39;mysql_user&#39;, None)\r\n            if self._mysql_user is None:\r\n                print(&#39;Please provide a MySQL user!&#39;)\r\n                exit(1)\r\n            self._mysql_password = self._properties.get(&#39;mysql_password&#39;, None)\r\n            if self._mysql_password is None:\r\n                print(&#39;Please provide a MySQL password&#39;)\r\n                exit(1)\r\n            self._mysql_database = self._properties.get(&#39;mysql_database&#39;, &#39;transfer&#39;)\r\n            self._mysql_host = self._properties.get(&#39;mysql_host&#39;, &#39;localhost&#39;)\r\n    \r\n            self._mysql_integer_type = self._properties.get(&#39;mysql_integer_type&#39;, &#39;int(11)&#39;)\r\n            self._mysql_string_type = self._properties.get(&#39;mysql_string_type&#39;, &#39;varchar(300)&#39;)\r\n    \r\n            self._sqlite = sqlite3.connect(self._sqlite_file)\r\n            self._sqlite.row_factory = sqlite3.Row\r\n            self._sqlite_cur = self._sqlite.cursor()\r\n    \r\n            self._mysql = mysql.connector.connect(\r\n                user=self._mysql_user,\r\n                password=self._mysql_password,\r\n                host=self._mysql_host\r\n            )\r\n            self._mysql_cur = self._mysql.cursor(prepared=True)\r\n            try:\r\n                self._mysql.database = self._mysql_database\r\n            except mysql.connector.Error as err:\r\n                if err.errno == errorcode.ER_BAD_DB_ERROR:\r\n                    self._create_database()\r\n                else:\r\n                    print(err)\r\n                    exit(1)\r\n    \r\n        def _create_database(self):\r\n            try:\r\n                self._mysql_cur.execute(&quot;CREATE DATABASE IF NOT EXISTS `{}` DEFAULT CHARACTER SET &#39;utf8&#39;&quot;.format(self._mysql_database))\r\n                self._mysql_cur.close()\r\n                self._mysql.commit()\r\n                self._mysql.database = self._mysql_database\r\n                self._mysql_cur = self._mysql.cursor(prepared=True)\r\n            except mysql.connector.Error as err:\r\n                print(&#39;_create_database failed creating databse {}: {}&#39;.format(self._mysql_database, err))\r\n                exit(1)\r\n    \r\n        def _create_table(self, table_name):\r\n            primary_key = &#39;&#39;\r\n            sql = &#39;CREATE TABLE IF NOT EXISTS `{}` ( &#39;.format(table_name)\r\n            self._sqlite_cur.execute(&#39;PRAGMA table_info(&quot;{}&quot;)&#39;.format(table_name))\r\n            for row in self._sqlite_cur.fetchall():\r\n                column = dict(row)\r\n                sql += &#39; `{name}` {type} {notnull} {auto_increment}, &#39;.format(\r\n                    name=column[&#39;name&#39;],\r\n                    type=self._mysql_string_type if column[&#39;type&#39;].upper() == &#39;TEXT&#39; else self._mysql_integer_type,\r\n                    notnull=&#39;NOT NULL&#39; if column[&#39;notnull&#39;] else &#39;NULL&#39;,\r\n                    auto_increment=&#39;AUTO_INCREMENT&#39; if column[&#39;pk&#39;] else &#39;&#39;\r\n                )\r\n                if column[&#39;pk&#39;]:\r\n                    primary_key = column[&#39;name&#39;]\r\n            sql += &#39; PRIMARY KEY (`{}`) ) ENGINE = InnoDB CHARACTER SET utf8&#39;.format(primary_key)\r\n            try:\r\n                self._mysql_cur.execute(sql)\r\n                self._mysql.commit()\r\n            except mysql.connector.Error as err:\r\n                print(&#39;_create_table failed creating table {}: {}&#39;.format(table_name, err))\r\n                exit(1)\r\n    \r\n        def transfer(self):\r\n            self._sqlite_cur.execute(&quot;SELECT name FROM sqlite_master WHERE type=&#39;table&#39; AND name NOT LIKE &#39;sqlite_%&#39;&quot;)\r\n            for row in self._sqlite_cur.fetchall():\r\n                table = dict(row)\r\n                # create the table\r\n                self._create_table(table[&#39;name&#39;])\r\n                # populate it\r\n                print(&#39;Transferring table {}&#39;.format(table[&#39;name&#39;]))\r\n                self._sqlite_cur.execute(&#39;SELECT * FROM &quot;{}&quot;&#39;.format(table[&#39;name&#39;]))\r\n                columns = [column[0] for column in self._sqlite_cur.description]\r\n                try:\r\n                    self._mysql_cur.executemany(&quot;INSERT IGNORE INTO `{table}` ({fields}) VALUES ({placeholders})&quot;.format(\r\n                        table=table[&#39;name&#39;],\r\n                        fields=(&#39;`{}`, &#39; * len(columns)).rstrip(&#39; ,&#39;).format(*columns),\r\n                        placeholders=(&#39;%s, &#39; * len(columns)).rstrip(&#39; ,&#39;)\r\n                    ), (tuple(data) for data in self._sqlite_cur.fetchall()))\r\n                    self._mysql.commit()\r\n                except mysql.connector.Error as err:\r\n                    print(&#39;_insert_table_data failed inserting data into table {}: {}&#39;.format(table[&#39;name&#39;], err))\r\n                    exit(1)\r\n            print(&#39;Done!&#39;)\r\n    \r\n    \r\n    def main():\r\n        &quot;&quot;&quot; For use in standalone terminal form &quot;&quot;&quot;\r\n        import sys, argparse\r\n        parser = argparse.ArgumentParser()\r\n        parser.add_argument(&#39;--sqlite-file&#39;, dest=&#39;sqlite_file&#39;, default=None, help=&#39;SQLite3 db file&#39;)\r\n        parser.add_argument(&#39;--mysql-user&#39;, dest=&#39;mysql_user&#39;, default=None, help=&#39;MySQL user&#39;)\r\n        parser.add_argument(&#39;--mysql-password&#39;, dest=&#39;mysql_password&#39;, default=None, help=&#39;MySQL password&#39;)\r\n        parser.add_argument(&#39;--mysql-database&#39;, dest=&#39;mysql_database&#39;, default=None, help=&#39;MySQL host&#39;)\r\n        parser.add_argument(&#39;--mysql-host&#39;, dest=&#39;mysql_host&#39;, default=&#39;localhost&#39;, help=&#39;MySQL host&#39;)\r\n        parser.add_argument(&#39;--mysql-integer-type&#39;, dest=&#39;mysql_integer_type&#39;, default=&#39;int(11)&#39;, help=&#39;MySQL default integer field type&#39;)\r\n        parser.add_argument(&#39;--mysql-string-type&#39;, dest=&#39;mysql_string_type&#39;, default=&#39;varchar(300)&#39;, help=&#39;MySQL default string field type&#39;)\r\n        args = parser.parse_args()\r\n    \r\n        if len(sys.argv) == 1:\r\n            parser.print_help()\r\n            exit(1)\r\n    \r\n        converter = SQLite3toMySQL(\r\n            sqlite_file=args.sqlite_file,\r\n            mysql_user=args.mysql_user,\r\n            mysql_password=args.mysql_password,\r\n            mysql_database=args.mysql_database,\r\n            mysql_host=args.mysql_host,\r\n            mysql_integer_type=args.mysql_integer_type,\r\n            mysql_string_type=args.mysql_string_type\r\n        )\r\n        converter.transfer()\r\n    \r\n    if __name__ == &#39;__main__&#39;:\r\n        main()\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1447915260, "answer_id": 33796909, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1447915260, "body_markdown": "This simple solution worked for me:\r\n\r\n\t&lt;?php\r\n\t$sq = new SQLite3( &#39;sqlite3.db&#39; );\r\n\r\n\t$tables = $sq-&gt;query( &#39;SELECT name FROM sqlite_master WHERE type=&quot;table&quot;&#39; );\r\n\r\n\twhile ( $table = $tables-&gt;fetchArray() ) {\r\n\t\t$table = current( $table );\r\n\t\t$result = $sq-&gt;query( sprintf( &#39;SELECT * FROM %s&#39;, $table ) );\r\n\r\n\t\tif ( strpos( $table, &#39;sqlite&#39; ) !== false )\r\n\t\t\tcontinue;\r\n\r\n\t\tprintf( &quot;-- %s\\n&quot;, $table );\r\n\t\twhile ( $row = $result-&gt;fetchArray( SQLITE3_ASSOC ) ) {\r\n\t\t\t$values = array_map( function( $value ) {\r\n\t\t\t\treturn sprintf( &quot;&#39;%s&#39;&quot;, mysql_real_escape_string( $value ) );\r\n\t\t\t}, array_values( $row ) );\r\n\t\t\tprintf( &quot;INSERT INTO `%s` VALUES( %s );\\n&quot;, $table, implode( &#39;, &#39;, $values ) );\r\n\t\t}\r\n\t}\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1455180508, "answer_id": 35334573, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1455180508, "last_edit_date": 1495540499, "body_markdown": "I have taken the Python script from https://stackoverflow.com/a/32243979/746459 (above) and fixed it to cope with our own sqlite schemas. There were a few issues to deal with.\r\n\r\nYou may find it in source control here: https://bitbucket.org/mjogltd/sqlite3mysql\r\n\r\nAlso available is the same thing wrapped as a Docker image, here: https://hub.docker.com/r/mjog/sqlite3mysql/ - it is fully usable even under a Windows desktop.\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1468695255, "answer_id": 38414534, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1468695255, "body_markdown": "There is no need to any script,command,etc... \r\n\r\nyou have to only export your sqlite database as a `.csv` file and then import it in Mysql using phpmyadmin.\r\n\r\nI used it and it worked amazing... "}, {"tags": [], "down_vote_count": 0, "creation_date": 1494861671, "answer_id": 43983175, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1494861671, "body_markdown": "MySQL Workbench (GPL license) migrates from SQLite very easily via the [Database Migration wizard][1].  Installs on [Windows, Ubuntu, RHEL, Fedora and OS X][2].\r\n\r\n\r\n  [1]: https://dev.mysql.com/doc/workbench/en/wb-migration.html\r\n  [2]: https://dev.mysql.com/downloads/workbench/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1499873554, "answer_id": 45062019, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1499873554, "body_markdown": "If you are using Python/Django it&#39;s pretty easy:\r\n\r\ncreate two databases in settings.py (like here https://docs.djangoproject.com/en/1.11/topics/db/multi-db/)\r\n\r\nthen just do like this:\r\n\r\n    objlist = ModelObject.objects.using(&#39;sqlite&#39;).all()\r\n        \r\n    for obj in objlist:\r\n        obj.save(using=&#39;mysql&#39;)"}], "creation_date": 1219261753, "body_markdown": "Anyone know a quick easy way to migrate a SQLite3 database to MySQL?", "title": "Quick easy way to migrate SQLite3 to MySQL?", "view_count": 206599, "up_vote_count": 187, "answer_count": 25, "link": "https://stackoverflow.com/questions/18671/quick-easy-way-to-migrate-sqlite3-to-mysql", "code_snippet": ["<code>#! /usr/bin/perl\n\nwhile ($line = &lt;&gt;){\n    if (($line !~  /BEGIN TRANSACTION/) &amp;&amp; ($line !~ /COMMIT/) &amp;&amp; ($line !~ /sqlite_sequence/) &amp;&amp; ($line !~ /CREATE UNIQUE INDEX/)){\n\n        if ($line =~ /CREATE TABLE \\\"([a-z_]*)\\\"(.*)/){\n            $name = $1;\n            $sub = $2;\n            $sub =~ s/\\\"//g;\n            $line = \"DROP TABLE IF EXISTS $name;\\nCREATE TABLE IF NOT EXISTS $name$sub\\n\";\n        }\n        elsif ($line =~ /INSERT INTO \\\"([a-z_]*)\\\"(.*)/){\n            $line = \"INSERT INTO $1$2\\n\";\n            $line =~ s/\\\"/\\\\\\\"/g;\n            $line =~ s/\\\"/\\'/g;\n        }else{\n            $line =~ s/\\'\\'/\\\\\\'/g;\n        }\n        $line =~ s/([^\\\\'])\\'t\\'(.)/$1THIS_IS_TRUE$2/g;\n        $line =~ s/THIS_IS_TRUE/1/g;\n        $line =~ s/([^\\\\'])\\'f\\'(.)/$1THIS_IS_FALSE$2/g;\n        $line =~ s/THIS_IS_FALSE/0/g;\n        $line =~ s/AUTOINCREMENT/AUTO_INCREMENT/g;\n        print $line;\n    }\n}\n</code>", "<code>&amp;&amp; ($line !~ /CREATE UNIQUE INDEX/)</code>", "<code>&amp;&amp; ($line !~ /PRAGMA foreign_keys=OFF/)</code>", "<code>$line =~ /INSERT INTO \\\"([a-z_]*)\\\"(.*)/</code>", "<code>$line =~ /INSERT INTO \\\"([a-z_1-9]*)\\\"(.*)/</code>", "<code>dump_for_mysql.py</code>", "<code>sqlite3 sample.db .dump | python dump_for_mysql.py &gt; dump.sql\n</code>", "<code>#!/usr/bin/env python\n\nimport re\nimport fileinput\n\ndef this_line_is_useless(line):\n    useless_es = [\n        'BEGIN TRANSACTION',\n        'COMMIT',\n        'sqlite_sequence',\n        'CREATE UNIQUE INDEX',\n        'PRAGMA foreign_keys=OFF',\n    ]\n    for useless in useless_es:\n        if re.search(useless, line):\n            return True\n\ndef has_primary_key(line):\n    return bool(re.search(r'PRIMARY KEY', line))\n\nsearching_for_end = False\nfor line in fileinput.input():\n    if this_line_is_useless(line):\n        continue\n\n    # this line was necessary because '');\n    # would be converted to \\'); which isn't appropriate\n    if re.match(r\".*, ''\\);\", line):\n        line = re.sub(r\"''\\);\", r'``);', line)\n\n    if re.match(r'^CREATE TABLE.*', line):\n        searching_for_end = True\n\n    m = re.search('CREATE TABLE \"?(\\w*)\"?(.*)', line)\n    if m:\n        name, sub = m.groups()\n        line = \"DROP TABLE IF EXISTS %(name)s;\\nCREATE TABLE IF NOT EXISTS `%(name)s`%(sub)s\\n\"\n        line = line % dict(name=name, sub=sub)\n    else:\n        m = re.search('INSERT INTO \"(\\w*)\"(.*)', line)\n        if m:\n            line = 'INSERT INTO %s%s\\n' % m.groups()\n            line = line.replace('\"', r'\\\"')\n            line = line.replace('\"', \"'\")\n    line = re.sub(r\"([^'])'t'(.)\", \"\\1THIS_IS_TRUE\\2\", line)\n    line = line.replace('THIS_IS_TRUE', '1')\n    line = re.sub(r\"([^'])'f'(.)\", \"\\1THIS_IS_FALSE\\2\", line)\n    line = line.replace('THIS_IS_FALSE', '0')\n\n    # Add auto_increment if it is not there since sqlite auto_increments ALL\n    # primary keys\n    if searching_for_end:\n        if re.search(r\"integer(?:\\s+\\w+)*\\s*PRIMARY KEY(?:\\s+\\w+)*\\s*,\", line):\n            line = line.replace(\"PRIMARY KEY\", \"PRIMARY KEY AUTO_INCREMENT\")\n        # replace \" and ' with ` because mysql doesn't like quotes in CREATE commands \n        if line.find('DEFAULT') == -1:\n            line = line.replace(r'\"', r'`').replace(r\"'\", r'`')\n        else:\n            parts = line.split('DEFAULT')\n            parts[0] = parts[0].replace(r'\"', r'`').replace(r\"'\", r'`')\n            line = 'DEFAULT'.join(parts)\n\n    # And now we convert it back (see above)\n    if re.match(r\".*, ``\\);\", line):\n        line = re.sub(r'``\\);', r\"'');\", line)\n\n    if searching_for_end and re.match(r'.*\\);', line):\n        searching_for_end = False\n\n    if re.match(r\"CREATE INDEX\", line):\n        line = re.sub('\"', '`', line)\n\n    if re.match(r\"AUTOINCREMENT\", line):\n        line = re.sub(\"AUTOINCREMENT\", \"AUTO_INCREMENT\", line)\n\n    print line,\n</code>", "<code>schema_migrations</code>", "<code>version</code>", "<code>20100714032840</code>", "<code>Blobvar</code>", "<code>aptitude install sqlfairy libdbd-sqlite3-perl\n\nsqlt -f DBI --dsn dbi:SQLite:../.open-tran/ten-sq.db -t MySQL --add-drop-table &gt; mysql-ten-sq.sql\nsqlt -f DBI --dsn dbi:SQLite:../.open-tran/ten-sq.db -t Dumper --use-same-auth &gt; sqlite2mysql-dumper.pl\nchmod +x sqlite2mysql-dumper.pl\n./sqlite2mysql-dumper.pl --help\n./sqlite2mysql-dumper.pl --add-truncate --mysql-loadfile &gt; mysql-dump.sql\nsed -e 's/LOAD DATA INFILE/LOAD DATA LOCAL INFILE/' -i mysql-dump.sql\n\necho 'drop database `ten-sq`' | mysql -p -u root\necho 'create database `ten-sq` charset utf8' | mysql -p -u root\nmysql -p -u root -D ten-sq &lt; mysql-ten-sq.sql\nmysql -p -u root -D ten-sq &lt; mysql-dump.sql\n</code>", "<code>sqlite3 sample.db .dump &gt; dump.sql\n</code>", "<code>mysql -p -u root -h 127.0.0.1 test &lt; dump.sql\n</code>", "<code>BEGIN TRANSACTION;\n...\nCOMMIT;\n</code>", "<code>BEGIN;\n...\nCOMMIT;\n</code>", "<code>moose@pc08$ sqlite3 mySqliteDatabase.db .dump &gt; myTemporarySQLFile.sql\n</code>", "<code>moose@pc08$ mysql -u &lt;username&gt; -p\nEnter password:\n....\nmysql&gt; use somedb;\nDatabase changed\nmysql&gt; source myTemporarySQLFile.sql;\n</code>", "<code>mysql -u root -p somedb &lt; myTemporarySQLFile.sql\n</code>", "<code>-p</code>", "<code>mysql -u root -pYOURPASS somedb &lt; myTemporarySQLFile.sql\n</code>", "<code>Snips$ sqlite3 original_database.sqlite3 .dump | python ~/scripts/dump_for_mysql.py &gt; dumped_data.sql\n</code>", "<code>Snips$ mysql -p -u root -h 127.0.0.1 test_import --default-character-set=utf8 &lt; dumped_data.sql\n</code>", "<code>#!/usr/bin/env python\n\nimport re\nimport fileinput\n\ndef this_line_is_useless(line):\n    useless_es = [\n        'BEGIN TRANSACTION',\n        'COMMIT',\n        'sqlite_sequence',\n        'CREATE UNIQUE INDEX',        \n        'PRAGMA foreign_keys=OFF'\n        ]\n    for useless in useless_es:\n        if re.search(useless, line):\n            return True\n\ndef has_primary_key(line):\n    return bool(re.search(r'PRIMARY KEY', line))\n\nsearching_for_end = False\nfor line in fileinput.input():\n    if this_line_is_useless(line): continue\n\n    # this line was necessary because ''); was getting\n    # converted (inappropriately) to \\');\n    if re.match(r\".*, ''\\);\", line):\n        line = re.sub(r\"''\\);\", r'``);', line)\n\n    if re.match(r'^CREATE TABLE.*', line):\n        searching_for_end = True\n\n    m = re.search('CREATE TABLE \"?([A-Za-z_]*)\"?(.*)', line)\n    if m:\n        name, sub = m.groups()\n        line = \"DROP TABLE IF EXISTS %(name)s;\\nCREATE TABLE IF NOT EXISTS `%(name)s`%(sub)s\\n\"\n        line = line % dict(name=name, sub=sub)\n        line = line.replace('AUTOINCREMENT','AUTO_INCREMENT')\n        line = line.replace('UNIQUE','')\n        line = line.replace('\"','')\n    else:\n        m = re.search('INSERT INTO \"([A-Za-z_]*)\"(.*)', line)\n        if m:\n            line = 'INSERT INTO %s%s\\n' % m.groups()\n            line = line.replace('\"', r'\\\"')\n            line = line.replace('\"', \"'\")\n            line = re.sub(r\"(?&lt;!')'t'(?=.)\", r\"1\", line)\n            line = re.sub(r\"(?&lt;!')'f'(?=.)\", r\"0\", line)\n\n    # Add auto_increment if it's not there since sqlite auto_increments ALL\n    # primary keys\n    if searching_for_end:\n        if re.search(r\"integer(?:\\s+\\w+)*\\s*PRIMARY KEY(?:\\s+\\w+)*\\s*,\", line):\n            line = line.replace(\"PRIMARY KEY\", \"PRIMARY KEY AUTO_INCREMENT\")\n        # replace \" and ' with ` because mysql doesn't like quotes in CREATE commands\n\n    # And now we convert it back (see above)\n    if re.match(r\".*, ``\\);\", line):\n        line = re.sub(r'``\\);', r\"'');\", line)\n\n    if searching_for_end and re.match(r'.*\\);', line):\n        searching_for_end = False\n\n    if re.match(r\"CREATE INDEX\", line):\n        line = re.sub('\"', '`', line)\n\n    print line,\n</code>", "<code># Remove \"PRAGMA foreign_keys=OFF; from beginning of script\n# Double quotes were not removed from INSERT INTO \"BaselineInfo\" table, check if removed from subsequent tables.  Regex needed A-Z added.\n# Removed backticks from CREATE TABLE\n# Added replace AUTOINCREMENT with AUTO_INCREMENT\n# Removed replacement,\n#line = line.replace('\"', '`').replace(\"'\", '`')\n</code>", "<code>useless_es = [\n    'BEGIN TRANSACTION',\n    'COMMIT',\n    'sqlite_sequence',\n    'CREATE UNIQUE INDEX',\n    'PRAGMA foreign_keys=OFF',\n    ]\n</code>", "<code>m = re.search('CREATE TABLE \"?([A-Za-z_]*)\"?(.*)', line)\nif m:\n    name, sub = m.groups()\n    line = \"DROP TABLE IF EXISTS %(name)s;\\nCREATE TABLE IF NOT EXISTS %(name)s%(sub)s\\n\"\n    line = line % dict(name=name, sub=sub)\n    line = line.replace('AUTOINCREMENT','AUTO_INCREMENT')\n    line = line.replace('UNIQUE','')\n    line = line.replace('\"','')\nelse:\n    m = re.search('INSERT INTO \"([A-Za-z_]*)\"(.*)', line)\n    if m:\n        line = 'INSERT INTO %s%s\\n' % m.groups()\n        line = line.replace('\"', r'\\\"')\n        line = line.replace('\"', \"'\")\n</code>", "<code>objlist = ModelObject.objects.using('sqlite').all()\n\nfor obj in objlist:\n    obj.save(using='mysql')\n</code>", "<code>sqlite3 your_sql3_database.db .dump | python ./dump.py &gt; your_dump_name.sql\ncat your_dump_name.sql | sed '1d' | mysql --user=your_mysql_user --default-character-set=utf8 your_mysql_db -p  \n</code>", "<code>tinyint([0-9]*) \n</code>", "<code>sed 's/ tinyint(1*) / boolean/g ' |\nsed 's/ tinyint([0|2-9]*) / integer /g' |\n</code>", "<code>Table.find(:all, :conditions =&gt; {:column =&gt; 1 }).each { |t| t.column = true }.each(&amp;:save)\nTable.find(:all, :conditions =&gt; {:column =&gt; 0 }).each { |t| t.column = false}.each(&amp;:save)\n</code>", "<code>line = re.sub(r\"([^'])'t'(.)\", \"\\1THIS_IS_TRUE\\2\", line)\nline = line.replace('THIS_IS_TRUE', '1')\nline = re.sub(r\"([^'])'f'(.)\", \"\\1THIS_IS_FALSE\\2\", line)\nline = line.replace('THIS_IS_FALSE', '0')\n</code>", "<code>line = re.sub(r\"([^'])'t'(.)\", r\"\\1THIS_IS_TRUE\\2\", line)\nline = line.replace('THIS_IS_TRUE', '1')\nline = re.sub(r\"([^'])'f'(.)\", r\"\\1THIS_IS_FALSE\\2\", line)\nline = line.replace('THIS_IS_FALSE', '0')\n</code>", "<code>.csv</code>", "<code>\n    line = re.sub(r\"([^'])'t'(.)\", \"\\1THIS_IS_TRUE\\2\", line)\n    line = line.replace('THIS_IS_TRUE', '1')\n    line = re.sub(r\"([^'])'f'(.)\", \"\\1THIS_IS_FALSE\\2\", line)\n    line = line.replace('THIS_IS_FALSE', '0')\n</code>", "<code>int(11)</code>", "<code>varchar(300)</code>", "<code>#!/usr/bin/env python3\n\n__author__ = \"Klemen Tu\u0161ar\"\n__email__ = \"techouse@gmail.com\"\n__copyright__ = \"GPL\"\n__version__ = \"1.0.1\"\n__date__ = \"2015-09-12\"\n__status__ = \"Production\"\n\nimport os.path, sqlite3, mysql.connector\nfrom mysql.connector import errorcode\n\n\nclass SQLite3toMySQL:\n    \"\"\"\n    Use this class to transfer an SQLite 3 database to MySQL.\n\n    NOTE: Requires MySQL Connector/Python 2.0.4 or higher (https://dev.mysql.com/downloads/connector/python/)\n    \"\"\"\n    def __init__(self, **kwargs):\n        self._properties = kwargs\n        self._sqlite_file = self._properties.get('sqlite_file', None)\n        if not os.path.isfile(self._sqlite_file):\n            print('SQLite file does not exist!')\n            exit(1)\n        self._mysql_user = self._properties.get('mysql_user', None)\n        if self._mysql_user is None:\n            print('Please provide a MySQL user!')\n            exit(1)\n        self._mysql_password = self._properties.get('mysql_password', None)\n        if self._mysql_password is None:\n            print('Please provide a MySQL password')\n            exit(1)\n        self._mysql_database = self._properties.get('mysql_database', 'transfer')\n        self._mysql_host = self._properties.get('mysql_host', 'localhost')\n\n        self._mysql_integer_type = self._properties.get('mysql_integer_type', 'int(11)')\n        self._mysql_string_type = self._properties.get('mysql_string_type', 'varchar(300)')\n\n        self._sqlite = sqlite3.connect(self._sqlite_file)\n        self._sqlite.row_factory = sqlite3.Row\n        self._sqlite_cur = self._sqlite.cursor()\n\n        self._mysql = mysql.connector.connect(\n            user=self._mysql_user,\n            password=self._mysql_password,\n            host=self._mysql_host\n        )\n        self._mysql_cur = self._mysql.cursor(prepared=True)\n        try:\n            self._mysql.database = self._mysql_database\n        except mysql.connector.Error as err:\n            if err.errno == errorcode.ER_BAD_DB_ERROR:\n                self._create_database()\n            else:\n                print(err)\n                exit(1)\n\n    def _create_database(self):\n        try:\n            self._mysql_cur.execute(\"CREATE DATABASE IF NOT EXISTS `{}` DEFAULT CHARACTER SET 'utf8'\".format(self._mysql_database))\n            self._mysql_cur.close()\n            self._mysql.commit()\n            self._mysql.database = self._mysql_database\n            self._mysql_cur = self._mysql.cursor(prepared=True)\n        except mysql.connector.Error as err:\n            print('_create_database failed creating databse {}: {}'.format(self._mysql_database, err))\n            exit(1)\n\n    def _create_table(self, table_name):\n        primary_key = ''\n        sql = 'CREATE TABLE IF NOT EXISTS `{}` ( '.format(table_name)\n        self._sqlite_cur.execute('PRAGMA table_info(\"{}\")'.format(table_name))\n        for row in self._sqlite_cur.fetchall():\n            column = dict(row)\n            sql += ' `{name}` {type} {notnull} {auto_increment}, '.format(\n                name=column['name'],\n                type=self._mysql_string_type if column['type'].upper() == 'TEXT' else self._mysql_integer_type,\n                notnull='NOT NULL' if column['notnull'] else 'NULL',\n                auto_increment='AUTO_INCREMENT' if column['pk'] else ''\n            )\n            if column['pk']:\n                primary_key = column['name']\n        sql += ' PRIMARY KEY (`{}`) ) ENGINE = InnoDB CHARACTER SET utf8'.format(primary_key)\n        try:\n            self._mysql_cur.execute(sql)\n            self._mysql.commit()\n        except mysql.connector.Error as err:\n            print('_create_table failed creating table {}: {}'.format(table_name, err))\n            exit(1)\n\n    def transfer(self):\n        self._sqlite_cur.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'\")\n        for row in self._sqlite_cur.fetchall():\n            table = dict(row)\n            # create the table\n            self._create_table(table['name'])\n            # populate it\n            print('Transferring table {}'.format(table['name']))\n            self._sqlite_cur.execute('SELECT * FROM \"{}\"'.format(table['name']))\n            columns = [column[0] for column in self._sqlite_cur.description]\n            try:\n                self._mysql_cur.executemany(\"INSERT IGNORE INTO `{table}` ({fields}) VALUES ({placeholders})\".format(\n                    table=table['name'],\n                    fields=('`{}`, ' * len(columns)).rstrip(' ,').format(*columns),\n                    placeholders=('%s, ' * len(columns)).rstrip(' ,')\n                ), (tuple(data) for data in self._sqlite_cur.fetchall()))\n                self._mysql.commit()\n            except mysql.connector.Error as err:\n                print('_insert_table_data failed inserting data into table {}: {}'.format(table['name'], err))\n                exit(1)\n        print('Done!')\n\n\ndef main():\n    \"\"\" For use in standalone terminal form \"\"\"\n    import sys, argparse\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--sqlite-file', dest='sqlite_file', default=None, help='SQLite3 db file')\n    parser.add_argument('--mysql-user', dest='mysql_user', default=None, help='MySQL user')\n    parser.add_argument('--mysql-password', dest='mysql_password', default=None, help='MySQL password')\n    parser.add_argument('--mysql-database', dest='mysql_database', default=None, help='MySQL host')\n    parser.add_argument('--mysql-host', dest='mysql_host', default='localhost', help='MySQL host')\n    parser.add_argument('--mysql-integer-type', dest='mysql_integer_type', default='int(11)', help='MySQL default integer field type')\n    parser.add_argument('--mysql-string-type', dest='mysql_string_type', default='varchar(300)', help='MySQL default string field type')\n    args = parser.parse_args()\n\n    if len(sys.argv) == 1:\n        parser.print_help()\n        exit(1)\n\n    converter = SQLite3toMySQL(\n        sqlite_file=args.sqlite_file,\n        mysql_user=args.mysql_user,\n        mysql_password=args.mysql_password,\n        mysql_database=args.mysql_database,\n        mysql_host=args.mysql_host,\n        mysql_integer_type=args.mysql_integer_type,\n        mysql_string_type=args.mysql_string_type\n    )\n    converter.transfer()\n\nif __name__ == '__main__':\n    main()\n</code>", "<code>&lt;?php\n$sq = new SQLite3( 'sqlite3.db' );\n\n$tables = $sq-&gt;query( 'SELECT name FROM sqlite_master WHERE type=\"table\"' );\n\nwhile ( $table = $tables-&gt;fetchArray() ) {\n    $table = current( $table );\n    $result = $sq-&gt;query( sprintf( 'SELECT * FROM %s', $table ) );\n\n    if ( strpos( $table, 'sqlite' ) !== false )\n        continue;\n\n    printf( \"-- %s\\n\", $table );\n    while ( $row = $result-&gt;fetchArray( SQLITE3_ASSOC ) ) {\n        $values = array_map( function( $value ) {\n            return sprintf( \"'%s'\", mysql_real_escape_string( $value ) );\n        }, array_values( $row ) );\n        printf( \"INSERT INTO `%s` VALUES( %s );\\n\", $table, implode( ', ', $values ) );\n    }\n}\n</code>", "<code>INSERT INTO</code>", "<code>CREATE TABLE</code>", "<code>AUTOINCREMENT</code>", "<code>python parse_sqlite_sql.py export.sql</code>", "<code>export.sql.schema.sql</code>", "<code>export.sql.data.sql</code>", "<code>echo \".dump\" | sqlite3 /tmp/db.sqlite &gt; db.sql\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "django-models", "slug"], "creation_date": 1231476746, "body_markdown": "When I read Django code I often see in models what is called a &quot;slug&quot;. I am not quite sure what this is, but I do know it has something to do with URLs. How and when is this slug-thing supposed to be used? \r\n\r\n(I have read its definition in [this glossary][1].)\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/glossary/\r\n\r\n", "last_edit_date": 1427136937, "up_vote_count": 372, "link": "https://stackoverflow.com/questions/427102/what-is-a-slug-in-django", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1231476970, "answer_id": 427111, "path": "stack.django.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1231476970, "body_markdown": "From [here][1].\r\n&gt; \u201cSlug\u201d is a newspaper term, but what\r\n&gt; it means here is the final bit of the\r\n&gt; URL. For example, a post with the\r\n&gt; title, \u201cA bit about Django\u201d would\r\n&gt; become, \u201cbit-about-django\u201d\r\n&gt; automatically (you can, of course,\r\n&gt; change it easily if you don\u2019t like the\r\n&gt; auto-generated slug).\r\n\r\n\r\n  [1]: http://jeffcroft.com/blog/2006/may/02/django-non-programmers/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1231477368, "answer_id": 427125, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1231477368, "last_edit_date": 1495542395, "body_markdown": "It&#39;s a descriptive part of the URL that is there to make it more human descriptive, but without necessarily being required by the web server - in https://stackoverflow.com/questions/427102/in-django-what-is-a-slug the slug is &#39;in-django-what-is-a-slug&#39;, but the slug is not used to determine the [page served][1] (on this site at least)\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/427102/different-slug-same-content"}, {"tags": [], "down_vote_count": 0, "creation_date": 1231479107, "answer_id": 427160, "path": "stack.django.answer", "score": 474, "up_vote_count": 474, "is_accepted": true, "last_activity_date": 1464889767, "last_edit_date": 1464889767, "body_markdown": "It&#39;s a way of generating a valid URL, generally using data already obtained. For instance, using the title of an article to generate a URL. I&#39;d advise to generate the slug, using a function, given a title (or other piece of data), rather than setting it manually.\r\n\r\nAn example:\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;title&gt; The 46 Year Old Virgin &lt;/title&gt;\r\n    &lt;content&gt; A silly comedy movie &lt;/content&gt;\r\n    &lt;slug&gt; the-46-year-old-virgin &lt;/slug&gt;\r\n\r\nNow let&#39;s pretend that we have a Django model such as:\r\n\r\n&lt;!-- language: lang-python --&gt;\r\n\r\n    class Article(models.Model):\r\n        title = models.CharField(max_length=100)\r\n        content = models.TextField(max_length=1000)\r\n        slug = models.SlugField(max_length=40)\r\n\r\nHow would you reference this object with a URL, with a meaningful name? You could use Article.id so the URL would look like this:\r\n\r\n    www.example.com/article/23\r\n\r\nOr, you could reference the title like so:\r\n\r\n    www.example.com/article/The 46 Year Old Virgin\r\n\r\nProblem is, spaces aren&#39;t valid in URLs, they need to be replaced by `%20` which is ugly, making it the following:\r\n\r\n    www.example.com/article/The%2046%20Year%20Old%20Virgin\r\n\r\nThat&#39;s not solving our meaningful URL. Wouldn&#39;t this be better:\r\n\r\n    www.example.com/article/the-46-year-old-virgin\r\n\r\nThat&#39;s a slug. `the-46-year-old-virgin`. All letters are downcased and spaces are replaced by hyphens `-`. See the URL of this very webpage for an example!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1231480866, "answer_id": 427201, "path": "stack.django.answer", "score": 43, "up_vote_count": 43, "is_accepted": false, "last_activity_date": 1231480866, "body_markdown": "As a bit of history, the term &#39;slug&#39; comes from the world of newspaper editing.\r\n\r\nIt&#39;s the informal name given to a story during the production process. As the story winds its torturous path from beat reporter through to editor through to the &quot;printing presses&quot;, this is the name it is referenced by, e.g., &quot;Have you fixed those errors in the &#39;russia-cuts-europe-gas&#39; story?&quot;.\r\n\r\nDjango uses it as part of the URL to locate the story, an example being `www.mysite.com/archives/russia-cuts-europe-gas`.\r\n"}, {"tags": [], "down_vote_count": 3, "creation_date": 1250351133, "answer_id": 1282172, "path": "stack.django.answer", "score": 79, "up_vote_count": 82, "is_accepted": false, "last_activity_date": 1515484625, "last_edit_date": 1515484625, "body_markdown": "If I may provide some historical context :\r\n\r\nThe term **&quot;slug&quot;** has to do with casting metal\u2014lead, in this case\u2014out of which the press fonts were made. Every paper then had its fonts factory regularly re-melted and recast in fresh molds, since after many prints they became worn out. Apprentices like me started their career there, and went all the way to the top (not anymore).\r\n\r\nTypographs had to compose the text of an article in a backward manner with lead characters stacked in a wise. So at printing time the letters would be straight on the paper. All typographs could read the newspaper mirrored as fast as the printed one. Therefore the slugs, (like snails) also the slow stories (the last to be fixed) were many on the bench waiting, solely identified by their fist letters, mostly the whole title generally more readable. Some &quot;hot&quot; news were waiting there on the bench, for possible last minute correction, (Evening paper) before last assembly and definitive printing.\r\n\r\nDjango emerged from the offices of the Lawrence journal in Kansas. Where probably some printing jargon still lingers. **A-django-enthusiast-&amp;-friendly-old-slug-boy-from-France.**"}, {"tags": [], "down_vote_count": 1, "creation_date": 1358772164, "answer_id": 14438884, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1358772164, "body_markdown": "Also auto slug at django-admin. Added at ModelAdmin:\r\n\r\n    prepopulated_fields = {&#39;slug&#39;: (&#39;title&#39;, )}\r\n\r\nAs here:\r\n\r\n    class ArticleAdmin(admin.ModelAdmin):\r\n        list_display = (&#39;title&#39;, &#39;slug&#39;)\r\n        search_fields = (&#39;content&#39;, )\r\n        \r\n        prepopulated_fields = {&#39;slug&#39;: (&#39;title&#39;, )}"}, {"tags": [], "down_vote_count": 0, "creation_date": 1410525130, "answer_id": 25808438, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1444949811, "last_edit_date": 1444949811, "body_markdown": "Slug is a newspaper term. A slug is a short label for something, containing only letters, numbers, underscores or hyphens.They\u2019re generally used in URLs.(as in django docs)\r\n\r\nA slug field in Django is used to store and generate valid [URLs][1] for your dynamically created web pages.\r\n\r\nJust like the way you added this question on Stack&amp;nbsp;Overflow and a dynamic page is generated and when you see in address bar you will see your question title with &quot;-&quot; in place of the spaces. That&#39;s exactly the job of a slug field.\r\n\r\n![Enter image description here][2]\r\n\r\nThe title entered by you was something like this -&gt; What is a \u201cslug\u201d in Django?\r\n\r\n&amp;\r\n\r\nOn storing it into a slug, filed results it into\r\n     what-is-a-slug-in-django   (see URL of this page)\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Uniform_resource_locator\r\n  [2]: http://i.stack.imgur.com/hUr5J.jpg\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1477937684, "answer_id": 40348063, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1477966076, "last_edit_date": 1477966076, "body_markdown": "Slug is a URL friendly short label for specific content. It only contain Letters, Numbers, Underscores or Hyphens. Slugs are commonly save with the respective content and it pass as a URL string.\r\n\r\n\r\nSlug can create using SlugField\r\n\r\nEx:\r\n\r\n    Class Article(models.Model):\r\n        title = models.CharField(max_length=100)\r\n        slug = models.SlugField(max_length=100)\r\n\r\n\r\nIf you want to use title as slug django have a simple function called `slugify`\r\n\r\n    from django.template.defaultfilters import slugify\r\n    \r\n    class Article(models.Model):\r\n        title = models.CharField(max_length=100)\r\n\r\n        def slug(self):\r\n            return slugify(self.title)\r\n\r\nIf it needs uniqueness add `unique=True` in slug field.\r\n\r\nfor instance, from the previous example:\r\n\r\n    Class Article(models.Model):\r\n        title = models.CharField(max_length=100)\r\n        slug = models.SlugField(max_length=100, unique=True)\r\n\r\nAre you lazy to do slug process ? don&#39;t worry, this plugin will help you.\r\n[django-autoslug][1]\r\n\r\n\r\n  [1]: https://github.com/neithere/django-autoslug\r\n"}], "title": "What is a &quot;slug&quot; in Django?", "view_count": 94034, "answer_count": 8, "code_snippet": ["<code>&lt;title&gt; The 46 Year Old Virgin &lt;/title&gt;\n&lt;content&gt; A silly comedy movie &lt;/content&gt;\n&lt;slug&gt; the-46-year-old-virgin &lt;/slug&gt;\n</code>", "<code>class Article(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField(max_length=1000)\n    slug = models.SlugField(max_length=40)\n</code>", "<code>www.example.com/article/23\n</code>", "<code>www.example.com/article/The 46 Year Old Virgin\n</code>", "<code>%20</code>", "<code>www.example.com/article/The%2046%20Year%20Old%20Virgin\n</code>", "<code>www.example.com/article/the-46-year-old-virgin\n</code>", "<code>the-46-year-old-virgin</code>", "<code>-</code>", "<code>www.mysite.com/archives/russia-cuts-europe-gas</code>", "<code>prepopulated_fields = {'slug': ('title', )}\n</code>", "<code>class ArticleAdmin(admin.ModelAdmin):\n    list_display = ('title', 'slug')\n    search_fields = ('content', )\n\n    prepopulated_fields = {'slug': ('title', )}\n</code>", "<code>Class Article(models.Model):\n    title = models.CharField(max_length=100)\n    slug = models.SlugField(max_length=100)\n</code>", "<code>slugify</code>", "<code>from django.template.defaultfilters import slugify\n\nclass Article(models.Model):\n    title = models.CharField(max_length=100)\n\n    def slug(self):\n        return slugify(self.title)\n</code>", "<code>unique=True</code>", "<code>Class Article(models.Model):\n    title = models.CharField(max_length=100)\n    slug = models.SlugField(max_length=100, unique=True)\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "ide"], "creation_date": 1223310498, "body_markdown": "I have done a little Django development, but it has all been in a text editor. I was curious what more advanced development tools others are using in their Django development.\r\n\r\nI am used to using Visual Studio for development and really like the [IntelliSense][1], code completion, and file organization it provides and would like to find something (or a combination of tools) that would provide some of this in the Django/Python environment.\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Intelligent_code_completion#IntelliSense\r\n", "last_edit_date": 1504440191, "up_vote_count": 244, "link": "https://stackoverflow.com/questions/175044/django-development-ide", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1223310616, "answer_id": 175053, "path": "stack.django.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1301760174, "last_edit_date": 1301760174, "body_markdown": "Eclipse has the [PyDev][1] plugin for python development.  Unfortunately, I&#39;m not sure how well it integrates with Django.\r\n\r\n\r\n  [1]: http://pydev.org/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1223310832, "answer_id": 175065, "path": "stack.django.answer", "score": 41, "up_vote_count": 41, "is_accepted": false, "last_activity_date": 1223310832, "body_markdown": "I use Komodo Edit.  Check out the [Open Komodo][1] Edit.\r\n\r\n\r\n  [1]: http://www.openkomodo.com/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1223310940, "answer_id": 175077, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1504440852, "last_edit_date": 1504440852, "body_markdown": "As far as I know there is not &quot;an IDE&quot; for Django, but there are some IDEs that support Django right out of the box, specifically the Django syntax for templates.\r\n\r\nThe name is [Komodo][1], and it has a lot of features, but it&#39;s not cheap. If you are not worried about source control or debugging then there is a free version called [Komodo Edit][2].\r\n\r\n  [1]: http://www.activestate.com/Products/komodo_ide/index.mhtml\r\n  [2]: https://en.wikipedia.org/wiki/Komodo_Edit\r\n"}, {"tags": [], "down_vote_count": 3, "creation_date": 1223311685, "answer_id": 175130, "path": "stack.django.answer", "score": 100, "up_vote_count": 103, "is_accepted": true, "last_activity_date": 1504440685, "last_edit_date": 1504440685, "body_markdown": "I use Eclipse and a plain vanilla [PyDev][1]. There isn&#39;t any specific Django functionality. The best I came up with was setting up a run profile to run the development web server.\r\n\r\nIf you add the web tools project (WTP), you&#39;ll get syntax highlighting in your templates, but nothing that relates to the specific template language. PyDev is a decent plugin, and if you are already familiar with Eclipse and use it for other projects it is a good way to go.\r\n\r\nI recall NetBeans starting to get Python support, but I have no idea where that is right now. Lots of people rave about NetBeans&amp;nbsp;6, but in the Java world Eclipse still reigns as the king of the OSS IDEs.\r\n\r\n  [1]: https://en.wikipedia.org/wiki/PyDev\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1223312182, "answer_id": 175175, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1504441725, "last_edit_date": 1504441725, "body_markdown": "I really like [E Text Editor][1] as it&#39;s pretty much a &quot;port&quot; of [TextMate][2] to Windows. Obviously Django being based on Python, the support for auto-completion is limited (there&#39;s nothing like intellisense that would require a dedicated IDE with knowledge of the intricacies of each library), but the use of snippets and &quot;word-completion&quot; helps a lot. Also, it has support for both Django Python files and the template files, and CSS, HTML, etc.\r\n\r\nI&#39;ve been using E Text Editor for a long time now, and I can tell you that it beats both PyDev and Komodo Edit hands down when it comes to working with Django. For other kinds of projects, PyDev and Komodo might be more adequate though.\r\n\r\n  [1]: https://en.wikipedia.org/wiki/E_Text_Editor\r\n  [2]: http://en.wikipedia.org/wiki/TextMate\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1223313600, "answer_id": 175263, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1223313600, "body_markdown": "I&#39;ve also had good results with Eclipse and Pydev. Although I still require a shell opened to the project directory to run `manage.py` commands. I&#39;ve also been using it with the Bazaar plugin for revision control and syncing code with the server.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1223315071, "answer_id": 175372, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1370097298, "last_edit_date": 1370097298, "body_markdown": "I use Kate (KDE Advanced Text Editor) for most of my development, including Django. It has both a Python and Django Templates syntax higlighting.  I switch to Quanta+ when a significant part of the project involves HTML.\r\n\r\nSince it uses Kate&#39;s KPart, it&#39;s just as good for editing the Python parts, and for the HTML templates i have the whole Quanta+ tools, while still highligting Django-specific tags.\r\n\r\nUpdate 2013:  Unfortunately, Quanta+ has been dead for years now, and there&#39;s no hope that it will ever be resurrected.  Also, there&#39;s no other usable HTML editor out there, so it&#39;s Kate all the time now."}, {"tags": [], "down_vote_count": 0, "creation_date": 1228566470, "answer_id": 346223, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1504441919, "last_edit_date": 1504441919, "body_markdown": "[I use Kate as well][1]. Kate&#39;s simplicity is its biggest feature. It doesn&#39;t get in your way. (This is of course highly subjective opinion.)\r\n\r\nKate includes a Python code browser plugin. But it isn&#39;t useful IMO. No automatic updates when you change the code/view. Also when you update, the whole tree is collapsed, and you have to expand it again yourself. Too many clicks.\r\n\r\nInstead, I use the Source Browser plugin that comes with [P&#226;t&#233;][2]. It does cause Kate to freeze temporarily sometimes, but no crashes or anything of that sort so far.\r\n\r\nShameless blog plug: [more on using Django with Kate (P&#226;t&#233;)][3]\r\n\r\n  [1]: https://stackoverflow.com/questions/175044/django-development-ide#175372\r\n  [2]: http://paul.giannaros.org/pate/\r\n  [3]: http://www.muhuk.com/2008/11/extending-kate-with-pate/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1235564166, "answer_id": 585756, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1235564166, "body_markdown": "[Editra][1] supports Django Template Language syntax highlighting. You can configure it either as a better Notepad or a basic IDE.\r\n\r\n\r\n  [1]: http://editra.org/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1237178698, "answer_id": 649288, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1504442120, "last_edit_date": 1504442120, "body_markdown": "I have consistently used Vim or Kate, but I would prefer a full-blown IDE. Given it is not as heavy as Visual Studio.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1237179056, "answer_id": 649296, "path": "stack.django.answer", "score": 21, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1237179056, "body_markdown": "I am beginning to enjoy working with [Aptana Studios][1] + PyDev (and other) plugins for all sorts of web application development. As you can tell, it is built on top of the powerful Eclipse, but is tailor-designed to focus on web application development.\r\n\r\n\r\n  [1]: http://aptana.com/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1238034912, "answer_id": 684334, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1504442226, "last_edit_date": 1504442226, "body_markdown": "I made a blog post about [NetBeans&#39; new and upcoming support for Django][1]. When paired with its already fantastic Python, JavaScript, HTML and CSS support, it&#39;s a strong candidate in my mind!\r\n\r\n  [1]: http://kubasik.net/blog/2009/03/12/finally-a-django-ide-with-real-code-completion-and-template-support/\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1259743431, "answer_id": 1831510, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1504442277, "last_edit_date": 1504442277, "body_markdown": "Well, I&#39;ve been using my own one. Recently they released an alpha version. [Here it is at pfaide.com/][1].\r\n\r\n  [1]: http://pfaide.com\r\n  [2]: http://pfaide.com/static/scrshot.png\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1260297937, "answer_id": 1869032, "path": "stack.django.answer", "score": 43, "up_vote_count": 43, "is_accepted": false, "last_activity_date": 1504442462, "last_edit_date": 1504442462, "body_markdown": "I use Vim:\r\n\r\n[http://github.com/skyl/vim-config-python-ide][1]\r\n\r\n[UPDATE]\r\n\r\n[Sublime Text 2][2] is pretty awesome. It supports a lot of Vim commands if you want them: *[Vintage Mode][3]*\r\n\r\nIt has a nice package manager: http://wbond.net/sublime_packages/package_control\r\n\r\nI use these packages so far:\r\n\r\nDjaneiro\r\n\r\nSetDjangoSyntax\r\n\r\nCoffeeScript\r\n\r\nSublimeLinter\r\n\r\nTheme - Soda\r\n\r\nSideBarEnhancements\r\n\r\nI still love Vim but ... did I mention that Sublime Text plugins are written in Python?\r\n\r\n  [1]: http://github.com/skyl/vim-config-python-ide\r\n  [2]: https://en.wikipedia.org/wiki/Sublime_Text#Version_2\r\n  [3]: http://www.sublimetext.com/docs/2/vintage.html\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1261045243, "answer_id": 1920742, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1368715675, "last_edit_date": 1368715675, "body_markdown": "**[NetBeans for Python](http://wiki.netbeans.org/Python70Roadmap)** is my current favorite (lighter and so much easier to install than Eclipse I found). Supports simple refactoring, autocompletion, errors/warnings...\r\n\r\n**[Eclipse](http://www.eclipse.org/) [Aptana](http://www.aptana.com/) [PyDev](http://pydev.org/index.html)** probably one of the most complete free IDE nowadays (haven&#39;t tested a lot)\r\n\r\n**[Wingware Python IDE](http://www.wingware.com/python)** a commercial IDE, which has some Django-specific project setup features the ability to debug Django template files.\r\n\r\n**[IntelliJ IDEA](http://www.jetbrains.com/idea/)** *Ultimate Edition* another commercial IDE which has also a [plugin for Python]() that is under heavy development. I saw some demo which look very promising on the auto-completion (for templates and Python).\r\n\r\n**[Vim](http://www.vim.org/)** which I still use a small touch-fix application. See also: [Extra tweaks for Django](http://code.djangoproject.com/wiki/UsingVimWithDjango)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1262164620, "answer_id": 1979216, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1504443862, "last_edit_date": 1504443862, "body_markdown": "I like Eclipse + [PyDev][1] and/or [eric][2], myself. The new version of PyDev has some pretty awesome code completion support.\r\n\r\nSince I *only* use Eclipse for PyDev, I use a slim install of just the Platform Runtime Binary + PyDev + Subclipse. \r\n\r\n  [1]: https://en.wikipedia.org/wiki/PyDev\r\n  [2]: https://en.wikipedia.org/wiki/Eric_(software)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1268680908, "answer_id": 2449813, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1504444059, "last_edit_date": 1504444059, "body_markdown": "**TextMate** with the Django and django-html bundles installed gives you syntax highlighting and great extensibility. It is lightweight and fun to use.\r\n\r\n[Here][1] is a link to a code completion project for TextMate with Python (which I haven&#39;t used myself). As for &quot;intellisense&quot; (which I understand to be inline-doc reference), TextMate has that too.\r\n\r\n  [1]: http://github.com/orestis/pysmell\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1268858701, "answer_id": 2465754, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1504444146, "last_edit_date": 1504444146, "body_markdown": "The Wingware editor from http://www.wingware.com is Python-specific with very good auto-completion for Python/Django/Zope, etc.\r\n\r\nIt has a built in Python shell to run snippets (or select and run) and support for Mercurial/Git, etc. and a built-in unittest/nose/doctest test runner. It&#39;s commercial though, but as it is written in Python, it&#39;s cross platform.\r\n\r\nI bought it a while ago, and thought it looked dorky, but I&#39;ve tried them all and keep coming back. Caveat that I am a Windows guy with no Emacs or Vim skills, so leveraging that was not an option. And the Mac version requires X Window and seems to be more glitchy.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1268860386, "answer_id": 2465965, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1504444524, "last_edit_date": 1504444524, "body_markdown": "TextMate, Firebug, and [pdb][1]. The latter one saved me gazillion of times :)\r\n\r\n  [1]: https://docs.python.org/3/library/pdb.html\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1271309686, "answer_id": 2642961, "path": "stack.django.answer", "score": 178, "up_vote_count": 178, "is_accepted": false, "last_activity_date": 1512634028, "last_edit_date": 1512634028, "body_markdown": "There is [PyCharm][1] from JetBrains which supports Django and [Google Apps][2]. It looks promising.\r\n\r\nNote: You need to buy a license for the Professional version if you want Django  support. The Community version desn&#39;t support Django.\r\n\r\n  [1]: http://www.jetbrains.com/pycharm/index.html\r\n  [2]: http://en.wikipedia.org/wiki/Google_Apps\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1281760858, "answer_id": 3482031, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1342529676, "last_edit_date": 1342529676, "body_markdown": "Ulipad is a good one.\r\nhttp://code.google.com/p/ulipad/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1289392916, "answer_id": 4144561, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1504444830, "last_edit_date": 1504444830, "body_markdown": "You guys should checkout [PyCharm][1]! It is the first decent Django IDE.\r\n\r\n  [1]: http://www.jetbrains.com/pycharm/index.html\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1290815422, "answer_id": 4289288, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1504444957, "last_edit_date": 1504444957, "body_markdown": "I have used Eclipse with PyDev and PyCharm. PyCharm is definitely the best IDE for Django/Python I have tried. It does proper template highlighting and auto-completion for all objects. It also does cross-file referencing.\r\n\r\nIt&#39;s quite expensive, but definitely the best Django IDE I have tried. You can try a 30 day evaluation at http://www.jetbrains.com/pycharm/download/.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1296144801, "answer_id": 4818801, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1504445415, "last_edit_date": 1504445415, "body_markdown": "[PyCharm][1]. It is best the IDE for Python,Django, and web development I&#39;ve tried so far. It is totally worth the money.\r\n\r\n  [1]: https://en.wikipedia.org/wiki/PyCharm\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1296651932, "answer_id": 4874792, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1504445472, "last_edit_date": 1504445472, "body_markdown": "*If* you like Vim as an editor, here are some suggestions on how to tune it (up to the point of a full fledged IDE) for Django development: http://code.djangoproject.com/wiki/UsingVimWithDjango.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1312784760, "answer_id": 6978451, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1504445530, "last_edit_date": 1504445530, "body_markdown": "[Geany][1]\r\n\r\nIt is GTK2 based, fast, lightweight, available for Linux and Windows.\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Geany\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1315534593, "answer_id": 7356494, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1315534593, "body_markdown": "There is an actual Python extension for Visual Studio:  http://pytools.codeplex.com/.  It&#39;s absolutely fantastic.  It feels the same as if I were coding in any native Visual Studio language.  The extension is even compatabile with Django.  And best of all:  it&#39;s totally free.  Even for Visual Studio, it only requires the [Visual Studio Shell][1] to work, which is completely free.\r\n\r\n\r\n  [1]: http://www.microsoft.com/download/en/details.aspx?id=115"}, {"tags": [], "down_vote_count": 0, "creation_date": 1318509216, "answer_id": 7754181, "path": "stack.django.answer", "score": 32, "up_vote_count": 32, "is_accepted": false, "last_activity_date": 1318509216, "body_markdown": "[Sublime][1]\r\n\r\n![sub][2]\r\n\r\n\r\n  [1]: http://www.sublimetext.com/2\r\n  [2]: http://i.stack.imgur.com/Ke8dn.png"}, {"tags": [], "down_vote_count": 1, "creation_date": 1332336386, "answer_id": 9805571, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1504446039, "last_edit_date": 1504446039, "body_markdown": "Now you can also use Visual Studio 2010. Here&#39;s how:\r\n\r\n - Download and install [Python Tools for Visual Studio][1].\r\n - Create a new project from existing code (menu *File* \u2192 *New* \u2192 *Project From Existing Code...*)\r\n - Specify your Django project folder and use the defaults.\r\n - Right-click on manage.py and choose *Set as Startup File*.\r\n - In your project properties *Debug* tab, add &quot;runserver&quot; in *Script Arguments*.\r\n - You can set break points, and attach to the Python process for debugging. If you want to debug without having to &quot;attach to process,&quot; use &quot;runserver --noreload&quot; in your script arguments. However, the &quot;--noreload&quot; means you&#39;ll have to stop and restart the Django development web server manually (to recognize your code changes).\r\n\r\nThis is a nice setup if you already use Visual Studio.\r\n\r\nPython Tools has been updated. It has built in support for Django now.\r\n\r\n  [1]: http://pytools.codeplex.com/ &quot;Python Tools for Visual Studio&quot;\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1356838042, "answer_id": 14088056, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1504446101, "last_edit_date": 1504446101, "body_markdown": "[PyCharm][1], definitely. I tried them all (almost), but PyCharm is the one I found most useful for any heavy development.\r\n\r\nFor simple, one time, scripts I use whatever comes to mind (TextMate, Vim, Emacs, TextWrangler, etc., you name it).\r\n\r\n  [1]: https://en.wikipedia.org/wiki/PyCharm\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1368697026, "answer_id": 16583885, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1504446166, "last_edit_date": 1504446166, "body_markdown": "The [Wing IDE][1] is a good IDE to use!\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Wing_IDE\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1384181273, "answer_id": 19909120, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1504446238, "last_edit_date": 1504446238, "body_markdown": "[Ninja-IDE][1].\r\n\r\nCheck this: [Ninja-IDE Django Plugin][2]\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Ninja-IDE\r\n  [2]: http://ninja-ide.org/plugins/12/\r\n"}], "title": "Django development IDE", "view_count": 156344, "answer_count": 32, "code_snippet": ["<code>manage.py</code>"], "path": "stack.django"}, {"tags": ["python", "camelcasing"], "creation_date": 1248394922, "body_markdown": "Example:\r\n\r\n    &gt;&gt;&gt; convert(&#39;CamelCase&#39;)\r\n    &#39;camel_case&#39;\r\n\r\n", "last_edit_date": 1456233774, "up_vote_count": 310, "link": "https://stackoverflow.com/questions/1175208/elegant-python-function-to-convert-camelcase-to-snake-case", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1248395278, "answer_id": 1175221, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1248395278, "body_markdown": "Not in the standard library, but I found [this script][1] that appears to contain the functionality you need.\r\n\r\n\r\n  [1]: http://pypi.python.org/pypi/from-camel/0.2.0"}, {"tags": [], "down_vote_count": 4, "creation_date": 1248398440, "answer_id": 1175366, "path": "stack.django.answer", "score": 3, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1248398857, "last_edit_date": 1248398857, "body_markdown": "**For the fun of it:**\r\n\r\n    &gt;&gt;&gt; def un_camel(input):\r\n    ...     output = [input[0].lower()]\r\n    ...     for c in input[1:]:\r\n    ...             if c in (&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;):\r\n    ...                     output.append(&#39;_&#39;)\r\n    ...                     output.append(c.lower())\r\n    ...             else:\r\n    ...                     output.append(c)\r\n    ...     return str.join(&#39;&#39;, output)\r\n    ...\r\n    &gt;&gt;&gt; un_camel(&quot;camel_case&quot;)\r\n    &#39;camel_case&#39;\r\n    &gt;&gt;&gt; un_camel(&quot;CamelCase&quot;)\r\n    &#39;camel_case&#39;\r\n\r\nOr, more for the fun of it:\r\n\r\n    &gt;&gt;&gt; un_camel = lambda i: i[0].lower() + str.join(&#39;&#39;, (&quot;_&quot; + c.lower() if c in &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; else c for c in i[1:]))\r\n    &gt;&gt;&gt; un_camel(&quot;camel_case&quot;)\r\n    &#39;camel_case&#39;\r\n    &gt;&gt;&gt; un_camel(&quot;CamelCase&quot;)\r\n    &#39;camel_case&#39;\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1248400107, "answer_id": 1175421, "path": "stack.django.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1248400107, "body_markdown": "    &#39;&#39;.join(&#39;_&#39;+c.lower() if c.isupper() else c for c in &quot;DeathToCamelCase&quot;).strip(&#39;_&#39;)\r\n    re.sub(&quot;(.)([A-Z])&quot;, r&#39;\\1_\\2&#39;, &#39;DeathToCamelCase&#39;).lower()"}, {"tags": [], "down_vote_count": 0, "creation_date": 1248401116, "answer_id": 1175443, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1248401744, "last_edit_date": 1248401744, "body_markdown": "A horrendous example using regular expressions (you could *easily* clean this up :) ):\r\n\r\n    def f(s):\r\n        return s.group(1).lower() + &quot;_&quot; + s.group(2).lower()\r\n    \r\n    p = re.compile(&quot;([A-Z]+[a-z]+)([A-Z]?)&quot;)\r\n    print p.sub(f, &quot;CamelCase&quot;)\r\n    print p.sub(f, &quot;getHTTPResponseCode&quot;)\r\n\r\nWorks for getHTTPResponseCode though!\r\n\r\nAlternatively, using lambda:\r\n\r\n    p = re.compile(&quot;([A-Z]+[a-z]+)([A-Z]?)&quot;)\r\n    print p.sub(lambda x: x.group(1).lower() + &quot;_&quot; + x.group(2).lower(), &quot;CamelCase&quot;)\r\n    print p.sub(lambda x: x.group(1).lower() + &quot;_&quot; + x.group(2).lower(), &quot;getHTTPResponseCode&quot;)\r\n\r\nEDIT: It should also be pretty easy to see that there&#39;s room for improvement for cases like &quot;Test&quot;, because the underscore is unconditionally inserted."}, {"tags": [], "down_vote_count": 3, "creation_date": 1248401368, "answer_id": 1175451, "path": "stack.django.answer", "score": 4, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1248401724, "last_edit_date": 1248401724, "body_markdown": "Here&#39;s my solution:\r\n\r\n    def un_camel(text):\r\n        &quot;&quot;&quot; Converts a CamelCase name into an under_score name. \r\n        \r\n            &gt;&gt;&gt; un_camel(&#39;CamelCase&#39;)\r\n            &#39;camel_case&#39;\r\n            &gt;&gt;&gt; un_camel(&#39;getHTTPResponseCode&#39;)\r\n            &#39;get_http_response_code&#39;\r\n        &quot;&quot;&quot;\r\n        result = []\r\n        pos = 0\r\n        while pos &lt; len(text):\r\n            if text[pos].isupper():\r\n                if pos-1 &gt; 0 and text[pos-1].islower() or pos-1 &gt; 0 and \\\r\n                pos+1 &lt; len(text) and text[pos+1].islower():\r\n                    result.append(&quot;_%s&quot; % text[pos].lower())\r\n                else:\r\n                    result.append(text[pos].lower())\r\n            else:\r\n                result.append(text[pos])\r\n            pos += 1\r\n        return &quot;&quot;.join(result)\r\n\r\n\r\nIt supports those corner cases discussed in the comments. For instance, it&#39;ll convert `getHTTPResponseCode` to `get_http_response_code` like it should."}, {"tags": [], "down_vote_count": 4, "creation_date": 1248416713, "answer_id": 1176023, "path": "stack.django.answer", "score": 510, "up_vote_count": 514, "is_accepted": true, "last_activity_date": 1421829497, "last_edit_date": 1421829497, "body_markdown": "This is pretty thorough:\r\n\r\n    def convert(name):\r\n        s1 = re.sub(&#39;(.)([A-Z][a-z]+)&#39;, r&#39;\\1_\\2&#39;, name)\r\n        return re.sub(&#39;([a-z0-9])([A-Z])&#39;, r&#39;\\1_\\2&#39;, s1).lower()\r\n\r\nWorks with all these (and doesn&#39;t harm already-un-cameled versions):\r\n\r\n    &gt;&gt;&gt; convert(&#39;CamelCase&#39;)\r\n    &#39;camel_case&#39;\r\n    &gt;&gt;&gt; convert(&#39;CamelCamelCase&#39;)\r\n    &#39;camel_camel_case&#39;\r\n    &gt;&gt;&gt; convert(&#39;Camel2Camel2Case&#39;)\r\n    &#39;camel2_camel2_case&#39;\r\n    &gt;&gt;&gt; convert(&#39;getHTTPResponseCode&#39;)\r\n    &#39;get_http_response_code&#39;\r\n    &gt;&gt;&gt; convert(&#39;get2HTTPResponseCode&#39;)\r\n    &#39;get2_http_response_code&#39;\r\n    &gt;&gt;&gt; convert(&#39;HTTPResponseCode&#39;)\r\n    &#39;http_response_code&#39;\r\n    &gt;&gt;&gt; convert(&#39;HTTPResponseCodeXYZ&#39;)\r\n    &#39;http_response_code_xyz&#39;\r\n\r\nOr if you&#39;re going to call it a zillion times, you can pre-compile the regexes:\r\n\r\n    first_cap_re = re.compile(&#39;(.)([A-Z][a-z]+)&#39;)\r\n    all_cap_re = re.compile(&#39;([a-z0-9])([A-Z])&#39;)\r\n    def convert(name):\r\n        s1 = first_cap_re.sub(r&#39;\\1_\\2&#39;, name)\r\n        return all_cap_re.sub(r&#39;\\1_\\2&#39;, s1).lower()\r\n\r\nDon&#39;t forget to import the regular expression module\r\n\r\n    import re"}, {"tags": [], "down_vote_count": 1, "creation_date": 1300475144, "answer_id": 5356672, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1300475144, "body_markdown": "Wow I just stole this from django snippets. ref http://djangosnippets.org/snippets/585/\r\n\r\nPretty elegant \r\n\r\n    camelcase_to_underscore = lambda str: re.sub(&#39;(((?&lt;=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))&#39;, &#39;_\\\\1&#39;, str).lower().strip(&#39;_&#39;)\r\n\r\n    \r\n\r\nExample:\r\n\r\n    camelcase_to_underscore(&#39;ThisUser&#39;)\r\n\r\nReturns:\r\n\r\n    &#39;this_user&#39;\r\n\r\n\r\n\r\n\r\n\r\n\r\n "}, {"tags": [], "down_vote_count": 0, "creation_date": 1317280771, "answer_id": 7593794, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1461096508, "last_edit_date": 1461096508, "body_markdown": "Very nice RegEx proposed on [this site][1]:\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    (?&lt;!^)(?=[A-Z])\r\n\r\nIf python have a String Split method, it should work...\r\n\r\nIn Java:\r\n\r\n&lt;!-- language: lang-java --&gt;\r\n\r\n    String s = &quot;loremIpsum&quot;;\r\n    words = s.split(&quot;(?&amp;#60;!^)(?=[A-Z])&quot;);\r\n\r\n\r\n  [1]: http://jason.diamond.name/weblog/2009/08/15/splitting-camelcase-with-regular-expressions/comment-page-1/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1323470492, "answer_id": 8452630, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1323470492, "body_markdown": "Here&#39;s something I did to change the headers on a tab-delimited file. I&#39;m omitting the part where I only edited the first line of the file. You could adapt it to Python pretty easily with the re library. This also includes separating out numbers (but keeps the digits together). I did it in two steps because that was easier than telling it not to put an underscore at the start of a line or tab.\r\n\r\nStep One...find uppercase letters or integers preceded by lowercase letters, and precede them with an underscore:\r\n\r\nSearch:\r\n\r\n    ([a-z]+)([A-Z]|[0-9]+)\r\n\r\nReplacement:\r\n\r\n    \\1_\\l\\2/\r\n\r\nStep Two...take the above and run it again to convert all caps to lowercase:\r\n\r\nSearch:\r\n    \r\n    ([A-Z])\r\n\r\nReplacement (that&#39;s backslash, lowercase L, backslash, one):\r\n\r\n    \\l\\1\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1339438636, "answer_id": 10985418, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1339438636, "body_markdown": "I have had pretty good luck with this one:\r\n\r\n    import re\r\n    def camelcase_to_underscore(s):\r\n        return re.sub(r&#39;(^|[a-z])([A-Z])&#39;,\r\n                      lambda m: &#39;_&#39;.join([i.lower() for i in m.groups() if i]),\r\n                      s)\r\n\r\nThis could obviously be optimized for speed a _tiny_ bit if you want to.\r\n\r\n    import re\r\n\r\n    CC2US_RE = re.compile(r&#39;(^|[a-z])([A-Z])&#39;)\r\n\r\n    def _replace(match):\r\n        return &#39;_&#39;.join([i.lower() for i in match.groups() if i])\r\n\r\n    def camelcase_to_underscores(s):\r\n        return CC2US_RE.sub(_replace, s)"}, {"tags": [], "down_vote_count": 1, "creation_date": 1350076636, "answer_id": 12867228, "path": "stack.django.answer", "score": 72, "up_vote_count": 73, "is_accepted": false, "last_activity_date": 1350076636, "body_markdown": "I don&#39;t know why these are all so complicating.\r\n\r\nfor most cases the simple expression `([A-Z]+)` will do the trick\r\n\r\n    &gt;&gt;&gt; re.sub(&#39;([A-Z]+)&#39;, r&#39;_\\1&#39;,&#39;CamelCase&#39;).lower()\r\n    &#39;_camel_case&#39;  \r\n    &gt;&gt;&gt; re.sub(&#39;([A-Z]+)&#39;, r&#39;_\\1&#39;,&#39;camelCase&#39;).lower()\r\n    &#39;camel_case&#39;\r\n    &gt;&gt;&gt; re.sub(&#39;([A-Z]+)&#39;, r&#39;_\\1&#39;,&#39;camel2Case2&#39;).lower()\r\n    &#39;camel2_case2&#39;\r\n    &gt;&gt;&gt; re.sub(&#39;([A-Z]+)&#39;, r&#39;_\\1&#39;,&#39;camelCamelCase&#39;).lower()\r\n    &#39;camel_camel_case&#39;\r\n    &gt;&gt;&gt; re.sub(&#39;([A-Z]+)&#39;, r&#39;_\\1&#39;,&#39;getHTTPResponseCode&#39;).lower()\r\n    &#39;get_httpresponse_code&#39;\r\n\r\nTo ignore the first charachter simply add look behind `(?!^)`\r\n    \r\n    &gt;&gt;&gt; re.sub(&#39;(?!^)([A-Z]+)&#39;, r&#39;_\\1&#39;,&#39;CamelCase&#39;).lower()\r\n    &#39;camel_case&#39;\r\n    &gt;&gt;&gt; re.sub(&#39;(?!^)([A-Z]+)&#39;, r&#39;_\\1&#39;,&#39;CamelCamelCase&#39;).lower()\r\n    &#39;camel_camel_case&#39;\r\n    &gt;&gt;&gt; re.sub(&#39;(?!^)([A-Z]+)&#39;, r&#39;_\\1&#39;,&#39;Camel2Camel2Case&#39;).lower()\r\n    &#39;camel2_camel2_case&#39;\r\n    &gt;&gt;&gt; re.sub(&#39;(?!^)([A-Z]+)&#39;, r&#39;_\\1&#39;,&#39;getHTTPResponseCode&#39;).lower()\r\n    &#39;get_httpresponse_code&#39;\r\n\r\nIf you want to separate ALLCaps to all_caps and expect numbers in your string you still don&#39;t need to do two separate runs just use `|` This expression `((?&lt;=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))` can handle just about every scenario in the book\r\n \r\n    &gt;&gt;&gt; a = re.compile(&#39;((?&lt;=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))&#39;)\r\n    &gt;&gt;&gt; a.sub(r&#39;_\\1&#39;, &#39;getHTTPResponseCode&#39;).lower()\r\n    &#39;get_http_response_code&#39;\r\n    &gt;&gt;&gt; a.sub(r&#39;_\\1&#39;, &#39;get2HTTPResponseCode&#39;).lower()\r\n    &#39;get2_http_response_code&#39;\r\n    &gt;&gt;&gt; a.sub(r&#39;_\\1&#39;, &#39;get2HTTPResponse123Code&#39;).lower()\r\n    &#39;get2_http_response123_code&#39;\r\n    &gt;&gt;&gt; a.sub(r&#39;_\\1&#39;, &#39;HTTPResponseCode&#39;).lower()\r\n    &#39;http_response_code&#39;\r\n    &gt;&gt;&gt; a.sub(r&#39;_\\1&#39;, &#39;HTTPResponseCodeXYZ&#39;).lower()\r\n    &#39;http_response_code_xyz&#39;\r\n    \r\nIt all depends on what you want so use the solution that best fits your needs as it should not be overly complicated.\r\n\r\nnJoy!"}, {"tags": [], "down_vote_count": 2, "creation_date": 1352821148, "answer_id": 13363758, "path": "stack.django.answer", "score": 5, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1352821148, "body_markdown": "I don&#39;t get idea why using both .sub() calls? :) I&#39;m not regex guru, but I simplified function to this one, which is suitable for my certain needs, I just needed a solution to convert camelCasedVars from POST request to vars_with_underscore: \r\n\r\n    def myFunc(...):\r\n      return re.sub(&#39;(.)([A-Z]{1})&#39;, r&#39;\\1_\\2&#39;, &quot;iTriedToWriteNicely&quot;).lower()\r\n\r\nIt does not work with such names like getHTTPResponse, cause I heard it is bad naming convention (should be like getHttpResponse, it&#39;s obviously, that it&#39;s much easier memorize this form)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1359665729, "answer_id": 14634975, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1359665729, "body_markdown": "I was looking for a solution to the same problem, except that I needed a chain; e.g.\r\n\r\n    &quot;CamelCamelCamelCase&quot; -&gt; &quot;Camel-camel-camel-case&quot;\r\n\r\nStarting from the nice two-word solutions here, I came up with the following:\r\n\r\n    &quot;-&quot;.join(x.group(1).lower() if x.group(2) is None else x.group(1) \\\r\n             for x in re.finditer(&quot;((^.[^A-Z]+)|([A-Z][^A-Z]+))&quot;, &quot;stringToSplit&quot;))\r\n\r\nMost of the complicated logic is to avoid lowercasing the first word.  Here&#39;s a simpler version if you don&#39;t mind altering the first word:\r\n\r\n    &quot;-&quot;.join(x.group(1).lower() for x in re.finditer(&quot;(^[^A-Z]+|[A-Z][^A-Z]+)&quot;, &quot;stringToSplit&quot;))\r\n\r\nOf course, you can pre-compile the regular expressions or join with underscore instead of hyphen, as discussed in the other solutions.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1361037532, "answer_id": 14913356, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1361062512, "last_edit_date": 1361062512, "body_markdown": "This is not a elegant method, is a very &#39;low level&#39; implementation of a simple state machine (bitfield state machine), possibly the most anti pythonic mode to resolve this,  however re module also implements a too complex state machine to resolve this simple task, so i think this is a good solution.\r\n\r\n\t\r\n\tdef splitSymbol(s):\r\n\t\tsi, ci, state = 0, 0, 0 # start_index, current_index \r\n\t\t&#39;&#39;&#39;\r\n\t\t\tstate bits:\r\n\t\t\t0: no yields\r\n\t\t\t1: lower yields\r\n\t\t\t2: lower yields - 1\r\n\t\t\t4: upper yields\r\n\t\t\t8: digit yields\r\n\t\t\t16: other yields\r\n\t\t\t32 : upper sequence mark\r\n\t\t&#39;&#39;&#39;\r\n\t\tfor c in s:\r\n\t\t\t\r\n\t\t\tif c.islower():\r\n\t\t\t\tif state &amp; 1:\r\n\t\t\t\t\tyield s[si:ci]\r\n\t\t\t\t\tsi = ci\r\n\t\t\t\telif state &amp; 2:\r\n\t\t\t\t\tyield s[si:ci - 1]\r\n\t\t\t\t\tsi = ci - 1\r\n\t\t\t\tstate = 4 | 8 | 16\r\n\t\t\t\tci += 1\r\n\t\r\n\t\t\telif c.isupper():\r\n\t\t\t\tif state &amp; 4:\r\n\t\t\t\t\tyield s[si:ci]\r\n\t\t\t\t\tsi = ci\r\n\t\t\t\tif state &amp; 32:\r\n\t\t\t\t\tstate = 2 | 8 | 16 | 32\r\n\t\t\t\telse:\r\n\t\t\t\t\tstate = 8 | 16 | 32\r\n\t\t\t\t\t\r\n\t\t\t\tci += 1\r\n\t\r\n\t\t\telif c.isdigit():\r\n\t\t\t\tif state &amp; 8:\r\n\t\t\t\t\tyield s[si:ci]\r\n\t\t\t\t\tsi = ci\r\n\t\t\t\tstate = 1 | 4 | 16\r\n\t\t\t\tci += 1\r\n\t\t\t\t\r\n\t\t\telse:\r\n\t\t\t\tif state &amp; 16:\r\n\t\t\t\t\tyield s[si:ci]\r\n\t\t\t\tstate = 0\r\n\t\t\t\tci += 1  # eat ci\r\n\t\t\t\tsi = ci   \r\n\t\t\tprint(&#39; : &#39;, c, bin(state))\r\n\t\tif state:\r\n\t\t\tyield s[si:ci] \r\n\t\t\t\r\n\t\t\t\r\n\tdef camelcaseToUnderscore(s):\r\n\t\treturn &#39;_&#39;.join(splitSymbol(s))\t\r\n\t\r\n\r\n\r\n\r\nsplitsymbol can parses all case types: UpperSEQUENCEInterleaved, under_score, BIG_SYMBOLS and cammelCasedMethods\r\n\r\nI hope it is useful"}, {"tags": [], "down_vote_count": 1, "creation_date": 1372275274, "answer_id": 17328907, "path": "stack.django.answer", "score": 112, "up_vote_count": 113, "is_accepted": false, "last_activity_date": 1372275274, "body_markdown": "There&#39;s an [inflection library][pypi] in the package index that can handle these things for you. In this case, you&#39;d be looking for [`inflection.underscore()`][docs]:\r\n\r\n    &gt;&gt;&gt; inflection.underscore(&#39;CamelCase&#39;)\r\n    &#39;camel_case&#39;\r\n\r\n[pypi]: https://pypi.python.org/pypi/inflection\r\n[docs]: http://inflection.readthedocs.org/en/latest/#inflection.underscore\r\n\r\n"}, {"tags": [], "down_vote_count": 3, "creation_date": 1384293905, "answer_id": 19940888, "path": "stack.django.answer", "score": 16, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1384293905, "body_markdown": "Personally I am not sure how anything using regular expressions in python can be described as elegant. Most answers here are just doing &quot;code golf&quot; type RE tricks. Elegant coding is supposed to be easily understood.\r\n\r\n    def un_camel(x):\r\n        final = &#39;&#39;\r\n        for item in x:\r\n            if item.isupper():\r\n                final += &quot;_&quot;+item.lower()\r\n            else:\r\n                final += item\r\n        if final[0] == &quot;_&quot;:\r\n            final = final[1:]\r\n        return final\r\n\r\n    &gt;&gt;&gt; un_camel(&quot;RegularExpressionsAreFunky&quot;)\r\n    &#39;regular_expressions_are_funky&#39;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1399627744, "answer_id": 23561109, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1399628544, "last_edit_date": 1399628544, "body_markdown": "Concise without regular expressions, but HTTPResponseCode=&gt; httpresponse_code:\r\n\r\n    def from_camel(name):\r\n        &quot;&quot;&quot;\r\n        ThisIsCamelCase ==&gt; this_is_camel_case\r\n        &quot;&quot;&quot;\r\n        name = name.replace(&quot;_&quot;, &quot;&quot;)\r\n        _cas = lambda _x : [_i.isupper() for _i in _x]\r\n        seq = zip(_cas(name[1:-1]), _cas(name[2:]))\r\n        ss = [_x + 1 for _x, (_i, _j) in enumerate(seq) if (_i, _j) == (False, True)]\r\n        return &quot;&quot;.join([ch + &quot;_&quot; if _x in ss else ch for _x, ch in numerate(name.lower())])\r\n\r\n\r\n "}, {"tags": [], "down_vote_count": 1, "creation_date": 1425073158, "answer_id": 28774760, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1425073158, "body_markdown": "Using regexes may be the shortest, but this solution is way more readable:\r\n\r\n    def to_snake_case(s):\r\n        snake = &quot;&quot;.join([&quot;_&quot;+c.lower() if c.isupper() else c for c in s])\r\n        return snake[1:] if snake.startswith(&quot;_&quot;) else snake\r\n"}, {"tags": [], "down_vote_count": 3, "creation_date": 1439878053, "answer_id": 32064723, "path": "stack.django.answer", "score": -3, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1439878053, "body_markdown": "Use: `str.capitalize()` to convert first letter of the string (contained in variable str) to a capital letter and returns the entire string.\r\n\r\nExample:\r\nCommand: &quot;hello&quot;.capitalize() \r\nOutput: Hello"}, {"tags": [], "down_vote_count": 0, "creation_date": 1440685621, "answer_id": 32252101, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1440685621, "body_markdown": "Without any library :\r\n\r\n    def camelify(out):\r\n        return (&#39;&#39;.join([&quot;_&quot;+x.lower() if i&lt;len(out)-1 and x.isupper() and out[i+1].islower()\r\n             else x.lower()+&quot;_&quot; if i&lt;len(out)-1 and x.islower() and out[i+1].isupper()\r\n             else x.lower() for i,x in enumerate(list(out))])).lstrip(&#39;_&#39;).replace(&#39;__&#39;,&#39;_&#39;)\r\n\r\nA bit heavy, but\r\n\r\n    CamelCamelCamelCase -&gt;  camel_camel_camel_case\r\n    HTTPRequest         -&gt;  http_request\r\n    GetHTTPRequest      -&gt;  get_http_request\r\n    getHTTPRequest      -&gt;  get_http_request\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1446624363, "answer_id": 33516645, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1461099153, "last_edit_date": 1461099153, "body_markdown": "This simple method should do the job:\r\n\r\n    import re\r\n\r\n    def convert(name):\r\n        return re.sub(r&#39;([A-Z]*)([A-Z][a-z]+)&#39;, lambda x: (x.group(1) + &#39;_&#39; if x.group(1) else &#39;&#39;) + x.group(2) + &#39;_&#39;, name).rstrip(&#39;_&#39;).lower()\r\n\r\n- We look for capital letters that are precedeed by any number of (or zero) capital letters, and followed by any number of lowercase characters.\r\n- An underscore is placed just before the occurence of the last capital letter found in the group, and one can be placed before that capital letter in case it is preceded by other capital letters.\r\n- If there are trailing underscores, remove those.\r\n- Finally, the whole result string is changed to lower case.\r\n\r\n(taken from [here](http://rodic.fr/blog/camelcase-and-snake_case-strings-conversion-with-python/), see [working example online](http://ideone.com/JyVkds))"}, {"tags": [], "down_vote_count": 0, "creation_date": 1449586640, "answer_id": 34159022, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1449586640, "last_edit_date": 1495540049, "body_markdown": "Lightely adapted from https://stackoverflow.com/users/267781/matth\r\nwho use generators.\r\n\r\n    def uncamelize(s):\r\n        buff, l = &#39;&#39;, []\r\n        for ltr in s:\r\n            if ltr.isupper():\r\n                if buff:\r\n                    l.append(buff)\r\n                    buff = &#39;&#39;\r\n            buff += ltr\r\n        l.append(buff)\r\n        return &#39;_&#39;.join(l).lower()"}, {"tags": [], "down_vote_count": 0, "creation_date": 1459517443, "answer_id": 36357670, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1459517443, "body_markdown": "Take a look at the excellent Schematics lib \r\n\r\nhttps://github.com/schematics/schematics\r\n\r\nIt allows you to created typed data structures that can serialize/deserialize from python to Javascript flavour, eg:\r\n\r\n    class MapPrice(Model):\r\n        price_before_vat = DecimalType(serialized_name=&#39;priceBeforeVat&#39;)\r\n        vat_rate = DecimalType(serialized_name=&#39;vatRate&#39;)\r\n        vat = DecimalType()\r\n        total_price = DecimalType(serialized_name=&#39;totalPrice&#39;)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1491435771, "answer_id": 43243358, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1491435771, "body_markdown": "[stringcase][1] is my go-to library for this; e.g.:\r\n\r\n    &gt;&gt;&gt; from stringcase import pascalcase, snakecase\r\n    &gt;&gt;&gt; snakecase(&#39;FooBarBaz&#39;)\r\n    &#39;foo_bar_baz&#39;\r\n    &gt;&gt;&gt; pascalcase(&#39;foo_bar_baz&#39;)\r\n    &#39;FooBarBaz&#39;\r\n\r\n  [1]: https://pypi.python.org/pypi/stringcase"}, {"tags": [], "down_vote_count": 0, "creation_date": 1499426038, "answer_id": 44969381, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1499426038, "body_markdown": "I prefer to avoid re if possible:\r\n\r\n`myString=&quot;ThisStringIsCamelCase&quot;\r\n&#39;&#39;.join([&#39;_&#39;+i.lower() if i.isupper() else i for i in myString]).lstrip(&#39;_&#39;)\r\n&#39;this_string_is_camel_case&#39;`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1499935974, "answer_id": 45075834, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1499935974, "body_markdown": "    def convert(name):\r\n        return reduce(\r\n            lambda x, y: x + (&#39;_&#39; if y.isupper() else &#39;&#39;) + y, \r\n            name\r\n        ).lower()\r\n\r\nAnd if we need to cover a case with already-un-cameled input:\r\n\r\n    def convert(name):\r\n        return reduce(\r\n            lambda x, y: x + (&#39;_&#39; if y.isupper() and not x.endswith(&#39;_&#39;) else &#39;&#39;) + y, \r\n            name\r\n        ).lower()"}, {"tags": [], "down_vote_count": 0, "creation_date": 1506705116, "answer_id": 46493824, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1507161823, "last_edit_date": 1507161823, "body_markdown": "I think this solution is more straightforward than previous answers:\r\n\r\n\timport re\r\n\r\n\tdef convert (camel_input):\r\n\t\twords = re.findall(r&#39;[A-Z]?[a-z]+|[A-Z]{2,}(?=[A-Z][a-z]|\\d|\\W|$)|\\d+&#39;, camel_input)\r\n\t\treturn &#39;_&#39;.join(map(str.lower, words))\r\n\r\n\r\n\t# Let&#39;s test it\r\n\ttest_strings = [\r\n\t\t&#39;CamelCase&#39;,\r\n\t\t&#39;camelCamelCase&#39;,\r\n\t\t&#39;Camel2Camel2Case&#39;,\r\n\t\t&#39;getHTTPResponseCode&#39;,\r\n\t\t&#39;get200HTTPResponseCode&#39;,\r\n\t\t&#39;getHTTP200ResponseCode&#39;,\r\n\t\t&#39;HTTPResponseCode&#39;,\r\n\t\t&#39;ResponseHTTP&#39;,\r\n\t\t&#39;ResponseHTTP2&#39;,\r\n\t\t&#39;Fun?!awesome&#39;,\r\n\t\t&#39;Fun?!Awesome&#39;,\r\n\t\t&#39;10CoolDudes&#39;,\r\n\t\t&#39;20coolDudes&#39;\r\n\t]\r\n\tfor test_string in test_strings:\r\n\t\tprint(convert(test_string))\r\n\r\nWhich outputs:\r\n\r\n\tcamel_case\r\n\tcamel_camel_case\r\n\tcamel_2_camel_2_case\r\n\tget_http_response_code\r\n\tget_200_http_response_code\r\n\tget_http_200_response_code\r\n\thttp_response_code\r\n\tresponse_http\r\n\tresponse_http_2\r\n\tfun_awesome\r\n\tfun_awesome\r\n\t10_cool_dudes\r\n\t20_cool_dudes\r\n\r\nThe regular expression matches three patterns:\r\n\r\n1. `[A-Z]?[a-z]+`: Consecutive lower-case letters that optionally start with an upper-case letter.\r\n1. `[A-Z]{2,}(?=[A-Z][a-z]|\\d|\\W|$)`: Two or more consecutive upper-case letters. It uses a lookahead to exclude the last upper-case letter if it is followed by a lower-case letter.\r\n1. `\\d+`: Consecutive numbers.\r\n\r\nBy using `re.findall` we get a list of individual &quot;words&quot; that can be converted to lower-case and joined with underscores."}, {"tags": [], "down_vote_count": 0, "creation_date": 1515215907, "answer_id": 48124506, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1515215907, "body_markdown": "    def convert(camel_str):\r\n        temp_list = []\r\n        for letter in camel_str:\r\n            if letter.islower():\r\n                temp_list.append(letter)\r\n            else:\r\n                temp_list.append(&#39;_&#39;)\r\n                temp_list.append(letter)\r\n        result = &quot;&quot;.join(temp_list)\r\n        return result.lower()"}], "title": "Elegant Python function to convert CamelCase to snake_case?", "view_count": 91575, "answer_count": 28, "code_snippet": ["<code>&gt;&gt;&gt; convert('CamelCase')\n'camel_case'\n</code>", "<code>NotCamelCase</code>", "<code>thisIs</code>", "<code>def convert(name):\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', name)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n</code>", "<code>&gt;&gt;&gt; convert('CamelCase')\n'camel_case'\n&gt;&gt;&gt; convert('CamelCamelCase')\n'camel_camel_case'\n&gt;&gt;&gt; convert('Camel2Camel2Case')\n'camel2_camel2_case'\n&gt;&gt;&gt; convert('getHTTPResponseCode')\n'get_http_response_code'\n&gt;&gt;&gt; convert('get2HTTPResponseCode')\n'get2_http_response_code'\n&gt;&gt;&gt; convert('HTTPResponseCode')\n'http_response_code'\n&gt;&gt;&gt; convert('HTTPResponseCodeXYZ')\n'http_response_code_xyz'\n</code>", "<code>first_cap_re = re.compile('(.)([A-Z][a-z]+)')\nall_cap_re = re.compile('([a-z0-9])([A-Z])')\ndef convert(name):\n    s1 = first_cap_re.sub(r'\\1_\\2', name)\n    return all_cap_re.sub(r'\\1_\\2', s1).lower()\n</code>", "<code>import re\n</code>", "<code>not_camel_case</code>", "<code>notCamelCase</code>", "<code>NotCamelCase</code>", "<code>s2.replace('__', '_')</code>", "<code>inflection.underscore()</code>", "<code>&gt;&gt;&gt; inflection.underscore('CamelCase')\n'camel_case'\n</code>", "<code>([A-Z]+)</code>", "<code>&gt;&gt;&gt; re.sub('([A-Z]+)', r'_\\1','CamelCase').lower()\n'_camel_case'  \n&gt;&gt;&gt; re.sub('([A-Z]+)', r'_\\1','camelCase').lower()\n'camel_case'\n&gt;&gt;&gt; re.sub('([A-Z]+)', r'_\\1','camel2Case2').lower()\n'camel2_case2'\n&gt;&gt;&gt; re.sub('([A-Z]+)', r'_\\1','camelCamelCase').lower()\n'camel_camel_case'\n&gt;&gt;&gt; re.sub('([A-Z]+)', r'_\\1','getHTTPResponseCode').lower()\n'get_httpresponse_code'\n</code>", "<code>(?!^)</code>", "<code>&gt;&gt;&gt; re.sub('(?!^)([A-Z]+)', r'_\\1','CamelCase').lower()\n'camel_case'\n&gt;&gt;&gt; re.sub('(?!^)([A-Z]+)', r'_\\1','CamelCamelCase').lower()\n'camel_camel_case'\n&gt;&gt;&gt; re.sub('(?!^)([A-Z]+)', r'_\\1','Camel2Camel2Case').lower()\n'camel2_camel2_case'\n&gt;&gt;&gt; re.sub('(?!^)([A-Z]+)', r'_\\1','getHTTPResponseCode').lower()\n'get_httpresponse_code'\n</code>", "<code>|</code>", "<code>((?&lt;=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))</code>", "<code>&gt;&gt;&gt; a = re.compile('((?&lt;=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))')\n&gt;&gt;&gt; a.sub(r'_\\1', 'getHTTPResponseCode').lower()\n'get_http_response_code'\n&gt;&gt;&gt; a.sub(r'_\\1', 'get2HTTPResponseCode').lower()\n'get2_http_response_code'\n&gt;&gt;&gt; a.sub(r'_\\1', 'get2HTTPResponse123Code').lower()\n'get2_http_response123_code'\n&gt;&gt;&gt; a.sub(r'_\\1', 'HTTPResponseCode').lower()\n'http_response_code'\n&gt;&gt;&gt; a.sub(r'_\\1', 'HTTPResponseCodeXYZ').lower()\n'http_response_code_xyz'\n</code>", "<code>(?!^)</code>", "<code>(?&lt;!^)</code>", "<code>(?!^)</code>", "<code>\"Camel2WARNING_Case_CASE\"</code>", "<code>\"camel2_warning_case__case\"</code>", "<code>(?&lt;!_)</code>", "<code>re.sub('((?&lt;=[a-z0-9])[A-Z]|(?!^)(?&lt;!_)[A-Z](?=[a-z]))', r'_\\1', \"Camel2WARNING_Case_CASE\").lower()</code>", "<code>'camel2_warning_case_case'</code>", "<code>def un_camel(x):\n    final = ''\n    for item in x:\n        if item.isupper():\n            final += \"_\"+item.lower()\n        else:\n            final += item\n    if final[0] == \"_\":\n        final = final[1:]\n    return final\n\n&gt;&gt;&gt; un_camel(\"RegularExpressionsAreFunky\")\n'regular_expressions_are_funky'\n</code>", "<code>+=</code>", "<code>''.join()</code>", "<code>''.join('_'+c.lower() if c.isupper() else c for c in \"DeathToCamelCase\").strip('_')\nre.sub(\"(.)([A-Z])\", r'\\1_\\2', 'DeathToCamelCase').lower()\n</code>", "<code>def myFunc(...):\n  return re.sub('(.)([A-Z]{1})', r'\\1_\\2', \"iTriedToWriteNicely\").lower()\n</code>", "<code>'HTTPConnectionFactory'</code>", "<code>'h_tt_pconnection_factory'</code>", "<code>'http_connection_factory'</code>", "<code>def un_camel(text):\n    \"\"\" Converts a CamelCase name into an under_score name. \n\n        &gt;&gt;&gt; un_camel('CamelCase')\n        'camel_case'\n        &gt;&gt;&gt; un_camel('getHTTPResponseCode')\n        'get_http_response_code'\n    \"\"\"\n    result = []\n    pos = 0\n    while pos &lt; len(text):\n        if text[pos].isupper():\n            if pos-1 &gt; 0 and text[pos-1].islower() or pos-1 &gt; 0 and \\\n            pos+1 &lt; len(text) and text[pos+1].islower():\n                result.append(\"_%s\" % text[pos].lower())\n            else:\n                result.append(text[pos].lower())\n        else:\n            result.append(text[pos])\n        pos += 1\n    return \"\".join(result)\n</code>", "<code>getHTTPResponseCode</code>", "<code>get_http_response_code</code>", "<code>&gt;&gt;&gt; from stringcase import pascalcase, snakecase\n&gt;&gt;&gt; snakecase('FooBarBaz')\n'foo_bar_baz'\n&gt;&gt;&gt; pascalcase('foo_bar_baz')\n'FooBarBaz'\n</code>", "<code>&gt;&gt;&gt; def un_camel(input):\n...     output = [input[0].lower()]\n...     for c in input[1:]:\n...             if c in ('ABCDEFGHIJKLMNOPQRSTUVWXYZ'):\n...                     output.append('_')\n...                     output.append(c.lower())\n...             else:\n...                     output.append(c)\n...     return str.join('', output)\n...\n&gt;&gt;&gt; un_camel(\"camel_case\")\n'camel_case'\n&gt;&gt;&gt; un_camel(\"CamelCase\")\n'camel_case'\n</code>", "<code>&gt;&gt;&gt; un_camel = lambda i: i[0].lower() + str.join('', (\"_\" + c.lower() if c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" else c for c in i[1:]))\n&gt;&gt;&gt; un_camel(\"camel_case\")\n'camel_case'\n&gt;&gt;&gt; un_camel(\"CamelCase\")\n'camel_case'\n</code>", "<code>str.join</code>", "<code>''.join(..)</code>", "<code>def splitSymbol(s):\n    si, ci, state = 0, 0, 0 # start_index, current_index \n    '''\n        state bits:\n        0: no yields\n        1: lower yields\n        2: lower yields - 1\n        4: upper yields\n        8: digit yields\n        16: other yields\n        32 : upper sequence mark\n    '''\n    for c in s:\n\n        if c.islower():\n            if state &amp; 1:\n                yield s[si:ci]\n                si = ci\n            elif state &amp; 2:\n                yield s[si:ci - 1]\n                si = ci - 1\n            state = 4 | 8 | 16\n            ci += 1\n\n        elif c.isupper():\n            if state &amp; 4:\n                yield s[si:ci]\n                si = ci\n            if state &amp; 32:\n                state = 2 | 8 | 16 | 32\n            else:\n                state = 8 | 16 | 32\n\n            ci += 1\n\n        elif c.isdigit():\n            if state &amp; 8:\n                yield s[si:ci]\n                si = ci\n            state = 1 | 4 | 16\n            ci += 1\n\n        else:\n            if state &amp; 16:\n                yield s[si:ci]\n            state = 0\n            ci += 1  # eat ci\n            si = ci   \n        print(' : ', c, bin(state))\n    if state:\n        yield s[si:ci] \n\n\ndef camelcaseToUnderscore(s):\n    return '_'.join(splitSymbol(s)) \n</code>", "<code>camelcase_to_underscore = lambda str: re.sub('(((?&lt;=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', '_\\\\1', str).lower().strip('_')\n</code>", "<code>camelcase_to_underscore('ThisUser')\n</code>", "<code>'this_user'\n</code>", "<code>def to_snake_case(s):\n    snake = \"\".join([\"_\"+c.lower() if c.isupper() else c for c in s])\n    return snake[1:] if snake.startswith(\"_\") else snake\n</code>", "<code>assertHTMLNotEqual</code>", "<code>def uncamelize(s):\n    buff, l = '', []\n    for ltr in s:\n        if ltr.isupper():\n            if buff:\n                l.append(buff)\n                buff = ''\n        buff += ltr\n    l.append(buff)\n    return '_'.join(l).lower()\n</code>", "<code>class MapPrice(Model):\n    price_before_vat = DecimalType(serialized_name='priceBeforeVat')\n    vat_rate = DecimalType(serialized_name='vatRate')\n    vat = DecimalType()\n    total_price = DecimalType(serialized_name='totalPrice')\n</code>", "<code>def f(s):\n    return s.group(1).lower() + \"_\" + s.group(2).lower()\n\np = re.compile(\"([A-Z]+[a-z]+)([A-Z]?)\")\nprint p.sub(f, \"CamelCase\")\nprint p.sub(f, \"getHTTPResponseCode\")\n</code>", "<code>p = re.compile(\"([A-Z]+[a-z]+)([A-Z]?)\")\nprint p.sub(lambda x: x.group(1).lower() + \"_\" + x.group(2).lower(), \"CamelCase\")\nprint p.sub(lambda x: x.group(1).lower() + \"_\" + x.group(2).lower(), \"getHTTPResponseCode\")\n</code>", "<code>([a-z]+)([A-Z]|[0-9]+)\n</code>", "<code>\\1_\\l\\2/\n</code>", "<code>([A-Z])\n</code>", "<code>\\l\\1\n</code>", "<code>\"CamelCamelCamelCase\" -&gt; \"Camel-camel-camel-case\"\n</code>", "<code>\"-\".join(x.group(1).lower() if x.group(2) is None else x.group(1) \\\n         for x in re.finditer(\"((^.[^A-Z]+)|([A-Z][^A-Z]+))\", \"stringToSplit\"))\n</code>", "<code>\"-\".join(x.group(1).lower() for x in re.finditer(\"(^[^A-Z]+|[A-Z][^A-Z]+)\", \"stringToSplit\"))\n</code>", "<code>def from_camel(name):\n    \"\"\"\n    ThisIsCamelCase ==&gt; this_is_camel_case\n    \"\"\"\n    name = name.replace(\"_\", \"\")\n    _cas = lambda _x : [_i.isupper() for _i in _x]\n    seq = zip(_cas(name[1:-1]), _cas(name[2:]))\n    ss = [_x + 1 for _x, (_i, _j) in enumerate(seq) if (_i, _j) == (False, True)]\n    return \"\".join([ch + \"_\" if _x in ss else ch for _x, ch in numerate(name.lower())])\n</code>", "<code>def camelify(out):\n    return (''.join([\"_\"+x.lower() if i&lt;len(out)-1 and x.isupper() and out[i+1].islower()\n         else x.lower()+\"_\" if i&lt;len(out)-1 and x.islower() and out[i+1].isupper()\n         else x.lower() for i,x in enumerate(list(out))])).lstrip('_').replace('__','_')\n</code>", "<code>CamelCamelCamelCase -&gt;  camel_camel_camel_case\nHTTPRequest         -&gt;  http_request\nGetHTTPRequest      -&gt;  get_http_request\ngetHTTPRequest      -&gt;  get_http_request\n</code>", "<code>(?&lt;!^)(?=[A-Z])\n</code>", "<code>String s = \"loremIpsum\";\nwords = s.split(\"(?&amp;#60;!^)(?=[A-Z])\");\n</code>", "<code>import re\n\ndef convert(name):\n    return re.sub(r'([A-Z]*)([A-Z][a-z]+)', lambda x: (x.group(1) + '_' if x.group(1) else '') + x.group(2) + '_', name).rstrip('_').lower()\n</code>", "<code>myString=\"ThisStringIsCamelCase\"\n''.join(['_'+i.lower() if i.isupper() else i for i in myString]).lstrip('_')\n'this_string_is_camel_case'</code>", "<code>def convert(name):\n    return reduce(\n        lambda x, y: x + ('_' if y.isupper() else '') + y, \n        name\n    ).lower()\n</code>", "<code>def convert(name):\n    return reduce(\n        lambda x, y: x + ('_' if y.isupper() and not x.endswith('_') else '') + y, \n        name\n    ).lower()\n</code>", "<code>import re\n\ndef convert (camel_input):\n    words = re.findall(r'[A-Z]?[a-z]+|[A-Z]{2,}(?=[A-Z][a-z]|\\d|\\W|$)|\\d+', camel_input)\n    return '_'.join(map(str.lower, words))\n\n\n# Let's test it\ntest_strings = [\n    'CamelCase',\n    'camelCamelCase',\n    'Camel2Camel2Case',\n    'getHTTPResponseCode',\n    'get200HTTPResponseCode',\n    'getHTTP200ResponseCode',\n    'HTTPResponseCode',\n    'ResponseHTTP',\n    'ResponseHTTP2',\n    'Fun?!awesome',\n    'Fun?!Awesome',\n    '10CoolDudes',\n    '20coolDudes'\n]\nfor test_string in test_strings:\n    print(convert(test_string))\n</code>", "<code>camel_case\ncamel_camel_case\ncamel_2_camel_2_case\nget_http_response_code\nget_200_http_response_code\nget_http_200_response_code\nhttp_response_code\nresponse_http\nresponse_http_2\nfun_awesome\nfun_awesome\n10_cool_dudes\n20_cool_dudes\n</code>", "<code>[A-Z]?[a-z]+</code>", "<code>[A-Z]{2,}(?=[A-Z][a-z]|\\d|\\W|$)</code>", "<code>\\d+</code>", "<code>re.findall</code>", "<code>def convert(camel_str):\n    temp_list = []\n    for letter in camel_str:\n        if letter.islower():\n            temp_list.append(letter)\n        else:\n            temp_list.append('_')\n            temp_list.append(letter)\n    result = \"\".join(temp_list)\n    return result.lower()\n</code>", "<code>import re\ndef camelcase_to_underscore(s):\n    return re.sub(r'(^|[a-z])([A-Z])',\n                  lambda m: '_'.join([i.lower() for i in m.groups() if i]),\n                  s)\n</code>", "<code>import re\n\nCC2US_RE = re.compile(r'(^|[a-z])([A-Z])')\n\ndef _replace(match):\n    return '_'.join([i.lower() for i in match.groups() if i])\n\ndef camelcase_to_underscores(s):\n    return CC2US_RE.sub(_replace, s)\n</code>", "<code>str.capitalize()</code>"], "path": "stack.django"}, {"tags": ["python", "django", "virtualenv", "setuptools", "pip"], "creation_date": 1316183214, "body_markdown": "I&#39;m deploying a Django app to a dev server and am hitting this error when i run pip install requirements.txt:\r\n\r\n    Traceback (most recent call last):\r\n      File &quot;/var/www/mydir/virtualenvs/dev/bin/pip&quot;, line 5, in &lt;module&gt;\r\n        from pkg_resources import load_entry_point\r\n    ImportError: No module named pkg_resources\r\n\r\npkg_resources appears to be distributed with setuptools.  Initially I thought this might not be installed to the python in the virtualenv so I installed setuptools (2.6, same version as Python) to the Python site-packages in the virtualenv with the following command\r\n\r\n    sh setuptools-0.6c11-py2.6.egg --install-dir /var/www/mydir/virtualenvs/dev/lib/python2.6/site-packages\r\n\r\nEDIT\r\nThis only happens inside the virtualenv.  If I open a console outside the virtualenv then pkg_resources is present\r\n\r\nbut I am still getting the same error.  Any ideas as to why pkg_resources is not on the path?", "last_edit_date": 1316189709, "up_vote_count": 320, "link": "https://stackoverflow.com/questions/7446187/no-module-named-pkg-resources", "_childDocuments_": [{"tags": [], "down_vote_count": 5, "creation_date": 1336667368, "answer_id": 10538412, "path": "stack.django.answer", "score": 526, "up_vote_count": 531, "is_accepted": true, "last_activity_date": 1464912671, "last_edit_date": 1464912671, "body_markdown": "I encountered the same `ImportError` today while trying to use pip. Somehow the `setuptools` package had been deleted in my Python environment.\r\n\r\nTo fix the issue, run the setup script for `setuptools`:\r\n\r\n    wget https://bootstrap.pypa.io/ez_setup.py -O - | python\r\n\r\n(or if you don&#39;t have `wget` installed (e.g. OS X), try\r\n\r\n    curl https://bootstrap.pypa.io/ez_setup.py | python\r\n\r\npossibly with `sudo` prepended.)\r\n\r\nIf you have any version of [`distribute`](http://pythonhosted.org/setuptools/merge-faq.html), or any `setuptools` below 0.6, you will have to uninstall it first.\\*\r\n\r\nSee [Installation Instructions](https://pypi.python.org/pypi/setuptools/0.9.8#installation-instructions) for further details.\r\n\r\n---\r\n\r\n\\* If you already have a working `distribute`, upgrading it to the &quot;compatibility wrapper&quot; that switches you over to `setuptools` is easier. But if things are already broken, don&#39;t try that."}, {"tags": [], "down_vote_count": 0, "creation_date": 1338930112, "answer_id": 10904899, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1338930112, "body_markdown": "I had this problem when I had activated my virtualenv as a different user than the one who created it. It seems to be a permission problem. I discovered this when I tried the answer by @cwc and saw this in the output: \r\n\r\n    Installing easy_install script to /path/env/bin\r\n    error: /path/env/bin/easy_install: Permission denied\r\n\r\nSwitching back to the user that created the virtualenv, then running the original `pip install` command went without problems. Hope this helps!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1344423888, "answer_id": 11863170, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1344423888, "body_markdown": "I had this problem today as well. I only got the problem inside the virtual env. \r\n\r\nThe solution for me was deactivating the virtual env, deleting and then uninstalling virtualenv with pip and reinstalling it. After that I created a new virtual env for my project, then pip worked fine both inside the virtual environment as in the normal environment."}, {"tags": [], "down_vote_count": 1, "creation_date": 1348348384, "answer_id": 12547749, "path": "stack.django.answer", "score": 31, "up_vote_count": 32, "is_accepted": false, "last_activity_date": 1348348384, "body_markdown": "It also happened to me. I think the problem will happen if the requirements.txt contains a &quot;distribute&quot; entry while the virtualenv uses setuptools. Pip will try to patch setuptools to make room for distribute, but unfortunately it will fail half way.\r\n\r\nThe easy solution is delete your current virtualenv then make a new virtualenv with --distribute argument.\r\n\r\nAn example if using virtualenvwrapper:\r\n\r\n    $ deactivate\r\n    $ rmvirtualenv yourenv\r\n    $ mkvirtualenv yourenv --distribute\r\n    $ workon yourenv\r\n    $ pip install -r requirements.txt"}, {"tags": [], "down_vote_count": 0, "creation_date": 1382436367, "answer_id": 19514783, "path": "stack.django.answer", "score": 38, "up_vote_count": 38, "is_accepted": false, "last_activity_date": 1390092049, "last_edit_date": 1390092049, "body_markdown": "I have seen this error while trying to install rhodecode to a virtualenv on ubuntu 13.10. For me the solution was to run \r\n\r\n    pip install --upgrade setuptools\r\n    pip install --upgrade distribute \r\n\r\nbefore I run easy_install rhodecode."}, {"tags": [], "down_vote_count": 1, "creation_date": 1384879973, "answer_id": 20077351, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1384879973, "body_markdown": "I fixed the error with virtualenv by doing this:\r\n\r\nCopied pkg_resources.py from \r\n\r\n`/Library/Python/2.7/site-packages/setuptools`\r\n\r\nto \r\n\r\n`/Library/Python/2.7/site-packages/`\r\n\r\nThis may be a cheap workaround, but it worked for me.\r\n\r\n.\r\n\r\n\r\nIf setup tools doesn&#39;t exist, you can try installing system-site-packages by typing `virtualenv --system-site-packages /DESTINATION DIRECTORY`, changing the last part to be the directory you want to install to. `pkg_rousources.py` will be under that directory in lib/python2.7/site-packages"}, {"tags": [], "down_vote_count": 0, "creation_date": 1387331104, "answer_id": 20648233, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1387331104, "body_markdown": "For me, this error was being caused because I had a subdirectory called &quot;site&quot;!  I don&#39;t know if this is a pip bug or not, but I started with:\r\n\r\n/some/dir/requirements.txt\r\n/some/dir/site/\r\n\r\npip install -r requirements.txt wouldn&#39;t work, giving me the above error!\r\n\r\nrenaming the subfolder from &quot;site&quot; to &quot;src&quot; fixed the problem!  Maybe pip is looking for &quot;site-packages&quot;?  Crazy."}, {"tags": [], "down_vote_count": 0, "creation_date": 1398886011, "answer_id": 23396459, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1490102485, "last_edit_date": 1490102485, "body_markdown": "I had this error earlier and the highest rated answer gave me an error trying to download the `ez_setup.py` file. I found another source so you can run the command:\r\n\r\n    curl http://peak.telecommunity.com/dist/ez_setup.py | python\r\n\r\nI found that I also had to use `sudo` to get it working, so you may need to run:\r\n\r\n    sudo curl http://peak.telecommunity.com/dist/ez_setup.py | sudo python\r\n\r\nI&#39;ve also created another location that the script can be downloaded from:\r\n\r\nhttps://gist.github.com/ajtrichards/42e73562a89edb1039f3"}, {"tags": [], "down_vote_count": 0, "creation_date": 1400554905, "answer_id": 23750352, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1400554905, "body_markdown": "I came across this answer when I was trying to follow [this guide for OSX](http://hackercodex.com/guide/python-development-environment-on-mac-osx/). What worked for me was, after running `python get-pip`, I had to ALSO `easy_install pip`. That fixed the issue of not being able to run pip at all. I *did* have a bunch of old macport stuff installed. That may have conflicted."}, {"tags": [], "down_vote_count": 0, "creation_date": 1406206224, "answer_id": 24934182, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1406206224, "body_markdown": "Apparently you&#39;re missing setuptools. Some virtualenv versions use distribute instead of setuptools by default. Use the `--setuptools` option when creating the virtualenv or set the `VIRTUALENV_SETUPTOOLS=1` in your environment."}, {"tags": [], "down_vote_count": 0, "creation_date": 1416116271, "answer_id": 26954180, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1416116271, "body_markdown": "On windows, I installed pip downloaded from [www.lfd.uci.edu/~gohlke/pythonlibs/][1] then encontered this problem. \r\n\r\nSo I should have installed setuptools(easy_install) first.\r\n\r\n\r\n  [1]: http://www.lfd.uci.edu/~gohlke/pythonlibs/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1416130280, "answer_id": 26955537, "path": "stack.django.answer", "score": 86, "up_vote_count": 86, "is_accepted": false, "last_activity_date": 1416130280, "body_markdown": "    sudo apt-get install --reinstall python-pkg-resources\r\n\r\nfixed it for me in Debian. Seems like uninstalling some .deb packages (twisted set in my case) has broken the path python uses to find packages "}, {"tags": [], "down_vote_count": 0, "creation_date": 1435905398, "answer_id": 31200131, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1435905398, "body_markdown": "In CentOS 6 installing the package python-setuptools fixed it.\r\n\r\n    yum install python-setuptools\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1458715822, "answer_id": 36171518, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1458715822, "body_markdown": "just reinstall your `setuptools` by :\r\n\r\n    $ sudo wget https://pypi.python.org/packages/source/s/setuptools/setuptools-0.6c11.tar.gz#md5=7df2a529a074f613b509fb44feefefe74e\r\n    $ tar -zxvf setuptools-0.6c11.tar.gz\r\n    $ cd setuptools-0.6c11/\r\n    $ sudo python setup.py build\r\n    $ sudo python setup.py install\r\n    $ sudo pip install --upgrade setuptools\r\n\r\nthen everything will be fine."}, {"tags": [], "down_vote_count": 0, "creation_date": 1461587280, "answer_id": 36840582, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1461587280, "body_markdown": "I use CentOS 6.7, and my python was just upgrade from 2.6.6 to 2.7.11, after tried so many different answer, finally the following one does the job:\r\n\r\n    sudo yum install python-devel\r\n\r\nHope help someone in the same situation."}, {"tags": [], "down_vote_count": 0, "creation_date": 1462576313, "answer_id": 37082662, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1462576313, "body_markdown": "Looks like they have moved away from bitbucket and are now on github (https://github.com/pypa/setuptools)\r\n\r\nCommand to run is:\r\n\r\n    wget https://bootstrap.pypa.io/ez_setup.py -O - | sudo python"}, {"tags": [], "down_vote_count": 1, "creation_date": 1465206380, "answer_id": 37654235, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1465206380, "body_markdown": "None of the posted answers worked for me, so I reinstalled pip and it worked!\r\n\r\n    sudo apt-get install python-setuptools python-dev build-essential \r\n\r\n    sudo easy_install pip \r\n\r\n    pip install --upgrade setuptools\r\n\r\n(reference: http://www.saltycrane.com/blog/2010/02/how-install-pip-ubuntu/)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1465889565, "answer_id": 37805688, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1465889565, "body_markdown": "For me, it turned out to be a permissions problem on `site-packages`. Since it&#39;s only my dev environment, I raised the permissions and everything is working again:\r\n\r\n    sudo chmod -R a+rwx /path/to/my/venv/lib/python2.7/site-packages/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1472822839, "answer_id": 39293614, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1472822839, "body_markdown": "I ran into this problem after updating my Ubuntu build.  It seems to have gone through and removed set up tools in all of my virtual environments.\r\n\r\nTo remedy this I reinstalled the virtual environment back into the target directory.  This cleaned up missing setup tools and got things running again.\r\n\r\ne.g.:\r\n\r\n    ~/RepoDir/TestProject$ virtualenv TestEnvironmentDir\r\n\r\n\r\n\r\n    "}, {"tags": [], "down_vote_count": 0, "creation_date": 1473245538, "answer_id": 39367930, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1473245538, "body_markdown": "For me a good fix was to use `--no-download` option to virtualenv (`VIRTUALENV_NO_DOWNLOAD=1 tox` for tox.)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1473268277, "answer_id": 39375746, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1473268277, "body_markdown": "On Opensuse 42.1 the following fixed this issue:\r\n\r\n    zypper in python-Pygments"}, {"tags": [], "down_vote_count": 0, "creation_date": 1478526591, "answer_id": 40466836, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1490102439, "last_edit_date": 1490102439, "body_markdown": "Needed a little bit more sudo. Then used easy_install to install pip. Works.\r\n\r\n    sudo wget https://bootstrap.pypa.io/ez_setup.py -O - | sudo python\r\n    sudo easy_install pip\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1492683907, "answer_id": 43516866, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1492684224, "last_edit_date": 1492684224, "body_markdown": "**ImportError: No module named pkg_resources:** the solution is to reinstall python pip using the following  Command are under.\r\n\r\n**Step: 1** Login in root user.\r\n\r\n    sudo su root\r\n**Step: 2** Uninstall python-pip package if existing.\r\n\r\n    apt-get purge -y python-pip\r\n**Step: 3** Download files using wget command(File download in `pwd` )\r\n\r\n    wget https://bootstrap.pypa.io/get-pip.py\r\n**Step: 4** Run python file.\r\n\r\n    python ./get-pip.py\r\n**Step: 5** Finaly exicute installation  command.  \r\n\r\n    apt-get install python-pip\r\n\r\n**Note:** User must be root."}, {"tags": [], "down_vote_count": 0, "creation_date": 1498005815, "answer_id": 44665124, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1498005815, "body_markdown": "I experienced that error in my Google App Engine environment. And `pip install -t lib setuptools` fixed the issue."}, {"tags": [], "down_vote_count": 0, "creation_date": 1504092369, "answer_id": 45959156, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1504092369, "body_markdown": "After trying several of these answers, then reaching out to a colleague, what worked for me on Ubuntu 16.04 was:\r\n\r\n    pip install --force-reinstall -U setuptools\r\n    pip install --force-reinstall -U pip\r\n\r\nIn my case, it was only an old version of pillow 3.1.1 that was having trouble (pillow 4.x worked fine), and that&#39;s now resolved!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1505323026, "answer_id": 46203387, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1505323026, "body_markdown": "The following solution proposed by Tukadiya Ramesh worked for me however I want to point out that you must use correct binaries/tools matching your environment, like for me I have python3.6 (python 3) installed:\r\n\r\n&gt; ImportError: No module named pkg_resources: the solution is to reinstall python pip using the following Command are under.\r\n&gt; \r\n&gt; Step: 1 Login in root user.\r\n&gt; \r\n&gt; sudo su root \r\n&gt; \r\n&gt; Step: 2 Uninstall python-pip package if existing.\r\n&gt; \r\n&gt; apt-get purge -y python-pip (**use python3-pip if error is pointing to ../python3/..**)\r\n&gt; \r\n&gt; Step: 3 Download files using wget command(File download in pwd )\r\n&gt; \r\n&gt; wget https://bootstrap.pypa.io/get-pip.py (**there is version 3.2 available, use that according to your env**)\r\n&gt; \r\n&gt; Step: 4 Run python file.\r\n&gt; \r\n&gt; python ./get-pip.py (**if error is related to python 3 then you want to use python3 or python3.6 etc. [as per your env.]**)\r\n&gt;\r\n&gt; Step: 5 Finaly execute installation command.\r\n&gt; \r\n&gt; apt-get install python-pip (**again, use python3-pip as in step 2**)\r\n&gt; \r\n&gt; Note: User must be root.\r\n\r\nP.S. this solved issue with my update-manager in Ubuntu 16. It kept on crashing with errors related to Python import. If you are having same issue try running `sudo aptd`, if it throws error (sorry I dont have exact) related to Python then you are facing same problem as me."}, {"tags": [], "down_vote_count": 0, "creation_date": 1511034038, "answer_id": 47370249, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1511034038, "body_markdown": "If you are using Python 3, you should use pip3 instead of pip. The command looks like `$ pip3 install requirements.txt`\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1512041048, "answer_id": 47572287, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1512042368, "last_edit_date": 1512042368, "body_markdown": "I have had the same problem when I used easy-install to install pip for python 2.7.14. For me the solution was (might not be the best, but worked for me, and this is probably the simplest) that the folder that contained the `easy-install.py` also contained a folder `pkg_resources`, and i have copy-pasted this folder into the same folder where my `pip-script.py` script was (`python27\\Scripts`).\r\nSince then, I found it in the `python27\\Lib\\site-packages\\pip-9.0.1-py2.7.egg\\pip\\_vendor` folder as well, it might be a better solution to modify the `pip-script.py` file to import this."}], "title": "No module named pkg_resources", "view_count": 303485, "answer_count": 28, "code_snippet": ["<code>Traceback (most recent call last):\n  File \"/var/www/mydir/virtualenvs/dev/bin/pip\", line 5, in &lt;module&gt;\n    from pkg_resources import load_entry_point\nImportError: No module named pkg_resources\n</code>", "<code>sh setuptools-0.6c11-py2.6.egg --install-dir /var/www/mydir/virtualenvs/dev/lib/python2.6/site-packages\n</code>", "<code>ImportError</code>", "<code>setuptools</code>", "<code>setuptools</code>", "<code>wget https://bootstrap.pypa.io/ez_setup.py -O - | python\n</code>", "<code>wget</code>", "<code>curl https://bootstrap.pypa.io/ez_setup.py | python\n</code>", "<code>sudo</code>", "<code>distribute</code>", "<code>setuptools</code>", "<code>distribute</code>", "<code>setuptools</code>", "<code>sudo python</code>", "<code>easy_install pip</code>", "<code>distribute</code>", "<code>setuptools</code>", "<code>sudo apt-get install --reinstall python-pkg-resources\n</code>", "<code>pip install --upgrade setuptools\npip install --upgrade distribute \n</code>", "<code>pip install --upgrade setuptools</code>", "<code>pip install --upgrade setuptools --user</code>", "<code>pip install --upgrade setuptools</code>", "<code>No module named pkg_resources</code>", "<code>pip install --upgrade distribute</code>", "<code>--distribute</code>", "<code>distribute</code>", "<code>venv</code>", "<code>$ deactivate\n$ rmvirtualenv yourenv\n$ mkvirtualenv yourenv --distribute\n$ workon yourenv\n$ pip install -r requirements.txt\n</code>", "<code>pip install -U distribute</code>", "<code>ez_setup.py</code>", "<code>curl http://peak.telecommunity.com/dist/ez_setup.py | python\n</code>", "<code>sudo</code>", "<code>sudo curl http://peak.telecommunity.com/dist/ez_setup.py | sudo python\n</code>", "<code>curl http://peak.telecommunity.com/dist/ez_setup.py | sudo python</code>", "<code>yum install python-setuptools\n</code>", "<code>sudo apt-get install python3-setuptools</code>", "<code>sudo yum reinstall python-setuptools</code>", "<code>sudo wget https://bootstrap.pypa.io/ez_setup.py -O - | sudo python\nsudo easy_install pip\n</code>", "<code>sudo</code>", "<code>/Library/Python/2.7/site-packages/setuptools</code>", "<code>/Library/Python/2.7/site-packages/</code>", "<code>virtualenv --system-site-packages /DESTINATION DIRECTORY</code>", "<code>pkg_rousources.py</code>", "<code>Installing easy_install script to /path/env/bin\nerror: /path/env/bin/easy_install: Permission denied\n</code>", "<code>pip install</code>", "<code>wget https://bootstrap.pypa.io/ez_setup.py -O - | sudo python\n</code>", "<code>site-packages</code>", "<code>sudo chmod -R a+rwx /path/to/my/venv/lib/python2.7/site-packages/\n</code>", "<code>--setuptools</code>", "<code>VIRTUALENV_SETUPTOOLS=1</code>", "<code>pip install --force-reinstall -U setuptools\npip install --force-reinstall -U pip\n</code>", "<code>python get-pip</code>", "<code>easy_install pip</code>", "<code>setuptools</code>", "<code>$ sudo wget https://pypi.python.org/packages/source/s/setuptools/setuptools-0.6c11.tar.gz#md5=7df2a529a074f613b509fb44feefefe74e\n$ tar -zxvf setuptools-0.6c11.tar.gz\n$ cd setuptools-0.6c11/\n$ sudo python setup.py build\n$ sudo python setup.py install\n$ sudo pip install --upgrade setuptools\n</code>", "<code>sudo yum install python-devel\n</code>", "<code>sudo apt-get install python-setuptools python-dev build-essential \n\nsudo easy_install pip \n\npip install --upgrade setuptools\n</code>", "<code>~/RepoDir/TestProject$ virtualenv TestEnvironmentDir\n</code>", "<code>--no-download</code>", "<code>VIRTUALENV_NO_DOWNLOAD=1 tox</code>", "<code>zypper in python-Pygments\n</code>", "<code>sudo su root\n</code>", "<code>apt-get purge -y python-pip\n</code>", "<code>pwd</code>", "<code>wget https://bootstrap.pypa.io/get-pip.py\n</code>", "<code>python ./get-pip.py\n</code>", "<code>apt-get install python-pip\n</code>", "<code>pip install -t lib setuptools</code>", "<code>sudo aptd</code>", "<code>$ pip3 install requirements.txt</code>", "<code>easy-install.py</code>", "<code>pkg_resources</code>", "<code>pip-script.py</code>", "<code>python27\\Scripts</code>", "<code>python27\\Lib\\site-packages\\pip-9.0.1-py2.7.egg\\pip\\_vendor</code>", "<code>pip-script.py</code>"], "path": "stack.django"}, {"tags": ["python", "django", "django-admin", "modeladmin"], "creation_date": 1222971979, "body_markdown": "I have a Person model that has a foreign key relationship to Book.  Book has a number of fields, but I&#39;m most concerned about &quot;author&quot; (a standard CharField).\r\n\r\nWith that being said, in my PersonAdmin model, I&#39;d like to display &quot;book.author&quot; using &quot;list_display&quot;.  I&#39;ve tried all of the obvious methods for doing so (see below), but nothing seems to work.  Any suggestions?\r\n\r\n    class PersonAdmin(admin.ModelAdmin):\r\n      list_display = [&#39;book.author&#39;,]", "last_edit_date": 1432014767, "up_vote_count": 186, "link": "https://stackoverflow.com/questions/163823/can-list-display-in-a-django-modeladmin-display-attributes-of-foreignkey-field", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1222973603, "answer_id": 163968, "path": "stack.django.answer", "score": 19, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1347417902, "last_edit_date": 1347417902, "body_markdown": "According to the documentation, you can only display the `__unicode__` representation of a ForeignKey:\r\n\r\nhttp://docs.djangoproject.com/en/dev/ref/contrib/admin/#list-display\r\n\r\nSeems odd that it doesn&#39;t support the `&#39;book__author&#39;` style format which is used everywhere else in the DB API.\r\n\r\nTurns out there&#39;s [a ticket for this feature][1], which is marked as Won&#39;t Fix.\r\n\r\n\r\n  [1]: http://code.djangoproject.com/ticket/5863"}, {"tags": [], "down_vote_count": 2, "creation_date": 1222981916, "answer_id": 164631, "path": "stack.django.answer", "score": 315, "up_vote_count": 317, "is_accepted": true, "last_activity_date": 1406304606, "last_edit_date": 1406304606, "body_markdown": "As another option, you can do look ups like:\r\n\r\n    class UserAdmin(admin.ModelAdmin):\r\n        list_display = (..., &#39;get_author&#39;)\r\n        \r\n        def get_author(self, obj):\r\n            return obj.book.author\r\n        get_author.short_description = &#39;Author&#39;\r\n        get_author.admin_order_field = &#39;book__author&#39;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1232754030, "answer_id": 475086, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1455651892, "last_edit_date": 1495541894, "body_markdown": "This one&#39;s already accepted, but if there are any other dummies out there (like me) that didn&#39;t immediately get it from the [presently accepted answer][1], here&#39;s a bit more detail. \r\n\r\nThe model class referenced by the `ForeignKey` needs to have a `__unicode__` method within it, like here: \r\n\r\n    class Category(models.Model):\r\n\t    name = models.CharField(max_length=50)\r\n\r\n\t    def __unicode__(self):\r\n\t\t    return self.name\r\n\r\nThat made the difference for me, and should apply to the above scenario.  This works on Django 1.0.2.\r\n\r\n  [1]: https://stackoverflow.com/a/164631/58668"}, {"tags": [], "down_vote_count": 0, "creation_date": 1233337303, "answer_id": 496453, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1233337303, "body_markdown": "You can show whatever you want in list display by using a callable. It would look like this:\r\n&lt;pre&gt;\r\n\r\ndef book_author(object):\r\n  return object.book.author\r\n\r\nclass PersonAdmin(admin.ModelAdmin):\r\n  list_display = [book_author,]&lt;/pre&gt;\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1237940828, "answer_id": 679791, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1237940828, "body_markdown": "AlexRobbins&#39; answer worked for me, except that the first two lines need to be in the model (perhaps this was assumed?), and should reference self:\r\n\r\n    def book_author(self):\r\n      return self.book.author\r\n\r\nThen the admin part works nicely."}, {"tags": [], "down_vote_count": 0, "creation_date": 1280308435, "answer_id": 3351431, "path": "stack.django.answer", "score": 56, "up_vote_count": 56, "is_accepted": false, "last_activity_date": 1288770061, "last_edit_date": 1288770061, "body_markdown": "Like the rest, I went with callables too. But they have one downside: by default, you can&#39;t order on them. Fortunately, there is a solution for that:\r\n\r\n    def author(self):\r\n        return self.book.author\r\n    author.admin_order_field  = &#39;book__author&#39;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1359926518, "answer_id": 14677451, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1359926518, "body_markdown": "I just posted a snippet that makes admin.ModelAdmin support &#39;__&#39; syntax:\r\n\r\nhttp://djangosnippets.org/snippets/2887/\r\n\r\nSo you can do:\r\n\r\n    class PersonAdmin(RelatedFieldAdmin):\r\n        list_display = [&#39;book__author&#39;,]\r\n\r\nThis is basically just doing the same thing described in the other answers, but it automatically takes care of (1) setting admin_order_field (2) setting short_description and (3) modifying the queryset to avoid a database hit for each row."}, {"tags": [], "down_vote_count": 0, "creation_date": 1391085033, "answer_id": 21456615, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1391085033, "body_markdown": "if you try it in Inline, you wont succeed unless:\r\n\r\nin your inline:\r\n\r\n    class AddInline(admin.TabularInline):\r\n        readonly_fields = [&#39;localname&#39;,]\r\n        model = MyModel\r\n        fields = (&#39;localname&#39;,)\r\nin your model (MyModel):\r\n\r\n    class MyModel(models.Model):\r\n        localization = models.ForeignKey(Localizations)\r\n          \r\n        def localname(self):\r\n            return self.localization.name\r\n        "}, {"tags": [], "down_vote_count": 0, "creation_date": 1400536514, "answer_id": 23747842, "path": "stack.django.answer", "score": 80, "up_vote_count": 80, "is_accepted": false, "last_activity_date": 1472990570, "last_edit_date": 1472990570, "body_markdown": "Despite all the great answers above and due to me being new to Django, I was still stuck.  Here&#39;s my explanation from a very newbie perspective.\r\n\r\n**models.py**\r\n\r\n    class Author(models.Model):\r\n        name = models.CharField(max_length=255)\r\n\r\n    class Book(models.Model):\r\n        author = models.ForeignKey(Author)\r\n        title = models.CharField(max_length=255)\r\n\r\n**admin.py (Incorrect Way)** - you think it would work by using &#39;model__field&#39; to reference, but it doesn&#39;t\r\n\r\n    class BookAdmin(admin.ModelAdmin):\r\n        model = Book\r\n        list_display = [&#39;title&#39;, &#39;author__name&#39;, ]\r\n     \r\n    admin.site.register(Book, BookAdmin)\r\n\r\n**admin.py (Correct Way)**  - this is how you reference a foreign key name the Django way\r\n\r\n    class BookAdmin(admin.ModelAdmin):\r\n        model = Book\r\n        list_display = [&#39;title&#39;, &#39;get_name&#39;, ]\r\n\r\n        def get_name(self, obj):\r\n            return obj.author.name\r\n        get_name.admin_order_field  = &#39;author&#39;  #Allows column order sorting\r\n        get_name.short_description = &#39;Author Name&#39;  #Renames column head\r\n\r\n        #Filtering on side - for some reason, this works\r\n        #list_filter = [&#39;title&#39;, &#39;author__name&#39;]\r\n    \r\n    admin.site.register(Book, BookAdmin)\r\n\r\nFor additional reference, see the Django model link [here][1]\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/dev/ref/contrib/admin/#list-display"}, {"tags": [], "down_vote_count": 0, "creation_date": 1422444040, "answer_id": 28190954, "path": "stack.django.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1448870715, "last_edit_date": 1448870715, "body_markdown": "Please note that adding the `get_author` function would slow the list_display in the admin, because showing each person would make a SQL query.\r\n\r\nTo avoid this, you need to modify `get_queryset` method in PersonAdmin, for example:\r\n\r\n    def get_queryset(self, request):\r\n        return super(PersonAdmin,self).get_queryset(request).select_related(&#39;book&#39;)\r\n\r\n&gt; Before: 73 queries in 36.02ms (67 duplicated queries in admin)\r\n\r\n&gt; After: 6 queries in 10.81ms"}, {"tags": [], "down_vote_count": 0, "creation_date": 1452570150, "answer_id": 34735225, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1452570150, "body_markdown": "If you have a lot of relation attribute fields to use in `list_display` and do not want create a function (and it&#39;s attributes) for each one, a dirt but simple solution would be override the `ModelAdmin` instace `__getattr__` method, creating the callables on the fly:\r\n\r\n&lt;!-- language: python --&gt;\r\n\r\n    class DynamicLookupMixin(object):\r\n        &#39;&#39;&#39;\r\n        a mixin to add dynamic callable attributes like &#39;book__author&#39; which\r\n        return a function that return the instance.book.author value\r\n        &#39;&#39;&#39;\r\n    \r\n        def __getattr__(self, attr):\r\n            if (&#39;__&#39; in attr\r\n                and not attr.startswith(&#39;_&#39;)\r\n                and not attr.endswith(&#39;_boolean&#39;)\r\n                and not attr.endswith(&#39;_short_description&#39;)):\r\n    \r\n                def dyn_lookup(instance):\r\n                    # traverse all __ lookups\r\n                    return reduce(lambda parent, child: getattr(parent, child),\r\n                                  attr.split(&#39;__&#39;),\r\n                                  instance)\r\n    \r\n                # get admin_order_field, boolean and short_description\r\n                dyn_lookup.admin_order_field = attr\r\n                dyn_lookup.boolean = getattr(self, &#39;{}_boolean&#39;.format(attr), False)\r\n                dyn_lookup.short_description = getattr(\r\n                    self, &#39;{}_short_description&#39;.format(attr),\r\n                    attr.replace(&#39;_&#39;, &#39; &#39;).capitalize())\r\n    \r\n                return dyn_lookup\r\n    \r\n            # not dynamic lookup, default behaviour\r\n            return self.__getattribute__(attr)\r\n    \r\n\r\n    # use examples    \r\n\r\n    @admin.register(models.Person)\r\n    class PersonAdmin(admin.ModelAdmin, DynamicLookupMixin):\r\n        list_display = [&#39;book__author&#39;, &#39;book__publisher__name&#39;,\r\n                        &#39;book__publisher__country&#39;]\r\n    \r\n        # custom short description\r\n        book__publisher__country_short_description = &#39;Publisher Country&#39;\r\n    \r\n    \r\n    @admin.register(models.Product)\r\n    class ProductAdmin(admin.ModelAdmin, DynamicLookupMixin):\r\n        list_display = (&#39;name&#39;, &#39;category__is_new&#39;)\r\n    \r\n        # to show as boolean field\r\n        category__is_new_boolean = True\r\n\r\nAs [gist here][1]\r\n\r\nCallable especial attributes like `boolean` and `short_description` must be defined as `ModelAdmin` attributes, eg `book__author_verbose_name = &#39;Author name&#39;` and `category__is_new_boolean = True`.\r\n\r\nThe callable `admin_order_field` attribute is defined automatically.\r\n\r\nDon&#39;t forget to use the [list_select_related][2] attribute in your `ModelAdmin` to make Django avoid aditional queries.\r\n\r\n\r\n  [1]: https://gist.github.com/cauethenorio/9db40c59cf406bf328fd\r\n  [2]: https://docs.djangoproject.com/en/1.9/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_select_related &quot;list_select_related&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1464431455, "answer_id": 37497913, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1464431455, "body_markdown": "There is a very easy to use package available in PyPI that handles exactly that: [django-related-admin][1]. You can also [see the code in GitHub][2].\r\n\r\nUsing this, what you want to achieve is as simple as:\r\n\r\n    class PersonAdmin(RelatedFieldAdmin):\r\n        list_display = [&#39;book__author&#39;,]\r\n\r\nBoth links contain full details of installation and usage so I won&#39;t paste them here in case they change.\r\n\r\nJust as a side note, if you&#39;re already using something other than `model.Admin` (e.g. I was using `SimpleHistoryAdmin` instead), you can do this: `class MyAdmin(SimpleHistoryAdmin, RelatedFieldAdmin)`.\r\n\r\n\r\n  [1]: https://pypi.python.org/pypi/django-related-admin\r\n  [2]: https://github.com/PetrDlouhy/django-related-admin"}, {"tags": [], "down_vote_count": 3, "creation_date": 1474555721, "answer_id": 39642294, "path": "stack.django.answer", "score": -3, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1474555721, "body_markdown": "I prefer this:\r\n\r\n    class CoolAdmin(admin.ModelAdmin):\r\n        list_display = (&#39;pk&#39;, &#39;submodel__field&#39;)\r\n    \r\n        @staticmethod\r\n        def submodel__field(obj):\r\n            return obj.submodel.field"}], "title": "Can &quot;list_display&quot; in a Django ModelAdmin display attributes of ForeignKey fields?", "view_count": 98315, "answer_count": 13, "code_snippet": ["<code>class PersonAdmin(admin.ModelAdmin):\n  list_display = ['book.author',]\n</code>", "<code>class UserAdmin(admin.ModelAdmin):\n    list_display = (..., 'get_author')\n\n    def get_author(self, obj):\n        return obj.book.author\n    get_author.short_description = 'Author'\n    get_author.admin_order_field = 'book__author'\n</code>", "<code>'%s'%(obj.book.author)</code>", "<code>obj.book.author</code>", "<code>class Author(models.Model):\n    name = models.CharField(max_length=255)\n\nclass Book(models.Model):\n    author = models.ForeignKey(Author)\n    title = models.CharField(max_length=255)\n</code>", "<code>class BookAdmin(admin.ModelAdmin):\n    model = Book\n    list_display = ['title', 'author__name', ]\n\nadmin.site.register(Book, BookAdmin)\n</code>", "<code>class BookAdmin(admin.ModelAdmin):\n    model = Book\n    list_display = ['title', 'get_name', ]\n\n    def get_name(self, obj):\n        return obj.author.name\n    get_name.admin_order_field  = 'author'  #Allows column order sorting\n    get_name.short_description = 'Author Name'  #Renames column head\n\n    #Filtering on side - for some reason, this works\n    #list_filter = ['title', 'author__name']\n\nadmin.site.register(Book, BookAdmin)\n</code>", "<code>def author(self):\n    return self.book.author\nauthor.admin_order_field  = 'book__author'\n</code>", "<code>__unicode__</code>", "<code>'book__author'</code>", "<code>book__author</code>", "<code>get_author</code>", "<code>get_queryset</code>", "<code>def get_queryset(self, request):\n    return super(PersonAdmin,self).get_queryset(request).select_related('book')\n</code>", "<code>class PersonAdmin(RelatedFieldAdmin):\n    list_display = ['book__author',]\n</code>", "<code>AttributeError: type object 'BaseModel' has no attribute '__metaclass__'</code>", "<code>ForeignKey</code>", "<code>__unicode__</code>", "<code>class Category(models.Model):\n    name = models.CharField(max_length=50)\n\n    def __unicode__(self):\n        return self.name\n</code>", "<code>def __str__(self):</code>", "<code>class PersonAdmin(RelatedFieldAdmin):\n    list_display = ['book__author',]\n</code>", "<code>model.Admin</code>", "<code>SimpleHistoryAdmin</code>", "<code>class MyAdmin(SimpleHistoryAdmin, RelatedFieldAdmin)</code>", "<code>class AddInline(admin.TabularInline):\n    readonly_fields = ['localname',]\n    model = MyModel\n    fields = ('localname',)\n</code>", "<code>class MyModel(models.Model):\n    localization = models.ForeignKey(Localizations)\n\n    def localname(self):\n        return self.localization.name\n</code>", "<code>list_display</code>", "<code>ModelAdmin</code>", "<code>__getattr__</code>", "<code>class DynamicLookupMixin(object):\n    '''\n    a mixin to add dynamic callable attributes like 'book__author' which\n    return a function that return the instance.book.author value\n    '''\n\n    def __getattr__(self, attr):\n        if ('__' in attr\n            and not attr.startswith('_')\n            and not attr.endswith('_boolean')\n            and not attr.endswith('_short_description')):\n\n            def dyn_lookup(instance):\n                # traverse all __ lookups\n                return reduce(lambda parent, child: getattr(parent, child),\n                              attr.split('__'),\n                              instance)\n\n            # get admin_order_field, boolean and short_description\n            dyn_lookup.admin_order_field = attr\n            dyn_lookup.boolean = getattr(self, '{}_boolean'.format(attr), False)\n            dyn_lookup.short_description = getattr(\n                self, '{}_short_description'.format(attr),\n                attr.replace('_', ' ').capitalize())\n\n            return dyn_lookup\n\n        # not dynamic lookup, default behaviour\n        return self.__getattribute__(attr)\n\n\n# use examples    \n\n@admin.register(models.Person)\nclass PersonAdmin(admin.ModelAdmin, DynamicLookupMixin):\n    list_display = ['book__author', 'book__publisher__name',\n                    'book__publisher__country']\n\n    # custom short description\n    book__publisher__country_short_description = 'Publisher Country'\n\n\n@admin.register(models.Product)\nclass ProductAdmin(admin.ModelAdmin, DynamicLookupMixin):\n    list_display = ('name', 'category__is_new')\n\n    # to show as boolean field\n    category__is_new_boolean = True\n</code>", "<code>boolean</code>", "<code>short_description</code>", "<code>ModelAdmin</code>", "<code>book__author_verbose_name = 'Author name'</code>", "<code>category__is_new_boolean = True</code>", "<code>admin_order_field</code>", "<code>ModelAdmin</code>", "<code>def book_author(self):\n  return self.book.author\n</code>", "<code>class CoolAdmin(admin.ModelAdmin):\n    list_display = ('pk', 'submodel__field')\n\n    @staticmethod\n    def submodel__field(obj):\n        return obj.submodel.field\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "django-models", "django-queryset"], "creation_date": 1238096865, "body_markdown": "In Django model QuerySets, I see that there is a `__gt` and `__lt` for comparitive values, but is there a `__ne`/`!=`/`&lt;&gt;` (**not equals**?)\r\n\r\nI want to filter out using a not equals:\r\n\r\nExample:\r\n\r\n    Model:\r\n        bool a;\r\n        int x;\r\n\r\nI want\r\n\r\n    results = Model.objects.exclude(a=true, x!=5)\r\n\r\nThe `!=` is not correct syntax. I tried `__ne`, `&lt;&gt;`.\r\n\r\nI ended up using:\r\n\r\n    results = Model.objects.exclude(a=true, x__lt=5).exclude(a=true, x__gt=5)", "last_edit_date": 1450510664, "up_vote_count": 464, "link": "https://stackoverflow.com/questions/687295/how-do-i-do-a-not-equal-in-django-queryset-filtering", "_childDocuments_": [{"tags": [], "down_vote_count": 4, "creation_date": 1238097245, "answer_id": 687316, "path": "stack.django.answer", "score": 7, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1238098314, "last_edit_date": 1238098314, "body_markdown": "The last bit of code will exclude all objects where x!=5 and a is True.  Try this:\r\n\r\n    results = Model.objects.filter(a=False, x=5)\r\n\r\nRemember, the = sign in the above line is assigning False to the parameter a and the number 5 to the parameter x.  It&#39;s not checking for equality.  Thus, there isn&#39;t really any way to use the != symbol in a query call."}, {"tags": [], "down_vote_count": 2, "creation_date": 1248112718, "answer_id": 1154977, "path": "stack.django.answer", "score": 487, "up_vote_count": 489, "is_accepted": true, "last_activity_date": 1518090500, "last_edit_date": 1518090500, "body_markdown": "Maybe [Q objects](http://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects) could be of help for this problem. I&#39;ve never used them but it seems they can be negated and combined much like normal python expressions.\r\n\r\nUpdate: I Just tried it out, it seems to work pretty well:\r\n\r\n    &gt;&gt;&gt; from myapp.models import Entry\r\n    &gt;&gt;&gt; from django.db.models import Q\r\n\r\n    &gt;&gt;&gt; Entry.objects.filter(~Q(id = 3))\r\n\r\n    [&lt;Entry: Entry object&gt;, &lt;Entry: Entry object&gt;, &lt;Entry: Entry object&gt;, ...]"}, {"tags": [], "down_vote_count": 2, "creation_date": 1248113222, "answer_id": 1155013, "path": "stack.django.answer", "score": 95, "up_vote_count": 97, "is_accepted": false, "last_activity_date": 1248113222, "last_edit_date": 1495541904, "body_markdown": "the `field=value` syntax in queries is a shorthand for `field__exact=value`.  That is to say that [Django puts query operators on query fields in the identifiers][1].  Django supports the following operators:\r\n\r\n    exact\r\n    iexact\r\n    contains\r\n    icontains\r\n    in\r\n    gt\r\n    gte\r\n    lt\r\n    lte\r\n    startswith\r\n    istartswith\r\n    endswith\r\n    iendswith\r\n    range\r\n    year\r\n    month\r\n    day\r\n    week_day\r\n    isnull\r\n    search\r\n    regex\r\n    iregex\r\n\r\nI&#39;m sure by combining these with the Q objects as [Dave Vogt suggests][2] and using `filter()` or `exclude()` as [Jason Baker suggests][3] you&#39;ll get exactly what you need for just about any possible query.\r\n\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/ref/models/querysets/#id7\r\n  [2]: https://stackoverflow.com/questions/687295/how-do-i-do-a-not-equal-in-django-queryset-filtering/1154977#1154977\r\n  [3]: https://stackoverflow.com/questions/687295/how-do-i-do-a-not-equal-in-django-queryset-filtering/687316#687316"}, {"tags": [], "down_vote_count": 1, "creation_date": 1289346973, "answer_id": 4139956, "path": "stack.django.answer", "score": 443, "up_vote_count": 444, "is_accepted": false, "last_activity_date": 1289346973, "body_markdown": "Your query appears to have a double negative, you want to exclude all rows where x is not 5, so in other words you want to include all rows where x IS 5. I believe this will do the trick. \r\n\r\n    results = Model.objects.filter(x=5).exclude(a=true)\r\n\r\nTo answer your specific question, there is no &quot;not equal to&quot; but that&#39;s probably because django has both &quot;filter&quot; and &quot;exclude&quot; methods available so you can always just switch the logic round to get the desired result."}, {"tags": [], "down_vote_count": 0, "creation_date": 1295361256, "answer_id": 4725256, "path": "stack.django.answer", "score": 37, "up_vote_count": 37, "is_accepted": false, "last_activity_date": 1397080097, "last_edit_date": 1397080097, "body_markdown": "While with the Models, you can filter with `=`, `__gt`, `__gte`, `__lt`, `__lte`, you cannot use `ne`, `!=` or `&lt;&gt;`. However, you can achieve better filtering on using the Q object.\r\n\r\nYou can avoid chaining `QuerySet.filter()` and `QuerySet.exlude()`, and use this:\r\n\r\n    from django.db.models import Q\r\n    object_list = QuerySet.filter(~Q(field=&#39;not wanted&#39;), field=&#39;wanted&#39;)\r\n    "}, {"tags": [], "down_vote_count": 0, "creation_date": 1427184447, "answer_id": 29227603, "path": "stack.django.answer", "score": 51, "up_vote_count": 51, "is_accepted": false, "last_activity_date": 1427184447, "body_markdown": "It&#39;s easy to create a custom lookup with Django 1.7. There&#39;s an `__ne` lookup example in [Django official documentation](https://docs.djangoproject.com/en/1.7/howto/custom-lookups/#a-simple-lookup-example).\r\n\r\nYou need to create the lookup itself first:\r\n\r\n    from django.db.models import Lookup\r\n    \r\n    class NotEqual(Lookup):\r\n        lookup_name = &#39;ne&#39;\r\n    \r\n        def as_sql(self, qn, connection):\r\n            lhs, lhs_params = self.process_lhs(qn, connection)\r\n            rhs, rhs_params = self.process_rhs(qn, connection)\r\n            params = lhs_params + rhs_params\r\n            return &#39;%s &lt;&gt; %s&#39; % (lhs, rhs), params\r\n\r\nThen you need to register it:\r\n\r\n    from django.db.models.fields import Field\r\n    Field.register_lookup(NotEqual)\r\n\r\nAnd now you can use the `__ne` lookup in your queries like this:\r\n\r\n    results = Model.objects.exclude(a=True, x__ne=5)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1443171122, "answer_id": 32778343, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1452384911, "last_edit_date": 1452384911, "body_markdown": "You should use `filter` and `exclude` like this\r\n\r\n    results = Model.objects.exclude(a=true).filter(x=5)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1456319567, "answer_id": 35603223, "path": "stack.django.answer", "score": 46, "up_vote_count": 46, "is_accepted": false, "last_activity_date": 1491376717, "last_edit_date": 1491376717, "body_markdown": "In **Django 1.9/1.10** there are three options.\r\n\r\n1. [Chain `exclude` and `filter`][1]\r\n\r\n        results = Model.objects.exclude(a=true).filter(x=5)\r\n    \r\n2. Use [`Q()` objects][2] and the [`~` operator](https://docs.djangoproject.com/en/1.9/topics/db/queries/#complex-lookups-with-q-objects)\r\n\r\n        from django.db.models import Q\r\n        object_list = QuerySet.filter(~Q(a=True), x=5)\r\n\r\n3. Register a [custom lookup function][3]\r\n\r\n        from django.db.models import Lookup\r\n        from django.db.models.fields import Field\r\n\r\n        @Field.register_lookup\r\n        class NotEqual(Lookup):\r\n            lookup_name = &#39;ne&#39;\r\n        \r\n            def as_sql(self, compiler, connection):\r\n                lhs, lhs_params = self.process_lhs(compiler, connection)\r\n                rhs, rhs_params = self.process_rhs(compiler, connection)\r\n                params = lhs_params + rhs_params\r\n                return &#39;%s &lt;&gt; %s&#39; % (lhs, rhs), params\r\n\r\n    The `register_lookup` decorator was added in **Django 1.8** and\r\nenables custom lookup as usual:\r\n\r\n        results = Model.objects.exclude(a=True, x__ne=5)\r\n\r\n \r\n    \r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.9/topics/db/queries/#retrieving-specific-objects-with-filters\r\n  [2]: https://docs.djangoproject.com/en/1.9/ref/models/querysets/#q-objects\r\n  [3]: https://docs.djangoproject.com/en/1.9/howto/custom-lookups/#a-simple-lookup-example"}, {"tags": [], "down_vote_count": 0, "creation_date": 1461228278, "answer_id": 36764306, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1461228278, "body_markdown": "Pending design decision. Meanwhile, use ``exclude()``\r\n==========================================\r\n\r\nThe Django issue tracker has the remarkable [entry #5763][1],\r\ntitled _&quot;Queryset doesn&#39;t have a &quot;not equal&quot; filter operator&quot;_.\r\nIt is remarkable because (as of April 2016) it was \r\n&quot;opened 9 years ago&quot; (in the Django stone age),\r\n&quot;closed 4 years ago&quot;, and \r\n&quot;last changed 5 months ago&quot;.\r\n\r\nRead through the discussion, it is interesting.\r\nBasically, some people argue ``__ne`` should be added\r\nwhile others say ``exclude()`` is clearer and hence ``__ne``\r\nshould _not_ be added.\r\n\r\n(I agree with the former, because the latter argument is\r\nroughly equivalent to saying Python should not have ``!=`` because\r\nit has `==` and ``not`` already...)\r\n\r\n  [1]: https://code.djangoproject.com/ticket/5763"}, {"tags": [], "down_vote_count": 1, "creation_date": 1467031858, "answer_id": 38054461, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1467031858, "body_markdown": "What you are looking for are all objects that have either `a=false` **or** `x=5`. In Django, `|` serves as `OR` operator between querysets:\r\n\r\n    results = Model.objects.filter(a=false)|Model.objects.filter(x=5)"}, {"tags": [], "down_vote_count": 1, "creation_date": 1487765520, "answer_id": 42391127, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1487765520, "body_markdown": "&lt;pre&gt;results = Model.objects.filter(a = True).exclude(x = 5)&lt;/pre&gt; Generetes this sql: &lt;pre&gt;select * from tablex where a != 0 and x !=5&lt;/pre&gt;The sql depends on how your True/False field is represented, and the database engine. The django code is all you need though. \r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1515813817, "answer_id": 48236649, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1515813817, "body_markdown": "[Django-model-values][1] (disclosure: author) provides an implementation of the [NotEqual][2] lookup, as in [this answer][3].  It also provides syntactic support for it:\r\n\r\n    from model_values import F\r\n    Model.objects.exclude(F.x != 5, a=True)\r\n\r\n\r\n  [1]: https://pypi.org/project/django-model-values/\r\n  [2]: https://github.com/coady/django-model-values/blob/v0.5.1/model_values.py#L374\r\n  [3]: https://stackoverflow.com/a/29227603/36433\r\n  [4]: https://stackoverflow.com/users/1527304/dmitrii-mikhailov"}], "title": "How do I do a not equal in Django queryset filtering?", "view_count": 223558, "answer_count": 12, "code_snippet": ["<code>__gt</code>", "<code>__lt</code>", "<code>__ne</code>", "<code>!=</code>", "<code>&lt;&gt;</code>", "<code>Model:\n    bool a;\n    int x;\n</code>", "<code>results = Model.objects.exclude(a=true, x!=5)\n</code>", "<code>!=</code>", "<code>__ne</code>", "<code>&lt;&gt;</code>", "<code>results = Model.objects.exclude(a=true, x__lt=5).exclude(a=true, x__gt=5)\n</code>", "<code>a=true</code>", "<code>x=5</code>", "<code>a=true</code>", "<code>x!=5</code>", "<code>a=true</code>", "<code>x=5</code>", "<code>&gt;&gt;&gt; from myapp.models import Entry\n&gt;&gt;&gt; from django.db.models import Q\n\n&gt;&gt;&gt; Entry.objects.filter(~Q(id = 3))\n\n[&lt;Entry: Entry object&gt;, &lt;Entry: Entry object&gt;, &lt;Entry: Entry object&gt;, ...]\n</code>", "<code>results = Model.objects.filter(x=5).exclude(a=true)\n</code>", "<code>results = Model.objects.filter(a=true).exclude(x=5)</code>", "<code>exclude</code>", "<code>filter</code>", "<code>WHERE</code>", "<code>field=value</code>", "<code>field__exact=value</code>", "<code>exact\niexact\ncontains\nicontains\nin\ngt\ngte\nlt\nlte\nstartswith\nistartswith\nendswith\niendswith\nrange\nyear\nmonth\nday\nweek_day\nisnull\nsearch\nregex\niregex\n</code>", "<code>filter()</code>", "<code>exclude()</code>", "<code>tg=Tag.objects.filter(user=request.user).exclude(name__regex=r'^(public|url)$')</code>", "<code>icontains</code>", "<code>iexact</code>", "<code>exclude()</code>", "<code>OR</code>", "<code>exclude(Q(field1__queryop1=value1) | Q(field2__queryop2=value2))</code>", "<code>__ne</code>", "<code>from django.db.models import Lookup\n\nclass NotEqual(Lookup):\n    lookup_name = 'ne'\n\n    def as_sql(self, qn, connection):\n        lhs, lhs_params = self.process_lhs(qn, connection)\n        rhs, rhs_params = self.process_rhs(qn, connection)\n        params = lhs_params + rhs_params\n        return '%s &lt;&gt; %s' % (lhs, rhs), params\n</code>", "<code>from django.db.models.fields import Field\nField.register_lookup(NotEqual)\n</code>", "<code>__ne</code>", "<code>results = Model.objects.exclude(a=True, x__ne=5)\n</code>", "<code>exclude</code>", "<code>filter</code>", "<code>results = Model.objects.exclude(a=true).filter(x=5)\n</code>", "<code>Q()</code>", "<code>~</code>", "<code>from django.db.models import Q\nobject_list = QuerySet.filter(~Q(a=True), x=5)\n</code>", "<code>from django.db.models import Lookup\nfrom django.db.models.fields import Field\n\n@Field.register_lookup\nclass NotEqual(Lookup):\n    lookup_name = 'ne'\n\n    def as_sql(self, compiler, connection):\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        rhs, rhs_params = self.process_rhs(compiler, connection)\n        params = lhs_params + rhs_params\n        return '%s &lt;&gt; %s' % (lhs, rhs), params\n</code>", "<code>register_lookup</code>", "<code>results = Model.objects.exclude(a=True, x__ne=5)\n</code>", "<code>=</code>", "<code>__gt</code>", "<code>__gte</code>", "<code>__lt</code>", "<code>__lte</code>", "<code>ne</code>", "<code>!=</code>", "<code>&lt;&gt;</code>", "<code>QuerySet.filter()</code>", "<code>QuerySet.exlude()</code>", "<code>from django.db.models import Q\nobject_list = QuerySet.filter(~Q(field='not wanted'), field='wanted')\n</code>", "<code>filter</code>", "<code>exclude</code>", "<code>results = Model.objects.exclude(a=true).filter(x=5)\n</code>", "<code>exclude()</code>", "<code>__ne</code>", "<code>exclude()</code>", "<code>__ne</code>", "<code>!=</code>", "<code>==</code>", "<code>not</code>", "<code>results = Model.objects.filter(a=False, x=5)\n</code>", "<code>results = Model.objects.filter(a__in=[False,None],x=5)</code>", "<code>a=false</code>", "<code>x=5</code>", "<code>|</code>", "<code>OR</code>", "<code>results = Model.objects.filter(a=false)|Model.objects.filter(x=5)\n</code>", "<code>from model_values import F\nModel.objects.exclude(F.x != 5, a=True)\n</code>"], "path": "stack.django"}, {"tags": ["version-control", "mercurial"], "creation_date": 1248336368, "body_markdown": "*Inspired by [Git for beginners: The definitive practical guide][1].*\r\n\r\nThis is a compilation of information on using Mercurial for **beginners** for **practical** use.\r\n\r\nBeginner - a programmer who has touched source control without understanding it very well.\r\n\r\nPractical - covering situations that the majority of users often encounter - creating a repository, branching, merging, pulling/pushing from/to a remote repository, etc.\r\n\r\n&gt; **Notes**:\r\n&gt; \r\n&gt; * Explain how to get something done rather than how something is\r\n&gt; implemented.\r\n&gt; * Deal with one question per answer.\r\n&gt; * Answer clearly and as concisely as possible.\r\n&gt; * Edit/extend an existing answer rather than create a new answer on the\r\n&gt; same topic.\r\n&gt; * Please provide a link to the the [Mercurial wiki][2] or the [HG Book][3] for people who want to learn more.\r\n\r\nQuestions:\r\n\r\nInstallation/Setup\r\n------------------\r\n* [How to install Mercurial?][4]\r\n* [How to set up Mercurial?][5]\r\n* [How do you create a new project/repository?][6]\r\n* [How do you configure it to ignore files?][7]\r\n\r\nWorking with the code\r\n---------------------\r\n* [How do you get the latest code?][8]\r\n* [How do you check out code?][9]\r\n* [How do you commit changes?][10]\r\n* [How do you see what&#39;s uncommitted, or the status of your current codebase?][11]\r\n* [How do you remove files from the repository?][12]\r\n* How do you destroy unwanted commits?\r\n* [How do you compare two revisions of a file, or your current file and a previous revision?][13]\r\n* [How do you see the history of revisions to a file or repository?][14]\r\n* How do you handle binary files (visio docs, for instance, or compiler environments)?\r\n* How do you merge files changed at the &quot;same time&quot;?\r\n* [How do you revert a Changeset?][15]\r\n* [How do you go back to a previous version of the code?][16]\r\n* [How do you extract a patch from a specific changeset?][17]\r\n* How do you record that you renamed or deleted a file without using the Mercurial command?\r\n\r\nTagging, branching, releases, baselines\r\n---------------------------------------\r\n* [How do you &#39;mark&#39; &#39;tag&#39; or &#39;release&#39; a particular set of revisions for a particular set of files so you can always pull that one later?][18]\r\n* How do you pull a particular &#39;release&#39;?\r\n* [How do you branch?][19]\r\n* [How do you merge branches?][20]\r\n* [How do you merge parts of one branch into another branch?][28]\r\n\r\nOther\r\n-----\r\n* [Good GUI/IDE plugin for Mercurial? Advantages/disadvantages?][21]\r\n* Any other common tasks a beginner should know?\r\n* [How do I interface with Subversion?][22]\r\n\r\nOther Mercurial references\r\n--------------------------\r\n* [Mercurial: The Definitive Guide][23]\r\n* [Mercurial Wiki][24]\r\n* [Meet Mercurial | Peepcode Screencast][25]\r\n* [Mastering Mercurial | TekPub Screencast][26]\r\n* [Hg Init][27] - ground-up Mercurial tutorial\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide\r\n  [2]: http://mercurial.selenic.com/wiki/\r\n  [3]: http://hgbook.red-bean.com/read/\r\n  [4]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/1184108#1184108\r\n  [5]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/1402038#1402038\r\n  [6]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/1170356#1170356\r\n  [7]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/1170400#1170400\r\n  [8]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/1251593#1251593\r\n  [9]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/1387214#1387214\r\n  [10]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/1387249#1387249\r\n  [11]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/1174173#1174173\r\n  [12]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/2652038#2652038\r\n  [13]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/1387288#1387288\r\n  [14]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/1688455#1688455\r\n  [15]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/3353552#3353552\r\n  [16]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/3698654#3698654\r\n  [17]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/3904935#3904935\r\n  [18]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/1170430#1170430\r\n  [19]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/1170368#1170368\r\n  [20]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/1170373#1170373\r\n  [21]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/1551560#1551560\r\n  [22]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/1297249#1297249\r\n  [23]: http://hgbook.red-bean.com/read/\r\n  [24]: http://mercurial.selenic.com/wiki/\r\n  [25]: http://peepcode.com/products/meet-mercurial\r\n  [26]: http://tekpub.com/production/hg\r\n  [27]: http://hginit.com\r\n  [28]: https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide/4264059#4264059\r\n", "last_edit_date": 1509106849, "up_vote_count": 239, "link": "https://stackoverflow.com/questions/1170338/mercurial-for-beginners-the-definitive-practical-guide", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1248336610, "answer_id": 1170356, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1248336610, "body_markdown": "## How do you create a new project/repository? ##\r\n\r\n    $ hg init my-repository\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1248336888, "answer_id": 1170368, "path": "stack.django.answer", "score": 4, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1292018153, "last_edit_date": 1292018153, "body_markdown": "## How do you branch? ##\r\n  $ hg branch my-branch\r\n   \r\n\r\nor \r\n\r\n   $ hg clone original-repository my-branch\r\n\r\nThough it should be noted that **branch** creates a &quot;virtual&quot; directory  (i.e., the files stay the same, but hg treats them as if they were different inside the system), while **clone** creates an actual, complete copy.  Strictly speaking, **clone** isn&#39;t branching."}, {"tags": [], "down_vote_count": 1, "creation_date": 1248337031, "answer_id": 1170373, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1252700298, "last_edit_date": 1252700298, "body_markdown": "## How do you merge branches? ##\r\n\r\n    $ cd repository-where-i-want-to merge\r\n    $ hg pull branch-i-want-to-merge\r\n    $ hg merge # if necessary"}, {"tags": [], "down_vote_count": 0, "creation_date": 1248337359, "answer_id": 1170400, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1248362572, "last_edit_date": 1248362572, "body_markdown": "# How do you configure it to ignore files?\r\n\r\nIgnore is configured in a normal text file called .hgignore in the root of your repository. Add it just like a normal file with:\r\n\r\n    hg add .hgignore\r\n\r\nThere are two syntax options available for file matching, glob and regexp. glob is unix-like filename expansion and regexp is regular expressions. You activate each by adding `syntax: glob` or `syntax: regexp` on a line by itself. All lines following that will use that syntax, until the next syntax marker. You can have as many syntax markers as you want. The default syntax is regexp, so if you only use regexp you don&#39;t need any syntax marker. \r\n\r\nYou can add comments with #\r\n\r\nExample:\r\n\r\n    # python temporary files\r\n    syntax: glob\r\n    *.pyc\r\n\r\n    #editor autosaves\r\n    *~\r\n\r\n    # temporary data\r\n    syntax: regexp\r\n    temp\r\n\r\nIgnore only applies to unmanaged files (i.e. files that are not already checked in). To ignore files that are under version control, you can use the switches -I and -X."}, {"tags": [], "down_vote_count": 0, "creation_date": 1248338055, "answer_id": 1170430, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1248352861, "last_edit_date": 1248352861, "body_markdown": "## How do you &#39;mark&#39; &#39;tag&#39; or &#39;release&#39; a particular set of revisions for a particular set of files so you can always pull that one later? ##\r\n\r\n    $ hg tag my-tag\r\n\r\nYou can also clone your repository to create a special *tag* repository.\r\n\r\n    $ hg clone working-repository my-tag-repository\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1248379728, "answer_id": 1174173, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1248379728, "body_markdown": "How do you see what&#39;s uncommitted, or the status of your current codebase?\r\n---\r\n\r\nTo see a list of files that have been changed:\r\n\r\n    $ hg status\r\n\r\nThis will print each file that has been changed along with its status, which can include:\r\n\r\n* `M` - Modified.  The file has been changed and the changes have not been committed.\r\n* `A` - Added.  The file was not tracked before, but if you commit Mercurial will begin tracking it.\r\n* `R` - Removed.  The file was tracked before, but if you commit Mercurial will cease tracking it in this and future commits.\r\n* `?` - Unknown.  The file is not currently tracked by Mercurial.  Committing will have no effect on it unless you use `hg add` to add it.\r\n* `!` - Missing.  The file was tracked but Mercurial cannot find it in the working copy.\r\n\r\nTo see the changes that have actually been made to the files:\r\n\r\n    $ hg diff\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1248599704, "answer_id": 1184108, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1303133001, "last_edit_date": 1303133001, "body_markdown": "# How to install Mercurial?\r\n\r\nPlease edit nicely if you have installed from source  on Linux, or used the Windows installers.\r\n\r\n## Mac OS X 10.4 (Tiger), 10.5 (Leopard)\r\n\r\nUse Python&#39;s easy_install (with [Setuptools][1]):\r\n\r\n    sudo easy_install mercurial\r\n\r\nThis finds the latest version (1.3.1 at time of writing) and installs at:\r\n\r\n    /Library/Frameworks/Python.framework/Versions/2.6/bin/\r\n\r\nWith Python 2.6 this also gets around the [Mercurial OS X installer package][2] (at 1.2.1 as of July 26 2009) complaining that it needs Python 2.5. From [the documentation][3], it appears that Fink and Macports install version 1.2.\r\n\r\n## Linux\r\n\r\nMost of the explicit Linux packages appear to lag behind the current version, so use [easy_install][4] (as above) or download the [Mercurial tarball][5], extract the archive, change to the mercurial directory, and run:\r\n\r\n    $ make\r\n    $ sudo make install    # do a system-wide install\r\n    $ hg debuginstall      # sanity check\r\n    $ hg                   # see help\r\n\r\n(from [Introducing Mercurial, a distributed version control system][6])\r\n\r\n## Windows\r\n\r\nThere is a [binary package of the latest version of Mercurial][7]. [TortoiseHg][8] is a Windows shell extension for, and installs, Mercurial. [Cygwin][9] can also install Mercurial.\r\n\r\nAlternatively (instructions too lengthy so linked here), you can [build an optimised][10] or [pure Python][11] version of Mercurial from source.\r\n\r\n\r\n  [1]: http://pypi.python.org/pypi/setuptools\r\n  [2]: http://mercurial.berkwood.com/\r\n  [3]: http://mercurial.selenic.com/wiki/Download\r\n  [4]: http://peak.telecommunity.com/DevCenter/EasyInstall\r\n  [5]: http://www.selenic.com/mercurial/release/?M=D\r\n  [6]: http://linux.com/archive/feature/121157\r\n  [7]: http://mercurial.selenic.com/wiki/Download\r\n  [8]: http://tortoisehg.bitbucket.org/\r\n  [9]: http://cygwin.com/\r\n  [10]: http://mercurial.selenic.com/wiki/WindowsInstall#A.27Standard.27_procedure_for_building_optimized_version\r\n  [11]: http://mercurial.selenic.com/wiki/WindowsInstall#Building_pure_Python_alternative"}, {"tags": [], "down_vote_count": 0, "creation_date": 1249832006, "answer_id": 1251593, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1318117621, "last_edit_date": 1318117621, "body_markdown": "How do you get the latest code?\r\n-------------------------------\r\n\r\nMercurial remembers where a repository was cloned from (in .hg/hgrc) so you can simply run:\r\n\r\n    hg pull\r\nto pull the latest code from origin-repository. (This does not update the working directory)\r\n\r\n    hg update\r\nto update the working directory.\r\n\r\n    hg pull -u\r\nto perform both a pull and an update at once."}, {"tags": [], "down_vote_count": 0, "creation_date": 1250640925, "answer_id": 1297249, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1250640925, "body_markdown": "## How do I interface with Subversion? ##\r\n\r\nThere are three ways:\r\n\r\n\r\n----------\r\n\r\nThe [convert extension][1] will clone an existing Subversion repository into a Mercurial one.  It comes with Mercurial.  It works roughly like this:\r\n\r\n    hg convert &lt;Subversion URL or directory&gt; &lt;path to new Mercurial repository&gt;\r\n\r\n For example this will grab the trunk of the SixApart memcached repository.\r\n\r\n    hg convert http://code.sixapart.com/svn/memcached/trunk\r\n\r\n The extension can incrementally bring in new revisions from a Subversion repository into the Mercurial one (a little like pull).  However it does not support taking Mercurial revisions and sending them back to Subversion (no push).  **[XXX: Correct this if it is wrong]**.\r\n\r\n\r\n----------\r\n\r\n\r\nThe [hgsubversion extension][2].  It is in many ways the most sophisticated solution as it uses the Subversion API to communicate with the Subversion repository.  It aims to become *the* hg-svn bridge.  It allow full round-tripping of revisions (full clone, pull, and push),  However as of this writing **[XXX: Amend this if/when it becomes incorrect]** it is still in development and there are not yet official releases.  As a consequence it works with only the most up-to-date Mercurial (1.3 as of this writing).\r\n\r\n  - It maps tags and branches (preceding all tags with `tags/` to distinguish them from equivalently named branches).\r\n  - It maintains a special branch `closed-branches` for closing off branches which are removed in Subversion.\r\n  - It *requires* that the Subversion repository be laid out according to the convention of trunk/branches/tags.\r\n  - The command set is typically `hg svn &lt;subcommand&gt;` though it aims at being integrated to the point that you don&#39;t need the &#39;svn&#39; part (i.e. it wants to treat a Subversion clone as much as possible like any other Mercurial repository).;\r\n\r\nIt works like this:\r\n\r\nclone:\r\n\r\n    hg svnclone &lt;Subversion URL&gt; \r\n\r\nOR (only for `svn://` URLs)\r\n\r\n    hg clone &lt;svn:// URL&gt;\r\n\r\npull:\r\n\r\n    hg svn pull\r\n\r\npush:\r\n\r\n    hg svn push\r\n\r\nincoming:\r\n\r\n    hg svn incoming\r\n\r\noutgoing:\r\n\r\n    hg svn outgoing\r\n\r\nChecking out an entire repository:\r\n\r\n    hg svnclone http://code.sixapart.com/svn/memcached\r\n\r\n\r\n----------\r\n\r\n\r\nThe [hgsvn][3] utility ([bitbucket tree][4]).  Up until recently this only let you clone and pull a Subversion repository, but as of `hgsvn 0.1.7` it supports push.  [I do not know how *well* it does push.  Anyone with more experience should update this.]  It has the following notable features:\r\n\r\n  - It generates a Mercurial tag for every SVN tag.\r\n  - It puts a *local* tag on *every* changeset to mark its SVN revision.\r\n  - It puts every Mercurial revision on a named branch named after its SVN branch.  For example `branches/some-feature` would be like `hg branch some-feature`.  It puts the trunk on `trunk` (i.e. nothing is on the Mercurial default branch, unless the user explicitly switches to it.)\r\n  - It will try to identify branches and tags, and create them but if it can&#39;t it just skips them.  This is handy when the Subversion repository is not following the conventional trunk/branches/tags layout.\r\n  \r\nIt works like this:\r\n\r\nclone:\r\n\r\n    hgimportsvn &lt;Subversion URL&gt;\r\n\r\npull:\r\n\r\n    hgpullsvn\r\n\r\npush:\r\n\r\n    hgpushsvn\r\n\r\nincoming:\r\n\r\n    hgpullsvn -n\r\n\r\noutgoing:\r\n\r\n    hgpushsvn -n\r\n\r\nChecking out an entire repository:\r\n\r\n    hgimportsvn http://code.sixapart.com/svn/memcached\r\n\r\nChecking out just the trunk:\r\n\r\n    hgimportsvn http://code.sixapart.com/svn/memcached/trunk\r\n\r\n\r\n  [1]: http://mercurial.selenic.com/wiki/ConvertExtension\r\n  [2]: http://bitbucket.org/durin42/hgsubversion\r\n  [3]: http://pypi.python.org/pypi/hgsvn\r\n  [4]: http://bitbucket.org/andialbrecht/hgsvn"}, {"tags": [], "down_vote_count": 0, "creation_date": 1252286752, "answer_id": 1387214, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1347194983, "last_edit_date": 1347194983, "body_markdown": "How do you check out code?\r\n--------------------------\r\n\r\n    hg clone [OPTION]... SOURCE [DEST]\r\n\r\nWhere option can be:\r\n\r\n     -U --noupdate      the clone will only contain a repository (no working copy)\r\n     -r --rev           a changeset you would like to have after cloning\r\n        --pull          use pull protocol to copy metadata\r\n        --uncompressed  use uncompressed transfer (fast over LAN)\r\n     -e --ssh           specify ssh command to use\r\n        --remotecmd     specify hg command to run on the remote side\r\n\r\nWhere source is the source of the original files located in the repository, where it can be a remote [URL][1] or a file system directory. For example: \r\n\r\n - http://bitbucket.org/scrum8/django-wmd-editor/\r\n - /home/username/repository/django-wmd-editor/\r\n - ssh://myusername@scrum8.com/~/repository/django-wmd-editor/\r\n\r\nAnd destination is where the source code will be located in your local filesystem.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Uniform_Resource_Locator\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1252287592, "answer_id": 1387237, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1255290093, "last_edit_date": 1255290093, "body_markdown": "How do you commit changes?\r\n--------------------------\r\n\r\n&lt;pre&gt;&lt;code&gt;$ hg commit -m &quot;Commit message&quot;\r\n&lt;/code&gt;&lt;/pre&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1252287983, "answer_id": 1387249, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1252288436, "last_edit_date": 1252288436, "body_markdown": "How do you commit changes?\r\n--------------------------\r\n\r\nInvoke this command from the current local* mercurial repository\r\n\r\n    hg commit [OPTION]... [FILE]...\r\n\r\naliases: ci\r\n\r\n * A local mercurial repository has .hg inside the current directory\r\n\r\nWhere option can be:\r\n\r\n     -A --addremove     mark new/missing files as added/removed before committing\r\n        --close-branch  mark a branch as closed, hiding it from the branch list\r\n     -I --include       include names matching the given patterns\r\n     -X --exclude       exclude names matching the given patterns\r\n     -m --message       use &lt;text&gt; as commit message\r\n     -l --logfile       read commit message from &lt;file&gt;\r\n     -d --date          record datecode as commit date\r\n     -u --user          record user as committer\r\n\r\nAn example command would be:\r\n\r\n    hg commit -m &quot;added readme&quot; README\r\n\r\n**NOTES**:\r\n\r\n - If a list of files is omitted, all changes reported by &quot;hg status&quot; will be committed.\r\n - If you are committing the result of a merge, do not provide any file names or -I/-X filters.\r\n - If no commit message is specified, the configured editor is started to prompt you for a message."}, {"tags": [], "down_vote_count": 0, "creation_date": 1252289292, "answer_id": 1387288, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1252700118, "last_edit_date": 1252700118, "body_markdown": "## How do you compare two revisions of a file, or your current file and a previous revision? ##\r\n\r\nBoth use `hg diff`. When `hg diff` is used all changes in the working copy and the tip (the latest commit) is displayed.\r\n\r\nFor &quot;How do you compare two revisions of a file?&quot;\r\n\r\n&lt;pre&gt;&lt;code&gt;$ hg diff -r{rev1} -r{rev2} {file.code}\r\n&lt;/code&gt;&lt;/pre&gt;\r\n\r\nThe above command will show different between rev1 and rev2 of &quot;file.code&quot;.\r\n\r\nFor &quot;How do you compare your current file and a previous revision?&quot;\r\n\r\n&lt;pre&gt;&lt;code&gt;$ hg diff {file.code}\r\n&lt;/code&gt;&lt;/pre&gt;\r\n\r\nThe above command will show different between the current version of &quot;file.code&quot; and the lastest revision (the lastest commited).\r\n\r\n:D\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1252529729, "answer_id": 1402038, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1252529729, "body_markdown": "How to set up Mercurial?\r\n-----------------------\r\n\r\nMercurial stores its configuration information in `~/.hgrc` on *nix systems and in `%UserProfile%\\mercurial.ini` on Windows systems. (`%UserProfile%` is typically `&quot;C:\\Documents and Settings\\[username]\\&quot;` on Windows 2000 or Windows XP systems, and typically `C:\\Users\\[username]\\` on Windows Vista and Windows 7 systems.)\r\n\r\nAs a starting point, you should set your Mercurial username by placing the following in your `.hgrc` or `mercurial.ini`:\r\n\r\n    # This is a Mercurial configuration file.\r\n    [ui]\r\n    username = Firstname Lastname &lt;email.address@example.net&gt;\r\n\r\nTortoiseHg users on Windows systems can alternatively run `hgtk userconfig`\r\n\r\nSee also &quot;[Creating a Mercurial configuration file][1]&quot; in [chapter 2][2] of &quot;[Mercurial: The Definitive Guide][3].&quot;\r\n\r\n\r\n  [1]: http://hgbook.red-bean.com/read/a-tour-of-mercurial-the-basics.html#sec:tour-basic:username\r\n  [2]: http://hgbook.red-bean.com/read/a-tour-of-mercurial-the-basics.html\r\n  [3]: http://hgbook.red-bean.com/read/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1255289954, "answer_id": 1551560, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1366357360, "last_edit_date": 1366357360, "body_markdown": "## Good GUI/IDE plugin for Mercurial? ##\r\n\r\n### GUI ###\r\n\r\n * [TortoiseHg][1] for just about any OS.  Includes Windows Explorer integration. It also works in Linux and a few other OS:es including Max OS X. It has a somewhat clunky interface and is a little awkard to use at first, but it is very complete and powerful.\r\n * [Murky][2] runs on Mac OS X 10.5 or later. Murky is good for exploring the repository and basic commands, but you will need to know how to use the command line as well.\r\n * [MacHg][3] is a nice Mac OS X Gui that has a little more functionality and polish than Murky, but you will still need the command line with it as well.\r\n * [SourceTree][4] is a Mac client originally, with a Windows version available just recently. Pretty nice UI (at least on OS X), supports majority of Hg features, including shelve.\r\n\r\n### Plugins ###\r\n\r\n * [VisualHG][5] for Visual Studio\r\n * [HgSccPackage][6] for Visual Studio 2008/2010\r\n * [MercurialEclipse][7] for Eclipse\r\n * [Mercurial support][8] for NetBeans\r\n * [Mercurial support][9] for Sublime Text\r\n\r\n\r\n  [1]: http://tortoisehg.bitbucket.org/\r\n  [2]: http://bitbucket.org/snej/murky/wiki/Home\r\n  [3]: http://jasonfharris.com/machg/\r\n  [4]: http://www.sourcetreeapp.com/\r\n  [5]: http://visualhg.codeplex.com/\r\n  [6]: http://www.newsupaplex.pp.ru/hgscc_news_eng.html\r\n  [7]: http://www.javaforge.com/project/HGE\r\n  [8]: http://www.netbeans.org/features/ide/versioning.html\r\n  [9]: http://sublime-text-community-packages.googlecode.com/svn/pages/Mercurial.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1255290775, "answer_id": 1551589, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1255290775, "body_markdown": "How do you see what changes will be sent to the upstream repository when you push?\r\n---\r\n\r\nUse `hg outgoing` to get the list of changesets that will be set to the default repository:\r\n\r\n    $ hg outgoing\r\n\r\nTo get the actual code changes, use `-p` (`--patch`). This will output each changeset in full:\r\n\r\n    $ hg outgoing -p\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1257522666, "answer_id": 1688455, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1288956066, "last_edit_date": 1495540506, "body_markdown": "How do you see the history of revisions to a file or repository?\r\n---\r\n\r\nTo show the revision history of entire repository or files\r\n\r\n    $ hg log {file(s)}\r\nor\r\n\r\n    $ hg history {file(s)}\r\n\r\n\r\nAnd to [see the list in reverse order][1]\r\n\r\n    $ hg log -r:\r\n\r\n  [1]: https://stackoverflow.com/questions/3386758/hg-mercurial-log-interface/3387967#3387967"}, {"tags": [], "down_vote_count": 0, "creation_date": 1271412129, "answer_id": 2652038, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1271412129, "body_markdown": "How do you remove a file from the repository?\r\n---\r\n\r\n\r\nTo remove a file from the repository, and have it deleted on the next commit:\r\n\r\n    $ hg remove {file(s)}\r\n\r\nTo remove a file from the repository, but not have it deleted\r\n\r\n    $ hg remove -Af {file(s)}\r\n*or from Mercurial 1.3* \r\n\r\n    $ hg forget {file(s)}\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1280325268, "answer_id": 3353552, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1288278690, "last_edit_date": 1288278690, "body_markdown": "How do you revert a Changeset?\r\n==============================\r\n\r\nA couple of options available\r\n\r\n\r\nEasy Way (backout a single change set)\r\n--------\r\n\r\n    $ hg backout -m &#39;back out second change&#39; tip\r\n    reverting myfile\r\n    changeset 2:01adc4672142 backs out changeset 1:7e341ee3be7a\r\n    $ cat myfile\r\n    first change\r\n\r\nHard Way (manually diff and apply)\r\n----\r\n\r\n**Step 1**: Create a patch file to revert what changed between revision 107 and 108:\r\n\r\n    hg diff -r107 -r108 --reverse  &gt; revert-change.patch\r\n\r\n(alternately, hg diff -r108 -r107 with no --reverse will do the same thing)\r\n\r\n**Step 2**: Apply the patch file:\r\n\r\n    patch -p1 &lt; revert-change.patch\r\n\r\nSome of the diff may fail to apply, for example:\r\n\r\n    Hunk #3 FAILED at 517.\r\n    1 out of 3 hunks FAILED -- saving rejects to file &#39;foo/bar.c.rej&#39;\r\n\r\nThe .rej file will contain the contents of the diff that failed to apply, you&#39;ll need to have a look."}, {"tags": [], "down_vote_count": 0, "creation_date": 1284364501, "answer_id": 3698654, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1284364501, "last_edit_date": 1495540506, "body_markdown": "## How do you go back to a previous version of the code? ##\r\n\r\nFrom [this question][1]\r\n\r\n    $ hg update [-r REV]\r\n\r\n@van: If later you commit, you will effectively create a new branch. Then you might continue working only on this branch or eventually merge the existing one into it.\r\n\r\n  [1]: https://stackoverflow.com/questions/2540454/mercurial-revert-back-to-old-version-and-continue-from-there"}, {"tags": [], "down_vote_count": 0, "creation_date": 1286788920, "answer_id": 3904935, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1318425346, "last_edit_date": 1318425346, "body_markdown": "## How do you extract a patch from a specific changeset? ##\r\n\r\n    $ hg export -o patchfile changeset\r\n\r\n  You can then import this into another branch with:\r\n\r\n    $ hg import patchfile"}, {"tags": [], "down_vote_count": 0, "creation_date": 1290580422, "answer_id": 4264059, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1290580422, "body_markdown": "## How do you merge parts of one branch into another branch? ##\r\n\r\nEnable the &#39;transplant&#39; extension in your .hg/hgrc\r\n\r\n    [extensions]\r\n    transplant=\r\n\r\nLoad the target branch then transplant the target revision.  \r\neg: cherry pick revision 81 from branch &#39;foo&#39; into the current branch\r\n\r\n    $ hg transplant -b foo 81\r\n\r\n"}], "title": "Mercurial for Beginners: The Definitive Practical Guide", "view_count": 30208, "answer_count": 22, "code_snippet": ["<code>hg add .hgignore\n</code>", "<code>syntax: glob</code>", "<code>syntax: regexp</code>", "<code># python temporary files\nsyntax: glob\n*.pyc\n\n#editor autosaves\n*~\n\n# temporary data\nsyntax: regexp\ntemp\n</code>", "<code>hg add</code>", "<code>deploy-test.conf</code>", "<code>deploy-production.conf</code>", "<code>deploy-template.conf</code>", "<code>deploy*</code>", "<code>deploy-templace.conf</code>", "<code>$ hg status\n</code>", "<code>M</code>", "<code>A</code>", "<code>R</code>", "<code>?</code>", "<code>hg add</code>", "<code>!</code>", "<code>$ hg diff\n</code>", "<code>$ hg init my-repository\n</code>", "<code>hg convert &lt;Subversion URL or directory&gt; &lt;path to new Mercurial repository&gt;\n</code>", "<code>hg convert http://code.sixapart.com/svn/memcached/trunk\n</code>", "<code>tags/</code>", "<code>closed-branches</code>", "<code>hg svn &lt;subcommand&gt;</code>", "<code>hg svnclone &lt;Subversion URL&gt; \n</code>", "<code>svn://</code>", "<code>hg clone &lt;svn:// URL&gt;\n</code>", "<code>hg svn pull\n</code>", "<code>hg svn push\n</code>", "<code>hg svn incoming\n</code>", "<code>hg svn outgoing\n</code>", "<code>hg svnclone http://code.sixapart.com/svn/memcached\n</code>", "<code>hgsvn 0.1.7</code>", "<code>branches/some-feature</code>", "<code>hg branch some-feature</code>", "<code>trunk</code>", "<code>hgimportsvn &lt;Subversion URL&gt;\n</code>", "<code>hgpullsvn\n</code>", "<code>hgpushsvn\n</code>", "<code>hgpullsvn -n\n</code>", "<code>hgpushsvn -n\n</code>", "<code>hgimportsvn http://code.sixapart.com/svn/memcached\n</code>", "<code>hgimportsvn http://code.sixapart.com/svn/memcached/trunk\n</code>", "<code>hg convert</code>", "<code>svnsync</code>", "<code>svnsync</code>", "<code>hg diff</code>", "<code>hg diff</code>", "<code>$ hg diff -r{rev1} -r{rev2} {file.code}\n</code>", "<code>$ hg diff {file.code}\n</code>", "<code>$ hg tag my-tag\n</code>", "<code>$ hg clone working-repository my-tag-repository\n</code>", "<code>hg tag my-tag</code>", "<code>hg branch my-branch</code>", "<code>hg commit [OPTION]... [FILE]...\n</code>", "<code> -A --addremove     mark new/missing files as added/removed before committing\n    --close-branch  mark a branch as closed, hiding it from the branch list\n -I --include       include names matching the given patterns\n -X --exclude       exclude names matching the given patterns\n -m --message       use &lt;text&gt; as commit message\n -l --logfile       read commit message from &lt;file&gt;\n -d --date          record datecode as commit date\n -u --user          record user as committer\n</code>", "<code>hg commit -m \"added readme\" README\n</code>", "<code>~/.hgrc</code>", "<code>%UserProfile%\\mercurial.ini</code>", "<code>%UserProfile%</code>", "<code>\"C:\\Documents and Settings\\[username]\\\"</code>", "<code>C:\\Users\\[username]\\</code>", "<code>.hgrc</code>", "<code>mercurial.ini</code>", "<code># This is a Mercurial configuration file.\n[ui]\nusername = Firstname Lastname &lt;email.address@example.net&gt;\n</code>", "<code>hgtk userconfig</code>", "<code>$ cd repository-where-i-want-to merge\n$ hg pull branch-i-want-to-merge\n$ hg merge # if necessary\n</code>", "<code>sudo easy_install mercurial\n</code>", "<code>/Library/Frameworks/Python.framework/Versions/2.6/bin/\n</code>", "<code>$ make\n$ sudo make install    # do a system-wide install\n$ hg debuginstall      # sanity check\n$ hg                   # see help\n</code>", "<code>hg pull\n</code>", "<code>hg update\n</code>", "<code>hg pull -u\n</code>", "<code>.hg/hgrc</code>", "<code>[paths]</code>", "<code>.hg/hgrc</code>", "<code>hg clone [OPTION]... SOURCE [DEST]\n</code>", "<code> -U --noupdate      the clone will only contain a repository (no working copy)\n -r --rev           a changeset you would like to have after cloning\n    --pull          use pull protocol to copy metadata\n    --uncompressed  use uncompressed transfer (fast over LAN)\n -e --ssh           specify ssh command to use\n    --remotecmd     specify hg command to run on the remote side\n</code>", "<code>$ hg commit -m \"Commit message\"\n</code>", "<code>hg outgoing</code>", "<code>$ hg outgoing\n</code>", "<code>-p</code>", "<code>--patch</code>", "<code>$ hg outgoing -p\n</code>", "<code>$ hg remove {file(s)}\n</code>", "<code>$ hg remove -Af {file(s)}\n</code>", "<code>$ hg forget {file(s)}\n</code>", "<code>$ hg update [-r REV]\n</code>", "<code>$ hg backout -m 'back out second change' tip\nreverting myfile\nchangeset 2:01adc4672142 backs out changeset 1:7e341ee3be7a\n$ cat myfile\nfirst change\n</code>", "<code>hg diff -r107 -r108 --reverse  &gt; revert-change.patch\n</code>", "<code>patch -p1 &lt; revert-change.patch\n</code>", "<code>Hunk #3 FAILED at 517.\n1 out of 3 hunks FAILED -- saving rejects to file 'foo/bar.c.rej'\n</code>", "<code>hg backout</code>", "<code>$ hg log {file(s)}\n</code>", "<code>$ hg history {file(s)}\n</code>", "<code>$ hg log -r:\n</code>", "<code>[extensions]\ntransplant=\n</code>", "<code>$ hg transplant -b foo 81\n</code>", "<code>graft</code>", "<code>hg help graft</code>", "<code>$ hg export -o patchfile changeset\n</code>", "<code>$ hg import patchfile\n</code>"], "path": "stack.django"}, {"tags": ["python", "md5", "hashlib"], "creation_date": 1247662327, "body_markdown": "I have used hashlib (which replaces md5 in Python 2.6/3.0) and it worked fine if I opened a file and put its content in [`hashlib.md5()`][1] function.\r\n\r\nThe problem is with very big files that their sizes could exceed RAM size.\r\n\r\nHow to get the MD5 hash of a file without loading the whole file to memory?\r\n\r\n\r\n  [1]: https://docs.python.org/2/library/hashlib.html", "last_edit_date": 1430742540, "up_vote_count": 170, "link": "https://stackoverflow.com/questions/1131220/get-md5-hash-of-big-files-in-python", "_childDocuments_": [{"tags": [], "down_vote_count": 6, "creation_date": 1247662462, "answer_id": 1131230, "path": "stack.django.answer", "score": 1, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1247662558, "last_edit_date": 1247662558, "body_markdown": "u can&#39;t get it&#39;s md5 without read full content. but u can use [update][1] function to read the files content block by block.  \r\nm.update(a); m.update(b) is equivalent to m.update(a+b)\r\n\r\n\r\n  [1]: http://docs.python.org/library/hashlib.html#hashlib.hash.update"}, {"tags": [], "down_vote_count": 4, "creation_date": 1247662507, "answer_id": 1131238, "path": "stack.django.answer", "score": 136, "up_vote_count": 140, "is_accepted": true, "last_activity_date": 1247668855, "last_edit_date": 1247668855, "body_markdown": "Break the file into 128-byte chunks and feed them to MD5 consecutively using `update()`.\r\n\r\nThis takes advantage of the fact that MD5 has 128-byte digest blocks. Basically, when MD5 `digest()`s the file, this is exactly what it is doing.\r\n\r\nIf you make sure you free the memory on each iteration (i.e. not read the entire file to memory), this shall take no more than 128 bytes of memory.\r\n\r\nOne example is to read the chunks like so:\r\n\r\n    f = open(fileName)\r\n    while not endOfFile:\r\n        f.read(128)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1247662765, "answer_id": 1131255, "path": "stack.django.answer", "score": 201, "up_vote_count": 201, "is_accepted": false, "last_activity_date": 1449517835, "last_edit_date": 1449517835, "body_markdown": "You need to read the file in chunks of suitable size:\r\n\r\n    def md5_for_file(f, block_size=2**20):\r\n        md5 = hashlib.md5()\r\n        while True:\r\n            data = f.read(block_size)\r\n            if not data:\r\n                break\r\n            md5.update(data)\r\n        return md5.digest()\r\n\r\nNOTE: Make sure you open your file with the &#39;rb&#39; to the open - otherwise you will get the wrong result.\r\n\r\nSo to do the whole lot in one method - use something like: \r\n\r\n    def generate_file_md5(rootdir, filename, blocksize=2**20):\r\n        m = hashlib.md5()\r\n        with open( os.path.join(rootdir, filename) , &quot;rb&quot; ) as f:\r\n            while True:\r\n                buf = f.read(blocksize)\r\n                if not buf:\r\n                    break\r\n                m.update( buf )\r\n        return m.hexdigest()\r\n\r\nThe update above was based on the comments provided by Frerich Raabe - and I tested this and found it to be correct on my Python 2.7.2 windows installation\r\n\r\nI cross-checked the results using the &#39;jacksum&#39; tool.\r\n\r\n    jacksum -a md5 &lt;filename&gt;\r\n\r\n[http://www.jonelo.de/java/jacksum/][1]\r\n\r\n\r\n  [1]: http://www.jonelo.de/java/jacksum/"}, {"tags": [], "down_vote_count": 2, "creation_date": 1290072249, "answer_id": 4213255, "path": "stack.django.answer", "score": 96, "up_vote_count": 98, "is_accepted": false, "last_activity_date": 1402692591, "last_edit_date": 1402692591, "body_markdown": "if you care about more pythonic (no &#39;while True&#39;) way of reading the file check this code:\r\n\r\n    import hashlib\r\n\r\n    def checksum_md5(filename):\r\n        md5 = hashlib.md5()\r\n        with open(filename,&#39;rb&#39;) as f: \r\n            for chunk in iter(lambda: f.read(8192), b&#39;&#39;): \r\n                md5.update(chunk)\r\n        return md5.digest()\r\n\r\nNote that the iter() func needs an empty byte string for the returned iterator to halt at EOF, since read() returns b&#39;&#39; (not just &#39;&#39;)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1340301263, "answer_id": 11143944, "path": "stack.django.answer", "score": 47, "up_vote_count": 47, "is_accepted": false, "last_activity_date": 1401829353, "last_edit_date": 1401829353, "body_markdown": "Here&#39;s my version of @Piotr Czapla&#39;s method:\r\n\r\n    def md5sum(filename):\r\n        md5 = hashlib.md5()\r\n        with open(filename, &#39;rb&#39;) as f:\r\n            for chunk in iter(lambda: f.read(128 * md5.block_size), b&#39;&#39;):\r\n                md5.update(chunk)\r\n        return md5.hexdigest()"}, {"tags": [], "down_vote_count": 1, "creation_date": 1374480888, "answer_id": 17782753, "path": "stack.django.answer", "score": 27, "up_vote_count": 28, "is_accepted": false, "last_activity_date": 1377591374, "last_edit_date": 1377591374, "body_markdown": "Using multiple comment/answers in this thread, here is my solution :\r\n\r\n    import hashlib\r\n    def md5_for_file(path, block_size=256*128, hr=False):\r\n        &#39;&#39;&#39;\r\n        Block size directly depends on the block size of your filesystem\r\n        to avoid performances issues\r\n        Here I have blocks of 4096 octets (Default NTFS)\r\n        &#39;&#39;&#39;\r\n        md5 = hashlib.md5()\r\n        with open(path,&#39;rb&#39;) as f: \r\n            for chunk in iter(lambda: f.read(block_size), b&#39;&#39;): \r\n                 md5.update(chunk)\r\n        if hr:\r\n            return md5.hexdigest()\r\n        return md5.digest()\r\n\r\n - This is &quot;pythonic&quot;\r\n - This is a function\r\n - It avoids implicit values: always prefer explicit ones.\r\n - It allows (very important) performances optimizations\r\n\r\nAnd finally,\r\n\r\n **- This has been built by a community, thanks all for your advices/ideas.**"}, {"tags": [], "down_vote_count": 3, "creation_date": 1428151809, "answer_id": 29446602, "path": "stack.django.answer", "score": -3, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1428151809, "body_markdown": "I&#39;m not sure that there isn&#39;t a bit too much fussing around here. I recently had problems with md5 and files stored as blobs on MySQL so I experimented with various file sizes and the straightforward Python approach, viz:\r\n\r\n    FileHash=hashlib.md5(FileData).hexdigest()\r\n\r\nI could detect no noticeable performance difference with a range of file sizes 2Kb to 20Mb and therefore no need to &#39;chunk&#39; the hashing. Anyway, if Linux has to go to disk, it will probably do it at least as well as the average programmer&#39;s ability to keep it from doing so. As it happened, the problem was nothing to do with md5. If you&#39;re using MySQL, don&#39;t forget the md5() and sha1() functions already there."}, {"tags": [], "down_vote_count": 0, "creation_date": 1436301787, "answer_id": 31278890, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1436301787, "body_markdown": "**A remix of Bastien Semene code that take Hawkwing comment about generic hashing function into consideration...**\r\n\r\n    def hash_for_file(path, algorithm=hashlib.algorithms[0], block_size=256*128, human_readable=True):\r\n        &quot;&quot;&quot;\r\n        Block size directly depends on the block size of your filesystem\r\n        to avoid performances issues\r\n        Here I have blocks of 4096 octets (Default NTFS)\r\n    \r\n        Linux Ext4 block size\r\n        sudo tune2fs -l /dev/sda5 | grep -i &#39;block size&#39;\r\n        &gt; Block size:               4096\r\n    \r\n        Input:\r\n            path: a path\r\n            algorithm: an algorithm in hashlib.algorithms\r\n                       ATM: (&#39;md5&#39;, &#39;sha1&#39;, &#39;sha224&#39;, &#39;sha256&#39;, &#39;sha384&#39;, &#39;sha512&#39;)\r\n            block_size: a multiple of 128 corresponding to the block size of your filesystem\r\n            human_readable: switch between digest() or hexdigest() output, default hexdigest()\r\n        Output:\r\n            hash\r\n        &quot;&quot;&quot;\r\n        if algorithm not in hashlib.algorithms:\r\n            raise NameError(&#39;The algorithm &quot;{algorithm}&quot; you specified is &#39;\r\n                            &#39;not a member of &quot;hashlib.algorithms&quot;&#39;.format(algorithm=algorithm))\r\n    \r\n        hash_algo = hashlib.new(algorithm)  # According to hashlib documentation using new()\r\n                                            # will be slower then calling using named\r\n                                            # constructors, ex.: hashlib.md5()\r\n        with open(path, &#39;rb&#39;) as f:\r\n            for chunk in iter(lambda: f.read(block_size), b&#39;&#39;):\r\n                 hash_algo.update(chunk)\r\n        if human_readable:\r\n            file_hash = hash_algo.hexdigest()\r\n        else:\r\n            file_hash = hash_algo.digest()\r\n        return file_hash"}, {"tags": [], "down_vote_count": 1, "creation_date": 1468791473, "answer_id": 38426184, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1472330966, "last_edit_date": 1472330966, "body_markdown": "    import hashlib,re\r\n    open = open(&#39;/home/parrot/pass.txt&#39;,&#39;r&#39;)\r\n    open = open.readlines()\r\n    for i in open:\r\n    \tstrip1 = i.strip(&#39;\\n&#39;)\r\n    \thash_object = hashlib.md5(strip1.encode())\r\n    \thash2 = hash_object.hexdigest()\r\n    \tprint hash2"}, {"tags": [], "down_vote_count": 1, "creation_date": 1470136929, "answer_id": 38719060, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1470136929, "body_markdown": "Implementation of accepted answer for Django:\r\n\r\n    import hashlib\r\n    from django.db import models\r\n\r\n\r\n    class MyModel(models.Model):\r\n        file = models.FileField()  # any field based on django.core.files.File\r\n\r\n        def get_hash(self):\r\n            hash = hashlib.md5()\r\n            for chunk in self.file.chunks(chunk_size=8192):\r\n                hash.update(chunk)\r\n            return hash.hexdigest()\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1480872956, "answer_id": 40961519, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1480873310, "last_edit_date": 1480873310, "body_markdown": "**A Python 2/3 portable solution**\r\n\r\nTo calculate a checksum (md5, sha1, etc.), you must open the file in binary mode, because you&#39;ll sum bytes values:\r\n\r\nTo be py27/py3 portable, you ought to use the `io` packages, like this:\r\n\r\n    import hashlib\r\n    import io\r\n    \r\n    \r\n    def md5sum(src):\r\n        md5 = hashlib.md5()\r\n        with io.open(src, mode=&quot;rb&quot;) as fd:\r\n            content = fd.read()\r\n            md5.update(content)\r\n        return md5\r\n\r\nIf your files are big, you may prefer to read the file by chunks to avoid storing the whole file content in memory:\r\n\r\n    def md5sum(src, length=io.DEFAULT_BUFFER_SIZE):\r\n        md5 = hashlib.md5()\r\n        with io.open(src, mode=&quot;rb&quot;) as fd:\r\n            for chunk in iter(lambda: fd.read(length), b&#39;&#39;):\r\n                md5.update(chunk)\r\n        return md5\r\n\r\nThe trick here is to use the [`iter()`][1] function with a *sentinel* (the empty string).\r\n\r\n&gt; The iterator created in this case will call *o* [the lambda function] with no arguments for each call to its `next()` method; if the value returned is equal to sentinel, `StopIteration` will be raised, otherwise the value will be returned.\r\n\r\nIf your files are **really** big, you may also need to display progress information. You can do that by calling a callback function which prints or logs the amount of calculated bytes:\r\n\r\n    def md5sum(src, callback, length=io.DEFAULT_BUFFER_SIZE):\r\n        calculated = 0\r\n        md5 = hashlib.md5()\r\n        with io.open(src, mode=&quot;rb&quot;) as fd:\r\n            for chunk in iter(lambda: fd.read(length), b&#39;&#39;):\r\n                md5.update(chunk)\r\n                calculated += len(chunk)\r\n                callback(calculated)\r\n        return md5\r\n\r\n\r\n  [1]: https://docs.python.org/2/library/functions.html#iter"}], "title": "Get MD5 hash of big files in Python", "view_count": 100598, "answer_count": 11, "code_snippet": ["<code>hashlib.md5()</code>", "<code>update()</code>", "<code>digest()</code>", "<code>f = open(fileName)\nwhile not endOfFile:\n    f.read(128)\n</code>", "<code>def md5_for_file(f, block_size=2**20):\n    md5 = hashlib.md5()\n    while True:\n        data = f.read(block_size)\n        if not data:\n            break\n        md5.update(data)\n    return md5.digest()\n</code>", "<code>def generate_file_md5(rootdir, filename, blocksize=2**20):\n    m = hashlib.md5()\n    with open( os.path.join(rootdir, filename) , \"rb\" ) as f:\n        while True:\n            buf = f.read(blocksize)\n            if not buf:\n                break\n            m.update( buf )\n    return m.hexdigest()\n</code>", "<code>jacksum -a md5 &lt;filename&gt;\n</code>", "<code>rb</code>", "<code>open</code>", "<code>hexdigest</code>", "<code>digest</code>", "<code>import hashlib\n\ndef checksum_md5(filename):\n    md5 = hashlib.md5()\n    with open(filename,'rb') as f: \n        for chunk in iter(lambda: f.read(8192), b''): \n            md5.update(chunk)\n    return md5.digest()\n</code>", "<code>128*md5.block_size</code>", "<code>8192</code>", "<code>iter(func, '')</code>", "<code>iter(func)</code>", "<code>b''</code>", "<code>def md5sum(filename):\n    md5 = hashlib.md5()\n    with open(filename, 'rb') as f:\n        for chunk in iter(lambda: f.read(128 * md5.block_size), b''):\n            md5.update(chunk)\n    return md5.hexdigest()\n</code>", "<code>import hashlib\ndef md5_for_file(path, block_size=256*128, hr=False):\n    '''\n    Block size directly depends on the block size of your filesystem\n    to avoid performances issues\n    Here I have blocks of 4096 octets (Default NTFS)\n    '''\n    md5 = hashlib.md5()\n    with open(path,'rb') as f: \n        for chunk in iter(lambda: f.read(block_size), b''): \n             md5.update(chunk)\n    if hr:\n        return md5.hexdigest()\n    return md5.digest()\n</code>", "<code>io</code>", "<code>import hashlib\nimport io\n\n\ndef md5sum(src):\n    md5 = hashlib.md5()\n    with io.open(src, mode=\"rb\") as fd:\n        content = fd.read()\n        md5.update(content)\n    return md5\n</code>", "<code>def md5sum(src, length=io.DEFAULT_BUFFER_SIZE):\n    md5 = hashlib.md5()\n    with io.open(src, mode=\"rb\") as fd:\n        for chunk in iter(lambda: fd.read(length), b''):\n            md5.update(chunk)\n    return md5\n</code>", "<code>iter()</code>", "<code>next()</code>", "<code>StopIteration</code>", "<code>def md5sum(src, callback, length=io.DEFAULT_BUFFER_SIZE):\n    calculated = 0\n    md5 = hashlib.md5()\n    with io.open(src, mode=\"rb\") as fd:\n        for chunk in iter(lambda: fd.read(length), b''):\n            md5.update(chunk)\n            calculated += len(chunk)\n            callback(calculated)\n    return md5\n</code>", "<code>def hash_for_file(path, algorithm=hashlib.algorithms[0], block_size=256*128, human_readable=True):\n    \"\"\"\n    Block size directly depends on the block size of your filesystem\n    to avoid performances issues\n    Here I have blocks of 4096 octets (Default NTFS)\n\n    Linux Ext4 block size\n    sudo tune2fs -l /dev/sda5 | grep -i 'block size'\n    &gt; Block size:               4096\n\n    Input:\n        path: a path\n        algorithm: an algorithm in hashlib.algorithms\n                   ATM: ('md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512')\n        block_size: a multiple of 128 corresponding to the block size of your filesystem\n        human_readable: switch between digest() or hexdigest() output, default hexdigest()\n    Output:\n        hash\n    \"\"\"\n    if algorithm not in hashlib.algorithms:\n        raise NameError('The algorithm \"{algorithm}\" you specified is '\n                        'not a member of \"hashlib.algorithms\"'.format(algorithm=algorithm))\n\n    hash_algo = hashlib.new(algorithm)  # According to hashlib documentation using new()\n                                        # will be slower then calling using named\n                                        # constructors, ex.: hashlib.md5()\n    with open(path, 'rb') as f:\n        for chunk in iter(lambda: f.read(block_size), b''):\n             hash_algo.update(chunk)\n    if human_readable:\n        file_hash = hash_algo.hexdigest()\n    else:\n        file_hash = hash_algo.digest()\n    return file_hash\n</code>", "<code>import hashlib\nfrom django.db import models\n\n\nclass MyModel(models.Model):\n    file = models.FileField()  # any field based on django.core.files.File\n\n    def get_hash(self):\n        hash = hashlib.md5()\n        for chunk in self.file.chunks(chunk_size=8192):\n            hash.update(chunk)\n        return hash.hexdigest()\n</code>", "<code>import hashlib,re\nopened = open('/home/parrot/pass.txt','r')\nopened = open.readlines()\nfor i in opened:\n    strip1 = i.strip('\\n')\n    hash_object = hashlib.md5(strip1.encode())\n    hash2 = hash_object.hexdigest()\n    print hash2\n</code>", "<code>FileHash=hashlib.md5(FileData).hexdigest()\n</code>"], "path": "stack.django"}, {"tags": ["django", "django-south"], "creation_date": 1277186987, "body_markdown": "I am trying to get started with South.  I had an existing database and I added South (`syncdb`, `schemamigration --initial`).\r\n\r\nThen, I updated `models.py` to add a field and ran `./manage.py schemamigration myapp --auto`. It seemed to find the field and said I could apply this with `./manage.py migrate myapp`. But, doing that gave the error: \r\n\r\n    django.db.utils.DatabaseError: table &quot;myapp_tablename&quot; already exists\r\n\r\n`tablename` is the first table listed in `models.py`.", "last_edit_date": 1391293822, "up_vote_count": 184, "link": "https://stackoverflow.com/questions/3090648/django-south-table-already-exists", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1277189260, "answer_id": 3090857, "path": "stack.django.answer", "score": 308, "up_vote_count": 309, "is_accepted": true, "last_activity_date": 1287231152, "last_edit_date": 1287231152, "body_markdown": "since you already have the tables created in the database, you just need to run the initial migration as fake\r\n\r\n    ./manage.py migrate myapp --fake\r\n\r\nmake sure that the schema of models is same as schema of tables in database."}, {"tags": [], "down_vote_count": 0, "creation_date": 1319462258, "answer_id": 7876210, "path": "stack.django.answer", "score": 40, "up_vote_count": 40, "is_accepted": false, "last_activity_date": 1350151099, "last_edit_date": 1350151099, "body_markdown": "&gt; Although the table &quot;myapp_tablename&quot; already exists error stop raising\r\n&gt; after I did ./manage.py migrate myapp --fake, the DatabaseError shows\r\n&gt; no such column: myapp_mymodel.added_field.\r\n\r\nGot exactly the same problem!\r\n\r\n1.Firstly **check the migration number** which is causing this. Lets assume it is: 0010.\r\n\r\n2.You need to:\r\n\r\n    ./manage.py schemamigration myapp --add-field MyModel.added_field\r\n    ./manage.py migrate myapp\r\n\r\nif there is more than one field missing you have to repeat it for each field.\r\n\r\n3.Now you land with a bunch of new migrations so **remove their files** from myapp/migrations (0011 and further if you needed to add multiple fields).\r\n\r\n4.Run this:\r\n\r\n    ./manage.py migrate myapp 0010\r\n\r\nNow try ./manage.py migrate myapp\r\n\r\nIf it doesn&#39;t fail you&#39;re ready. Just doublecheck if any field&#39;s aren&#39;t missing.\r\n\r\nEDIT:\r\n\r\nThis problem can also occur when you have a production database for which you install South and the first, initial migration created in other enviorment duplicates what you already have in your db. The solution is much easier here:\r\n\r\n1. Fake the first migration:\r\n\r\n    ./manage migrate myapp 0001 --fake\r\n\r\n2. Roll with the rest of migrations:\r\n\r\n    ./manage migrate myapp"}, {"tags": [], "down_vote_count": 0, "creation_date": 1333136978, "answer_id": 9949558, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1408676867, "last_edit_date": 1408676867, "body_markdown": "When I ran into this error, it had a different cause.\r\n\r\nIn my case South had somehow left in my DB a temporary empty table, which is used in [_remake_table()][1]. Probably I had aborted a migration in a way I shouldn&#39;t have. In any case, each subsequent new migration, when it called _remake_table(), was throwing the error `sqlite3.pypysqlite2.dbapi2.OperationalError: table &quot;_south_new_myapp_mymodel&quot; already exists`, because it *did* already exist and wasn&#39;t supposed to be there.\r\n\r\nThe _south_new bit looked odd to me, so I browsed my DB, saw the table `_south_new_myapp_mymodel`, scratched my head, looked at [South&#39;s source][1], decided it was junk, dropped the table, and all was well.\r\n\r\n  [1]: https://github.com/dmishe/django-south/blob/master/south/db/sqlite3.py\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1382503620, "answer_id": 19532986, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1382505748, "last_edit_date": 1382505748, "body_markdown": "``Perform these steps in order may help you``:\r\n\r\n\r\n1) python manage.py schemamigration apps.appname --initial\r\n   \r\n   Above step creates migration folder as default.\r\n\r\n2) python manage.py migrate apps.appname --fake\r\n   \r\n   generates a fake migration.\r\n\r\n3) python manage.py schemamigration apps.appname --auto\r\n\r\n   Then you can add fields as you wish and perform the above command.\r\n\r\n4) python manage.py migrate apps.appname\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1406031500, "answer_id": 24887226, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1406031500, "body_markdown": "If you have an existing database and app you can use the south conversion command\r\n\r\n    ./manage.py convert_to_south myapp\r\n\r\nThis has to be applied **before** you do any changes to what is already in the database. \r\n\r\nThe convert_to_south command only works entirely on the first machine you run it on. Once you\u2019ve committed the initial migrations it made into your VCS, you\u2019ll have to run `./manage.py migrate myapp 0001 --fake` on every machine that has a copy of the codebase (make sure they were up-to-date with models and schema first).\r\nref: [http://south.readthedocs.org/en/latest/convertinganapp.html][1]\r\n\r\n\r\n  [1]: http://south.readthedocs.org/en/latest/convertinganapp.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1406748076, "answer_id": 25045181, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1406748076, "body_markdown": "If you have problems with your models not matching your database, like @pielgrzym, and you want to automatically migrate the database to match the latest models.py file (and erase any data that won&#39;t be recreated by fixtures during `migrate`):\r\n\r\n    manage.py schemamigration myapp --initial\r\n    manage.py migrate myapp --fake\r\n    manage.py migrate myapp zero\r\n    manage.py migrate myapp\r\n\r\nThis will only delete and recreate database tables that exist in your latest `models.py` file, so you may have garbage tables in your database from previous `syncdb`s or `migrate`s. To get rid of those, precede all these migrations with:\r\n\r\n    manage.py sqlclear myapp | manage.py sqlshell\r\n\r\nAnd if that still leaves some CRUFT lying around in your database then you&#39;ll have to do an `inspectdb` and create the `models.py` file from that (for the tables and app that you want to clear) before doing the `sqlclear` and then restore your original models.py before creating the `--initial` migration and migrating to it.  All this to avoid messing around with the particular flavor of SQL that your database needs.\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1491376741, "answer_id": 43224411, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1491376741, "body_markdown": "As temporary solution, you can comment the Table creation in the migration script.\r\n\r\n    class Migration(migrations.Migration):\r\n    \r\n        dependencies = [\r\n            (...)\r\n        ]\r\n    \r\n        operations = [\r\n            #migrations.CreateModel(\r\n            #    name=&#39;TABLE&#39;,\r\n            #    fields=[\r\n            #            ....\r\n            #            ....\r\n            #    ],\r\n            #),\r\n            ....\r\n            ....\r\n\r\n------------------\r\n\r\nOr \r\n\r\nIf the existing table contains no rows (empty), then consider deleting the table like below. **(This fix is recommended only if the table contains no rows)**. Also make sure this operation before the createModel operation.\r\n\r\n    class Migration(migrations.Migration):\r\n    \r\n        dependencies = [\r\n            (...),\r\n        ]\r\n    \r\n        operations = [\r\n            migrations.RunSQL(&quot;DROP TABLE myapp_tablename;&quot;)\r\n        ]"}, {"tags": [], "down_vote_count": 0, "creation_date": 1491376943, "answer_id": 43224481, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1491382260, "last_edit_date": 1491382260, "body_markdown": "One more solution(maybe a temporary solution).\r\n\r\n    $ python manage.py sqlmigrate APP_NAME MIGRATION_NAME\r\n\r\neg.,. \r\n\r\n    $ python manage.py sqlmigrate users 0029_auto_20170310_1117\r\n\r\nThis will list all the migrations in raw sql queries. You can pick the queries which you want to run avoiding the part which creates the existing table"}], "title": "Django South - table already exists", "view_count": 60875, "answer_count": 8, "code_snippet": ["<code>syncdb</code>", "<code>schemamigration --initial</code>", "<code>models.py</code>", "<code>./manage.py schemamigration myapp --auto</code>", "<code>./manage.py migrate myapp</code>", "<code>django.db.utils.DatabaseError: table \"myapp_tablename\" already exists\n</code>", "<code>tablename</code>", "<code>models.py</code>", "<code>./manage.py migrate myapp --fake\n</code>", "<code>schemamigration</code>", "<code>migrate</code>", "<code>schemamigration</code>", "<code>./manage.py schemamigration myapp --add-field MyModel.added_field\n./manage.py migrate myapp\n</code>", "<code>./manage.py migrate myapp 0010\n</code>", "<code>sqlite3.pypysqlite2.dbapi2.OperationalError: table \"_south_new_myapp_mymodel\" already exists</code>", "<code>_south_new_myapp_mymodel</code>", "<code>Perform these steps in order may help you</code>", "<code>migrate</code>", "<code>manage.py schemamigration myapp --initial\nmanage.py migrate myapp --fake\nmanage.py migrate myapp zero\nmanage.py migrate myapp\n</code>", "<code>models.py</code>", "<code>syncdb</code>", "<code>migrate</code>", "<code>manage.py sqlclear myapp | manage.py sqlshell\n</code>", "<code>inspectdb</code>", "<code>models.py</code>", "<code>sqlclear</code>", "<code>--initial</code>", "<code>./manage.py convert_to_south myapp\n</code>", "<code>./manage.py migrate myapp 0001 --fake</code>", "<code>class Migration(migrations.Migration):\n\n    dependencies = [\n        (...)\n    ]\n\n    operations = [\n        #migrations.CreateModel(\n        #    name='TABLE',\n        #    fields=[\n        #            ....\n        #            ....\n        #    ],\n        #),\n        ....\n        ....\n</code>", "<code>class Migration(migrations.Migration):\n\n    dependencies = [\n        (...),\n    ]\n\n    operations = [\n        migrations.RunSQL(\"DROP TABLE myapp_tablename;\")\n    ]\n</code>", "<code>$ python manage.py sqlmigrate APP_NAME MIGRATION_NAME\n</code>", "<code>$ python manage.py sqlmigrate users 0029_auto_20170310_1117\n</code>"], "path": "stack.django"}, {"tags": ["django", "virtualenv", "pip"], "creation_date": 1293411421, "body_markdown": "I&#39;m using pip with a requirements file, in a virtualenv, for my Django projects.  I&#39;m trying to upgrade some packages, notably Django itself, and I&#39;m getting an error about source code conflicts:\r\n\r\n    Source in `&lt;virtualenv`&gt;/build/Django has version 1.2.3 that conflicts with Django==1.2.4 (from -r requirements/apps.txt (line 3))\r\n\r\nThat&#39;s after updating the version number of Django from 1.2.3 to 1.2.4 in my requirements file.  I&#39;m using this command to actually do the upgrade:\r\n\r\n    pip --install --upgrade -E `&lt;virtualenv dir`&gt; --requirement `&lt;requirements file`&gt;\r\n\r\nI can&#39;t find any flag that triggers a total package re-download.  I even tried running an uninstall command first, then the install but no dice.  Maybe I&#39;m missing something?\r\n", "last_edit_date": 1397148218, "up_vote_count": 227, "link": "https://stackoverflow.com/questions/4536103/how-can-i-upgrade-specific-packages-using-pip-and-a-requirements-file", "_childDocuments_": [{"tags": [], "down_vote_count": 28, "creation_date": 1294048579, "answer_id": 4583509, "path": "stack.django.answer", "score": 25, "up_vote_count": 53, "is_accepted": true, "last_activity_date": 1397148263, "last_edit_date": 1397148263, "body_markdown": "I&#39;m not sure if it&#39;s exactly your problem, but in my case, I wasn&#39;t able to upgrade Django to 1.2.4 - I was always finishing with 1.2.3 version, so I uninstalled Django with:\r\n\r\n    &lt;virtualenv&gt;/bin/pip uninstall Django\r\n\r\nThen I removed `&lt;virtualenv&gt;/build/Django` directory and finally I installed the proper version with:\r\n\r\n    &lt;virtualenv&gt;/bin/pip install Django\r\n\r\nHope this will help."}, {"tags": [], "down_vote_count": 3, "creation_date": 1336085800, "answer_id": 10440459, "path": "stack.django.answer", "score": 770, "up_vote_count": 773, "is_accepted": false, "last_activity_date": 1480457401, "last_edit_date": 1480457401, "body_markdown": "I ran the following command and it upgraded from 1.2.3 to 1.4.0\r\n\r\n    pip install Django --upgrade\r\n\r\nShortcut for upgrade:\r\n\r\n    pip install Django -U\r\n\r\n**Note**: if the package you are upgrading has any requirements this command will additionally upgrade all the requirements to the latest versions available.  In recent versions of pip, [you can prevent this behavior by specifying `--upgrade-strategy only-if-needed`](https://pip.pypa.io/en/latest/reference/pip_install/#cmdoption--upgrade-strategy).  With that flag, dependencies will not be upgraded unless the installed versions of the dependent packages no longer satisfy the requirements of the upgraded package."}, {"tags": [], "down_vote_count": 0, "creation_date": 1336092194, "answer_id": 10441266, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1336092194, "body_markdown": "Normally, pip will clean up after itself and remove the contents of the build directory. The only time it doesn&#39;t do this is if:\r\n\r\n1. You used the `--no-install` option\r\n2. You are using editable packages\r\n3. The installation was cancelled or was otherwise interrupted.\r\n\r\nIn all other cases, you shouldn&#39;t have `build` directory that&#39;s clogging your environment."}, {"tags": [], "down_vote_count": 2, "creation_date": 1409490265, "answer_id": 25592272, "path": "stack.django.answer", "score": 23, "up_vote_count": 25, "is_accepted": false, "last_activity_date": 1409490265, "body_markdown": "The shortcut command for `--upgrade`:\r\n\r\n    pip install Django --upgrade\r\n\r\nIs:\r\n\r\n    pip install Django -U\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1420607775, "answer_id": 27812830, "path": "stack.django.answer", "score": 30, "up_vote_count": 32, "is_accepted": false, "last_activity_date": 1444919658, "last_edit_date": 1444919658, "body_markdown": "according to pip [docs](https://pip.pypa.io/en/latest/reference/pip_install.html) example 3\r\n\r\n    pip install --upgrade django\r\n\r\nbut based on my experience, using this method will also upgrade any package related to it. example:\r\n\r\nAssume you want to upgrade `somepackage` that require `django &gt;= 1.2.4` using this kind of method it will also upgrade `somepackage` AND `django` to the newest update. Just to be safe do :\r\n    \r\n    # assume you want to keep django 1.2.4\r\n    pip install --upgrade somepackage django==1.2.4\r\n\r\nDoing this will upgrade `somepackage` and keeping django to 1.2.4 version"}, {"tags": [], "down_vote_count": 0, "creation_date": 1480457017, "answer_id": 40876612, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1480457017, "body_markdown": "If you only want to upgrade one specific package called `somepackage`, the command you should use in recent versions of pip is \r\n\r\n    pip install --upgrade --upgrade-strategy only-if-needed somepackage\r\n\r\nThis is very useful when you developed an application in django that currently will only work with a specific version of django (say Django=1.9.x) and want to upgrade some dependent package with a bug-fix/new feature and the upgraded package depends on django (but works with say any version of django after 1.5).  The default behavior of `pip install --upgrade django-some-package` would be to upgrade django to the latest version available which could otherwise break your application, though with the `--upgrade-strategy only-if-needed` dependent packages will now only be upgraded as necessary."}, {"tags": [], "down_vote_count": 0, "creation_date": 1493324535, "answer_id": 43667256, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1493324535, "body_markdown": "If you upgrade a package, the old one will be uninstalled.  \r\n\r\nA convenient way to do this is to use this [pip-upgrader][1] which also updates the versions in your `requirements.txt` file for the chosen packages (or all packages).\r\n\r\n\r\n**Installation**\r\n\r\n    pip install pip-upgrader\r\n\r\n**Usage**\r\n\r\nActivate your virtualenv (important, because it will also install the new versions of upgraded packages in current virtualenv).\r\n\r\n`cd` into your project directory, then run:\r\n\r\n    pip-upgrade\r\n\r\n**Advanced usage**\r\n\r\nIf the requirements are placed in a non-standard location, send them as arguments:\r\n\r\n    pip-upgrade path/to/requirements.txt\r\n\r\nIf you already know what package you want to upgrade, simply send them as arguments:\r\n\r\n    pip-upgrade -p django -p celery -p dateutil\r\n\r\nIf you need to upgrade to  pre-release / post-release version, add `--prerelease` argument to your command.\r\n\r\nFull disclosure: i wrote this package. Hope it helps.\r\n\r\n  [1]: https://github.com/simion/pip-upgrader"}], "title": "How can I upgrade specific packages using pip and a requirements file?", "view_count": 314765, "answer_count": 7, "code_snippet": ["<code>Source in `&lt;virtualenv`&gt;/build/Django has version 1.2.3 that conflicts with Django==1.2.4 (from -r requirements/apps.txt (line 3))\n</code>", "<code>pip --install --upgrade -E `&lt;virtualenv dir`&gt; --requirement `&lt;requirements file`&gt;\n</code>", "<code>&lt;virtualenv&gt;/bin/pip uninstall Django\n</code>", "<code>&lt;virtualenv&gt;/build/Django</code>", "<code>&lt;virtualenv&gt;/bin/pip install Django\n</code>", "<code>pip install Django --upgrade\n</code>", "<code>pip install Django -U\n</code>", "<code>--upgrade-strategy only-if-needed</code>", "<code>pip install Requests --upgrade</code>", "<code>pip install --upgrade django==1.4.0</code>", "<code>pip install --upgrade django\n</code>", "<code>somepackage</code>", "<code>django &gt;= 1.2.4</code>", "<code>somepackage</code>", "<code>django</code>", "<code># assume you want to keep django 1.2.4\npip install --upgrade somepackage django==1.2.4\n</code>", "<code>somepackage</code>", "<code>--upgrade</code>", "<code>pip install Django --upgrade\n</code>", "<code>pip install Django -U\n</code>", "<code>somepackage</code>", "<code>pip install --upgrade --upgrade-strategy only-if-needed somepackage\n</code>", "<code>pip install --upgrade django-some-package</code>", "<code>--upgrade-strategy only-if-needed</code>", "<code>requirements.txt</code>", "<code>pip install pip-upgrader\n</code>", "<code>cd</code>", "<code>pip-upgrade\n</code>", "<code>pip-upgrade path/to/requirements.txt\n</code>", "<code>pip-upgrade -p django -p celery -p dateutil\n</code>", "<code>--prerelease</code>", "<code>--no-install</code>", "<code>build</code>"], "path": "stack.django"}, {"tags": ["django", "django-templates", "django-settings"], "creation_date": 1231691567, "body_markdown": "I have some stuff in settings.py that I&#39;d like to be able to access from a template, but I can&#39;t figure out how to do it. I already tried\r\n\r\n    {{CONSTANT_NAME}}\r\n\r\nbut that doesn&#39;t seem to work. Is this possible?", "last_edit_date": 1506929508, "up_vote_count": 301, "link": "https://stackoverflow.com/questions/433162/can-i-access-constants-in-settings-py-from-templates-in-django", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1231693263, "answer_id": 433209, "path": "stack.django.answer", "score": 360, "up_vote_count": 362, "is_accepted": false, "last_activity_date": 1466180726, "last_edit_date": 1466180726, "body_markdown": "If it&#39;s a value you&#39;d like to have for every request &amp; template, using a [context processor][1] is more appropriate.\r\n\r\nHere&#39;s how:\r\n\r\n1. Make a `context_processors.py` file in your app directory. Let&#39;s say I want to have the `ADMIN_PREFIX_VALUE` value in every context:\r\n\r\n\r\n        from django.conf import settings # import the settings file\r\n\r\n        def admin_media(request):\r\n            # return the value you want as a dictionnary. you may add multiple values in there.\r\n            return {&#39;ADMIN_MEDIA_URL&#39;: settings.ADMIN_MEDIA_PREFIX}\r\n    \r\n\r\n2. add your context processor to your *settings.py* file:\r\n\r\n        TEMPLATES = [{\r\n            # whatever comes before\r\n            &#39;OPTIONS&#39;: {\r\n                &#39;context_processors&#39;: [\r\n                    # whatever comes before\r\n                    &quot;your_app.context_processors.admin_media&quot;,\r\n                ],\r\n            }\r\n        }]\r\n\r\n3. Use `RequestContext` in your view to add your context processors in your template. The [`render` shortcut][2] does this automatically:\r\n\r\n        from django.shortcuts import render\r\n     \r\n        def my_view(request):\r\n            return render(request, &quot;index.html&quot;)\r\n\r\n4. and finally, in your template:\r\n\r\n        ...\r\n        &lt;a href=&quot;{{ ADMIN_MEDIA_URL }}&quot;&gt;path to admin media&lt;/a&gt;\r\n        ...\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/stable/ref/templates/api/#writing-your-own-context-processors\r\n  [2]: https://docs.djangoproject.com/en/stable/topics/http/shortcuts/#render"}, {"tags": [], "down_vote_count": 3, "creation_date": 1231694930, "answer_id": 433255, "path": "stack.django.answer", "score": 151, "up_vote_count": 154, "is_accepted": true, "last_activity_date": 1243819767, "last_edit_date": 1243819767, "body_markdown": "Django provides access to certain, frequently-used settings constants to the template such as `settings.MEDIA_URL` and some of the language settings if you use django&#39;s built in generic views or pass in a context instance keyword argument in the `render_to_response` shortcut function.  Here&#39;s an example of each case:\r\n\r\n    from django.shortcuts import render_to_response\r\n    from django.template import RequestContext\r\n    from django.views.generic.simple import direct_to_template\r\n\r\n    def my_generic_view(request, template=&#39;my_template.html&#39;):\r\n        return direct_to_template(request, template)\r\n\r\n    def more_custom_view(request, template=&#39;my_template.html&#39;):\r\n        return render_to_response(template, {}, context_instance=RequestContext(request))\r\n\r\nThese views will both have several frequently used settings like `settings.MEDIA_URL` available to the template as `{{ MEDIA_URL }}`, etc.\r\n\r\nIf you&#39;re looking for access to other constants in the settings, then simply unpack the constants you want and add them to the context dictionary you&#39;re using in your view function, like so:\r\n\r\n    from django.conf import settings\r\n    from django.shortcuts import render_to_response\r\n\r\n    def my_view_function(request, template=&#39;my_template.html&#39;):\r\n        context = {&#39;favorite_color&#39;: settings.FAVORITE_COLOR}\r\n        return render_to_response(template, context)\r\n\r\nNow you can access `settings.FAVORITE_COLOR` on your template as `{{ favorite_color }}`.  "}, {"tags": [], "down_vote_count": 0, "creation_date": 1299603180, "answer_id": 5235614, "path": "stack.django.answer", "score": 39, "up_vote_count": 39, "is_accepted": false, "last_activity_date": 1299603180, "body_markdown": "Another way to do this is to create a custom template tag which can let you fish values out of the settings.\r\n\r\n    @register.tag\r\n    def value_from_settings(parser, token):\r\n        try:\r\n            # split_contents() knows not to split quoted strings.\r\n            tag_name, var = token.split_contents()\r\n        except ValueError:\r\n            raise template.TemplateSyntaxError, &quot;%r tag requires a single argument&quot; % token.contents.split()[0]\r\n        return ValueFromSettings(var)\r\n    \r\n    class ValueFromSettings(template.Node):\r\n        def __init__(self, var):\r\n            self.arg = template.Variable(var)\r\n        def render(self, context):        \r\n            return settings.__getattr__(str(self.arg))\r\n\r\n\r\nYou can then use:\r\n\r\n    {% value_from_settings &quot;FQDN&quot; %}\r\n\r\nto print it on any page, without jumping through context-processor hoops."}, {"tags": [], "down_vote_count": 0, "creation_date": 1301319944, "answer_id": 5459882, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1301320336, "last_edit_date": 1301320336, "body_markdown": "The example above from bchhun is nice except that you need to explicitly build your context dictionary from settings.py.  Below is an UNTESTED example of how you could auto-build the context dictionary from all upper-case attributes of settings.py (re: &quot;^[A-Z0-9_]+$&quot;).\r\n\r\nAt the end of settings.py:\r\n\r\n    _context = {} \r\n    local_context = locals()\r\n    for (k,v) in local_context.items():\r\n        if re.search(&#39;^[A-Z0-9_]+$&#39;,k):\r\n            _context[k] = str(v)\r\n\r\n    def settings_context(context):\r\n        return _context\r\n\r\n    TEMPLATE_CONTEXT_PROCESSORS = (\r\n    ...\r\n    &#39;myproject.settings.settings_context&#39;,\r\n    ...\r\n    )"}, {"tags": [], "down_vote_count": 0, "creation_date": 1308053783, "answer_id": 6343321, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1320857303, "last_edit_date": 1495541910, "body_markdown": "I improved [chrisdew&#39;s answer](https://stackoverflow.com/questions/433162/can-i-access-constants-in-settings-py-from-templates-in-django/5235614#5235614) (to create your own tag) a little bit.\r\n\r\nFirst, create the file `yourapp/templatetags/value_from_settings.py` in which you define your own new tag `value_from_settings`:\r\n\r\n    from django.template import TemplateSyntaxError, Variable, Node, Variable, Library\r\n    from yourapp import settings\r\n  \r\n    register = Library()\r\n    # I found some tricks in URLNode and url from defaulttags.py:\r\n    # https://code.djangoproject.com/browser/django/trunk/django/template/defaulttags.py\r\n    @register.tag\r\n    def value_from_settings(parser, token):\r\n      bits = token.split_contents()\r\n      if len(bits) &lt; 2:\r\n        raise TemplateSyntaxError(&quot;&#39;%s&#39; takes at least one &quot; \\\r\n          &quot;argument (settings constant to retrieve)&quot; % bits[0])\r\n      settingsvar = bits[1]\r\n      settingsvar = settingsvar[1:-1] if settingsvar[0] == &#39;&quot;&#39; else settingsvar\r\n      asvar = None\r\n      bits = bits[2:]\r\n      if len(bits) &gt;= 2 and bits[-2] == &#39;as&#39;:\r\n        asvar = bits[-1]\r\n        bits = bits[:-2]\r\n      if len(bits):\r\n        raise TemplateSyntaxError(&quot;&#39;value_from_settings&#39; didn&#39;t recognise &quot; \\\r\n          &quot;the arguments &#39;%s&#39;&quot; % &quot;, &quot;.join(bits))\r\n      return ValueFromSettings(settingsvar, asvar)\r\n  \r\n    class ValueFromSettings(Node):\r\n      def __init__(self, settingsvar, asvar):\r\n        self.arg = Variable(settingsvar)\r\n        self.asvar = asvar\r\n      def render(self, context):\r\n        ret_val = getattr(settings,str(self.arg))\r\n        if self.asvar:\r\n          context[self.asvar] = ret_val\r\n          return &#39;&#39;\r\n        else:\r\n          return ret_val\r\n\r\nYou can use this tag in your Template via:\r\n\r\n    {% load value_from_settings %}\r\n    [...]\r\n    {% value_from_settings &quot;FQDN&quot; %}\r\n\r\nor via\r\n\r\n    {% load value_from_settings %}\r\n    [...]\r\n    {% value_from_settings &quot;FQDN&quot; as my_fqdn %}\r\n\r\nThe advantage of the `as ...` notation is that this makes it easy to use in `blocktrans` blocks via a simple `{{my_fqdn}}`."}, {"tags": [], "down_vote_count": 0, "creation_date": 1318265899, "answer_id": 7716141, "path": "stack.django.answer", "score": 208, "up_vote_count": 208, "is_accepted": false, "last_activity_date": 1345407405, "last_edit_date": 1345407405, "body_markdown": "I find the simplest approach being a single template tag:\r\n\r\n    from django import template\r\n    from django.conf import settings\r\n\r\n    register = template.Library()\r\n\r\n    # settings value\r\n    @register.simple_tag\r\n    def settings_value(name):\r\n        return getattr(settings, name, &quot;&quot;)\r\n\r\nUsage:\r\n\r\n    {% settings_value &quot;LANGUAGE_CODE&quot; %}"}, {"tags": [], "down_vote_count": 0, "creation_date": 1322065251, "answer_id": 8245571, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1322065251, "body_markdown": "Both IanSR and bchhun suggested overriding TEMPLATE_CONTEXT_PROCESSORS in the settings. Be aware that this setting has a default that can cause some screwy things if you override it without re-setting the defaults. The defaults have also changed in recent versions of Django.\r\n\r\nhttps://docs.djangoproject.com/en/1.3/ref/settings/#template-context-processors\r\n\r\nThe default TEMPLATE_CONTEXT_PROCESSORS :\r\n\r\n    TEMPLATE_CONTEXT_PROCESSORS = (&quot;django.contrib.auth.context_processors.auth&quot;,\r\n    &quot;django.core.context_processors.debug&quot;,\r\n    &quot;django.core.context_processors.i18n&quot;,\r\n    &quot;django.core.context_processors.media&quot;,\r\n    &quot;django.core.context_processors.static&quot;,\r\n    &quot;django.contrib.messages.context_processors.messages&quot;)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1323581389, "answer_id": 8462170, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1455648137, "last_edit_date": 1455648137, "body_markdown": "If we were to compare context vs. template tags on a single variable, then knowing the more efficient option could be benificial. However, you might be better off to dip into the settings only from templates that need that variable. In that case it doesn&#39;t make sense to pass the variable into all templates. But if you are sending the variable into a common template such as the base.html template, Then it would not matter as the base.html template is rendered on every request, so you can use either methods.\r\n\r\nIf you decide to go with the template tags option, then use the following code as it allows you to pass a **default** value in, just in case the variable in-question was undefined.\r\n\r\nExample: get_from_settings my_variable as my_context_value\r\n\r\nExample: get_from_settings my_variable my_default as my_context_value\r\n\r\n\r\n\r\n    class SettingsAttrNode(Node):\r\n        def __init__(self, variable, default, as_value):\r\n            self.variable = getattr(settings, variable, default)\r\n            self.cxtname = as_value\r\n\r\n        def render(self, context):\r\n            context[self.cxtname] = self.variable\r\n            return &#39;&#39;\r\n \r\n\r\n    def get_from_setting(parser, token):\r\n        as_value = variable = default = &#39;&#39;\r\n        bits = token.contents.split()\r\n        if len(bits) == 4 and bits[2] == &#39;as&#39;:\r\n            variable = bits[1]\r\n            as_value = bits[3]\r\n        elif len(bits) == 5 and bits[3] == &#39;as&#39;:\r\n            variable     = bits[1]\r\n            default  = bits[2]\r\n            as_value = bits[4]\r\n        else:\r\n            raise TemplateSyntaxError, &quot;usage: get_from_settings variable default as value &quot; \\\r\n                    &quot;OR: get_from_settings variable as value&quot;\r\n\r\n        return SettingsAttrNode(variable=variable, default=default, as_value=as_value)\r\n\r\n    get_from_setting = register.tag(get_from_setting)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1367188693, "answer_id": 16268775, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1367188998, "last_edit_date": 1367188998, "body_markdown": "If using a class-based view:\r\n\r\n    #\r\n    # in settings.py\r\n    #\r\n    YOUR_CUSTOM_SETTING = &#39;some value&#39;\r\n\r\n    #\r\n    # in views.py\r\n    #\r\n    from django.conf import settings #for getting settings vars\r\n\r\n    class YourView(DetailView): #assuming DetailView; whatever though\r\n    \r\n        # ...\r\n    \r\n        def get_context_data(self, **kwargs):\r\n    \r\n            context = super(YourView, self).get_context_data(**kwargs)\r\n            context[&#39;YOUR_CUSTOM_SETTING&#39;] = settings.YOUR_CUSTOM_SETTING\r\n    \r\n            return context\r\n\r\n    #\r\n    # in your_template.html, reference the setting like any other context variable\r\n    #\r\n    {{ YOUR_CUSTOM_SETTING }}"}, {"tags": [], "down_vote_count": 1, "creation_date": 1377284813, "answer_id": 18410133, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1377284813, "body_markdown": "I found this to be the simplest approach for Django 1.3:\r\n\r\n1. **views.py**\r\n\r\n        from local_settings import BASE_URL\r\n\r\n        def root(request):\r\n            return render_to_response(&#39;hero.html&#39;, {&#39;BASE_URL&#39;: BASE_URL})\r\n\r\n2. **hero.html**\r\n\r\n        var BASE_URL = &#39;{{ JS_BASE_URL }}&#39;;\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1391658355, "answer_id": 21593607, "path": "stack.django.answer", "score": 21, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1479141604, "last_edit_date": 1479141604, "body_markdown": "I like Berislav&#39;s solution, because on simple sites, it is clean and effective.  What I do NOT like is exposing all the settings constants willy-nilly.  So what I ended up doing was this:\r\n\r\n    from django import template\r\n    from django.conf import settings\r\n\r\n    register = template.Library()\r\n\r\n    ALLOWABLE_VALUES = (&quot;CONSTANT_NAME_1&quot;, &quot;CONSTANT_NAME_2&quot;,)\r\n\r\n    # settings value\r\n    @register.simple_tag\r\n    def settings_value(name):\r\n        if name in ALLOWABLE_VALUES:\r\n            return getattr(settings, name, &#39;&#39;)\r\n        return &#39;&#39;\r\n\r\nUsage:\r\n     \r\n    {% settings_value &quot;CONSTANT_NAME_1&quot; %}\r\n\r\nThis protects any constants that you have not named from use in the template, and if you wanted to get really fancy, you could set a tuple in the settings, and create more than one template tag for different pages, apps or areas, and simply combine a local tuple with the settings tuple as needed, then do the list comprehension to see if the value is acceptable.  \r\nI agree, on a complex site, this is a bit simplistic, but there are values that would be nice to have universally in templates, and this seems to work nicely.\r\nThanks to Berislav for the original idea!\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1410756875, "answer_id": 25841039, "path": "stack.django.answer", "score": 62, "up_vote_count": 62, "is_accepted": false, "last_activity_date": 1451335570, "last_edit_date": 1451335570, "body_markdown": "Check out [`django-settings-export`](https://github.com/jakubroztocil/django-settings-export) (disclaimer: I&#39;m the author of this project).\r\n\r\nFor example...\r\n\r\n    $ pip install django-settings-export\r\n\r\n###settings.py ###\r\n\r\n    TEMPLATES = [\r\n        {\r\n            &#39;OPTIONS&#39;: {\r\n                &#39;context_processors&#39;: [\r\n                    &#39;django_settings_export.settings_export&#39;,\r\n                ],\r\n            },\r\n        },\r\n    ]\r\n\r\n    MY_CHEESE = &#39;Camembert&#39;;\r\n    \r\n    SETTINGS_EXPORT = [\r\n        &#39;MY_CHEESE&#39;,\r\n    ]\r\n\r\n### template.html ###\r\n\r\n    &lt;script&gt;var MY_CHEESE = &#39;{{ settings.MY_CHEESE }}&#39;;&lt;/script&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1516197411, "answer_id": 48302868, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1516197411, "body_markdown": "If someone finds this question like I did, then I&#39;ll post my solution which works on Django 2.0:\r\n\r\nThis tag assigns some settings.py variable value to template&#39;s variable:\r\n\r\nUsage: `{% get_settings_value template_var &quot;SETTINGS_VAR&quot; %}`\r\n## app/templatetags/my_custom_tags.py: ##\r\n\r\n    from django import template\r\n    from django.conf import settings\r\n    \r\n    register = template.Library()\r\n    \r\n    class AssignNode(template.Node):\r\n        def __init__(self, name, value):\r\n            self.name = name\r\n            self.value = value\r\n            \r\n        def render(self, context):\r\n            context[self.name] = getattr(settings, self.value.resolve(context, True), &quot;&quot;)\r\n            return &#39;&#39;\r\n    \r\n    @register.tag(&#39;get_settings_value&#39;)\r\n    def do_assign(parser, token):\r\n        bits = token.split_contents()\r\n        if len(bits) != 3:\r\n            raise template.TemplateSyntaxError(&quot;&#39;%s&#39; tag takes two arguments&quot; % bits[0])\r\n        value = parser.compile_filter(bits[2])\r\n        return AssignNode(bits[1], value)\r\n\r\n## Your template: ##\r\n\r\n    {% load my_custom_tags %}\r\n\r\n    # Set local template variable:\r\n    {% get_settings_value settings_debug &quot;DEBUG&quot; %}\r\n\r\n    # Output settings_debug variable:\r\n    {{ settings_debug }}\r\n\r\n    # Use variable in if statement:\r\n    {% if settings_debug == True %}\r\n    ... do something ...\r\n    {% else %}\r\n    ... do other stuff ...\r\n    {% endif %}\r\n\r\nSee Django&#39;s documentation how to create custom template tags here: https://docs.djangoproject.com/en/2.0/howto/custom-template-tags/"}], "title": "Can I access constants in settings.py from templates in Django?", "view_count": 110161, "answer_count": 13, "code_snippet": ["<code>{{CONSTANT_NAME}}\n</code>", "<code>settings.MEDIA_URL</code>", "<code>render_to_response</code>", "<code>from django.shortcuts import render_to_response\nfrom django.template import RequestContext\nfrom django.views.generic.simple import direct_to_template\n\ndef my_generic_view(request, template='my_template.html'):\n    return direct_to_template(request, template)\n\ndef more_custom_view(request, template='my_template.html'):\n    return render_to_response(template, {}, context_instance=RequestContext(request))\n</code>", "<code>settings.MEDIA_URL</code>", "<code>{{ MEDIA_URL }}</code>", "<code>from django.conf import settings\nfrom django.shortcuts import render_to_response\n\ndef my_view_function(request, template='my_template.html'):\n    context = {'favorite_color': settings.FAVORITE_COLOR}\n    return render_to_response(template, context)\n</code>", "<code>settings.FAVORITE_COLOR</code>", "<code>{{ favorite_color }}</code>", "<code>django-settings-export</code>", "<code>context_processors.py</code>", "<code>ADMIN_PREFIX_VALUE</code>", "<code>from django.conf import settings # import the settings file\n\ndef admin_media(request):\n    # return the value you want as a dictionnary. you may add multiple values in there.\n    return {'ADMIN_MEDIA_URL': settings.ADMIN_MEDIA_PREFIX}\n</code>", "<code>TEMPLATES = [{\n    # whatever comes before\n    'OPTIONS': {\n        'context_processors': [\n            # whatever comes before\n            \"your_app.context_processors.admin_media\",\n        ],\n    }\n}]\n</code>", "<code>RequestContext</code>", "<code>render</code>", "<code>from django.shortcuts import render\n\ndef my_view(request):\n    return render(request, \"index.html\")\n</code>", "<code>...\n&lt;a href=\"{{ ADMIN_MEDIA_URL }}\"&gt;path to admin media&lt;/a&gt;\n...\n</code>", "<code>context_process.py</code>", "<code>settings.py</code>", "<code>\"context_processors.admin_media\"</code>", "<code>TEMPLATE_CONTEXT_PROCESSORS</code>", "<code>from django import template\nfrom django.conf import settings\n\nregister = template.Library()\n\n# settings value\n@register.simple_tag\ndef settings_value(name):\n    return getattr(settings, name, \"\")\n</code>", "<code>{% settings_value \"LANGUAGE_CODE\" %}\n</code>", "<code>{% settings_value \"DATABASES\" %}</code>", "<code>django-settings-export</code>", "<code>$ pip install django-settings-export\n</code>", "<code>TEMPLATES = [\n    {\n        'OPTIONS': {\n            'context_processors': [\n                'django_settings_export.settings_export',\n            ],\n        },\n    },\n]\n\nMY_CHEESE = 'Camembert';\n\nSETTINGS_EXPORT = [\n    'MY_CHEESE',\n]\n</code>", "<code>&lt;script&gt;var MY_CHEESE = '{{ settings.MY_CHEESE }}';&lt;/script&gt;\n</code>", "<code>@register.tag\ndef value_from_settings(parser, token):\n    try:\n        # split_contents() knows not to split quoted strings.\n        tag_name, var = token.split_contents()\n    except ValueError:\n        raise template.TemplateSyntaxError, \"%r tag requires a single argument\" % token.contents.split()[0]\n    return ValueFromSettings(var)\n\nclass ValueFromSettings(template.Node):\n    def __init__(self, var):\n        self.arg = template.Variable(var)\n    def render(self, context):        \n        return settings.__getattr__(str(self.arg))\n</code>", "<code>{% value_from_settings \"FQDN\" %}\n</code>", "<code>from django import template\nfrom django.conf import settings\n\nregister = template.Library()\n\nALLOWABLE_VALUES = (\"CONSTANT_NAME_1\", \"CONSTANT_NAME_2\",)\n\n# settings value\n@register.simple_tag\ndef settings_value(name):\n    if name in ALLOWABLE_VALUES:\n        return getattr(settings, name, '')\n    return ''\n</code>", "<code>{% settings_value \"CONSTANT_NAME_1\" %}\n</code>", "<code>if name in ALLOWABLE_VALUES: ...</code>", "<code>'val' in ('val_first', 'second_val',)</code>", "<code>False</code>", "<code>if</code>", "<code>DEBUG</code>", "<code>yourapp/templatetags/value_from_settings.py</code>", "<code>value_from_settings</code>", "<code>from django.template import TemplateSyntaxError, Variable, Node, Variable, Library\nfrom yourapp import settings\n\nregister = Library()\n# I found some tricks in URLNode and url from defaulttags.py:\n# https://code.djangoproject.com/browser/django/trunk/django/template/defaulttags.py\n@register.tag\ndef value_from_settings(parser, token):\n  bits = token.split_contents()\n  if len(bits) &lt; 2:\n    raise TemplateSyntaxError(\"'%s' takes at least one \" \\\n      \"argument (settings constant to retrieve)\" % bits[0])\n  settingsvar = bits[1]\n  settingsvar = settingsvar[1:-1] if settingsvar[0] == '\"' else settingsvar\n  asvar = None\n  bits = bits[2:]\n  if len(bits) &gt;= 2 and bits[-2] == 'as':\n    asvar = bits[-1]\n    bits = bits[:-2]\n  if len(bits):\n    raise TemplateSyntaxError(\"'value_from_settings' didn't recognise \" \\\n      \"the arguments '%s'\" % \", \".join(bits))\n  return ValueFromSettings(settingsvar, asvar)\n\nclass ValueFromSettings(Node):\n  def __init__(self, settingsvar, asvar):\n    self.arg = Variable(settingsvar)\n    self.asvar = asvar\n  def render(self, context):\n    ret_val = getattr(settings,str(self.arg))\n    if self.asvar:\n      context[self.asvar] = ret_val\n      return ''\n    else:\n      return ret_val\n</code>", "<code>{% load value_from_settings %}\n[...]\n{% value_from_settings \"FQDN\" %}\n</code>", "<code>{% load value_from_settings %}\n[...]\n{% value_from_settings \"FQDN\" as my_fqdn %}\n</code>", "<code>as ...</code>", "<code>blocktrans</code>", "<code>{{my_fqdn}}</code>", "<code>_context = {} \nlocal_context = locals()\nfor (k,v) in local_context.items():\n    if re.search('^[A-Z0-9_]+$',k):\n        _context[k] = str(v)\n\ndef settings_context(context):\n    return _context\n\nTEMPLATE_CONTEXT_PROCESSORS = (\n...\n'myproject.settings.settings_context',\n...\n)\n</code>", "<code>#\n# in settings.py\n#\nYOUR_CUSTOM_SETTING = 'some value'\n\n#\n# in views.py\n#\nfrom django.conf import settings #for getting settings vars\n\nclass YourView(DetailView): #assuming DetailView; whatever though\n\n    # ...\n\n    def get_context_data(self, **kwargs):\n\n        context = super(YourView, self).get_context_data(**kwargs)\n        context['YOUR_CUSTOM_SETTING'] = settings.YOUR_CUSTOM_SETTING\n\n        return context\n\n#\n# in your_template.html, reference the setting like any other context variable\n#\n{{ YOUR_CUSTOM_SETTING }}\n</code>", "<code>{% get_settings_value template_var \"SETTINGS_VAR\" %}</code>", "<code>from django import template\nfrom django.conf import settings\n\nregister = template.Library()\n\nclass AssignNode(template.Node):\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\n\n    def render(self, context):\n        context[self.name] = getattr(settings, self.value.resolve(context, True), \"\")\n        return ''\n\n@register.tag('get_settings_value')\ndef do_assign(parser, token):\n    bits = token.split_contents()\n    if len(bits) != 3:\n        raise template.TemplateSyntaxError(\"'%s' tag takes two arguments\" % bits[0])\n    value = parser.compile_filter(bits[2])\n    return AssignNode(bits[1], value)\n</code>", "<code>{% load my_custom_tags %}\n\n# Set local template variable:\n{% get_settings_value settings_debug \"DEBUG\" %}\n\n# Output settings_debug variable:\n{{ settings_debug }}\n\n# Use variable in if statement:\n{% if settings_debug == True %}\n... do something ...\n{% else %}\n... do other stuff ...\n{% endif %}\n</code>", "<code>TEMPLATE_CONTEXT_PROCESSORS = (\"django.contrib.auth.context_processors.auth\",\n\"django.core.context_processors.debug\",\n\"django.core.context_processors.i18n\",\n\"django.core.context_processors.media\",\n\"django.core.context_processors.static\",\n\"django.contrib.messages.context_processors.messages\")\n</code>", "<code>from local_settings import BASE_URL\n\ndef root(request):\n    return render_to_response('hero.html', {'BASE_URL': BASE_URL})\n</code>", "<code>var BASE_URL = '{{ JS_BASE_URL }}';\n</code>", "<code>class SettingsAttrNode(Node):\n    def __init__(self, variable, default, as_value):\n        self.variable = getattr(settings, variable, default)\n        self.cxtname = as_value\n\n    def render(self, context):\n        context[self.cxtname] = self.variable\n        return ''\n\n\ndef get_from_setting(parser, token):\n    as_value = variable = default = ''\n    bits = token.contents.split()\n    if len(bits) == 4 and bits[2] == 'as':\n        variable = bits[1]\n        as_value = bits[3]\n    elif len(bits) == 5 and bits[3] == 'as':\n        variable     = bits[1]\n        default  = bits[2]\n        as_value = bits[4]\n    else:\n        raise TemplateSyntaxError, \"usage: get_from_settings variable default as value \" \\\n                \"OR: get_from_settings variable as value\"\n\n    return SettingsAttrNode(variable=variable, default=default, as_value=as_value)\n\nget_from_setting = register.tag(get_from_setting)\n</code>", "<code>SITE_EXTRA_CONTEXT_DICT</code>"], "path": "stack.django"}, {"tags": ["python", "django", "openid"], "creation_date": 1264255091, "body_markdown": "**Please note**: this is an ancient question with ancient answers. Most of the linked apps are now unmaintained. These days, most people seem to use [django-allauth][1] or [python-social-auth][2]. I&#39;ll leave the original question intact below for posterity&#39;s sake.\r\n\r\n---\r\n\r\nThere are at least half a dozen Django apps that provide OpenID authentication for Django:\r\n\r\n * [django-openid][3]\r\n * [django-openid-auth][4]\r\n * another [django-openid-auth][5], which seems to be dead\r\n * [django-authopenid][6]\r\n * [django-socialauth][7] (which also provides authentication with Twitter and Facebook accounts)\r\n * [django-socialregistration][8] (has Facebook and Twitter authentication, too)\r\n * [django-openid-consumer][9], a fork of Simon Willison&#39;s original django-openid. Seems more suited for simple blog comments than a full fledged registration workflow\r\n * [django-social-auth][10]\r\n\r\nI played around with a couple of them. Simon Willison&#39;s [django-openid][11] made a good impression, but as he is at the forefront of trendsetting in Djangoland, I sometimes have difficulties wrapping my head around his trends (e.g. the whole dynamic urlpatterns system in django-openid). What&#39;s more, I couldn&#39;t get login to work with Google.\r\n\r\n[django-authopenid][12] made a good impression, and it seems to have good integration with [django-registration][13]. [django-socialauth][14] and [django-socialregistration][15] have support for Twitter and Facebook, which is definitely a plus. Who knows if and when Facebook will start to be an OpenID provider...? socialauth seems to have [its share of problems][16], though.\r\n\r\nSo, what is the best OpenID app out there? Please share any positive (and negative) experience. Thanks!\r\n\r\n\r\n  [1]: https://github.com/pennersr/django-allauth\r\n  [2]: https://github.com/omab/python-social-auth\r\n  [3]: http://github.com/simonw/django-openid\r\n  [4]: https://launchpad.net/django-openid-auth\r\n  [5]: http://code.google.com/p/django-openid-auth/\r\n  [6]: http://bitbucket.org/benoitc/django-authopenid/wiki/Home\r\n  [7]: http://github.com/uswaretech/Django-Socialauth\r\n  [8]: http://github.com/flashingpumpkin/django-socialregistration\r\n  [9]: http://code.google.com/p/django-openid-consumer/\r\n  [10]: http://github.com/omab/django-social-auth\r\n  [11]: http://github.com/simonw/django-openid\r\n  [12]: http://bitbucket.org/benoitc/django-authopenid/wiki/Home\r\n  [13]: http://bitbucket.org/ubernostrum/django-registration/wiki/Home\r\n  [14]: http://github.com/uswaretech/Django-Socialauth\r\n  [15]: http://github.com/flashingpumpkin/django-socialregistration\r\n  [16]: http://www.elfsternberg.com/2009/11/24/django-socialauth-component-now-with-some-elfin-goodness/", "last_edit_date": 1429116936, "up_vote_count": 244, "link": "https://stackoverflow.com/questions/2123369/whats-the-best-solution-for-openid-with-django", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1264258843, "answer_id": 2123561, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1264258843, "body_markdown": "I prefer django-authopenid, but I think most of the mature solutions are pretty equal at this point. Still, it is what I see used the most. I&#39;ve made a handful of customizations to how we use it without having to actually fork it, and that&#39;s a huge plus in my book. In other words, its fairly hookable."}, {"tags": [], "down_vote_count": 5, "creation_date": 1264723287, "answer_id": 2158946, "path": "stack.django.answer", "score": 1, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1264723287, "body_markdown": "You could try [pinax][1]\r\n\r\n\r\n  [1]: http://pinaxproject.com/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1265108523, "answer_id": 2183443, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1265108523, "body_markdown": "django-socialauth is good for me"}, {"tags": [], "down_vote_count": 0, "creation_date": 1265119338, "answer_id": 2184521, "path": "stack.django.answer", "score": 85, "up_vote_count": 85, "is_accepted": true, "last_activity_date": 1343644963, "last_edit_date": 1343644963, "body_markdown": "The one that has proven to work best for me, and which seems most up-to-date is the one over at launchpad.\r\n\r\nIt integrated seamlessly with my application that already utilizes the django.auth module.\r\n\r\nhttps://launchpad.net/django-openid-auth\r\n\r\nTo get a copy run:\r\n\r\n    bzr branch lp:django-openid-auth\r\n\r\nOr install it via PyPI\r\n\r\n    pip install django-openid-auth"}, {"tags": [], "down_vote_count": 0, "creation_date": 1265702629, "answer_id": 2227591, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1265702629, "body_markdown": "Don&#39;t forget [Elf Sternberg&#39;s fork][1] of django-socialauth - he&#39;s working to clean up what he sees as a lot of bad implementation decisions in the original socialauth app. Looks clean so far but it&#39;s unclear whether his project will have momentum.\r\n\r\n\r\n  [1]: http://github.com/elfsternberg/Django-Socialauth"}, {"tags": [], "down_vote_count": 0, "creation_date": 1288793560, "answer_id": 4087914, "path": "stack.django.answer", "score": 30, "up_vote_count": 30, "is_accepted": false, "last_activity_date": 1380094704, "last_edit_date": 1380094704, "body_markdown": "The last post for this thread is in February. It&#39;s been almost 8 months and I&#39;m pretty sure a lot of things have been changed. \r\n\r\nI am very interested in Django-Socialauth since it supports gmail, yahoo, facebook, twitter, and OpenID.\r\n\r\nI found two forks that seem up-to-date:\r\n\r\nhttps://github.com/uswaretech/Django-Socialauth\r\n\r\nhttps://github.com/agiliq/Django-Socialauth\r\n\r\nThe second fork has been recently updated at this moment. \r\n\r\nI was wondering if anyone has recently used any of these forks? I am looking for the most reliable one for my website.\r\n\r\nThanks\r\n\r\n*Update:* The most up-to-date fork appears to be [omab/django-social-auth](https://github.com/omab/django-social-auth), which is also what [the pypi package](https://pypi.python.org/pypi/django-social-auth) points at."}], "title": "What&#39;s the best solution for OpenID with Django?", "view_count": 26052, "answer_count": 6, "code_snippet": ["<code>bzr branch lp:django-openid-auth\n</code>", "<code>pip install django-openid-auth\n</code>", "<code>pip install django-social-auth</code>", "<code>django-social-auth</code>", "<code>Django-Socialauth</code>", "<code>Django-Socialauth</code>"], "path": "stack.django"}, {"tags": ["django"], "creation_date": 1267230539, "body_markdown": "Exactly the same as [this question][1], but there must be a way to do it without the Sites module. That&#39;s just silly... I shouldn&#39;t need to query my DB to snag the URL!\r\n\r\nI want to use it with `reverse()`.\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/892997/how-do-i-get-the-server-name-in-django-for-a-complete-url", "last_edit_date": 1495542389, "up_vote_count": 276, "link": "https://stackoverflow.com/questions/2345708/how-can-i-get-the-full-absolute-url-with-domain-in-django", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1267232001, "answer_id": 2345790, "path": "stack.django.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1267232001, "body_markdown": "Examine `Request.META` dictionary that comes in. I think it has server name and server port."}, {"tags": [], "down_vote_count": 1, "creation_date": 1267236008, "answer_id": 2345954, "path": "stack.django.answer", "score": 393, "up_vote_count": 394, "is_accepted": true, "last_activity_date": 1457621214, "last_edit_date": 1457621214, "body_markdown": "Use handy [request.build_absolute_uri()][1] method on request, pass it the relative url and it&#39;ll give you full one.\r\n\r\nBy default, the absolute URL for `request.get_full_path()` is returned, but you can pass it a relative URL as the first argument to convert it to an absolute URL.\r\n\r\n  [1]: http://docs.djangoproject.com/en/stable/ref/request-response/#django.http.HttpRequest.build_absolute_uri"}, {"tags": [], "down_vote_count": 2, "creation_date": 1326278660, "answer_id": 8817935, "path": "stack.django.answer", "score": 43, "up_vote_count": 45, "is_accepted": false, "last_activity_date": 1456781239, "last_edit_date": 1456781239, "body_markdown": "You can also use [`get_current_site`][1] as part of the sites app (`from django.contrib.sites.models import get_current_site`). It takes a request object, and defaults to the site object you have configured with `SITE_ID` in settings.py if request is `None`. Read more in documentation for [using the sites framework][2]\r\n\r\ne.g.\r\n\r\n    from django.contrib.sites.shortcuts import get_current_site\r\n    request = None\r\n    full_url = &#39;&#39;.join([&#39;http://&#39;, get_current_site(request).domain, obj.get_absolute_url()])\r\n\r\n\r\nIt isn&#39;t as compact/neat as `request.build_absolute_url()`, but it is usable when request objects are unavailable, and you have a default site url.\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/stable/ref/contrib/sites/#get-current-site-shortcut\r\n  [2]: https://docs.djangoproject.com/en/dev/ref/contrib/sites/#getting-the-current-domain-for-full-urls"}, {"tags": [], "down_vote_count": 5, "creation_date": 1353512082, "answer_id": 13496628, "path": "stack.django.answer", "score": -4, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1353512082, "body_markdown": "You can try &quot;request.get_full_path()&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1377241625, "answer_id": 18396895, "path": "stack.django.answer", "score": 53, "up_vote_count": 53, "is_accepted": false, "last_activity_date": 1377241625, "body_markdown": "If you want to use it with `reverse()` you can do this : `request.build_absolute_uri(reverse(&#39;view_name&#39;, args=(obj.pk, )))`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1406317184, "answer_id": 24963315, "path": "stack.django.answer", "score": 40, "up_vote_count": 40, "is_accepted": false, "last_activity_date": 1490768818, "last_edit_date": 1490768818, "body_markdown": "If you can&#39;t get access to `request` then you can&#39;t use `get_current_site(request)` as recommended in some solutions here. You can use a combination of the native Sites framework and `get_absolute_url` instead. Set up at least one [Site][1] in the admin, make sure your model has a [get_absolute_url()][2] method, then:\r\n\r\n    &gt;&gt;&gt; from django.contrib.sites.models import Site\r\n    &gt;&gt;&gt; domain = Site.objects.get_current().domain\r\n    &gt;&gt;&gt; obj = MyModel.objects.get(id=3)\r\n    &gt;&gt;&gt; path = obj.get_absolute_url()\r\n\r\n    &gt;&gt;&gt; url = &#39;http://{domain}{path}&#39;.format(domain=domain, path=path)\r\n    &gt;&gt;&gt; print(url)\r\n    &#39;http://example.com/mymodel/objects/3/&#39;\r\n\r\nhttps://docs.djangoproject.com/en/dev/ref/contrib/sites/#getting-the-current-domain-for-full-urls\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.10/ref/contrib/sites/\r\n  [2]: https://docs.djangoproject.com/en/1.10/ref/models/instances/#get-absolute-url"}, {"tags": [], "down_vote_count": 0, "creation_date": 1416386428, "answer_id": 27012286, "path": "stack.django.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1509968065, "last_edit_date": 1509968065, "body_markdown": "If you don&#39;t want to hit the database, you could do it with a setting.  Then, use a context processor to add it to every template:\r\n\r\n    # settings.py (Django &lt; 1.9)\r\n    ...\r\n    BASE_URL = &#39;http://example.com&#39;\r\n    TEMPLATE_CONTEXT_PROCESSORS = (\r\n        ...\r\n        &#39;myapp.context_processors.extra_context&#39;,\r\n    )\r\n    # settings.py (Django &gt;= 1.9)\r\n    TEMPLATES = [\r\n        {\r\n            &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,\r\n            &#39;DIRS&#39;: [],\r\n            &#39;APP_DIRS&#39;: True,\r\n            &#39;OPTIONS&#39;: {\r\n                &#39;context_processors&#39;: [\r\n                    &#39;django.template.context_processors.debug&#39;,\r\n                    &#39;django.template.context_processors.request&#39;,\r\n                    &#39;django.contrib.auth.context_processors.auth&#39;,\r\n                    &#39;django.contrib.messages.context_processors.messages&#39;,\r\n                    # Additional\r\n                    &#39;myapp.context_processors.extra_context&#39;,\r\n                ],\r\n            },\r\n        },\r\n    ]\r\n\r\n    # myapp/context_processors.py\r\n    from django.conf import settings\r\n\r\n    def extra_context(request):\r\n        return {&#39;base_url&#39;: settings.BASE_URL}\r\n\r\n    # my_template.html\r\n    &lt;p&gt;Base url is {{ base_url }}.&lt;/p&gt;\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1417873608, "answer_id": 27332350, "path": "stack.django.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1418668974, "last_edit_date": 1418668974, "body_markdown": "To create a complete link to another page from a template, you can use this:\r\n\r\n    {{ request.META.HTTP_HOST }}{% url &#39;views.my_view&#39; my_arg %}\r\n\r\nrequest.META.HTTP_HOST gives the host name, and url gives the relative name.  The template engine then concatenates them into a complete url."}, {"tags": [], "down_vote_count": 0, "creation_date": 1421442667, "answer_id": 27992799, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1421500839, "last_edit_date": 1421500839, "body_markdown": "Yet another way. You could use `build_absolute_uri()` in your `view.py` and pass it to the template.\r\n\r\n**view.py**\r\n\r\n    def index(request):\r\n        baseurl = request.build_absolute_uri()\r\n        return render_to_response(&#39;your-template.html&#39;, { &#39;baseurl&#39;: baseurl })\r\n\r\n**your-template.html**\r\n\r\n    {{ baseurl }}"}, {"tags": [], "down_vote_count": 0, "creation_date": 1433615073, "answer_id": 30686192, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1433615073, "body_markdown": "I know this is an old question. But I think people still run into this a lot.\r\n\r\nThere are a couple of libraries out there that supplement the default Django functionality. I have tried a few. I like the following library when reverse referencing absolute urls:\r\n\r\nhttps://github.com/fusionbox/django-absoluteuri\r\n\r\nAnother one I like because you can easily put together a domain, protocol and path is:\r\n\r\nhttps://github.com/RRMoelker/django-full-url\r\n\r\nThis library allows you to simply write what you want in your template, e.g.:\r\n\r\n    {{url_parts.domain}}"}, {"tags": [], "down_vote_count": 2, "creation_date": 1436301164, "answer_id": 31278699, "path": "stack.django.answer", "score": -2, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1455631379, "last_edit_date": 1455631379, "body_markdown": "`request.get_host()` will give you the domain.\r\n"}, {"tags": [], "down_vote_count": 4, "creation_date": 1460955776, "answer_id": 36685784, "path": "stack.django.answer", "score": -4, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1460955776, "body_markdown": "You can also use:\r\n\r\n    import socket\r\n    socket.gethostname()\r\n\r\nThis is working fine for me, \r\n\r\nI&#39;m not entirely sure how it works. I believe this is a bit more low level and will return your server hostname, which might be different than the hostname used by your user to get to your page. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1461047081, "answer_id": 36710158, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1461047081, "body_markdown": "I got it:\r\n\r\n    wsgiref.util.request_uri(request.META)\r\n\r\nGet the full uri with schema, host, port path and query."}, {"tags": [], "down_vote_count": 0, "creation_date": 1462653331, "answer_id": 37093428, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1463941841, "last_edit_date": 1463941841, "body_markdown": "If you&#39;re using django REST framework, you can use the reverse function from ```rest_framework.reverse```. This has the same behavior as ```django.core.urlresolvers.reverse```, except that it uses a request parameter to build a full URL.\r\n\r\n    from rest_framework.reverse import reverse\r\n\r\n    # returns the full url\r\n    url = reverse(&#39;view_name&#39;, args=(obj.pk,), request=request)\r\n   \r\n    # returns only the relative url\r\n    url = reverse(&#39;view_name&#39;, args=(obj.pk,))\r\n\r\n\r\n_Edited to mention availability only in REST framework_"}, {"tags": [], "down_vote_count": 0, "creation_date": 1465538026, "answer_id": 37740812, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1465538026, "body_markdown": "In your view, just do this:\r\n\r\n    base_url =  &quot;{0}://{1}{2}&quot;.format(request.scheme, request.get_host(), request.path)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1471586394, "answer_id": 39032037, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1471587528, "last_edit_date": 1471587528, "body_markdown": "Try the following code:\r\n\r\n    {{ request.scheme }}://{{ request.META.HTTP_HOST }}"}, {"tags": [], "down_vote_count": 0, "creation_date": 1488455944, "answer_id": 42554924, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1488455944, "body_markdown": "# `django-fullurl`\r\nIf you&#39;re trying to do this in a Django template, I&#39;ve released a tiny PyPI package [`django-fullurl`][1] to let you replace `url` and `static` template tags with `fullurl` and `fullstatic`, like this:\r\n\r\n    {% load fullurl %}\r\n\r\n    Absolute URL is: {% fullurl &quot;foo:bar&quot; %}\r\n\r\n    Another absolute URL is: {% fullstatic &quot;kitten.jpg&quot; %}\r\n\r\nThese badges should hopefully stay up-to-date automatically:\r\n\r\n[![PyPI](https://img.shields.io/pypi/v/django-fullurl.svg)](https://pypi.python.org/pypi/django-fullurl) ![](https://img.shields.io/pypi/l/django-fullurl.svg) ![](https://img.shields.io/pypi/wheel/django-fullurl.svg) [![Travis CI](https://travis-ci.org/Flimm/django-fullurl.svg?branch=master)](https://travis-ci.org/Flimm/django-fullurl) ![](https://img.shields.io/pypi/pyversions/django-fullurl.svg)\r\n\r\nIn a view, you can of course use [`request.build_absolute_uri`][2] instead.\r\n\r\n\r\n  [1]: https://github.com/Flimm/django-fullurl\r\n  [2]: https://docs.djangoproject.com/en/stable/ref/request-response/#django.http.HttpRequest.build_absolute_uri"}], "title": "How can I get the full/absolute URL (with domain) in Django?", "view_count": 178102, "answer_count": 17, "code_snippet": ["<code>reverse()</code>", "<code>request.get_full_path()</code>", "<code>{{ request.build_absolute_uri }}{{ object.get_absolute_url }}</code>", "<code>{% if request.is_secure %}https://{% else %}http://{% endif %}{{ request.get_host }}{{ object.get_absolute_url }}</code>", "<code>{{ request.build_absolute_uri }}</code>", "<code>{{ object.get_absolute_url }}</code>", "<code>reverse()</code>", "<code>request.build_absolute_uri(reverse('view_name', args=(obj.pk, )))</code>", "<code>get_current_site</code>", "<code>from django.contrib.sites.models import get_current_site</code>", "<code>SITE_ID</code>", "<code>None</code>", "<code>from django.contrib.sites.shortcuts import get_current_site\nrequest = None\nfull_url = ''.join(['http://', get_current_site(request).domain, obj.get_absolute_url()])\n</code>", "<code>request.build_absolute_url()</code>", "<code>django.contrib.sites</code>", "<code>INSTALLED_APPS</code>", "<code>build_absolute_uri</code>", "<code>request</code>", "<code>get_current_site(request)</code>", "<code>get_absolute_url</code>", "<code>&gt;&gt;&gt; from django.contrib.sites.models import Site\n&gt;&gt;&gt; domain = Site.objects.get_current().domain\n&gt;&gt;&gt; obj = MyModel.objects.get(id=3)\n&gt;&gt;&gt; path = obj.get_absolute_url()\n\n&gt;&gt;&gt; url = 'http://{domain}{path}'.format(domain=domain, path=path)\n&gt;&gt;&gt; print(url)\n'http://example.com/mymodel/objects/3/'\n</code>", "<code># settings.py (Django &lt; 1.9)\n...\nBASE_URL = 'http://example.com'\nTEMPLATE_CONTEXT_PROCESSORS = (\n    ...\n    'myapp.context_processors.extra_context',\n)\n# settings.py (Django &gt;= 1.9)\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                # Additional\n                'myapp.context_processors.extra_context',\n            ],\n        },\n    },\n]\n\n# myapp/context_processors.py\nfrom django.conf import settings\n\ndef extra_context(request):\n    return {'base_url': settings.BASE_URL}\n\n# my_template.html\n&lt;p&gt;Base url is {{ base_url }}.&lt;/p&gt;\n</code>", "<code>django-fullurl</code>", "<code>django-fullurl</code>", "<code>url</code>", "<code>static</code>", "<code>fullurl</code>", "<code>fullstatic</code>", "<code>{% load fullurl %}\n\nAbsolute URL is: {% fullurl \"foo:bar\" %}\n\nAnother absolute URL is: {% fullstatic \"kitten.jpg\" %}\n</code>", "<code>request.build_absolute_uri</code>", "<code>Request.META</code>", "<code>{{ request.META.HTTP_HOST }}{% url 'views.my_view' my_arg %}\n</code>", "<code>http</code>", "<code>://</code>", "<code>build_absolute_uri()</code>", "<code>view.py</code>", "<code>def index(request):\n    baseurl = request.build_absolute_uri()\n    return render_to_response('your-template.html', { 'baseurl': baseurl })\n</code>", "<code>{{ baseurl }}\n</code>", "<code>HttpRequest.build_absolute_uri(request)</code>", "<code>request.build_absolute_uri()</code>", "<code>{{url_parts.domain}}\n</code>", "<code>base_url =  \"{0}://{1}{2}\".format(request.scheme, request.get_host(), request.path)\n</code>", "<code>{{ request.scheme }}://{{ request.META.HTTP_HOST }}\n</code>", "<code>rest_framework.reverse</code>", "<code>django.core.urlresolvers.reverse</code>", "<code>from rest_framework.reverse import reverse\n\n# returns the full url\nurl = reverse('view_name', args=(obj.pk,), request=request)\n\n# returns only the relative url\nurl = reverse('view_name', args=(obj.pk,))\n</code>", "<code>request=request</code>", "<code>wsgiref.util.request_uri(request.META)\n</code>", "<code>request.get_host()</code>", "<code>import socket\nsocket.gethostname()\n</code>"], "path": "stack.django"}, {"tags": ["python", "sorting", "dictionary"], "creation_date": 1236214145, "body_markdown": "I have a dictionary of values read from two fields in a database: a string field and a numeric field. The string field is unique, so that is the key of the dictionary.\r\n\r\nI can sort on the keys, but how can I sort based on the values?\r\n\r\nNote: I have read Stack Overflow question *https://stackoverflow.com/questions/72899* and probably could change my code to have a list of dictionaries, but since I do not really need a list of dictionaries I wanted to know if there is a simpler solution.\r\n", "last_edit_date": 1511876586, "up_vote_count": 2665, "link": "https://stackoverflow.com/questions/613183/how-do-i-sort-a-dictionary-by-value", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1236214572, "answer_id": 613207, "path": "stack.django.answer", "score": 14, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1511876627, "last_edit_date": 1511876627, "body_markdown": "Technically, dictionaries aren&#39;t sequences, and therefore can&#39;t be sorted. You can do something like\r\n\r\n    sorted(a_dictionary.values())\r\n\r\nassuming performance isn&#39;t a huge deal.\r\n"}, {"tags": [], "down_vote_count": 11, "creation_date": 1236214774, "answer_id": 613218, "path": "stack.django.answer", "score": 3203, "up_vote_count": 3214, "is_accepted": true, "last_activity_date": 1513647171, "last_edit_date": 1513647171, "body_markdown": "It is not possible to sort a dict, only to get a representation of a dict that is sorted. Dicts are inherently orderless, but other types, such as lists and tuples, are not. So you need a ordered data type to represent sorted values, which will be a list\u2014probably a list of tuples.\r\n\r\nFor instance,\r\n\r\n    import operator\r\n    x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\r\n    sorted_x = sorted(x.items(), key=operator.itemgetter(1))\r\n\r\n`sorted_x` will be a list of tuples sorted by the second element in each tuple. `dict(sorted_x) == x`.\r\n\r\nAnd for those wishing to sort on keys instead of values:\r\n\r\n    import operator\r\n    x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\r\n    sorted_x = sorted(x.items(), key=operator.itemgetter(0))\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1236215122, "answer_id": 613228, "path": "stack.django.answer", "score": 147, "up_vote_count": 147, "is_accepted": false, "last_activity_date": 1410888370, "last_edit_date": 1410888370, "body_markdown": "Dicts can&#39;t be sorted, but you can build a sorted list from them.\r\n\r\nA sorted list of dict values:\r\n\r\n    sorted(d.values())\r\n\r\nA list of (key, value) pairs, sorted by value:\r\n\r\n    from operator import itemgetter\r\n    sorted(d.items(), key=itemgetter(1))"}, {"tags": [], "down_vote_count": 1, "creation_date": 1236215164, "answer_id": 613230, "path": "stack.django.answer", "score": 49, "up_vote_count": 50, "is_accepted": false, "last_activity_date": 1510238178, "last_edit_date": 1510238178, "body_markdown": "Pretty much the same as Hank Gay&#39;s answer;\r\n\r\n&lt;pre&gt;\r\n\r\n    sorted([(value,key) for (key,value) in mydict.items()])\r\n\r\n&lt;/pre&gt;\r\n\r\nOr optimized a bit as suggested by  John Fouhy;\r\n\r\n&lt;pre&gt;\r\n\r\n    sorted((value,key) for (key,value) in mydict.items())\r\n\r\n&lt;/pre&gt;\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1236217938, "answer_id": 613326, "path": "stack.django.answer", "score": 16, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1236217938, "body_markdown": "You can create an &quot;inverted index&quot;, also\r\n\r\n    from collections import defaultdict\r\n    inverse= defaultdict( list )\r\n    for k, v in originalDict.items():\r\n        inverse[v].append( k )\r\n\r\nNow your inverse has the values; each value has a list of applicable keys.\r\n\r\n    for k in sorted(inverse):\r\n        print k, inverse[k]"}, {"tags": [], "down_vote_count": 2, "creation_date": 1266078831, "answer_id": 2258273, "path": "stack.django.answer", "score": 542, "up_vote_count": 544, "is_accepted": false, "last_activity_date": 1278317168, "last_edit_date": 1278317168, "body_markdown": "You could use:\r\n\r\n`sorted(d.items(), key=lambda x: x[1])`\r\n\r\nThis will sort the dictionary by the values of each entry within the dictionary from smallest to largest."}, {"tags": [], "down_vote_count": 3, "creation_date": 1278298241, "answer_id": 3177025, "path": "stack.django.answer", "score": 114, "up_vote_count": 117, "is_accepted": false, "last_activity_date": 1396544379, "last_edit_date": 1396544379, "body_markdown": "In recent Python 2.7, we have the new [OrderedDict][1] type, which remembers the order in which the items were added.\r\n\r\n    &gt;&gt;&gt; d = {&quot;third&quot;: 3, &quot;first&quot;: 1, &quot;fourth&quot;: 4, &quot;second&quot;: 2}\r\n    \r\n    &gt;&gt;&gt; for k, v in d.items():\r\n    ...     print &quot;%s: %s&quot; % (k, v)\r\n    ...\r\n    second: 2\r\n    fourth: 4\r\n    third: 3\r\n    first: 1\r\n    \r\n    &gt;&gt;&gt; d\r\n    {&#39;second&#39;: 2, &#39;fourth&#39;: 4, &#39;third&#39;: 3, &#39;first&#39;: 1}\r\n\r\nTo make a new ordered dictionary from the original, sorting by the values:\r\n    \r\n    &gt;&gt;&gt; from collections import OrderedDict\r\n    &gt;&gt;&gt; d_sorted_by_value = OrderedDict(sorted(d.items(), key=lambda x: x[1]))\r\n    \r\nThe OrderedDict behaves like a normal dict:\r\n\r\n    &gt;&gt;&gt; for k, v in d_sorted_by_value.items():\r\n    ...     print &quot;%s: %s&quot; % (k, v)\r\n    ...\r\n    first: 1\r\n    second: 2\r\n    third: 3\r\n    fourth: 4\r\n    \r\n    &gt;&gt;&gt; d_sorted_by_value\r\n    OrderedDict([(&#39;first&#39;: 1), (&#39;second&#39;: 2), (&#39;third&#39;: 3), (&#39;fourth&#39;: 4)])\r\n\r\n  [1]: http://docs.python.org/dev/whatsnew/2.7.html#pep-372-adding-an-ordered-dictionary-to-collections\r\n"}, {"tags": [], "down_vote_count": 5, "creation_date": 1278316876, "answer_id": 3177911, "path": "stack.django.answer", "score": 901, "up_vote_count": 906, "is_accepted": false, "last_activity_date": 1487829356, "last_edit_date": 1495542396, "body_markdown": "## As simple as: `sorted(dict1, key=dict1.get)` ##\r\n\r\nWell, it is actually possible to do a &quot;sort by dictionary values&quot;. Recently I had to do that in a Code Golf (Stack Overflow question *[Code golf: Word frequency chart][1]*). Abridged, the problem was of the kind: given a text, count how often each word is encountered and display a list of the top words, sorted by decreasing frequency. \r\n\r\nIf you construct a dictionary with the words as keys and the number of occurrences of each word as value, simplified here as:\r\n\r\n    from collections import defaultdict\r\n    d = defaultdict(int)\r\n    for w in text.split():\r\n      d[w] += 1\r\n\r\nthen you can get a list of the words, ordered by frequency of use with `sorted(d, key=d.get)` - the sort iterates over the dictionary keys, using the number of word occurrences as a sort key . \r\n\r\n    for w in sorted(d, key=d.get, reverse=True):\r\n      print w, d[w]\r\n\r\nI am writing this detailed explanation to illustrate what people often mean by &quot;I can easily sort a dictionary by key, but how do I sort by value&quot; - and I think the OP was trying to address such an issue. And the solution is to do sort of list of the keys, based on the values, as shown above.\r\n\r\n  [1]: https://stackoverflow.com/questions/3169051/code-golf-word-frequency-chart#3170549\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1288613801, "answer_id": 4068769, "path": "stack.django.answer", "score": 11, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1288613801, "body_markdown": "    from django.utils.datastructures import SortedDict\r\n\r\n    def sortedDictByKey(self,data):\r\n        &quot;&quot;&quot;Sorted dictionary order by key&quot;&quot;&quot;\r\n        sortedDict = SortedDict()\r\n        if data:\r\n            if isinstance(data, dict):\r\n                sortedKey = sorted(data.keys())\r\n                for k in sortedKey:\r\n                    sortedDict[k] = data[k]\r\n        return sortedDict"}, {"tags": [], "down_vote_count": 0, "creation_date": 1290089997, "answer_id": 4215710, "path": "stack.django.answer", "score": 28, "up_vote_count": 28, "is_accepted": false, "last_activity_date": 1511876664, "last_edit_date": 1511876664, "body_markdown": "I had the same problem, and I solved it like this:\r\n\r\n    WantedOutput = sorted(MyDict, key=lambda x : MyDict[x]) \r\n\r\n(People who answer &quot;It is not possible to sort a dict&quot; did not read the question! In fact, &quot;I can sort on the keys, but how can I sort based on the values?&quot; clearly means that he wants a list of the keys sorted according to the value of their values.)\r\n\r\nPlease notice that the order is not well defined (keys with the same value will be in an arbitrary order in the output list).\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1299549985, "answer_id": 5227519, "path": "stack.django.answer", "score": 19, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1456904546, "last_edit_date": 1456904546, "body_markdown": "This is the code:\r\n\r\n    import operator\r\n    origin_list = [\r\n    \t{&quot;name&quot;: &quot;foo&quot;, &quot;rank&quot;: 0, &quot;rofl&quot;: 20000},\r\n    \t{&quot;name&quot;: &quot;Silly&quot;, &quot;rank&quot;: 15, &quot;rofl&quot;: 1000},\r\n    \t{&quot;name&quot;: &quot;Baa&quot;, &quot;rank&quot;: 300, &quot;rofl&quot;: 20},\r\n    \t{&quot;name&quot;: &quot;Zoo&quot;, &quot;rank&quot;: 10, &quot;rofl&quot;: 200},\r\n    \t{&quot;name&quot;: &quot;Penguin&quot;, &quot;rank&quot;: -1, &quot;rofl&quot;: 10000}\r\n    ]\r\n    print &quot;&gt;&gt; Original &gt;&gt;&quot;\r\n    for foo in origin_list:\r\n    \tprint foo\r\n    \t\r\n    print &quot;\\n&gt;&gt; Rofl sort &gt;&gt;&quot;\r\n    for foo in sorted(origin_list, key=operator.itemgetter(&quot;rofl&quot;)):\r\n    \tprint foo\r\n    \r\n    print &quot;\\n&gt;&gt; Rank sort &gt;&gt;&quot;\r\n    for foo in sorted(origin_list, key=operator.itemgetter(&quot;rank&quot;)):\r\n    \tprint foo\r\n\r\nHere are the results:\r\n\r\n**Original**\r\n\r\n    {&#39;name&#39;: &#39;foo&#39;, &#39;rank&#39;: 0, &#39;rofl&#39;: 20000}\r\n    {&#39;name&#39;: &#39;Silly&#39;, &#39;rank&#39;: 15, &#39;rofl&#39;: 1000}\r\n    {&#39;name&#39;: &#39;Baa&#39;, &#39;rank&#39;: 300, &#39;rofl&#39;: 20}\r\n    {&#39;name&#39;: &#39;Zoo&#39;, &#39;rank&#39;: 10, &#39;rofl&#39;: 200}\r\n    {&#39;name&#39;: &#39;Penguin&#39;, &#39;rank&#39;: -1, &#39;rofl&#39;: 10000}\r\n\r\n**Rofl**\r\n\r\n    {&#39;name&#39;: &#39;Baa&#39;, &#39;rank&#39;: 300, &#39;rofl&#39;: 20}\r\n    {&#39;name&#39;: &#39;Zoo&#39;, &#39;rank&#39;: 10, &#39;rofl&#39;: 200}\r\n    {&#39;name&#39;: &#39;Silly&#39;, &#39;rank&#39;: 15, &#39;rofl&#39;: 1000}\r\n    {&#39;name&#39;: &#39;Penguin&#39;, &#39;rank&#39;: -1, &#39;rofl&#39;: 10000}\r\n    {&#39;name&#39;: &#39;foo&#39;, &#39;rank&#39;: 0, &#39;rofl&#39;: 20000}\r\n\r\n**Rank** \r\n\r\n    {&#39;name&#39;: &#39;Penguin&#39;, &#39;rank&#39;: -1, &#39;rofl&#39;: 10000}\r\n    {&#39;name&#39;: &#39;foo&#39;, &#39;rank&#39;: 0, &#39;rofl&#39;: 20000}\r\n    {&#39;name&#39;: &#39;Zoo&#39;, &#39;rank&#39;: 10, &#39;rofl&#39;: 200}\r\n    {&#39;name&#39;: &#39;Silly&#39;, &#39;rank&#39;: 15, &#39;rofl&#39;: 1000}\r\n    {&#39;name&#39;: &#39;Baa&#39;, &#39;rank&#39;: 300, &#39;rofl&#39;: 20}"}, {"tags": [], "down_vote_count": 0, "creation_date": 1314664215, "answer_id": 7237524, "path": "stack.django.answer", "score": 57, "up_vote_count": 57, "is_accepted": false, "last_activity_date": 1492999919, "last_edit_date": 1492999919, "body_markdown": "\r\nIt can often be very handy to use &lt;b&gt;[namedtuple](http://docs.python.org/library/collections.html#collections.namedtuple)&lt;/b&gt;. For example, you have a dictionary of &#39;name&#39; as keys and &#39;score&#39; as values and you want to sort on &#39;score&#39;:\r\n\r\n    import collections\r\n    Player = collections.namedtuple(&#39;Player&#39;, &#39;score name&#39;)\r\n    d = {&#39;John&#39;:5, &#39;Alex&#39;:10, &#39;Richard&#39;: 7}\r\n\r\nsorting with lowest score first:\r\n\r\n    worst = sorted(Player(v,k) for (k,v) in d.items())\r\n\r\nsorting with highest score first:\r\n\r\n    best = sorted([Player(v,k) for (k,v) in d.items()], reverse=True)\r\n\r\n\r\nNow you can get the name and score of, let&#39;s say the second-best player (index=1) very Pythonically like this:\r\n    \r\n    player = best[1]\r\n    player.name\r\n        &#39;Richard&#39;\r\n    player.score\r\n        7\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1319005541, "answer_id": 7817348, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1319005541, "body_markdown": "Use **ValueSortedDict** from [dicts](http://pypi.python.org/pypi/dicts):\r\n\r\n\r\n    from dicts.sorteddict import ValueSortedDict\r\n    d = {1: 2, 3: 4, 4:3, 2:1, 0:0}\r\n    sorted_dict = ValueSortedDict(d)\r\n    print sorted_dict.items() \r\n\r\n    [(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]"}, {"tags": [], "down_vote_count": 0, "creation_date": 1320003726, "answer_id": 7947321, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1320003726, "body_markdown": "Iterate through a dict and sort it by its values in descending order:\r\n\r\n    $ python --version\r\n    Python 3.2.2\r\n\r\n    $ cat sort_dict_by_val_desc.py \r\n    dictionary = dict(siis = 1, sana = 2, joka = 3, tuli = 4, aina = 5)\r\n    for word in sorted(dictionary, key=dictionary.get, reverse=True):\r\n      print(word, dictionary[word])\r\n\r\n    $ python sort_dict_by_val_desc.py \r\n    aina 5\r\n    tuli 4\r\n    joka 3\r\n    sana 2\r\n    siis 1\r\n\r\n\r\n    \r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1321428721, "answer_id": 8148132, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1352230051, "last_edit_date": 1352230051, "body_markdown": "This works in 3.1.x:\r\n\r\n    import operator\r\n    slovar_sorted=sorted(slovar.items(), key=operator.itemgetter(1), reverse=True)\r\n    print(slovar_sorted)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1327433316, "answer_id": 8992838, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1327434643, "last_edit_date": 1327434643, "body_markdown": "If your values are integers, and you use Python 2.7 or newer, you can use [`collections.Counter`](http://docs.python.org/py3k/library/collections.html#collections.Counter) instead of `dict`. The `most_common` method will give you all items, sorted by the value.\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1340811825, "answer_id": 11230132, "path": "stack.django.answer", "score": 19, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1340812172, "last_edit_date": 1340812172, "body_markdown": "If values are numeric you may also use Counter from collections\r\n\r\n    from collections import Counter\r\n    \r\n    x={&#39;hello&#39;:1,&#39;python&#39;:5, &#39;world&#39;:3}\r\n    c=Counter(x)\r\n    print c.most_common()\r\n\r\n\r\n    &gt;&gt; [(&#39;python&#39;, 5), (&#39;world&#39;, 3), (&#39;hello&#39;, 1)]    "}, {"tags": [], "down_vote_count": 0, "creation_date": 1351940841, "answer_id": 13208582, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1396544631, "last_edit_date": 1396544631, "body_markdown": "Using Python 3.2:\r\n   \r\n    x = {&quot;b&quot;:4, &quot;a&quot;:3, &quot;c&quot;:1}\r\n    for i in sorted(x.values()):\r\n        print(list(x.keys())[list(x.values()).index(i)])\r\n"}, {"tags": [], "down_vote_count": 4, "creation_date": 1362832222, "answer_id": 15310681, "path": "stack.django.answer", "score": 16, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1396544698, "last_edit_date": 1396544698, "body_markdown": "You can use the [collections.Counter][1]. Note, this will work for both numeric and non-numeric values.\r\n\r\n    &gt;&gt;&gt; x = {1: 2, 3: 4, 4:3, 2:1, 0:0}\r\n    &gt;&gt;&gt; from collections import Counter\r\n    &gt;&gt;&gt; #To sort in reverse order\r\n    &gt;&gt;&gt; Counter(x).most_common()\r\n    [(3, 4), (4, 3), (1, 2), (2, 1), (0, 0)]\r\n    &gt;&gt;&gt; #To sort in ascending order\r\n    &gt;&gt;&gt; Counter(x).most_common()[::-1]\r\n    [(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]\r\n    &gt;&gt;&gt; #To get a dictionary sorted by values\r\n    &gt;&gt;&gt; from collections import OrderedDict\r\n    &gt;&gt;&gt; OrderedDict(Counter(x).most_common()[::-1])\r\n    OrderedDict([(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)])\r\n\r\n  [1]: http://docs.python.org/2/library/collections.html#collections.Counter\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1364048393, "answer_id": 15587800, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1364048393, "body_markdown": "For the sake of completeness, I am posting a solution using [heapq](http://docs.python.org/2/library/heapq.html). Note, this method will work for both numeric and non-numeric values\r\n\r\n\r\n    &gt;&gt;&gt; x = {1: 2, 3: 4, 4:3, 2:1, 0:0}\r\n    &gt;&gt;&gt; x_items = x.items()\r\n    &gt;&gt;&gt; heapq.heapify(x_items)\r\n    &gt;&gt;&gt; #To sort in reverse order\r\n    &gt;&gt;&gt; heapq.nlargest(len(x_items),x_items, operator.itemgetter(1))\r\n    [(3, 4), (4, 3), (1, 2), (2, 1), (0, 0)]\r\n    &gt;&gt;&gt; #To sort in ascending order\r\n    &gt;&gt;&gt; heapq.nsmallest(len(x_items),x_items, operator.itemgetter(1))\r\n    [(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]"}, {"tags": [], "down_vote_count": 1, "creation_date": 1368001075, "answer_id": 16435785, "path": "stack.django.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1396544879, "last_edit_date": 1396544879, "body_markdown": "I came up with this one, \r\n\r\n    import operator    \r\n    x = {1: 2, 3: 4, 4:3, 2:1, 0:0}\r\n    sorted_x = {k[0]:k[1] for k in sorted(x.items(), key=operator.itemgetter(1))}\r\n\r\nFor Python 3.x: `x.items()` replacing `iteritems()`.\r\n\r\n    &gt;&gt;&gt; sorted_x\r\n    {0: 0, 1: 2, 2: 1, 3: 4, 4: 3}\r\n\r\nOr try with `collections.OrderedDict`!\r\n\r\n    x = {1: 2, 3: 4, 4:3, 2:1, 0:0}\r\n    from collections import OrderedDict\r\n    \r\n    od1 = OrderedDict(sorted(x.items(), key=lambda t: t[1]))\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1377160728, "answer_id": 18375444, "path": "stack.django.answer", "score": 29, "up_vote_count": 29, "is_accepted": false, "last_activity_date": 1377160728, "body_markdown": "In Python 2.7, simply do:\r\n\r\n&lt;!-- language: lang-py --&gt;\r\n\r\n    from collections import OrderedDict\r\n    # regular unsorted dictionary\r\n    d = {&#39;banana&#39;: 3, &#39;apple&#39;:4, &#39;pear&#39;: 1, &#39;orange&#39;: 2}\r\n\r\n    # dictionary sorted by key\r\n    OrderedDict(sorted(d.items(), key=lambda t: t[0]))\r\n    OrderedDict([(&#39;apple&#39;, 4), (&#39;banana&#39;, 3), (&#39;orange&#39;, 2), (&#39;pear&#39;, 1)])\r\n   \r\n    # dictionary sorted by value\r\n    OrderedDict(sorted(d.items(), key=lambda t: t[1]))\r\n    OrderedDict([(&#39;pear&#39;, 1), (&#39;orange&#39;, 2), (&#39;banana&#39;, 3), (&#39;apple&#39;, 4)])\r\n\r\ncopy-paste from : http://docs.python.org/dev/library/collections.html#ordereddict-examples-and-recipes\r\n\r\nEnjoy ;-)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1392235846, "answer_id": 21738569, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1447109779, "last_edit_date": 1447109779, "body_markdown": "This returns the list of key-value pairs in the dictionary, sorted by value from highest to lowest:\r\n\r\n    sorted(d.items(), key=lambda x: x[1], reverse=True)\r\n\r\nFor the dictionary sorted by key, use the following:\r\n\r\n    sorted(d.items(), reverse=True)\r\n\r\nThe return is a list of tuples because dictionaries themselves can&#39;t be sorted.\r\n\r\nThis can be both printed or sent into further computation."}, {"tags": [], "down_vote_count": 0, "creation_date": 1392333500, "answer_id": 21767696, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1392335995, "last_edit_date": 1392335995, "body_markdown": "    months = {&quot;January&quot;: 31, &quot;February&quot;: 28, &quot;March&quot;: 31, &quot;April&quot;: 30, &quot;May&quot;: 31,\r\n              &quot;June&quot;: 30, &quot;July&quot;: 31, &quot;August&quot;: 31, &quot;September&quot;: 30, &quot;October&quot;: 31,\r\n              &quot;November&quot;: 30, &quot;December&quot;: 31}\r\n\r\n    def mykey(t):\r\n        &quot;&quot;&quot; Customize your sorting logic using this function.  The parameter to\r\n        this function is a tuple.  Comment/uncomment the return statements to test\r\n        different logics.\r\n        &quot;&quot;&quot;\r\n        return t[1]              # sort by number of days in the month\r\n        #return t[1], t[0]       # sort by number of days, then by month name\r\n        #return len(t[0])        # sort by length of month name\r\n        #return t[0][-1]         # sort by last character of month name\r\n\r\n\r\n    # Since a dictionary can&#39;t be sorted by value, what you can do is to convert\r\n    # it into a list of tuples with tuple length 2.\r\n    # You can then do custom sorts by passing your own function to sorted().\r\n    months_as_list = sorted(months.items(), key=mykey, reverse=False)\r\n\r\n    for month in months_as_list:\r\n        print month\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1392396274, "answer_id": 21784867, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1392396274, "body_markdown": "    &gt;&gt;&gt; import collections\r\n    &gt;&gt;&gt; x = {1: 2, 3: 4, 4:3, 2:1, 0:0}\r\n    &gt;&gt;&gt; sorted_x = collections.OrderedDict(sorted(x.items(), key=lambda t:t[1]))\r\n    &gt;&gt;&gt; OrderedDict([(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)])\r\n\r\n`OrderedDict` is subclass of `dict`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1393858710, "answer_id": 22150003, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1396545013, "last_edit_date": 1396545013, "body_markdown": "Because of requirements to retain backward compatability with older versions of [Python][1] I think the OrderedDict solution is very unwise. You want something that works with Python 2.7 and older versions.\r\n\r\nBut the collections solution mentioned in another answer is absolutely superb, because you retrain a connection between the key and value which in the case of dictionaries is extremely important.\r\n\r\nI don&#39;t agree with the number one choice presented in another answer, because it throws away the keys.\r\n\r\nI used the solution mentioned above (code shown below) and retained access to both keys and values and in my case the ordering was on the values, but the importance was the ordering of the keys after ordering the values.\r\n\r\n    from collections import Counter\r\n\r\n    x = {&#39;hello&#39;:1, &#39;python&#39;:5, &#39;world&#39;:3}\r\n    c=Counter(x)\r\n    print c.most_common()\r\n\r\n\r\n    &gt;&gt; [(&#39;python&#39;, 5), (&#39;world&#39;, 3), (&#39;hello&#39;, 1)]\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Python_%28programming_language%29\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1396846004, "answer_id": 22903797, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1396846004, "body_markdown": "Why not try this approach. Let us define a dictionary called mydict with the following data:\r\n\r\n    mydict = {&#39;carl&#39;:40,\r\n              &#39;alan&#39;:2,\r\n              &#39;bob&#39;:1,\r\n              &#39;danny&#39;:3}\r\n\r\nIf one wanted to sort the dictionary by keys, one could do something like:\r\n\r\n    for key in sorted(mydict.iterkeys()):\r\n        print &quot;%s: %s&quot; % (key, mydict[key])\r\n\r\nThis should return the following output:\r\n\r\n    alan: 2\r\n    bob: 1\r\n    carl: 40\r\n    danny: 3\r\n\r\nOn the other hand, if one wanted to sort a dictionary by value (as is asked in the question), one could do the following:\r\n\r\n    for key, value in sorted(mydict.iteritems(), key=lambda (k,v): (v,k)):\r\n        print &quot;%s: %s&quot; % (key, value)\r\n\r\nThe result of this command (sorting the dictionary by value) should return the following:\r\n\r\n    bob: 1\r\n    alan: 2\r\n    danny: 3\r\n    carl: 40\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1411685815, "answer_id": 26049456, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1411685815, "body_markdown": "You can use a [skip dict](https://pypi.python.org/pypi/skipdict/1.0) which is a dictionary that&#39;s permanently sorted by value.\r\n\r\n    &gt;&gt;&gt; data = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\r\n    &gt;&gt;&gt; SkipDict(data)\r\n    {0: 0.0, 2: 1.0, 1: 2.0, 4: 3.0, 3: 4.0}\r\n\r\nIf you use ``keys()``, ``values()`` or ``items()`` then you&#39;ll iterate in sorted order by value.\r\n\r\nIt&#39;s implemented using the [skip list](http://en.wikipedia.org/wiki/Skip_list) datastructure."}, {"tags": [], "down_vote_count": 0, "creation_date": 1416582249, "answer_id": 27064308, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1432151667, "last_edit_date": 1432151667, "body_markdown": "You can use the sorted function of Python\r\n\r\n`sorted(iterable[, cmp[, key[, reverse]]])`\r\n\r\nThus you can use:\r\n\r\n`sorted(dictionary.items(),key = lambda x :x[1])`\r\n\r\nVisit this link for more information on sorted function: https://docs.python.org/2/library/functions.html#sorted"}, {"tags": [], "down_vote_count": 0, "creation_date": 1434764698, "answer_id": 30949456, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1434764698, "body_markdown": "Here is a solution using zip on [`d.values()` and `d.keys()`][1].  A few lines down this link (on Dictionary view objects) is:\r\n\r\n&gt;This allows the creation of (value, key) pairs using zip(): pairs = zip(d.values(), d.keys()).\r\n\r\nSo we can do the following:\r\n\r\n    d = {&#39;key1&#39;: 874.7, &#39;key2&#39;: 5, &#39;key3&#39;: 8.1}\r\n\r\n    d_sorted = sorted(zip(d.values(), d.keys()))\r\n\r\n    print d_sorted \r\n    # prints: [(5, &#39;key2&#39;), (8.1, &#39;key3&#39;), (874.7, &#39;key1&#39;)]\r\n\r\n\r\n  [1]: https://docs.python.org/2/library/stdtypes.html#dictionary-view-objects"}, {"tags": [], "down_vote_count": 3, "creation_date": 1438132093, "answer_id": 31689638, "path": "stack.django.answer", "score": -2, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1439493498, "last_edit_date": 1439493498, "body_markdown": "I&#39;ve found that the following function performs well compared to other solutions posted, even on large dictionaries.\r\n\r\n    vsort = lambda d: sorted(d.iteritems(), key=lambda (k, v): v)\r\n    \r\nExample:\r\n\r\n    data = {}\r\n    for i in range(10):\r\n        data[i] = i if i % 2  else -i\r\n    \r\n    print &#39;Original&#39;\r\n    for k, v in data.items():\r\n        print &quot;k: %s v: %s&quot; % (k, v)\r\n    print &#39;&#39;\r\n    \r\n    print &#39;Value-sorted&#39;\r\n    for k, v in vsort(data):\r\n        print &quot;k: %s v: %s&quot; % (k, v)\r\n    print &#39;&#39;\r\n\r\nOutput:\r\n\r\n    Original\r\n    k: 0 v: 0\r\n    k: 1 v: 1\r\n    k: 2 v: -2\r\n    k: 3 v: 3\r\n    k: 4 v: -4\r\n    k: 5 v: 5\r\n    k: 6 v: -6\r\n    k: 7 v: 7\r\n    k: 8 v: -8\r\n    k: 9 v: 9\r\n    \r\n    Value-sorted\r\n    k: 8 v: -8\r\n    k: 6 v: -6\r\n    k: 4 v: -4\r\n    k: 2 v: -2\r\n    k: 0 v: 0\r\n    k: 1 v: 1\r\n    k: 3 v: 3\r\n    k: 5 v: 5\r\n    k: 7 v: 7\r\n    k: 9 v: 9\r\n\r\nSample timing code:\r\n\r\n    import numpy as np\r\n    from time import time\r\n    import operator\r\n    np.random.seed(0)\r\n\r\n    N = int(1e6)\r\n    x = {i: np.random.random() for i in xrange(N)}\r\n\r\n    t0 = -time()\r\n    sorted_0 = sorted(x.items(), key=operator.itemgetter(1))\r\n    t0 += time()\r\n\r\n    t1 = -time()\r\n    sorted_1 = vsort(x)\r\n    t1 += time()\r\n\r\n    print &#39;operator-sort: %f vsort: %f&#39; % (t0, t1)\r\n    print sorted_0[:3]\r\n    print sorted_1[:3]\r\n\r\nOutput:\r\n\r\n    operator-sort: 2.041510 vsort: 1.692324\r\n    [(661553, 7.071203171893359e-07), (529124, 1.333679640169727e-06), (263972, 2.9504162779581122e-06)]\r\n    [(661553, 7.071203171893359e-07), (529124, 1.333679640169727e-06), (263972, 2.9504162779581122e-06)]\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1438330129, "answer_id": 31741215, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1438331705, "last_edit_date": 1438331705, "body_markdown": "Of course, remember, you need to use `OrderedDict` because regular Python dictionaries don&#39;t keep the original order. \r\n\r\n    from collections import OrderedDict\r\n    a = OrderedDict(sorted(originalDict.items(), key = lambda x: x[1]))\r\n\r\n________________________________________________________________________________\r\nIf you do not have Python 2.7 or higher, the best you can do is iterate over the values in a generator function. (There is an OrderedDict for 2.4 and 2.6  [here](https://pypi.python.org/pypi/ordereddict), but \r\n\r\n    a) I don&#39;t know about how well it works \r\n\r\nand \r\n\r\n    b) You have to download and install it of course. If you do not have administrative access, then I&#39;m afraid the option&#39;s out.)\r\n\r\n________________________________________________________________________________\r\n\r\n    def gen(originalDict):\r\n        for x,y in sorted(zip(originalDict.keys(), originalDict.values()), key = lambda z: z[1]):\r\n            yield (x, y)\r\n        #Yields as a tuple with (key, value). You can iterate with conditional clauses to get what you want. \r\n\r\n    for bleh, meh in gen(myDict):\r\n        if bleh == &quot;foo&quot;:\r\n            print(myDict[bleh])\r\n________________________________________________________________________________\r\nYou can also print out every value\r\n    \r\n    for bleh, meh in gen(myDict):\r\n        print(bleh,meh)\r\n\r\nPlease remember to remove the parentheses after print if not using Python 3.0 or above"}, {"tags": [], "down_vote_count": 0, "creation_date": 1449308766, "answer_id": 34103440, "path": "stack.django.answer", "score": 63, "up_vote_count": 63, "is_accepted": false, "last_activity_date": 1450158893, "last_edit_date": 1450158893, "body_markdown": "**UPDATE: 5 DECEMBER 2015 using Python 3.5**\r\n\r\nWhilst I found the accepted answer useful, I was also surprised that it hasn&#39;t been updated to reference **[OrderedDict][1]** from the standard library **collections** module as a viable, modern alternative - designed to solve exactly this type of problem.\r\n\r\n    from operator import itemgetter\r\n    from collections import OrderedDict\r\n\r\n    x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\r\n    sorted_x = OrderedDict(sorted(x.items(), key=itemgetter(1)))\r\n    # OrderedDict([(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)])\r\n\r\n\r\nThe official **[OrderedDict][1]** documentation offers a very similar example too, but using a lambda for the sort function:\r\n\r\n    # regular unsorted dictionary\r\n    d = {&#39;banana&#39;: 3, &#39;apple&#39;:4, &#39;pear&#39;: 1, &#39;orange&#39;: 2}\r\n    \r\n    # dictionary sorted by value\r\n    OrderedDict(sorted(d.items(), key=lambda t: t[1]))\r\n    # OrderedDict([(&#39;pear&#39;, 1), (&#39;orange&#39;, 2), (&#39;banana&#39;, 3), (&#39;apple&#39;, 4)])\r\n\r\n\r\n  [1]: https://docs.python.org/3/library/collections.html#collections.OrderedDict"}, {"tags": [], "down_vote_count": 1, "creation_date": 1453733683, "answer_id": 34995529, "path": "stack.django.answer", "score": 32, "up_vote_count": 33, "is_accepted": false, "last_activity_date": 1501415361, "last_edit_date": 1501415361, "body_markdown": "Given dictionary\r\n\r\n    e = {1:39, 4:34, 7:110, 2:87}\r\n\r\nSorting\r\n\r\n    sred = sorted(e.items(), key=lambda value: value[1])\r\n\r\nResult \r\n\r\n    [(4, 34), (1, 39), (2, 87), (7, 110)]\r\n\r\nYou can use a lambda function to sort things up by value and store them processed inside a variable, in this case **sred** with **e** the original dictionary.\r\n\r\nHope that helps!"}, {"tags": [], "down_vote_count": 3, "creation_date": 1473501936, "answer_id": 39424969, "path": "stack.django.answer", "score": 33, "up_vote_count": 36, "is_accepted": false, "last_activity_date": 1513439275, "last_edit_date": 1513439275, "body_markdown": "# As of [Python 3.6][whatsnew36] the built-in dict will be ordered\r\n\r\nGood news, so the OP&#39;s original use case of mapping pairs retrieved from a database with unique string ids as keys and numeric values as values into a built-in Python v3.6+ dict, should now respect the insert order.\r\n\r\nIf say the resulting two column table expressions from a database query like:\r\n\r\n    SELECT a_key, a_value FROM a_table ORDER BY a_value;\r\n\r\nwould be stored in two Python tuples, k_seq and v_seq (aligned by numerical index and with the same length of course), then:\r\n\r\n    k_seq = (&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;)\r\n    v_seq = (0, 1, 42)\r\n    ordered_map = dict(zip(k_seq, v_seq))\r\n\r\nAllow to output later as:\r\n\r\n    for k, v in ordered_map.items():\r\n        print(k, v)\r\n\r\nyielding in this case (for the new Python 3.6+ built-in dict!):\r\n\r\n    foo 0\r\n    bar 1\r\n    baz 42\r\n\r\nin the same ordering per value of v.\r\n\r\nWhere in the Python 3.5 install on my machine it currently yields:\r\n\r\n    bar 1\r\n    foo 0\r\n    baz 42\r\n\r\n## Details:\r\n\r\nAs proposed in 2012 by Raymond Hettinger (cf. mail on python-dev with subject [&quot;More compact dictionaries with faster iteration&quot;][initial]) and now (in 2016) announced in a mail by Victor Stinner to python-dev with subject [&quot;Python 3.6 dict becomes compact and gets a private version; and keywords become ordered&quot;][announce] due to the fix/implementation of issue 27350 [&quot;Compact and ordered dict&quot;][issue27350] in Python 3.6 we will now be able, to use a built-in dict to maintain insert order!!\r\n\r\nHopefully this will lead to a thin layer OrderedDict implementation as a first step. As @JimFasarakis-Hilliard indicated, some see use cases for the OrderedDict type also in the future. I think the Python community at large will carefully inspect, if this will stand the test of time, and what the next steps will be.\r\n\r\nTime to rethink our coding habits to not miss the possibilities opened by stable ordering of:\r\n\r\n* Keyword arguments and\r\n* (intermediate) dict storage\r\n\r\nThe first because it eases dispatch in the implementation of functions and methods in some cases.\r\n\r\nThe second as it encourages to more easily use `dict`s as intermediate storage in processing pipelines.\r\n\r\nRaymond Hettinger kindly provided documentation explaining &quot;[The Tech Behind Python 3.6 Dictionaries][sfmurh2016]&quot; - from his San Francisco Python Meetup Group presentation 2016-DEC-08.\r\n\r\nAnd maybe quite some Stack Overflow high decorated question and answer pages will receive variants of this information and many high quality answers will require a per version update too.\r\n\r\n### Caveat Emptor (but also see below update 2017-12-15):\r\n\r\nAs @ajcr rightfully notes: &quot;The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon.&quot; (from the [whatsnew36]) not nit picking, **but** the citation was cut a bit pessimistic ;-). It continues as &quot; (this may change in the future, but it is desired to have this new dict implementation in the language for a few releases before changing the language spec to mandate order-preserving semantics for all current and future Python implementations; this also helps preserve backwards-compatibility with older versions of the language where random iteration order is still in effect, e.g. Python 3.5).&quot;\r\n\r\nSo as in some human languages (e.g. German), usage shapes the language, and the will now has been declared ... in [whatsnew36].\r\n\r\n[whatsnew36]: https://docs.python.org/3.6/whatsnew/3.6.html\r\n[initial]: https://mail.python.org/pipermail/python-dev/2012-December/123028.html\r\n[announce]: https://mail.python.org/pipermail/python-dev/2016-September/146327.html\r\n[issue27350]: http://bugs.python.org/issue27350\r\n[sfmurh2016]: https://dl.dropboxusercontent.com/u/3967849/sfmu2/_build/html/goal.html &quot;The Tech Behind Python 3.6 Dictionaries&quot;\r\n\r\n### Update 2017-12-15: \r\nIn a [mail to the python-dev list](https://mail.python.org/pipermail/python-dev/2017-December/151283.html), Guido van Rossum declared:\r\n\r\n&gt; Make it so. &quot;Dict keeps insertion order&quot; is the ruling. Thanks! \r\n\r\nSo, the version 3.6 CPython side-effect of dict insertion ordering is now becoming part of the language spec (and not anymore only an implementation detail). That mail thread also surfaced some distinguishing design goals for `collections.OrderedDict` as reminded by Raymond Hettinger during discussion."}, {"tags": [], "down_vote_count": 2, "creation_date": 1495595944, "answer_id": 44148366, "path": "stack.django.answer", "score": 0, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1511877031, "last_edit_date": 1511877031, "body_markdown": "This method will not use lambda and works well on Python 3.6:\r\n\r\n     # sort dictionary by value\r\n    d = {&#39;a1&#39;: &#39;fsdfds&#39;, &#39;g5&#39;: &#39;aa3432ff&#39;, &#39;ca&#39;:&#39;zz23432&#39;}\r\n    def getkeybyvalue(d,i):\r\n        for k, v in d.items():\r\n            if v == i:\r\n                return (k)\r\n        \r\n    sortvaluelist = sorted(d.values())\r\n    sortresult ={}\r\n    for i1 in sortvaluelist:   \r\n        key = getkeybyvalue(d,i1)\r\n        sortresult[key] = i1\r\n    print (&#39;=====sort by value=====&#39;)\r\n    print (sortresult)\r\n    print (&#39;=======================&#39;)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1495735991, "answer_id": 44187197, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1495735991, "body_markdown": "You can also use custom function that can be passed to key.\r\n\r\n    def dict_val(x):\r\n        return x[1]\r\n    x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\r\n    sorted_x = sorted(x.items(), key=dict_val)\r\n\r\nOne more way to do is to use labmda function\r\n\r\n    x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\r\n    sorted_x = sorted(x.items(), key=lambda t: t[1])\r\n\r\n"}], "title": "How do I sort a dictionary by value?", "view_count": 1606273, "answer_count": 37, "code_snippet": ["<code>Series</code>", "<code>pandas.Series.order</code>", "<code>import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(1))\n</code>", "<code>sorted_x</code>", "<code>dict(sorted_x) == x</code>", "<code>import operator\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=operator.itemgetter(0))\n</code>", "<code>sorted_x.reverse()</code>", "<code>sorted()</code>", "<code>reverse=True</code>", "<code>sorted(d.items(), key=lambda x: x[1])</code>", "<code>sorted(dict1, key=dict1.get)</code>", "<code>from collections import defaultdict\nd = defaultdict(int)\nfor w in text.split():\n  d[w] += 1\n</code>", "<code>sorted(d, key=d.get)</code>", "<code>for w in sorted(d, key=d.get, reverse=True):\n  print w, d[w]\n</code>", "<code>key=operator.itemgetter(1)</code>", "<code>key=d.get</code>", "<code>from operator import itemgetter  d = {\"a\":7, \"b\":1, \"c\":5, \"d\":3}  sorted_keys = sorted(d, key=itemgetter, reverse=True)  for key in sorted_keys:      print \"%s: %d\" % (key, d[key])</code>", "<code>sorted_keys = sorted(d.items(), key=itemgetter(1), reverse=True)</code>", "<code>for key, val in sorted_keys: print \"%s: %d\" % (key, val)</code>", "<code>collections.Counter</code>", "<code>most_common</code>", "<code>sorted(d.items(), key=lambda x: x[1])</code>", "<code>(key, value)</code>", "<code>key=lambda (k, v): v</code>", "<code>(k, v)</code>", "<code>reverse=True</code>", "<code>sorted(a.items(), key=lambda x: x[1], reverse=True)</code>", "<code>sorted(d.values())\n</code>", "<code>from operator import itemgetter\nsorted(d.items(), key=itemgetter(1))\n</code>", "<code>sorted(d.values())</code>", "<code>sorted(d, key=d.get)</code>", "<code>&gt;&gt;&gt; d = {\"third\": 3, \"first\": 1, \"fourth\": 4, \"second\": 2}\n\n&gt;&gt;&gt; for k, v in d.items():\n...     print \"%s: %s\" % (k, v)\n...\nsecond: 2\nfourth: 4\nthird: 3\nfirst: 1\n\n&gt;&gt;&gt; d\n{'second': 2, 'fourth': 4, 'third': 3, 'first': 1}\n</code>", "<code>&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; d_sorted_by_value = OrderedDict(sorted(d.items(), key=lambda x: x[1]))\n</code>", "<code>&gt;&gt;&gt; for k, v in d_sorted_by_value.items():\n...     print \"%s: %s\" % (k, v)\n...\nfirst: 1\nsecond: 2\nthird: 3\nfourth: 4\n\n&gt;&gt;&gt; d_sorted_by_value\nOrderedDict([('first': 1), ('second': 2), ('third': 3), ('fourth': 4)])\n</code>", "<code>sorted(d.items(), key=lambda x: x[1])</code>", "<code>x</code>", "<code>x[1]</code>", "<code>x[0]</code>", "<code>d.items()</code>", "<code>x</code>", "<code>x[0]</code>", "<code>x[1]</code>", "<code>x[1]</code>", "<code>x: x[1]</code>", "<code>1</code>", "<code>0</code>", "<code>from operator import itemgetter\nfrom collections import OrderedDict\n\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = OrderedDict(sorted(x.items(), key=itemgetter(1)))\n# OrderedDict([(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)])\n</code>", "<code># regular unsorted dictionary\nd = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}\n\n# dictionary sorted by value\nOrderedDict(sorted(d.items(), key=lambda t: t[1]))\n# OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])\n</code>", "<code>import collections\nPlayer = collections.namedtuple('Player', 'score name')\nd = {'John':5, 'Alex':10, 'Richard': 7}\n</code>", "<code>worst = sorted(Player(v,k) for (k,v) in d.items())\n</code>", "<code>best = sorted([Player(v,k) for (k,v) in d.items()], reverse=True)\n</code>", "<code>player = best[1]\nplayer.name\n    'Richard'\nplayer.score\n    7\n</code>", "<code>[(key, value) for (value, key) in sorted_list_of_tuples]</code>", "<code>sorted</code>", "<code>([])</code>", "<code>SELECT a_key, a_value FROM a_table ORDER BY a_value;\n</code>", "<code>k_seq = ('foo', 'bar', 'baz')\nv_seq = (0, 1, 42)\nordered_map = dict(zip(k_seq, v_seq))\n</code>", "<code>for k, v in ordered_map.items():\n    print(k, v)\n</code>", "<code>foo 0\nbar 1\nbaz 42\n</code>", "<code>bar 1\nfoo 0\nbaz 42\n</code>", "<code>dict</code>", "<code>collections.OrderedDict</code>", "<code>dict</code>", "<code>OrderedDict</code>", "<code>OrderedDict</code>", "<code>ImportError</code>", "<code>OrderedDict</code>", "<code>e = {1:39, 4:34, 7:110, 2:87}\n</code>", "<code>sred = sorted(e.items(), key=lambda value: value[1])\n</code>", "<code>[(4, 34), (1, 39), (2, 87), (7, 110)]\n</code>", "<code>from collections import OrderedDict\n# regular unsorted dictionary\nd = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}\n\n# dictionary sorted by key\nOrderedDict(sorted(d.items(), key=lambda t: t[0]))\nOrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])\n\n# dictionary sorted by value\nOrderedDict(sorted(d.items(), key=lambda t: t[1]))\nOrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])\n</code>", "<code>WantedOutput = sorted(MyDict, key=lambda x : MyDict[x]) \n</code>", "<code>from collections import Counter\n\nx={'hello':1,'python':5, 'world':3}\nc=Counter(x)\nprint c.most_common()\n\n\n&gt;&gt; [('python', 5), ('world', 3), ('hello', 1)]    \n</code>", "<code>Counter({'hello':1, 'python':5, 'world':300}).most_common()</code>", "<code>[('world', 300), ('python', 5), ('hello', 1)]</code>", "<code>import operator\norigin_list = [\n    {\"name\": \"foo\", \"rank\": 0, \"rofl\": 20000},\n    {\"name\": \"Silly\", \"rank\": 15, \"rofl\": 1000},\n    {\"name\": \"Baa\", \"rank\": 300, \"rofl\": 20},\n    {\"name\": \"Zoo\", \"rank\": 10, \"rofl\": 200},\n    {\"name\": \"Penguin\", \"rank\": -1, \"rofl\": 10000}\n]\nprint \"&gt;&gt; Original &gt;&gt;\"\nfor foo in origin_list:\n    print foo\n\nprint \"\\n&gt;&gt; Rofl sort &gt;&gt;\"\nfor foo in sorted(origin_list, key=operator.itemgetter(\"rofl\")):\n    print foo\n\nprint \"\\n&gt;&gt; Rank sort &gt;&gt;\"\nfor foo in sorted(origin_list, key=operator.itemgetter(\"rank\")):\n    print foo\n</code>", "<code>{'name': 'foo', 'rank': 0, 'rofl': 20000}\n{'name': 'Silly', 'rank': 15, 'rofl': 1000}\n{'name': 'Baa', 'rank': 300, 'rofl': 20}\n{'name': 'Zoo', 'rank': 10, 'rofl': 200}\n{'name': 'Penguin', 'rank': -1, 'rofl': 10000}\n</code>", "<code>{'name': 'Baa', 'rank': 300, 'rofl': 20}\n{'name': 'Zoo', 'rank': 10, 'rofl': 200}\n{'name': 'Silly', 'rank': 15, 'rofl': 1000}\n{'name': 'Penguin', 'rank': -1, 'rofl': 10000}\n{'name': 'foo', 'rank': 0, 'rofl': 20000}\n</code>", "<code>{'name': 'Penguin', 'rank': -1, 'rofl': 10000}\n{'name': 'foo', 'rank': 0, 'rofl': 20000}\n{'name': 'Zoo', 'rank': 10, 'rofl': 200}\n{'name': 'Silly', 'rank': 15, 'rofl': 1000}\n{'name': 'Baa', 'rank': 300, 'rofl': 20}\n</code>", "<code>from collections import defaultdict\ninverse= defaultdict( list )\nfor k, v in originalDict.items():\n    inverse[v].append( k )\n</code>", "<code>for k in sorted(inverse):\n    print k, inverse[k]\n</code>", "<code>&gt;&gt;&gt; x = {1: 2, 3: 4, 4:3, 2:1, 0:0}\n&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; #To sort in reverse order\n&gt;&gt;&gt; Counter(x).most_common()\n[(3, 4), (4, 3), (1, 2), (2, 1), (0, 0)]\n&gt;&gt;&gt; #To sort in ascending order\n&gt;&gt;&gt; Counter(x).most_common()[::-1]\n[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]\n&gt;&gt;&gt; #To get a dictionary sorted by values\n&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; OrderedDict(Counter(x).most_common()[::-1])\nOrderedDict([(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)])\n</code>", "<code>sorted(a_dictionary.values())\n</code>", "<code>mydict = {'carl':40,\n          'alan':2,\n          'bob':1,\n          'danny':3}\n</code>", "<code>for key in sorted(mydict.iterkeys()):\n    print \"%s: %s\" % (key, mydict[key])\n</code>", "<code>alan: 2\nbob: 1\ncarl: 40\ndanny: 3\n</code>", "<code>for key, value in sorted(mydict.iteritems(), key=lambda (k,v): (v,k)):\n    print \"%s: %s\" % (key, value)\n</code>", "<code>bob: 1\nalan: 2\ndanny: 3\ncarl: 40\n</code>", "<code>for key, value in sorted(mydict.iteritems(), key=lambda (k,v): v[\"score\"]):</code>", "<code>from django.utils.datastructures import SortedDict\n\ndef sortedDictByKey(self,data):\n    \"\"\"Sorted dictionary order by key\"\"\"\n    sortedDict = SortedDict()\n    if data:\n        if isinstance(data, dict):\n            sortedKey = sorted(data.keys())\n            for k in sortedKey:\n                sortedDict[k] = data[k]\n    return sortedDict\n</code>", "<code>&gt;&gt;&gt; data = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n&gt;&gt;&gt; SkipDict(data)\n{0: 0.0, 2: 1.0, 1: 2.0, 4: 3.0, 3: 4.0}\n</code>", "<code>keys()</code>", "<code>values()</code>", "<code>items()</code>", "<code>sorted(d.items(), key=lambda x: x[1], reverse=True)\n</code>", "<code>sorted(d.items(), reverse=True)\n</code>", "<code>sorted(d.items(), reverse=True)</code>", "<code>from dicts.sorteddict import ValueSortedDict\nd = {1: 2, 3: 4, 4:3, 2:1, 0:0}\nsorted_dict = ValueSortedDict(d)\nprint sorted_dict.items() \n\n[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]\n</code>", "<code>def dict_val(x):\n    return x[1]\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=dict_val)\n</code>", "<code>x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\nsorted_x = sorted(x.items(), key=lambda t: t[1])\n</code>", "<code>$ python --version\nPython 3.2.2\n\n$ cat sort_dict_by_val_desc.py \ndictionary = dict(siis = 1, sana = 2, joka = 3, tuli = 4, aina = 5)\nfor word in sorted(dictionary, key=dictionary.get, reverse=True):\n  print(word, dictionary[word])\n\n$ python sort_dict_by_val_desc.py \naina 5\ntuli 4\njoka 3\nsana 2\nsiis 1\n</code>", "<code>collections.Counter</code>", "<code>dict</code>", "<code>most_common</code>", "<code>import operator\nslovar_sorted=sorted(slovar.items(), key=operator.itemgetter(1), reverse=True)\nprint(slovar_sorted)\n</code>", "<code>import operator    \nx = {1: 2, 3: 4, 4:3, 2:1, 0:0}\nsorted_x = {k[0]:k[1] for k in sorted(x.items(), key=operator.itemgetter(1))}\n</code>", "<code>x.items()</code>", "<code>iteritems()</code>", "<code>&gt;&gt;&gt; sorted_x\n{0: 0, 1: 2, 2: 1, 3: 4, 4: 3}\n</code>", "<code>collections.OrderedDict</code>", "<code>x = {1: 2, 3: 4, 4:3, 2:1, 0:0}\nfrom collections import OrderedDict\n\nod1 = OrderedDict(sorted(x.items(), key=lambda t: t[1]))\n</code>", "<code>{key: value for key, value in ...}</code>", "<code>d.values()</code>", "<code>d.keys()</code>", "<code>d = {'key1': 874.7, 'key2': 5, 'key3': 8.1}\n\nd_sorted = sorted(zip(d.values(), d.keys()))\n\nprint d_sorted \n# prints: [(5, 'key2'), (8.1, 'key3'), (874.7, 'key1')]\n</code>", "<code>sorted(iterable[, cmp[, key[, reverse]]])</code>", "<code>sorted(dictionary.items(),key = lambda x :x[1])</code>", "<code>&gt;&gt;&gt; x = {1: 2, 3: 4, 4:3, 2:1, 0:0}\n&gt;&gt;&gt; x_items = x.items()\n&gt;&gt;&gt; heapq.heapify(x_items)\n&gt;&gt;&gt; #To sort in reverse order\n&gt;&gt;&gt; heapq.nlargest(len(x_items),x_items, operator.itemgetter(1))\n[(3, 4), (4, 3), (1, 2), (2, 1), (0, 0)]\n&gt;&gt;&gt; #To sort in ascending order\n&gt;&gt;&gt; heapq.nsmallest(len(x_items),x_items, operator.itemgetter(1))\n[(0, 0), (2, 1), (1, 2), (4, 3), (3, 4)]\n</code>"], "path": "stack.django"}, {"tags": ["python", "django"], "creation_date": 1308921765, "body_markdown": "I have to use [Python][1] and [Django][2] for our application. So I have two versions of Python, 2.6 and 2.7. Now I have installed Django. I could run the sample application for testing Django succesfuly. But how do I make sure whether Django uses the 2.6 or 2.7 version and what version of modules Django uses?\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Python_%28programming_language%29\r\n  [2]: http://en.wikipedia.org/wiki/Django_%28web_framework%29\r\n", "last_edit_date": 1412142486, "up_vote_count": 346, "link": "https://stackoverflow.com/questions/6468397/how-to-check-django-version", "_childDocuments_": [{"tags": [], "down_vote_count": 5, "creation_date": 1308922256, "answer_id": 6468505, "path": "stack.django.answer", "score": 422, "up_vote_count": 427, "is_accepted": true, "last_activity_date": 1513275877, "last_edit_date": 1513275877, "body_markdown": "Django 1.5 supports Python 2.6.5 and later.\r\n\r\nIf you&#39;re under Linux and want to check the Python version you&#39;re using, run `python -V` from the command line.\r\n\r\nIf you want to check the Django version, open a Python console and type\r\n\r\n    &gt;&gt;&gt; import django\r\n    &gt;&gt;&gt; django.VERSION\r\n    (2, 0, 0, &#39;final&#39;, 0)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1308922562, "answer_id": 6468570, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1308922562, "body_markdown": "Django will use the version of Python specified by the PYTHONPATH environment variable. You can use `echo $PYTHONPATH` in a shell to determine which version will be used.\r\n\r\nThe module versions used by Django will be the module versions installed under the version of Python specified by PYTHONPATH."}, {"tags": [], "down_vote_count": 2, "creation_date": 1369798927, "answer_id": 16805125, "path": "stack.django.answer", "score": 293, "up_vote_count": 295, "is_accepted": false, "last_activity_date": 1513275843, "last_edit_date": 1513275843, "body_markdown": "Basically the same as bcoughlan&#39;s answer, but here it is as an executable command:\r\n    \r\n    $ python -c &quot;import django; print(django.get_version())&quot;\r\n    2.0"}, {"tags": [], "down_vote_count": 1, "creation_date": 1377708059, "answer_id": 18493645, "path": "stack.django.answer", "score": 28, "up_vote_count": 29, "is_accepted": false, "last_activity_date": 1429017909, "last_edit_date": 1429017909, "body_markdown": "If you have [pip][1], you can also do a &lt;pre&gt;pip freeze&lt;/pre&gt;\r\nand it will show your Django version.\r\n\r\nYou can pipe it through grep to get just the Django version. That is, \r\n\r\n    josh@villaroyale:~/code/djangosite$ pip freeze | grep Django\r\n    Django==1.4.3\r\n\r\n  [1]: http://pip.openplans.org/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1380797917, "answer_id": 19157430, "path": "stack.django.answer", "score": 135, "up_vote_count": 135, "is_accepted": false, "last_activity_date": 1513275904, "last_edit_date": 1513275904, "body_markdown": "If you have installed the application: \r\n\r\n    $ django-admin.py version\r\n    2.0\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1387877208, "answer_id": 20758241, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1412142655, "last_edit_date": 1412142655, "body_markdown": "For checking using a Python shell, do the following.\r\n\r\n    &gt;&gt;&gt;from django import get_version\r\n    &gt;&gt;&gt; get_version()\r\n\r\nIf you wish to do it in Unix/Linux shell with a single line, then do\r\n\r\n    python -c &#39;import django; print(django.get_version())&#39;\r\n\r\nOnce you have developed an application, then you can check version directly using the following.\r\n\r\n    python manage.py runserver --version\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1390431400, "answer_id": 21295822, "path": "stack.django.answer", "score": 42, "up_vote_count": 44, "is_accepted": false, "last_activity_date": 1455647914, "last_edit_date": 1455647914, "body_markdown": "    &gt;&gt;&gt; import django\r\n    &gt;&gt;&gt; print(django.get_version())\r\n    1.6.1\r\n\r\n\r\nI am using the [IDLE][1] (Python GUI).\r\n\r\n  [1]: http://en.wikipedia.org/wiki/IDLE_%28Python%29\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1391039827, "answer_id": 21445277, "path": "stack.django.answer", "score": 60, "up_vote_count": 60, "is_accepted": false, "last_activity_date": 1412142769, "last_edit_date": 1412142769, "body_markdown": "Go to your [Django][1] project home directory and do:\r\n\r\n    ./manage.py --version\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Django_%28web_framework%29\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1404672616, "answer_id": 24599173, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1421410676, "last_edit_date": 1421410676, "body_markdown": "You can do it without Python too. Just type this in your Django directory:\r\n\r\n    cat __init__.py | grep VERSION\r\n\r\nAnd you will get something like:\r\n\r\n    VERSION = (1, 5, 5, &#39;final&#39;, 0)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1411998252, "answer_id": 26101408, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1411998252, "body_markdown": " Go to console and type:\r\n\r\n    django-admin --version\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1413388057, "answer_id": 26386738, "path": "stack.django.answer", "score": 32, "up_vote_count": 32, "is_accepted": false, "last_activity_date": 1413388057, "last_edit_date": 1495535499, "body_markdown": "For [Python][1]:\r\n\r\n    import sys\r\n    sys.version\r\n\r\nFor Django (as mentioned by others here):\r\n\r\n    import django\r\n    django.get_version()\r\n\r\nThe potential problem with simply checking the version, is that versions get upgraded and so the code can go out of date. You want to make sure that &#39;1.7&#39; &lt; &#39;1.7.1&#39; &lt; &#39;1.7.5&#39; &lt; &#39;1.7.10&#39;. A normal string comparison would fail in the last comparison:\r\n\r\n    &gt;&gt;&gt; &#39;1.7.5&#39; &lt; &#39;1.7.10&#39;\r\n    False\r\n\r\nThe solution is to use [StrictVersion from distutils][2].\r\n\r\n    &gt;&gt;&gt; from distutils.version import StrictVersion\r\n    &gt;&gt;&gt; StrictVersion(&#39;1.7.5&#39;) &lt; StrictVersion(&#39;1.7.10&#39;)\r\n    True\r\n\r\n\r\n  [1]: https://stackoverflow.com/q/1093322/1551116\r\n  [2]: https://stackoverflow.com/a/6972866/1551116"}, {"tags": [], "down_vote_count": 0, "creation_date": 1424175981, "answer_id": 28561467, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1424175981, "body_markdown": "If you want to make Django version comparison, you could use ``django-nine`` (pip install django-nine). For example, if Django version installed in your environment is 1.7.4, then the following would be true.\r\n\r\n    from nine import versions\r\n\r\n    versions.DJANGO_1_7 # True\r\n    versions.DJANGO_LTE_1_7 # True\r\n    versions.DJANGO_GTE_1_7 # True\r\n    versions.DJANGO_GTE_1_8 # False\r\n    versions.DJANGO_GTE_1_4 # True\r\n    versions.DJANGO_LTE_1_6 # False\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1424798152, "answer_id": 28702103, "path": "stack.django.answer", "score": 33, "up_vote_count": 35, "is_accepted": false, "last_activity_date": 1431014886, "last_edit_date": 1431014886, "body_markdown": "Type the following at the command prompt:\r\n\r\n    django-admin.py version\r\n\r\nIf django is installed it will print its current version (eg. `1.6.5`),  \r\notherwise the shell will print an error message."}, {"tags": [], "down_vote_count": 0, "creation_date": 1445303473, "answer_id": 33226446, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1445304541, "last_edit_date": 1445304541, "body_markdown": "I thought the most pythonic way was:\r\n\r\n    &gt;&gt;&gt; import pkg_resources; \r\n    &gt;&gt;&gt; pkg_resources.get_distribution(&#39;django&#39;).version\r\n    &#39;1.8.4&#39;\r\n\r\nThis ties directly into setup.py: https://github.com/django/django/blob/master/setup.py#L37\r\n\r\nIts definitely the best way to get the version number of ANY package!\r\n\r\nAlso there is `distutils`\r\n\r\n    &gt;&gt;&gt; from distutils.version import LooseVersion, StrictVersion\r\n    &gt;&gt;&gt; LooseVersion(&quot;2.3.1&quot;) &lt; LooseVersion(&quot;10.1.2&quot;)\r\n    True\r\n    &gt;&gt;&gt; StrictVersion(&quot;2.3.1&quot;) &lt; StrictVersion(&quot;10.1.2&quot;)\r\n    True\r\n    &gt;&gt;&gt; StrictVersion(&quot;2.3.1&quot;) &gt; StrictVersion(&quot;10.1.2&quot;)\r\n    False\r\n\r\nAs for the `python` version, i agree with @jamesdradbury\r\n\r\n    &gt;&gt;&gt; import sys\r\n    &gt;&gt;&gt; sys.version\r\n    &#39;3.4.3 (default, Jul 13 2015, 12:18:23) \\n[GCC 4.2.1 Compatible Apple LLVM 6.1.0 (clang-602.0.53)]&#39;\r\n\r\nTying it all together: \r\n\r\n    &gt;&gt;&gt; StrictVersion((sys.version.split(&#39; &#39;)[0])) &gt; StrictVersion(&#39;2.6&#39;)\r\n    True\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1449657265, "answer_id": 34176589, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1449657265, "body_markdown": "There is an undocumented utils versions module in django\r\n\r\nhttps://github.com/django/django/blob/master/django/utils/version.py\r\n\r\nWith that you can get the normal version as string or a detailed version tuple:\r\n\r\n    &gt;&gt;&gt; from django.utils import version\r\n    &gt;&gt;&gt; version.get_version()\r\n    ... 1.9\r\n    &gt;&gt;&gt; version.get_complete_version()\r\n    ... (1, 9, 0, &#39;final&#39;, 0)\r\n   "}, {"tags": [], "down_vote_count": 0, "creation_date": 1468973475, "answer_id": 38470436, "path": "stack.django.answer", "score": 24, "up_vote_count": 24, "is_accepted": false, "last_activity_date": 1468973475, "body_markdown": "As you say you have two versions of python, I assume they are in different [virtual environments][1] (e.g. venv) or perhaps [conda environments][2].\r\n\r\nWhen you installed django, it was likely in only one environment.  It is possible that you have two different versions of django, one for each version of python.\r\n\r\nIn from a Unix/Mac terminal, you can check your python version as follows:\r\n\r\n    $ python --version\r\n\r\nIf you want to know the source:\r\n\r\n    $ which python\r\n\r\nAnd to check the version of django:\r\n\r\n    $ python -m django --version\r\n\r\n\r\n  [1]: http://docs.python-guide.org/en/latest/dev/virtualenvs/\r\n  [2]: http://conda.pydata.org/docs/using/envs.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1487149249, "answer_id": 42244782, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1487149249, "body_markdown": "run `pip list` on LINUX TERMINAL  and find Django and its version on list\r\n\r\nrun `pip freeze` on cmd on Windows  "}, {"tags": [], "down_vote_count": 0, "creation_date": 1495626631, "answer_id": 44157589, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1495626631, "body_markdown": "If you are working in a virtual environment just pip freeze would tell you if not you can use this\r\n\r\n    django-admin --version\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1499608892, "answer_id": 44997204, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1518402157, "last_edit_date": 1518402157, "body_markdown": "    django-admin --version\r\n    python manage.py --version\r\n    pip freeze | grep django"}, {"tags": [], "down_vote_count": 0, "creation_date": 1511165278, "answer_id": 47387496, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1511165278, "body_markdown": "You can get django version by running the following command in a shell prompt\r\n\r\n**python -m django --version**\r\n\r\nIf Django is installed, you should see the version otherwise you\u2019ll get an error telling \u201cNo module named django\u201d."}, {"tags": [], "down_vote_count": 0, "creation_date": 1518774624, "answer_id": 48824025, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1518774624, "body_markdown": "**Type the following command in Python shell**\r\n   \r\n\r\n    import django\r\n    django.get_version()\r\n\r\n"}], "title": "How to check Django version", "view_count": 310567, "answer_count": 21, "code_snippet": ["<code>python3 -m django --version</code>", "<code>python -V</code>", "<code>&gt;&gt;&gt; import django\n&gt;&gt;&gt; django.VERSION\n(2, 0, 0, 'final', 0)\n</code>", "<code>print(django.get_version())</code>", "<code>1.6.5</code>", "<code>.__version__</code>", "<code>.VERSION</code>", "<code>.get_version()</code>", "<code>django.__version__</code>", "<code>django.VERSION</code>", "<code>print(django.get_version())</code>", "<code>$ python -c \"import django; print(django.get_version())\"\n2.0\n</code>", "<code>$ django-admin.py version\n2.0\n</code>", "<code>python manage.py version</code>", "<code>./manage.py --version\n</code>", "<code>&gt;&gt;&gt; import django\n&gt;&gt;&gt; print(django.get_version())\n1.6.1\n</code>", "<code>django-admin.py version\n</code>", "<code>1.6.5</code>", "<code>import sys\nsys.version\n</code>", "<code>import django\ndjango.get_version()\n</code>", "<code>&gt;&gt;&gt; '1.7.5' &lt; '1.7.10'\nFalse\n</code>", "<code>&gt;&gt;&gt; from distutils.version import StrictVersion\n&gt;&gt;&gt; StrictVersion('1.7.5') &lt; StrictVersion('1.7.10')\nTrue\n</code>", "<code>django.VERSION</code>", "<code>django.VERSION &gt;= (1, 8)</code>", "<code>josh@villaroyale:~/code/djangosite$ pip freeze | grep Django\nDjango==1.4.3\n</code>", "<code>$ python --version\n</code>", "<code>$ which python\n</code>", "<code>$ python -m django --version\n</code>", "<code>django-admin --version\npython manage.py --version\npip freeze | grep django\n</code>", "<code>python manage.py --version</code>", "<code>-</code>", "<code>&gt;&gt;&gt;from django import get_version\n&gt;&gt;&gt; get_version()\n</code>", "<code>python -c 'import django; print(django.get_version())'\n</code>", "<code>python manage.py runserver --version\n</code>", "<code>echo $PYTHONPATH</code>", "<code>pip list</code>", "<code>pip freeze</code>", "<code>django-admin --version\n</code>", "<code>cat __init__.py | grep VERSION\n</code>", "<code>VERSION = (1, 5, 5, 'final', 0)\n</code>", "<code>pip freeze</code>", "<code>python -c \"import &lt;module&gt;; &lt;module&gt;.VERSION\"</code>", "<code>/path/to/env/bin/python -c \"&lt;command&gt;\"</code>", "<code>/path/to/env/bin/pip freeze</code>", "<code>www-data</code>", "<code>sudo su www-data -c \"/path/to/env/bin/pip install &lt;module&gt;\"</code>", "<code>&gt;&gt;&gt; from django.utils import version\n&gt;&gt;&gt; version.get_version()\n... 1.9\n&gt;&gt;&gt; version.get_complete_version()\n... (1, 9, 0, 'final', 0)\n</code>", "<code>&gt;&gt;&gt; import pkg_resources; \n&gt;&gt;&gt; pkg_resources.get_distribution('django').version\n'1.8.4'\n</code>", "<code>distutils</code>", "<code>&gt;&gt;&gt; from distutils.version import LooseVersion, StrictVersion\n&gt;&gt;&gt; LooseVersion(\"2.3.1\") &lt; LooseVersion(\"10.1.2\")\nTrue\n&gt;&gt;&gt; StrictVersion(\"2.3.1\") &lt; StrictVersion(\"10.1.2\")\nTrue\n&gt;&gt;&gt; StrictVersion(\"2.3.1\") &gt; StrictVersion(\"10.1.2\")\nFalse\n</code>", "<code>python</code>", "<code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.version\n'3.4.3 (default, Jul 13 2015, 12:18:23) \\n[GCC 4.2.1 Compatible Apple LLVM 6.1.0 (clang-602.0.53)]'\n</code>", "<code>&gt;&gt;&gt; StrictVersion((sys.version.split(' ')[0])) &gt; StrictVersion('2.6')\nTrue\n</code>", "<code>django-nine</code>", "<code>from nine import versions\n\nversions.DJANGO_1_7 # True\nversions.DJANGO_LTE_1_7 # True\nversions.DJANGO_GTE_1_7 # True\nversions.DJANGO_GTE_1_8 # False\nversions.DJANGO_GTE_1_4 # True\nversions.DJANGO_LTE_1_6 # False\n</code>", "<code>django-admin --version\n</code>", "<code>import django\ndjango.get_version()\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "postgresql", "psycopg2", "psycopg"], "creation_date": 1275717919, "body_markdown": "I got a lot of errors with the message :\r\n\r\n    &quot;DatabaseError: current transaction is aborted, commands ignored until end of transaction block&quot;\r\n\r\n after changed from python-psycopg to python-psycopg2 as Django project&#39;s database engine.\r\n\r\nThe code remains the same, just dont know where those errors are from.", "last_edit_date": 1379011699, "up_vote_count": 180, "link": "https://stackoverflow.com/questions/2979369/databaseerror-current-transaction-is-aborted-commands-ignored-until-end-of-tra", "_childDocuments_": [{"tags": [], "down_vote_count": 3, "creation_date": 1275718599, "answer_id": 2979389, "path": "stack.django.answer", "score": 128, "up_vote_count": 131, "is_accepted": true, "last_activity_date": 1275718900, "last_edit_date": 1275718900, "body_markdown": "This is what postgres does when a query produces an error and you try to run another query without first rolling back the transaction.  To fix it, you&#39;ll want to figure out where in the code that bad query is being executed.  It might be helpful to use the [log_statement][1] and [log_min_error_statement][2] options in your postgresql server.\r\n\r\n\r\n  [1]: http://www.postgresql.org/docs/current/static/runtime-config-logging.html#GUC-LOG-STATEMENT\r\n  [2]: http://www.postgresql.org/docs/current/static/runtime-config-logging.html#GUC-LOG-MIN-ERROR-STATEMENT"}, {"tags": [], "down_vote_count": 1, "creation_date": 1318276462, "answer_id": 7717916, "path": "stack.django.answer", "score": 47, "up_vote_count": 48, "is_accepted": false, "last_activity_date": 1337717578, "last_edit_date": 1337717578, "body_markdown": "So, I ran into this same issue. The problem I was having here was that my database wasn&#39;t properly synced. Simple problems always seem to cause the most angst...\r\n\r\nTo sync your django db, from within your app directory, within terminal, type:\r\n\r\n    $ python manage.py syncdb\r\n\r\nEdit: Note that if you are using django-south, running the &#39;$ python manage.py migrate&#39; command may also resolve this issue.\r\n\r\nHappy coding!"}, {"tags": [], "down_vote_count": 4, "creation_date": 1323312188, "answer_id": 8425485, "path": "stack.django.answer", "score": -4, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1323312188, "body_markdown": "you could disable transaction via &quot;set_isolation_level(0)&quot;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1336070863, "answer_id": 10437521, "path": "stack.django.answer", "score": 28, "up_vote_count": 29, "is_accepted": false, "last_activity_date": 1352837359, "last_edit_date": 1352837359, "body_markdown": "In my experience, these errors happen this way:\r\n\r\n    try:\r\n        code_that_executes_bad_query()\r\n        # transaction on DB is now bad\r\n    except:\r\n        pass\r\n\r\n    # transaction on db is still bad\r\n    code_that_executes_working_query() # raises transaction error\r\n\r\nThere nothing wrong with the second query, but since the real error was caught, the second query is the one that raises the (much less informative) error.\r\n\r\nedit: this only happens if the `except` clause catches `IntegrityError` (or any other low level database exception), If you catch something like `DoesNotExist` this error will not come up, because `DoesNotExist` does not corrupt the transaction.\r\n\r\nThe lesson here is don&#39;t do try/except/pass."}, {"tags": [], "down_vote_count": 0, "creation_date": 1341591813, "answer_id": 11366092, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1352837159, "last_edit_date": 1352837159, "body_markdown": "I think the pattern priestc mentions is more likely to be the usual cause of this issue when using PostgreSQL.\r\n\r\nHowever I feel there are valid uses for the pattern and I don&#39;t think this issue should be a reason to always avoid it. For example:\r\n\r\n    try:\r\n        profile = user.get_profile()\r\n    except ObjectDoesNotExist:\r\n        profile = make_default_profile_for_user(user)\r\n\r\n    do_something_with_profile(profile)\r\n\r\n\r\nIf you do feel OK with this pattern, but want to avoid explicit transaction handling code all over the place then you might want to look into turning on autocommit mode (PostgreSQL 8.2+): https://docs.djangoproject.com/en/dev/ref/databases/#autocommit-mode\r\n\r\n    DATABASES[&#39;default&#39;] = {\r\n        #.. you usual options...\r\n        &#39;OPTIONS&#39;: {\r\n            &#39;autocommit&#39;: True,\r\n        }\r\n    }\r\n\r\nI am unsure if there are important performance considerations (or of any other type)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1343894118, "answer_id": 11773258, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1343894118, "body_markdown": "I&#39;ve got the silimar problem. The solution was to migrate db (`manage.py syncdb` or `manage.py schemamigration --auto &lt;table name&gt;` if you use south)."}, {"tags": [], "down_vote_count": 2, "creation_date": 1350893766, "answer_id": 13007379, "path": "stack.django.answer", "score": 121, "up_vote_count": 123, "is_accepted": false, "last_activity_date": 1453395379, "last_edit_date": 1453395379, "body_markdown": "To get rid of the error, **roll back the last (erroneous) transaction** after you&#39;ve fixed your code:\r\n\r\n&lt;!-- language: lang-py --&gt;\r\n\r\n    from django.db import transaction\r\n    transaction.rollback()\r\n\r\nYou can use try-except to prevent the error from occurring:\r\n\r\n&lt;!-- language: lang-py --&gt;\r\n\r\n    from django.db import transaction, DatabaseError\r\n    try:\r\n        a.save()\r\n    except DatabaseError:\r\n        transaction.rollback()\r\n\r\n\r\nRefer : [Django documentation](https://docs.djangoproject.com/en/dev/topics/db/transactions/#transaction-rollback)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1360792665, "answer_id": 14863945, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1360792665, "body_markdown": "I just had this error too but it was masking another more relevant error message where the code was trying to store a 125 characters string in a 100 characters column:\r\n\r\n    DatabaseError: value too long for type character varying(100)\r\n\r\nI had to debug through the code for the above message to show up, otherwise it displays\r\n\r\n    DatabaseError: current transaction is aborted"}, {"tags": [], "down_vote_count": 0, "creation_date": 1368804081, "answer_id": 16612643, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1368804081, "body_markdown": "In response to @priestc and @Sebastian, what if you do something like this?\r\n\r\n    try:\r\n        conn.commit()\r\n\texcept:\r\n\t\tpass\r\n\t\r\n\tcursor.execute( sql )\r\n\ttry: \r\n\t\treturn cursor.fetchall()\r\n\texcept: \r\n\t\tconn.commit()\r\n\t\treturn None\r\n\r\nI just tried this code and it seems to work, failing silently without having to care about any possible errors, and working when the query is good."}, {"tags": [], "down_vote_count": 0, "creation_date": 1394009999, "answer_id": 22192917, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1394009999, "last_edit_date": 1495542378, "body_markdown": "If you get this while in interactive shell and need a quick fix, do this:\r\n\r\n    from django.db import connection\r\n    connection._rollback()\r\n\r\noriginally seen in [this answer](https://stackoverflow.com/a/7753748/484127)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1395912678, "answer_id": 22683316, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1395954135, "last_edit_date": 1395954135, "body_markdown": "I believe @AnujGupta&#39;s answer is correct. However the rollback can itself raise an exception which you should catch and handle:\r\n\r\n    from django.db import transaction, DatabaseError\r\n    try:\r\n        a.save()\r\n    except DatabaseError:\r\n        try:\r\n            transaction.rollback()\r\n        except transaction.TransactionManagementError:\r\n            # Log or handle otherwise\r\n\r\nIf you find you&#39;re rewriting this code in various `save()` locations, you can extract-method:\r\n\r\n    import traceback\r\n    def try_rolling_back():\r\n        try:\r\n            transaction.rollback()\r\n            log.warning(&#39;rolled back&#39;)  # example handling\r\n        except transaction.TransactionManagementError:\r\n            log.exception(traceback.format_exc())  # example handling\r\n\r\nFinally, you can prettify it using a decorator that protects methods which use `save()`:\r\n\r\n    from functools import wraps\r\n    def try_rolling_back_on_exception(fn):\r\n        @wraps(fn)\r\n        def wrapped(*args, **kwargs):\r\n            try:\r\n                return fn(*args, **kwargs)\r\n            except:\r\n                traceback.print_exc()\r\n                try_rolling_back()\r\n        return wrapped\r\n\r\n    @try_rolling_back_on_exception\r\n    def some_saving_method():\r\n        # ...\r\n        model.save()\r\n        # ...\r\nEven if you implement the decorator above, it&#39;s still convenient to keep `try_rolling_back()` as an extracted method in case you need to use it manually for cases where specific handling is required, and the generic decorator handling isn&#39;t enough."}, {"tags": [], "down_vote_count": 0, "creation_date": 1398082190, "answer_id": 23197160, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1420811686, "last_edit_date": 1420811686, "body_markdown": "This is very strange behavior for me. I&#39;m surprised that no one thought of savepoints. In my code failing query was expected behavior:\r\n    \r\n    from django.db import transaction\r\n    @transaction.commit_on_success\r\n    def update():\r\n        skipped = 0\r\n        for old_model in OldModel.objects.all():\r\n            try:\r\n                Model.objects.create(\r\n                    group_id=old_model.group_uuid,\r\n                    file_id=old_model.file_uuid,\r\n                )\r\n            except IntegrityError:\r\n                skipped += 1\r\n        return skipped\r\n\r\nI have changed code this way to use savepoints:\r\n\r\n    from django.db import transaction\r\n    @transaction.commit_on_success\r\n    def update():\r\n        skipped = 0\r\n        sid = transaction.savepoint()\r\n        for old_model in OldModel.objects.all():\r\n            try:\r\n                Model.objects.create(\r\n                    group_id=old_model.group_uuid,\r\n                    file_id=old_model.file_uuid,\r\n                )\r\n            except IntegrityError:\r\n                skipped += 1\r\n                transaction.savepoint_rollback(sid)\r\n            else:\r\n                transaction.savepoint_commit(sid)\r\n        return skipped\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1457733219, "answer_id": 35950624, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1457733219, "body_markdown": "I encountered a similar behavior while running a malfunctioned transaction on the `postgres` terminal. Nothing went through after this, as the `database` is in a state of `error`. However, just as a quick fix, if you can afford to avoid `rollback transaction`. Following did the trick for me:\r\n\r\n`COMMIT;`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1517234729, "answer_id": 48503125, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1517234729, "body_markdown": "just use rollback\r\n\r\nExample code\r\n\r\n    try:\r\n        cur.execute(&quot;CREATE TABLE IF NOT EXISTS test2 (id serial, qa text);&quot;)\r\n    except:\r\n        cur.execute(&quot;rollback&quot;)\r\n        cur.execute(&quot;CREATE TABLE IF NOT EXISTS test2 (id serial, qa text);&quot;)\r\n       \r\n"}], "title": "DatabaseError: current transaction is aborted, commands ignored until end of transaction block", "view_count": 132322, "answer_count": 14, "code_snippet": ["<code>\"DatabaseError: current transaction is aborted, commands ignored until end of transaction block\"\n</code>", "<code>conn.rollback()</code>", "<code>from django.db import transaction\ntransaction.rollback()\n</code>", "<code>from django.db import transaction, DatabaseError\ntry:\n    a.save()\nexcept DatabaseError:\n    transaction.rollback()\n</code>", "<code>IntegrityError</code>", "<code>DatabaseError</code>", "<code>$ python manage.py syncdb\n</code>", "<code>python manage.py migrate &lt;app&gt;</code>", "<code>django-south</code>", "<code>migrate</code>", "<code>try:\n    code_that_executes_bad_query()\n    # transaction on DB is now bad\nexcept:\n    pass\n\n# transaction on db is still bad\ncode_that_executes_working_query() # raises transaction error\n</code>", "<code>except</code>", "<code>IntegrityError</code>", "<code>DoesNotExist</code>", "<code>DoesNotExist</code>", "<code>try:\n    profile = user.get_profile()\nexcept ObjectDoesNotExist:\n    profile = make_default_profile_for_user(user)\n\ndo_something_with_profile(profile)\n</code>", "<code>DATABASES['default'] = {\n    #.. you usual options...\n    'OPTIONS': {\n        'autocommit': True,\n    }\n}\n</code>", "<code>from django.db import connection\nconnection._rollback()\n</code>", "<code>manage.py syncdb</code>", "<code>manage.py schemamigration --auto &lt;table name&gt;</code>", "<code>postgres</code>", "<code>database</code>", "<code>error</code>", "<code>rollback transaction</code>", "<code>COMMIT;</code>", "<code>DatabaseError: value too long for type character varying(100)\n</code>", "<code>DatabaseError: current transaction is aborted\n</code>", "<code>try:\n    conn.commit()\nexcept:\n    pass\n\ncursor.execute( sql )\ntry: \n    return cursor.fetchall()\nexcept: \n    conn.commit()\n    return None\n</code>", "<code>from django.db import transaction, DatabaseError\ntry:\n    a.save()\nexcept DatabaseError:\n    try:\n        transaction.rollback()\n    except transaction.TransactionManagementError:\n        # Log or handle otherwise\n</code>", "<code>save()</code>", "<code>import traceback\ndef try_rolling_back():\n    try:\n        transaction.rollback()\n        log.warning('rolled back')  # example handling\n    except transaction.TransactionManagementError:\n        log.exception(traceback.format_exc())  # example handling\n</code>", "<code>save()</code>", "<code>from functools import wraps\ndef try_rolling_back_on_exception(fn):\n    @wraps(fn)\n    def wrapped(*args, **kwargs):\n        try:\n            return fn(*args, **kwargs)\n        except:\n            traceback.print_exc()\n            try_rolling_back()\n    return wrapped\n\n@try_rolling_back_on_exception\ndef some_saving_method():\n    # ...\n    model.save()\n    # ...\n</code>", "<code>try_rolling_back()</code>", "<code>from django.db import transaction\n@transaction.commit_on_success\ndef update():\n    skipped = 0\n    for old_model in OldModel.objects.all():\n        try:\n            Model.objects.create(\n                group_id=old_model.group_uuid,\n                file_id=old_model.file_uuid,\n            )\n        except IntegrityError:\n            skipped += 1\n    return skipped\n</code>", "<code>from django.db import transaction\n@transaction.commit_on_success\ndef update():\n    skipped = 0\n    sid = transaction.savepoint()\n    for old_model in OldModel.objects.all():\n        try:\n            Model.objects.create(\n                group_id=old_model.group_uuid,\n                file_id=old_model.file_uuid,\n            )\n        except IntegrityError:\n            skipped += 1\n            transaction.savepoint_rollback(sid)\n        else:\n            transaction.savepoint_commit(sid)\n    return skipped\n</code>", "<code>try:\n    cur.execute(\"CREATE TABLE IF NOT EXISTS test2 (id serial, qa text);\")\nexcept:\n    cur.execute(\"rollback\")\n    cur.execute(\"CREATE TABLE IF NOT EXISTS test2 (id serial, qa text);\")\n</code>"], "path": "stack.django"}, {"tags": ["python", "pip", "setuptools", "requirements.txt"], "creation_date": 1358514014, "body_markdown": "I have a `requirements.txt` file that I&#39;m using with Travis-CI.  It seems silly to duplicate the requirements in both `requirements.txt` and `setup.py`, so I was hoping to pass a file handle to the `install_requires` kwarg in `setuptools.setup`.\r\n\r\nIs this possible? If so, how should I go about doing it?\r\n\r\nHere is my `requirements.txt` file:\r\n\r\n    guessit&gt;=0.5.2\r\n    tvdb_api&gt;=1.8.2\r\n    hachoir-metadata&gt;=1.3.3\r\n    hachoir-core&gt;=1.3.3\r\n    hachoir-parser&gt;=1.3.4", "last_edit_date": 1488982439, "up_vote_count": 183, "link": "https://stackoverflow.com/questions/14399534/reference-requirements-txt-for-the-install-requires-kwarg-in-setuptools-setup-py", "_childDocuments_": [{"tags": [], "down_vote_count": 7, "creation_date": 1358514887, "answer_id": 14399775, "path": "stack.django.answer", "score": 62, "up_vote_count": 69, "is_accepted": false, "last_activity_date": 1358514887, "body_markdown": "It can&#39;t take a file handle. The `install_requires` argument can [only be a string or a list of strings][1].\r\n\r\nYou can, of course, read your file in the setup script and pass it as a list of strings to `install_requires`.\r\n\r\n    import os\r\n    from setuptools import setup\r\n    \r\n    with open(&#39;requirements.txt&#39;) as f:\r\n        required = f.read().splitlines()\r\n    \r\n    setup(...\r\n    install_requires=required,\r\n    ...)\r\n\r\n  [1]: http://peak.telecommunity.com/DevCenter/setuptools#new-and-changed-setup-keywords"}, {"tags": [], "down_vote_count": 19, "creation_date": 1368883104, "answer_id": 16624700, "path": "stack.django.answer", "score": 180, "up_vote_count": 199, "is_accepted": true, "last_activity_date": 1492627300, "last_edit_date": 1492627300, "body_markdown": "A requirement file can contain comments (`#`) and can include some other files (`--requirement` or `-r`).\r\nThus, if you really want to parse a `requirements.txt` you should use the pip parser:\r\n\r\n    from pip.req import parse_requirements\r\n\r\n    # parse_requirements() returns generator of pip.req.InstallRequirement objects\r\n    install_reqs = parse_requirements(&lt;requirements_path&gt;)\r\n\r\n    # reqs is a list of requirement\r\n    # e.g. [&#39;django==1.5.1&#39;, &#39;mezzanine==1.4.6&#39;]\r\n    reqs = [str(ir.req) for ir in install_reqs]\r\n\r\n    setup(\r\n        ...\r\n        install_requires=reqs\r\n    )\r\n\r\n**UPDATE:** my answer is old now. Pip does not have a public API so this [no longer works](https://github.com/pypa/pip/commit/7037443975ee5706ef829f14a52ac2fba7dbfff2) (e.g. `parse_requirements` now requires an instance of `pip.download.PipSession`). You can do the opposite: list the dependencies in `setup.py` and have a single character -- a dot `.` -- in `requirements.txt`.\r\n\r\n**UPDATE2:** even if not advised, it is still possible to parse `requirements.txt` file that doesn&#39;t refer any external requirements by URL with the following hack (tested with `pip 9.0.1`):\r\n\r\n    install_reqs = parse_requirements(&#39;requirements.txt&#39;, session=&#39;hack&#39;)\r\n\r\nThis doesn&#39;t filter [environment markers](https://pip.pypa.io/en/stable/reference/pip_install/#requirement-specifiers) though."}, {"tags": [], "down_vote_count": 1, "creation_date": 1377102197, "answer_id": 18362802, "path": "stack.django.answer", "score": 14, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1377102197, "body_markdown": "Install the current package in Travis. This avoids the use of a `requirements.txt` file.\r\nFor example:\r\n\r\n    language: python\r\n    python:\r\n      - &quot;2.7&quot;\r\n      - &quot;2.6&quot;\r\n    install:\r\n      - pip install -q -e .\r\n    script:\r\n      - python runtests.py\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1380476922, "answer_id": 19081268, "path": "stack.django.answer", "score": 51, "up_vote_count": 52, "is_accepted": false, "last_activity_date": 1380540271, "last_edit_date": 1380540271, "body_markdown": "Requirements files use an expanded pip format, which is only useful if you need to complement your `setup.py` with stronger constraints, for example specifying the exact urls some of the dependencies must come from, or the output of `pip freeze` to freeze the entire package set to known-working versions. If you don&#39;t need the extra constraints, use only a `setup.py`. If you feel like you really need to ship a `requirements.txt` anyway, you can make it a single line:\r\n\r\n    .\r\n\r\nIt will be valid and refer exactly to the contents of the `setup.py` that is in the same directory."}, {"tags": [], "down_vote_count": 1, "creation_date": 1383938325, "answer_id": 19866884, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1383938325, "body_markdown": "`from pip.req import parse_requirements` did not work for me and I think it&#39;s for the blank lines in my requirements.txt, but this function does work\r\n\r\n\r\n    def parse_requirements(requirements):\r\n        with open(requirements) as f:\r\n            return [l.strip(&#39;\\n&#39;) for l in f if l.strip(&#39;\\n&#39;) and not l.startswith(&#39;#&#39;)]\r\n\r\n    reqs = parse_requirements(&lt;requirements_path&gt;)\r\n\r\n    setup(\r\n        ...\r\n        install_requires=reqs,\r\n        ...\r\n    )"}, {"tags": [], "down_vote_count": 0, "creation_date": 1395797491, "answer_id": 22649833, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1395797491, "body_markdown": "Using `parse_requirements` is problematic because the pip API isn&#39;t publicly documented and supported.  In pip 1.6, that function is actually moving, so existing uses of it are likely to break.\r\n\r\nA more reliable way to eliminate duplication between `setup.py` and `requirements.txt` is to specific your dependencies in `setup.py` and then put `-e .` into your `requirements.txt` file.  Some information from one of the `pip` developers about why that&#39;s a better way to go is available here: https://caremad.io/blog/setup-vs-requirement/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1396807327, "answer_id": 22897828, "path": "stack.django.answer", "score": 37, "up_vote_count": 37, "is_accepted": false, "last_activity_date": 1463332511, "last_edit_date": 1463332511, "body_markdown": "While not an exact answer to the question, I recommend Donald Stufft&#39;s blog post at &lt;https://caremad.io/2013/07/setup-vs-requirement/&gt; for a good take on this problem. I&#39;ve been using it to great success.\r\n\r\nIn short, `requirements.txt` is not a `setup.py` alternative, but a deployment complement. Keep an appropriate abstraction of package dependencies in `setup.py`. Set `requirements.txt` or more of &#39;em to fetch specific versions of package dependencies for development, testing, or production.\r\n\r\nE.g. with packages included in the repo under `deps/`:\r\n\r\n    # fetch specific dependencies\r\n    --no-index\r\n    --find-links deps/\r\n\r\n    # install package\r\n    # NOTE: -e . for editable mode\r\n    .\r\n\r\npip executes package&#39;s `setup.py` and installs the specific versions of dependencies declared in `install_requires`. There&#39;s no duplicity and the purpose of both artifacts is preserved."}, {"tags": [], "down_vote_count": 2, "creation_date": 1406400260, "answer_id": 24974352, "path": "stack.django.answer", "score": 3, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1406400260, "body_markdown": "**BEWARE OF `parse_requirements` BEHAVIOUR!**\r\n\r\nPlease note that `pip.req.parse_requirements` will change underscores to dashes.  This was enraging me for a few days before I discovered it.  Example demonstrating:\r\n\r\n    from pip.req import parse_requirements  # tested with v.1.4.1\r\n\r\n    reqs = &#39;&#39;&#39;\r\n    example_with_underscores\r\n    example-with-dashes\r\n    &#39;&#39;&#39;\r\n\r\n    with open(&#39;requirements.txt&#39;, &#39;w&#39;) as f:\r\n        f.write(reqs)\r\n\r\n    req_deps = parse_requirements(&#39;requirements.txt&#39;)\r\n    result = [str(ir.req) for ir in req_deps if ir.req is not None]\r\n    print result\r\n\r\nproduces\r\n\r\n    [&#39;example-with-underscores&#39;, &#39;example-with-dashes&#39;]"}, {"tags": [], "down_vote_count": 0, "creation_date": 1407494032, "answer_id": 25201488, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1486316222, "last_edit_date": 1486316222, "body_markdown": "If you don&#39;t want to force your users to install pip, you can emulate its behavior with this:\r\n\r\n\r\n    import sys\r\n    \r\n    from os import path as p\r\n    \r\n    try:\r\n        from setuptools import setup, find_packages\r\n    except ImportError:\r\n        from distutils.core import setup, find_packages\r\n    \r\n    \r\n    def read(filename, parent=None):\r\n        parent = (parent or __file__)\r\n    \r\n        try:\r\n            with open(p.join(p.dirname(parent), filename)) as f:\r\n                return f.read()\r\n        except IOError:\r\n            return &#39;&#39;\r\n    \r\n    \r\n    def parse_requirements(filename, parent=None):\r\n        parent = (parent or __file__)\r\n        filepath = p.join(p.dirname(parent), filename)\r\n        content = read(filename, parent)\r\n    \r\n        for line_number, line in enumerate(content.splitlines(), 1):\r\n            candidate = line.strip()\r\n    \r\n            if candidate.startswith(&#39;-r&#39;):\r\n                for item in parse_requirements(candidate[2:].strip(), filepath):\r\n                    yield item\r\n            else:\r\n                yield candidate\r\n\r\n    setup(\r\n    ...\r\n        install_requires=list(parse_requirements(&#39;requirements.txt&#39;))\r\n    )"}, {"tags": [], "down_vote_count": 3, "creation_date": 1429115589, "answer_id": 29655844, "path": "stack.django.answer", "score": 20, "up_vote_count": 23, "is_accepted": false, "last_activity_date": 1440621865, "last_edit_date": 1440621865, "body_markdown": "Most of the other answers above don&#39;t work with the current version of pip&#39;s API. Here is the correct* way to do it with the current version of pip (6.0.8 at the time of writing, also worked in 7.1.2. You can check your version with pip -V).\r\n\r\n    from pip.req import parse_requirements\r\n    from pip.download import PipSession\r\n\r\n    install_reqs = parse_requirements(&lt;requirements_path&gt;, session=PipSession())\r\n\r\n    reqs = [str(ir.req) for ir in install_reqs]\r\n\r\n    setup(\r\n        ...\r\n        install_requires=reqs\r\n        ....\r\n    )\r\n\r\n\\* Correct, in that it is the way to use parse_requirements with the current pip. It still probably isn&#39;t the best way to do it, since, as posters above said, pip doesn&#39;t really maintain an API. "}, {"tags": [], "down_vote_count": 1, "creation_date": 1447388484, "answer_id": 33685899, "path": "stack.django.answer", "score": 79, "up_vote_count": 80, "is_accepted": false, "last_activity_date": 1476279104, "last_edit_date": 1476279104, "body_markdown": "On the face of it, it does seem that `requirements.txt` and `setup.py` are silly duplicates, but it&#39;s important to understand that while the form is similar, the intended function is very different.\r\n\r\nThe goal of a package author, when specifying dependencies, is to say &quot;wherever you install this package, these are the other packages you need, in order for this package to work.&quot;\r\n\r\nIn contrast, the deployment author (which may be the same person at a different time) has a different job, in that they say &quot;here&#39;s the list of packages that we&#39;ve gathered together and tested and that I now need to install&quot;.\r\n\r\nThe package author writes for a wide variety of scenarios, because they&#39;re putting their work out there to be used in ways they may not know about, and have no way of knowing what packages will be installed alongside their package.  In order to be a good neighbor and avoid dependency version conflicts with other packages, they need to specify as wide a range of dependency versions as can possibly work.  This is what `install_requires` in `setup.py` does.\r\n\r\nThe deployment author writes for a very different, very specific goal: a single instance of an installed application or service, installed on a particular computer.  In order to precisely control a deployment, and be sure that the right packages are tested and deployed, the deployment author must specify the exact version and source-location of every package to be installed, including dependencies and dependency&#39;s dependencies.  With this spec, a deployment can be repeatably applied to several machines, or tested on a test machine, and the deployment author can be confident that the same packages are deployed every time.  This is what a `requirements.txt` does.\r\n\r\nSo you can see that, while they both look like a big list of packages and versions, these two things have very different jobs.  And it&#39;s definitely easy to mix this up and get it wrong!  But the right way to think about this is that `requirements.txt` is an &quot;answer&quot; to the &quot;question&quot; posed by the requirements in all the various `setup.py` package files.  Rather than write it by hand, it&#39;s often generated by telling pip to look at all the `setup.py` files in a set of desired packages, find a set of packages that it thinks fits all the requirements, and then, after they&#39;re installed, &quot;freeze&quot; that list of packages into a text file (this is where the `pip freeze` name comes from).  \r\n\r\nSo the takeaway: \r\n\r\n- `setup.py` should declare the loosest possible dependency versions that are still workable.  Its job is to say what a particular package can work with.\r\n- `requirements.txt` is a deployment manifest that defines an entire installation job, and shouldn&#39;t be thought of as tied to any one package.  Its job is to declare an exhaustive list of all the necessary packages to make a deployment work.\r\n- Because these two things have such different content and reasons for existing, it&#39;s not feasible to simply copy one into the other.\r\n\r\n### References:\r\n\r\n- [install_requires vs Requirements files][1] from the Python packaging user guide.\r\n\r\n\r\n  [1]: https://packaging.python.org/requirements/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1450836767, "answer_id": 34427557, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1501761610, "last_edit_date": 1501761610, "body_markdown": "I created a reusable function for this. It actually parses an entire directory of requirements files and sets them to extras_require.\r\n\r\nLatest always available here: https://gist.github.com/akatrevorjay/293c26fefa24a7b812f5\r\n\r\n    from setuptools import setup, find_packages\r\n    from pip.req import parse_requirements\r\n    from pip.download import PipSession\r\n    import itertools\r\n    import glob\r\n    import os\r\n\r\n\r\n    def setup_requirements(patterns=[&#39;requirements.txt&#39;, &#39;requirements/*.txt&#39;, &#39;requirements/*.pip&#39;], combine=True):\r\n        &quot;&quot;&quot;\r\n        Parse a glob of requirements and return a dictionary of setup() options.\r\n        Create a dictionary that holds your options to setup() and update it using this.\r\n        Pass that as kwargs into setup(), viola\r\n\r\n        Any files that are not a standard option name (ie install, tests, setup) are added to extras_require with their\r\n        basename minus ext. An extra key is added to extras_require: &#39;all&#39;, that contains all distinct reqs combined.\r\n\r\n        If you&#39;re running this for a Docker build, set `combine=True`.\r\n        This will set install_requires to all distinct reqs combined.\r\n\r\n        Example:\r\n\r\n        &gt;&gt;&gt; _conf = dict(\r\n        ...     name=&#39;mainline&#39;,\r\n        ...     version=&#39;0.0.1&#39;,\r\n        ...     description=&#39;Mainline&#39;,\r\n        ...     author=&#39;Trevor Joynson &lt;github@trevor.joynson,io&gt;&#39;,\r\n        ...     url=&#39;https://trevor.joynson.io&#39;,\r\n        ...     namespace_packages=[&#39;mainline&#39;],\r\n        ...     packages=find_packages(),\r\n        ...     zip_safe=False,\r\n        ...     include_package_data=True,\r\n        ... )\r\n        ... _conf.update(setup_requirements())\r\n        ... setup(**_conf)\r\n\r\n        :param str pattern: Glob pattern to find requirements files\r\n        :param bool combine: Set True to set install_requires to extras_require[&#39;all&#39;]\r\n        :return dict: Dictionary of parsed setup() options\r\n        &quot;&quot;&quot;\r\n        session = PipSession()\r\n\r\n        # Handle setuptools insanity\r\n        key_map = {\r\n            &#39;requirements.txt&#39;: &#39;install_requires&#39;,\r\n            &#39;install.txt&#39;: &#39;install_requires&#39;,\r\n            &#39;tests.txt&#39;: &#39;tests_require&#39;,\r\n            &#39;setup.txt&#39;: &#39;setup_requires&#39;,\r\n        }\r\n        ret = {v: [] for v in key_map.values()}\r\n        extras = ret[&#39;extras_require&#39;] = {}\r\n        all_reqs = set()\r\n\r\n        files = [glob.glob(pat) for pat in patterns]\r\n        files = itertools.chain(*files)\r\n\r\n        for full_fn in files:\r\n            # Parse\r\n            reqs = [\r\n                str(r.req)\r\n                for r in parse_requirements(full_fn, session=session)\r\n                # Must match env marker, eg:\r\n                #   yarl ; python_version &gt;= &#39;3.0&#39;\r\n                if r.match_markers()\r\n            ]\r\n            all_reqs.update(reqs)\r\n\r\n            # Add in the right section\r\n            fn = os.path.basename(full_fn)\r\n            key = key_map.get(fn)\r\n            if key:\r\n                ret[key].extend(reqs)\r\n            else:\r\n                # Remove extension, use as extras key\r\n                key, _ = os.path.splitext(fn)\r\n                extras[key] = reqs\r\n\r\n        if &#39;all&#39; not in extras:\r\n            extras[&#39;all&#39;] = list(all_reqs)\r\n\r\n        if combine:\r\n            extras[&#39;install&#39;] = ret[&#39;install_requires&#39;]\r\n            ret[&#39;install_requires&#39;] = list(all_reqs)\r\n\r\n        return ret"}, {"tags": [], "down_vote_count": 1, "creation_date": 1478784296, "answer_id": 40528759, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1478784296, "last_edit_date": 1495541903, "body_markdown": "Here is a complete hack (tested with `pip 9.0.1`) based on [Romain&#39;s answer](https://stackoverflow.com/a/16624700/239247) that parses `requirements.txt` and filters it according to current [environment markers](https://pip.pypa.io/en/stable/reference/pip_install/#requirement-specifiers):\r\n\r\n    from pip.req import parse_requirements\r\n    \r\n    requirements = []\r\n    for r in parse_requirements(&#39;requirements.txt&#39;, session=&#39;hack&#39;):\r\n        # check markers, such as\r\n        #\r\n        #     rope_py3k    ; python_version &gt;= &#39;3.0&#39;\r\n        #\r\n        if r.match_markers():\r\n            requirements.append(str(r.req))\r\n    \r\n    print(requirements)\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1481830939, "answer_id": 41172125, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1481830939, "body_markdown": "Yet another `parse_requirements` hack that also parses environment markers into `extras_require`:\r\n\r\n    from collections import defaultdict\r\n    from pip.req import parse_requirements\r\n    \r\n    requirements = []\r\n    extras = defaultdict(list)\r\n    for r in parse_requirements(&#39;requirements.txt&#39;, session=&#39;hack&#39;):\r\n        if r.markers:\r\n            extras[&#39;:&#39; + str(r.markers)].append(str(r.req))\r\n        else:\r\n            requirements.append(str(r.req))\r\n    \r\n    setup(\r\n        ...,\r\n        install_requires=requirements,\r\n        extras_require=extras\r\n    )\r\n\r\nIt should support both sdist and binary dists.\r\n\r\nAs stated by others, `parse_requirements` has several shortcomings, so this is not what you should do on public projects, but it may suffice for internal/personal projects."}, {"tags": [], "down_vote_count": 0, "creation_date": 1500577961, "answer_id": 45223392, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1500577961, "body_markdown": "Another possible solution...\r\n\r\n    def gather_requirements(top_path=None):\r\n        &quot;&quot;&quot;Captures requirements from repo.\r\n\r\n        Expected file format is: requirements[-_]&lt;optional-extras&gt;.txt\r\n\r\n        For example:\r\n\r\n            pip install -e .[foo]\r\n\r\n        Would require:\r\n\r\n            requirements-foo.txt\r\n\r\n            or\r\n\r\n            requirements_foo.txt\r\n\r\n        &quot;&quot;&quot;\r\n        from pip.download import PipSession\r\n        from pip.req import parse_requirements\r\n        import re\r\n\r\n        session = PipSession()\r\n        top_path = top_path or os.path.realpath(os.getcwd())\r\n        extras = {}\r\n        for filepath in tree(top_path):\r\n            filename = os.path.basename(filepath)\r\n            basename, ext = os.path.splitext(filename)\r\n            if ext == &#39;.txt&#39; and basename.startswith(&#39;requirements&#39;):\r\n                if filename == &#39;requirements.txt&#39;:\r\n                    extra_name = &#39;requirements&#39;\r\n                else:\r\n                    _, extra_name = re.split(r&#39;[-_]&#39;, basename, 1)\r\n                if extra_name:\r\n                    reqs = [str(ir.req) for ir in parse_requirements(filepath, session=session)]\r\n                    extras.setdefault(extra_name, []).extend(reqs)\r\n        all_reqs = set()\r\n        for key, values in extras.items():\r\n            all_reqs.update(values)\r\n        extras[&#39;all&#39;] = list(all_reqs)\r\n        return extras\r\n\r\nand then to use...\r\n\r\n    reqs = gather_requirements()\r\n    install_reqs = reqs.pop(&#39;requirements&#39;, [])\r\n    test_reqs = reqs.pop(&#39;test&#39;, [])\r\n    ...\r\n    setup(\r\n        ...\r\n        &#39;install_requires&#39;: install_reqs,\r\n        &#39;test_requires&#39;: test_reqs,\r\n        &#39;extras_require&#39;: reqs,\r\n        ...\r\n    )\r\n\r\n"}], "title": "Reference requirements.txt for the install_requires kwarg in setuptools setup.py file?", "view_count": 58710, "answer_count": 15, "code_snippet": ["<code>requirements.txt</code>", "<code>requirements.txt</code>", "<code>setup.py</code>", "<code>install_requires</code>", "<code>setuptools.setup</code>", "<code>requirements.txt</code>", "<code>guessit&gt;=0.5.2\ntvdb_api&gt;=1.8.2\nhachoir-metadata&gt;=1.3.3\nhachoir-core&gt;=1.3.3\nhachoir-parser&gt;=1.3.4\n</code>", "<code>install_requires</code>", "<code>requirements.txt</code>", "<code>#</code>", "<code>--requirement</code>", "<code>-r</code>", "<code>requirements.txt</code>", "<code>from pip.req import parse_requirements\n\n# parse_requirements() returns generator of pip.req.InstallRequirement objects\ninstall_reqs = parse_requirements(&lt;requirements_path&gt;)\n\n# reqs is a list of requirement\n# e.g. ['django==1.5.1', 'mezzanine==1.4.6']\nreqs = [str(ir.req) for ir in install_reqs]\n\nsetup(\n    ...\n    install_requires=reqs\n)\n</code>", "<code>parse_requirements</code>", "<code>pip.download.PipSession</code>", "<code>setup.py</code>", "<code>.</code>", "<code>requirements.txt</code>", "<code>requirements.txt</code>", "<code>pip 9.0.1</code>", "<code>install_reqs = parse_requirements('requirements.txt', session='hack')\n</code>", "<code>setup(..., dependency_links=[str(req_line.url) for req_line in parse_requirements(&lt;requirements_path&gt;)], ...)</code>", "<code>pip</code>", "<code>setup.py</code>", "<code>requirements.txt</code>", "<code>setup.py</code>", "<code>requirements.txt</code>", "<code>requirements.txt</code>", "<code>.</code>", "<code>requirements.txt</code>", "<code>setup.py</code>", "<code>install_requires</code>", "<code>setup.py</code>", "<code>requirements.txt</code>", "<code>requirements.txt</code>", "<code>setup.py</code>", "<code>setup.py</code>", "<code>pip freeze</code>", "<code>setup.py</code>", "<code>requirements.txt</code>", "<code>requirements.txt</code>", "<code>setup.py</code>", "<code>requirements.txt</code>", "<code>requirements.txt</code>", "<code>setup.py</code>", "<code>requirements.txt</code>", "<code>install_requires</code>", "<code>install_requires</code>", "<code>import os\nfrom setuptools import setup\n\nwith open('requirements.txt') as f:\n    required = f.read().splitlines()\n\nsetup(...\ninstall_requires=required,\n...)\n</code>", "<code>install_requires</code>", "<code>setup.py</code>", "<code>include requirements.txt</code>", "<code>MANIFEST.in</code>", "<code>setup.py</code>", "<code>pip freeze</code>", "<code>setup.py</code>", "<code>requirements.txt</code>", "<code>.\n</code>", "<code>setup.py</code>", "<code>pip install -r requirements.txt </code>", "<code>-e .</code>", "<code>requirements.txt</code>", "<code>setup.py</code>", "<code>setup.py</code>", "<code>requirements.txt</code>", "<code>deps/</code>", "<code># fetch specific dependencies\n--no-index\n--find-links deps/\n\n# install package\n# NOTE: -e . for editable mode\n.\n</code>", "<code>setup.py</code>", "<code>install_requires</code>", "<code>pip install my-package</code>", "<code>pip install my-package</code>", "<code>pip install -r my-package/requirements.txt</code>", "<code>requirements.txt</code>", "<code>from pip.req import parse_requirements\nfrom pip.download import PipSession\n\ninstall_reqs = parse_requirements(&lt;requirements_path&gt;, session=PipSession())\n\nreqs = [str(ir.req) for ir in install_reqs]\n\nsetup(\n    ...\n    install_requires=reqs\n    ....\n)\n</code>", "<code>parse_requirements</code>", "<code>setup.py</code>", "<code>requirements.txt</code>", "<code>setup.py</code>", "<code>-e .</code>", "<code>requirements.txt</code>", "<code>pip</code>", "<code>requirements.txt</code>", "<code>language: python\npython:\n  - \"2.7\"\n  - \"2.6\"\ninstall:\n  - pip install -q -e .\nscript:\n  - python runtests.py\n</code>", "<code>pip freeze</code>", "<code>import sys\n\nfrom os import path as p\n\ntry:\n    from setuptools import setup, find_packages\nexcept ImportError:\n    from distutils.core import setup, find_packages\n\n\ndef read(filename, parent=None):\n    parent = (parent or __file__)\n\n    try:\n        with open(p.join(p.dirname(parent), filename)) as f:\n            return f.read()\n    except IOError:\n        return ''\n\n\ndef parse_requirements(filename, parent=None):\n    parent = (parent or __file__)\n    filepath = p.join(p.dirname(parent), filename)\n    content = read(filename, parent)\n\n    for line_number, line in enumerate(content.splitlines(), 1):\n        candidate = line.strip()\n\n        if candidate.startswith('-r'):\n            for item in parse_requirements(candidate[2:].strip(), filepath):\n                yield item\n        else:\n            yield candidate\n\nsetup(\n...\n    install_requires=list(parse_requirements('requirements.txt'))\n)\n</code>", "<code>from pip.req import parse_requirements</code>", "<code>def parse_requirements(requirements):\n    with open(requirements) as f:\n        return [l.strip('\\n') for l in f if l.strip('\\n') and not l.startswith('#')]\n\nreqs = parse_requirements(&lt;requirements_path&gt;)\n\nsetup(\n    ...\n    install_requires=reqs,\n    ...\n)\n</code>", "<code>parse_requirements</code>", "<code>pip.req.parse_requirements</code>", "<code>from pip.req import parse_requirements  # tested with v.1.4.1\n\nreqs = '''\nexample_with_underscores\nexample-with-dashes\n'''\n\nwith open('requirements.txt', 'w') as f:\n    f.write(reqs)\n\nreq_deps = parse_requirements('requirements.txt')\nresult = [str(ir.req) for ir in req_deps if ir.req is not None]\nprint result\n</code>", "<code>['example-with-underscores', 'example-with-dashes']\n</code>", "<code>[ir.req.unsafe_name for ir in req_deps if ir.req is not None]</code>", "<code>from setuptools import setup, find_packages\nfrom pip.req import parse_requirements\nfrom pip.download import PipSession\nimport itertools\nimport glob\nimport os\n\n\ndef setup_requirements(patterns=['requirements.txt', 'requirements/*.txt', 'requirements/*.pip'], combine=True):\n    \"\"\"\n    Parse a glob of requirements and return a dictionary of setup() options.\n    Create a dictionary that holds your options to setup() and update it using this.\n    Pass that as kwargs into setup(), viola\n\n    Any files that are not a standard option name (ie install, tests, setup) are added to extras_require with their\n    basename minus ext. An extra key is added to extras_require: 'all', that contains all distinct reqs combined.\n\n    If you're running this for a Docker build, set `combine=True`.\n    This will set install_requires to all distinct reqs combined.\n\n    Example:\n\n    &gt;&gt;&gt; _conf = dict(\n    ...     name='mainline',\n    ...     version='0.0.1',\n    ...     description='Mainline',\n    ...     author='Trevor Joynson &lt;github@trevor.joynson,io&gt;',\n    ...     url='https://trevor.joynson.io',\n    ...     namespace_packages=['mainline'],\n    ...     packages=find_packages(),\n    ...     zip_safe=False,\n    ...     include_package_data=True,\n    ... )\n    ... _conf.update(setup_requirements())\n    ... setup(**_conf)\n\n    :param str pattern: Glob pattern to find requirements files\n    :param bool combine: Set True to set install_requires to extras_require['all']\n    :return dict: Dictionary of parsed setup() options\n    \"\"\"\n    session = PipSession()\n\n    # Handle setuptools insanity\n    key_map = {\n        'requirements.txt': 'install_requires',\n        'install.txt': 'install_requires',\n        'tests.txt': 'tests_require',\n        'setup.txt': 'setup_requires',\n    }\n    ret = {v: [] for v in key_map.values()}\n    extras = ret['extras_require'] = {}\n    all_reqs = set()\n\n    files = [glob.glob(pat) for pat in patterns]\n    files = itertools.chain(*files)\n\n    for full_fn in files:\n        # Parse\n        reqs = [\n            str(r.req)\n            for r in parse_requirements(full_fn, session=session)\n            # Must match env marker, eg:\n            #   yarl ; python_version &gt;= '3.0'\n            if r.match_markers()\n        ]\n        all_reqs.update(reqs)\n\n        # Add in the right section\n        fn = os.path.basename(full_fn)\n        key = key_map.get(fn)\n        if key:\n            ret[key].extend(reqs)\n        else:\n            # Remove extension, use as extras key\n            key, _ = os.path.splitext(fn)\n            extras[key] = reqs\n\n    if 'all' not in extras:\n        extras['all'] = list(all_reqs)\n\n    if combine:\n        extras['install'] = ret['install_requires']\n        ret['install_requires'] = list(all_reqs)\n\n    return ret\n</code>", "<code>def gather_requirements(top_path=None):\n    \"\"\"Captures requirements from repo.\n\n    Expected file format is: requirements[-_]&lt;optional-extras&gt;.txt\n\n    For example:\n\n        pip install -e .[foo]\n\n    Would require:\n\n        requirements-foo.txt\n\n        or\n\n        requirements_foo.txt\n\n    \"\"\"\n    from pip.download import PipSession\n    from pip.req import parse_requirements\n    import re\n\n    session = PipSession()\n    top_path = top_path or os.path.realpath(os.getcwd())\n    extras = {}\n    for filepath in tree(top_path):\n        filename = os.path.basename(filepath)\n        basename, ext = os.path.splitext(filename)\n        if ext == '.txt' and basename.startswith('requirements'):\n            if filename == 'requirements.txt':\n                extra_name = 'requirements'\n            else:\n                _, extra_name = re.split(r'[-_]', basename, 1)\n            if extra_name:\n                reqs = [str(ir.req) for ir in parse_requirements(filepath, session=session)]\n                extras.setdefault(extra_name, []).extend(reqs)\n    all_reqs = set()\n    for key, values in extras.items():\n        all_reqs.update(values)\n    extras['all'] = list(all_reqs)\n    return extras\n</code>", "<code>reqs = gather_requirements()\ninstall_reqs = reqs.pop('requirements', [])\ntest_reqs = reqs.pop('test', [])\n...\nsetup(\n    ...\n    'install_requires': install_reqs,\n    'test_requires': test_reqs,\n    'extras_require': reqs,\n    ...\n)\n</code>", "<code>pip 9.0.1</code>", "<code>requirements.txt</code>", "<code>from pip.req import parse_requirements\n\nrequirements = []\nfor r in parse_requirements('requirements.txt', session='hack'):\n    # check markers, such as\n    #\n    #     rope_py3k    ; python_version &gt;= '3.0'\n    #\n    if r.match_markers():\n        requirements.append(str(r.req))\n\nprint(requirements)\n</code>", "<code>r.match_markers()</code>", "<code>wheel environment</code>", "<code>bdist_wheel</code>", "<code>extras_require</code>", "<code>-1</code>", "<code>parse_requirements</code>", "<code>extras_require</code>", "<code>from collections import defaultdict\nfrom pip.req import parse_requirements\n\nrequirements = []\nextras = defaultdict(list)\nfor r in parse_requirements('requirements.txt', session='hack'):\n    if r.markers:\n        extras[':' + str(r.markers)].append(str(r.req))\n    else:\n        requirements.append(str(r.req))\n\nsetup(\n    ...,\n    install_requires=requirements,\n    extras_require=extras\n)\n</code>", "<code>parse_requirements</code>"], "path": "stack.django"}, {"tags": ["python", "installation"], "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1222189619, "answer_id": 122340, "path": "stack.django.answer", "score": 280, "up_vote_count": 282, "is_accepted": false, "last_activity_date": 1327555596, "last_edit_date": 1327555596, "body_markdown": "From [&quot;How to Install Django&quot; documentation][1] (though this is useful to more than just Django installation) - execute the following from the shell:\r\n\r\n    python -c &quot;from distutils.sysconfig import get_python_lib; print(get_python_lib())&quot;\r\n\r\nFormatted for readability (rather than use as a one-liner), that looks like the following:\r\n\r\n    from distutils.sysconfig import get_python_lib\r\n    print(get_python_lib())\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/topics/install/#remove-any-old-versions-of-django"}, {"tags": [], "down_vote_count": 0, "creation_date": 1222189794, "answer_id": 122360, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1222189794, "body_markdown": "    from distutils.sysconfig import get_python_lib\r\n    print get_python_lib()\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1222190042, "answer_id": 122377, "path": "stack.django.answer", "score": 21, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1222190042, "body_markdown": "As others have noted, `distutils.sysconfig` has the relevant settings:\r\n\r\n    import distutils.sysconfig\r\n    print distutils.sysconfig.get_python_lib()\r\n\r\n...though the default `site.py` does something a bit more crude, paraphrased below:\r\n\r\n    import sys, os\r\n    print os.sep.join([sys.prefix, &#39;lib&#39;, &#39;python&#39; + sys.version[:3], &#39;site-packages&#39;])\r\n\r\n(it also adds `${sys.prefix}/lib/site-python` and adds both paths for `sys.exec_prefix` as well, should that constant be different).\r\n\r\nThat said, what&#39;s the context? You shouldn&#39;t be messing with your `site-packages` directly; setuptools/distutils will work for installation, and your program may be running in a virtualenv where your pythonpath is completely user-local, so it shouldn&#39;t assume use of the system site-packages directly either."}, {"tags": [], "down_vote_count": 0, "creation_date": 1222190182, "answer_id": 122387, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1222190182, "body_markdown": "An additional note to the `get_python_lib` function mentioned already: on some platforms different directories are used for platform specific modules (eg: modules that require compilation).  If you pass `plat_specific=True` to the function you get the site packages for platform specific packages."}, {"tags": [], "down_vote_count": 0, "creation_date": 1257893368, "answer_id": 1711808, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1257893368, "body_markdown": "A side-note: The proposed solution (distutils.sysconfig.get_python_lib()) does not work when there is more than one site-packages directory (as [recommended by this article][1]). It will only return the main site-packages directory. Alas, I have no better solution either. Python doesn&#39;t seem to keep track of site-packages directories, just the packages within them.\r\n\r\n\r\n  [1]: http://pythonsimple.noucleus.net/python-install/python-site-packages-what-they-are-and-where-to-put-them"}, {"tags": [], "down_vote_count": 0, "creation_date": 1294283289, "answer_id": 4611382, "path": "stack.django.answer", "score": 94, "up_vote_count": 94, "is_accepted": false, "last_activity_date": 1294283289, "body_markdown": "*For Ubuntu*,\r\n\r\n    python -c &quot;from distutils.sysconfig import get_python_lib; print get_python_lib()&quot;\r\n...is not correct.\r\n\r\nIt will point you to `/usr/lib/pythonX.X/dist-packages`\r\n\r\nThis folder only contains packages your operating system has automatically installed for programs to run.\r\n\r\n*On ubuntu*, the site-packages folder that contains packages installed via setup_tools\\easy_install\\pip will be in `/usr/local/lib/pythonX.X/dist-packages`\r\n\r\nThe second folder is probably the more useful one if the use case is related to installation or reading source code.\r\n\r\nIf you do not use Ubuntu, you are probably safe copy-pasting the first code box into the terminal."}, {"tags": [], "down_vote_count": 0, "creation_date": 1298485930, "answer_id": 5095375, "path": "stack.django.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1333125415, "last_edit_date": 1333125415, "body_markdown": "Let&#39;s say you have installed the package &#39;django&#39;. import it and type in dir(django). It will show you, all the functions and attributes with that module. Type in the python interpreter - \r\n\r\n\r\n    &gt;&gt;&gt; import django\r\n    &gt;&gt;&gt; dir(django)\r\n    [&#39;VERSION&#39;, &#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__path__&#39;, &#39;get_version&#39;]\r\n    &gt;&gt;&gt; print django.__path__\r\n    [&#39;/Library/Python/2.6/site-packages/django&#39;]\r\n\r\nYou can do the same thing if you have installed mercurial.\r\n\r\nThis is for Snow Leopard. But I think it should work in general as well.\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1328496022, "answer_id": 9155056, "path": "stack.django.answer", "score": 14, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1328496022, "body_markdown": "All the answers (or: the same answer repeated over and over) are inadequate. What you want to do is this:\r\n\r\n    \r\n\r\n    from setuptools.command.easy_install import easy_install\r\n    class easy_install_default(easy_install):\r\n      &quot;&quot;&quot; class easy_install had problems with the fist parameter not being\r\n          an instance of Distribution, even though it was. This is due to\r\n          some import-related mess.\r\n          &quot;&quot;&quot;\r\n    \r\n      def __init__(self):\r\n        from distutils.dist import Distribution\r\n        dist = Distribution()\r\n        self.distribution = dist\r\n        self.initialize_options()\r\n        self._dry_run = None\r\n        self.verbose = dist.verbose\r\n        self.force = None\r\n        self.help = 0\r\n        self.finalized = 0\r\n    \r\n    e = easy_install_default()\r\n    import distutils.errors\r\n    try:\r\n      e.finalize_options()\r\n    except distutils.errors.DistutilsError:\r\n      pass\r\n    \r\n    print e.install_dir\r\n\r\nThe final line shows you the installation dir. Works on Ubuntu, whereas the above ones don&#39;t. Don&#39;t ask me about windows or other dists, but since it&#39;s the exact same dir that easy_install uses by default, it&#39;s probably correct everywhere where easy_install works (so, everywhere, even macs). Have fun. Note: original code has many swearwords in it."}, {"tags": [], "down_vote_count": 1, "creation_date": 1333123284, "answer_id": 9946505, "path": "stack.django.answer", "score": 9, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1333125382, "last_edit_date": 1333125382, "body_markdown": "This works for me.\r\nIt will get you both dist-packages and site-packages folders.\r\nIf the folder is not on Python&#39;s path, it won&#39;t be\r\ndoing you much good anyway.\r\n\r\n    import sys; \r\n    print [f for f in sys.path if f.endswith(&#39;packages&#39;)]\r\n\r\nOutput (Ubuntu installation):\r\n\r\n    [&#39;/home/username/.local/lib/python2.7/site-packages&#39;,\r\n     &#39;/usr/local/lib/python2.7/dist-packages&#39;,\r\n     &#39;/usr/lib/python2.7/dist-packages&#39;]\r\n\r\n"}, {"tags": [], "down_vote_count": 4, "creation_date": 1337645335, "answer_id": 10694208, "path": "stack.django.answer", "score": 58, "up_vote_count": 62, "is_accepted": false, "last_activity_date": 1337661262, "last_edit_date": 1337661262, "body_markdown": "This is what worked for me:\r\n\r\n    python -m site --user-site"}, {"tags": [], "down_vote_count": 5, "creation_date": 1350548385, "answer_id": 12950101, "path": "stack.django.answer", "score": 585, "up_vote_count": 590, "is_accepted": false, "last_activity_date": 1440856218, "last_edit_date": 1440856218, "body_markdown": "    &gt;&gt;&gt; import site; site.getsitepackages()\r\n    [&#39;/usr/local/lib/python2.7/dist-packages&#39;, &#39;/usr/lib/python2.7/dist-packages&#39;]\r\n\r\n(or just first item with `site.getsitepackages()[0]`)\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1375977917, "answer_id": 18130809, "path": "stack.django.answer", "score": 13, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1375977917, "body_markdown": "The native system packages installed with python installation can be found at :\r\n&gt;/usr/lib/python2.7/dist-packages/\r\n\r\nby using this small code :\r\n\r\n    from distutils.sysconfig import get_python_lib\r\n    print get_python_lib()\r\nHowever, the list of packages installed via `pip` can be found at :\r\n&gt;/usr/local/bin/\r\n\r\nOr one can simply write the following command to list all paths where python packages are.\r\n    \r\n    &gt;&gt;&gt; import site; site.getsitepackages()\r\n    [&#39;/usr/local/lib/python2.7/dist-packages&#39;, &#39;/usr/lib/python2.7/dist-packages&#39;]"}, {"tags": [], "down_vote_count": 1, "creation_date": 1426434220, "answer_id": 29062571, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1496388730, "last_edit_date": 1496388730, "body_markdown": "This should work on all distributions in and out of virtual environment due to it&#39;s &quot;low-tech&quot; nature. The os module always resides in the parent directory of &#39;site-packages&#39;\r\n\r\n    import os; print(os.path.dirname(os.__file__) + &#39;/site-packages&#39;)\r\n\r\nTo change dir to the site-packages dir I use the following alias (on *nix systems):\r\n\r\n    alias cdsp=&#39;cd $(python -c &quot;import os; print(os.path.dirname(os.__file__))&quot;); cd site-packages&#39;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1468833167, "answer_id": 38432782, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1468833167, "body_markdown": "Answer to old question. But use ipython for this. \r\n\r\n    pip install ipython\r\n    ipython \r\n    import imaplib\r\n    imaplib?\r\n\r\nThis will give the following output about imaplib package -\r\n\r\n    Type:        module\r\n    String form: &lt;module &#39;imaplib&#39; from &#39;/usr/lib/python2.7/imaplib.py&#39;&gt;\r\n    File:        /usr/lib/python2.7/imaplib.py\r\n    Docstring:  \r\n    IMAP4 client.\r\n    \r\n    Based on RFC 2060.\r\n    \r\n    Public class:           IMAP4\r\n    Public variable:        Debug\r\n    Public functions:       Internaldate2tuple\r\n                            Int2AP\r\n                            ParseFlags\r\n                            Time2Internaldate"}, {"tags": [], "down_vote_count": 0, "creation_date": 1504689840, "answer_id": 46071447, "path": "stack.django.answer", "score": 79, "up_vote_count": 79, "is_accepted": true, "last_activity_date": 1504689840, "body_markdown": "There are two types of site-packages directories, *global* and *per user*.\r\n\r\n1. **Global** site-packages (&quot;[dist-packages](https://stackoverflow.com/questions/9387928/whats-the-difference-between-dist-packages-and-site-packages)&quot;) directories are listed in `sys.path` when you run:\r\n\r\n        python -m site\r\n\r\n    For a more concise list run `getsitepackages` from the [site module](https://docs.python.org/3.5/library/site.html#site.getsitepackages) in Python code:\r\n\r\n        python -c &quot;import site; print(site.getsitepackages())&quot;\r\n\r\n   *Note:* With virtualenvs [getsitepackages is not available](https://github.com/pypa/virtualenv/issues/228), `sys.path` from above will list the virtualenv&#39;s site-packages directory correctly, though.\r\n\r\n2. The **per user** site-packages directory ([PEP 370](https://www.python.org/dev/peps/pep-0370/)) is where Python installs your local packages:\r\n\r\n        python -m site --user-site\r\n\r\n   If this points to a non-existing directory check the exit status of Python and see `python -m site --help` for explanations."}, {"tags": [], "down_vote_count": 0, "creation_date": 1513417765, "answer_id": 47844391, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1513417765, "body_markdown": "I had to do something slightly different for a project I was working on: find the *relative* site-packages directory relative to the base install prefix.  If the site-packages folder was in `/usr/lib/python2.7/site-packages`, I wanted the `/lib/python2.7/site-packages` part.  I have, in fact, encountered systems where `site-packages` was in `/usr/lib64`, and the accepted answer did NOT work on those systems. \r\n\r\nSimilar to cheater&#39;s answer, my solution peeks deep into the guts of Distutils, to find the path that actually gets passed around inside `setup.py`.  It was such a pain to figure out that I don&#39;t want anyone to ever have to figure this out again.\r\n\r\n    import sys\r\n    import os\r\n    from distutils.command.install import INSTALL_SCHEMES\r\n\r\n    if os.name == &#39;nt&#39;:\r\n        scheme_key = &#39;nt&#39;\r\n    else:\r\n        scheme_key = &#39;unix_prefix&#39;\r\n\r\n    print(INSTALL_SCHEMES[scheme_key][&#39;purelib&#39;].replace(&#39;$py_version_short&#39;, (str.split(sys.version))[0][0:3]).replace(&#39;$base&#39;, &#39;&#39;))\r\n\r\nThat should print something like `/Lib/site-packages` or `/lib/python3.6/site-packages`."}], "creation_date": 1222189483, "body_markdown": "How do I find the location of my site-packages directory?", "title": "How do I find the location of my Python site-packages directory?", "view_count": 477897, "up_vote_count": 590, "answer_count": 16, "link": "https://stackoverflow.com/questions/122327/how-do-i-find-the-location-of-my-python-site-packages-directory", "code_snippet": ["<code>pip show &lt;package name&gt;</code>", "<code>sys.path</code>", "<code>python -m site\n</code>", "<code>getsitepackages</code>", "<code>python -c \"import site; print(site.getsitepackages())\"\n</code>", "<code>sys.path</code>", "<code>python -m site --user-site\n</code>", "<code>python -m site --help</code>", "<code>python -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\"</code>", "<code>&gt;&gt;&gt; import site; site.getsitepackages()\n['/usr/local/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages']\n</code>", "<code>site.getsitepackages()[0]</code>", "<code>hasattr(sys,'real_prefix')</code>", "<code>[p for p in sys.path if p.endswith('site-packages')][-1]</code>", "<code>[-1]</code>", "<code>python -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\"\n</code>", "<code>from distutils.sysconfig import get_python_lib\nprint(get_python_lib())\n</code>", "<code>cdsitepackages</code>", "<code>/usr/lib/python3/dist-packages</code>", "<code>/usr/lib/python3.5/dist-packages</code>", "<code>python -c \"from distutils.sysconfig import get_python_lib; print get_python_lib()\"\n</code>", "<code>/usr/lib/pythonX.X/dist-packages</code>", "<code>/usr/local/lib/pythonX.X/dist-packages</code>", "<code>module.__file__</code>", "<code>'/usr/lib/pythonX.X/dist-packages' in site.getsitepackages()</code>", "<code>/usr/local/...</code>", "<code>/usr/local</code>", "<code>sudo pip</code>", "<code>sudo pip</code>", "<code>sudo pip</code>", "<code>sudo apt</code>", "<code>sudo pip</code>", "<code>virtualenv</code>", "<code>dist-packages</code>", "<code>python -m site --user-site\n</code>", "<code>~/.local/lib/python2.7/site-packages</code>", "<code>virtualenv</code>", "<code>distutils.sysconfig</code>", "<code>import distutils.sysconfig\nprint distutils.sysconfig.get_python_lib()\n</code>", "<code>site.py</code>", "<code>import sys, os\nprint os.sep.join([sys.prefix, 'lib', 'python' + sys.version[:3], 'site-packages'])\n</code>", "<code>${sys.prefix}/lib/site-python</code>", "<code>sys.exec_prefix</code>", "<code>site-packages</code>", "<code>python2</code>", "<code>python3</code>", "<code>python3</code>", "<code>&gt;&gt;&gt; import django\n&gt;&gt;&gt; dir(django)\n['VERSION', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__', 'get_version']\n&gt;&gt;&gt; print django.__path__\n['/Library/Python/2.6/site-packages/django']\n</code>", "<code>from setuptools.command.easy_install import easy_install\nclass easy_install_default(easy_install):\n  \"\"\" class easy_install had problems with the fist parameter not being\n      an instance of Distribution, even though it was. This is due to\n      some import-related mess.\n      \"\"\"\n\n  def __init__(self):\n    from distutils.dist import Distribution\n    dist = Distribution()\n    self.distribution = dist\n    self.initialize_options()\n    self._dry_run = None\n    self.verbose = dist.verbose\n    self.force = None\n    self.help = 0\n    self.finalized = 0\n\ne = easy_install_default()\nimport distutils.errors\ntry:\n  e.finalize_options()\nexcept distutils.errors.DistutilsError:\n  pass\n\nprint e.install_dir\n</code>", "<code>easy_install</code>", "<code>from distutils.sysconfig import get_python_lib\nprint get_python_lib()\n</code>", "<code>pip</code>", "<code>&gt;&gt;&gt; import site; site.getsitepackages()\n['/usr/local/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages']\n</code>", "<code>get_python_lib()</code>", "<code>import sys; \nprint [f for f in sys.path if f.endswith('packages')]\n</code>", "<code>['/home/username/.local/lib/python2.7/site-packages',\n '/usr/local/lib/python2.7/dist-packages',\n '/usr/lib/python2.7/dist-packages']\n</code>", "<code>python2</code>", "<code>get_python_lib</code>", "<code>plat_specific=True</code>", "<code>from distutils.sysconfig import get_python_lib\nprint get_python_lib()\n</code>", "<code>import os; print(os.path.dirname(os.__file__) + '/site-packages')\n</code>", "<code>alias cdsp='cd $(python -c \"import os; print(os.path.dirname(os.__file__))\"); cd site-packages'\n</code>", "<code>pip install ipython\nipython \nimport imaplib\nimaplib?\n</code>", "<code>Type:        module\nString form: &lt;module 'imaplib' from '/usr/lib/python2.7/imaplib.py'&gt;\nFile:        /usr/lib/python2.7/imaplib.py\nDocstring:  \nIMAP4 client.\n\nBased on RFC 2060.\n\nPublic class:           IMAP4\nPublic variable:        Debug\nPublic functions:       Internaldate2tuple\n                        Int2AP\n                        ParseFlags\n                        Time2Internaldate\n</code>", "<code>/usr/lib/python2.7/site-packages</code>", "<code>/lib/python2.7/site-packages</code>", "<code>site-packages</code>", "<code>/usr/lib64</code>", "<code>setup.py</code>", "<code>import sys\nimport os\nfrom distutils.command.install import INSTALL_SCHEMES\n\nif os.name == 'nt':\n    scheme_key = 'nt'\nelse:\n    scheme_key = 'unix_prefix'\n\nprint(INSTALL_SCHEMES[scheme_key]['purelib'].replace('$py_version_short', (str.split(sys.version))[0][0:3]).replace('$base', ''))\n</code>", "<code>/Lib/site-packages</code>", "<code>/lib/python3.6/site-packages</code>"], "path": "stack.django"}, {"tags": ["django", "django-models", "django-queryset", "filter", "null"], "creation_date": 1241922410, "body_markdown": "I have first_name, last_name &amp; alias (optional) which I need to search for. So, I need a query to give me all the names that have an alias set.\r\n\r\nOnly if I could do:\r\n\r\n    Name.objects.filter(alias!=&quot;&quot;)\r\n\r\nSo, what is the equivalent to the above?\r\n", "last_edit_date": 1385247932, "up_vote_count": 318, "link": "https://stackoverflow.com/questions/844556/filtering-for-empty-or-null-names-in-a-queryset", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1241923297, "answer_id": 844572, "path": "stack.django.answer", "score": 611, "up_vote_count": 611, "is_accepted": true, "last_activity_date": 1503004452, "last_edit_date": 1503004452, "body_markdown": "You could do this:\r\n\r\n    Name.objects.exclude(alias__isnull=True)\r\n\r\nIf you need to exclude null values *and* empty strings, the preferred way to do so is to chain together the conditions like so:\r\n\r\n    Name.objects.exclude(alias__isnull=True).exclude(alias__exact=&#39;&#39;)\r\n\r\nChaining these methods together basically checks each condition independently: in the above example, we exclude rows where `alias` is either null *or* an empty string, so you get all `Name` objects that have a not-null, not-empty `alias` field. The generated SQL would look something like:\r\n\r\n    SELECT * FROM Name WHERE alias IS NOT NULL AND alias != &quot;&quot;\r\n\r\nYou can also pass multiple arguments to a single call to `exclude`, which would ensure that only objects that meet *every* condition get excluded:\r\n\r\n    Name.objects.exclude(some_field=True, other_field=True)\r\n\r\nHere, rows in which `some_field` *and* `other_field` are true get excluded, so we get all rows where both fields are not true. The generated SQL code would look a little like this:\r\n\r\n    SELECT * FROM Name WHERE NOT (some_field = TRUE AND other_field = TRUE)\r\n\r\nAlternatively, if your logic is more complex than that, you could use Django&#39;s [Q objects](https://docs.djangoproject.com/en/dev/ref/models/querysets/#q-objects):\r\n\r\n    from django.db.models import Q\r\n    Name.objects.exclude(Q(alias__isnull=True) | Q(alias__exact=&#39;&#39;))\r\n\r\nFor more info see [this page](https://docs.djangoproject.com/en/dev/topics/db/queries/) and [this page](https://docs.djangoproject.com/en/dev/ref/models/querysets) in the Django docs.\r\n\r\n&lt;sub&gt;As an aside: My SQL examples are just an analogy--the actual generated SQL code will probably look different. You&#39;ll get a deeper understanding of how Django queries work by actually looking at the SQL they generate.&lt;/sub&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1244128518, "answer_id": 951203, "path": "stack.django.answer", "score": 31, "up_vote_count": 31, "is_accepted": false, "last_activity_date": 1411572678, "last_edit_date": 1411572678, "body_markdown": "Firstly, the Django docs strongly recommend not using NULL values for string-based fields such as CharField or TextField. Read the documentation for the explanation:\r\n\r\nhttps://docs.djangoproject.com/en/dev/ref/models/fields/#null\r\n\r\nSolution:\r\nYou can also chain together methods on QuerySets, I think. Try this:\r\n\r\n    Name.objects.exclude(alias__isnull=True).exclude(alias=&quot;&quot;)\r\n\r\nThat should give you the set you&#39;re looking for."}, {"tags": [], "down_vote_count": 0, "creation_date": 1298452446, "answer_id": 5088904, "path": "stack.django.answer", "score": 28, "up_vote_count": 28, "is_accepted": false, "last_activity_date": 1298452446, "body_markdown": "\r\n    Name.objects.filter(alias__gt=&#39;&#39;,alias__isnull=False)\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1457265741, "answer_id": 35826615, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1457265741, "body_markdown": "From Django 1.8,\r\n\r\n    from django.db.models.functions import Length\r\n\r\n    Name.objects.annotate(alias_length=Length(&#39;alias&#39;)).filter(alias_length__gt=0)\r\n"}], "title": "Filtering for empty or NULL names in a queryset", "view_count": 222715, "answer_count": 4, "code_snippet": ["<code>Name.objects.filter(alias!=\"\")\n</code>", "<code>Name.objects.exclude(alias__isnull=True)\n</code>", "<code>Name.objects.exclude(alias__isnull=True).exclude(alias__exact='')\n</code>", "<code>alias</code>", "<code>Name</code>", "<code>alias</code>", "<code>SELECT * FROM Name WHERE alias IS NOT NULL AND alias != \"\"\n</code>", "<code>exclude</code>", "<code>Name.objects.exclude(some_field=True, other_field=True)\n</code>", "<code>some_field</code>", "<code>other_field</code>", "<code>SELECT * FROM Name WHERE NOT (some_field = TRUE AND other_field = TRUE)\n</code>", "<code>from django.db.models import Q\nName.objects.exclude(Q(alias__isnull=True) | Q(alias__exact=''))\n</code>", "<code>OR</code>", "<code>AND</code>", "<code>exclude</code>", "<code>filter</code>", "<code>OR</code>", "<code>OR</code>", "<code>NOT (A AND B)</code>", "<code>NOT A OR NOT B</code>", "<code>AND</code>", "<code>OR</code>", "<code>exclude</code>", "<code>THEN</code>", "<code>exclude(A) THEN exclude(B)</code>", "<code>AND</code>", "<code>OR</code>", "<code>Name.objects.exclude(alias__isnull=True).exclude(alias=\"\")\n</code>", "<code>Name.objects.filter(alias__gt='',alias__isnull=False)\n</code>", "<code>alias__isnull=False</code>", "<code>Null</code>", "<code>from django.db.models.functions import Length\n\nName.objects.annotate(alias_length=Length('alias')).filter(alias_length__gt=0)\n</code>"], "path": "stack.django"}, {"tags": ["python", "directory", "django-views", "getcwd"], "creation_date": 1297178088, "body_markdown": "Consider the following Python code:\r\n\r\n    import os\r\n    print os.getcwd()\r\n\r\nI use `os.getcwd()` to [get the script file&#39;s directory location][1]. When I run the script from the command line it gives me the correct path whereas when I run it from a script run by code in a Django view it prints `/`.\r\n\r\nHow can I get the path to the script from within a script run by a Django view?\r\n\r\n**UPDATE:**&lt;br&gt;\r\nSumming up the answers thus far - `os.getcwd()` and `os.path.abspath()` both give the current working directory which may or may not be the directory where the script resides. In my web host setup &lt;code&gt;`__file__`&lt;/code&gt; gives only the filename without the path.\r\n\r\nIsn&#39;t there any way in Python to (always) be able to receive the path in which the script resides?\r\n\r\n\r\n\r\n  [1]: http://www.faqs.org/docs/diveintopython/regression_path.html", "last_edit_date": 1426407477, "up_vote_count": 326, "link": "https://stackoverflow.com/questions/4934806/how-can-i-find-scripts-directory-with-python", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1297181206, "answer_id": 4935368, "path": "stack.django.answer", "score": 3, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1297181206, "body_markdown": "Use &lt;code&gt;os.path.abspath(&#39;&#39;)&lt;/code&gt;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1297234886, "answer_id": 4942162, "path": "stack.django.answer", "score": 12, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1297247753, "last_edit_date": 1297247753, "body_markdown": "    import os,sys\r\n    # Store current working directory\r\n    pwd = os.path.dirname(__file__)\r\n    # Append current directory to the python path\r\n    sys.path.append(pwd)"}, {"tags": [], "down_vote_count": 2, "creation_date": 1297246687, "answer_id": 4943474, "path": "stack.django.answer", "score": 104, "up_vote_count": 106, "is_accepted": false, "last_activity_date": 1476052709, "last_edit_date": 1476052709, "body_markdown": "I use:\r\n\r\n    import os\r\n    import sys\r\n\r\n    def get_script_path():\r\n        return os.path.dirname(os.path.realpath(sys.argv[0]))\r\n\r\nAs aiham points out in a comment, you can define this function in a module and use it in different scripts. "}, {"tags": [], "down_vote_count": 2, "creation_date": 1301413418, "answer_id": 5475224, "path": "stack.django.answer", "score": 91, "up_vote_count": 93, "is_accepted": false, "last_activity_date": 1476052782, "last_edit_date": 1476052782, "body_markdown": "Try `sys.path[0]`.\r\n\r\nTo quote from the Python docs:\r\n\r\n&gt;As initialized upon program startup, the first item of this list, `path[0]`, is the directory containing the script that was used to invoke the Python interpreter. If the script directory is not available (e.g. if the interpreter is invoked interactively or if the script is read from standard input), `path[0]` is the empty string, which directs Python to search modules in the current directory first. Notice that the script directory is inserted before the entries inserted as a result of `PYTHONPATH`.\r\n\r\nSource: https://docs.python.org/library/sys.html#sys.path"}, {"tags": [], "down_vote_count": 0, "creation_date": 1316533108, "answer_id": 7487845, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1480401690, "last_edit_date": 1495535497, "body_markdown": "This worked for me (and I found it via the [this stackoverflow question][1])\r\n\r\n    os.path.realpath(__file__)\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/247770/retrieving-python-module-path"}, {"tags": [], "down_vote_count": 1, "creation_date": 1321980462, "answer_id": 8230472, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1321980462, "body_markdown": "    import os\r\n    exec_filepath = os.path.realpath(__file__)\r\n    exec_dirpath = exec_filepath[0:len(exec_filepath)-len(os.path.basename(__file__))]"}, {"tags": [], "down_vote_count": 0, "creation_date": 1328222523, "answer_id": 9121110, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1328222523, "body_markdown": "\r\n\r\n    import os\r\n    script_dir = os.path.dirname(os.path.realpath(__file__)) + os.sep"}, {"tags": [], "down_vote_count": 2, "creation_date": 1329667835, "answer_id": 9350788, "path": "stack.django.answer", "score": 507, "up_vote_count": 509, "is_accepted": true, "last_activity_date": 1478938074, "last_edit_date": 1478938074, "body_markdown": "You need to call `os.path.realpath` on `__file__`, so that when `__file__` is a filename without the path you still get the dir path:\r\n\r\n    import os\r\n    print(os.path.dirname(os.path.realpath(__file__)))"}, {"tags": [], "down_vote_count": 0, "creation_date": 1338083965, "answer_id": 10771136, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1338083965, "body_markdown": "This code:\r\n\r\n    import os\r\n    dn = os.path.dirname(os.path.realpath(__file__))\r\n\r\nsets &quot;dn&quot; to the name of the directory containing the currently executing script. This code:\r\n\r\n    fn = os.path.join(dn,&quot;vcb.init&quot;)\r\n    fp = open(fn,&quot;r&quot;)\r\n\r\nsets &quot;fn&quot; to &quot;script_dir/vcb.init&quot; (in a platform independent manner) and opens\r\nthat file for reading by the currently executing script.\r\n\r\nNote that &quot;the currently executing script&quot; is somewhat ambiguous. If your whole program consists of 1 script, then that&#39;s the currently executing script and the &quot;sys.path[0]&quot; solution works fine. But if your app consists of script A, which imports some package &quot;P&quot; and then calls script &quot;B&quot;, then &quot;P.B&quot; is currently executing. If you need to get the directory containing &quot;P.B&quot;, you want the &quot;`os.path.realpath(__file__)`&quot; solution.\r\n\r\n&quot;`__file__`&quot; just gives the name of the currently executing (top-of-stack) script: &quot;x.py&quot;. It doesn&#39;t\r\ngive any path info. It&#39;s the &quot;os.path.realpath&quot; call that does the real work.\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1344114710, "answer_id": 11812040, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1442665055, "last_edit_date": 1442665055, "body_markdown": "This is a pretty old thread but I&#39;ve been having this problem when trying to save files into the current directory the script is in when running a python script from a cron job. getcwd() and a lot of the other path come up with your home directory.\r\n\r\nto get an absolute path to the script i used\r\n\r\n`directory =  os.path.abspath(os.path.dirname(__file__))`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1407952670, "answer_id": 25293023, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1407952670, "body_markdown": "Here&#39;s what I ended up with. This works for me if I import my script in the interpreter, and also if I execute it as a script:\r\n\r\n    import os\r\n    import sys\r\n    \r\n    # Returns the directory the current script (or interpreter) is running in\r\n    def get_script_directory():\r\n        path = os.path.realpath(sys.argv[0])\r\n        if os.path.isdir(path):\r\n            return path\r\n        else:\r\n            return os.path.dirname(path)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1411220675, "answer_id": 25949428, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1411225805, "last_edit_date": 1411225805, "body_markdown": "Try this:\r\n\r\n    def get_script_path(for_file = None):\r\n\t    path = os.path.dirname(os.path.realpath(sys.argv[0] or &#39;something&#39;))\r\n\t    return path if not for_file else os.path.join(path, for_file)"}], "title": "How can I find script&#39;s directory with Python?", "view_count": 263218, "answer_count": 12, "code_snippet": ["<code>import os\nprint os.getcwd()\n</code>", "<code>os.getcwd()</code>", "<code>/</code>", "<code>os.getcwd()</code>", "<code>os.path.abspath()</code>", "<code><code>__file__</code></code>", "<code>__file__</code>", "<code>getcwd</code>", "<code>argv[0]</code>", "<code>dirname</code>", "<code>abspath</code>", "<code>os.chdir</code>", "<code>__file__</code>", "<code>__main__</code>", "<code>os.path.realpath</code>", "<code>__file__</code>", "<code>__file__</code>", "<code>import os\nprint(os.path.dirname(os.path.realpath(__file__)))\n</code>", "<code>NameError: name '__file__' is not defined</code>", "<code>python -c 'import os; print os.path.dirname(os.path.realpath(__file__))'</code>", "<code>__file__</code>", "<code>os.path.dirname(os.path.realpath(__file__)) == sys.path[0]</code>", "<code>import os\nimport sys\n\ndef get_script_path():\n    return os.path.dirname(os.path.realpath(sys.argv[0]))\n</code>", "<code>__file__</code>", "<code>sys.path[0]</code>", "<code>path[0]</code>", "<code>path[0]</code>", "<code>PYTHONPATH</code>", "<code>/baz.py</code>", "<code>/foo/bar.py</code>", "<code>/foo</code>", "<code>/</code>", "<code>import os\ndn = os.path.dirname(os.path.realpath(__file__))\n</code>", "<code>fn = os.path.join(dn,\"vcb.init\")\nfp = open(fn,\"r\")\n</code>", "<code>os.path.realpath(__file__)</code>", "<code>__file__</code>", "<code>import os,sys\n# Store current working directory\npwd = os.path.dirname(__file__)\n# Append current directory to the python path\nsys.path.append(pwd)\n</code>", "<code>import os\nscript_dir = os.path.dirname(os.path.realpath(__file__)) + os.sep\n</code>", "<code>os.path.realpath(__file__)\n</code>", "<code>os.path.abspath('')</code>", "<code>import os\nimport sys\n\n# Returns the directory the current script (or interpreter) is running in\ndef get_script_directory():\n    path = os.path.realpath(sys.argv[0])\n    if os.path.isdir(path):\n        return path\n    else:\n        return os.path.dirname(path)\n</code>", "<code>directory =  os.path.abspath(os.path.dirname(__file__))</code>", "<code>def get_script_path(for_file = None):\n    path = os.path.dirname(os.path.realpath(sys.argv[0] or 'something'))\n    return path if not for_file else os.path.join(path, for_file)\n</code>", "<code>import os\nexec_filepath = os.path.realpath(__file__)\nexec_dirpath = exec_filepath[0:len(exec_filepath)-len(os.path.basename(__file__))]\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "web-applications", "scalability"], "creation_date": 1242796075, "body_markdown": "I&#39;m building a web application with Django. The reasons I chose Django were:\r\n\r\n - I wanted to work with free/open-source tools.\r\n - I like Python and feel it&#39;s a &quot;long term&quot; language, whereas regarding Ruby I wasn&#39;t sure, and PHP seemed like a huge hassle to learn.\r\n - I&#39;m building a prototype for an idea and wasn&#39;t thinking too much about the future. Development speed was the main factor, and I already knew Python.\r\n - I knew the migration to Google App Engine would be easier should I choose to do so in the future.\r\n - I heard Django was &quot;nice&quot;.\r\n\r\nNow that I&#39;m getting closer to thinking about publishing my work, I start being concerned about scale. The only information I found about the scaling capabilities of Django is provided by the Django team (I&#39;m not saying anything to disregard them, but this is clearly not objective information...).\r\n\r\nMy questions:\r\n\r\n - What&#39;s the &quot;largest&quot; site that&#39;s built on Django today? (I measure size mostly by user traffic)\r\n - Can Django deal with 100,000 users daily, each visiting the site for a couple of hours?\r\n - Could a site like Stack Overflow run on Django?", "last_edit_date": 1450508930, "up_vote_count": 836, "link": "https://stackoverflow.com/questions/886221/does-django-scale", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1242796950, "answer_id": 886268, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1264886659, "last_edit_date": 1264886659, "body_markdown": "My experience with Django is minimal but I do remember in The Django Book they have a chapter where they interview people running some of the larger Django applications.  [Here is a link.][1]  I guess it could provide some insights.\r\n\r\nIt says curse.com is one of the largest Django applications with around 60-90 million page views in a month.\r\n\r\n  [1]: http://www.djangobook.com/en/1.0/appendixA/\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1242796957, "answer_id": 886269, "path": "stack.django.answer", "score": 41, "up_vote_count": 42, "is_accepted": false, "last_activity_date": 1242796957, "body_markdown": "The largest django site I know of is the [Washington Post][1], which would certainly indicate that it **can** scale well.\r\n\r\nGood design decisions probably have a bigger performance impact than anything else. Twitter is often cited as a site which embodies the performance issues with another dynamic interpreted language based web framework, Ruby on Rails - yet Twitter engineers have stated that the framework isn&#39;t as much an issue as some of the database design choices they made early on. \r\n\r\nDjango works very nicely with memcached and provides some classes for managing the cache, which is where you would resolve the majority of your performance issues. What you deliver on the wire is almost more important than your backend in reality - using a tool like yslow is critical for a high performance web application. You can always throw more hardware at your backend, but you can&#39;t change your users bandwidth.\r\n\r\n\r\n  [1]: http://www.washingtonpost.com/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1242797015, "answer_id": 886272, "path": "stack.django.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1264887612, "last_edit_date": 1264887612, "body_markdown": "I&#39;m sure you&#39;re looking for a more solid answer, but the most obvious objective validation I can think of is that Google pushes Django for use with its [App Engine][1] framework. If anybody knows about and deals with scalability on a regular basis, it&#39;s Google. From what I&#39;ve read, the most limiting factor seems to be the database back-end, which is why Google uses their own...\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Google_App_Engine\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1242797062, "answer_id": 886276, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1291323321, "last_edit_date": 1291323321, "body_markdown": "Yes it can. It could be Django with Python or Ruby on Rails. It will still scale. \r\n\r\nThere are few different techniques. First, caching is not scaling. You could have several application servers balanced with nginx as the front in addition to hardware balancer(s).\r\nTo scale on the database side you can go pretty far with read slave in MySQL / PostgreSQL if you go the RDBMS way.\r\n\r\nSome good examples of heavy traffic websites in Django could be:\r\n\r\n * [Pownce][1] when they were still there.\r\n * Discus (generic shared comments manager)\r\n * All the newspaper related websites: Washington Post and others.\r\n\r\nYou can feel safe.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Pownce\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1242797436, "answer_id": 886294, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1264886228, "last_edit_date": 1264886228, "body_markdown": "If you haven&#39;t already, I recommend reading the section on scaling in The Django Book:\r\n\r\nhttp://www.djangobook.com/en/1.0/chapter20/\r\n\r\nOr the newer version:\r\n\r\nhttp://www.djangobook.com/en/2.0/chapter12/\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1242797726, "answer_id": 886309, "path": "stack.django.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1242797726, "body_markdown": "Note that if you&#39;re expecting 100K users per day, that are active for hours at a time (meaning max of 20K+ concurrent users), you&#39;re going to need A LOT of servers.  SO has ~15,000 registered users, and most of them are probably not active daily.  While the bulk of traffic comes from unregistered users, I&#39;m guessing that very few of them stay on the site more than a couple minutes (i.e. they follow google search results then leave).  \r\n\r\nFor that volume, expect at least 30 servers ... which is still a rather heavy 1,000 concurrent users per server.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1242800848, "answer_id": 886432, "path": "stack.django.answer", "score": 26, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1242800848, "body_markdown": "I was at the EuroDjangoCon conference the other week, and this was the subject of a couple of talks - including from the founders of what was the largest Django-based site, Pownce (slides from one talk [here][1]). The main message is that it&#39;s not Django you have to worry about, but things like proper caching, load balancing, database optimisation, etc.\r\n\r\nDjango actually has hooks for most of those things - caching, in particular, is made very easy.\r\n\r\n  [1]: http://immike.net/files/scaling_django.pdf\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1242801226, "answer_id": 886448, "path": "stack.django.answer", "score": 73, "up_vote_count": 73, "is_accepted": false, "last_activity_date": 1242801226, "body_markdown": "Playing devil&#39;s advocate a little bit:\r\n\r\nYou should check the [DjangoCon 2008 Keynote](http://www.youtube.com/watch?v=i6Fr65PFqfk), delivered by [Cal Henderson](http://en.wikipedia.org/wiki/Cal_Henderson), titled &quot;Why I hate Django&quot; where he pretty much goes over everything Django is missing that you might want to do in a high traffic website. At the end of the day you have to take this all with an open mind because it _is_ perfectly possible to write Django apps that scale, but I thought it was a good presentation and relevant to your question."}, {"tags": [], "down_vote_count": 1, "creation_date": 1242805276, "answer_id": 886645, "path": "stack.django.answer", "score": 629, "up_vote_count": 630, "is_accepted": true, "last_activity_date": 1503862111, "last_edit_date": 1503862111, "body_markdown": " 1. **&quot;What are the largest sites built on Django today?&quot;**\r\n\r\n  There isn&#39;t any single place that collects information about traffic on Django built sites, so I&#39;ll have to take a stab at it using data from various locations.  First, we have a list of Django sites on the front page of [the main Django project page][1] and then a list of Django built sites at [djangosites.org][2].  Going through the lists and picking some that I know have decent traffic we see:\r\n\r\n   - **[Instagram](http://instagram.com)**: [What Powers Instagram: Hundreds of Instances, Dozens of Technologies](http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances).\r\n\r\n   - **[Pinterest](http://pinterest.com/)**: [Alexa rank 37 (21.4.2015)](http://www.alexa.com/siteinfo/Pinterest.com) and 70 Million users in 2013\r\n\r\n   - **[Bitbucket](http://bitbucket.org/)**: [200TB of Code and 2.500.000 Users](https://blog.bitbucket.org/2015/02/05/bitbucket-2014-in-review/)\r\n\r\n   - **[Disqus](http://disqus.com)**: [Serving 400 million people with Python](http://pyvideo.org/video/418/pycon-2011--disqus--serving-400-million-people-wi).\r\n\r\n   - **[curse.com][3]**: [600k daily visits][4].\r\n\r\n   - **[tabblo.com][6]**: [44k daily visits][7], see Ned Batchelder&#39;s posts [Infrastructure for modern web sites][8].\r\n\r\n   - **[chesspark.com][9]**: [Alexa][10] rank about 179k.\r\n\r\n   - **[pownce.com][11]** (no longer active): [alexa][12] rank about 65k.\r\n  Mike Malone of Pownce, in his EuroDjangoCon presentation on **[Scaling Django Web Apps][13]** says &quot;hundreds of hits per second&quot;.  This is a very good presentation on how to scale Django, and makes some good points including (current) shortcomings in Django scalability.\r\n\r\n   - HP had a site built with Django 1.5: [ePrint center](http://www.eprintcenter.com). However, as for novemer/2015 the entire website was migrated and this link is just a redirect. This website was a world-wide service attending subscription to Instant Ink and related services HP offered (\\*).\r\n\r\n 1. **&quot;Can Django deal with 100,000 users daily, each visiting the site for a couple of hours?&quot;**\r\n\r\n  Yes, see above.\r\n\r\n 1. **&quot;Could a site like Stack Overflow run on Django?&quot;**\r\n\r\n  My gut feeling is yes but, as others answered and Mike Malone mentions in his presentation, database design is critical. Strong proof might also be found at www.cnprog.com if we can find any reliable traffic stats. Anyway, it&#39;s not just something that will happen by throwing together a bunch of Django models :)\r\n\r\nThere are, of course, many more sites and bloggers of interest, but I have got to stop somewhere!\r\n\r\n----\r\n\r\nBlog post about [Using Django to build high-traffic site michaelmoore.com][14] described as a [top 10,000 website][15].  [Quantcast stats][16] and [compete.com stats][17].\r\n\r\n----\r\n\r\n&lt;sub&gt;(\\*) The author of the edit, including such reference, used to work as outsourced developer in that project.&lt;/sub&gt;\r\n\r\n  [1]: http://www.djangoproject.com/\r\n  [2]: http://www.djangosites.org/\r\n  [3]: http://curse.com/\r\n  [4]: http://www.quantcast.com/curse.com\r\n  [6]: http://tabblo.com/\r\n  [7]: http://www.quantcast.com/tabblo.com\r\n  [8]: http://nedbatchelder.com/blog/200902/infrastructure_for_modern_web_sites.html\r\n  [9]: http://chesspark.com/\r\n  [10]: http://www.alexa.com/siteinfo/chesspark.com\r\n  [11]: http://pownce.com/\r\n  [12]: http://www.alexa.com/siteinfo/pownce.com\r\n  [13]: http://www.slideshare.net/road76/scaling-django\r\n  [14]: http://web.archive.org/web/20130307032621/http://concentricsky.com/blog/2009/oct/michaelmoorecom\r\n  [15]: http://www.alexa.com/siteinfo/http%3A%2F%2Fmichaelmoore.com\r\n  [16]: http://www.quantcast.com/michaelmoore.com\r\n  [17]: http://siteanalytics.compete.com/michaelmoore.com/\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1242818195, "answer_id": 887363, "path": "stack.django.answer", "score": 222, "up_vote_count": 222, "is_accepted": false, "last_activity_date": 1242918632, "last_edit_date": 1242918632, "body_markdown": "We&#39;re doing load testing now.  We think we can support 240 concurrent requests (a sustained rate of 120 hits per second 24x7) without any significant degradation in the server performance.  That would be 432,000 hits per hour.  Response times aren&#39;t small (our transactions are large) but there&#39;s no degradation from our baseline performance as the load increases.\r\n\r\nWe&#39;re using Apache front-ending Django and MySQL.  The OS is Red Hat Enterprise Linux (RHEL).  64-bit.  We use mod_wsgi in daemon mode for Django.  We&#39;ve done no cache or database optimization other than to accept the defaults.  \r\n\r\nWe&#39;re all in one VM on a 64-bit Dell with (I think) 32Gb RAM. \r\n\r\nSince performance is almost the same for 20 or 200 concurrent users, we don&#39;t need to spend huge amounts of time &quot;tweaking&quot;.  Instead we simply need to keep our base performance up through ordinary SSL performance improvements, ordinary database design and implementation (indexing, etc.), ordinary firewall performance improvements, etc.\r\n\r\nWhat we do measure is our load test laptops struggling under the insane workload of 15 processes running 16 concurrent threads of requests."}, {"tags": [], "down_vote_count": 0, "creation_date": 1242820107, "answer_id": 887463, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1242820107, "body_markdown": "Another example is rasp.yandex.ru, Russian transport timetable service. Its attendance satisfies your requirements."}, {"tags": [], "down_vote_count": 4, "creation_date": 1242869782, "answer_id": 891041, "path": "stack.django.answer", "score": 45, "up_vote_count": 49, "is_accepted": false, "last_activity_date": 1371420326, "last_edit_date": 1371420326, "body_markdown": "Scaling Web apps is not about web frameworks or languages, is about your architecture.\r\nIt&#39;s about how you handle you browser cache, your database cache, how you use non-standard persistence providers (like [CouchDB][1]), how tuned is your database and a lot of other stuff...\r\n\r\nDon&#39;t bother...\r\n\r\n\r\n  [1]: http://couchdb.apache.org/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1243240570, "answer_id": 905884, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1264886042, "last_edit_date": 1495540052, "body_markdown": "**Could a site like Stack Overflow run on Django?**\r\n\r\nChinese version of Stack Overflow is using Django: \r\n\r\n[https://stackoverflow.com/questions/694966/impressed-or-angry-at-http-www-cnprog-com][1]\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/694966/impressed-or-angry-at-http-www-cnprog-com"}, {"tags": [], "down_vote_count": 0, "creation_date": 1243432818, "answer_id": 915871, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1252096080, "last_edit_date": 1252096080, "body_markdown": "You can definitely run a high-traffic site in Django. Check out this pre-Django 1.0 but still relevant post here: [http://menendez.com/blog/launching-high-performance-django-site/][1]\r\n\r\n\r\n  [1]: http://menendez.com/blog/launching-high-performance-django-site/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1250930745, "answer_id": 1315525, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1264885854, "last_edit_date": 1264885854, "body_markdown": "If you have a site with some static content, then putting a [Varnish][1] server in front will dramatically increase your performance. Even a single box can then easily spit out 100 Mbit/s of traffic.\r\n\r\nNote that with dynamic content, using something like Varnish becomes a lot more tricky.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Varnish_%28software%29\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1254187625, "answer_id": 1490131, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1264885714, "last_edit_date": 1264885714, "body_markdown": "I have been using Django for over a year now, and am very impressed with how it manages to combine modularity, scalability and speed of development. Like with any technology, it comes with a learning curve. However, this learning curve is made a lot less steep by the excellent documentation from the Django community. Django has been able to handle everything I have thrown at it really well. It looks like it will be able to scale well into the future.\r\n\r\n[BidRodeo Penny Auctions][1] is a moderately sized Django powered website. It is a very dynamic website and does handle a good number of page views a day. \r\n\r\n  [1]: http://www.bidrodeo.com/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1258344013, "answer_id": 1739974, "path": "stack.django.answer", "score": 89, "up_vote_count": 89, "is_accepted": false, "last_activity_date": 1434423583, "last_edit_date": 1434423583, "body_markdown": "&gt; What&#39;s the &quot;largest&quot; site that&#39;s built on Django today? (I measure size mostly by user traffic)\r\n\r\nIn the US, [Mahalo][1]. I&#39;m told they handle roughly 10 million uniques a month. \r\n\r\nAbroad, the [Globo][2] network (a network of news, sports, and entertainment sites in Brazil); Alexa ranks them in to top 100 globally (around 80th currently).\r\n\r\nOther notable Django users include PBS, National Geographic, Discovery, NASA (actually a number of different divisions within NASA), and the Library of Congress.\r\n\r\n&gt; Can Django deal with 100k users daily, each visiting the site for a couple of hours?\r\n\r\nYes -- but only if you&#39;ve written your application right, and if you&#39;ve got enough hardware. Django&#39;s not a magic bullet.\r\n\r\n&gt; Could a site like StackOverflow run on Django?\r\n\r\nYes (but see above).\r\n\r\nTechnology-wise, easily: see [soclone][3] for one attempt. Traffic-wise, compete pegs StackOverflow at under 1 million uniques per month. I can name at least dozen Django sites with more traffic than SO.\r\n\r\n\r\n  [1]: http://mahalo.com/\r\n  [2]: http://globo.com/\r\n  [3]: http://code.google.com/p/soclone/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1258397511, "answer_id": 1744100, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1264885525, "last_edit_date": 1264885525, "body_markdown": "Here&#39;s a list of some relatively high-profile things built in Django:\r\n\r\n1. The Guardian&#39;s &quot;[Investigate your MP&#39;s expenses][1]&quot; app\r\n\r\n2. Politifact.com (here&#39;s a [Blog post][2] talking about the (positive) experience. Site won a Pulitzer.\r\n\r\n3. NY Times&#39; [Represent][3] app\r\n\r\n4. [EveryBlock][4]\r\n\r\n5. Peter Harkins, one of the programmers over at WaPo, [lists all the stuff they\u2019ve built with Django][5] on his blog\r\n\r\n6. It&#39;s a little old, but someone from the LA Times [gave a basic overview][6] of why they went with Django.\r\n\r\n7. The Onion&#39;s AV Club was recently moved from (I think Drupal) to Django.\r\n\r\nI imagine a number of these these sites probably gets well over 100k+ hits per day. Django can certainly do 100k hits/day and more. But YMMV in getting your particular site there depending on what you&#39;re building.\r\n\r\nThere are caching options at the Django level (for example caching querysets and views in [memcached][7] can work wonders) and beyond (upstream caches like [Squid][8]). Database Server specifications will also be a factor (and usually the place to splurge), as is how well you&#39;ve tuned it. Don&#39;t assume, for example, that Django&#39;s going set up indexes properly. Don&#39;t assume that the default [PostgreSQL][9] or [MySQL][10] configuration is the right one.\r\n\r\nFurthermore, you always have the option of having multiple application servers running Django if that is the slow point, with a software or hardware load balancer in front.\r\n\r\nFinally, are you serving static content on the same server as Django? Are you using Apache or something like [nginx][11] or [lighttpd][12]? Can you afford to use a [CDN][13] for static content? These are things to think about, but it&#39;s all very speculative. 100k hits/day isn&#39;t the only variable: how much do you want to spend? How much expertise do you have managing all these components? How much time do you have to pull it all together?\r\n\r\n  [1]: http://mps-expenses.guardian.co.uk/\r\n  [2]: http://www.mattwaite.com/posts/2007/aug/22/announcing-politifact/\r\n  [3]: http://prototype.nytimes.com/represent/\r\n  [4]: http://www.everyblock.com/\r\n  [5]: http://push.cx/2009/washington-post-update\r\n  [6]: http://www.poynter.org/column.asp?id=52=150818\r\n  [7]: http://en.wikipedia.org/wiki/Memcached\r\n  [8]: http://en.wikipedia.org/wiki/Squid_%28software%29\r\n  [9]: http://en.wikipedia.org/wiki/PostgreSQL\r\n  [10]: http://en.wikipedia.org/wiki/MySQL\r\n  [11]: http://en.wikipedia.org/wiki/Nginx\r\n  [12]: http://en.wikipedia.org/wiki/Lighttpd\r\n  [13]: http://en.wikipedia.org/wiki/Content_delivery_network\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1262945700, "answer_id": 2026836, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1264885014, "last_edit_date": 1264885014, "body_markdown": "Check out this micro news aggregator called [EveryBlock][1].\r\n\r\n  [1]: http://everyblock.com\r\n\r\nIt&#39;s entirely written in Django. In fact they are the people who developed the Django  framework itself.\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1264471218, "answer_id": 2137102, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1458847772, "last_edit_date": 1458847772, "body_markdown": "The developer advocate for YouTube gave a [talk about scaling Python at PyCon 2012](https://www.youtube.com/watch?v=G-lGCC4KKok), which is also relevant to scaling Django.\r\n\r\nYouTube has more than a [billion users](https://www.youtube.com/yt/press/statistics.html), and YouTube is built on Python."}, {"tags": [], "down_vote_count": 0, "creation_date": 1280664200, "answer_id": 3381935, "path": "stack.django.answer", "score": 149, "up_vote_count": 149, "is_accepted": false, "last_activity_date": 1371409340, "last_edit_date": 1371409340, "body_markdown": "Not sure about the number of daily visits but here are a few examples of large Django sites:\r\n\r\n - [disqus.com][1] ([talk from djangocon][2])\r\n - [bitbucket.org][3] ([write up][4])\r\n - [lanyrd.com][5] ([source][6])\r\n - [support.mozilla.com][7] ([source code][8])\r\n - [addons.mozilla.org][9] ([source code][10]) ([talk from djangocon][11])\r\n - [theonion.com][12] ([write up][13])\r\n - The [guardian.co.uk][14] comment system uses Django ([source][15])\r\n - [instagram][16]\r\n - [pinterest][17]\r\n - [rdio][19]\r\n\r\nScreencast on how to deploy django with scaling in mind http://ontwik.com/python/django-deployment-workshop-by-jacob-kaplan-moss/\r\n\r\nHere is a link to list of [high traffic Django sites on Quora][18].\r\n\r\n\r\n  [1]: http://disqus.com/\r\n  [2]: http://djangocon.blip.tv/file/4135225/\r\n  [3]: http://bitbucket.org\r\n  [4]: http://code.djangoproject.com/wiki/DjangoSuccessStoryBitbucket\r\n  [5]: http://lanyrd.com/\r\n  [6]: http://lanyrd.com/colophon/\r\n  [7]: http://support.mozilla.com/\r\n  [8]: https://github.com/mozilla/kitsune\r\n  [9]: https://addons.mozilla.org/\r\n  [10]: https://github.com/mozilla/zamboni\r\n  [11]: http://python.mirocommunity.org/video/1866/djangocon-2010-switching-addon\r\n  [12]: http://www.theonion.com/\r\n  [13]: http://www.reddit.com/r/django/comments/bhvhz/the_onion_uses_django_and_why_it_matters_to_us\r\n  [14]: http://www.guardian.co.uk/\r\n  [15]: http://www.guardian.co.uk/info/developer-blog/2011/feb/08/computing-apps\r\n  [16]: http://instagr.am/\r\n  [17]: https://pinterest.com\r\n  [18]: http://www.quora.com/Django/What-is-the-highest-traffic-website-built-on-top-of-Django\r\n  [19]: http://www.rdio.com/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1290648004, "answer_id": 4272991, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1290648004, "body_markdown": "Spreading the tasks evenly, in short optimizing each and every aspect including DBs, Files, Images, CSS etc. and balancing the load with several other resources is necessary once your site/application starts growing. OR you make some more space for it to grow. Implementation of latest technologies like CDN, Cloud are must with huge sites. Just developing and tweaking an application won&#39;t give your the cent percent satisfation, other components also play an important role."}, {"tags": [], "down_vote_count": 0, "creation_date": 1326230993, "answer_id": 8810772, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1326230993, "body_markdown": "I think we might as well add Apple&#39;s App of the year for 2011, [Instagram][1], to the list which uses django intensively.\r\n\r\n\r\n  [1]: http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances-dozens-of"}, {"tags": [], "down_vote_count": 0, "creation_date": 1410189931, "answer_id": 25727705, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1410189931, "body_markdown": "I develop high traffic sites using Django for the national broadcaster in Ireland. It works well for us. Developing a high performance site is more than about just choosing a framework. A framework will only be one part of a system that is as strong as it&#39;s weakest link. Using the latest framework &#39;X&#39; won&#39;t solve your performance issues if the problem is slow database queries or a badly configured server or network."}, {"tags": [], "down_vote_count": 0, "creation_date": 1415535329, "answer_id": 26828032, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1415535329, "body_markdown": "The problem is not to know if django can scale or not. \r\n\r\nThe right way is to understand and know which are the network design patterns and tools to put under your django/symfony/rails project to scale well.\r\n\r\nSome ideas can be :\r\n\r\n - Multiplexing.\r\n - Inversed proxy. Ex : Nginx, Varnish\r\n - Memcache Session. Ex : Redis\r\n - Clusterization on your project and db for load balancing and fault tolerance : Ex : Docker\r\n - Use third party to store assets. Ex : Amazon S3\r\n\r\nHope it help a bit. This is my tiny rock to the mountain."}, {"tags": [], "down_vote_count": 0, "creation_date": 1446872484, "answer_id": 33579299, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1446872484, "body_markdown": "I don&#39;t think the issue is really about Django scaling. \r\n\r\nI really suggest you look into your architecture that&#39;s what is going to help you with you scaling needs.If you get that wrong there is not point on how well Django performs. Performance != Scale. You can have a system that has amazing performance but does not scale and vice versa.\r\n\r\nIs your application database bound? If it is then your scale issues lie there as well. How are you planning on interacting with the database from Django? What happens when you database cannot process requests as fast as Django accepts them? What happens when your data outgrows one physical machine. You need to account for how you plan on dealing with those circumstances.\r\n\r\nMoreover, What happens when your traffic outgrows one app server? how you handle sessions in this case can be tricky, more often than not you&#39;d probably require a shared nothing architecture. Again that depends on your application.\r\n\r\nIn short Languages is not what determines scale, a language is responsible for performance(again depending on your applications different languages perform differently). It is your design and architecture that makes scaling a reality. \r\n\r\nI hope it helps, would be glad to help further if you have questions."}, {"tags": [], "down_vote_count": 1, "creation_date": 1453389298, "answer_id": 34927424, "path": "stack.django.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1453453329, "last_edit_date": 1453453329, "body_markdown": "As stated in High Performance Django Book  [enter link description here][1]\r\n and Go through this [Cal Henderson ][2]\r\n\r\nSee further details as mentioned below:\r\n\r\nIt\u2019s not uncommon to hear people say \u201cDjango doesn\u2019t scale\u201d. Depending on how you look at it, the statement is either completely true or patently false. Django, on its own, doesn\u2019t scale.\r\n\r\nThe same can be said of Ruby on Rails, Flask, PHP, or any other language used by a database-driven dynamic website.\r\n\r\nThe good news, however, is that Django interacts beautifully with a suite of caching and\r\nload balancing tools that will allow it to scale to as much traffic as you can throw at it.\r\n\r\nContrary to what you may have read online, \r\nit can do so without replacing core components often labeled as \u201ctoo slow\u201d such as the database ORM or the template layer.\r\n\r\nDisqus serves over 8 billion page views per month. Those are some huge numbers. \r\n\r\nThese teams have proven Django most certainly does scale.\r\n Our experience here at Lincoln Loop backs it up.\r\n\r\n We\u2019ve built big Django sites capable of spending the day on the Reddit homepage without breaking a sweat.\r\n\r\n\r\n\r\n\r\nDjango\u2019s scaling success stories are almost too numerous to list at this point.\r\n\r\nIt backs Disqus, Instagram, and Pinterest. Want some more proof? Instagram was able to sustain over 30 million users on Django with only 3 engineers (2 of which had no back-end development\r\n\r\n\r\n  [1]: https://highperformancedjango.com/\r\n  [2]: https://www.youtube.com/watch?v=i6Fr65PFqfk"}, {"tags": [], "down_vote_count": 1, "creation_date": 1453395017, "answer_id": 34929591, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1453395017, "body_markdown": "If you want to use Open source then there are many options for you. But python is best among them it have many libraries and a super awesome community.\r\nThese are reasons which might change your mind:\r\n\r\n* Python is very good but it is a interpreted language which makes it slow. But many accelerator and caching services are there which partly solve this problem.\r\n\r\n* If you are thinking about rapid development then Ruby on Rails is best among all. The main motto of this(ROR) framework is to give a comfortable experience to the developers. If you compare Ruby and Python both have nearly same syntaxes.\r\n\r\n* Google App Engine is very good service but it will bind you in its scope, you don&#39;t get chance to experiment new things. Instead of it you can use [Digital Ocean][1] cloud which will only take **$5/Month** charge for its simplest droplet. [Heroku][2] is another free service where you can deploy your product.\r\n\r\n* Yes! Yes! What you heard is totally correct but here are some examples which are using other technologies\r\n   * Rails: Github, Twitter(previously), Shopify, Airbnb, Slideshare, Heroku etc.\r\n   * PHP: Facebook, Wikipedia, Flickr, Yahoo, Tumbler, Mailchimp etc.\r\n\r\nConclusion is a framework or language won&#39;t do everything for you. A better architecture, designing and strategy will give you a scalable website. Instagram is biggest example,this small team is managing such huge data. Here is one [blog][3] about its architecture must read it.\r\n\r\n \r\n\r\n\r\n  [1]: https://digitalocean.com/\r\n  [2]: http://www.heroku.com\r\n  [3]: http://instagram-engineering.tumblr.com/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1457988960, "answer_id": 35997907, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1457988960, "body_markdown": "Even-though there have been a lot of great answers here, I just feel like pointing out, that nobody have put emphasis on..\r\n\r\n**It depends on the application** \r\n\r\nIf you application is light on writes, as in you are reading a lot more data from the DB than you are writing. Then scaling django should be fairly trivial, heck, it comes with some fairly decent output/view caching straight out of the box. Make use of that, and say, redis as a cache provider, put a load balancer in front of it, spin up n-instances and you should be able to deal with a VERY large amount of traffic.\r\n\r\nNow, if you have to do thousands of complex writes a second? Different story. Is Django going to be a bad choice? Well, not necessarily, depends on how you architect your solution really, and also, what your requirements are.\r\n\r\nJust my two cents :-)"}, {"tags": [], "down_vote_count": 1, "creation_date": 1461598336, "answer_id": 36844979, "path": "stack.django.answer", "score": 10, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1461599898, "last_edit_date": 1461599898, "body_markdown": "Today we use many web apps and sites for our needs. Most of them are highly useful. I will show you some of them used by python or django.\r\n\r\n[Washington Post][8]\r\n\r\nThe Washington Post\u2019s website is a hugely popular online news source to accompany their daily paper. Its\u2019 huge amount of views and traffic can be easily handled by the Django web framework.\r\n`Washington Post - 52.2 million unique visitors (March, 2015)`\r\n\r\n[NASA][9]\r\n\r\nThe National Aeronautics and Space Administration\u2019s official website is the place to find news, pictures, and videos about their ongoing space exploration. This Django website can easily handle huge amounts of views and traffic.\r\n`2 million visitors monthly`\r\n\r\n[The Guardian][10]\r\n\r\nThe Guardian is a British news and media website owned by the Guardian Media Group. It contains nearly all of the content of the newspapers The Guardian and The Observer. This huge data is handled by Django.\r\n`The Guardian (commenting system) - 41,6 million unique visitors (October, 2014)`\r\n\r\n[YouTube][1]\r\n\r\nWe all know YouTube as the place to upload cat videos and fails. As one of the most popular websites in existence, it provides us with endless hours of video entertainment. The Python programming language powers it and the features we love.\r\n\r\n[DropBox][2]\r\n\r\nDropBox started the online document storing revolution that has become part of daily life. We now store almost everything in the cloud. Dropbox allows us to store, sync, and share almost anything using the power of Python.\r\n\r\n[Survey Monkey][3]\r\n\r\nSurvey Monkey is the largest online survey company. They can handle over one million responses every day on their rewritten Python website.\r\n\r\n[Quora][4]\r\n\r\nQuora is the number one place online to ask a question and receive answers from a community of individuals. On their Python website relevant results are answered, edited, and organized by these community members.\r\n\r\n[Bitly][5]\r\n\r\nA majority of the code for Bitly URL shortening services and analytics are all built with Python. Their service can handle hundreds of millions of events per day.\r\n\r\n[Reddit][6]\r\n\r\nReddit is known as the front page of the internet. It is the place online to find information or entertainment based on thousands of different categories. Posts and links are user generated and are promoted to the top through votes. Many of Reddit\u2019s capabilities rely on Python for their functionality.\r\n\r\n[Hipmunk][7]\r\n\r\nHipmunk is an online consumer travel site that compares the top travel sites to find you the best deals. This Python website\u2019s tools allow you to find the cheapest hotels and flights for your destination.\r\n\r\n \r\nClick here for more: \r\n[25-of-the-most-popular-python-and-django-websites][11], \r\n[What-are-some-well-known-sites-running-on-Django][12]\r\n\r\n\r\n  [1]: https://www.youtube.com/\r\n  [2]: https://www.dropbox.com/\r\n  [3]: https://www.surveymonkey.com/\r\n  [4]: https://www.quora.com/\r\n  [5]: https://bitly.com/\r\n  [6]: https://www.reddit.com/\r\n  [7]: https://www.hipmunk.com/\r\n  [8]: https://www.washingtonpost.com/\r\n  [9]: https://www.nasa.gov/\r\n  [10]: http://www.theguardian.com/international\r\n  [11]: https://www.shoop.io/en/blog/25-of-the-most-popular-python-and-django-websites/\r\n  [12]: https://www.quora.com/What-are-some-well-known-sites-running-on-Django"}, {"tags": [], "down_vote_count": 0, "creation_date": 1465456125, "answer_id": 37719069, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1465461417, "last_edit_date": 1465461417, "body_markdown": "**What&#39;s the &quot;largest&quot; site that&#39;s built on Django today? (I measure size mostly by user traffic)**\r\n[Pinterest][1]&lt;br&gt;\r\n[disqus.com][2]&lt;br&gt;\r\nMore here https://www.shuup.com/en/blog/25-of-the-most-popular-python-and-django-websites/\r\n\r\n**Can Django deal with 100,000 users daily, each visiting the site for a couple of hours?**&lt;br&gt;\r\nYes, but use proper architecture, database design, use of cache, use load balances and multiple servers/ nods\r\n\r\n**Could a site like Stack Overflow run on Django?**&lt;br&gt;\r\nYes, just need to follow answer mentioned in the 2nd question\r\n\r\n\r\n  [1]: https://pinterest.com\r\n  [2]: https://disqus.com/"}], "title": "Does Django scale?", "view_count": 132285, "answer_count": 31, "code_snippet": ["<code>Washington Post - 52.2 million unique visitors (March, 2015)</code>", "<code>2 million visitors monthly</code>", "<code>The Guardian (commenting system) - 41,6 million unique visitors (October, 2014)</code>"], "path": "stack.django"}, {"tags": ["python", "git", "pip"], "creation_date": 1322074614, "body_markdown": "We&#39;d like to use pip with github to install private packages to our production servers.  This question concerns what needs to be in the github repo in order for the install to be successful.\r\n\r\nAssuming the following command line (which authenticates just fine and tries to install):\r\n\r\n    pip install git+ssh://git@github.com/BlahCo/search/tree/prod_release_branch/ProductName\r\n\r\nWhat needs to reside in the ProductName?  Is it the contents of what would normally be in the tar file after running setup.py with the sdist option, or is the actual tar.gz file, or something else?\r\n\r\nI&#39;m asking here because I&#39;ve tried several variations and can&#39;t make it work.  Any help appreciated.\r\n", "last_edit_date": 1372196265, "up_vote_count": 173, "link": "https://stackoverflow.com/questions/8247605/configuring-so-that-pip-install-can-work-from-github", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1322134839, "answer_id": 8256424, "path": "stack.django.answer", "score": 234, "up_vote_count": 236, "is_accepted": true, "last_activity_date": 1488801295, "last_edit_date": 1488801295, "body_markdown": "You need the whole python package, with a `setup.py` file in it.\r\n\r\nA package named `foo` would be:\r\n\r\n    foo # the installable package\r\n    \u251c\u2500\u2500 foo\r\n    \u2502&#160;&#160; \u251c\u2500\u2500 __init__.py\r\n    \u2502&#160;&#160; \u2514\u2500\u2500 bar.py\r\n    \u2514\u2500\u2500 setup.py\r\n\r\n\r\nAnd install from github like:\r\n\r\n    $ pip install git+git://github.com/myuser/foo.git@v123\r\n    or\r\n    $ pip install git+git://github.com/myuser/foo.git@newbranch\r\n\r\n\r\nMore info at https://pip.pypa.io/en/stable/reference/pip_install/#vcs-support"}, {"tags": [], "down_vote_count": 0, "creation_date": 1323074938, "answer_id": 8382819, "path": "stack.django.answer", "score": 97, "up_vote_count": 97, "is_accepted": false, "last_activity_date": 1438095149, "last_edit_date": 1438095149, "body_markdown": "I had similar issue when I had to install from github repo, but did not want to install git , etc.\r\n\r\nThe simple way to do it is using zip archive of the package. Add `/zipball/master` to the repo URL:\r\n\r\n        $ pip install https://github.com/hmarr/django-debug-toolbar-mongo/zipball/master\r\n    Downloading/unpacking https://github.com/hmarr/django-debug-toolbar-mongo/zipball/master\r\n      Downloading master\r\n      Running setup.py egg_info for package from https://github.com/hmarr/django-debug-toolbar-mongo/zipball/master\r\n    Installing collected packages: django-debug-toolbar-mongo\r\n      Running setup.py install for django-debug-toolbar-mongo\r\n    Successfully installed django-debug-toolbar-mongo\r\n    Cleaning up...\r\n\r\nThis way you will make pip work with github source repositories."}, {"tags": [], "down_vote_count": 0, "creation_date": 1471518858, "answer_id": 39016761, "path": "stack.django.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1476289441, "last_edit_date": 1476289441, "body_markdown": "If you want to use `requirements.txt` file, you will need `git` and something like the entry below to anonymously fetch the master branch in your `requirements.txt`.\r\n\r\n### For regular install:\r\n\r\n    git+git://github.com/celery/django-celery.git\r\n\r\n### For &quot;[editable][1]&quot; install:\r\n\r\n    -e git://github.com/celery/django-celery.git#egg=django-celery\r\n\r\nEditable mode downloads the project&#39;s source code into `./src` in the current directory. It allows `pip freeze` to output the correct github location of the package.\r\n\r\n\r\n  [1]: https://pip.pypa.io/en/stable/reference/pip_install/#editable-installs"}, {"tags": [], "down_vote_count": 2, "creation_date": 1472721376, "answer_id": 39267477, "path": "stack.django.answer", "score": 9, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1472721376, "body_markdown": "Clone target repository same way like you cloning any other project:\r\n    \r\n    git clone git@github.com:myuser/foo.git\r\n\r\nThen install it in develop mode:\r\n\r\n    cd foo\r\n    pip install -e .\r\n\r\nYou can change anything you wan&#39;t and every code using `foo` package will use modified code. \r\n\r\nThere 2 benefits ot this solution:\r\n\r\n1. You can install package in your home projects directory.\r\n1. Package includes `.git` dir, so it&#39;s regular Git repository. You can push to your fork right away."}], "title": "Configuring so that pip install can work from github", "view_count": 123687, "answer_count": 4, "code_snippet": ["<code>pip install git+ssh://git@github.com/BlahCo/search/tree/prod_release_branch/ProductName\n</code>", "<code>setup.py</code>", "<code>foo</code>", "<code>foo # the installable package\n\u251c\u2500\u2500 foo\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 bar.py\n\u2514\u2500\u2500 setup.py\n</code>", "<code>$ pip install git+git://github.com/myuser/foo.git@v123\nor\n$ pip install git+git://github.com/myuser/foo.git@newbranch\n</code>", "<code>pip install git+https://github.com/pypa/pip.git</code>", "<code>/zipball/master</code>", "<code>    $ pip install https://github.com/hmarr/django-debug-toolbar-mongo/zipball/master\nDownloading/unpacking https://github.com/hmarr/django-debug-toolbar-mongo/zipball/master\n  Downloading master\n  Running setup.py egg_info for package from https://github.com/hmarr/django-debug-toolbar-mongo/zipball/master\nInstalling collected packages: django-debug-toolbar-mongo\n  Running setup.py install for django-debug-toolbar-mongo\nSuccessfully installed django-debug-toolbar-mongo\nCleaning up...\n</code>", "<code>requirements.txt</code>", "<code>git</code>", "<code>requirements.txt</code>", "<code>git+git://github.com/celery/django-celery.git\n</code>", "<code>-e git://github.com/celery/django-celery.git#egg=django-celery\n</code>", "<code>./src</code>", "<code>pip freeze</code>", "<code>git clone git@github.com:myuser/foo.git\n</code>", "<code>cd foo\npip install -e .\n</code>", "<code>foo</code>", "<code>.git</code>", "<code>pip</code>", "<code>pip</code>", "<code>pip install -e .</code>", "<code>pip</code>", "<code>pip list</code>"], "path": "stack.django"}, {"tags": ["python", "shell", "read-eval-print-loop", "interactive-session"], "creation_date": 1244071262, "body_markdown": "I find myself frequently using Python&#39;s interpreter to work with databases, files, etc -- basically a lot of manual formatting of semi-structured data.  I don&#39;t properly save and clean up the useful bits as often as I would like.  Is there a way to save my input into the shell (db connections, variable assignments, little for loops and bits of logic) -- some history of the interactive session?  If I use something like `script` I get too much stdout noise.  I don&#39;t really need to pickle all the objects -- though if there is a solution that does that, it would be OK.  Ideally I would just be left with a script that ran as the one I created interactively, and I could just delete the bits I didn&#39;t need.  Is there a package that does this, or a DIY approach?\r\n\r\n&lt;b&gt;UPDATE&lt;/b&gt;:  I am really amazed at the quality and usefulness of these packages.  For those with a similar itch:\r\n\r\n* IPython -- should have been using this for ages, kind of what I had in mind\r\n* [reinteract][1] -- very impressive, I want to learn more about visualization and this seems like it will shine there.  Sort of a gtk/gnome desktop app that renders graphs inline.  Imagine a hybrid shell + graphing calculator + mini eclipse.  Source distribution here: [http://www.reinteract.org/trac/wiki/GettingIt][2] . Built fine on Ubuntu, integrates into gnome desktop, Windows and Mac installers too.\r\n* [bpython][3] -- extremely cool, lots of nice features, autocomplete(!), rewind, one keystroke save to file, indentation, well done.  Python source distribution, pulled a couple of dependencies from sourceforge.\r\n\r\nI am converted, these really fill a need between interpreter and editor.\r\n\r\n\r\n\r\n  [1]: http://blog.fishsoup.net/category/coding/reinteract/\r\n  [2]: http://www.reinteract.org/trac/wiki/GettingIt\r\n  [3]: http://bpython-interpreter.org/", "last_edit_date": 1357085346, "up_vote_count": 315, "link": "https://stackoverflow.com/questions/947810/how-to-save-a-python-interactive-session", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1244071400, "answer_id": 947820, "path": "stack.django.answer", "score": 79, "up_vote_count": 79, "is_accepted": false, "last_activity_date": 1417439049, "last_edit_date": 1417439049, "body_markdown": "There is a [way][1] to do it. Store the file in `~/.pystartup`...\r\n\r\n    # Add auto-completion and a stored history file of commands to your Python\r\n    # interactive interpreter. Requires Python 2.0+, readline. Autocomplete is\r\n    # bound to the Esc key by default (you can change it - see readline docs).\r\n    #\r\n    # Store the file in ~/.pystartup, and set an environment variable to point\r\n    # to it:  &quot;export PYTHONSTARTUP=/home/user/.pystartup&quot; in bash.\r\n    #\r\n    # Note that PYTHONSTARTUP does *not* expand &quot;~&quot;, so you have to put in the\r\n    # full path to your home directory.\r\n    \r\n    import atexit\r\n    import os\r\n    import readline\r\n    import rlcompleter\r\n    \r\n    historyPath = os.path.expanduser(&quot;~/.pyhistory&quot;)\r\n    \r\n    def save_history(historyPath=historyPath):\r\n        import readline\r\n        readline.write_history_file(historyPath)\r\n    \r\n    if os.path.exists(historyPath):\r\n        readline.read_history_file(historyPath)\r\n    \r\n    atexit.register(save_history)\r\n    del os, atexit, readline, rlcompleter, save_history, historyPath\r\n\r\nand then set the environment variable `PYTHONSTARTUP` in your shell (e.g. in `~/.bashrc`):\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    export PYTHONSTARTUP=$HOME/.pystartup\r\n\r\nYou can also add this to get autocomplete for free:\r\n\r\n    readline.parse_and_bind(&#39;tab: complete&#39;)\r\n\r\nPlease note that this will only work on *nix systems. As readline is only available in Unix platform.\r\n\r\n  [1]: http://docs.python.org/tutorial/interactive.html?highlight=atexit\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1244072061, "answer_id": 947846, "path": "stack.django.answer", "score": 301, "up_vote_count": 302, "is_accepted": true, "last_activity_date": 1497982470, "last_edit_date": 1497982470, "body_markdown": "[IPython][1] is extremely useful if you like using interactive sessions. For example for your use-case there is [the `%save` magic command][2], you just input `%save my_useful_session 10-20 23` to save input lines 10 to 20 and 23 to `my_useful_session.py` (to help with this, every line is prefixed by its number).\r\n\r\nFurthermore, the documentation states:\r\n\r\n&gt; This function uses the same syntax as [%history][4] for input ranges, then saves the lines to the filename you specify.\r\n\r\nThis allows for example, to reference older sessions, such as\r\n\r\n    %save current_session ~0/\r\n    %save previous_session ~1/\r\n\r\nLook at [the videos on the presentation page][3] to get a quick overview of the features.\r\n\r\n[1]: https://ipython.org/\r\n[2]: http://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-save\r\n[3]: https://ipython.org/presentation.html\r\n[4]: http://ipython.readthedocs.io/en/5.x/interactive/magics.html#magic-history"}, {"tags": [], "down_vote_count": 0, "creation_date": 1244075301, "answer_id": 948006, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1244075301, "body_markdown": "Also, [reinteract][1] gives you a notebook-like interface to a Python session.\r\n\r\n\r\n  [1]: http://blog.fishsoup.net/2007/11/10/reinteract-better-interactive-python/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1244077416, "answer_id": 948082, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1379803779, "last_edit_date": 1379803779, "body_markdown": "In addition to IPython, a similar utility [bpython](http://bpython-interpreter.org/) has a &quot;save the code you&#39;ve entered to a file&quot; feature"}, {"tags": [], "down_vote_count": 1, "creation_date": 1331816795, "answer_id": 9720341, "path": "stack.django.answer", "score": 110, "up_vote_count": 111, "is_accepted": false, "last_activity_date": 1331816795, "body_markdown": "http://www.andrewhjon.es/save-interactive-python-session-history\r\n\r\n\r\n    import readline\r\n    readline.write_history_file(&#39;/home/ahj/history&#39;)\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1336339547, "answer_id": 10474449, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1456209933, "last_edit_date": 1456209933, "body_markdown": "Just putting another suggesting in the bowl:\r\n[Spyder][1]\r\n\r\n[![enter image description here][2]][2]\r\n\r\nIt has *History log* and *Variable explorer*. If you have worked with MatLab, then you&#39;ll see the similarities. \r\n\r\n\r\n  [1]: https://github.com/spyder-ide/spyder\r\n  [2]: http://i.stack.imgur.com/kh91E.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1372262613, "answer_id": 17325071, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1372262613, "body_markdown": "there is another option --- pyslice.\r\nin the &quot;wxpython 2.8 docs demos and tools&quot;, there is a  open source program named &quot;pyslices&quot;.\r\n\r\nyou can use it like a editor, and it also support using like a console ---- executing each line like a interactive interpreter with immediate echo.\r\n\r\nof course, all the blocks of codes and results of each block will be recorded into a txt file automatically. \r\n\r\nthe results are logged just behind the corresponding block of code. very convenient.\r\n\r\n![the overview of pyslices][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/VsJ1w.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1408711622, "answer_id": 25447411, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1408711622, "body_markdown": "I had to struggle to find an answer, I was very new to iPython environment.\r\n\r\nThis will work\r\n\r\nIf your iPython session looks like this \r\n\r\n    In [1] : import numpy as np\r\n    ....\r\n    In [135]: counter=collections.Counter(mapusercluster[3])\r\n    In [136]: counter\r\n    Out[136]: Counter({2: 700, 0: 351, 1: 233})\r\n\r\nYou want to save lines from 1 till 135 then on the same ipython session use this command\r\n\r\n    In [137]: %save test.py 1-135\r\n\r\nThis will save all your python statements in test.py file in your current directory ( where you initiated the ipython)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1414703567, "answer_id": 26663400, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1414703567, "body_markdown": "After installing [Ipython][1], and opening an Ipython session by running the command:\r\n\r\n    ipython\r\n\r\nfrom your command line, just run the following Ipython &#39;magic&#39; command to automatically log your entire  Ipython session:\r\n\r\n    %logstart\r\n\r\nThis will create a uniquely named .py file and store your session for later use as an interactive Ipython session or for use in the script(s) of your choosing.\r\n\r\n\r\n  [1]: http://ipython.org/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1430416597, "answer_id": 29974624, "path": "stack.django.answer", "score": 44, "up_vote_count": 44, "is_accepted": false, "last_activity_date": 1430416597, "body_markdown": "If you are using [IPython][1] you can save to a file all your previous commands using the magic function *[%history][2]* with the *-f* parameter, p.e:\r\n\r\n    %history -f /tmp/history.py\r\n\r\n  [1]: http://ipython.org/\r\n  [2]: http://ipython.org/ipython-doc/2/api/generated/IPython.core.magics.history.html#IPython.core.magics.history.HistoryMagics"}, {"tags": [], "down_vote_count": 0, "creation_date": 1454730510, "answer_id": 35237125, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1454730510, "body_markdown": "There is %history magic for printing and saving the input history (and optionally the output).\r\n\r\nTo store your current session to a file named `my_history.py`:\r\n\r\n    &gt;&gt;&gt; %hist -f my_history.py\r\n\r\nHistory IPython stores both the commands you enter, and the results it produces. You can easily go through previous commands with the up- and down-arrow keys, or access your history in more sophisticated ways.\r\n\r\nYou can use the %history magic function to examine past input and output. Input history from previous sessions is saved in a database, and IPython can be configured to save output history.\r\n\r\nSeveral other magic functions can use your input history, including %edit, %rerun, %recall, %macro, %save and %pastebin. You can use a standard format to refer to lines:\r\n\r\n    %pastebin 3 18-20 ~1/1-5\r\n\r\nThis will take line 3 and lines 18 to 20 from the current session, and lines 1-5 from the previous session.\r\n\r\nSee %history? for the Docstring and more examples.\r\n\r\nAlso, be sure to explore the capabilities of [%store magic][1] for lightweight persistence of variables in IPython.\r\n\r\n&gt; Stores variables, aliases and macros in IPython\u2019s database.\r\n\r\n    d = {&#39;a&#39;: 1, &#39;b&#39;: 2}\r\n    %store d  # stores the variable\r\n    del d\r\n\r\n    %store -r d  # Refresh the variable from IPython&#39;s database.\r\n    &gt;&gt;&gt; d\r\n    {&#39;a&#39;: 1, &#39;b&#39;: 2}\r\n\r\nTo autorestore stored variables on startup, specify`c.StoreMagic.autorestore = True` in ipython_config.py.\r\n\r\n  [1]: http://ipython.org/ipython-doc/rel-0.12/config/extensions/storemagic.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1463237152, "answer_id": 37228036, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1463237152, "last_edit_date": 1492086988, "body_markdown": "As far as Linux goes, one can use `script` command to record the whole session. It is part of `util-linux` package so should be on most Linux systems  .  You can create and alias or function that will call `script -c python` and that will be saved to a `typescript` file.  For instance, here&#39;s a reprint of one such file.\r\n\r\n\r\n    $ cat typescript                                                                                                      \r\n    Script started on Sat 14 May 2016 08:30:08 AM MDT\r\n    Python 2.7.6 (default, Jun 22 2015, 17:58:13) \r\n    [GCC 4.8.2] on linux2\r\n    Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\r\n    &gt;&gt;&gt; print &#39;Hello Pythonic World&#39;\r\n    Hello Pythonic World\r\n    &gt;&gt;&gt; \r\n    \r\n    Script done on Sat 14 May 2016 08:30:42 AM MDT\r\n\r\nSmall disadvantage here is that the `script` records everything , even line-feeds, whenever you hit backspaces , etc. So you may want to use `col` to clean up the output (see [this post on Unix&amp;Linux Stackexchange][1]) . \r\n\r\n\r\n  [1]: https://unix.stackexchange.com/q/86901/85039"}, {"tags": [], "down_vote_count": 0, "creation_date": 1469546094, "answer_id": 38593747, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1469549477, "last_edit_date": 1469549477, "body_markdown": "Some comments were asking how to save all of the IPython inputs at once. For %save magic in IPython, you can save all of the commands programmatically as shown below, to avoid the prompt message and also to avoid specifying the input numbers. \r\n    currentLine = len(In)-1\r\n    %save -f my_session 1-$currentLine\r\n\r\nThe `-f` option is used for forcing file replacement and the `len(IN)-1` shows the current input prompt in IPython, allowing you to save the whole session programmatically. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1482509351, "answer_id": 41304568, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1482509351, "body_markdown": "For those using `spacemacs`, and `ipython` that comes with `python-layer`, save magic creates a lot of unwanted output, because of the constant auto-completion command working in the backround such as:  \r\n\r\n    len(all_suffixes)\r\n    &#39;;&#39;.join(__PYTHON_EL_get_completions(&#39;&#39;&#39;len&#39;&#39;&#39;))\r\n    &#39;;&#39;.join(__PYTHON_EL_get_completions(&#39;&#39;&#39;all_substa&#39;&#39;&#39;))\r\n    len(all_substantives_w_suffixes)\r\n    &#39;;&#39;.join(__PYTHON_EL_get_completions(&#39;&#39;&#39;len&#39;&#39;&#39;))\r\n    &#39;;&#39;.join(__PYTHON_EL_get_completions(&#39;&#39;&#39;all&#39;&#39;&#39;))\r\n    &#39;;&#39;.join(__PYTHON_EL_get_completions(&#39;&#39;&#39;all_&#39;&#39;&#39;))\r\n    &#39;;&#39;.join(__PYTHON_EL_get_completions(&#39;&#39;&#39;all_w&#39;&#39;&#39;))\r\n    &#39;;&#39;.join(__PYTHON_EL_get_completions(&#39;&#39;&#39;all_wo&#39;&#39;&#39;))\r\n    &#39;;&#39;.join(__PYTHON_EL_get_completions(&#39;&#39;&#39;all_wor&#39;&#39;&#39;))\r\n    &#39;;&#39;.join(__PYTHON_EL_get_completions(&#39;&#39;&#39;all_word&#39;&#39;&#39;))\r\n    &#39;;&#39;.join(__PYTHON_EL_get_completions(&#39;&#39;&#39;all_words&#39;&#39;&#39;))\r\n    len(all_words_w_logograms)\r\n    len(all_verbs)\r\n\r\nTo avoid this just save the ipython buffer like you normally save any other: `spc f s`\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1492631012, "answer_id": 43504755, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1492631012, "last_edit_date": 1495542398, "body_markdown": "The `%history` command is awesome, but unfortunately it won&#39;t let you save things that were %paste &#39;d into the sesh.  To do that I think you have to do `%logstart` [at the beginning][1] (although I haven&#39;t confirmed this works).\r\n\r\nWhat I like to do is\r\n\r\n`%history -o -n -p -f filename.txt`\r\n\r\nwhich will save the output, line numbers, and &#39;&gt;&gt;&gt;&#39; before each input (o, n, and p options).  See the docs for %history [here][2].\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/31749395/4549682\r\n  [2]: http://ipython.org/ipython-doc/2/api/generated/IPython.core.magics.history.html#IPython.core.magics.history.HistoryMagics"}, {"tags": [], "down_vote_count": 0, "creation_date": 1493217997, "answer_id": 43637495, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1493217997, "body_markdown": "If you use **bpython**, all your command history is by default saved to `~/.pythonhist`.\r\n\r\nTo save the commands for later reusage you can copy them to a python script file:\r\n\r\n    $ cp ~/.pythonhist mycommands.py\r\n\r\nThen edit that file to clean it up and [put it under Python path][1] (global or virtual environment&#39;s site-packages, current directory, mentioning in *.pth, or some other way).\r\n\r\nTo include the commands into your shell, just import them from the saved file:\r\n\r\n    &gt;&gt;&gt; from mycommands import *\r\n\r\n\r\n  [1]: http://djangotricks.blogspot.com/2008/09/note-on-python-paths.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1496883649, "answer_id": 44425033, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1496883649, "body_markdown": "I&#39;d like to suggest another way to maintain python session through tmux on linux. you run tmux, attach your self to the session you opened (if not attached after opening it directly). execute python and do whatever you are doing on it. then detach from session. detaching from a tmux session does not close the session. the session remains open. \r\n\r\n**pros of this method:**\r\nyou can attach to this session from any other device (in case you can ssh your pc)\r\n\r\n**cons of this method:**\r\nthis method does not relinquish the resources used by the opened python session until you actually exist the python interpreter. "}], "title": "How to save a Python interactive session?", "view_count": 128090, "answer_count": 17, "code_snippet": ["<code>script</code>", "<code>%save</code>", "<code>%save my_useful_session 10-20 23</code>", "<code>my_useful_session.py</code>", "<code>%save current_session ~0/\n%save previous_session ~1/\n</code>", "<code>In[48]</code>", "<code>save filename 1-48</code>", "<code>%load my_useful_session</code>", "<code>import readline\nreadline.write_history_file('/home/ahj/history')\n</code>", "<code>~/.pystartup</code>", "<code># Add auto-completion and a stored history file of commands to your Python\n# interactive interpreter. Requires Python 2.0+, readline. Autocomplete is\n# bound to the Esc key by default (you can change it - see readline docs).\n#\n# Store the file in ~/.pystartup, and set an environment variable to point\n# to it:  \"export PYTHONSTARTUP=/home/user/.pystartup\" in bash.\n#\n# Note that PYTHONSTARTUP does *not* expand \"~\", so you have to put in the\n# full path to your home directory.\n\nimport atexit\nimport os\nimport readline\nimport rlcompleter\n\nhistoryPath = os.path.expanduser(\"~/.pyhistory\")\n\ndef save_history(historyPath=historyPath):\n    import readline\n    readline.write_history_file(historyPath)\n\nif os.path.exists(historyPath):\n    readline.read_history_file(historyPath)\n\natexit.register(save_history)\ndel os, atexit, readline, rlcompleter, save_history, historyPath\n</code>", "<code>PYTHONSTARTUP</code>", "<code>~/.bashrc</code>", "<code>export PYTHONSTARTUP=$HOME/.pystartup\n</code>", "<code>readline.parse_and_bind('tab: complete')\n</code>", "<code>readline.parse_and_bind('tab: complete')</code>", "<code>%history -f /tmp/history.py\n</code>", "<code>save</code>", "<code>ipython\n</code>", "<code>%logstart\n</code>", "<code>reinteract</code>", "<code>In [1] : import numpy as np\n....\nIn [135]: counter=collections.Counter(mapusercluster[3])\nIn [136]: counter\nOut[136]: Counter({2: 700, 0: 351, 1: 233})\n</code>", "<code>In [137]: %save test.py 1-135\n</code>", "<code>my_history.py</code>", "<code>&gt;&gt;&gt; %hist -f my_history.py\n</code>", "<code>%pastebin 3 18-20 ~1/1-5\n</code>", "<code>d = {'a': 1, 'b': 2}\n%store d  # stores the variable\ndel d\n\n%store -r d  # Refresh the variable from IPython's database.\n&gt;&gt;&gt; d\n{'a': 1, 'b': 2}\n</code>", "<code>c.StoreMagic.autorestore = True</code>", "<code>c.HistoryManager.db_log_output</code>", "<code>script</code>", "<code>util-linux</code>", "<code>script -c python</code>", "<code>typescript</code>", "<code>$ cat typescript                                                                                                      \nScript started on Sat 14 May 2016 08:30:08 AM MDT\nPython 2.7.6 (default, Jun 22 2015, 17:58:13) \n[GCC 4.8.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; print 'Hello Pythonic World'\nHello Pythonic World\n&gt;&gt;&gt; \n\nScript done on Sat 14 May 2016 08:30:42 AM MDT\n</code>", "<code>script</code>", "<code>col</code>", "<code>%history</code>", "<code>%logstart</code>", "<code>%history -o -n -p -f filename.txt</code>", "<code>-f</code>", "<code>len(IN)-1</code>", "<code>spacemacs</code>", "<code>ipython</code>", "<code>python-layer</code>", "<code>len(all_suffixes)\n';'.join(__PYTHON_EL_get_completions('''len'''))\n';'.join(__PYTHON_EL_get_completions('''all_substa'''))\nlen(all_substantives_w_suffixes)\n';'.join(__PYTHON_EL_get_completions('''len'''))\n';'.join(__PYTHON_EL_get_completions('''all'''))\n';'.join(__PYTHON_EL_get_completions('''all_'''))\n';'.join(__PYTHON_EL_get_completions('''all_w'''))\n';'.join(__PYTHON_EL_get_completions('''all_wo'''))\n';'.join(__PYTHON_EL_get_completions('''all_wor'''))\n';'.join(__PYTHON_EL_get_completions('''all_word'''))\n';'.join(__PYTHON_EL_get_completions('''all_words'''))\nlen(all_words_w_logograms)\nlen(all_verbs)\n</code>", "<code>spc f s</code>", "<code>~/.pythonhist</code>", "<code>$ cp ~/.pythonhist mycommands.py\n</code>", "<code>&gt;&gt;&gt; from mycommands import *\n</code>"], "path": "stack.django"}, {"tags": ["python", "python-2.x"], "creation_date": 1259622703, "body_markdown": "I am trying to print an integer in *Python 2.6.1* with commas as thousands separators. For example, I want to show the number `1234567` as `1,234,567`. How would I go about doing this? I have seen many examples on Google, but I am looking for the simplest practical way.\r\n\r\nIt does not need to be locale-specific to decide between periods and commas. I would prefer something as simple as reasonably possible.\r\n\r\n\r\n\r\n\r\n\r\n\r\n                 \r\n", "last_edit_date": 1513138458, "up_vote_count": 428, "link": "https://stackoverflow.com/questions/1823058/how-to-print-number-with-commas-as-thousands-separators", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1259623193, "answer_id": 1823089, "path": "stack.django.answer", "score": 10, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1259626673, "last_edit_date": 1259626673, "body_markdown": "I&#39;m sure there must be a standard library function for this, but it was fun to try to write it myself using recursion so here&#39;s what I came up with:\r\n\r\n    def intToStringWithCommas(x):\r\n        if type(x) is not int and type(x) is not long:\r\n            raise TypeError(&quot;Not an integer!&quot;)\r\n        if x &lt; 0:\r\n            return &#39;-&#39; + intToStringWithCommas(-x)\r\n        elif x &lt; 1000:\r\n            return str(x)\r\n        else:\r\n            return intToStringWithCommas(x / 1000) + &#39;,&#39; + &#39;%03d&#39; % (x % 1000)\r\n\r\nHaving said that, if someone else does find a standard way to do it, you should use that instead."}, {"tags": [], "down_vote_count": 9, "creation_date": 1259623333, "answer_id": 1823101, "path": "stack.django.answer", "score": 257, "up_vote_count": 266, "is_accepted": false, "last_activity_date": 1441136386, "last_edit_date": 1441136386, "body_markdown": "I got this to work:\r\n\r\n    &gt;&gt;&gt; import locale\r\n    &gt;&gt;&gt; locale.setlocale(locale.LC_ALL, &#39;en_US&#39;)\r\n    &#39;en_US&#39;\r\n    &gt;&gt;&gt; locale.format(&quot;%d&quot;, 1255000, grouping=True)\r\n    &#39;1,255,000&#39;\r\n\r\nSure, you don&#39;t *need* internationalization support, but it&#39;s clear, concise, and uses a built-in library.\r\n\r\nP.S. That &quot;%d&quot; is the usual %-style formatter.  You can have only one formatter, but it can be whatever you need in terms of field width and precision settings.\r\n\r\nP.P.S. If you can&#39;t get `locale` to work, I&#39;d suggest a modified version of Mark&#39;s answer:\r\n\r\n    def intWithCommas(x):\r\n        if type(x) not in [type(0), type(0L)]:\r\n            raise TypeError(&quot;Parameter must be an integer.&quot;)\r\n        if x &lt; 0:\r\n            return &#39;-&#39; + intWithCommas(-x)\r\n        result = &#39;&#39;\r\n        while x &gt;= 1000:\r\n            x, r = divmod(x, 1000)\r\n            result = &quot;,%03d%s&quot; % (r, result)\r\n        return &quot;%d%s&quot; % (x, result)\r\n\r\nRecursion is useful for the negative case, but one recursion per comma seems a bit excessive to me."}, {"tags": [], "down_vote_count": 3, "creation_date": 1259623523, "answer_id": 1823113, "path": "stack.django.answer", "score": 0, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1501940891, "last_edit_date": 1501940891, "body_markdown": "Just subclass `long` (or `float`, or whatever). This is highly practical, because this way you can still use your numbers in math ops (and therefore existing code), but they will all print nicely in your terminal. \r\n\r\n    &gt;&gt;&gt; class number(long):\r\n    \r\n            def __init__(self, value):\r\n                self = value\r\n    \r\n            def __repr__(self):\r\n                s = str(self)\r\n                l = [x for x in s if x in &#39;1234567890&#39;]\r\n                for x in reversed(range(len(s)-1)[::3]):\r\n                    l.insert(-x, &#39;,&#39;)\r\n        \t    l = &#39;&#39;.join(l[1:])\r\n                return (&#39;-&#39;+l if self &lt; 0 else l) \r\n            \r\n    &gt;&gt;&gt; number(-100000)\r\n    -100,000\r\n    &gt;&gt;&gt; number(-100)\r\n    -100\r\n    &gt;&gt;&gt; number(-12345)\r\n    -12,345\r\n    &gt;&gt;&gt; number(928374)\r\n    928,374\r\n    &gt;&gt;&gt; 345"}, {"tags": [], "down_vote_count": 0, "creation_date": 1259624546, "answer_id": 1823189, "path": "stack.django.answer", "score": 89, "up_vote_count": 89, "is_accepted": false, "last_activity_date": 1363025638, "last_edit_date": 1363025638, "body_markdown": "Here is the locale grouping code after removing irrelevant parts and cleaning it up a little:\r\n\r\n(The following only works for integers)\r\n\r\n    def group(number):\r\n        s = &#39;%d&#39; % number\r\n        groups = []\r\n        while s and s[-1].isdigit():\r\n            groups.append(s[-3:])\r\n            s = s[:-3]\r\n        return s + &#39;,&#39;.join(reversed(groups))\r\n\r\n    &gt;&gt;&gt; group(-23432432434.34)\r\n    &#39;-23,432,432,434&#39;\r\n\r\n----------\r\n\r\n\r\nThere are already some good answers in here. I just want to add this for future reference. In python 2.7 there is going to be a format specifier for thousands separator. According to [python docs][1] it works like this\r\n\r\n    &gt;&gt;&gt; &#39;{:20,.2f}&#39;.format(f)\r\n    &#39;18,446,744,073,709,551,616.00&#39;\r\n\r\nIn python3.1 you can do the same thing like this:\r\n\r\n    &gt;&gt;&gt; format(1234567, &#39;,d&#39;)\r\n    &#39;1,234,567&#39;\r\n\r\n  [1]: http://docs.python.org/dev/whatsnew/2.7.html#pep-378-format-specifier-for-thousands-separator"}, {"tags": [], "down_vote_count": 1, "creation_date": 1289050429, "answer_id": 4113289, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1289052378, "last_edit_date": 1289052378, "body_markdown": "Here&#39;s one that works for floats too:\r\n\r\n    def float2comma(f):\r\n    \ts = str(abs(f)) # Convert to a string\r\n    \tdecimalposition = s.find(&quot;.&quot;) # Look for decimal point\r\n    \tif decimalposition == -1:\r\n    \t\tdecimalposition = len(s) # If no decimal, then just work from the end\r\n    \tout = &quot;&quot; \r\n    \tfor i in range(decimalposition+1, len(s)): # do the decimal\r\n    \t\tif not (i-decimalposition-1) % 3 and i-decimalposition-1: out = out+&quot;,&quot;\r\n    \t\tout = out+s[i]\t\t\r\n    \tif len(out):\r\n    \t\tout = &quot;.&quot;+out # add the decimal point if necessary\r\n    \tfor i in range(decimalposition-1,-1,-1): # working backwards from decimal point\r\n    \t\tif not (decimalposition-i-1) % 3 and decimalposition-i-1: out = &quot;,&quot;+out\r\n    \t\tout = s[i]+out\t\t\r\n    \tif f &lt; 0:\r\n    \t\tout = &quot;-&quot;+out\r\n    \treturn out\r\n\r\nUsage Example:\r\n\r\n    &gt;&gt;&gt; float2comma(10000.1111)\r\n    &#39;10,000.111,1&#39;\r\n    &gt;&gt;&gt; float2comma(656565.122)\r\n    &#39;656,565.122&#39;\r\n    &gt;&gt;&gt; float2comma(-656565.122)\r\n    &#39;-656,565.122&#39;\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1290007155, "answer_id": 4205875, "path": "stack.django.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1290007155, "body_markdown": "From the [comments](http://code.activestate.com/recipes/498181-add-thousands-separator-commas-to-formatted-number/#c3) to activestate recipe [498181](http://code.activestate.com/recipes/498181-add-thousands-separator-commas-to-formatted-number/) I reworked this:\r\n\r\n    import re\r\n    def thous(x, sep=&#39;,&#39;, dot=&#39;.&#39;):\r\n        num, _, frac = str(x).partition(dot)\r\n        num = re.sub(r&#39;(\\d{3})(?=\\d)&#39;, r&#39;\\1&#39;+sep, num[::-1])[::-1]\r\n        if frac:\r\n            num += dot + frac\r\n        return num\r\n\r\nIt uses the regular expressions feature: [lookahead](http://docs.python.org/howto/regex.html#lookahead-assertions) i.e. `(?=\\d)` to make sure only groups of three digits that have a digit &#39;after&#39; them get a comma. I say &#39;after&#39; because the string is reverse at this point.\r\n\r\n`[::-1]` just reverses a string."}, {"tags": [], "down_vote_count": 6, "creation_date": 1324357401, "answer_id": 8571035, "path": "stack.django.answer", "score": -6, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1325200570, "last_edit_date": 1325200570, "body_markdown": "For floats:\r\n\r\n    float(filter(lambda x: x!=&#39;,&#39;, &#39;1,234.52&#39;))\r\n    # returns 1234.52\r\n\r\n\r\nFor ints:\r\n\r\n    int(filter(lambda x: x!=&#39;,&#39;, &#39;1,234&#39;))\r\n    # returns 1234\r\n"}, {"tags": [], "down_vote_count": 3, "creation_date": 1327001728, "answer_id": 8932161, "path": "stack.django.answer", "score": 83, "up_vote_count": 86, "is_accepted": false, "last_activity_date": 1327001728, "body_markdown": "For inefficiency and unreadability it&#39;s hard to beat:\r\n\r\n    &gt;&gt;&gt; import itertools\r\n    &gt;&gt;&gt; s = &#39;-1234567&#39;\r\n    &gt;&gt;&gt; &#39;,&#39;.join([&quot;%s%s%s&quot; % (x[0], x[1] or &#39;&#39;, x[2] or &#39;&#39;) for x in itertools.izip_longest(s[::-1][::3], s[::-1][1::3], s[::-1][2::3])])[::-1].replace(&#39;-,&#39;,&#39;-&#39;)"}, {"tags": [], "down_vote_count": 7, "creation_date": 1330542449, "answer_id": 9505119, "path": "stack.django.answer", "score": -7, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1332790383, "last_edit_date": 1332790383, "body_markdown": "If you don&#39;t want to depend on any external libraries:\r\n\r\n     s = str(1234567)\r\n     print &#39;,&#39;.join([s[::-1][k:k+3][::-1] for k in xrange(len(s)-1, -1, -3)])\r\n\r\nThis works only for non-negative integers."}, {"tags": [], "down_vote_count": 0, "creation_date": 1337882537, "answer_id": 10742904, "path": "stack.django.answer", "score": 1221, "up_vote_count": 1221, "is_accepted": true, "last_activity_date": 1481704598, "last_edit_date": 1481704598, "body_markdown": "For Python \u2265 2.7:\r\n\r\n    &quot;{:,}&quot;.format(value)\r\n\r\nPer [Format Specification Mini-Language](https://docs.python.org/library/string.html#format-specification-mini-language),\r\n\r\n&gt; The `&#39;,&#39;` option signals the use of a comma for a thousands separator. For a locale aware separator, use the `&#39;n&#39;` integer presentation type instead."}, {"tags": [], "down_vote_count": 1, "creation_date": 1340330661, "answer_id": 11149343, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1501940856, "last_edit_date": 1501940856, "body_markdown": "I&#39;m using python 2.5 so I don&#39;t have access to the built-in formatting.\r\n\r\nI looked at the Django code intcomma (intcomma_recurs in code below) and realized it&#39;s inefficient, because it&#39;s recursive and also compiling the regex on every run is not a good thing either.  This is not necessary an &#39;issue&#39; as django isn&#39;t really THAT focused on this kind of low-level performance.  Also, I was expecting a factor of 10 difference in performance, but it&#39;s only 3 times slower.\r\n\r\nOut of curiosity I implemented a few versions of intcomma to see what the performance advantages are when using regex.  My test data concludes a slight advantage for this task, but surprisingly not much at all.\r\n\r\nI also was pleased to see what I suspected: using the reverse xrange approach is unnecessary in the no-regex case, but it does make the code look slightly better at the cost of ~10% performance.\r\n\r\nAlso, I assume what you&#39;re passing in is a string and looks somewhat like a number.  Results undetermined otherwise.\r\n\r\n    from __future__ import with_statement\r\n    from contextlib import contextmanager\r\n    import re,time\r\n    \r\n    re_first_num = re.compile(r&quot;\\d&quot;)\r\n    def intcomma_noregex(value):\r\n        end_offset, start_digit, period = len(value),re_first_num.search(value).start(),value.rfind(&#39;.&#39;)\r\n        if period == -1:\r\n            period=end_offset\r\n        segments,_from_index,leftover = [],0,(period-start_digit) % 3\r\n        for _index in xrange(start_digit+3 if not leftover else start_digit+leftover,period,3):\r\n            segments.append(value[_from_index:_index])\r\n            _from_index=_index\r\n        if not segments:\r\n            return value\r\n        segments.append(value[_from_index:])\r\n        return &#39;,&#39;.join(segments)\r\n    \r\n    def intcomma_noregex_reversed(value):\r\n        end_offset, start_digit, period = len(value),re_first_num.search(value).start(),value.rfind(&#39;.&#39;)\r\n        if period == -1:\r\n            period=end_offset\r\n        _from_index,segments = end_offset,[]\r\n        for _index in xrange(period-3,start_digit,-3):\r\n            segments.append(value[_index:_from_index])\r\n            _from_index=_index\r\n        if not segments:\r\n            return value\r\n        segments.append(value[:_from_index])\r\n        return &#39;,&#39;.join(reversed(segments))\r\n    \r\n    re_3digits = re.compile(r&#39;(?&lt;=\\d)\\d{3}(?!\\d)&#39;)\r\n    def intcomma(value):\r\n        segments,last_endoffset=[],len(value)\r\n        while last_endoffset &gt; 3:\r\n            digit_group = re_3digits.search(value,0,last_endoffset)\r\n            if not digit_group:\r\n                break\r\n            segments.append(value[digit_group.start():last_endoffset])\r\n            last_endoffset=digit_group.start()\r\n        if not segments:\r\n            return value\r\n        if last_endoffset:\r\n            segments.append(value[:last_endoffset])\r\n        return &#39;,&#39;.join(reversed(segments))\r\n    \r\n    def intcomma_recurs(value):\r\n        &quot;&quot;&quot;\r\n        Converts an integer to a string containing commas every three digits.\r\n        For example, 3000 becomes &#39;3,000&#39; and 45000 becomes &#39;45,000&#39;.\r\n        &quot;&quot;&quot;\r\n        new = re.sub(&quot;^(-?\\d+)(\\d{3})&quot;, &#39;\\g&lt;1&gt;,\\g&lt;2&gt;&#39;, str(value))\r\n        if value == new:\r\n            return new\r\n        else:\r\n            return intcomma(new)\r\n    \r\n    @contextmanager\r\n    def timed(save_time_func):\r\n        begin=time.time()\r\n        try:\r\n            yield\r\n        finally:\r\n            save_time_func(time.time()-begin)\r\n    \r\n    def testset_xsimple(func):\r\n        func(&#39;5&#39;)\r\n    \r\n    def testset_simple(func):\r\n        func(&#39;567&#39;)\r\n    \r\n    def testset_onecomma(func):\r\n        func(&#39;567890&#39;)\r\n    \r\n    def testset_complex(func):\r\n        func(&#39;-1234567.024&#39;)\r\n    \r\n    def testset_average(func):\r\n        func(&#39;-1234567.024&#39;)\r\n        func(&#39;567&#39;)\r\n        func(&#39;5674&#39;)\r\n    \r\n    if __name__ == &#39;__main__&#39;:\r\n        print &#39;Test results:&#39;\r\n        for test_data in (&#39;5&#39;,&#39;567&#39;,&#39;1234&#39;,&#39;1234.56&#39;,&#39;-253892.045&#39;):\r\n            for func in (intcomma,intcomma_noregex,intcomma_noregex_reversed,intcomma_recurs):\r\n                print func.__name__,test_data,func(test_data)\r\n        times=[]\r\n        def overhead(x):\r\n            pass\r\n        for test_run in xrange(1,4):\r\n            for func in (intcomma,intcomma_noregex,intcomma_noregex_reversed,intcomma_recurs,overhead):\r\n                for testset in (testset_xsimple,testset_simple,testset_onecomma,testset_complex,testset_average):\r\n                    for x in xrange(1000): # prime the test\r\n                        testset(func)\r\n                    with timed(lambda x:times.append(((test_run,func,testset),x))):\r\n                        for x in xrange(50000):\r\n                            testset(func)\r\n        for (test_run,func,testset),_delta in times:\r\n            print test_run,func.__name__,testset.__name__,_delta\r\n\r\n\r\n\r\nAnd here are the test results:\r\n\r\n    intcomma 5 5\r\n    intcomma_noregex 5 5\r\n    intcomma_noregex_reversed 5 5\r\n    intcomma_recurs 5 5\r\n    intcomma 567 567\r\n    intcomma_noregex 567 567\r\n    intcomma_noregex_reversed 567 567\r\n    intcomma_recurs 567 567\r\n    intcomma 1234 1,234\r\n    intcomma_noregex 1234 1,234\r\n    intcomma_noregex_reversed 1234 1,234\r\n    intcomma_recurs 1234 1,234\r\n    intcomma 1234.56 1,234.56\r\n    intcomma_noregex 1234.56 1,234.56\r\n    intcomma_noregex_reversed 1234.56 1,234.56\r\n    intcomma_recurs 1234.56 1,234.56\r\n    intcomma -253892.045 -253,892.045\r\n    intcomma_noregex -253892.045 -253,892.045\r\n    intcomma_noregex_reversed -253892.045 -253,892.045\r\n    intcomma_recurs -253892.045 -253,892.045\r\n    1 intcomma testset_xsimple 0.0410001277924\r\n    1 intcomma testset_simple 0.0369999408722\r\n    1 intcomma testset_onecomma 0.213000059128\r\n    1 intcomma testset_complex 0.296000003815\r\n    1 intcomma testset_average 0.503000020981\r\n    1 intcomma_noregex testset_xsimple 0.134000062943\r\n    1 intcomma_noregex testset_simple 0.134999990463\r\n    1 intcomma_noregex testset_onecomma 0.190999984741\r\n    1 intcomma_noregex testset_complex 0.209000110626\r\n    1 intcomma_noregex testset_average 0.513000011444\r\n    1 intcomma_noregex_reversed testset_xsimple 0.124000072479\r\n    1 intcomma_noregex_reversed testset_simple 0.12700009346\r\n    1 intcomma_noregex_reversed testset_onecomma 0.230000019073\r\n    1 intcomma_noregex_reversed testset_complex 0.236999988556\r\n    1 intcomma_noregex_reversed testset_average 0.56299996376\r\n    1 intcomma_recurs testset_xsimple 0.348000049591\r\n    1 intcomma_recurs testset_simple 0.34600019455\r\n    1 intcomma_recurs testset_onecomma 0.625\r\n    1 intcomma_recurs testset_complex 0.773999929428\r\n    1 intcomma_recurs testset_average 1.6890001297\r\n    1 overhead testset_xsimple 0.0179998874664\r\n    1 overhead testset_simple 0.0190000534058\r\n    1 overhead testset_onecomma 0.0190000534058\r\n    1 overhead testset_complex 0.0190000534058\r\n    1 overhead testset_average 0.0309998989105\r\n    2 intcomma testset_xsimple 0.0360000133514\r\n    2 intcomma testset_simple 0.0369999408722\r\n    2 intcomma testset_onecomma 0.207999944687\r\n    2 intcomma testset_complex 0.302000045776\r\n    2 intcomma testset_average 0.523000001907\r\n    2 intcomma_noregex testset_xsimple 0.139999866486\r\n    2 intcomma_noregex testset_simple 0.141000032425\r\n    2 intcomma_noregex testset_onecomma 0.203999996185\r\n    2 intcomma_noregex testset_complex 0.200999975204\r\n    2 intcomma_noregex testset_average 0.523000001907\r\n    2 intcomma_noregex_reversed testset_xsimple 0.130000114441\r\n    2 intcomma_noregex_reversed testset_simple 0.129999876022\r\n    2 intcomma_noregex_reversed testset_onecomma 0.236000061035\r\n    2 intcomma_noregex_reversed testset_complex 0.241999864578\r\n    2 intcomma_noregex_reversed testset_average 0.582999944687\r\n    2 intcomma_recurs testset_xsimple 0.351000070572\r\n    2 intcomma_recurs testset_simple 0.352999925613\r\n    2 intcomma_recurs testset_onecomma 0.648999929428\r\n    2 intcomma_recurs testset_complex 0.808000087738\r\n    2 intcomma_recurs testset_average 1.81900000572\r\n    2 overhead testset_xsimple 0.0189998149872\r\n    2 overhead testset_simple 0.0189998149872\r\n    2 overhead testset_onecomma 0.0190000534058\r\n    2 overhead testset_complex 0.0179998874664\r\n    2 overhead testset_average 0.0299999713898\r\n    3 intcomma testset_xsimple 0.0360000133514\r\n    3 intcomma testset_simple 0.0360000133514\r\n    3 intcomma testset_onecomma 0.210000038147\r\n    3 intcomma testset_complex 0.305999994278\r\n    3 intcomma testset_average 0.493000030518\r\n    3 intcomma_noregex testset_xsimple 0.131999969482\r\n    3 intcomma_noregex testset_simple 0.136000156403\r\n    3 intcomma_noregex testset_onecomma 0.192999839783\r\n    3 intcomma_noregex testset_complex 0.202000141144\r\n    3 intcomma_noregex testset_average 0.509999990463\r\n    3 intcomma_noregex_reversed testset_xsimple 0.125999927521\r\n    3 intcomma_noregex_reversed testset_simple 0.126999855042\r\n    3 intcomma_noregex_reversed testset_onecomma 0.235999822617\r\n    3 intcomma_noregex_reversed testset_complex 0.243000030518\r\n    3 intcomma_noregex_reversed testset_average 0.56200003624\r\n    3 intcomma_recurs testset_xsimple 0.337000131607\r\n    3 intcomma_recurs testset_simple 0.342000007629\r\n    3 intcomma_recurs testset_onecomma 0.609999895096\r\n    3 intcomma_recurs testset_complex 0.75\r\n    3 intcomma_recurs testset_average 1.68300008774\r\n    3 overhead testset_xsimple 0.0189998149872\r\n    3 overhead testset_simple 0.018000125885\r\n    3 overhead testset_onecomma 0.018000125885\r\n    3 overhead testset_complex 0.0179998874664\r\n    3 overhead testset_average 0.0299999713898\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1342705366, "answer_id": 11562205, "path": "stack.django.answer", "score": 30, "up_vote_count": 31, "is_accepted": false, "last_activity_date": 1376666031, "last_edit_date": 1376666031, "body_markdown": "Here&#39;s a one-line regex replacement:\r\n\r\n    re.sub(&quot;(\\d)(?=(\\d{3})+(?!\\d))&quot;, r&quot;\\1,&quot;, &quot;%d&quot; % val)\r\n\r\nWorks only for inegral outputs:\r\n\r\n    import re\r\n    val = 1234567890\r\n    re.sub(&quot;(\\d)(?=(\\d{3})+(?!\\d))&quot;, r&quot;\\1,&quot;, &quot;%d&quot; % val)\r\n    # Returns: &#39;1,234,567,890&#39;\r\n\r\n    val = 1234567890.1234567890\r\n    # Returns: &#39;1,234,567,890&#39;\r\n\r\nOr for floats with less than 4 digits, change the format specifier to `%.3f`:\r\n\r\n    re.sub(&quot;(\\d)(?=(\\d{3})+(?!\\d))&quot;, r&quot;\\1,&quot;, &quot;%.3f&quot; % val)\r\n    # Returns: &#39;1,234,567,890.123&#39;\r\n\r\n**NB:** Doesn&#39;t work correctly with more than three decimal digits as it will attempt to group the decimal part:\r\n\r\n    re.sub(&quot;(\\d)(?=(\\d{3})+(?!\\d))&quot;, r&quot;\\1,&quot;, &quot;%.5f&quot; % val)\r\n    # Returns: &#39;1,234,567,890.12,346&#39;\r\n\r\n\r\n#How it works\r\nLet&#39;s break it down:\r\n\r\n    re.sub(pattern, repl, string)\r\n\r\n    pattern = \\\r\n        &quot;(\\d)           # Find one digit...\r\n         (?=            # that is followed by...\r\n             (\\d{3})+   # one or more groups of three digits...\r\n             (?!\\d)     # which are not followed by any more digits.\r\n         )&quot;,\r\n\r\n    repl = \\\r\n        r&quot;\\1,&quot;,         # Replace that one digit by itself, followed by a comma,\r\n                        # and continue looking for more matches later in the string.\r\n                        # (re.sub() replaces all matches it finds in the input)\r\n\r\n    string = \\\r\n        &quot;%d&quot; % val      # Format the string as a decimal to begin with"}, {"tags": [], "down_vote_count": 1, "creation_date": 1349373180, "answer_id": 12732922, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1349373180, "body_markdown": "Here is another variant using a generator function that works for integers:\r\n\r\n    def ncomma(num):\r\n        def _helper(num):\r\n            # assert isinstance(numstr, basestring)\r\n            numstr = &#39;%d&#39; % num\r\n            for ii, digit in enumerate(reversed(numstr)):\r\n                if ii and ii % 3 == 0 and digit.isdigit():\r\n                    yield &#39;,&#39;\r\n                yield digit\r\n\r\n        return &#39;&#39;.join(reversed([n for n in _helper(num)]))\r\n\r\nAnd here&#39;s a test:\r\n\r\n    &gt;&gt;&gt; for i in (0, 99, 999, 9999, 999999, 1000000, -1, -111, -1111, -111111, -1000000):\r\n    ...     print i, ncomma(i)\r\n    ... \r\n    0 0\r\n    99 99\r\n    999 999\r\n    9999 9,999\r\n    999999 999,999\r\n    1000000 1,000,000\r\n    -1 -1\r\n    -111 -111\r\n    -1111 -1,111\r\n    -111111 -111,111\r\n    -1000000 -1,000,000\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1370368106, "answer_id": 16924278, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1438269967, "last_edit_date": 1438269967, "body_markdown": "One liner for Python 2.5+ and Python 3 (positive int only):\r\n\r\n    &#39;&#39;.join(reversed([x + (&#39;,&#39; if i and not i % 3 else &#39;&#39;) for i, x in enumerate(reversed(str(1234567)))]))"}, {"tags": [], "down_vote_count": 1, "creation_date": 1386532263, "answer_id": 20458213, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1386532263, "body_markdown": "This does money along with the commas\r\n\r\n    def format_money(money, presym=&#39;$&#39;, postsym=&#39;&#39;):\r\n    \tfmt = &#39;%0.2f&#39; % money\r\n    \tdot = string.find(fmt, &#39;.&#39;)\r\n    \tret = []\r\n    \tif money &lt; 0 :\r\n    \t\tret.append(&#39;(&#39;)\r\n    \t\tp0 = 1\r\n    \telse :\r\n    \t\tp0 = 0\r\n    \tret.append(presym)\r\n    \tp1 = (dot-p0) % 3 + p0\r\n    \twhile True :\r\n    \t\tret.append(fmt[p0:p1])\r\n    \t\tif p1 == dot : break\r\n    \t\tret.append(&#39;,&#39;)\r\n    \t\tp0 = p1\r\n    \t\tp1 += 3\r\n    \tret.append(fmt[dot:])\t# decimals\r\n    \tret.append(postsym)\r\n    \tif money &lt; 0 : ret.append(&#39;)&#39;)\r\n    \treturn &#39;&#39;.join(ret)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1439815394, "answer_id": 32050746, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1439815394, "body_markdown": "You can also use `&#39;{:n}&#39;.format( value )` for a locale representation. I think this is the simpliest way for a locale solution.\r\n\r\nFor more information, search for `thousands` in [Python DOC][1].\r\n\r\nFor currency, you can use `locale.currency`, setting the flag `grouping`:\r\n\r\n**Code**\r\n\r\n    import locale\r\n    \r\n    locale.setlocale( locale.LC_ALL, &#39;&#39; )\r\n    locale.currency( 1234567.89, grouping = True )\r\n\r\n**Output**\r\n\r\n    &#39;Portuguese_Brazil.1252&#39;\r\n    &#39;R$ 1.234.567,89&#39;\r\n\r\n  [1]: https://docs.python.org/3.5/library/string.html#format-specification-mini-language"}, {"tags": [], "down_vote_count": 1, "creation_date": 1459169507, "answer_id": 36262731, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1459169781, "last_edit_date": 1459169781, "body_markdown": "I am a Python beginner, but an experienced programmer. I have Python 3.5, so I can just use the comma, but this is nonetheless an interesting programming exercise. Consider the case of an unsigned integer. The most readable Python program for adding thousands separators appears to be:\r\n\r\n    def add_commas(instr):\r\n        out = [instr[0]]\r\n        for i in range(1, len(instr)):\r\n            if (len(instr) - i) % 3 == 0:\r\n                out.append(&#39;,&#39;)\r\n            out.append(instr[i])\r\n        return &#39;&#39;.join(out)\r\n\r\nIt is also possible to use a list comprehension:\r\n\r\n    add_commas(instr):\r\n        rng = reversed(range(1, len(instr) + (len(instr) - 1)//3 + 1))\r\n        out = [&#39;,&#39; if j%4 == 0 else instr[-(j - j//4)] for j in rng]\r\n        return &#39;&#39;.join(out)\r\n\r\nThis is shorter, and could be a one liner, but you will have to do some mental gymnastics to understand why it works. In both cases we get:\r\n\r\n    for i in range(1, 11):\r\n        instr = &#39;1234567890&#39;[:i]\r\n        print(instr, add_commas(instr))\r\n\r\n&lt;!-- --&gt;\r\n\r\n    1 1\r\n    12 12\r\n    123 123\r\n    1234 1,234\r\n    12345 12,345\r\n    123456 123,456\r\n    1234567 1,234,567\r\n    12345678 12,345,678\r\n    123456789 123,456,789\r\n    1234567890 1,234,567,890\r\n\r\nThe first version is the more sensible choice, if you want the program to be understood."}, {"tags": [], "down_vote_count": 1, "creation_date": 1467435244, "answer_id": 38156617, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1467435244, "body_markdown": "from Python version 2.6 you can do this:\r\n\r\n    def format_builtin(n):\r\n        return format(n, &#39;,&#39;)\r\n\r\nFor Python versions &lt; 2.6 and just for your information, here are 2 manual solutions, they turn floats to ints but negative numbers work correctly:\r\n\r\n    def format_number_using_lists(number):\r\n        string = &#39;%d&#39; % number\r\n        result_list = list(string)\r\n        indexes = range(len(string))\r\n        for index in indexes[::-3][1:]:\r\n            if result_list[index] != &#39;-&#39;:\r\n                result_list.insert(index+1, &#39;,&#39;)\r\n        return &#39;&#39;.join(result_list)\r\n\r\nfew things to notice here:\r\n\r\n - this line: **string = &#39;%d&#39; % number** beautifully converts a number to a string, it supports negatives and it drops fractions from floats, making them ints;\r\n - this slice **indexes[::-3]** returns each third item starting from\r\n   the end, so I used another slice **[1:]** to remove the very last item\r\n   cuz I don&#39;t need a comma after the last number;\r\n - this conditional **if l[index] != &#39;-&#39;** is being used to support negative numbers, do not insert a comma after the minus sign.\r\n\r\nAnd a more hardcore version:\r\n\r\n    def format_number_using_generators_and_list_comprehensions(number):\r\n        string = &#39;%d&#39; % number\r\n        generator = reversed( \r\n            [\r\n                value+&#39;,&#39; if (index!=0 and value!=&#39;-&#39; and index%3==0) else value\r\n                for index,value in enumerate(reversed(string))\r\n            ]\r\n        )\r\n        return &#39;&#39;.join(generator)"}, {"tags": [], "down_vote_count": 1, "creation_date": 1469370404, "answer_id": 38553110, "path": "stack.django.answer", "score": 13, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1494338593, "last_edit_date": 1494338593, "body_markdown": "This is what I do for floats.  Although, honestly, I&#39;m not sure which versions it works for - I&#39;m using 2.7:\r\n\r\n    my_number = 4385893.382939491\r\n    \r\n    my_string = &#39;{:0,.2f}&#39;.format(my_number)\r\n\r\nReturns: 4,385,893.38\r\n\r\n_Update: I recently had an issue with this format (couldn&#39;t tell you the exact reason), but was able to fix it by dropping the `0`:_\r\n\r\n    my_string = &#39;{:,.2f}&#39;.format(my_number)"}, {"tags": [], "down_vote_count": 3, "creation_date": 1472857717, "answer_id": 39301723, "path": "stack.django.answer", "score": -1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1484413354, "last_edit_date": 1484413354, "body_markdown": "I prefer the locale-based solution for real projects, but here is a simple and effective alternative:\r\n\r\n    def format_money(f, delimiter=&#39;,&#39;, frac_digits=2):\r\n\r\n        negative_fix = int(f &lt; 0)\r\n\r\n        s = &#39;%.*f&#39; % (frac_digits, f)\r\n        if len(s) &lt; 5 + frac_digits + negative_fix:\r\n            return s\r\n\r\n        l = list(s)\r\n        l_fix = l[negative_fix:]\r\n        p = len(l_fix) - frac_digits - 5\r\n        l_fix[p::-3] = [i + delimiter for i in l_fix[p::-3]]\r\n\r\n        return &#39;&#39;.join(l[:negative_fix] + l_fix)\r\n\r\nGist with doctests there - https://gist.github.com/ei-grad/b290dc761ae253af69438bbb94d82683"}, {"tags": [], "down_vote_count": 1, "creation_date": 1498923986, "answer_id": 44862749, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1498923986, "body_markdown": "**Python 3**\r\n------------\r\n--\r\n\r\n**Integers (without decimal):**\r\n\r\n`&quot;{:,d}&quot;.format(1234567)`\r\n\r\n\r\n--\r\n\r\n**Floats (with decimal):**\r\n\r\n`&quot;{:,.2f}&quot;.format(1234567)`\r\n\r\nwhere the number before `f` specifies the number of decimal places.\r\n\r\n--\r\n\r\n**Bonus**\r\n\r\nQuick-and-dirty starter function for the Indian lakhs/crores numbering system (12,34,567):\r\n\r\nhttps://stackoverflow.com/a/44832241/4928578"}, {"tags": [], "down_vote_count": 1, "creation_date": 1501227520, "answer_id": 45367591, "path": "stack.django.answer", "score": 12, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1503469540, "last_edit_date": 1503469540, "body_markdown": "I&#39;m surprised that no one has mentioned that you can do this with f-strings in Python 3.6 as easy as this:\r\n\r\n    &gt;&gt;&gt; num = 10000000\r\n    &gt;&gt;&gt; print(f&quot;{num:,d}&quot;)\r\n    10,000,000\r\n\r\n... where the part after the colon is the format specifier. The comma is the separator character you want, so `f&quot;{num:_d}&quot;` uses underscores instead of a comma.\r\n\r\nThis is equivalent of using `format(num, &quot;,d&quot;)` for older versions of python 3."}, {"tags": [], "down_vote_count": 1, "creation_date": 1501230844, "answer_id": 45368647, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1501231756, "last_edit_date": 1501231756, "body_markdown": "I have a python 2 and python 3 version of this code. I know that the question was asked for python 2 but now (8 years later lol) people will probably be using python 3. &lt;br&gt;&lt;br&gt;Python 3 Code:\r\n\r\n    import random\r\n    number = str(random.randint(1, 10000000))\r\n    comma_placement = 4\r\n    print(&#39;The original number is: {}. &#39;.format(number))\r\n    while True:\r\n        if len(number) % 3 == 0:\r\n            for i in range(0, len(number) // 3 - 1):\r\n                number = number[0:len(number) - comma_placement + 1] + &#39;,&#39; + number[len(number) - comma_placement + 1:]\r\n                comma_placement = comma_placement + 4\r\n        else:\r\n            for i in range(0, len(number) // 3):\r\n                number = number[0:len(number) - comma_placement + 1] + &#39;,&#39; + number[len(number) - comma_placement + 1:]\r\n        break\r\n    print(&#39;The new and improved number is: {}&#39;.format(number))        \r\n&lt;br&gt;\r\nPython 2 Code:  (Edit. The python 2 code isn&#39;t working. I am thinking that the syntax is different).    \r\n\r\n    import random\r\n    number = str(random.randint(1, 10000000))\r\n    comma_placement = 4\r\n    print &#39;The original number is: %s.&#39; % (number)\r\n    while True:\r\n        if len(number) % 3 == 0:\r\n            for i in range(0, len(number) // 3 - 1):\r\n                number = number[0:len(number) - comma_placement + 1] + &#39;,&#39; + number[len(number) - comma_placement + 1:]\r\n                comma_placement = comma_placement + 4\r\n        else:\r\n            for i in range(0, len(number) // 3):\r\n                number = number[0:len(number) - comma_placement + 1] + &#39;,&#39; + number[len(number) - comma_placement + 1:]\r\n        break\r\n    print &#39;The new and improved number is: %s.&#39; % (number) "}, {"tags": [], "down_vote_count": 0, "creation_date": 1506591581, "answer_id": 46465860, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1506591581, "body_markdown": "Slightly expanding the answer of Ian Schneider:\r\n\r\nIf you want to use a custom thousands separator, the simplest solution is:\r\n\r\n    &#39;{:,}&#39;.format(value).replace(&#39;,&#39;, your_custom_thousands_separator)\r\n\r\n## Examples\r\n\r\n    &#39;{:,.2f}&#39;.format(123456789.012345).replace(&#39;,&#39;, &#39; &#39;)\r\n\r\nIf you want the German representation like this, it gets a bit more complicated:\r\n\r\n    (&#39;{:,.2f}&#39;.format(123456789.012345)\r\n              .replace(&#39;,&#39;, &#39; &#39;)  # &#39;save&#39; the thousands separators \r\n              .replace(&#39;.&#39;, &#39;,&#39;)  # dot to comma\r\n              .replace(&#39; &#39;, &#39;.&#39;)) # thousand separators to dot"}, {"tags": [], "down_vote_count": 0, "creation_date": 1510179219, "answer_id": 47190603, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1510179219, "body_markdown": "The accepted answer is fine, but I actually prefer `format(number,&#39;,&#39;)`. Easier for me to interpret and remember. \r\n\r\nhttps://docs.python.org/3/library/functions.html#format\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1519286851, "answer_id": 48922374, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1519286851, "body_markdown": "&lt;h1&gt;Italian numbers: thousand separator is a &#39;.&#39;&lt;/h1&gt;\r\nI solved it this way... for a dictonary\r\n\r\n    from random import randint\r\n    \r\n    voci = {\r\n        &quot;immobilizzazioni&quot;: randint(200000, 500000),\r\n        &quot;tfr&quot;: randint(10000, 25000),\r\n        &quot;ac&quot;: randint(150000, 200000),\r\n        &quot;fondo&quot;: randint(10500, 22350),\r\n        &quot;debiti&quot;: randint(150000, 250000),\r\n        &quot;ratei_attivi&quot;: randint(2000, 2500),\r\n        &quot;ratei_passivi&quot;: randint(1500, 2600),\r\n        &quot;crediti_v_soci&quot;: randint(10000, 30000)\r\n    }\r\n    \r\n    \r\n    testo_rnd2 = &quot;&quot;&quot;Nell\u2019azienda Hypermax S.p.a. di Bologna le immobilizzazioni valgono {immobilizzazioni:,} \u20ac, i debiti per TFR sono pari a {tfr:,} \u20ac, l\u2019attivo circolante &#232; di {ac:,} euro, il fondo rischi ed oneri ha un importo pari a {fondo:,} euro, i debiti sono {debiti:,} \u20ac, i ratei e risconti attivi sono pari a {ratei_attivi:,} euro, i ratei e risconti passivi sono pari a {ratei_passivi:,} euro. I crediti verso i soci sono pari a {crediti_v_soci:,} euro.&quot;&quot;&quot;\r\n    \r\n    print(testo_rnd2)\r\n\r\nout: \r\nle immobilizzazioni valgono 419.168 \u20ac. i debiti per TFR sono pari a 13.255 \u20ac. l\u2019attivo circolante &#232; di 195.443 euro. il fondo rischi ed oneri ha un importo pari a 13.374 euro. i debiti sono 180.947 \u20ac. i ratei e risconti attivi sono pari a 2.271 euro. i ratei e risconti passivi sono pari a 1.864 euro. I crediti verso i soci sono pari a 17.630 euro.\r\n"}], "title": "How to print number with commas as thousands separators?", "view_count": 228214, "answer_count": 26, "code_snippet": ["<code>1234567</code>", "<code>1,234,567</code>", "<code>\"{:,}\".format(value)\n</code>", "<code>','</code>", "<code>'n'</code>", "<code>&gt;&gt;&gt; import locale\n&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'en_US')\n'en_US'\n&gt;&gt;&gt; locale.format(\"%d\", 1255000, grouping=True)\n'1,255,000'\n</code>", "<code>locale</code>", "<code>def intWithCommas(x):\n    if type(x) not in [type(0), type(0L)]:\n        raise TypeError(\"Parameter must be an integer.\")\n    if x &lt; 0:\n        return '-' + intWithCommas(-x)\n    result = ''\n    while x &gt;= 1000:\n        x, r = divmod(x, 1000)\n        result = \",%03d%s\" % (r, result)\n    return \"%d%s\" % (x, result)\n</code>", "<code>locale</code>", "<code>setlocale</code>", "<code>def group(number):\n    s = '%d' % number\n    groups = []\n    while s and s[-1].isdigit():\n        groups.append(s[-3:])\n        s = s[:-3]\n    return s + ','.join(reversed(groups))\n\n&gt;&gt;&gt; group(-23432432434.34)\n'-23,432,432,434'\n</code>", "<code>&gt;&gt;&gt; '{:20,.2f}'.format(f)\n'18,446,744,073,709,551,616.00'\n</code>", "<code>&gt;&gt;&gt; format(1234567, ',d')\n'1,234,567'\n</code>", "<code>&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; s = '-1234567'\n&gt;&gt;&gt; ','.join([\"%s%s%s\" % (x[0], x[1] or '', x[2] or '') for x in itertools.izip_longest(s[::-1][::3], s[::-1][1::3], s[::-1][2::3])])[::-1].replace('-,','-')\n</code>", "<code>lambda x: (lambda s: ','.join([\"%s%s%s\" % (x[0], x[1] or '', x[2] or '') for x in itertools.izip_longest(s[::-1][::3], s[::-1][1::3], s[::-1][2::3])])[::-1].replace('-,','-'))(str(x))</code>", "<code>re.sub(\"(\\d)(?=(\\d{3})+(?!\\d))\", r\"\\1,\", \"%d\" % val)\n</code>", "<code>import re\nval = 1234567890\nre.sub(\"(\\d)(?=(\\d{3})+(?!\\d))\", r\"\\1,\", \"%d\" % val)\n# Returns: '1,234,567,890'\n\nval = 1234567890.1234567890\n# Returns: '1,234,567,890'\n</code>", "<code>%.3f</code>", "<code>re.sub(\"(\\d)(?=(\\d{3})+(?!\\d))\", r\"\\1,\", \"%.3f\" % val)\n# Returns: '1,234,567,890.123'\n</code>", "<code>re.sub(\"(\\d)(?=(\\d{3})+(?!\\d))\", r\"\\1,\", \"%.5f\" % val)\n# Returns: '1,234,567,890.12,346'\n</code>", "<code>re.sub(pattern, repl, string)\n\npattern = \\\n    \"(\\d)           # Find one digit...\n     (?=            # that is followed by...\n         (\\d{3})+   # one or more groups of three digits...\n         (?!\\d)     # which are not followed by any more digits.\n     )\",\n\nrepl = \\\n    r\"\\1,\",         # Replace that one digit by itself, followed by a comma,\n                    # and continue looking for more matches later in the string.\n                    # (re.sub() replaces all matches it finds in the input)\n\nstring = \\\n    \"%d\" % val      # Format the string as a decimal to begin with\n</code>", "<code>'{:n}'.format( value )</code>", "<code>thousands</code>", "<code>locale.currency</code>", "<code>grouping</code>", "<code>import locale\n\nlocale.setlocale( locale.LC_ALL, '' )\nlocale.currency( 1234567.89, grouping = True )\n</code>", "<code>'Portuguese_Brazil.1252'\n'R$ 1.234.567,89'\n</code>", "<code>my_number = 4385893.382939491\n\nmy_string = '{:0,.2f}'.format(my_number)\n</code>", "<code>0</code>", "<code>my_string = '{:,.2f}'.format(my_number)\n</code>", "<code>&gt;&gt;&gt; num = 10000000\n&gt;&gt;&gt; print(f\"{num:,d}\")\n10,000,000\n</code>", "<code>f\"{num:_d}\"</code>", "<code>format(num, \",d\")</code>", "<code>def intToStringWithCommas(x):\n    if type(x) is not int and type(x) is not long:\n        raise TypeError(\"Not an integer!\")\n    if x &lt; 0:\n        return '-' + intToStringWithCommas(-x)\n    elif x &lt; 1000:\n        return str(x)\n    else:\n        return intToStringWithCommas(x / 1000) + ',' + '%03d' % (x % 1000)\n</code>", "<code>import re\ndef thous(x, sep=',', dot='.'):\n    num, _, frac = str(x).partition(dot)\n    num = re.sub(r'(\\d{3})(?=\\d)', r'\\1'+sep, num[::-1])[::-1]\n    if frac:\n        num += dot + frac\n    return num\n</code>", "<code>(?=\\d)</code>", "<code>[::-1]</code>", "<code>def format_builtin(n):\n    return format(n, ',')\n</code>", "<code>def format_number_using_lists(number):\n    string = '%d' % number\n    result_list = list(string)\n    indexes = range(len(string))\n    for index in indexes[::-3][1:]:\n        if result_list[index] != '-':\n            result_list.insert(index+1, ',')\n    return ''.join(result_list)\n</code>", "<code>def format_number_using_generators_and_list_comprehensions(number):\n    string = '%d' % number\n    generator = reversed( \n        [\n            value+',' if (index!=0 and value!='-' and index%3==0) else value\n            for index,value in enumerate(reversed(string))\n        ]\n    )\n    return ''.join(generator)\n</code>", "<code>\"{:,d}\".format(1234567)</code>", "<code>\"{:,.2f}\".format(1234567)</code>", "<code>f</code>", "<code>format(number,',')</code>", "<code>def float2comma(f):\n    s = str(abs(f)) # Convert to a string\n    decimalposition = s.find(\".\") # Look for decimal point\n    if decimalposition == -1:\n        decimalposition = len(s) # If no decimal, then just work from the end\n    out = \"\" \n    for i in range(decimalposition+1, len(s)): # do the decimal\n        if not (i-decimalposition-1) % 3 and i-decimalposition-1: out = out+\",\"\n        out = out+s[i]      \n    if len(out):\n        out = \".\"+out # add the decimal point if necessary\n    for i in range(decimalposition-1,-1,-1): # working backwards from decimal point\n        if not (decimalposition-i-1) % 3 and decimalposition-i-1: out = \",\"+out\n        out = s[i]+out      \n    if f &lt; 0:\n        out = \"-\"+out\n    return out\n</code>", "<code>&gt;&gt;&gt; float2comma(10000.1111)\n'10,000.111,1'\n&gt;&gt;&gt; float2comma(656565.122)\n'656,565.122'\n&gt;&gt;&gt; float2comma(-656565.122)\n'-656,565.122'\n</code>", "<code>float2comma(12031023.1323)</code>", "<code>''.join(reversed([x + (',' if i and not i % 3 else '') for i, x in enumerate(reversed(str(1234567)))]))\n</code>", "<code>def add_commas(instr):\n    out = [instr[0]]\n    for i in range(1, len(instr)):\n        if (len(instr) - i) % 3 == 0:\n            out.append(',')\n        out.append(instr[i])\n    return ''.join(out)\n</code>", "<code>add_commas(instr):\n    rng = reversed(range(1, len(instr) + (len(instr) - 1)//3 + 1))\n    out = [',' if j%4 == 0 else instr[-(j - j//4)] for j in rng]\n    return ''.join(out)\n</code>", "<code>for i in range(1, 11):\n    instr = '1234567890'[:i]\n    print(instr, add_commas(instr))\n</code>", "<code>1 1\n12 12\n123 123\n1234 1,234\n12345 12,345\n123456 123,456\n1234567 1,234,567\n12345678 12,345,678\n123456789 123,456,789\n1234567890 1,234,567,890\n</code>", "<code>'{:,}'.format(value).replace(',', your_custom_thousands_separator)\n</code>", "<code>'{:,.2f}'.format(123456789.012345).replace(',', ' ')\n</code>", "<code>('{:,.2f}'.format(123456789.012345)\n          .replace(',', ' ')  # 'save' the thousands separators \n          .replace('.', ',')  # dot to comma\n          .replace(' ', '.')) # thousand separators to dot\n</code>", "<code>def format_money(money, presym='$', postsym=''):\n    fmt = '%0.2f' % money\n    dot = string.find(fmt, '.')\n    ret = []\n    if money &lt; 0 :\n        ret.append('(')\n        p0 = 1\n    else :\n        p0 = 0\n    ret.append(presym)\n    p1 = (dot-p0) % 3 + p0\n    while True :\n        ret.append(fmt[p0:p1])\n        if p1 == dot : break\n        ret.append(',')\n        p0 = p1\n        p1 += 3\n    ret.append(fmt[dot:])   # decimals\n    ret.append(postsym)\n    if money &lt; 0 : ret.append(')')\n    return ''.join(ret)\n</code>", "<code>import random\nnumber = str(random.randint(1, 10000000))\ncomma_placement = 4\nprint('The original number is: {}. '.format(number))\nwhile True:\n    if len(number) % 3 == 0:\n        for i in range(0, len(number) // 3 - 1):\n            number = number[0:len(number) - comma_placement + 1] + ',' + number[len(number) - comma_placement + 1:]\n            comma_placement = comma_placement + 4\n    else:\n        for i in range(0, len(number) // 3):\n            number = number[0:len(number) - comma_placement + 1] + ',' + number[len(number) - comma_placement + 1:]\n    break\nprint('The new and improved number is: {}'.format(number))        \n</code>", "<code>import random\nnumber = str(random.randint(1, 10000000))\ncomma_placement = 4\nprint 'The original number is: %s.' % (number)\nwhile True:\n    if len(number) % 3 == 0:\n        for i in range(0, len(number) // 3 - 1):\n            number = number[0:len(number) - comma_placement + 1] + ',' + number[len(number) - comma_placement + 1:]\n            comma_placement = comma_placement + 4\n    else:\n        for i in range(0, len(number) // 3):\n            number = number[0:len(number) - comma_placement + 1] + ',' + number[len(number) - comma_placement + 1:]\n    break\nprint 'The new and improved number is: %s.' % (number) \n</code>", "<code>from __future__ import with_statement\nfrom contextlib import contextmanager\nimport re,time\n\nre_first_num = re.compile(r\"\\d\")\ndef intcomma_noregex(value):\n    end_offset, start_digit, period = len(value),re_first_num.search(value).start(),value.rfind('.')\n    if period == -1:\n        period=end_offset\n    segments,_from_index,leftover = [],0,(period-start_digit) % 3\n    for _index in xrange(start_digit+3 if not leftover else start_digit+leftover,period,3):\n        segments.append(value[_from_index:_index])\n        _from_index=_index\n    if not segments:\n        return value\n    segments.append(value[_from_index:])\n    return ','.join(segments)\n\ndef intcomma_noregex_reversed(value):\n    end_offset, start_digit, period = len(value),re_first_num.search(value).start(),value.rfind('.')\n    if period == -1:\n        period=end_offset\n    _from_index,segments = end_offset,[]\n    for _index in xrange(period-3,start_digit,-3):\n        segments.append(value[_index:_from_index])\n        _from_index=_index\n    if not segments:\n        return value\n    segments.append(value[:_from_index])\n    return ','.join(reversed(segments))\n\nre_3digits = re.compile(r'(?&lt;=\\d)\\d{3}(?!\\d)')\ndef intcomma(value):\n    segments,last_endoffset=[],len(value)\n    while last_endoffset &gt; 3:\n        digit_group = re_3digits.search(value,0,last_endoffset)\n        if not digit_group:\n            break\n        segments.append(value[digit_group.start():last_endoffset])\n        last_endoffset=digit_group.start()\n    if not segments:\n        return value\n    if last_endoffset:\n        segments.append(value[:last_endoffset])\n    return ','.join(reversed(segments))\n\ndef intcomma_recurs(value):\n    \"\"\"\n    Converts an integer to a string containing commas every three digits.\n    For example, 3000 becomes '3,000' and 45000 becomes '45,000'.\n    \"\"\"\n    new = re.sub(\"^(-?\\d+)(\\d{3})\", '\\g&lt;1&gt;,\\g&lt;2&gt;', str(value))\n    if value == new:\n        return new\n    else:\n        return intcomma(new)\n\n@contextmanager\ndef timed(save_time_func):\n    begin=time.time()\n    try:\n        yield\n    finally:\n        save_time_func(time.time()-begin)\n\ndef testset_xsimple(func):\n    func('5')\n\ndef testset_simple(func):\n    func('567')\n\ndef testset_onecomma(func):\n    func('567890')\n\ndef testset_complex(func):\n    func('-1234567.024')\n\ndef testset_average(func):\n    func('-1234567.024')\n    func('567')\n    func('5674')\n\nif __name__ == '__main__':\n    print 'Test results:'\n    for test_data in ('5','567','1234','1234.56','-253892.045'):\n        for func in (intcomma,intcomma_noregex,intcomma_noregex_reversed,intcomma_recurs):\n            print func.__name__,test_data,func(test_data)\n    times=[]\n    def overhead(x):\n        pass\n    for test_run in xrange(1,4):\n        for func in (intcomma,intcomma_noregex,intcomma_noregex_reversed,intcomma_recurs,overhead):\n            for testset in (testset_xsimple,testset_simple,testset_onecomma,testset_complex,testset_average):\n                for x in xrange(1000): # prime the test\n                    testset(func)\n                with timed(lambda x:times.append(((test_run,func,testset),x))):\n                    for x in xrange(50000):\n                        testset(func)\n    for (test_run,func,testset),_delta in times:\n        print test_run,func.__name__,testset.__name__,_delta\n</code>", "<code>intcomma 5 5\nintcomma_noregex 5 5\nintcomma_noregex_reversed 5 5\nintcomma_recurs 5 5\nintcomma 567 567\nintcomma_noregex 567 567\nintcomma_noregex_reversed 567 567\nintcomma_recurs 567 567\nintcomma 1234 1,234\nintcomma_noregex 1234 1,234\nintcomma_noregex_reversed 1234 1,234\nintcomma_recurs 1234 1,234\nintcomma 1234.56 1,234.56\nintcomma_noregex 1234.56 1,234.56\nintcomma_noregex_reversed 1234.56 1,234.56\nintcomma_recurs 1234.56 1,234.56\nintcomma -253892.045 -253,892.045\nintcomma_noregex -253892.045 -253,892.045\nintcomma_noregex_reversed -253892.045 -253,892.045\nintcomma_recurs -253892.045 -253,892.045\n1 intcomma testset_xsimple 0.0410001277924\n1 intcomma testset_simple 0.0369999408722\n1 intcomma testset_onecomma 0.213000059128\n1 intcomma testset_complex 0.296000003815\n1 intcomma testset_average 0.503000020981\n1 intcomma_noregex testset_xsimple 0.134000062943\n1 intcomma_noregex testset_simple 0.134999990463\n1 intcomma_noregex testset_onecomma 0.190999984741\n1 intcomma_noregex testset_complex 0.209000110626\n1 intcomma_noregex testset_average 0.513000011444\n1 intcomma_noregex_reversed testset_xsimple 0.124000072479\n1 intcomma_noregex_reversed testset_simple 0.12700009346\n1 intcomma_noregex_reversed testset_onecomma 0.230000019073\n1 intcomma_noregex_reversed testset_complex 0.236999988556\n1 intcomma_noregex_reversed testset_average 0.56299996376\n1 intcomma_recurs testset_xsimple 0.348000049591\n1 intcomma_recurs testset_simple 0.34600019455\n1 intcomma_recurs testset_onecomma 0.625\n1 intcomma_recurs testset_complex 0.773999929428\n1 intcomma_recurs testset_average 1.6890001297\n1 overhead testset_xsimple 0.0179998874664\n1 overhead testset_simple 0.0190000534058\n1 overhead testset_onecomma 0.0190000534058\n1 overhead testset_complex 0.0190000534058\n1 overhead testset_average 0.0309998989105\n2 intcomma testset_xsimple 0.0360000133514\n2 intcomma testset_simple 0.0369999408722\n2 intcomma testset_onecomma 0.207999944687\n2 intcomma testset_complex 0.302000045776\n2 intcomma testset_average 0.523000001907\n2 intcomma_noregex testset_xsimple 0.139999866486\n2 intcomma_noregex testset_simple 0.141000032425\n2 intcomma_noregex testset_onecomma 0.203999996185\n2 intcomma_noregex testset_complex 0.200999975204\n2 intcomma_noregex testset_average 0.523000001907\n2 intcomma_noregex_reversed testset_xsimple 0.130000114441\n2 intcomma_noregex_reversed testset_simple 0.129999876022\n2 intcomma_noregex_reversed testset_onecomma 0.236000061035\n2 intcomma_noregex_reversed testset_complex 0.241999864578\n2 intcomma_noregex_reversed testset_average 0.582999944687\n2 intcomma_recurs testset_xsimple 0.351000070572\n2 intcomma_recurs testset_simple 0.352999925613\n2 intcomma_recurs testset_onecomma 0.648999929428\n2 intcomma_recurs testset_complex 0.808000087738\n2 intcomma_recurs testset_average 1.81900000572\n2 overhead testset_xsimple 0.0189998149872\n2 overhead testset_simple 0.0189998149872\n2 overhead testset_onecomma 0.0190000534058\n2 overhead testset_complex 0.0179998874664\n2 overhead testset_average 0.0299999713898\n3 intcomma testset_xsimple 0.0360000133514\n3 intcomma testset_simple 0.0360000133514\n3 intcomma testset_onecomma 0.210000038147\n3 intcomma testset_complex 0.305999994278\n3 intcomma testset_average 0.493000030518\n3 intcomma_noregex testset_xsimple 0.131999969482\n3 intcomma_noregex testset_simple 0.136000156403\n3 intcomma_noregex testset_onecomma 0.192999839783\n3 intcomma_noregex testset_complex 0.202000141144\n3 intcomma_noregex testset_average 0.509999990463\n3 intcomma_noregex_reversed testset_xsimple 0.125999927521\n3 intcomma_noregex_reversed testset_simple 0.126999855042\n3 intcomma_noregex_reversed testset_onecomma 0.235999822617\n3 intcomma_noregex_reversed testset_complex 0.243000030518\n3 intcomma_noregex_reversed testset_average 0.56200003624\n3 intcomma_recurs testset_xsimple 0.337000131607\n3 intcomma_recurs testset_simple 0.342000007629\n3 intcomma_recurs testset_onecomma 0.609999895096\n3 intcomma_recurs testset_complex 0.75\n3 intcomma_recurs testset_average 1.68300008774\n3 overhead testset_xsimple 0.0189998149872\n3 overhead testset_simple 0.018000125885\n3 overhead testset_onecomma 0.018000125885\n3 overhead testset_complex 0.0179998874664\n3 overhead testset_average 0.0299999713898\n</code>", "<code>long</code>", "<code>float</code>", "<code>&gt;&gt;&gt; class number(long):\n\n        def __init__(self, value):\n            self = value\n\n        def __repr__(self):\n            s = str(self)\n            l = [x for x in s if x in '1234567890']\n            for x in reversed(range(len(s)-1)[::3]):\n                l.insert(-x, ',')\n            l = ''.join(l[1:])\n            return ('-'+l if self &lt; 0 else l) \n\n&gt;&gt;&gt; number(-100000)\n-100,000\n&gt;&gt;&gt; number(-100)\n-100\n&gt;&gt;&gt; number(-12345)\n-12,345\n&gt;&gt;&gt; number(928374)\n928,374\n&gt;&gt;&gt; 345\n</code>", "<code>__repr__()</code>", "<code>__str__()</code>", "<code>__repr__()</code>", "<code>int(repr(number(928374)))</code>", "<code>int()</code>", "<code>number(repr(number(928374)))</code>", "<code>int(repr(number(928374)))</code>", "<code>print</code>", "<code>__str__()</code>", "<code>__repr__()</code>", "<code>from random import randint\n\nvoci = {\n    \"immobilizzazioni\": randint(200000, 500000),\n    \"tfr\": randint(10000, 25000),\n    \"ac\": randint(150000, 200000),\n    \"fondo\": randint(10500, 22350),\n    \"debiti\": randint(150000, 250000),\n    \"ratei_attivi\": randint(2000, 2500),\n    \"ratei_passivi\": randint(1500, 2600),\n    \"crediti_v_soci\": randint(10000, 30000)\n}\n\n\ntesto_rnd2 = \"\"\"Nell\u2019azienda Hypermax S.p.a. di Bologna le immobilizzazioni valgono {immobilizzazioni:,} \u20ac, i debiti per TFR sono pari a {tfr:,} \u20ac, l\u2019attivo circolante \u00e8 di {ac:,} euro, il fondo rischi ed oneri ha un importo pari a {fondo:,} euro, i debiti sono {debiti:,} \u20ac, i ratei e risconti attivi sono pari a {ratei_attivi:,} euro, i ratei e risconti passivi sono pari a {ratei_passivi:,} euro. I crediti verso i soci sono pari a {crediti_v_soci:,} euro.\"\"\"\n\nprint(testo_rnd2)\n</code>", "<code>def ncomma(num):\n    def _helper(num):\n        # assert isinstance(numstr, basestring)\n        numstr = '%d' % num\n        for ii, digit in enumerate(reversed(numstr)):\n            if ii and ii % 3 == 0 and digit.isdigit():\n                yield ','\n            yield digit\n\n    return ''.join(reversed([n for n in _helper(num)]))\n</code>", "<code>&gt;&gt;&gt; for i in (0, 99, 999, 9999, 999999, 1000000, -1, -111, -1111, -111111, -1000000):\n...     print i, ncomma(i)\n... \n0 0\n99 99\n999 999\n9999 9,999\n999999 999,999\n1000000 1,000,000\n-1 -1\n-111 -111\n-1111 -1,111\n-111111 -111,111\n-1000000 -1,000,000\n</code>", "<code>def format_money(f, delimiter=',', frac_digits=2):\n\n    negative_fix = int(f &lt; 0)\n\n    s = '%.*f' % (frac_digits, f)\n    if len(s) &lt; 5 + frac_digits + negative_fix:\n        return s\n\n    l = list(s)\n    l_fix = l[negative_fix:]\n    p = len(l_fix) - frac_digits - 5\n    l_fix[p::-3] = [i + delimiter for i in l_fix[p::-3]]\n\n    return ''.join(l[:negative_fix] + l_fix)\n</code>", "<code>float(filter(lambda x: x!=',', '1,234.52'))\n# returns 1234.52\n</code>", "<code>int(filter(lambda x: x!=',', '1,234'))\n# returns 1234\n</code>", "<code>float('1,234.52'.translate(None, ','))</code>", "<code> s = str(1234567)\n print ','.join([s[::-1][k:k+3][::-1] for k in xrange(len(s)-1, -1, -3)])\n</code>"], "path": "stack.django"}, {"tags": ["python", "string", "gzip"], "creation_date": 1301394970, "body_markdown": "&lt;!-- language: lang-python --&gt;\r\n\r\n    plaintext = input(&quot;Please enter the text you want to compress&quot;)\r\n    filename = input(&quot;Please enter the desired filename&quot;)\r\n    with gzip.open(filename + &quot;.gz&quot;, &quot;wb&quot;) as outfile:\r\n        outfile.write(plaintext) \r\n\r\nThe above python code is giving me following error:\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    Traceback (most recent call last):\r\n      File &quot;C:/Users/Ankur Gupta/Desktop/Python_works/gzip_work1.py&quot;, line 33, in &lt;module&gt;\r\n        compress_string()\r\n      File &quot;C:/Users/Ankur Gupta/Desktop/Python_works/gzip_work1.py&quot;, line 15, in compress_string\r\n        outfile.write(plaintext)\r\n      File &quot;C:\\Python32\\lib\\gzip.py&quot;, line 312, in write\r\n        self.crc = zlib.crc32(data, self.crc) &amp; 0xffffffff\r\n    TypeError: &#39;str&#39; does not support the buffer interface\r\n", "last_edit_date": 1444003239, "up_vote_count": 246, "link": "https://stackoverflow.com/questions/5471158/typeerror-str-does-not-support-the-buffer-interface", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1301395492, "answer_id": 5471273, "path": "stack.django.answer", "score": 42, "up_vote_count": 42, "is_accepted": false, "last_activity_date": 1444003499, "last_edit_date": 1444003499, "body_markdown": "You can not serialize a Python 3 &#39;string&#39; to bytes without explict conversion to some encoding.\r\n\r\n&lt;!-- language: lang-python --&gt;\r\n\r\n    outfile.write(plaintext.encode(&#39;utf-8&#39;))\r\n\r\nis possibly what you want. Also this works for both python 2.x and 3.x.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1301395519, "answer_id": 5471280, "path": "stack.django.answer", "score": 25, "up_vote_count": 25, "is_accepted": false, "last_activity_date": 1444003526, "last_edit_date": 1444003526, "body_markdown": "For Python 3.x you can convert your text to raw bytes through:\r\n\r\n    bytes(&quot;my data&quot;, &quot;encoding&quot;)\r\n\r\nFor example:\r\n\r\n    bytes(&quot;attack at dawn&quot;, &quot;utf-8&quot;)\r\n\r\nThe object returned will work with `outfile.write`."}, {"tags": [], "down_vote_count": 5, "creation_date": 1301395887, "answer_id": 5471351, "path": "stack.django.answer", "score": 280, "up_vote_count": 285, "is_accepted": true, "last_activity_date": 1444003395, "last_edit_date": 1444003395, "body_markdown": "If you use Python3x then `string` is not the same type as for Python 2.x, you must cast it to bytes (encode it).\r\n\r\n\tplaintext = input(&quot;Please enter the text you want to compress&quot;)\r\n\tfilename = input(&quot;Please enter the desired filename&quot;)\r\n\twith gzip.open(filename + &quot;.gz&quot;, &quot;wb&quot;) as outfile:\r\n\t\toutfile.write(bytes(plaintext, &#39;UTF-8&#39;))\r\n\r\nAlso do not use variable names like `string` or `file` while those are names of module or function.\r\n\r\n*EDIT @Tom*\r\n\r\nYes, non-ASCII text is also compressed/decompressed. I use Polish letters with UTF-8 encoding:\r\n\r\n\tplaintext = &#39;Polish text: \u0105\u0107\u0119\u0142\u0144&#243;\u015b\u017a\u017c\u0104\u0106\u0118\u0141\u0143&#211;\u015a\u0179\u017b&#39;\r\n\tfilename = &#39;foo.gz&#39;\r\n\twith gzip.open(filename, &#39;wb&#39;) as outfile:\r\n\t\toutfile.write(bytes(plaintext, &#39;UTF-8&#39;))\r\n\twith gzip.open(filename, &#39;r&#39;) as infile:\r\n\t\toutfile_content = infile.read().decode(&#39;UTF-8&#39;)\r\n\tprint(outfile_content)\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1405930055, "answer_id": 24860337, "path": "stack.django.answer", "score": 86, "up_vote_count": 87, "is_accepted": false, "last_activity_date": 1444003461, "last_edit_date": 1444003461, "body_markdown": "There is an easier solution to this problem.\r\n\r\nYou just need to add a `t` to the mode so it becomes `wt`. This causes Python to open the file as a text file and not binary. Then everything will just work.\r\n\r\nThe complete program becomes this:\r\n\r\n&lt;!-- language: lang-python --&gt;\r\n\r\n    plaintext = input(&quot;Please enter the text you want to compress&quot;)\r\n    filename = input(&quot;Please enter the desired filename&quot;)\r\n    with gzip.open(filename + &quot;.gz&quot;, &quot;wt&quot;) as outfile:\r\n        outfile.write(plaintext)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1436343978, "answer_id": 31287278, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1436343978, "body_markdown": "\r\n    &gt;&gt;&gt; s = bytes(&quot;s&quot;,&quot;utf-8&quot;)\r\n    &gt;&gt;&gt; print(s)\r\n    b&#39;s&#39;\r\n    &gt;&gt;&gt; s = s.decode(&quot;utf-8&quot;)\r\n    &gt;&gt;&gt; print(s)\r\n    s\r\n\r\nWell if useful for you in case removing annoying &#39;b&#39; character.If anyone got better idea please suggest me or feel free to edit me anytime in here.I&#39;m just newbie"}, {"tags": [], "down_vote_count": 0, "creation_date": 1439833673, "answer_id": 32056618, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1439833673, "body_markdown": "For `Django` in `django.test.TestCase` unit testing, I changed my **Python2** syntax:\r\n\r\n    def test_view(self):\r\n        response = self.client.get(reverse(&#39;myview&#39;))\r\n        self.assertIn(str(self.obj.id), response.content)\r\n        ...\r\n\r\nTo use the **Python3** `.decode(&#39;utf8&#39;)` syntax:\r\n\r\n    def test_view(self):\r\n        response = self.client.get(reverse(&#39;myview&#39;))\r\n        self.assertIn(str(self.obj.id), response.content.decode(&#39;utf8&#39;))\r\n        ..."}, {"tags": [], "down_vote_count": 0, "creation_date": 1452300205, "answer_id": 34688434, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1504220872, "last_edit_date": 1504220872, "body_markdown": "This problem commonly occurs when switching from py2 to py3. In py2 &lt;code&gt;plaintext&lt;/code&gt; is both a *string* and a *byte array* type. In py3 &lt;code&gt;plaintext&lt;/code&gt; is only a *string*, and the method `outfile.write()` actually takes a *byte array* when `outfile` is opened in binary mode, so an exception is raised. Change the input to `plaintext.encode(&#39;utf-8&#39;)` to fix the problem. Read on if this bothers you.   \r\n\r\nIn py2, the [declaration for file.write][1] made it seem like you passed in a string: `file.write(str)`. Actually you were passing in a byte array, you should have been reading the declaration like this: `file.write(bytes)`. If you read it like this the problem is simple, `file.write(bytes)` needs a *bytes* type and in py3 to get *bytes* out of a *str* you convert it:\r\n\r\n    py3&gt;&gt; outfile.write(plaintext.encode(&#39;utf-8&#39;))\r\n\r\nWhy did the py2 docs declare `file.write` took a string? Well in py2 the declaration distinction didn&#39;t matter because: \r\n\r\n    py2&gt;&gt; str==bytes         #str and bytes aliased a single hybrid class in py2\r\n    True\r\n\r\nThe *str-bytes* class of py2 has methods/constructors that make it behave like a string class in some ways and a byte array class in others. Convenient for `file.write` isn&#39;t it?:\r\n\r\n    py2&gt;&gt; plaintext=&#39;my string literal&#39;\r\n    py2&gt;&gt; type(plaintext)\r\n    str                              #is it a string or is it a byte array? it&#39;s both!\r\n    \r\n    py2&gt;&gt; outfile.write(plaintext)   #can use plaintext as a byte array\r\n\r\nWhy did py3 break this nice system? Well because in py2 basic string functions didn&#39;t work for the rest of the world. Measure the length of a word with a non-ASCII character?\r\n\r\n    py2&gt;&gt; len(&#39;&#161;no&#39;)        #length of string=3, length of UTF-8 byte array=4, since with variable len encoding the non-ASCII chars = 2-6 bytes\r\n    4                       #always gives bytes.len not str.len\r\n\r\nAll this time you thought you were asking for the *len* of a string in py2, you were getting the length of the byte array from the encoding. That ambiguity is the fundamental problem with double-duty classes. Which version of any method call do you implement?\r\n\r\nThe good news then is that py3 fixes this problem. It disentangles the *str* and *bytes* classes. The *str* class has string-like methods, the separate *bytes* class has byte array methods:\r\n\r\n    py3&gt;&gt; len(&#39;&#161;ok&#39;)       #string\r\n    3\r\n    py3&gt;&gt; len(&#39;&#161;ok&#39;.encode(&#39;utf-8&#39;))     #bytes\r\n    4\r\n\r\nHopefully knowing this helps de-mystify the issue, and makes the migration pain a little easier to bear. \r\n\r\n\r\n  [1]: https://docs.python.org/2/library/stdtypes.html"}], "title": "TypeError: &#39;str&#39; does not support the buffer interface", "view_count": 292744, "answer_count": 7, "code_snippet": ["<code>plaintext = input(\"Please enter the text you want to compress\")\nfilename = input(\"Please enter the desired filename\")\nwith gzip.open(filename + \".gz\", \"wb\") as outfile:\n    outfile.write(plaintext) \n</code>", "<code>Traceback (most recent call last):\n  File \"C:/Users/Ankur Gupta/Desktop/Python_works/gzip_work1.py\", line 33, in &lt;module&gt;\n    compress_string()\n  File \"C:/Users/Ankur Gupta/Desktop/Python_works/gzip_work1.py\", line 15, in compress_string\n    outfile.write(plaintext)\n  File \"C:\\Python32\\lib\\gzip.py\", line 312, in write\n    self.crc = zlib.crc32(data, self.crc) &amp; 0xffffffff\nTypeError: 'str' does not support the buffer interface\n</code>", "<code>string</code>", "<code>plaintext = input(\"Please enter the text you want to compress\")\nfilename = input(\"Please enter the desired filename\")\nwith gzip.open(filename + \".gz\", \"wb\") as outfile:\n    outfile.write(bytes(plaintext, 'UTF-8'))\n</code>", "<code>string</code>", "<code>file</code>", "<code>plaintext = 'Polish text: \u0105\u0107\u0119\u0142\u0144\u00f3\u015b\u017a\u017c\u0104\u0106\u0118\u0141\u0143\u00d3\u015a\u0179\u017b'\nfilename = 'foo.gz'\nwith gzip.open(filename, 'wb') as outfile:\n    outfile.write(bytes(plaintext, 'UTF-8'))\nwith gzip.open(filename, 'r') as infile:\n    outfile_content = infile.read().decode('UTF-8')\nprint(outfile_content)\n</code>", "<code>str</code>", "<code>t</code>", "<code>wt</code>", "<code>plaintext = input(\"Please enter the text you want to compress\")\nfilename = input(\"Please enter the desired filename\")\nwith gzip.open(filename + \".gz\", \"wt\") as outfile:\n    outfile.write(plaintext)\n</code>", "<code>outfile.write(plaintext.encode('utf-8'))\n</code>", "<code>bytes(\"my data\", \"encoding\")\n</code>", "<code>bytes(\"attack at dawn\", \"utf-8\")\n</code>", "<code>outfile.write</code>", "<code>plaintext</code>", "<code>plaintext</code>", "<code>outfile.write()</code>", "<code>outfile</code>", "<code>plaintext.encode('utf-8')</code>", "<code>file.write(str)</code>", "<code>file.write(bytes)</code>", "<code>file.write(bytes)</code>", "<code>py3&gt;&gt; outfile.write(plaintext.encode('utf-8'))\n</code>", "<code>file.write</code>", "<code>py2&gt;&gt; str==bytes         #str and bytes aliased a single hybrid class in py2\nTrue\n</code>", "<code>file.write</code>", "<code>py2&gt;&gt; plaintext='my string literal'\npy2&gt;&gt; type(plaintext)\nstr                              #is it a string or is it a byte array? it's both!\n\npy2&gt;&gt; outfile.write(plaintext)   #can use plaintext as a byte array\n</code>", "<code>py2&gt;&gt; len('\u00a1no')        #length of string=3, length of UTF-8 byte array=4, since with variable len encoding the non-ASCII chars = 2-6 bytes\n4                       #always gives bytes.len not str.len\n</code>", "<code>py3&gt;&gt; len('\u00a1ok')       #string\n3\npy3&gt;&gt; len('\u00a1ok'.encode('utf-8'))     #bytes\n4\n</code>", "<code>&gt;&gt;&gt; s = bytes(\"s\",\"utf-8\")\n&gt;&gt;&gt; print(s)\nb's'\n&gt;&gt;&gt; s = s.decode(\"utf-8\")\n&gt;&gt;&gt; print(s)\ns\n</code>", "<code>s.encode('utf-8')</code>", "<code>s.decode('utf-8')</code>", "<code>s = bytes(\"s\", \"utf-8\")</code>", "<code>Django</code>", "<code>django.test.TestCase</code>", "<code>def test_view(self):\n    response = self.client.get(reverse('myview'))\n    self.assertIn(str(self.obj.id), response.content)\n    ...\n</code>", "<code>.decode('utf8')</code>", "<code>def test_view(self):\n    response = self.client.get(reverse('myview'))\n    self.assertIn(str(self.obj.id), response.content.decode('utf8'))\n    ...\n</code>"], "path": "stack.django"}, {"tags": ["python", "ide", "pycharm"], "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1390238305, "answer_id": 21240209, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1390238305, "body_markdown": "Normally, &lt;a href=&quot;http://jettify.net/2012/pythonpath/&quot;&gt;$PYTHONPATH is used to teach python interpreter to find necessary modules&lt;/a&gt;. PyCharm needs to add the path in Preference.\r\n\r\n![enter image description here][1]\r\n\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/VHhw9.png"}, {"tags": [], "down_vote_count": 1, "creation_date": 1390244372, "answer_id": 21241988, "path": "stack.django.answer", "score": 441, "up_vote_count": 442, "is_accepted": true, "last_activity_date": 1390244372, "body_markdown": "Manually adding it as you have done _is_ indeed one way of doing this, but there is a simpler method, and that is by simply telling pycharm that you want to add the `src` folder as a source root, and then adding the sources root to your python path.\r\n\r\nThis way, you don&#39;t have to hard code things into your interpreter&#39;s settings:\r\n\r\n -  Add `src` as a source content root:\r\n\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\r\n![enter image description here][1]\r\n\r\n -  Then make sure to add add sources to your `PYTHONPATH`:\r\n\r\n![enter image description here][2]\r\n\r\n - Now imports will be resolved:\r\n\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\r\n![enter image description here][3]\r\n\r\nThis way, you can add whatever you want as a source root, and things will simply work. If you unmarked it as a source root however, you _will_ get an error:\r\n\r\n\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\r\n![enter image description here][4]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/9WunC.png\r\n  [2]: http://i.stack.imgur.com/rk59O.png\r\n  [3]: http://i.stack.imgur.com/4Z6RD.png\r\n  [4]: http://i.stack.imgur.com/vMII4.png"}, {"tags": [], "down_vote_count": 1, "creation_date": 1426068731, "answer_id": 28983742, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1426068731, "body_markdown": "Many a times what happens is that the plugin is not installed. e.g. \r\n\r\nIf you are developing a django project and you do not have django plugin installed in pyCharm, it says error &#39;unresolved reference&#39;. \r\nRefer:\r\nhttps://www.jetbrains.com/pycharm/help/resolving-references.html\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1466929686, "answer_id": 38036602, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1466929686, "body_markdown": "Please check if you are using the right interpreter that you are supposed to. I was getting error &quot;unresolved reference &#39;django&#39; &quot; to solve this I changed Project Interpreter (Changed Python 3 to Python 2.7) from project settings:\r\nSelect Project, go to File -&gt; Settings -&gt; Project:&lt;Project Name&gt; -&gt; Project Interpreter -&gt; Brows and Select correct version or Interpreter (e.g /usr/bin/python2.7)."}, {"tags": [], "down_vote_count": 3, "creation_date": 1478290528, "answer_id": 40431067, "path": "stack.django.answer", "score": 0, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1478290528, "body_markdown": "If you&#39;re using PyCharm:\r\n\r\nYou can use the help shortcut by having the mouse curser on the error and pressing Alt+Enter\r\n\r\nOr alternatively, \r\n\r\nHover over the missing library and you should see a red light-bulb. \r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\nClick on the red light bulb. Select &quot;Install package flask&quot;.\r\n\r\n[![enter image description here][2]][2]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/XiIwC.png\r\n  [2]: https://i.stack.imgur.com/50lKM.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1481547811, "answer_id": 41101558, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1481548119, "last_edit_date": 1481548119, "body_markdown": "After testing all workarounds, i suggest you to take a look at `Settings -&gt; Project -&gt; project dependencies` and re-arrange them.\r\n\r\n![pycharm prefrence][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/cmUdP.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1484090584, "answer_id": 41580215, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1484090584, "body_markdown": "\r\n\r\n1. check for ```__init__.py``` file in ```src``` folder \r\n2. add the ```src``` folder as a source root\r\n3. Then make sure to add add sources to your ```PYTHONPATH``` (see above)\r\n4. in PyCharm menu select: File --&gt; Invalidate Caches / Restart "}, {"tags": [], "down_vote_count": 0, "creation_date": 1489570277, "answer_id": 42805760, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1489570277, "body_markdown": "Generally, this is a missing package problem, just place the caret at the unresolved reference and press `Alt+Enter` to reveal the options, then you should know how to solve it."}, {"tags": [], "down_vote_count": 0, "creation_date": 1492313798, "answer_id": 43433438, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1504284718, "last_edit_date": 1504284718, "body_markdown": "If anyone is still looking at this, the accepted answer still works for PyCharm 2016.3 when I tried it. The UI might have changed, but the options are still the same. \r\n\r\nie. Right click on your root folder --&gt; &#39;Mark Directory As&#39; --&gt; Source Root"}, {"tags": [], "down_vote_count": 0, "creation_date": 1512382174, "answer_id": 47630908, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1512382174, "body_markdown": "pycharm uses venv ,in the venv u should install the packages explicitly or goto settings -&gt;project interpreter -&gt;add interpreter -&gt;inherit global site-packages"}, {"tags": [], "down_vote_count": 0, "creation_date": 1518878329, "answer_id": 48842460, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1518878329, "body_markdown": "Install via PyCharm (works with Community Edition). Open up `Settings &gt; Project &gt; Project Interpreter` then click the green + icon in the screenshot below. In the 2nd dialogue that opens, enter the package name and click the &#39;Install Package&#39; button.\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/roe5T.png"}], "creation_date": 1390229069, "body_markdown": "I have a directory structure\r\n\r\n    \u251c\u2500\u2500 simulate.py\r\n    \u251c\u2500\u2500 src\r\n    \u2502&#160;&#160; \u251c\u2500\u2500 networkAlgorithm.py\r\n    \u2502&#160;&#160; \u251c\u2500\u2500 ...\r\n\r\nAnd I can access the network module with `sys.path.insert()`.    \r\n\r\n    import sys\r\n    import os.path\r\n    sys.path.insert(0, &quot;./src&quot;)\r\n    from networkAlgorithm import *\r\n\r\nHowever, pycharm complains that it cannot access the module. How can I teach pycham to resolve the reference?\r\n\r\n![enter image description here][2]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/MD0zi.png\r\n  [2]: http://i.stack.imgur.com/VwqcZ.png", "title": "Unresolved reference issue in PyCharm", "view_count": 161415, "up_vote_count": 203, "answer_count": 11, "link": "https://stackoverflow.com/questions/21236824/unresolved-reference-issue-in-pycharm", "code_snippet": ["<code>\u251c\u2500\u2500 simulate.py\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 networkAlgorithm.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n</code>", "<code>sys.path.insert()</code>", "<code>import sys\nimport os.path\nsys.path.insert(0, \"./src\")\nfrom networkAlgorithm import *\n</code>", "<code>__init__.py</code>", "<code>src</code>", "<code>src</code>", "<code>PYTHONPATH</code>", "<code>src</code>", "<code>views</code>", "<code>myview.py</code>", "<code>from src.views.myview import &lt;my_function&gt;</code>", "<code>__init__.py</code>", "<code>src</code>", "<code>src</code>", "<code>PYTHONPATH</code>", "<code>Settings -&gt; Project -&gt; project dependencies</code>", "<code>Alt+Enter</code>", "<code>Settings &gt; Project &gt; Project Interpreter</code>"], "path": "stack.django"}, {"tags": ["django", "django-models"], "creation_date": 1304430858, "body_markdown": "What&#39;s the difference between django OneToOneField and ForeignKey?", "last_edit_date": 1483133232, "up_vote_count": 259, "link": "https://stackoverflow.com/questions/5870537/whats-the-difference-between-django-onetoonefield-and-foreignkey", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1304431102, "answer_id": 5870593, "path": "stack.django.answer", "score": 76, "up_vote_count": 76, "is_accepted": false, "last_activity_date": 1304431102, "body_markdown": "A ForeignKey is for one-to-many, so a Car object might have many Wheels, each Wheel having a ForeignKey to the Car it belongs to. A OneToOneField would be like an Engine, where a Car object can have one and only one."}, {"tags": [], "down_vote_count": 0, "creation_date": 1304560663, "answer_id": 5891861, "path": "stack.django.answer", "score": 358, "up_vote_count": 358, "is_accepted": true, "last_activity_date": 1482041931, "last_edit_date": 1482041931, "body_markdown": "Be careful to realize that there are some differences between `OneToOneField(SomeModel)` and `ForeignKey(SomeModel, unique=True)`. As stated in [*The Definitive Guide to Django*][defdjango]:\r\n\r\n&gt; **OneToOneField**\r\n&gt;\r\n&gt; A one-to-one relationship. Conceptually, this is similar to a `ForeignKey` with `unique=True`, but the &quot;reverse&quot; side of the relation will directly return a single object.\r\n\r\nIn contrast to the `OneToOneField` &quot;reverse&quot; relation, a `ForeignKey` &quot;reverse&quot; relation returns a `QuerySet`.\r\n\r\n## Example \r\n\r\nFor example, if we have the following two models (full model code below):\r\n\r\n1. `Car` model uses `OneToOneField(Engine)`\r\n2. `Car2` model uses `ForeignKey(Engine2, unique=True)`\r\n\r\nFrom within `python manage.py shell` execute the following:\r\n\r\n### `OneToOneField` Example\r\n\r\n    &gt;&gt;&gt; from testapp.models import Car, Engine\r\n    &gt;&gt;&gt; c = Car.objects.get(name=&#39;Audi&#39;)\r\n    &gt;&gt;&gt; e = Engine.objects.get(name=&#39;Diesel&#39;)\r\n    &gt;&gt;&gt; e.car\r\n    &lt;Car: Audi&gt;\r\n\r\n### `ForeignKey` with `unique=True` Example\r\n    &gt;&gt;&gt; from testapp.models import Car2, Engine2\r\n    &gt;&gt;&gt; c2 = Car2.objects.get(name=&#39;Mazda&#39;)\r\n    &gt;&gt;&gt; e2 = Engine2.objects.get(name=&#39;Wankel&#39;)\r\n    &gt;&gt;&gt; e2.car2_set.all()\r\n    [&lt;Car2: Mazda&gt;]\r\n\r\n\r\n## Model Code\r\n\r\n    from django.db import models\r\n\r\n    class Engine(models.Model):\r\n        name = models.CharField(max_length=25)\r\n\r\n        def __unicode__(self):\r\n            return self.name\r\n\r\n    class Car(models.Model):\r\n        name = models.CharField(max_length=25)\r\n        engine = models.OneToOneField(Engine)\r\n\r\n        def __unicode__(self):\r\n            return self.name\r\n\r\n    class Engine2(models.Model):\r\n        name = models.CharField(max_length=25)\r\n\r\n        def __unicode__(self):\r\n            return self.name\r\n\r\n    class Car2(models.Model):\r\n        name = models.CharField(max_length=25)\r\n        engine = models.ForeignKey(Engine2, unique=True)\r\n\r\n        def __unicode__(self):\r\n            return self.name\r\n\r\n[defdjango]: http://djangobook.com/model-definition-reference/#leanpub-auto-onetoonefield"}, {"tags": [], "down_vote_count": 0, "creation_date": 1335562972, "answer_id": 10358250, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1335562972, "body_markdown": "OneToOneField (one-to-one) realizes, in object orientation, the notion of composition, while ForeignKey (one-to-many) relates to agregation."}, {"tags": [], "down_vote_count": 0, "creation_date": 1392231553, "answer_id": 21737147, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1392231553, "body_markdown": "When you access a OneToOneField you get the value of the field you queried. In this example a book model&#39;s &#39;title&#39; field is a OneToOneField:\r\n\r\n    &gt;&gt;&gt; from mysite.books.models import Book\r\n    &gt;&gt;&gt; b = Book.objects.get(id=50)\r\n    &gt;&gt;&gt; b.title\r\n    u&#39;The Django Book&#39;\r\n\r\nWhen you access a ForeignKey you get the related model object, which you can then preform further queries against. In this example the same book model&#39;s &#39;publisher&#39; field is a ForeignKey (correlating to the Publisher class model definition):\r\n\r\n    &gt;&gt;&gt; b = Book.objects.get(id=50)\r\n    &gt;&gt;&gt; b.publisher\r\n    &lt;Publisher: Apress Publishing&gt;\r\n    &gt;&gt;&gt; b.publisher.website\r\n    u&#39;http://www.apress.com/&#39;\r\n\r\nWith ForeignKey fields queries work the other way too, but they&#39;re slightly different due to the non-symmetrical nature of the relationship. \r\n\r\n    &gt;&gt;&gt; p = Publisher.objects.get(name=&#39;Apress Publishing&#39;)\r\n    &gt;&gt;&gt; p.book_set.all()\r\n    [&lt;Book: The Django Book&gt;, &lt;Book: Dive Into Python&gt;, ...]\r\n\r\nBehind the scenes, book_set is just a QuerySet and can be filtered and sliced like any other QuerySet. The attribute name book_set is generated by appending the lower case model name to _set."}, {"tags": [], "down_vote_count": 0, "creation_date": 1415993398, "answer_id": 26937468, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1415993398, "body_markdown": "The best and the most effective way to learn new things is to see and study real world practical examples. Suppose for a moment that you want to build a blog in django where reporters can write and publish news articles. The owner of the online newspaper wants to allow each of his reporters to publish as many articles as they want, but does not want different reporters to work on the same article. This means that when readers go and read an article they will se only one author in the article.\r\n\r\nFor example: Article by John, Article by Harry, Article by Rick. You can not have Article by Harry &amp; Rick because the boss does not want two or more authors to work on the same article.\r\n\r\nHow can we solve this &#39;problem&#39; with the help of django? The key to the solution of this problem is the django `ForeignKey`.\r\n\r\nThe following is the full code which can be used to implement the idea of our boss.\r\n\r\n    from django.db import models\r\n\r\n    # Create your models here.\r\n\r\n    class Reporter(models.Model):\r\n        first_name = models.CharField(max_length=30)\r\n\r\n        def __unicode__(self):\r\n            return self.first_name\r\n\r\n\r\n    class Article(models.Model):\r\n        title = models.CharField(max_length=100)\r\n        reporter = models.ForeignKey(Reporter)\r\n\r\n        def __unicode__(self):\r\n            return self.title\r\n\r\n\r\n\r\nRun `python manage.py syncdb` to execute the sql code and build the tables for your app in your database. Then use `python manage.py shell` to open a python shell.\r\n\r\n\r\nCreate the Reporter object R1.\r\n\r\n    In [49]: from thepub.models import Reporter, Article\r\n\r\n    In [50]: R1 = Reporter(first_name=&#39;Rick&#39;)\r\n\r\n    In [51]: R1.save()\r\n\r\n\r\n\r\nCreate the Article object A1.\r\n\r\n    In [5]: A1 = Article.objects.create(title=&#39;TDD In Django&#39;, reporter=R1)\r\n\r\n    In [6]: A1.save()\r\n\r\n\r\nThen use the following piece of code to get the name of the reporter.\r\n\r\n    In [8]: A1.reporter.first_name\r\n    Out[8]: &#39;Rick&#39;\r\n\r\nNow create the Reporter object R2 by running the following python code.\r\n\r\n    In [9]: R2 = Reporter.objects.create(first_name=&#39;Harry&#39;)\r\n\r\n    In [10]: R2.save()\r\n\r\nNow try to add R2 to the Article object A1.\r\n\r\n    In [13]: A1.reporter.add(R2)\r\n\r\nIt does not work and you will get an AttributeError saying &#39;Reporter&#39; object has no attribute &#39;add&#39;.\r\n\r\nAs you can see an Article object can not be related to more than one Reporter object.\r\n\r\n\r\nWhat about R1? Can we attach more than one Article objects to it? \r\n\r\n    In [14]: A2 = Article.objects.create(title=&#39;Python News&#39;, reporter=R1)\r\n\r\n    In [15]: R1.article_set.all()\r\n    Out[15]: [&lt;Article: Python News&gt;, &lt;Article: TDD In Django&gt;]\r\n\r\n\r\n\r\nThis practical example shows us that django `ForeignKey` is used to define  many-to-one relationships. \r\n\r\n`OneToOneField` is used to create one-to-one relationships.\r\n\r\n\r\n\r\nWe can use `reporter = models.OneToOneField(Reporter)` in the above models.py file but it is not going to be useful in our example as an author will not be able to post more than one article. \r\n\r\nEach time you want to post a new article you will have to create a new Reporter object. This is time consuming, isn&#39;t it?\r\n\r\n\r\nI highly recommend to try the example with the `OneToOneField` and realize the difference. I am pretty sure that after this example you will completly know the difference between django `OneToOneField` and django `ForeignKey`.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1447764868, "answer_id": 33757484, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1459011524, "last_edit_date": 1459011524, "body_markdown": "Also `OneToOneField` is useful to be used as primary key to avoid key duplication. One may do not have implicit / explicit autofield\r\n\r\n    models.AutoField(primary_key=True)\r\n\r\nbut use `OneToOneField` as primary key instead (imagine `UserProfile` model for example):\r\n\r\n    user = models.OneToOneField(\r\n        User, null=False, primary_key=True, verbose_name=&#39;Member profile&#39;)"}], "title": "What&#39;s the difference between django OneToOneField and ForeignKey?", "view_count": 61826, "answer_count": 6, "code_snippet": ["<code>OneToOneField(SomeModel)</code>", "<code>ForeignKey(SomeModel, unique=True)</code>", "<code>ForeignKey</code>", "<code>unique=True</code>", "<code>OneToOneField</code>", "<code>ForeignKey</code>", "<code>QuerySet</code>", "<code>Car</code>", "<code>OneToOneField(Engine)</code>", "<code>Car2</code>", "<code>ForeignKey(Engine2, unique=True)</code>", "<code>python manage.py shell</code>", "<code>OneToOneField</code>", "<code>&gt;&gt;&gt; from testapp.models import Car, Engine\n&gt;&gt;&gt; c = Car.objects.get(name='Audi')\n&gt;&gt;&gt; e = Engine.objects.get(name='Diesel')\n&gt;&gt;&gt; e.car\n&lt;Car: Audi&gt;\n</code>", "<code>ForeignKey</code>", "<code>unique=True</code>", "<code>&gt;&gt;&gt; from testapp.models import Car2, Engine2\n&gt;&gt;&gt; c2 = Car2.objects.get(name='Mazda')\n&gt;&gt;&gt; e2 = Engine2.objects.get(name='Wankel')\n&gt;&gt;&gt; e2.car2_set.all()\n[&lt;Car2: Mazda&gt;]\n</code>", "<code>from django.db import models\n\nclass Engine(models.Model):\n    name = models.CharField(max_length=25)\n\n    def __unicode__(self):\n        return self.name\n\nclass Car(models.Model):\n    name = models.CharField(max_length=25)\n    engine = models.OneToOneField(Engine)\n\n    def __unicode__(self):\n        return self.name\n\nclass Engine2(models.Model):\n    name = models.CharField(max_length=25)\n\n    def __unicode__(self):\n        return self.name\n\nclass Car2(models.Model):\n    name = models.CharField(max_length=25)\n    engine = models.ForeignKey(Engine2, unique=True)\n\n    def __unicode__(self):\n        return self.name\n</code>", "<code>e.car</code>", "<code>ForeignKey</code>", "<code>unique=True</code>", "<code>OneToOneField</code>", "<code>OneToOneField</code>", "<code>QuerySet</code>", "<code>ForeignKey</code>", "<code>from django.db import models\n\n# Create your models here.\n\nclass Reporter(models.Model):\n    first_name = models.CharField(max_length=30)\n\n    def __unicode__(self):\n        return self.first_name\n\n\nclass Article(models.Model):\n    title = models.CharField(max_length=100)\n    reporter = models.ForeignKey(Reporter)\n\n    def __unicode__(self):\n        return self.title\n</code>", "<code>python manage.py syncdb</code>", "<code>python manage.py shell</code>", "<code>In [49]: from thepub.models import Reporter, Article\n\nIn [50]: R1 = Reporter(first_name='Rick')\n\nIn [51]: R1.save()\n</code>", "<code>In [5]: A1 = Article.objects.create(title='TDD In Django', reporter=R1)\n\nIn [6]: A1.save()\n</code>", "<code>In [8]: A1.reporter.first_name\nOut[8]: 'Rick'\n</code>", "<code>In [9]: R2 = Reporter.objects.create(first_name='Harry')\n\nIn [10]: R2.save()\n</code>", "<code>In [13]: A1.reporter.add(R2)\n</code>", "<code>In [14]: A2 = Article.objects.create(title='Python News', reporter=R1)\n\nIn [15]: R1.article_set.all()\nOut[15]: [&lt;Article: Python News&gt;, &lt;Article: TDD In Django&gt;]\n</code>", "<code>ForeignKey</code>", "<code>OneToOneField</code>", "<code>reporter = models.OneToOneField(Reporter)</code>", "<code>OneToOneField</code>", "<code>OneToOneField</code>", "<code>ForeignKey</code>", "<code>&gt;&gt;&gt; from mysite.books.models import Book\n&gt;&gt;&gt; b = Book.objects.get(id=50)\n&gt;&gt;&gt; b.title\nu'The Django Book'\n</code>", "<code>&gt;&gt;&gt; b = Book.objects.get(id=50)\n&gt;&gt;&gt; b.publisher\n&lt;Publisher: Apress Publishing&gt;\n&gt;&gt;&gt; b.publisher.website\nu'http://www.apress.com/'\n</code>", "<code>&gt;&gt;&gt; p = Publisher.objects.get(name='Apress Publishing')\n&gt;&gt;&gt; p.book_set.all()\n[&lt;Book: The Django Book&gt;, &lt;Book: Dive Into Python&gt;, ...]\n</code>", "<code>OneToOneField</code>", "<code>models.AutoField(primary_key=True)\n</code>", "<code>OneToOneField</code>", "<code>UserProfile</code>", "<code>user = models.OneToOneField(\n    User, null=False, primary_key=True, verbose_name='Member profile')\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "python-2.x"], "creation_date": 1232270018, "body_markdown": "I am using Python version 2.5.4 and install MySQL version 5.0 and Django. Django is working fine with Python, but not MySQL. I am using it in Windows Vista.", "last_edit_date": 1487502954, "up_vote_count": 262, "link": "https://stackoverflow.com/questions/454854/no-module-named-mysqldb", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1232270758, "answer_id": 454871, "path": "stack.django.answer", "score": 41, "up_vote_count": 42, "is_accepted": false, "last_activity_date": 1232310697, "last_edit_date": 1232310697, "body_markdown": "`mysqldb` is a module for Python that doesn&#39;t come pre-installed or with Django. You can download `mysqldb` [here][1].\r\n\r\n\r\n  [1]: http://sourceforge.net/projects/mysql-python"}, {"tags": [], "down_vote_count": 1, "creation_date": 1232281087, "answer_id": 455041, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1232281087, "body_markdown": "If you are running on Vista, you may want to check out the [Bitnami Django stack.][1] It is an all-in-one stack of Apache, Python, MySQL, etc. packaged with [Bitrock][2] crossplatform installers to make it really easy to get started. It runs on Windows, Mac and Linux. Oh, and is completely free :)\r\n\r\n\r\n  [1]: http://bitnami.org/stack/djangostack\r\n  [2]: http://bitrock.com"}, {"tags": [], "down_vote_count": 1, "creation_date": 1304443427, "answer_id": 5873259, "path": "stack.django.answer", "score": 457, "up_vote_count": 458, "is_accepted": false, "last_activity_date": 1443600596, "last_edit_date": 1495541446, "body_markdown": "You need to use one of the following commands. Which one depends on what OS and software you have and use.\r\n\r\n 1. **easy_install mysql-python**                                   (mix os)\r\n 2. **pip install mysql-python**                                    (mix os)\r\n 3. **apt-get install python-mysqldb**                                (Linux Ubuntu, ...)\r\n 4. **cd /usr/ports/databases/py-MySQLdb &amp;&amp; make install clean**    (FreeBSD)\r\n 5. **yum install MySQL-python**                                    (Linux Fedora, CentOS ...)\r\n\r\nFor Windows, see this answer: https://stackoverflow.com/q/21440230/4646678"}, {"tags": [], "down_vote_count": 0, "creation_date": 1305339469, "answer_id": 5999414, "path": "stack.django.answer", "score": 31, "up_vote_count": 31, "is_accepted": false, "last_activity_date": 1327603141, "last_edit_date": 1327603141, "body_markdown": "Ubuntu: \r\n\r\n    sudo apt-get install python-mysqldb\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1349350720, "answer_id": 12726435, "path": "stack.django.answer", "score": 3, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1349350720, "body_markdown": "Thanks to derevo but I think there&#39;s another good way for doing this:\r\n\r\n1. Download and install [ActivePython][1]\r\n2. Open Command Prompt\r\n3. Type `pypm install mysql-python`\r\n4. Read the notes specific to this package.\r\n\r\n\r\n  [1]: http://www.activestate.com/activepython/downloads#\r\n\r\nI think `pypm` is more powerful and reliable than `easy_install`."}, {"tags": [], "down_vote_count": 0, "creation_date": 1408911107, "answer_id": 25475877, "path": "stack.django.answer", "score": 86, "up_vote_count": 86, "is_accepted": false, "last_activity_date": 1469135949, "last_edit_date": 1469135949, "body_markdown": "...and remember there is **no MySQLdb for python3.x**\r\n\r\n(I know the question is about python2.x but google rates this post quite high)\r\n\r\n---------------------------------------------------\r\n\r\n**EDIT:** As stated in the comments, there&#39;s a MySQLdb&#39;s fork that adds Python 3 support: [github.com/PyMySQL/mysqlclient-python\r\n][1]\r\n\r\n\r\n  [1]: http://github.com/PyMySQL/mysqlclient-python"}, {"tags": [], "down_vote_count": 0, "creation_date": 1422884205, "answer_id": 28278997, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1433417551, "last_edit_date": 1433417551, "body_markdown": "- Go to your project directory with `cd`.\r\n- source/bin/activate (activate your env. if not previously).\r\n- Run the command `easy_install MySQL-python`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1435525270, "answer_id": 31104707, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1515697697, "last_edit_date": 1515697697, "body_markdown": "Try this. \r\n\r\n    pip install MySQL-python"}, {"tags": [], "down_vote_count": 0, "creation_date": 1458749337, "answer_id": 36183193, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1507070121, "last_edit_date": 1507070121, "body_markdown": "###Note this is not tested for python 3.x\r\nIn CMD \r\n\r\n    pip install wheel\r\n    pip install pymysql\r\n\r\nin settings.py\r\n\r\n    import pymysql\r\n    pymysql.install_as_MySQLdb()\r\n\r\nIt worked with me \r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1460991473, "answer_id": 36697579, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1460991473, "body_markdown": "I have tried methods above, but still no module named &#39;MySQLdb&#39;, finally, I succeed with \r\n\r\n    easy_install mysql-python\r\nmy env is unbuntu 14.04"}, {"tags": [], "down_vote_count": 1, "creation_date": 1468251062, "answer_id": 38310817, "path": "stack.django.answer", "score": 36, "up_vote_count": 37, "is_accepted": false, "last_activity_date": 1469723834, "last_edit_date": 1469723834, "body_markdown": "if your python version is `3.5`, do a `pip install mysqlclient`, other things didn&#39;t work for me"}, {"tags": [], "down_vote_count": 0, "creation_date": 1480754434, "answer_id": 40945871, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1480754434, "last_edit_date": 1495540979, "body_markdown": "I met the same situation under windows, and searched for the solution.\r\n\r\nSeeing this post &lt;https://stackoverflow.com/q/21440230/2544762&gt;.\r\n\r\nIt points out installing such a pip environment is difficult, needs many other dependencies.\r\n\r\nBut I finally know that if we use `mysqlclient` with a version down to `1.3.4`, it don&#39;t need that requirements any more, so try:\r\n\r\n    pip install mysqlclient==1.3.4"}, {"tags": [], "down_vote_count": 0, "creation_date": 1483729194, "answer_id": 41512493, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1483729194, "body_markdown": "On OSX these commands worked for me\r\n\r\n    brew install mysql-connector-c \r\n    pip install MySQL-python"}, {"tags": [], "down_vote_count": 0, "creation_date": 1487281329, "answer_id": 42285214, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1505119049, "last_edit_date": 1505119049, "body_markdown": "    pip install PyMySQL\r\nand then add this two lines to your Project/Project/__init__.py\r\n\r\n    import pymysql\r\n    pymysql.install_as_MySQLdb()\r\n\r\nWorks on WIN and python 3.3+"}, {"tags": [], "down_vote_count": 0, "creation_date": 1493014561, "answer_id": 43580969, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1493014561, "body_markdown": "If your are using SQLAlchemy and the error is in `/site-packages/sqlalchemy/dialects/mysql/mysqldb.py`:\r\n\r\n    from ...connectors.mysqldb import (\r\n                            MySQLDBExecutionContext,\r\n                            MySQLDBCompiler,\r\n                            MySQLDBIdentifierPreparer,\r\n                            MySQLDBConnector\r\n                        )\r\n\r\nso you may have missed mysqldb connector for `SQLAlchemy` and the solution is to re-install sqlalchemy after installing `mysql-python` module."}, {"tags": [], "down_vote_count": 0, "creation_date": 1514212237, "answer_id": 47969523, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1514212237, "body_markdown": "If pip install mysqlclient produces an error and you use Ubuntu, try:\r\n\r\n    sudo apt-get install -y python-dev libmysqlclient-dev &amp;&amp; sudo pip install mysqlclient"}], "title": "No module named MySQLdb", "view_count": 355906, "answer_count": 16, "code_snippet": ["<code>pip install mysql-python</code>", "<code>pip install mysqlclient</code>", "<code>easy_install</code>", "<code>easy_install</code>", "<code>mysqldb</code>", "<code>mysqldb</code>", "<code>python setup.py install</code>", "<code>3.5</code>", "<code>pip install mysqlclient</code>", "<code>mysqlclient</code>", "<code>sudo apt-get install python-mysqldb\n</code>", "<code>pip install wheel\npip install pymysql\n</code>", "<code>import pymysql\npymysql.install_as_MySQLdb()\n</code>", "<code>pip install MySQL-python\n</code>", "<code>cd</code>", "<code>easy_install MySQL-python</code>", "<code>mysqlclient</code>", "<code>1.3.4</code>", "<code>pip install mysqlclient==1.3.4\n</code>", "<code>pypm install mysql-python</code>", "<code>pypm</code>", "<code>easy_install</code>", "<code>Can't install mysql-python-1.2.3: requires Business Edition subscription</code>", "<code>easy_install mysql-python\n</code>", "<code>pip install PyMySQL\n</code>", "<code>import pymysql\npymysql.install_as_MySQLdb()\n</code>", "<code>brew install mysql-connector-c \npip install MySQL-python\n</code>", "<code>/site-packages/sqlalchemy/dialects/mysql/mysqldb.py</code>", "<code>from ...connectors.mysqldb import (\n                        MySQLDBExecutionContext,\n                        MySQLDBCompiler,\n                        MySQLDBIdentifierPreparer,\n                        MySQLDBConnector\n                    )\n</code>", "<code>SQLAlchemy</code>", "<code>mysql-python</code>", "<code>sudo apt-get install -y python-dev libmysqlclient-dev &amp;&amp; sudo pip install mysqlclient\n</code>"], "path": "stack.django"}, {"tags": ["javascript", "jquery", "node.js"], "creation_date": 1259200460, "body_markdown": "Is it possible to use jQuery selectors/DOM manipulation on the server-side using Node.js?", "last_edit_date": 1381942029, "up_vote_count": 498, "link": "https://stackoverflow.com/questions/1801160/can-i-use-jquery-with-node-js", "_childDocuments_": [{"tags": [], "down_vote_count": 17, "creation_date": 1259200971, "answer_id": 1801178, "path": "stack.gulp.answer", "score": -10, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1259200971, "body_markdown": "Not that I know of. The DOM is a client side thing (jQuery doesn&#39;t parse the HTML, but the DOM).\r\n\r\nHere are some current Node.js projects:\r\n\r\nhttp://wiki.github.com/ry/node\r\n\r\nAnd SimonW&#39;s [djangode][1] is pretty damn cool...\r\n\r\n\r\n  [1]: http://github.com/simonw/djangode"}, {"tags": [], "down_vote_count": 33, "creation_date": 1265611603, "answer_id": 2219999, "path": "stack.gulp.answer", "score": -17, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1465939240, "last_edit_date": 1465939240, "body_markdown": "An alternative is to use [Underscore.js][1].  It should provide what you might have wanted server-side from JQuery.\r\n\r\n\r\n  [1]: http://underscorejs.org/"}, {"tags": [], "down_vote_count": 9, "creation_date": 1268562599, "answer_id": 2441832, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1268562599, "body_markdown": "No. It&#39;s going to be quite a big effort to port a browser environment to node.\r\n\r\nAnother approach, that I&#39;m currently investigating for unit testing, is to create &quot;Mock&quot; version of jQuery that provides callbacks whenever a selector is called.\r\n\r\nThis way you could unit test your jQuery plugins without actually having a DOM. You&#39;ll still have to test in real browsers to see if your code works in the wild, but if you discover browser specific issues, you can easily &quot;mock&quot; those in your unit tests as well.\r\n\r\nI&#39;ll push something to github.com/felixge once it&#39;s ready to show."}, {"tags": [], "down_vote_count": 3, "creation_date": 1272359709, "answer_id": 2719967, "path": "stack.gulp.answer", "score": 16, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1465939214, "last_edit_date": 1465939214, "body_markdown": "I believe the answer to this is now yes.  \r\nhttps://github.com/tmpvar/jsdom\r\n\r\n    var navigator = { userAgent: &quot;node-js&quot; };  \r\n    var jQuery = require(&quot;./node-jquery&quot;).jQueryInit(window, navigator);"}, {"tags": [], "down_vote_count": 1, "creation_date": 1282533788, "answer_id": 3544553, "path": "stack.gulp.answer", "score": 35, "up_vote_count": 36, "is_accepted": false, "last_activity_date": 1381942392, "last_edit_date": 1381942392, "body_markdown": "Using [jsdom][1] you now can. Just look at their jquery example in the examples directory.\r\n\r\n\r\n  [1]: http://github.com/tmpvar/jsdom"}, {"tags": [], "down_vote_count": 4, "creation_date": 1289257902, "answer_id": 4129032, "path": "stack.gulp.answer", "score": 499, "up_vote_count": 503, "is_accepted": false, "last_activity_date": 1470752653, "last_edit_date": 1470752653, "body_markdown": "**Update**: (late 2013) The official jQuery team finally took over the management of the `jquery` package on npm:\r\n\r\n    npm install jquery\r\n\r\nThen:\r\n\r\n    require(&quot;jsdom&quot;).env(&quot;&quot;, function(err, window) {\r\n        if (err) {\r\n            console.error(err);\r\n            return;\r\n        }\r\n     \r\n        var $ = require(&quot;jquery&quot;)(window);\r\n    });\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1320433969, "answer_id": 8014561, "path": "stack.gulp.answer", "score": 49, "up_vote_count": 51, "is_accepted": false, "last_activity_date": 1320433969, "body_markdown": "Yes you can, using a library I created called nodeQuery https://github.com/tblobaum/nodeQuery\r\n\r\n    var Express = require(&#39;express&#39;)\r\n        , dnode = require(&#39;dnode&#39;)\r\n        , nQuery = require(&#39;nodeQuery&#39;)\r\n        , express = Express.createServer();\r\n        \r\n    var app = function ($) {\r\n        $.on(&#39;ready&#39;, function () {\r\n            // do some stuff to the dom in real-time\r\n            $(&#39;body&#39;).append(&#39;Hello World&#39;);\r\n            $(&#39;body&#39;).append(&#39;&lt;input type=&quot;text&quot; /&gt;&#39;);\r\n            $(&#39;input&#39;).live(&#39;click&#39;, function () {\r\n                console.log(&#39;input clicked&#39;);\r\n                // ...\r\n            });\r\n        });\r\n    };\r\n\r\n    nQuery\r\n        .use(app);\r\n\r\n    express\r\n        .use(nQuery.middleware)\r\n        .use(Express.static(__dirname + &#39;/public&#39;))\r\n        .listen(3000);\r\n\r\n    dnode(nQuery.middleware).listen(express);"}, {"tags": [], "down_vote_count": 2, "creation_date": 1335704842, "answer_id": 10372368, "path": "stack.gulp.answer", "score": 1, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1381942361, "last_edit_date": 1381942361, "body_markdown": "The module [jsdom][1] is a great tool. But if you want to evaluate entire pages and do some funky stuff on them server side I suggest running them in their own context:\r\n\r\n    vm.runInContext\r\n\r\nSo things like `require` / `CommonJS` on site will not blow your Node process itself.\r\n\r\nYou can find documentation [here][2]. Cheers!\r\n\r\n\r\n  [1]: https://github.com/tmpvar/jsdom\r\n  [2]: http://nodejs.org/api/vm.html"}, {"tags": [], "down_vote_count": 2, "creation_date": 1354179287, "answer_id": 13621988, "path": "stack.gulp.answer", "score": 47, "up_vote_count": 49, "is_accepted": false, "last_activity_date": 1354179287, "body_markdown": "At the time of writing there also is the maintained [Cheerio][1].\r\n\r\n&gt; Fast, flexible, and lean implementation of core jQuery designed\r\n&gt; specifically for the server.\r\n\r\n\r\n  [1]: https://github.com/MatthewMueller/cheerio"}, {"tags": [], "down_vote_count": 3, "creation_date": 1366282603, "answer_id": 16081058, "path": "stack.gulp.answer", "score": 2, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1376085435, "last_edit_date": 1495540488, "body_markdown": "__WARNING__\r\n\r\nThis solution, as mentioned by [Golo Roden](https://stackoverflow.com/users/1333873/golo-roden) is not _correct_. It is just a quick fix to help people to have their actual jQuery code running using a Node app structure, but it&#39;s not Node philosophy because the jQuery is still running on the client side instead of on the server side. I&#39;m sorry for giving a wrong answer.\r\n\r\n***\r\n\r\nYou can also render Jade with node and put your jQuery code inside. Here is the code of the jade file:\r\n\r\n    !!! 5\r\n    html(lang=&quot;en&quot;)\r\n      head\r\n        title Holamundo!\r\n        script(type=&#39;text/javascript&#39;, src=&#39;http://code.jquery.com/jquery-1.9.1.js&#39;)\r\n      body\r\n        h1#headTitle Hello, World\r\n        p#content This is an example of Jade.\r\n        script\r\n          $(&#39;#headTitle&#39;).click(function() {\r\n            $(this).hide();\r\n          });\r\n          $(&#39;#content&#39;).click(function() {\r\n            $(this).hide();\r\n          });"}, {"tags": [], "down_vote_count": 1, "creation_date": 1436643389, "answer_id": 31361044, "path": "stack.gulp.answer", "score": 23, "up_vote_count": 24, "is_accepted": false, "last_activity_date": 1436652285, "last_edit_date": 1436652285, "body_markdown": "# A simple crawler using Cheerio\r\n\r\nThis is my formula to make a simple crawler in Node.js. It is the main reason for wanting to do DOM manipulation on the server side and probably it&#39;s the reason why you got here.\r\n\r\nFirst, use [`request`](//github.com/request/request) to download the page to be parsed. When the download is complete, handle it to [`cheerio`](//github.com/cheeriojs/cheerio) and begin DOM manipulation just like using jQuery.\r\n\r\nWorking example:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var\r\n        request = require(&#39;request&#39;),\r\n        cheerio = require(&#39;cheerio&#39;);\r\n    \r\n    function parse(url) {\r\n        request(url, function (error, response, body) {\r\n            var\r\n                $ = cheerio.load(body);\r\n    \r\n            $(&#39;.question-summary .question-hyperlink&#39;).each(function () {\r\n                console.info($(this).text());\r\n            });\r\n        })\r\n    }\r\n    \r\n    parse(&#39;http://stackoverflow.com/&#39;);\r\n\r\nThis example will print to the console all top questions showing on SO home page. This is why I love Node.js and its community. It couldn&#39;t get easier than that :-)\r\n\r\nInstall dependencies:\r\n\r\n&gt; npm install request cheerio\r\n\r\nAnd run (assuming the script above is in file `crawler.js`):\r\n\r\n&gt; node crawler.js\r\n\r\n---\r\n\r\n## Encoding\r\n\r\nSome pages will have non-english content in a certain encoding and you will need to decode it to `UTF-8`. For instance, a page in brazilian portuguese (or any other language of latin origin) will likely be encoded in `ISO-8859-1` (a.k.a. &quot;latin1&quot;). When decoding is needed, I tell `request` not to interpret the content in any way and instead use [`iconv-lite`](//github.com/ashtuchkin/iconv-lite) to do the job.\r\n\r\nWorking example:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var\r\n        request = require(&#39;request&#39;),\r\n        iconv = require(&#39;iconv-lite&#39;),\r\n        cheerio = require(&#39;cheerio&#39;);\r\n    \r\n    var\r\n        PAGE_ENCODING = &#39;utf-8&#39;; // change to match page encoding\r\n\r\n    function parse(url) {\r\n        request({\r\n            url: url,\r\n            encoding: null  // do not interpret content yet\r\n        }, function (error, response, body) {\r\n            var\r\n                $ = cheerio.load(iconv.decode(body, PAGE_ENCODING));\r\n    \r\n            $(&#39;.question-summary .question-hyperlink&#39;).each(function () {\r\n                console.info($(this).text());\r\n            });\r\n        })\r\n    }\r\n    \r\n    parse(&#39;http://stackoverflow.com/&#39;);\r\n\r\nBefore running, install dependencies:\r\n\r\n&gt; npm install request iconv-lite cheerio\r\n\r\nAnd then finally:\r\n\r\n&gt; node crawler.js\r\n\r\n---\r\n\r\n## Following links\r\n\r\nThe next step would be to follow links. Say you want to list all posters from each top question on SO. You have to first list all top questions (example above) and then enter each link, parsing each question&#39;s page to get the list of involved users.\r\n\r\nWhen you start following links, a [callback hell](https://strongloop.com/strongblog/node-js-callback-hell-promises-generators/) can begin. To avoid that, you should use some kind of promises, futures or whatever. I always keep [async](https://github.com/caolan/async) in my toolbelt. So, here is a full example of a crawler using async:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var\r\n        url = require(&#39;url&#39;),\r\n        request = require(&#39;request&#39;),\r\n        async = require(&#39;async&#39;),\r\n        cheerio = require(&#39;cheerio&#39;);\r\n    \r\n    var\r\n        baseUrl = &#39;http://stackoverflow.com/&#39;;\r\n    \r\n    // Gets a page and returns a callback with a $ object\r\n    function getPage(url, parseFn) {\r\n        request({\r\n            url: url\r\n        }, function (error, response, body) {\r\n            parseFn(cheerio.load(body))\r\n        });\r\n    }\r\n    \r\n    getPage(baseUrl, function ($) {\r\n        var\r\n            questions;\r\n    \r\n        // Get list of questions\r\n        questions = $(&#39;.question-summary .question-hyperlink&#39;).map(function () {\r\n            return {\r\n                title: $(this).text(),\r\n                url: url.resolve(baseUrl, $(this).attr(&#39;href&#39;))\r\n            };\r\n        }).get().slice(0, 5); // limit to the top 5 questions\r\n    \r\n        // For each question\r\n        async.map(questions, function (question, questionDone) {\r\n    \r\n            getPage(question.url, function ($$) {\r\n    \r\n                // Get list of users\r\n                question.users = $$(&#39;.post-signature .user-details a&#39;).map(function () {\r\n                    return $$(this).text();\r\n                }).get();\r\n    \r\n                questionDone(null, question);\r\n            });\r\n    \r\n        }, function (err, questionsWithPosters) {\r\n    \r\n            // This function is called by async when all questions have been parsed\r\n    \r\n            questionsWithPosters.forEach(function (question) {\r\n    \r\n                // Prints each question along with its user list\r\n                console.info(question.title);\r\n                question.users.forEach(function (user) {\r\n                    console.info(&#39;\\t%s&#39;, user);\r\n                });\r\n            });\r\n        });\r\n    });\r\n\r\nBefore running:\r\n\r\n&gt; npm install request async cheerio\r\n\r\nRun a test:\r\n\r\n&gt; node crawler.js\r\n\r\nSample output:\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    Is it possible to pause a Docker image build?\r\n    \tconradk\r\n    \tThomasleveil\r\n    PHP Image Crop Issue\r\n    \tElyor\r\n    \tHouston Molinar\r\n    Add two object in rails\r\n    \tuser1670773\r\n    \tMakoto\r\n    \tmax\r\n    Asymmetric encryption discrepancy - Android vs Java\r\n    \tCookie Monster\r\n    \tWand Maker\r\n    Objective-C: Adding 10 seconds to timer in SpriteKit\r\n    \tChristian K Rider\r\n\r\nAnd that&#39;s the basic you should know to start making your own crawlers :-)\r\n\r\n---\r\n\r\n## Libraries used\r\n\r\n- [request](//github.com/request/request)\r\n- [iconv-lite](//github.com/ashtuchkin/iconv-lite)\r\n- [cheerio](//github.com/cheeriojs/cheerio)\r\n- [async](https://github.com/caolan/async)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1466494667, "answer_id": 37938266, "path": "stack.gulp.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1486478728, "last_edit_date": 1486478728, "body_markdown": "jQuery module can be installed using:\r\n\r\n    npm install jquery\r\n\r\nExample:\r\n\r\n    var $ = require(&#39;jquery&#39;);\r\n    var http = require(&#39;http&#39;);\r\n\r\n    var options = {\r\n        host: &#39;jquery.com&#39;,\r\n        port: 80,\r\n        path: &#39;/&#39;\r\n    };\r\n\r\n    var html = &#39;&#39;;\r\n    http.get(options, function(res) {\r\n    res.on(&#39;data&#39;, function(data) {\r\n        // collect the data chunks to the variable named &quot;html&quot;\r\n        html += data;\r\n    }).on(&#39;end&#39;, function() {\r\n        // the whole of webpage data has been collected. parsing time!\r\n        var title = $(html).find(&#39;title&#39;).text();\r\n        console.log(title);\r\n     });\r\n    });\r\n\r\nReferences of jQuery in Node.js** : \r\n\r\n* http://quaintous.com/2015/07/31/jqery-node-mystery/\r\n* http://www.hacksparrow.com/jquery-with-node-js.html"}, {"tags": [], "down_vote_count": 1, "creation_date": 1479391067, "answer_id": 40656811, "path": "stack.gulp.answer", "score": 17, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1479391067, "body_markdown": "in 2016 things are way easier. install jquery to node.js with your console:\r\n\r\n    npm install jquery\r\n\r\nbind it to the variable `$` (for example - i am used to it) in your node.js code: \r\n\r\n    var $ = require(&quot;jquery&quot;);\r\n\r\ndo stuff:\r\n\r\n    $.ajax({\r\n        url: &#39;gimme_json.php&#39;,\r\n        dataType: &#39;json&#39;,\r\n        method: &#39;GET&#39;,\r\n        data: { &quot;now&quot; : true }\r\n    });\r\n\r\nalso works for gulp as it is based on node.js.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1497312427, "answer_id": 44510457, "path": "stack.gulp.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1500069774, "last_edit_date": 1500069774, "body_markdown": "`npm install jquery --save` **#note ALL LOWERCASE**\r\n\r\n`npm install jsdom --save`\r\n\r\n    const jsdom = require(&quot;jsdom&quot;);\r\n    const dom = new jsdom.JSDOM(`&lt;!DOCTYPE html&gt;`);\r\n    var $ = require(&quot;jquery&quot;)(dom.window);\r\n\r\n\r\n    $.getJSON(&#39;https://api.github.com/users/nhambayi&#39;,function(data) {\r\n      console.log(data);\r\n    });"}, {"tags": [], "down_vote_count": 0, "creation_date": 1501157316, "answer_id": 45350409, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1501157316, "body_markdown": "My working code is:\r\n\r\n\tnpm install jquery\r\n\t\r\nand then:\r\n\r\n\tglobal.jQuery \t= require(&#39;jquery&#39;);\r\n\tglobal.$ \t\t= global.jQuery;\r\n\r\nor if the window is present, then:\r\n\r\n\ttypeof window !== &quot;undefined&quot; ? window : this;\r\n\twindow.jQuery \t= require(&#39;jquery&#39;);\r\n\twindow.$ \t\t= window.jQuery;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1508320416, "answer_id": 46807406, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1508320416, "body_markdown": "You can use [Electron][1], it allows hybrid browserjs and nodejs.\r\n\r\nBefore, I tried to use canvas2d in nodejs, but finally I gave up. It&#39;s not supported by nodejs default, and too hard to install it (many many ... dependeces).\r\nUntil I use Electron, I can easily use all my previous browserjs code, even WebGL, and pass the result value(eg. result base64 image data) to nodejs code.\r\n\r\n\r\n  [1]: https://electron.atom.io/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1511542447, "answer_id": 47477412, "path": "stack.gulp.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1511542447, "body_markdown": "You have to get the window using the new JSDOM API.\r\n\r\n```\r\nconst jsdom = require(&quot;jsdom&quot;);\r\nconst { window } = new jsdom.JSDOM(`...`);\r\nvar $ = require(&quot;jquery&quot;)(window);\r\n```"}, {"tags": [], "down_vote_count": 0, "creation_date": 1517483975, "answer_id": 48561481, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1517483975, "body_markdown": "As of jsdom v10, .env() function is deprecated. I did it like below after trying a lot of things to require jquery:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var jsdom = require(&#39;jsdom&#39;);\r\n    const { JSDOM } = jsdom;\r\n    const { window } = new JSDOM();\r\n    const { document } = (new JSDOM(&#39;&#39;)).window;\r\n    global.document = document;\r\n\r\n    var $ = jQuery = require(&#39;jquery&#39;)(window);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nHope this helps you or anyone who has been facing these types of issues."}], "title": "Can I use jQuery with Node.js?", "view_count": 276883, "answer_count": 18, "code_snippet": ["<code>jquery</code>", "<code>npm install jquery\n</code>", "<code>require(\"jsdom\").env(\"\", function(err, window) {\n    if (err) {\n        console.error(err);\n        return;\n    }\n\n    var $ = require(\"jquery\")(window);\n});\n</code>", "<code>require(\"...\").env is not a function</code>", "<code>var Express = require('express')\n    , dnode = require('dnode')\n    , nQuery = require('nodeQuery')\n    , express = Express.createServer();\n\nvar app = function ($) {\n    $.on('ready', function () {\n        // do some stuff to the dom in real-time\n        $('body').append('Hello World');\n        $('body').append('&lt;input type=\"text\" /&gt;');\n        $('input').live('click', function () {\n            console.log('input clicked');\n            // ...\n        });\n    });\n};\n\nnQuery\n    .use(app);\n\nexpress\n    .use(nQuery.middleware)\n    .use(Express.static(__dirname + '/public'))\n    .listen(3000);\n\ndnode(nQuery.middleware).listen(express);\n</code>", "<code>, express = Express.createServer();</code>", "<code>TypeError: Express.createServer is not a function</code>", "<code>:gt(1)</code>", "<code>request</code>", "<code>cheerio</code>", "<code>var\n    request = require('request'),\n    cheerio = require('cheerio');\n\nfunction parse(url) {\n    request(url, function (error, response, body) {\n        var\n            $ = cheerio.load(body);\n\n        $('.question-summary .question-hyperlink').each(function () {\n            console.info($(this).text());\n        });\n    })\n}\n\nparse('http://stackoverflow.com/');\n</code>", "<code>crawler.js</code>", "<code>UTF-8</code>", "<code>ISO-8859-1</code>", "<code>request</code>", "<code>iconv-lite</code>", "<code>var\n    request = require('request'),\n    iconv = require('iconv-lite'),\n    cheerio = require('cheerio');\n\nvar\n    PAGE_ENCODING = 'utf-8'; // change to match page encoding\n\nfunction parse(url) {\n    request({\n        url: url,\n        encoding: null  // do not interpret content yet\n    }, function (error, response, body) {\n        var\n            $ = cheerio.load(iconv.decode(body, PAGE_ENCODING));\n\n        $('.question-summary .question-hyperlink').each(function () {\n            console.info($(this).text());\n        });\n    })\n}\n\nparse('http://stackoverflow.com/');\n</code>", "<code>var\n    url = require('url'),\n    request = require('request'),\n    async = require('async'),\n    cheerio = require('cheerio');\n\nvar\n    baseUrl = 'http://stackoverflow.com/';\n\n// Gets a page and returns a callback with a $ object\nfunction getPage(url, parseFn) {\n    request({\n        url: url\n    }, function (error, response, body) {\n        parseFn(cheerio.load(body))\n    });\n}\n\ngetPage(baseUrl, function ($) {\n    var\n        questions;\n\n    // Get list of questions\n    questions = $('.question-summary .question-hyperlink').map(function () {\n        return {\n            title: $(this).text(),\n            url: url.resolve(baseUrl, $(this).attr('href'))\n        };\n    }).get().slice(0, 5); // limit to the top 5 questions\n\n    // For each question\n    async.map(questions, function (question, questionDone) {\n\n        getPage(question.url, function ($$) {\n\n            // Get list of users\n            question.users = $$('.post-signature .user-details a').map(function () {\n                return $$(this).text();\n            }).get();\n\n            questionDone(null, question);\n        });\n\n    }, function (err, questionsWithPosters) {\n\n        // This function is called by async when all questions have been parsed\n\n        questionsWithPosters.forEach(function (question) {\n\n            // Prints each question along with its user list\n            console.info(question.title);\n            question.users.forEach(function (user) {\n                console.info('\\t%s', user);\n            });\n        });\n    });\n});\n</code>", "<code>Is it possible to pause a Docker image build?\n    conradk\n    Thomasleveil\nPHP Image Crop Issue\n    Elyor\n    Houston Molinar\nAdd two object in rails\n    user1670773\n    Makoto\n    max\nAsymmetric encryption discrepancy - Android vs Java\n    Cookie Monster\n    Wand Maker\nObjective-C: Adding 10 seconds to timer in SpriteKit\n    Christian K Rider\n</code>", "<code>npm install jquery\n</code>", "<code>$</code>", "<code>var $ = require(\"jquery\");\n</code>", "<code>$.ajax({\n    url: 'gimme_json.php',\n    dataType: 'json',\n    method: 'GET',\n    data: { \"now\" : true }\n});\n</code>", "<code>var $ = require(\"jquery\"); $.ajax // undefined</code>", "<code>npm install jquery</code>", "<code>&gt; console.log(require(\"jquery\").toString());</code>", "<code>function ( w ) {   if ( !w.document ) {     throw new Error( \"jQuery requires a window with a document\" );   }   return factory( w ); }</code>", "<code>var navigator = { userAgent: \"node-js\" };  \nvar jQuery = require(\"./node-jquery\").jQueryInit(window, navigator);\n</code>", "<code>npm install jquery\n</code>", "<code>var $ = require('jquery');\nvar http = require('http');\n\nvar options = {\n    host: 'jquery.com',\n    port: 80,\n    path: '/'\n};\n\nvar html = '';\nhttp.get(options, function(res) {\nres.on('data', function(data) {\n    // collect the data chunks to the variable named \"html\"\n    html += data;\n}).on('end', function() {\n    // the whole of webpage data has been collected. parsing time!\n    var title = $(html).find('title').text();\n    console.log(title);\n });\n});\n</code>", "<code>npm install jquery --save</code>", "<code>npm install jsdom --save</code>", "<code>const jsdom = require(\"jsdom\");\nconst dom = new jsdom.JSDOM(`&lt;!DOCTYPE html&gt;`);\nvar $ = require(\"jquery\")(dom.window);\n\n\n$.getJSON('https://api.github.com/users/nhambayi',function(data) {\n  console.log(data);\n});\n</code>", "<code>!!! 5\nhtml(lang=\"en\")\n  head\n    title Holamundo!\n    script(type='text/javascript', src='http://code.jquery.com/jquery-1.9.1.js')\n  body\n    h1#headTitle Hello, World\n    p#content This is an example of Jade.\n    script\n      $('#headTitle').click(function() {\n        $(this).hide();\n      });\n      $('#content').click(function() {\n        $(this).hide();\n      });\n</code>", "<code>\nconst jsdom = require(\"jsdom\");\nconst { window } = new jsdom.JSDOM(`...`);\nvar $ = require(\"jquery\")(window);\n</code>", "<code>vm.runInContext\n</code>", "<code>require</code>", "<code>CommonJS</code>", "<code>npm install jquery\n</code>", "<code>global.jQuery   = require('jquery');\nglobal.$        = global.jQuery;\n</code>", "<code>typeof window !== \"undefined\" ? window : this;\nwindow.jQuery   = require('jquery');\nwindow.$        = window.jQuery;\n</code>", "<code>var jsdom = require('jsdom');\r\nconst { JSDOM } = jsdom;\r\nconst { window } = new JSDOM();\r\nconst { document } = (new JSDOM('')).window;\r\nglobal.document = document;\r\n\r\nvar $ = jQuery = require('jquery')(window);</code>"], "path": "stack.django"}, {"tags": ["scripting", "e-commerce", "captcha", "bots", "honeypot"], "creation_date": 1232120960, "body_markdown": "&gt; *[update]* I&#39;ve accepted an answer, as lc deserves the bounty due to the well thought-out answer, but sadly, I believe we&#39;re stuck with our original worst case scenario: **CAPTCHA everyone on purchase attempts of the crap**. Short explanation: caching / web farms make it impossible for us to actually track hits, and any workaround (sending a non-cached web-beacon, writing to a unified table, etc.) slows the site down worse than the bots would. There is likely some pricey bit of hardware from Cisco or the like that can help at a high level, but it&#39;s hard to justify the cost if CAPTCHAing everyone is an alternative. I&#39;ll attempt to do a more full explanation in here later, as well as cleaning this up for future searchers (though others are welcome to try, as it&#39;s community wiki).\r\n\r\nI&#39;ve added bounty to this question and attempted to explain why the current answers don&#39;t fit our needs. First, though, thanks to all of you who have thought about this, it&#39;s amazing to have this collective intelligence to help work through seemingly impossible problems.\r\n\r\nI&#39;ll be a little more clear than I was before: This is about the bag o&#39; crap sales on woot.com. I&#39;m the president of Woot Workshop, the subsidiary of Woot that does the design, writes the product descriptions, podcasts, blog posts, and moderates the forums. I work in the css/html world and am only barely familiar with the rest of the developer world. I work closely with the developers and have talked through all of the answers here (and many other ideas we&#39;ve had).\r\n\r\nUsability of the site is a massive part of my job, and making the site exciting and fun is most of the rest of it. That&#39;s where the three goals below derive. CAPTCHA harms usability, and bots steal the fun and excitement out of our crap sales.\r\n\r\n---\r\n\r\nTo set up the scenario a little more, bots are slamming our front page tens of times a second screenscraping (and/or scanning our rss) for the Random Crap sale. The moment they see that, it triggers a second stage of the program that logs in, clicks I want One, fills out the form, and buys the crap.\r\n\r\n---\r\n\r\nIn current (2/6/2009) order of votes:\r\n\r\n&lt;a href=&quot;https://stackoverflow.com/questions/450835/how-would-you-stop-scripters-from-slamming-your-site-hundreds-of-times-a-second#answer-450899&quot;&gt;lc&lt;/a&gt;:\r\nOn stackoverflow and other sites that use this method, they&#39;re almost always dealing with authenticated (logged in) users, because the task being attempted requires that.\r\n\r\nOn Woot, anonymous (non-logged) users can view our home page. In other words, the slamming bots can be non-authenticated (and essentially non-trackable except by IP address).\r\nSo we&#39;re back to scanning for IPs, which a) is fairly useless in this age of cloud networking and spambot zombies and b) catches too many innocents given the number of businesses that come from one IP address (not to mention the issues with non-static IP ISPs and potential performance hits to trying to track this).\r\n\r\nOh, and having people call us would be the worst possible scenario. Can we have them call you?\r\n\r\n&lt;a href=&quot;https://stackoverflow.com/questions/450835/how-would-you-stop-scripters-from-slamming-your-site-hundreds-of-times-a-second/450931#450931&quot;&gt;BradC&lt;/a&gt;\r\nNed Batchelder&#39;s methods look pretty cool, but they&#39;re pretty firmly designed to defeat bots built for a network of sites. Our problem is bots are built specifically to defeat our site. Some of these methods could likely work for a short time until the scripters evolved their bots to ignore the honeypot, screenscrape for nearby label names instead of form ids, and use a javascript-capable browser control.\r\n\r\n&lt;a href=&quot;https://stackoverflow.com/questions/450835/how-would-you-stop-scripters-from-slamming-your-site-hundreds-of-times-a-second/450946#450946&quot;&gt;lc again&lt;/a&gt;\r\n&quot;Unless, of course, the hype is part of your marketing scheme.&quot; Yes, it definitely is. The surprise of when the item appears, as well as the excitement if you manage to get one is probably as much or more important than the crap you actually end up getting. Anything that eliminates first-come/first-serve is detrimental to the thrill of &#39;winning&#39; the crap.\r\n\r\n&lt;a href=&quot;https://stackoverflow.com/questions/450835/how-would-you-stop-scripters-from-slamming-your-site-hundreds-of-times-a-second/450928#450928&quot;&gt;novatrust&lt;/a&gt;\r\nAnd I, for one, welcome our new bot overlords. We actually do offer rss feeds to allow 3rd party apps to scan our site for product info, but not ahead of the main site html. If I&#39;m intepreting it right, your solution does help goal 2 (performance issues) by completely sacrificing goal 1, and just resigning the fact that bots will be buying most of the crap. I upvoted your response, because your last paragraph pessimism feels accurate to me. There seems to be no silver bullet here.\r\n\r\nThe rest of the responses generally rely on IP tracking, which, again, seems to both be useless (with botnets/zombies/cloud networking) and detrimental (catching many innocents who come from same-IP destinations).\r\n\r\nAny other approaches / ideas? My developers keep saying &quot;let&#39;s just do CAPTCHA&quot; but I&#39;m still hoping there&#39;s some less intrusive method to all the actual humans out there wanting some of our crap.\r\n\r\n---\r\n\r\n*END UPDATE, following is the original question:*\r\n\r\nSay you&#39;re selling something cheap that has a very high perceived value, and you have a very limited amount. No one knows exactly when you will sell this item. And over a million people regularly come by to see what you&#39;re selling.\r\n\r\nYou end up with scripters, bots, and hacks attempting to programmatically [a] figure out when you&#39;re selling said item, and [b] make sure they&#39;re among the first to buy it. This sucks for two reasons:\r\n\r\n1. Your site is slammed by non-humans, slowing everything down for everyone.\r\n\r\n2. The scripters end up &#39;winning&#39; the product, causing the regulars to feel cheated.\r\n\r\nA seemingly obvious solution is to create some hoops for your users to jump through before placing their order, but there are at least three problems with this:\r\n\r\ni. The user experience sucks for humans, as they have to decipher CAPTCHA, pick out the cat, or do a math problem.\r\n\r\nii. If the perceived benefit is high enough, and the crowd large enough, some group will find their way around any tweak, leading to an arms race. (This is especially true the simpler the tweak is...hidden &#39;comments&#39; form, re-arranging the form elements, mis-labeling them, hidden &#39;gotcha&#39; text all willl work once and then need to be changed to fight all the people targeting this specific form.)\r\n\r\niii. Even if the scripters can&#39;t &#39;solve&#39; your tweak, in the end it doesn&#39;t prevent them from slamming your front page, and then sounding an alarm for the scripter to fill out the order, humanly. Given they get the advantage from solving [a], they will likely still win [b] since they&#39;ll be the first humans reaching the order page. Additionally, 1. still happens, causing server errors, and a decreased performance for everyone.\r\n\r\nAnother solution is to watch for IPs hitting too often, block them from the firewall, or otherwise prevent them from ordering. This could solve 2. and prevent [b] but the performance hit from scanning for IPs as they come in is massive, and would likely cause more problems like 1. than the scripters were causing on their own. Additionally, the presence of cloud networking and spambot zombies makes IP checking fairly useless.\r\n\r\nA third idea, forcing the order form to be loaded for some time (say, half a second) would potentially slow the progress of the speedy orders, but again, the scripters would still likely be the first people in, at any speed not detrimental to actual users.\r\n\r\n---\r\n\r\nMy eventual goals with some solution:\r\n\r\n1. Sell the item to non-scripting humans.\r\n\r\n2. Keep the site running at a speed not slowed by bots.\r\n\r\n3. Don&#39;t hassle the &#39;normal&#39; users with any tasks to complete to prove they&#39;re human.", "last_edit_date": 1495540490, "up_vote_count": 476, "link": "https://stackoverflow.com/questions/450835/stopping-scripters-from-slamming-your-website-hundreds-of-times-a-second", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1232121642, "answer_id": 450888, "path": "stack.django.answer", "score": 1, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1232121642, "body_markdown": "You could try to make the price harder for scripts to read.  This is achieved most simply by converting it to an image, but a text recognition algorithm could still get around this.  If enough scripters get around it, you could try applying captcha-like things to this image, but obviously at the cost of user experience.  Instead of an image, the price could go in a flash app.\r\n\r\nAlternately, you could try to devise a way to &quot;shuffle&quot; the HTML pf a page in some way that doesn&#39;t affect the rendering.  I can&#39;t think of a good example off the top of my head, but I&#39;m sure it&#39;s somehow doable."}, {"tags": [], "down_vote_count": 3, "creation_date": 1232121722, "answer_id": 450899, "path": "stack.django.answer", "score": 218, "up_vote_count": 221, "is_accepted": true, "last_activity_date": 1234140652, "last_edit_date": 1234140652, "body_markdown": "How about implementing something like SO does with the CAPTCHAs?\r\n\r\nIf you&#39;re using the site normally, you&#39;ll probably never see one. If you happen to reload the same page too often, post successive comments too quickly, or something else that triggers an alarm, make them prove they&#39;re human. In your case, this would probably be constant reloads of the same page, following every link on a page quickly, or filling in an order form too fast to be human.\r\n\r\nIf they fail the check x times in a row (say, 2 or 3), give that IP a timeout or other such measure. Then at the end of the timeout, dump them back to the check again.\r\n\r\n----\r\n\r\nSince you have unregistered users accessing the site, you do have only IPs to go on. You can issue sessions to each browser and track that way if you wish. And, of course, throw up a human-check if too many sessions are being (re-)created in succession (in case a bot keeps deleting the cookie).\r\n\r\nAs far as catching too many innocents, you can put up a disclaimer on the human-check page: &quot;This page may also appear if too many anonymous users are viewing our site from the same location. We encourage you to register or login to avoid this.&quot; (Adjust the wording appropriately.)\r\n\r\nBesides, what are the odds that X people are loading the same page(s) at the same time from one IP? If they&#39;re high, maybe you need a different trigger mechanism for your bot alarm.\r\n\r\n----\r\n\r\nEdit: Another option is if they fail too many times, and you&#39;re confident about the product&#39;s demand, to block them and make them personally CALL you to remove the block.\r\n\r\nHaving people call does seem like an asinine measure, but it *makes sure there&#39;s a human somewhere behind the computer*. The key is to have the block only be in place for a condition which should almost never happen unless it&#39;s a bot (e.g. fail the check multiple times in a row). Then it FORCES human interaction - to pick up the phone.\r\n\r\nIn response to the comment of having them call me, there&#39;s obviously that tradeoff here. Are you worried enough about ensuring your users are human to accept a couple phone calls when they go on sale? If I were so concerned about a product getting to human users, I&#39;d have to make this decision, perhaps sacrificing a (small) bit of my time in the process. \r\n\r\nSince it seems like you&#39;re determined to not let bots get the upper hand/slam your site, I believe the phone may be a good option. Since I don&#39;t make a profit off your product, I have no interest in receiving these calls. Were you to share some of that profit, however, I may become interested. As this is your product, you have to decide how much you care and implement accordingly.\r\n\r\n----\r\n\r\nThe other ways of releasing the block just aren&#39;t as effective: a timeout (but they&#39;d get to slam your site again after, rinse-repeat), a long timeout (if it was really a human trying to buy your product, they&#39;d be SOL and punished for failing the check), email (easily done by bots), fax (same), or snail mail (takes too long).\r\n\r\nYou could, of course, instead have the timeout period increase per IP for each time they get a timeout. Just make sure you&#39;re not punishing true humans inadvertently."}, {"tags": [], "down_vote_count": 1, "creation_date": 1232122115, "answer_id": 450928, "path": "stack.django.answer", "score": 9, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1433333060, "last_edit_date": 1433333060, "body_markdown": "I say expose the price information using an API. This is the unintuitive solution but it does work to give you control over the situation. Add some limitations to the API to make it slightly less functional than the website.\r\n\r\nYou could do the same for ordering. You could experiment with small changes to the API functionality/performance until you get the desired effect.\r\n\r\nThere are proxies and botnets to defeat IP checks. There are captcha reading scripts that are extremely good. There are even teams of workers in India who defeat captchas for a small price. Any solution you can come up with can be reasonably defeated. Even Ned Batchelder&#39;s solutions can be stepped past by using a WebBrowser control or other simulated browser combined with a botnet or proxy list."}, {"tags": [], "down_vote_count": 1, "creation_date": 1232122167, "answer_id": 450931, "path": "stack.django.answer", "score": 54, "up_vote_count": 55, "is_accepted": false, "last_activity_date": 1234230007, "last_edit_date": 1234230007, "body_markdown": "Take a look at &lt;a href=&quot;http://nedbatchelder.com/text/stopbots.html&quot;&gt;this article by ned Batchelder here&lt;/a&gt;. His article is about stopping spambots, but the same techniques could easily apply to your site.\r\n\r\n&gt; Rather than stopping bots by having\r\n&gt; people identify themselves, we can\r\n&gt; stop the bots by making it difficult\r\n&gt; for them to make a successful post, or\r\n&gt; by having them inadvertently identify\r\n&gt; themselves as bots. This removes the\r\n&gt; burden from people, and leaves the\r\n&gt; comment form free of visible anti-spam\r\n&gt; measures.\r\n&gt; \r\n&gt; This technique is how I prevent\r\n&gt; spambots on this site. It works. The\r\n&gt; method described here doesn&#39;t look at\r\n&gt; the content at all.\r\n\r\nSome other ideas:\r\n\r\n  - Create an *official* auto-notify mechanism (RSS feed? Twitter?) that people can subscribe to when your product goes on sale. This reduces the *need* for people to make scripts.\r\n  - Change your obfuscation technique *right before* a new item goes on sale. So even if the scripters can escalate the arms race, they are always a day behind.\r\n\r\n-----\r\n\r\nEDIT:  To be totally clear, Ned&#39;s article above describe methods to prevent the automated PURCHASE of items by preventing a BOT from going through the forms to submit an order. His techniques wouldn&#39;t be useful for preventing bots from screen-scraping the home page to determine when a Bandoleer of Carrots comes up for sale. I&#39;m not sure preventing THAT is really possible.\r\n\r\nWith regard to your comments about the effectiveness of Ned&#39;s strategies: Yes, he discusses honeypots, but I don&#39;t think that&#39;s his strongest strategy. His discussion of the **SPINNER** is the original reason I mentioned his article. Sorry I didn&#39;t make that clearer in my original post:\r\n\r\n&gt; The spinner is a hidden field used for\r\n&gt; a few things: it hashes together a\r\n&gt; number of values that prevent\r\n&gt; tampering and replays, and is used to\r\n&gt; obscure field names. The spinner is an\r\n&gt; MD5 hash of:\r\n&gt; \r\n&gt;  - The timestamp, \r\n&gt;  - The client&#39;s IP address, \r\n&gt;  - The entry id of the blog entry being commented on, and \r\n&gt;  - A secret.\r\n\r\nHere is how you could implement that at WOOT.com:\r\n\r\nChange the &quot;secret&quot; value that is used as part of the hash each time a new item goes on sale. This means that if someone is going to design a BOT to auto-purchase items, *it would only work until the next item comes on sale*!!\r\n\r\nEven if someone is able to quickly re-build their bot, all the other actual users will have already purchased a BOC, and your problem is solved!\r\n\r\nThe other strategy he discusses is to *change* the honeypot technique from time to time (again, change it when a new item goes on sale):\r\n\r\n - Use CSS classes (randomized of course) to set the fields or a containing element to display:none.\r\n - Color the fields the same (or very similar to) the background of the page.\r\n - Use positioning to move a field off of the visible area of the page.\r\n - Make an element too small to show the contained honeypot field.\r\n - Leave the fields visible, but use positioning to cover them with an obscuring element.\r\n - Use Javascript to effect any of these changes, requiring a bot to have a full Javascript engine.\r\n - Leave the honeypots displayed like the other fields, but tell people not to enter anything into them.\r\n\r\nI guess my overall idea is to CHANGE THE FORM DESIGN when each new item goes on sale. Or at LEAST, change it when a new BOC goes on sale. \r\n\r\nWhich is what, a couple times/month?\r\n\r\nIf you accept this answer, will you give me a heads-up on when the next one is due? :)"}, {"tags": [], "down_vote_count": 1, "creation_date": 1232122346, "answer_id": 450946, "path": "stack.django.answer", "score": 11, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1232123924, "last_edit_date": 1232123924, "body_markdown": "Disclaimer: This answer is completely non-programming-related. It does, however, try to attack the reason for scripts in the first place.\r\n\r\nAnother idea is if you truly have a limited quantity to sell, why don&#39;t you change it from a first-come-first-served methodology? Unless, of course, the hype is part of your marketing scheme.\r\n\r\nThere are many other options, and I&#39;m sure others can think of some different ones:\r\n\r\n* an ordering queue (pre-order system) - Some scripts might still end up at the front of the queue, but it&#39;s probably faster to just manually enter the info.\r\n\r\n* a raffle system (everyone who tries to order one is entered into the system) - This way the people with the scripts have just the same chances as those without.\r\n\r\n* a rush priority queue - If there is truly a high perceived value, people may be willing to pay more. Implement an ordering queue, but allow people to pay more to be placed higher in the queue.\r\n\r\n* auction (credit goes to David Schmitt for this one, comments are my own) - People can still use scripts to snipe in at the last minute, but not only does it change the pricing structure, people are expecting to be fighting it out with others. You can also do things to restrict the number of bids in a given time period, make people phone in ahead of time for an authorization code, etc."}, {"tags": [], "down_vote_count": 0, "creation_date": 1232122359, "answer_id": 450949, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1232122359, "body_markdown": "Time-block user agents that make so-many requests per minute. Eg if you&#39;ve got somebody requesting a page exactly every 5 seconds for 10 minutes, they&#39;re probably not a user... But it could be tricky to get this right.\r\n\r\nIf they trigger an alert, redirect every request to a static page with as little DB-IO as possible with a message letting them know they&#39;ll be allowed back on in X minutes.\r\n\r\nIt&#39;s important to add that you should probably only apply this on requests for pages and ignore all the requests for media (js, images, etc)."}, {"tags": [], "down_vote_count": 1, "creation_date": 1232122634, "answer_id": 450973, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1232122634, "body_markdown": "How about introducing a delay which requires human interaction, like a sort of &quot;CAPTCHA game&quot;. For example, it could be a little Flash game where during 30 seconds they have to burst checkered balls and avoid bursting solid balls (avoiding colour blindness issues!). The game would be given a random number seed and what the game transmits back to the server would be the coordinates and timestamps of the clicked points, along with the seed used.\r\n\r\nOn the server you simulate the game mechanics using that seed to see if the clicks would indeed have burst the balls. If they did, not only were they human, but they took 30 seconds to validate themselves. Give them a session id.\r\n\r\nYou let that session id do what it likes, but if makes too many requests, they can&#39;t continue without playing again."}, {"tags": [], "down_vote_count": 0, "creation_date": 1232122687, "answer_id": 450978, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1232123318, "last_edit_date": 1232123318, "body_markdown": "There are a few other / better solutions already posted, but for completeness, I figured I&#39;d mention this:\r\n\r\nIf your main concern is performance degradation, and you&#39;re looking at true &lt;b&gt;hammering&lt;/b&gt;, then you&#39;re actually dealing with a DoS attack, and you should probably try to handle it accordingly. One common approach is to simply drop packets from an IP in the firewall after a number of connections per second/minute/etc. For example, the standard Linux firewall, iptables, has a standard operation matching function &#39;hashlimit&#39;, which could be used to correlate connection requests per time unit to an IP-address.\r\n\r\nAlthough, this question would probably be more apt for the next SO-derivate mentioned on the last SO-podcast, it hasn&#39;t launched yet, so I guess it&#39;s ok to answer :)\r\n\r\n&lt;b&gt;EDIT:&lt;/b&gt;  \r\nAs pointed out by novatrust, there are still ISPs actually NOT assigning IPs to their customers, so effectively, a script-customer of such an ISP would disable all-customers from that ISP."}, {"tags": [], "down_vote_count": 0, "creation_date": 1232122688, "answer_id": 450979, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1232124503, "last_edit_date": 1232124503, "body_markdown": " 1. Provide an RSS feed so they don&#39;t\r\n    eat up your bandwidth.\r\n 2. When buying,\r\n    make everyone wait a **random**\r\n    amount of time of up to 45 seconds\r\n    or something, depending on what\r\n    you&#39;re looking for exactly. Exactly\r\n    what are your timing constraints?\r\n 3. Give everyone 1 minute to put their name in for the drawing and then randomly select people. I think this is the fairest way.\r\n 4. Monitor the accounts (include some times in the session and store it?) and add delays to accounts that seem like they&#39;re below the human speed threshold. That will at least make the bots be programmed to slow down and compete with humans."}, {"tags": [], "down_vote_count": 1, "creation_date": 1232126015, "answer_id": 451235, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1232126015, "body_markdown": "I&#39;m not seeing the great burden that you claim from checking incoming IPs.  On the contrary, I&#39;ve done a project for one of my clients which analyzes the HTTP access logs every five minutes (it could have been real-time, but he didn&#39;t want that for some reason that I never fully understood) and creates firewall rules to block connections from any IP addresses that generate an excessive number of requests unless the address can be confirmed as belonging to a legitimate search engine (google, yahoo, etc.).\r\n\r\nThis client runs a web hosting service and is running this application on three servers which handle a total of 800-900 domains.  Peak activity is in the thousand-hits-per-second range and there has never been a performance issue - firewalls are very efficient at dropping packets from blacklisted addresses.\r\n\r\nAnd, yes, DDOS technology definitely does exist which would defeat this scheme, but he&#39;s not seeing that happen in the real world.  On the contrary, he says it&#39;s vastly reduced the load on his servers."}, {"tags": [], "down_vote_count": 0, "creation_date": 1232127333, "answer_id": 451311, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1232127333, "body_markdown": "Preventing DoS would defeat #2 of @davebug&#39;s goals he outlined above, &quot;Keep the site at a speed not slowed by bots&quot; but wouldn&#39;t necessary solve #1, &quot;Sell the item to non-scripting humans&quot;\r\n\r\nI&#39;m sure a scripter could write something to skate just under the excessive limit that would still be faster than a human could go through the ordering forms."}, {"tags": [], "down_vote_count": 1, "creation_date": 1233980552, "answer_id": 523127, "path": "stack.django.answer", "score": 44, "up_vote_count": 45, "is_accepted": false, "last_activity_date": 1234502998, "last_edit_date": 1234502998, "body_markdown": "Q: How would you stop scripters from slamming your site hundreds of times a second?  \r\nA: You don&#39;t. There is no way to _prevent_ this behavior by external agents.\r\n\r\nYou could employ a vast array of technology to analyze incoming requests and heuristically attempt to determine who is and isn&#39;t human...but it would fail. Eventually, if not immediately.\r\n\r\nThe only viable long-term solution is to _change the game_ so that the site is not bot-friendly, or is less attractive to scripters.\r\n\r\nHow do you do that? Well, that&#39;s a different question! ;-)\r\n\r\n...\r\n\r\nOK, some options have been given (and rejected) above. I am not intimately familiar with your site, having looked at it only once, but since people can read text in images and bots cannot easily do this, change the announcement to be an image. _Not a CAPTCHA_, just an image -\r\n\r\n* generate the image (cached of course) when the page is requested\r\n* keep the image source name the same, so that doesn&#39;t give the game away\r\n* most of the time the image will have ordinary text in it, and be aligned to appear to be part of the inline HTML page\r\n* when the game is &#39;on&#39;, the image changes to the announcement text\r\n* the announcement text reveals a url and/or code _that must be manually entered_ to acquire the prize. CAPTCHA the code if you like, but that&#39;s probably not necessary.\r\n* for additional security, the code can be a one-time token generated specifically for the request/IP/agent, so that repeated requests generate different codes. Or you can pre-generate a bunch of random codes (a one-time pad) if on-demand generation is too taxing.\r\n\r\nRun time-trials of real people responding to this, and ignore (&#39;oops, an error occurred, sorry! please try again&#39;) responses faster than (say) half of this time. This event should also trigger an alert to the developers that at least one bot has figured out the code/game, so it&#39;s time to change the code/game.\r\n\r\nContinue to change the game periodically anyway, even if no bots trigger it, just to waste the scripters&#39; time. Eventually the scripters should tire of the game and go elsewhere...we hope ;-)\r\n\r\nOne final suggestion: when a request for your main page comes in, _put it in a queue_ and respond to the requests in order in a separate process (you may have to hack/extend the web server to do this, but it will likely be worthwhile). If another request from the same IP/agent comes in while the first request is in the queue, ignore it. This should automatically shed the load from the bots.\r\n\r\nEDIT: another option, aside from use of images, is to use javascript to fill in the buy/no-buy text; bots rarely interpret javascript, so they wouldn&#39;t see it"}, {"tags": [], "down_vote_count": 0, "creation_date": 1233982220, "answer_id": 523157, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1233982220, "body_markdown": "Instead of blocking suspected IPs it may be effective to reduce the amount of data you give to an address as its hits/min goes up. So if the bot hits you up more than a secret randomly changing threshold it will not see the data. Logged in users would always see the data. Logged in users that hit the server too often would be forced to re-authenticate, or be given a captcha. \r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1233989926, "answer_id": 523339, "path": "stack.django.answer", "score": 29, "up_vote_count": 30, "is_accepted": false, "last_activity_date": 1234058504, "last_edit_date": 1234058504, "body_markdown": "I don&#39;t know how feasible this is: ... go on the offensive.\r\n  \r\nFigure out what data the bots are scanning for.  Feed them the data that they&#39;re looking for when you&#39;re NOT selling the crap.  Do this in a way that won&#39;t bother or confuse human users.  When the bots trigger phase two, they&#39;ll log in and fill out the form to buy $100 roombas instead of BOC.  Of course, this assumes that the bots are not particularly robust.\r\n\r\nAnother idea is to implement random price drops over the course of the bag o crap sale period.  Who would buy a random bag o crap for $150 when you CLEARLY STATE that it&#39;s only worth $20?  Nobody but overzealous bots.  But then 9 minutes later it&#39;s $35 dollars ... then 17 minutes later it&#39;s $9.  Or whatever.\r\n\r\nSure, the zombie kings would be able to react.  The point is to make their mistakes become very costly for them (and to make them pay you to fight them).\r\n\r\nAll of this assumes you want to piss off some bot lords, which may not be 100% advisable.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1233993134, "answer_id": 523410, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1233993134, "body_markdown": "All right so the spammers are out competing regular people to win the &quot;bog of crap&quot; auction? Why not make the next auction be a literal &quot;bag of crap&quot;? The spammers get to pay good money for a bag full of doggy do, and we all laugh at them."}, {"tags": [], "down_vote_count": 0, "creation_date": 1233995887, "answer_id": 523457, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1233995887, "body_markdown": "The solution to this may be to attach a little bit of client side processing to actions of logging in and buying. The processing can be a negligible amount so that individuals are not affected but bots attempting to do the tasks many times will be hampered by the extra work load.\r\n\r\nThe processing can be a simple equation to solve done in javascript, unless you don&#39;t want to have to require javascript on your site."}, {"tags": [], "down_vote_count": 0, "creation_date": 1233996231, "answer_id": 523460, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1233996231, "body_markdown": "Hm I remember having read &quot;Linux Firewalls&quot; Attack Detection and Response with ...\r\nThe situations there seem to be very comparable. And someone else has suggested that also. Just block a client temporarily or in progressive steps to throttle them down. If it&#39;s realyl from a few sites this must be quite efficient\r\n\r\nRegards"}, {"tags": [], "down_vote_count": 4, "creation_date": 1233996907, "answer_id": 523471, "path": "stack.django.answer", "score": 189, "up_vote_count": 193, "is_accepted": false, "last_activity_date": 1233996907, "body_markdown": "You need to figure a way to make the bots buy stuff that is massively overpriced: 12mm wingnut: $20. See how many the bots snap up before the script-writers decide you&#39;re gaming them.\r\n\r\nUse the profits to buy more servers and pay for bandwidth.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1233997553, "answer_id": 523483, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1321481685, "last_edit_date": 1321481685, "body_markdown": "The method Woot uses to combat this issue is changing the game - literally.  When they present an extraordinarily desirable item for sale, they make users play a video game in order to order it.\r\n\r\nNot only does that successfully combat bots (they can easily make minor changes to the game to avoid automatic players, or even provide a new game for each sale) but it also gives the impression to users of &quot;winning&quot; the desired item while slowing down the ordering process.\r\n\r\nIt still sells out very quickly, but I think that the solution is good - re-evaluating the problem and changing the parameters led to a successful strategy where strictly technical solutions simply didn&#39;t exist.\r\n\r\n----------\r\n\r\nYour entire business model is based on &quot;first come, first served.&quot;  You can&#39;t do what the radio stations did (they no longer make the first caller the winner, they make the 5th or 20th or 13th caller the winner) - it doesn&#39;t match your primary feature.\r\n\r\nNo, there is no way to do this without changing the ordering experience for the real users.\r\n\r\nLet&#39;s say you implement all these tactics.  If I decide that this is important, I&#39;ll simply get 100 people to work with me, we&#39;ll build software to work on our 100 separate computers, and hit your site 20 times a second (5 seconds between accesses for each user/cookie/account/IP address).\r\n\r\nYou have two stages:\r\n\r\n1. Watching front page\r\n2. Ordering\r\n\r\nYou can&#39;t put a captcha blocking #1 - that&#39;s going to lose real customers (&quot;What?  I have to solve a captcha each time I want to see the latest woot?!?&quot;).\r\n\r\nSo my little group watches, timed together so we get about 20 checks per second, and whoever sees the change first alerts all the others (automatically), who will load the front page once again, follow the order link, and perform the transaction (which may also happen automatically, unless you implement captcha and change it for every wootoff/boc).\r\n\r\nYou can put a captcha in front of #2, and while you&#39;re loathe to do it, that may be the only way to make sure that even if bots watch the front page, real users are getting the products.\r\n\r\nBut even with captcha my little band of 100 would still have a significant first mover advantage - and there&#39;s no way you can tell that we aren&#39;t humans.  If you start timing our accesses, we&#39;d just add some jitter.  We could randomly select which computer was to refresh so the order of accesses changes constantly - but still looks enough like a human.\r\n\r\n#First, get rid of the simple bots\r\n\r\nYou need to have an adaptive firewall that will watch requests and if someone is doing the obvious stupid thing - refreshing more than once a second at the same IP then employ tactics to slow them down (drop packets, send back refused or 500 errors, etc). \r\n\r\nThis should significantly drop your traffic and alter the tactics the bot users employ.\r\n\r\n#Second, make the server blazingly fast.\r\n\r\nYou really don&#39;t want to hear this... but...\r\n\r\nI think what you need is a fully custom solution from the bottom up.\r\n\r\nYou don&#39;t need to mess with TCP/IP stack, but you may need to develop a very, very, very fast custom server that is purpose built to correlate user connections and react appropriately to various attacks.\r\n\r\nApache, lighthttpd, etc are all great for being flexible, but you run a single purpose website, and you really need to be able to both do more than the current servers are capable of doing (both in handling traffic, and in appropriately combating bots).\r\n\r\nBy serving a largely static webpage (updates every 30 seconds or so) on a custom server you should not only be able to handle 10x the number of requests and traffic (because the server isn&#39;t doing anything other than getting the request, and reading the page from memory into the TCP/IP buffer) but it will also give you access to metrics that might help you slow down bots.  For instance, by correlating IP addresses you can simply block more than one connection per second per IP.  Humans can&#39;t go faster than that, and even people using the same NATed IP address will only infrequently be blocked.  You&#39;d want to do a slow block - leave the connection alone for a full second before officially terminating the session.  This can feed into a firewall to give longer term blocks to especially egregious offenders.\r\n\r\nBut the reality is that no matter what you do, there&#39;s no way to tell a human apart from a bot when the bot is custom built by a human for a single purpose.  The bot is merely a proxy for the human.\r\n\r\n#Conclusion\r\n\r\nAt the end of the day, you can&#39;t tell a human and a computer apart for watching the front page.  You can stop bots at the ordering step, but the bot users still have a first mover advantage, and you still have a huge load to manage.\r\n\r\nYou can add blocks for the simple bots, which will raise the bar and fewer people with bother with it.  That may be enough.\r\n\r\nBut without changing your basic model, you&#39;re out of luck.  The best you can do is take care of the simple cases, make the server so fast regular users don&#39;t notice, and sell so many items that even if you have a few million bots, as many regular users as want them will get them.\r\n\r\nYou might consider setting up a honeypot and marking user accounts as bot users, but that will have a huge negative community backlash.\r\n\r\nEvery time I think of a &quot;well, what about doing this...&quot; I can always counter it with a suitable bot strategy.\r\n\r\nEven if you make the front page a captcha to get to the ordering page (&quot;This item&#39;s ordering button is blue with pink sparkles, somewhere on this page&quot;) the bots will simply open all the links on the page, and use whichever one comes back with an ordering page.  That&#39;s just no way to win this.\r\n\r\nMake the servers fast, put in a reCaptcha (the only one I&#39;ve found that can&#39;t be easily fooled, but it&#39;s probably way too slow for your application) on the ordering page, and think about ways to change the model slightly so regular users have as good a chance as the bot users.\r\n\r\n-Adam"}, {"tags": [], "down_vote_count": 2, "creation_date": 1233998367, "answer_id": 523493, "path": "stack.django.answer", "score": 156, "up_vote_count": 158, "is_accepted": false, "last_activity_date": 1234039330, "last_edit_date": 1234039330, "body_markdown": "My solution would be to make screen-scraping worthless by putting in a roughly 10 minute delay for &#39;bots and scripts.\r\n\r\nHere&#39;s how I&#39;d do it:\r\n\r\n - **Log and identify any repeat hitters.**\r\n\r\nYou don&#39;t need to log every IP address on every hit.  Only track one out of every 20 hits or so.  A repeat offender will still show up in a randomized occassional tracking.\r\n\r\n - **Keep a cache of your page from about 10-minutes earlier.**\r\n\r\n - **When a repeat-hitter/bot hits your site, give them the 10-minute old cached page.**\r\n\r\nThey won&#39;t immediately know they&#39;re getting an old site.  They&#39;ll be able to scrape it, and everything, but they won&#39;t win any races anymore, because &quot;real people&quot; will have a 10 minute head-start.\r\n\r\n**Benefits:**\r\n\r\n - No hassle or problems for users (like CAPTCHAs).\r\n - Implemented fully on server-side.  (no reliance on Javascript/Flash)\r\n - Serving up an older, cached page should be less performance intensive than a live page. You may actually decrease the load on your servers this way!\r\n\r\n**Drawbacks**\r\n\r\n - Requires tracking some IP addresses\r\n - Requires keeping and maintaining a cache of older pages.\r\n\r\n\r\n\r\nWhat do you think?"}, {"tags": [], "down_vote_count": 0, "creation_date": 1233999748, "answer_id": 523527, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1233999748, "body_markdown": "We are currently using the latest generation of BigIP load balancers from F5 to do this. The BigIP has advanced traffic management features that can identify scrapersand bots  based on frequency and patterns of use even from amongst a set of sources behind a single IP. It can then throttle these, serve them alternative content or simply tag them with headers or cookies so you can identify them in your application code."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234000169, "answer_id": 523535, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1234000169, "body_markdown": "My approach would be to focus on non-technological solutions (otherwise you&#39;re entering an arms race you&#39;ll lose, or at least spend a great deal of time and money on). I&#39;d focus on the billing/shipment parts - you can find bots by either finding multiple deliveries to same address or by multiple charges to a single payment method. You can even do this across items over several weeks, so if a user got a previous item (by responding really really fast) he may be assigned some sort of &quot;handicap&quot; this time around.\r\n\r\nThis would also have a side effect (beneficial, I would think, but I could be wrong marketing-wise for your case) of perhaps widening the circle of people who get lucky and get to purchase woot."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234001748, "answer_id": 523567, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1234001748, "body_markdown": "First of all, by definition, it is impossible to support stateless, i.e. truly anonymous, transactions while also being able to separate the bots from legitimate users.\r\n\r\nIf we can accept a premise that we can impose some cost on a brand-spanking-new woot visitor on his first page hit(s), I think I have a possible solution.  For lack of a better name, I&#39;m going to loosely call this solution &quot;A visit to the DMV.&quot;\r\n\r\nLet&#39;s say that there&#39;s a car dealership that offers a different new car each day, and that on some days, you can buy an exotic sports car for $5 each (limit 3), plus a $5 destination charge.\r\n\r\nThe catch is, the dealership requires you to visit the dealership and show a valid driver&#39;s license before you&#39;re allowed in through the door to see what car is on sale.  Moreover, you must have said valid driver&#39;s license in order to make the purchase.\r\n\r\nSo, the first-time visitor (let&#39;s call him Bob) to this car dealer is refused entry, and is referred to the DMV office (which is conveniently located right next door) to obtain a driver&#39;s license.\r\n\r\nOther visitors with a valid driver&#39;s license is allowed in, after showing his driver&#39;s license.  A person who makes a nuisance of himself by loitering around all day, pestering the salesmen, grabbing brochures, and emptying the complimentary coffee and cookies will eventually be turned away.\r\n\r\nNow, back to Bob without the license -- all he has to do is endure the visit to the DMV once.  After that, he can visit the dealership and buy cars anytime he likes, unless he accidentally left his wallet at home, or his license is otherwised destroyed or revoked.\r\n\r\nThe driver&#39;s license in this world is nearly impossible to forge.  \r\n\r\nThe visit to the DMV involves first getting the application form at the &quot;Start Here&quot; queue.  Bob has to take the completed application to window #1, where the first of many surly civil servants will take his application, process it, and if everything is in order, stamp the application for the window and send him to the next window.  And so, Bob goes from windows to window, waiting for each step of his application to go through, until he finally gets to the end and receives his drivere&#39;s license.\r\n\r\nThere&#39;s no point in trying to &quot;short circuit&quot; the DMV.  If the forms are not filled out correctly in triplicate, or any wrong answers given at any window, the application is torn up, and the hapless customer is sent back to the start.\r\n\r\nInterestingly, no matter how full or empty the office is, it takes about the same amount of time to get serviced at each successive window.  Even when you&#39;re the only person in line, it seems that the personnel likes to make you wait a minute behind the yellow line before uttering, &quot;Next!&quot;\r\n\r\nThings aren&#39;t quite so terrible at the DMV, however.  While all the waiting and processing to get the license is going on, you can watch a very entertaining and informative infomercial for the car dealership while you&#39;re in the DMV lobby.  In fact, the infomerical runs just long enough to cover the amount of time you spend getting your license.\r\n\r\n\r\nThe slightly more technical explanation:\r\n\r\nAs I said at the very top, it becomes necessary to have some statefulness on the client-server relationship which allows you to separate humans from bots.  You want to do it in a way that doesn&#39;t overly penalize the anonymous (non-authenticated) human visitor.\r\n\r\nThis approach probably requires an AJAX-y client-side processing.  A brand-spanking-new visitor to woot is given the &quot;Welcome New User!&quot; page full of text and graphics which (by appropriate server-side throttling) takes a few seconds to load completely.  While this is happening (and the visitor is presumably busy reading the welcome page(s)), his identifying token is slowly being assembled.\r\n\r\nLet&#39;s say, for discussion, the token (aka &quot;driver&#39;s license) consists of 20 chunks.  In order to get each successive chunk, the client-side code must submit a valid request to the server.  The server incorporates a deliberate delay (let&#39;s say 200 millisecond), before sending the next chunk along with the &#39;stamp&#39; needed to make the next chunk request (i.e., the stamps needed to go from one DMV window to the next).  All told, about 4 seconds must elapse to finish the chunk-challenge-response-chunk-challenge-response-...-chunk-challenge-response-completion process.\r\n\r\nAt the end of this process, the visitor has a token which allows him to go to the product description page and, in turn, go to the purchasing page.  The token is a unique ID to each visitor, and can be used to throttle his activities.\r\n\r\nOn the server side, you only accept page views from clients that have a valid token.  Or, if it&#39;s important that everyone can ultimately see the page, put a time penalty on requests that is missing a valid token.\r\n\r\nNow, for this to be relatiely benign to the legitimate human visitor,t make the token issuing process happen relatively non-intrusively in the background.  Hence the need for the welcome page with entertaining copy and graphics that is deliberately slowed down slightly.\r\n\r\nThis approach forces a throttle-down of bots to either use an existing token, or take the minimum setup time to get a new token.  Of course, this doesn&#39;t help as much against sophisticated attacks using a distributed network of faux visitors."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234002808, "answer_id": 523583, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1234004474, "last_edit_date": 1234004474, "body_markdown": "No matter how secure the Nazi&#39;s thought their communications were, the allies would often break their messages.  No matter how you try to stop bots from using your site the bot owners will work out a way around it.  I&#39;m sorry if that makes you the Nazi :-)\r\n\r\nI think a different mindset is required\r\n\r\n - Do not try to stop bots from using your site\r\n - Do not go for a fix that works immediately, play the long game\r\n\r\nGet into the mindset that it doesn&#39;t matter whether the client of your site is a human or a bot, both are just paying customers; but one has an unfair advantage over the other.  Some users without much of a social life (hermits) can be just as annoying for your site&#39;s other users as bots.\r\n\r\n**Record the time you publish an offer and the time an account opts to buy it.**\r\n\r\n&gt; This gives you a record of how quickly\r\n&gt; the client is buying stuff.\r\n\r\n**Vary the time of day you publish offers.**\r\n\r\n&gt; For example, have a 3 hour window\r\n&gt; starting at some obscure time of the\r\n&gt; day (midnight?)  Only bots and hermits\r\n&gt; will constantly refresh a page for 3\r\n&gt; hours just to get an order in within\r\n&gt; seconds.  Never vary the base time,\r\n&gt; only the size of the window.\r\n\r\nOver time a picture will emerge.\r\n\r\n01: You can see which accounts are regularly buying products within seconds of them going live.  Suggesting they might be bots.\r\n\r\n02: You can also look at the window of time used for the offers, if the window is 1 hour then some early buyers will be humans.  A human will rarely refresh for 4 hours though.  If the elapsed time is quite consistent between publish/purchase regardless of the window duration then that&#39;s a bot.  If the publish/purchase time is short for small windows and gets longer for large windows, that&#39;s a hermit!\r\n\r\nNow instead of stopping bots from using your site you have enough information to tell you which accounts are certainly used by bots, and which accounts are likely to be used by hermits.  What you do with that information is up to you, but you can certainly use it to make your site fairer to people who have a life.\r\n\r\nI think banning the bot accounts would be pointless, it would be akin to phoning Hitler and saying &quot;Thanks for the positions of your U-boats!&quot;  Somehow you need to use the information in a way that the account owners wont realise.  Let&#39;s see if I can dream anything up.....\r\n\r\n**Process orders in a queue:**\r\n\r\nWhen the customer places an order they immediately get a confirmation email telling them their order is placed in a queue and will be notified when it has been processed.  I experience this kind of thing with order/dispatch on Amazon and it doesn&#39;t bother me at all, I don&#39;t mind getting an email days later telling me my order has been dispatched as long as I immediately get an email telling me that Amazon knows I want the book.  In your case it would be an email for\r\n\r\n 1. Your order has been placed and is in a queue.\r\n 2. Your order has been processed.\r\n 3. Your order has been dispatched.\r\n\r\nUsers think they are in a fair queue.  Process your queue every 1 hour so that normal users also experience a queue, so as not to arouse suspicion.  Only process orders from bot and hermit accounts once they have been in the queue for the &quot;average human ordering time + x hours&quot;.  Effectively reducing bots to humans.\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234005577, "answer_id": 523618, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1234005577, "body_markdown": "The important thing here is to change the system to remove load from your server, prevent bots from winning the bag of crap WITHOUT letting the botlords know you are gaming them or they will revise their strategy. I don&#39;t think there is any way to do this without some processing at your end. \r\n\r\nSo you record hits on your home page. Whenever someone hits the page that connection is compared to its last hit, and if it was too quick then it is sent a version of the page without the offer. This can be done by some sort of load balancing mechanism that sends bots (the hits that are too fast) to a server that simply serves cached versions of your home page; real people get sent to the good server. This takes the load off the main server and makes the bots think that they are still being served the pages correctly. \r\n\r\nEven better if the offer can be declined in some way. Then you can still make the offers on the faux server but when the bot fills out the form say &quot;Sorry, you weren&#39;t quick enough&quot; :) Then they will definitely think they are still in the game. "}, {"tags": [], "down_vote_count": 1, "creation_date": 1234011467, "answer_id": 523707, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1234011467, "body_markdown": "Use JavaScript to dynamically write the info into the page. Without a JS rendering engine,  surely the screen-scrapers &amp; bots won&#39;t be able to read the information."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234024366, "answer_id": 524074, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234024366, "body_markdown": "The method I will describe has two requirements. 1) Javascript is enforced 2) a web browser with a valid http://msdn.microsoft.com/en-us/library/bb894287.aspx browser session.\r\n\r\nWith out either of these you are &quot;by design&quot; out of luck. The internet is built by design to allow anonymous clients view content. There is no way around this with simple HTML. Oh and I just wanted to say that simple, image based CAPTCHA can be defeated easily, even the authors admit to this.\r\n\r\nMoving along to the problem and the solution. The problem is in two parts. The first is that you cannot block out an individual for &quot;doing bad things&quot;. To fix this you setup a method that takes in the browsers valid session and generate a md5sum + salt + hash (of your own private device) and send it back to the browser. The browser then is REQUIRED to return that hashed key back during every post / get. If you do not ever get a valid browser session, then you reply back with &quot;Please use a valid web browser blah blah blah&quot;. All popular browsers have valid browser session id&#39;s. \r\n\r\nNow that we have an identity at least for that browser session (I know it does not lock out permanently, but it is quite difficult to &quot;renew&quot; a browser session through simple scripting) we can effectively lock out a session (ie; make it annoyingly hard for scripters to actually visit your site with no penalty to valid users).\r\n\r\nNow this next part is why it requires javascript. On the client you build a simple hash for each character that comes from the keyboard versus the value of the text in the textarea. That valid key comes over to the server as a simple hash and has to be validated. While this method could easily be reverse engineered, it does make it one extra hoop that individuals have to go through before they can submit data. Mind you this only prevents auto posting of data, not DOS with constant visits to the web site. If you even have access to ajax there is a way to send a salt and hash key across the wire and use javascript with it to build the onkeypress characters &quot;valid token&quot; that gets sent across the wire. Yes like I said it could easily be reversed engineered, but you see where I am going with this hopefully.\r\n\r\nNow to prevent constant abuse via traffic. There are ways to establish patterns once given a valid session id. These patterns (even if Random is used to offset request times), have a lower epsilon than if say a human was attempting to reproduce that same margin of error. Since you have a session ID, and you have a pattern that &quot;appears to be a bot&quot;, then you can block out that session with a simple lightweight response that is 20 bytes instead of 200000 bytes. \r\n\r\nYou see here, the goal is to 1) make the anonymous non-anonymous (even if it&#39;s only per session) and 2) develop a method to identify bots vs. normal people by establishing patterns in the way they use your system. You can&#39;t say that the latter is impossible, because I have done it before. While, my implementations were for tracking video game bots I would seem to think that those algorithms for identifying a bot vs. a user can be generalized to the form of web site visits. If you reduce the traffic that the bots consume you reduce the load on your system. Mind you this still does not prevent DOS attacks, but it does reduce the amount of strain a bot produces on the system.\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1234025799, "answer_id": 524114, "path": "stack.django.answer", "score": 15, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1234025799, "last_edit_date": 1486563009, "body_markdown": "&gt; 1. Sell the item to non-scripting humans.\r\n&gt; \r\n&gt; 2. Keep the site running at a speed not slowed by bots.\r\n&gt; \r\n&gt; 3. Don&#39;t hassle the &#39;normal&#39; users with any tasks to complete to prove they&#39;re human.\r\n\r\nYou probably don&#39;t want to hear this, but #1 and #3 are mutually exclusive.   \r\n \r\n![On the Internet, nobody knows you&#39;re a dog][1]\r\n\r\n  [1]: https://upload.wikimedia.org/wikipedia/en/f/f8/Internet_dog.jpg\r\n\r\nWell, nobody knows you&#39;re a bot either.  There&#39;s no programatic way to tell the whether or not there&#39;s a human on the other end of the connection without requiring the person to do something.  Preventing scripts/bots from doing stuff on the web is the whole reason CAPTCHAs were invented.  It&#39;s not like this is some new problem that hasn&#39;t seen a lot of effort expended on it.  If there were a better way to do it, one that didn&#39;t involve the hassle to real users that a CAPTCHA does, everyone would be using it already.  \r\n\r\nI think you need to face the fact that if you want to keep bots off your ordering page, a good CAPTCHA is the only way to do it.  If demand for your random crap is high enough that people are willing to go to these lengths to get it, legitimate users aren&#39;t going to be put off by a CAPTCHA."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234026261, "answer_id": 524126, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234026261, "body_markdown": "I think that sandboxing certain IPs is worth looking into.  Once an IP has gone over a threshold, when they hit your site, redirect them to a webserver that has a multi-second delay before serving out a file.  I&#39;ve written Linux servers that can handle open 50K connections with hardly any CPU, so it wouldn&#39;t be too hard to slow down a very large number of bots.  All the server would need to do is hold the connection open for N seconds before acting as a proxy to your regular site.  This would still let regular users use the site even if they were really aggressive, just at a slightly degraded experience.  \r\n\r\nYou can use memcached as described [here][1] to cheaply track the number of hits per IP.  \r\n\r\n\r\n  [1]: http://simonwillison.net/2009/Jan/7/ratelimitcache/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234026346, "answer_id": 524128, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234026346, "body_markdown": "To solve the first problem of the bots slamming your front page, try making the honeypot exactly the same as a real bag of crap. Make the html markup for the front page include the same markup as if it were for a bag of crap, but make it hidden. This would force the bots to include CSS engines to determine if the bag of crap code is displayed or hidden. Alternatively, you could only output this &#39;fake&#39; bag of crap html a random amount of time (hours?) before a real bag of crap goes up. This would cause the bots to sound the alarm too soon (but not know how soon).\r\n\r\nTo cover the second step of actually purchasing the bag of crap, add simple questions. I prefer common sense questions to the math questions suggested above. Things like, &quot;Is ice hot or cold?&quot; &quot;Are ants big or small&quot;? Of course, these would need to be randomized and pulled from a never-ending supply of questions, else the bots could be programmed to answer them. These questions, though, are still much less of an annoyance than CAPTCHAs."}, {"tags": [], "down_vote_count": 1, "creation_date": 1234028857, "answer_id": 524195, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1234035430, "last_edit_date": 1234035430, "body_markdown": "What about using Flash?\r\n\r\nYes, I know the overhead of using Flash, plus the fact that some users will be locked out of buying the bag-o-crap (i.e.:  iPhone users) might make this detrimental, but it seems to me that Flash would prevent screenscraping or at least make it difficult.\r\n\r\nAm I wrong?\r\n\r\n**Edited to add**\r\n\r\nWhat about including a couple of &quot;hidden&quot; fields on your submissions form like what I found below:\r\n\r\n&gt; Actually, best practice seems to be to\r\n&gt; use two hidden fields, one with an\r\n&gt; initial value, and one without. It&#39;s\r\n&gt; the rare bot which can ignore both\r\n&gt; fields. Check for one field to be\r\n&gt; blank, and the other to have the\r\n&gt; initial value. And hide them using\r\n&gt; CSS, not by making them &quot;hidden&quot;\r\n&gt; fields:\r\n&gt; \r\n&gt; &lt;style type=&quot;text/css&quot;&gt; .important {\r\n&gt; display : none ; } &lt;/style&gt;\r\n&gt; \r\n&gt; &lt;div class=&quot;important&quot;&gt; &lt;p&gt;Please\r\n&gt; don&#39;t change the next two fields.&lt;/p&gt;\r\n&gt; &lt;input type=&quot;text&quot; name=&quot;address2&quot;\r\n&gt; id=&quot;address2&quot; value=&quot;xyzzy&quot;&gt; &lt;input\r\n&gt; type=&quot;text&quot; name=&quot;address3&quot;\r\n&gt; id=&quot;address3&quot; value=&quot;&quot;&gt; &lt;/div&gt;\r\n&gt; \r\n&gt; Bots tend to like fields with names\r\n&gt; like &#39;address&#39;. The text in the\r\n&gt; paragraph is for those few rare human\r\n&gt; beings who have a non-CSS capable\r\n&gt; browser. If you&#39;re not worried about\r\n&gt; them, you can leave it out.\r\n&gt; \r\n&gt; In the logic for processing the form,\r\n&gt; you&#39;d do something like:\r\n&gt; \r\n&gt; if (address2 == &quot;xyzzy&quot; and address3\r\n&gt; == &quot;&quot;) { /* OK to send */ } else { /* probably have a bot */ }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234028980, "answer_id": 524202, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234291318, "last_edit_date": 1234291318, "body_markdown": "- Go after the money stream. It is much easier than tracking the IP side. Make bots pay too much a few times (announcement with white text on white background and all variants of it) kills their business case quickly. You should prepare this carefully, and make good use of the strong points of bots: their speed. Did you try a few thousand fake announcements a few seconds apart? If they are hitting ten times/second you can go even faster. You want to keep this up as long as they keep buying, so think carefully about the moment of the day/week you want to start this. Ideally, they will stop paying, so you can hand over your case to a bank.\r\n- Make sure your site is fully generated, and each page access returns different page content (html, javascript and css). Parsing is more difficult than generating, and it is easy to build-in more variation than bot developers can handle. Keep on changing the content and how you generate it.\r\n- You need to know how fast bots can adapt to changes you make, and preferably the timezone they are in. Is it one botnet or more, are they in the same timezone, a different one, or is it a worldwide developer network?  You want your counterattack to be timed right.\r\n- Current state of the art bots have humans enter captcha&#39;s (offered against porn/games).\r\n- Make it unattractive to react very fast.\r\n- Use hashes and honeypots, as Ned Batchelder explains.\r\n\r\n[edit]\r\nIt is simply not true that you cannot defend against botnets. Especially my second suggestion provides for adequate defense against automated buyers. it requires a complete rethinking about the technology you&#39;re using, though. You might want to do some experiments with Seaside, or alternatively directly in c."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234030557, "answer_id": 524266, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1234030557, "body_markdown": "You can&#39;t totally prevent bots, even with a captcha.  However you can make it a pain to write and maintain a bot and therefore reduce the number.  Particularly by forcing them to update their bots daily you&#39;ll be causing most to lose interest.\r\n\r\nHere are a some ideas to make it harder to write bots:\r\n\r\n- Require running a javascript function.  Javascript makes it much more of a pain to write a bot.  Maybe require a captcha if they aren&#39;t running javascript to still allow actual non-javascript users (minimal).\r\n\r\n- Time the keystrokes when typing into the form (again via javascript).  If it&#39;s not human-like then reject it.  It&#39;s a pain to mimic human typing in a bot.\r\n\r\n- Write your code to update your field ID&#39;s daily with a new random value.  This will force them to update their bot daily which is a pain.\r\n\r\n- Write your code to re-order your fields on a daily basis (obviously in some way that&#39;s not random to your users).  If they&#39;re relying on the field order, this will trip them up and again force daily maintenance to their bot code.\r\n\r\n- You could go even further and use Flash content.  Flash is totally a pain to write a bot against.\r\n\r\nGenerally if you start taking a mindset of not preventing them, but making it more work for them, you can probably achieve the goal you&#39;re looking for."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234032436, "answer_id": 524336, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1234045106, "last_edit_date": 1234045106, "body_markdown": "Most purely technical solutions have already been offered. I&#39;ll therefore suggest another view of the problem.\r\n\r\nAs I understand it, the bots are set up by people **genuinely** trying to buy the bags you&#39;re selling. The problem is -\r\n\r\n 1. Other people, who don&#39;t operate bots, deserve a chance to buy, and you&#39;re offering a limited amount of bags.\r\n 2. You want to attract humans to your site and just sell the bags.\r\n\r\nInstead of trying to avoid the bots, you can enable potential bag-buyers to subscribe to an email, or even SMS update, to get notified when a sell will take place. You can even give them a minute or two head start (a special URL where the sell starts, randomly generated, and sent with the mail/SMS). \r\n\r\nWhen these buyers go to buy they&#39;re in you&#39;re site, you can show them whatever you want in side banners or whatever. Those running the bots will prefer to simply register to your notification service.\r\n\r\nThe bots runners might still run bots on your notification to finish the buy faster. Some solutions to that can be offering a one-click buy.\r\n\r\nBy the way, you mentioned your users are not registered, but it sounds like those buying these bags are not random buyers, but people who look forward to these sales. As such, they might be willing to register to get an advantage in trying to &quot;win&quot; a bag.\r\n\r\nIn essence what I&#39;m suggesting is try and look at the problem as a social one, rather than a technical one.\r\n\r\nAsaf"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234049654, "answer_id": 524819, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234056383, "last_edit_date": 1234056383, "body_markdown": "Assumed non-negotiables:\r\n\r\nThe first screen needs to be dead simple low overhead HTML, with a single easily identiable (bot-wise or people-wise) button to click or equivalent to indicate unambiguously &quot;I want my Crap&quot;. Because we assume worst-case - you have the equivalent of a DOS attack from a combination of bots and nonbots, all first click on the site (as far as identfiability). So let&#39;s hand these out as quickly as we can from caches, benign echobots, etc.\r\n\r\n(Note: As far as wooters are concerned, this is what happens anyway; it&#39;s just as painful for users as for Woot, so anything that helps absorb or mitigate the first screen acquisition is in the interests of all of the 3 parties involved.)\r\n\r\nThen, the process needs to be no more aggravating for non-bots than it currently is, with no additional steps (or pain) for legits. (Background note on current design: Current wooters usually will be already signed on, or can sign on during the purchase process. New buyers need to register during purchase. So it&#39;s practically quicker to be already registered, and quicker yet to already be logged on.)\r\n\r\nTo complete the crap sale, a progression of transaction screens need to be navigated (say 5, plus or minus, depending on circumstances). The winners are the first who complete the full navigation. The current process rewards bots (or anyone else) who complete the entire sequence of 5 screens the most quickly; but the entire progression is biased toward fast responses (i.e. bots).\r\n\r\nNo question the bots will have the advantage for the first screen; and whatever edge they have achieved from that point, they keep through the rest of the screens, plus whatever advantage botness provides at other stages as well.\r\n\r\n&lt;hr&gt;\r\n\r\nWhat if Woot were to intentionally decouple the queuing process after the first screen, and feed every session from that point into a sequence of fixed-minimum-time steps? The second screen wouldn&#39;t even be presented until 30 seconds had passed; after it was submitted, same for the following screens. I bet wooters would have no problem if they were told that, after the first screen, they would wait in a queue (which is already true) that would spread the load over time in a way that should take no longer than before, be more robust, and help weed out the bots. At this point you can throw in some of the bot speedbumps listed above (subtle variations in DOM objects, etc.) Just the benefit from the perception that Woot is a little more in control of things would help.\r\n\r\nIf a much higher proportion of the BOC initial hits could segue into a bot-unfriendlier non-time-critical process on their first hit (or close to it), rather than retrying, then real people who get past that point would have more confidence. For sure it would be less hostile than the current situation. It might cut down on the background-noise-ambient-bot-rate that&#39;s going on all the time even under normal Woot-Off circumstances. And the bots would lay off the main page and sit in the queue with each other (and everyone else) where they have no advantage.\r\n\r\n&lt;hr&gt;\r\nHmmm... The concept &quot;apartment-threaded&quot; comes to mind. I wonder if the pattern is approximately useful?\r\n&lt;hr&gt;\r\nA useful core concept here is being able, after the first screen, to track accumulated total time in queue and be able to adjust to standard. As a bot-mitigation strategy, you would have a little bit of flexibility to maybe fudge the very earliest sessions by maybe 5-10 seconds; doing so would probably be undetectable, but would result in a richer non-bot purchase mix. I&#39;m sure you have statistics to help evaluate stuff like this after the fact.\r\n&lt;hr&gt;\r\nJust for fun, you could (at least for one wootoff) put together your own bot that combines the best features you&#39;ve seen, and then hand it out to everyone the day before. Then at least everyone would be equally armed. (Then duck ... incoming ...) "}, {"tags": [], "down_vote_count": 0, "creation_date": 1234055710, "answer_id": 524929, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234055710, "last_edit_date": 1495541433, "body_markdown": "I like [BradC&#39;s answer][1] (using the suggestions in Ned Batchelder&#39;s article), but I want to add another level to it. You may be able to randomize not only the field names, but also the field positions and **the code that makes them invisible**.\r\n\r\nNow, this last bit is hard part and I don&#39;t know exactly how to do it, but someone with more JavaScript and CSS experience might be able to figure it out. Of course, you can&#39;t just keep the same positions all the time, because the scripters will just figure out that the element with position (x,y) is the real one. You would have to have some code that changes the positioning of form elements relative to other elements in order to move them off the page, overlay them on each other, etc. Then **obfuscate the code that does this** with some randomness introduced into it. Automatically change the obfuscation daily, before a new item is made available. The idea is that without a proper CSS and JavaScript implementation (and code to read layout of the page as a human would) a bot won&#39;t be able to figure out which elements are being shown to the user. Your server-side code, of course, knows which fields are real and which are fake.\r\n\r\nIn summary:\r\n\r\n  * The field names are random\r\n  * The field order is random\r\n  * The field hiding code is complex\r\n  * The field hiding code is obfuscated - randomly\r\n  * The random factors are automatically changed every day by server-side code\r\n\r\nWith the constraints you&#39;ve given I don&#39;t think there is a way to avoid an &quot;arms race&quot; of some kind, but that doesn&#39;t mean all is lost. If you can automate your side of the arms race and the scripters cannot then you would win it every time.\r\n\r\n  [1]: https://stackoverflow.com/questions/450835/stop-scripters-from-slamming-your-website-hundreds-of-times-a-second/450931#450931"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234057549, "answer_id": 524967, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1234057549, "body_markdown": "Write a reverse-proxy on an apache server in front of your application which implements a Tarpit [(Wikipedia Article)][1] to punish bots. It would simply manage a list of IP addresses that connected in the last few seconds. You detect a burst of requests from a single IP address and then exponentially delay those requests before responding.\r\n\r\nOf course, multiple humans can come from the same IP address if they&#39;re on a NAT&#39;d network connection but it&#39;s unlikely that a human would mind your response time going for 2mS to 4mS (or even 400mS) whereas a bot will be hampered by the increasing delay pretty quickly.\r\n\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Tarpit_(networking)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234063619, "answer_id": 525102, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234063619, "body_markdown": "Make it unprofitable for the bot users and they&#39;ll go away pretty quickly - that is, occasionally sell something that no human being could possibly ever want (a bag of *literal* crap maybe)."}, {"tags": [], "down_vote_count": 1, "creation_date": 1234081245, "answer_id": 525401, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234081245, "body_markdown": "I guess the only thing to do is make the effort exceed the benefits for spammers. So here is a &quot;brainstorm&quot; idea and I don&#39;t know all the technical details of how this would be implemented. I would have to do some research but from my current knowledge it worth investigating if the other suggested approaches are rejected.\r\n\r\nYou already use flash on your site so why not use a flash control to assist with or do the form submit? The control could do some encrypted comms with the web server with a key pair or some other algorithm to hash values?\r\n\r\nI suppose the whole form could be in flash? Personally I would use Java applets because thats my favourite language.\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1234085506, "answer_id": 525458, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234085506, "body_markdown": "A possible solution to the goals, not necessarily the question title:\r\n\r\nInstead of serving up the special deal to everyone, serve it to random sets of ip addresses at a time. For instance, partition the IP space into 256 unique blocks, and at time=0, only allow people with ip addresses in the first block, and at time=5 seconds, allow people from the first block and the second block... until the last time slot arrives, and allow everyone to see the deal. One idea to randomize it would be to take the least significant bits of the md5/sha of their IP plus some salt based on the deal.\r\n\r\nThis would allow the scripters to still have an advantage in the fact that they have near-zero response time, and the strength by having multiple ip addresses, but it would mean that a given bot wouldn&#39;t have any advantage over another customer that was &#39;luckier&#39; than them because of their IP address.\r\n\r\nCombining this with some of the other ideas seems like a good idea."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234125914, "answer_id": 526333, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1234126245, "last_edit_date": 1495541895, "body_markdown": "First, let me recap what we need to do here. I realize I&#39;m just paraphrasing the original question, but it&#39;s important that we get this 100% straight, because there are a lot of great suggestions that get 2 or 3 out of 4 right, but as I will demonstrate, you will need a multifaceted approach to cover all of the requirements.\r\n\r\n\r\n**Requirement 1: Getting rid of the &#39;bot slamming&#39;:**\r\n\r\nThe rapid-fire &#39;slamming&#39; of your front page is hurting your site&#39;s performance and is at the core of the problem. The &#39;slamming&#39; comes from both single-IP bots and - supposedly - from botnets as well. We want to get rid of both.\r\n\r\n\r\n**Requirement 2: Don&#39;t mess with the user experience:**\r\n\r\nWe could fix the bot situation pretty effectively by implementing a nasty verification procedure like phoning a human operator, solving a bunch of CAPTCHAs, or similar, but that would be like forcing every innocent airplane passenger to jump through crazy security hoops just for the slim chance of catching the very stupidest of terrorists. Oh wait - we actually do that. But let&#39;s see if we can *not* do that on woot.com.\r\n\r\n\r\n**Requirement 3: Avoiding the &#39;arms race&#39;:**\r\n\r\nAs you mention, you don&#39;t want to get caught up in the spambot arms race. So you can&#39;t use simple tweaks like hidden or jumbled form fields, math questions, etc., since they are essentially obscurity measures that can be trivially autodetected and circumvented.\r\n\r\n\r\n**Requirement 4: Thwarting &#39;alarm&#39; bots:**\r\n\r\nThis may be the most difficult of your requirements. Even if we can make an effective human-verification challenge, bots could still poll your front page and alert the scripter when there is a new offer. We want to make those bots infeasible as well. This is a stronger version of the first requirement, since not only can&#39;t the bots issue performance-damaging rapid-fire requests -- they can&#39;t even issue enough repeated requests to send an &#39;alarm&#39; to the scripter in time to win the offer.\r\n\r\n------\r\n\r\nOkay, so let&#39;s se if we can meet all four requirements. First, as I mentioned, no one measure is going to do the trick. You will have to combine a couple of tricks to achieve it, and you will have to swallow two annoyances:\r\n\r\n 1. A small number of users will be required to jump through hoops\r\n 2. A small number of users will be unable to get the special offers\r\n\r\nI realize these are annoying, but if we can make the &#39;small&#39; number *small enough*, I hope you will agree the positives outweigh the negatives.\r\n\r\n\r\n**First measure: User-based throttling:**\r\n\r\n&gt; This one is a no-brainer, and I&#39;m sure you do it already. If a user is logged in, and keeps refreshing 600 times a second (or something), you stop responding and tell him to cool it. In fact, you probably throttle his requests significantly sooner than that, but you get the idea. This way, a logged-in bot will get banned/throttled as soon as it starts polling your site. This is the easy part. The unauthenticated bots are our real problem, so on to them:\r\n\r\n\r\n**Second measure: Some form of IP throttling, as suggested by nearly everyone:**\r\n\r\n&gt; No matter what, you will have to do *some* IP based throttling to thwart the &#39;bot slamming&#39;. Since it seems important to you to allow unauthenticated (non-logged-in) visitors to get the special offers, you only have IPs to go by initially, and although they&#39;re not perfect, they *do* work against single-IP bots. Botnets are a different beast, but I&#39;ll come back to those. For now, we will do some simple throttling to beat rapid-fire single-IP bots.\r\n\r\n&gt; The performance hit is negligable if you run the IP check before all other processing, use a proxy server for the throttling logic, and store the IPs in a memcached lookup-optimized tree structure.\r\n\r\n\r\n**Third measure: Cloaking the throttle with cached responses:**\r\n\r\n&gt; With rapid-fire single-IP bots throttled, we still have to address slow single-IP bots, ie. bots that are specifically tweaked to &#39;fly under the radar&#39; by spacing requests slightly further apart than the throttling prevents.\r\n\r\n&gt; To instantly render slow single-IP bots useless, simply use the strategy suggested by abelenky: serve 10-minute-old cached pages to all IPs that have been spotted in the last 24 hours (or so). That way, every IP gets one &#39;chance&#39; per day/hour/week (depending on the period you choose), and there will be no visible annoyance to real users who are just hitting &#39;reload&#39;, except that they don&#39;t win the offer.\r\n\r\n&gt; The beauty of this measure is that is **also** thwarts &#39;alarm bots&#39;, as long as they don&#39;t originate from a botnet.\r\n\r\n&gt; (I know you would probably prefer it if real users were allowed to refresh over and over, but there is no way to tell a refresh-spamming human from a request-spamming bot apart without a CAPTCHA or similar)\r\n\r\n\r\n**Fourth measure: reCAPTCHA:**\r\n\r\n&gt; You are right that CAPTCHAs hurt the user experience and should be avoided. However, in *_one_* situation they can be your best friend: If you&#39;ve designed a very restrictive system to thwart bots, that - because of its restrictiveness - also catches a number of false positives; then a CAPTCHA served *as a last resort* will allow those real users who get caught to slip by your throttling (thus avoiding annoying DoS situations).\r\n\r\n&gt; The sweet spot, of course, is when ALL the bots get caught in your net, while extremely few real users get bothered by the CAPTCHA.\r\n\r\n&gt; If you, when serving up the 10-minute-old cached pages, also offer an alternative, *optional*, CAPTCHA-verified &#39;front page refresher&#39;, then humans who **really** want to keep refreshing, can still do so without getting the old cached page, but at the cost of having to solve a CAPTCHA for each refresh. That *is* an annoyance, **but an optional one** just for the die-hard users, who tend to be more forgiving because they *know* they&#39;re gaming the system to improve their chances, and that improved chances don&#39;t come free.\r\n\r\n\r\n**Fifth measure: Decoy crap:**\r\n\r\n&gt; Christopher Mahan had an idea that I rather liked, but I would put a different spin on it. Every time you are preparing a new offer, prepare two other &#39;offers&#39; as well, that no human would pick, like a 12mm wingnut for $20. When the offer appears on the front page, put all three &#39;offers&#39; in the same picture, with numbers corresponding to each offer. When the user/bot actually goes on to order the item, they will have to pick (a radio button) which offer they want, and since most bots would merely be guessing, in two out of three cases, the bots would be buying worthless junk.\r\n\r\n&gt;Naturally, this doesn&#39;t address &#39;alarm bots&#39;, and there is a (slim) chance that someone could build a bot that was able to pick the correct item. However, the risk of accidentally buying junk should make scripters turn entirely from the fully automated bots.\r\n\r\n\r\n**Sixth measure: Botnet Throttling:**\r\n\r\n&gt; [deleted]\r\n\r\nOkay............ I&#39;ve now spent most of my evening thinking about this, trying different approaches.... global delays.... cookie-based tokens.. queued serving... &#39;stranger throttling&#39;.... And it just doesn&#39;t work. It doesn&#39;t. I realized the main reason why you hadn&#39;t accepted any answer yet was that noone had proposed a way to thwart a distributed/zombie net/botnet attack.... so I really wanted to crack it. I believe I cracked the botnet problem for authentication in a [different thread][1], so I had high hopes for your problem as well. But my approach doesn&#39;t translate to this. You only have IPs to go by, and a large enough botnet doesn&#39;t reveal itself in any analysis based on IP addresses.\r\n\r\n**So there you have it**: My sixth measure is naught. Nothing. Zip. Unless the botnet is small and/or fast enough to get caught in the usual IP throttle, I don&#39;t see ***any*** effective measure against botnets that doesn&#39;t involve explicit human-verification such as CAPTHAs. I&#39;m sorry, but I think combining the above five measures is your best bet. And you could probably do just fine with just abelenky&#39;s 10-minute-caching trick alone.\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/479233/what-is-the-best-distributed-brute-force-countermeasure"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234142561, "answer_id": 526862, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234142561, "body_markdown": "How about a delay page where the user must wait for a delay that is shown in an image?\r\n\r\nYou only do the ordering from the page they get to if they click within a short enough time period of that specified in the image, maybe the image could be doing a countdown within an animated gif or very small javascript or flash timer.\r\n\r\nIf they jump to the details page outside the time limit, they see an expensive item as discussed in previous answers."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234190627, "answer_id": 528398, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1234190627, "body_markdown": "Stick a 5 minute delay on all product announcements for unregistered users.  Casual users won&#39;t really notice this and noncasual users will be registered anyhow."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234203219, "answer_id": 529220, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234203219, "body_markdown": "I am not 100% sure this would work, at least not without trying.\r\n\r\nBut it seems as if it should be possible, although technically challenging, to write a server-side HTML/CSS scrambler that takes as its input a normal html page + associated files, and outputs a more or less blank html page, along with an obfuscated javascript file that is capable of reconstructing the page. The javascript couldn&#39;t just print out straightforward DOM nodes, of course... but it could spit out a complex set of overlapping, absolute-positioned divs and paragraphs, each containing one letter, so it comes out perfectly readable.\r\n\r\nBots won&#39;t be able to read it unless they have employ a complete rendering engine and enough AI to reconstruct what a human would be seeing.\r\n\r\nThen, because it&#39;s an automated process, you can re-scramble the site as often as you have the computational power for - every minute, or every ten minutes, or every hour, or even every page load.\r\n\r\nGranted, writing such an obfuscater would be difficult, and probably not worth it. But it&#39;s a thought.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234204512, "answer_id": 529302, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234204512, "body_markdown": "Not a complete fix, but I didnt see it here yet. \r\n\r\nTrack the &quot;slamming&quot; addresses, and put up a disclaimer saying that BOC/ items will not be shipped to any address that is not following your TOS. \r\n\r\nThis will have psych impact on some, and others who want to take advantage of your site will have to switch up methods, but you will have negated one avenue for them. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1234205373, "answer_id": 529351, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1234205373, "body_markdown": "How about this: Create a form to receive an email if a new item is on sale and add a catching system that will serve the same content to anyone refreshing in less than X seconds.\r\n\r\nThis way you win all the escenarios: you get rid of the scrapers(they can scrape their email account) and you give chance to the people who wont code something just to buy in your site! Im sure i would get the email in my mobile and log in to buy something if i really wanted to.\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234255659, "answer_id": 531518, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234255659, "body_markdown": "There&#39;s a lot of suggestions here so pardon me if this has already been posted.\r\n\r\nThe first thing I would do is make the ordering a two step process. The first step would pass back a GUID while logging the IP Address. The second step would receive the GUID and compare it against IP Addresses that have been logged. In conjunction with blocking IP Addresses which are spamming the site (IE: faster than a human can click refresh) this technique could stop spammers from successfully making purchases thereby solving 1 &amp; 3.\r\n\r\nThe second item is problematic but I would keep a running list of your regular user&#39;s IP addresses and throttle traffic for any newcomers. This could leave first time visitors and dial up users (due to changing IP addresses) out in the cold, but I think it&#39;s just making the best out of a bad situation by giving preference to repeat business... and dialup users, well it&#39;s questionable whether they&#39;d &quot;win&quot; even if there weren&#39;t any spammers anyway.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234303817, "answer_id": 534444, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234303817, "body_markdown": "Why don&#39;t you block the credit cards of users you identify as bots?\r\n\r\n 1. Publish that using bots is illegal on your website\r\n 2. Find certain heuristics that identify bots (this can be done for example by short-term IP tracking or by the time it takes them to feel up the form)\r\n 3. If someone you tagged as a bot purchased the item, block his credit card for future use\r\n 4. Next time he tries to make a purchase, disallow it and return the item to stock\r\n\r\nI guess even the professionals will run out of credit cards eventually. \r\n\r\nYour server load should decrease with time once the botters give up on you. Another idea is to separate your pages between servers - e.g., RSS feed on one server, homepage on another, checkout on another one.\r\n\r\nGood luck."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234341013, "answer_id": 535910, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1234341013, "body_markdown": "As suggested above, I did some work on non-captcha forms by using a pre-calculated hash of the expected value of a result stored in the form. The idea works for two Wordpress anti-spam plugins: [WP-Morph][1] and [WP-HashCash][2]. The only drawback is the client browser having to be able to interpret JavaScript.\r\n\r\n\r\n  [1]: http://neuromancer.inf.um.es/blog/index.php?s=wp-morph&amp;submit=Search\r\n  [2]: http://wordpress-plugins.feifei.us/hashcash/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1234358467, "answer_id": 536720, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1234358467, "body_markdown": "**How do you know there are scripters placing orders?**\r\n\r\nThe crux of your problem is that you can&#39;t separate the scripters from the legitimate users and therefore can&#39;t block them, so how is it that you know there are scripters at all?\r\n\r\nIf you have a way to answer this question, then you have a set of characteristics you can use to filter the scripters."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234359814, "answer_id": 536819, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1234359814, "body_markdown": "So your problem is too much business?  People are sniping your sales?  This is assuming that these scripters are generating qualified sales?  And the issue is they are snapping up all your product before everyone else does?\r\n\r\nHow about you make a full webservice API for &#39;scripters&#39; to interface with.  Then offer a slight discount or some kind of perk to make them play by your rules.  Double your business and have your web sales and API sales.\r\n\r\nEither that or just get WAY more inventory - you can&#39;t fight it - embrace and adapt to it."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234370765, "answer_id": 537708, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1317140324, "last_edit_date": 1317140324, "body_markdown": "I&#39;m pretty sure your server already logs all the IPs of incoming requests (most do) - so the data is already there.\r\n\r\n**Maybe you could:**\r\n\r\nJust validate the &quot;winner&quot; by verifying that it&#39;s IP shows up less than a certain threshold value in the logs (I use &quot;grep &lt;IP&gt; | wc -l&quot; to get the count).  If it&#39;s over your threshold, temporarily block that IP (hour or so?).\r\n\r\nDisqualify any &quot;winner&quot; with the same shipping address or payment info as the &quot;last&quot; winner, or that has won within a certain time frame to spread the &quot;winning&quot; around.\r\n\r\nThe bots won&#39;t get &#39;em all that way.\r\n\r\n**To annoy the crap out of the scrapers:**\r\nWhen the &quot;random crap&quot; item goes up, run the HMTL output for that page through a &quot;code obfuscator&quot; ... which doesn&#39;t change the &quot;display&quot; of the page ... just scrambles the code with randomly generated Ids etc.\r\n\r\n**More insidious:**\r\n\r\nIncrease the price charged for the &quot;won&quot; item based on how many times the winning IP shows up in the logs.  Then even if the bots win, so do you. :-)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234387590, "answer_id": 538885, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234387590, "body_markdown": "Trying to target the BOTs themselves will never solve the problem - whoever is writing them will figure out a new way around whatever you&#39;ve put in place. However forcing the user to think before buying would be a much more effective solution. The best way of doing this that I can think of is run a Dutch auction. Start the price high (2x what you buy it for in the shop) and decrease it over time. The first person to hit buy gets it. I don&#39;t think any bot is intelligent enough to workout what the best price is for the item."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234464350, "answer_id": 542717, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234464350, "body_markdown": "**Restrict the times at which you release offers:**\r\nFor example: only from 7 minutes to 8 minutes past the start of an hour. Do not deviate from this, and give penalties on the order of a couple seconds to IPs which check a lot in the half hour before the release time. It then becomes advantageous for bot owners to only screen scrape for a couple minutes every hour instead of all. the. time. Also, because a normal person can check a site once every hour but not every second, you put normal people on a much more even footing with the bots.\r\n\r\n**Cookies:**\r\nUse a tracking cookie composed of only a unique ID (a key for a database table). Give &quot;release delays&quot; to clients with no cookie, invalid cookies, clients which use the same cookie from a new IP, or cookies used with high frequency.\r\n\r\n**Identify likely bots:**\r\nCookies will cause the bots to request multiple cookies for each IP they control, which is behavior which can be tracked. IPs with only a single issued cookie are most likely normal clients. IPs with many issued cookies are either large NAT-ed networks, or a bot. I&#39;m not sure how you would distinguish those, but companies are probably more likely to have things like DNS servers, a web page, and things of that nature."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234464954, "answer_id": 542754, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234464954, "body_markdown": "Perhaps you need a solution that makes it totally impossible for a bot to distinguish between the bag-o-crap sales and all other content.  \r\n\r\nThis is sort of a variation on the captcha theme, but instead of the user authenticating themselves by solving the captcha, the captcha is instead the description of the sale, rendered in a visually pleasing (but perhaps somewhat obscured by the background) manner.  "}, {"tags": [], "down_vote_count": 1, "creation_date": 1234465601, "answer_id": 542794, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234465923, "last_edit_date": 1234465923, "body_markdown": "1. Sell the item to non-scripting humans.\r\n3. Don&#39;t hassle the &#39;normal&#39; users with any tasks to complete to prove they&#39;re human.\r\n\r\nSo basically you want to find out if a particular user is a person without making them prove it. As far as I know that&#39;s impossible over the Internet, sorry.\r\n\r\nI suggest changing the mechanism to an auction."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234471663, "answer_id": 543167, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1234471663, "body_markdown": "Here&#39;s my take. Attack the ROI of the bot owners, so that they&#39;ll instead do the legitimate thing you want them to do instead of cheating. Let&#39;s look at it from their point of view. What are their assets? Apparently, an unlimited number of disposable machines, IP addresses, and perhaps even a large number of unskilled people willing to do inane tasks. What do they want? To always get the special deal you are offering before other legitimate people get it. \r\n\r\nThe good news is that they only have a limited window of time in which to win the race. And what I don&#39;t think they have is an unlimited number of smart people who are on call to reverse engineer your site at the moment you unleash a deal. So if you can make them jump through a specific hoop that is hard for them to figure out, but automatic for your legitimate customers (they won&#39;t even know it&#39;s there), you can delay their efforts just enough that they get beat by the massive number of real people who are just dying to get your hot deal. \r\n\r\nThe first step is to make your notion of authentication non-binary, by which I mean that, for any given user, you have a probability assigned to them that they are a real person or a bot. You can use a number of hints to build up this probability, many of which have been discussed already on this thread: suspicious rate activity, IP addresses, foreign country geolocation, cookies, etc. My favorite is to just pay attention to the exact version of windows they are using. More importantly, you can give your long-term customers a clear way to authenticate with strong hints: by engaging with the site, making purchases, contributing to forums, etc. It&#39;s not required that you do those things, but if you do then you&#39;ll have a slight advantage when it comes time to see special deals.\r\n\r\nWhenever you are called upon to make an authentication decision, use this probability to make the computer you&#39;re talking to do more-or-less work before you will give them what they want. For example, perhaps some javascript on your site requires the client to perform a computationally expensive task in the background, and only when that task completes will you let them know about the special deal. For a regular customer, this can be pretty quick and painless, but for a scammer it means they need a lot more computers to maintain constant coverage (since each computer has to do more work). Then you can use your probability score from above to increase the amount of work they have to do. \r\n\r\nTo make sure this delay doesn&#39;t cause any fairness problems, I&#39;d recommend making it be some kind of encryption task that includes the current time of day from the person&#39;s computer. Since the scammer doesn&#39;t know what time the deal will start, he can&#39;t just make something up, he has to use something close to the real time of day (you can ignore any requests that claim to come in before the deal started). Then you can use these times to adjust the first-come-first-served rule, without the real people ever having to know anything about it.\r\n\r\nThe last idea is to change the algorithm required to generate the work whenever you post a new deal (and at random other times). Every time you do that, normal humans will be unaffected, but bots will stop working. They&#39;ll have to get a human to get to work on the reverse-engineering, which hopefully will take longer than your deal window. Even better is if you never tell them if they submitted the right result, so that they don&#39;t get any kind of alert that they are doing things wrong. To defeat this solution, they will have to actually automate a real browser (or at least a real javascript interpreter) and then you are really jacking up the cost of scamming. Plus, with a real browser, you can do tricks like those suggested elsewhere in this thread like timing the keystrokes of each entry and looking for other suspicious behaviors. \r\n\r\nSo for anyone who you know you&#39;ve seen before (a common IP, session, cookie, etc) you have a way to make each request a little more expensive. That means the scammers will want to always present you with your hardest case - a brand-new computer/browser/IP combo that you&#39;ve never seen before. But by putting some extra work into being able to even know if they have the bot working right, you force them to waste a lot of these precious resources. Although they may really have an infinite number, generating them is not without cost, and again you are driving up the cost part of their ROI equation. Eventually, it&#39;ll be more profitable for them to just do what you want :)\r\n\r\nHope that&#39;s helpful,\r\n\r\nEric\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234472748, "answer_id": 543250, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1346431768, "last_edit_date": 1346431768, "body_markdown": "Use [hashcash][1].\r\n\r\n&gt;Hashcash is a denial-of-service counter measure tool. Its main current use is to help hashcash users avoid losing email due to content based and blacklist based anti-spam systems.\r\n\r\n  [1]: http://www.hashcash.org/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234473877, "answer_id": 543352, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234473877, "body_markdown": "I think your best bet is to watch IP&#39;s coming in, but to mitigate the issues you mention in a couple of ways. First, use a probabilistic hash (eg, a [Bloom Filter][1]) to mark IP&#39;s which have been seen before. This class of algorithm is very fast, and scales well to absolutely massive set sizes. Second, use a graduated response, whereby a server delay is added to each request, predicated by how much you&#39;ve seen the IP &#39;recently&#39;.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Bloom_filter"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234475241, "answer_id": 543485, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234475241, "body_markdown": "At the expense of Usability by those with screen readers you could just, on 90% of the pages use unlabelled, undenotable picture buttons. Rotate the pictures regularly and use a random generator and random sorting to lay out two buttons that say &quot;I want this&quot; and &quot;I am a bot&quot;. Place them side by sort in a different order. At each stage a user can make progress torwards their target but a bot is more likely to make a mistake (50% * number of steps). It&#39;s like a capture at every stage on easier for the user and slower for bots who need to prompt their master at EVERY single step. Put the price, the confirm button, the item description in pictures. It sucks but likely more successful."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234475942, "answer_id": 543590, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1234475942, "body_markdown": "Why not make the content the CAPTCHA?\r\n\r\nOn the page where you display the prize, always have an image file in the same location with the same name, when a bag o crap sale is on, dynamically generate and load an image with the text etc advertising the prize, when no sale is on just have some default image that integrates well with the site. Seems like its the same concept as CAPTCHA... if the bot cannot figure out the meaning of the image they will not be able to &quot;win&quot; it, if they can they would have been able to figure out your CAPTCHA images anyways."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234476324, "answer_id": 543632, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234476324, "body_markdown": "Just make the bots compete on even ground. Encrypt a timestamp and stick it in a hidden form field. When you get a submission decrypt it and see how much time has passed. If it surpasses the threshold of human typing ability reject it. Now bots and humans can only try to buy the bag of crap at the same speed."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234477325, "answer_id": 543725, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234477325, "body_markdown": "If you can&#39;t beat them...  Change the rules!\r\n\r\nWhy not provide a better system than the scripters have made for themselves?  \r\nModify your site to be fairer for people not using bot scripts.  People register (CAPTCHA or email verification) and effectively enter a lottery competition to win!\r\n\r\n&#39;Winning&#39; makes it more fun.  and each person pays a small entry fee so the Winner gets the product for EVEN less"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234478656, "answer_id": 543839, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234478656, "body_markdown": "I&#39;m not a web developer, so take this with a pinch of salt, but here&#39;s my suggestion -\r\n\r\nEach user has a cookie (containing a random string of data) that determines whether they see the current crap sale.\r\n\r\n(If you don&#39;t have a cookie, you don&#39;t see them. So users who don&#39;t enable cookies never see crap sales; and a new user will never see them the first time they view the page, but will thereafter).\r\n\r\nEach time the user refreshes the website, he passes his current cookie to the server, and the server uses that to decide whether to give him a new cookie or leave the current one unchanged; and based on that, decides whether to show the page with or without the crap sale.\r\n\r\nTo keep things simple on the server side, you could say at any given time, there&#39;s only ever one cookie that will let you see crap sales; and there are a couple of other cookies that are labelled &quot;generated in the last 2 seconds&quot;, which will always be kept unchanged. So if you refresh the page faster than that, you can&#39;t get a new one.\r\n\r\n(...ah, well, I guess that doesn&#39;t stop a bot from restoring an older cookie and passing it back to you. Still, maybe there&#39;s a solution here somewhere.)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234478752, "answer_id": 543843, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234478752, "body_markdown": "Stopping all bots would be quite difficult, especially without using a CAPTCHA. I think you should approach this from the standpoint of implementing a wide variety of measures to make life harder for the scripters.\r\n\r\nI believe this is one measure that would weed out some of them:\r\n\r\nYou could try **randomizing the IDs and class names** of your tags with each response. This would force bots to rely on the position and context of important tags, which requires a more sophisticated bot. Furthermore, you could randomize the position of the tags if you want to use relative or absolute positioning in your CSS.\r\n\r\nThe biggest drawback with this approach is that you would have to take steps to ensure your CSS file is not cached client-side, because it would of course need to contain the randomized IDs &amp; class names. One way to overcome this is to not use external CSS files and instead put the CSS with the randomized selectors in the `&lt;head&gt;&lt;/head&gt;` section of the page. This would allow the randomized CSS to be client-side cached along with the rest of the page."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234479199, "answer_id": 543865, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234480095, "last_edit_date": 1234480095, "body_markdown": "Steps:\r\n====== \r\n(combining ideas from another poster and gif spammers)\r\n\r\n * Display the __entire offer page as an image__, ad-copy and all.\r\n\r\n * __Encrypt the price in the URL__.\r\n\r\nAttacks:\r\n========\r\n\r\n1. **Bots going to the URL to view the price on the checkout page**\r\n\r\n  * __turn the checkout price tag into an image__, or\r\n\r\n  * __apply a captcha__ before users can go to the order page.\r\n\r\n2. **chewing up bandwidth**\r\n\r\n  * Serve special offers using images, **normal offers using HTML**.\r\n\r\n3. **reckless bot ordering**\r\n\r\n  * some of the special &quot;image&quot; offers are actually at normal prices.\r\n\r\n4. **RSS Scraping**\r\n\r\n  *  **RSS feeds must be paid for** by hashcash or captchas.\r\n\r\n  *  This has to be on a **per-request** basis.\r\n\r\n  *  It can be **pre-paid**, for instance user can enter 20 captchas \r\n     for 200 RSS look ups\r\n\r\n  *  Once the threat of DDOS has been mitigated, you can \r\n     **implement e-mail notification** of offers\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234479241, "answer_id": 543872, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234479241, "body_markdown": "How about coming up with a way to identify bots, probably IP based, but not block them from accessing the site, just don&#39;t allow them to actually buy anything.  That is, if they buy, they don&#39;t actually get it, since bots are against the terms of use."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234480752, "answer_id": 543975, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234480752, "body_markdown": "The problem with CAPTCHA is that when you see a crap sale on Woot, you have to act VERY fast as a consumer if you hope to receive your bag of crap.  So, if you are going to use a form of CAPTCHA , it must be very quick for the customer.   \r\n\r\nWhat if you had a large image, say 600 x 600 that was just a white background and dots of different colors or patterns randomly placed on the image.  The image would have an image map on it.  This map would have a link mapped to small chunks of the image.  Say, 10 x 10 blocks.  The user would simply have to click on the specific type of dot.  It would be quick for end the user and it would somewhat difficult for a bot developer to code.  But this alone may not be that difficult for a good bot creator to get past.  I would add ciphered URLs.\r\n\r\nI was developing a system some time back that would cipher URLs.  If every URL on these pages is ciphered with a random IV, Then they all appear to be unique to the bot.  I was designing this to confuse probing bots.  I have not completed the technique yet, but I did have a small site coded that functioned in this manor.  \r\n\r\nWhile these suggestions are not a full solution, they would make it way harder to build a working bot while still being easy for a human to use. \r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234482391, "answer_id": 544085, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234482391, "body_markdown": "There&#39;s probably no good solution as long as the surprise distribution of the bag o&#39; crap is tied only to a point in time - since bots have plenty of time, and the resources to keep slamming the site at short time intervals.\r\n\r\nI think you&#39;d have to add an extra criterion that bots can&#39;t screen-scrape or manipulate from their end.  For instance, say at any time there&#39;s 5000 humans hitting the page a few times a minute looking for the bag of crap, and 50 bots slamming it every second.  In the first few seconds after it appears, the 50 bots are going to snap it all up.  \r\n\r\nSo, you could add a condition that the crap appears first to any users where the modulus 30 of their integer IP is a random number, say 17.  Maybe another random number is added every second, so the crap is revealed incrementally to all clients over 30 seconds.\r\n\r\nNow imagine what happens in the first several seconds: currently, all 50 bots are able to snap up all the crap immediately, and the humans get 0.  Under this scheme, after 6 seconds only 10 bots have made it through, while 1000 humans have gotten through, and most of the crap goes to the humans.  You could play with the timings and the random modulus to try and optimize that interval, depending on user counts and units available.    \r\n\r\nNot a perfect solution, but an improvement.  The upside is many more humans than bots will benefit.  There are several downsides, mainly that not every human gets an equal shot at the crap on any particular day - though they don&#39;t have much of a shot now, and I&#39;d guess even without bots, most of them get shut out at random unless they happen to refresh at just the right second.  And, it wouldn&#39;t work on a botnet with lots of distributed IPs.  Dunno if anyone&#39;s really using a botnet just for woot crap though.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234483144, "answer_id": 544128, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234483144, "body_markdown": "Your end goal is to spread out to a larger user base who gets to buy stuff.\r\n\r\nWhat if you did something like releasing your bags of w00t over a period of an hour or two, and over a range of IP addresses, instead of releasing them all at the same time and to any IP address.\r\n\r\nLet&#39;s say you have 255 bags of w00t.  1.0.0.0 can buy in the first minute, 2.0.0.0 can buy in the second minute (potentially 2 bags of w00t available), etc, etc.\r\n\r\nThen, after 255 minutes, you have made bags of w00t available to everybody, although it is highly likely that not all 255 bags of w00t are left.\r\n\r\nThis limits a true attack to users who have &gt;255 computers, although a bot user might be able to &quot;own&quot; the bag of w00t assigned to their IP range.\r\n\r\nThere is no requirement that you match up bags to IP&#39;s fairly (and you definitely should use some type of MD5 / random seed thing)... if you distribute 10 bags of w00t incrementally, you just have to make sure that it gets distributed ~evenly~ across your population.\r\n\r\nIf IP&#39;s are bad then you can use cookies and exclude the use case where a non-cookied user gets offered a bag of w00t.\r\n\r\nIf you notice that a particular IP, cookie, or address range has an extreme amount of traffic, make the bag of w00t available to them proportionally later / last, so that occasional / steady / slow visitors are given opportunities before heavy / rapid / probable bot users.\r\n\r\n--Robert"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234483312, "answer_id": 544135, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1234483312, "body_markdown": "Let&#39;s turn the problem on its head - you have bots buying stuff that you want real people to buy, how about making a real chance that the bots will buy stuff that you **don&#39;t** want the real people to buy.\r\n\r\nHave a random chance for some non displayed html that the scraping bots will think is the real situation, but real people won&#39;t see (and don&#39;t forget that real people includes the blind, so consider screen readers etc as well), and this travels through to purchase something exorbitantly expensive (or doesn&#39;t make the actual purchase, but gets payment details for you to put on a banlist).\r\n\r\nEven if the bots switch to &#39;alert the user&#39; rather than &#39;make the purchase&#39;, if you can get enough false alarms, you may be able to make it sufficiently worthless for people (maybe not everyone, but some reduction in the scamming is better than none at all) not to bother."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234483613, "answer_id": 544160, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1234483613, "body_markdown": "I don&#39;t know if this has been suggested yet, but rather than keeping a list of IP&#39;s of the bots, which you would need to scan through on every single page request, why not set a cookie or a session var to keep track of the bots? Here&#39;s an example in PHP:\r\n\r\n    &lt;?php\r\n    // bot check\r\n    $now = microtime(true);\r\n    // bot counter var\r\n    $botCounter = 0;\r\n    if (array_key_exists(&#39;botCheck_panicCounter&#39;, $_REQUEST))\r\n    {\r\n      $botCounter = $_REQUEST[&#39;botCheck_panicCounter&#39;];\r\n    }\r\n    \r\n    // if this seems to be a bot\r\n    if ($botCounter &gt; 5)\r\n    {\r\n      die(&#39;Die()!!&#39;);\r\n    }\r\n    \r\n    // if this user visited before\r\n    if (array_key_exists(&#39;botCheck_lastVisit&#39;, $_REQUEST))\r\n    {\r\n      $lastVisit = $_SESSION[&#39;botCheck_lastVisit&#39;];\r\n      $diff = $now - $lastVisit;\r\n    \r\n      // if it&#39;s less than a second\r\n      if ($diff &lt; 1)\r\n      {\r\n        // increase the bot counter\r\n        $botCounter += 1;\r\n        // and save it\r\n        $_REQUEST[&#39;botCheck_panicCounter&#39;] = $botCounter;\r\n      }\r\n    }\r\n    \r\n    // set the var for future use\r\n    $_SESSION[&#39;botCheck_lastVisit&#39;] = $now;\r\n    \r\n    // ---------------\r\n    // rest of the content goes here\r\n    ?&gt;\r\n\r\nI didn&#39;t check for syntax errors, but you get the idea."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234486008, "answer_id": 544255, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234486008, "body_markdown": "I would recommend a firewall-based solution. Netfilter/iptables, as most firewalls, allows you to set a limit to the maximum number of new page requests per unit time.\r\n\r\nFor example, to limit the number of page views dispensed to something human -- say, 6 requests every 30 second -- you could issue the following rules:\r\n\r\n    iptables -N BADGUY\r\n    iptables -t filter -I BADGUY -m recent --set --name badguys\r\n    \r\n    iptables -A INPUT -p tcp --dport http -m state --state NEW -m recent --name http --set\r\n    iptables -A INPUT -p tcp --dport http -m state --state NEW -m recent --name http --rcheck --seconds 30 --hitcount 6 -j BADGUY\r\n    iptables -A INPUT -p tcp --dport http -m state --state NEW -m recent --name http --rcheck --seconds  3 --hitcount 2 -j DROP\r\n\r\nNote that this limit would apply to each visitor independently, so one user&#39;s misuse of the site wouldn&#39;t affect any other visitor.\r\n\r\nHope this helps!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234486350, "answer_id": 544268, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234486350, "body_markdown": "You could reduce the load on your server by having the RSS and HTML update at the same time, so there&#39;s no incentive for the bots to screenscrape your site.  Of course this gives the bots and advantage in buying your gear.\r\n\r\nIf you only accept payments via credit card (might be the case, might not be, but it shows my line of thinking) only allow a user to buy a BOC once every 10 sales with the same account and/or credit card.  It&#39;s easy for a script kiddie to get a swarm of IPs, less easy for them to get a whole heap of credit cards together.  And as you&#39;ve said IPs are really hard to ban, while temporary bans on credit cards should be a walk in the park.\r\n\r\nYou could let everyone know what the limit is, or you could just tell them that because of the high demand and/or bot interest there&#39;s throttling implemented on the purchasing while being unspecific about the mechanism.\r\n\r\nEach attempt to purchase during the throttling period could trigger an exponential backoff - you buy a BOC, you have to what for 10 sales to pass before you try again.  You try again anyway on the next sale, and now you have to wait 20 sales, then 40, then 80...\r\n\r\nThis is only really useful if it&#39;s really unlikely that a human user would manage to get a BOC twice in less than 10 sales.  Tune the number as appropriate."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234488923, "answer_id": 544381, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234490118, "last_edit_date": 1234490118, "body_markdown": "There are a few solutions you could take, based on the level of complexity you want to get into.\r\n\r\nThese are all based on IP tracking, which falls apart somewhat under botnets and cloud  computing, but should thwart the vast majority of botters. The chances that Joe Random has a cloud of bots at his disposal is far lower than the chance that he&#39;s just running a Woot bot he downloaded somewhere so he can get his bag of crap.\r\n\r\n**Plain Old Throttling**\r\n\r\nAt a very basic, crude level, you could throttle requests per IP per time period. Do some analysis and determine that a legitimate user will access the site no more than X times per hour. Cap requests per IP per hour at that number, and bots will have to drastically reduce their polling frequency, or they&#39;ll lock themselves out for the next 58 minutes and be completely blind. That doesn&#39;t address the bot problem by itself, but it does reduce load, and increases the chance that legitimate users will have a shot at the item.\r\n\r\n**Adaptive Throttling**\r\n\r\nAn variant on that solution might be to implement a load balancing queue, where the number of requests that one has made recently counts against your position in the queue. That is, if you keep slamming the site, your requests become lower priority. In a high-traffic situation like the bag of crap sales, this would give legitimate users an advantage over the bots in that they would have a higher connection priority, and would be getting pages back more quickly, while the bots continue to wait and wait until traffic dies down enough that their number comes up.\r\n\r\n**End-of-the-line captcha**\r\n\r\nThird, while you don&#39;t want to bother with captchas, a captcha at the very end of the process, right before the transaction is completed, may not be a bad idea. At that point, people have committed to the sale, and are likely to go through with it even with the mild added annoyance. It prevents bots from completing the sale, which means that at a minimum all they can do is hammer your site to try to alert a human about the sale as quickly as possible. That doesn&#39;t solve the problem, but it does mean that the humans have a far, far better chance of obtaining sales than the bots do currently. It&#39;s not a solution, but it&#39;s an improvement.\r\n\r\n**A combination of the above**\r\n\r\nImplement basic, generous throttling to stop the most abusive of bots, while taking into account the potential for multiple legitimate users behind a single corporate IP. The cutoff number would be very high - you cited bots hitting your site 10x/sec, which is 2.16 million requests/hour, which is obviously *far* above any legitimate usage, even for the largest corporate networks or shared IPs.\r\n\r\nImplement the load balancing queue so that you&#39;re penalized for taking up more than your share of server connections and bandwidth. This penalizes people in the shared corporate pools, but it doesn&#39;t prevent them from using the site, and their violation should be far less terrible than your botters, so their penalization should be less severe.\r\n\r\nFinally, if you have exceeded some threshold for requests-per-hour (which may be far, far, far lower than the &quot;automatically drop the connection&quot; cutoff), then require that the user validate with a captcha.\r\n\r\nThat way, the users who are legitimately using the site and only have 84 requests per hour, even when they&#39;re mega-excited, don&#39;t notice a change in the site&#39;s slow at all. However, Joe Botter finds himself stuck with a dilemma. He can either:\r\n\r\n* Blow out his request quota with his current behavior and not be able to access the site at all, **or**\r\n* Request just enough to not blow the request quota, which gives him realtime information at lower traffic levels, but causes him to have massive delays between requests during high-traffic times, which severely compromises his ability to complete a sale before inventory is exhausted, **or**\r\n* Request more than the average user and end up getting stuck behind a captcha, **or**\r\n* Request no more than the average user, and thus have no advantage over the average user.\r\n\r\nOnly the abusive users suffer degradation of service, or an increase in complexity. Legitimate users won&#39;t notice a single change, except that they have an easier time buying their bags of crap.\r\n\r\n**Addendum**\r\n\r\nThrottle requests for unregistered users at rates far below registered users. That way, a bot owner would have to be running a bot via an authenticated account to get past what should be a relatively restrictive throttling rate.\r\n\r\nThe inventive botters will then register multiple user IDs and use those to achieve their desired query rate; you can combat that by considering any IDs that show from the same IP in a given period to be the same ID, and subject to shared throttling.\r\n\r\nThat leaves the botter with no recourse but to run a network of bots, with one bot per IP, and a registered Woot account per bot. This is, unfortunately, effectively indistinguishable from a large number of unassociated legitimate users.\r\n\r\nYou could use this strategy in conjunction with one or more of the above strategies with the goal to produce the overall effect of providing the best service to registered users who do not engage in abusive usage patterns, while progressively penalizing other users, both registered and unregistered, according to their status (anon or registered) and the level of abuse as determined by your traffic metrics."}, {"tags": [], "down_vote_count": 1, "creation_date": 1234492927, "answer_id": 544545, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234492927, "body_markdown": "This is always tough, I applaud your desire to avoid using a CAPTCHA. I would suggest first blocking them based on their behavior which you can ascertain via the HTTP requests. Look at the tool known as [bad behavior][1], in the year that I&#39;ve been using it on several sites it has yet to block a real human being. Most bots don&#39;t do a very good job of pretending to be a web browser. I also recommend using the project honey pot API. \r\n\r\nSecondly, alter your forms on a random basis, including the labels. This is not designed to fool the bots, this is designed to let you discover their IP addresses / proxies. Something that screws up entries xx times should go on that list.\r\n\r\nFinally, if you find yourself in a position where you simply HAVE to use some kind of human verification process, try something like this:\r\n\r\n    [ image of a pig ]\r\n    \r\n    The image above is a: [ ] dog  [ ] house [ ] pig\r\n\r\n\r\nThat would not be very annoying to human beings.\r\n\r\nIn short, there is not &#39;one&#39; solution to your problem, don&#39;t expect to be 100% successful. Set your goal to reduce the annoyance to a very dull roar, you should be able to do it rather quickly.\r\n\r\n\r\n  [1]: http://www.bad-behavior.ioerror.us/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234495802, "answer_id": 544605, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234495802, "body_markdown": "\r\n  my first thought was that you say the bots are scraping your webpage, which would suggest they are only picking up the HTML content.  So having your order screen verify (from the http-logs) that an offer-related graphic was loaded from the bot"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234496663, "answer_id": 544624, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234496663, "body_markdown": "Develop a front page component and shopping cart that do not run natively in the brower. If you use something like Flex/Flash or Silverlight, it is much more difficult to scrape, and you have full control over the server communication, and thus can shield the content completely from scripters. \r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234499044, "answer_id": 544723, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234499044, "body_markdown": "This only needs to be a problem if the bot users are paying with invalid credit cards or something.  So how about a non-technical solution? \r\n\r\nTreat the bot users as normal users as long as their payments are valid and make sure you have enough in stock to satisfy the total demand.\r\n\r\nResult: more sales.  You&#39;re in business to make money, right?"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234502730, "answer_id": 544827, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234502730, "body_markdown": "To guarantee selling items only to non-scripted humans, could you detect inhumanly quick responses between the item being displayed on the front page and an order being made? This turns the delay tactic on its head, instead of handicapping everyone artificially through a .5 second delay, allow requests as fast as possible and smack bots that are clearly superhuman:) \r\n\r\nThere is some physical limit to how fast a user can click and make a decision, and by detecting *after* all the requests have gone through (as opposed to purposely slowing down all interacts), you don&#39;t effect performance of non-scripted humans.\r\n\r\nIf only using CAPTCHAs *some* of the time is acceptable, you could increase the delay time to fast-human (as opposed to superhuman) and require a post confirmation CAPTCHA if someone clicks really fast. Akin to how some sites require CAPTCHA confirmation if someone posts multiple posts quickly.\r\n\r\nSadly I don&#39;t know of any good ways to stop screen scrapers of your product listings :("}, {"tags": [], "down_vote_count": 0, "creation_date": 1234505117, "answer_id": 544881, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234505117, "body_markdown": "I&#39;m just wondering if there might be a simple solution to this.  \r\n\r\nI assume that the message indicating the crap sale is posted in text and this is the bit of information the scrapers look for.  \r\n\r\nWhat if you made the announcement using an image instead?  Doing so might pose some design problems but they could be overcome and possibly serve as the impetus for some ingenious creativity.\r\n\r\nIssue #1&lt;br /&gt;\r\nThere would have to be some design space dedicated to an image.  (Want to be really tricky?  Rotate a local ad through this slot. Of course the image&#39;s name would need to be static to avoid giving scrapers a scent.  That&#39;s one slot that would never have to worry about ad-blindness...)\r\n\r\nIssue #2&lt;br /&gt;\r\nRSS.  I&#39;m not sure if everyone can view images in their feed readers.  If enough of your users can, then you could start sending a daily feed update consisting of an image.  You could send whatever miscellaneous stuff you wanted on most days and then switch it for your crap sale alert as desired.\r\n\r\nI don&#39;t know... would they just program their bots to hit your site every time a feed item went out?\r\n\r\nOther issues?  Probably a lot.  Maybe this will help with some brainstorming, though.\r\n\r\nTake care,&lt;br /&gt;\r\nBrian"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234505267, "answer_id": 544887, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234505267, "body_markdown": "Here are some valid assumptions for you to make:\r\n\r\n - Any automated solution can and will be broken.\r\n - Making the site completely require human input (eg CAPTCHA) will greatly increase the difficulty of logging in/checking out/etc.\r\n - You have a limited number of Bandoliers of Cabbage to sell.\r\n - You can track users by session via a client-side cookie.\r\n - You aren&#39;t dealing with extremely hardcore criminals here; these are simply technical people who are bending, but not breaking, the law.  Successful orders via bots will go to the person&#39;s home, and likely not some third-party mail drop.\r\n\r\nThe solution isn&#39;t a technical one.  It&#39;s a policy one.\r\n\r\n - Log all client session ids on your webserver.\r\n - Enact a &quot;limited bots&quot; policy; say, one screen scrape every X seconds, to give people with regular browsers the ability to hit refresh.  Any user found to be going over this limit doesn&#39;t win the woot.\r\n - Follow this up by sending known bot owners a bunch of Leakfrogs."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234505858, "answer_id": 544900, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234505858, "body_markdown": "Here is what I&#39;d do:\r\n\r\n1.  Require all bidders for bag of crap sales to register with the site.\r\n2.  When you want to start a sale, post &quot;BOC sale starting soon, check your email to see if you are eligible&quot; on your main page.\r\n3.  Send out invitations to a random selection of the registered players, with a url unique to that particular sale when sale starts.\r\n4.  Ensure the URL used is different for each sales event.\r\n5.  Tweak the random selection invitation algorithm to pull down elibiblity for frequent winners, based upon Credit Card used for purchase, paypal account, or shipping address.\r\n\r\nThis thwarts the bots, as your main page only shows the pending BOC event.  The bots will not have access to the URL without recieving it in email, and have no guarantee they will recieve it at all.\r\n\r\nIf you are concerned about sales impact, you could also incentivize participation by giving away one or two BOC&#39;s for each sale.   If you don&#39;t see enough uptake on an offer in a given time interval, you automatically mail additional registered users, increasing the participant pool in each offer.\r\n\r\nViola. Level playing field, without tons of heuristics and web traffic analysis.  System can still be gamed by people setting up huge numbers of email accounts, but tweaking participant selection criteria by CC#, paypal account, shipping address mitigates this."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234507021, "answer_id": 544939, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1234507021, "body_markdown": "First of all don&#39;t try to use technology to defeat technology.\r\n\r\nYour issues:\r\n\r\n 1. Usability of the site\r\n 2. List making the site exciting and fun\r\n 3. Load on server caused by scripters.\r\n\r\nYour Goals:\r\n\r\n 1. Keep the site running at a speed not slowed by bots.\r\n 2. Sell the item to non-scripting humans.\r\n 3. Don&#39;t hassle the &#39;normal&#39; users with any tasks to complete to prove they&#39;re human.\r\n\r\n**Goal #1: Keep the site running at a speed not slowed by bots.**\r\n\r\nThis is actually pretty simple. Have someone else host the page. Instead of the front page being hosted on your servers, have Amazon S3 / Akamai host the page. Most of the page is &#39;static&#39; anyhow. Regenerate the page every 5 minutes or so the more dynamic items get refreshed. (Hell, regenerate it every 1 minute if you want). But now the bots are not hitting your server - they are hitting Akamai&#39;s CDN which can certainly take the load.\r\n\r\nOf course do this for RSS feeds as well. There is no reason why some other service can&#39;t take the bandwidth / load hit for you. On a related note, have all images served by Akamai, etc. Why take the hit?\r\n\r\n**Goal #2: Sell the item to non-scripting humans**\r\n\r\nI am in agreement with others that say make it so that scripting gives no real advantage. However, scripting is also a sign of a passionate woot customer, so you don&#39;t want to be an a*hole either.\r\n\r\nSo I would say let them buy but make them pay an inflated amount (or more preferably) just slow them down so that others have a chance.\r\n\r\nSo each time a user hits the site offer the bag of crap at $29.99 and have a timer at a random speed drop or raise the price. Have an image or some other indicator that tells humans if the price will go lower if they are patient. \r\n\r\n\r\nThe user has a &quot;Buy now!&quot; button that they click when they see price/# items being what  they want.\r\n\r\nExample:\r\n\r\nUser:\r\n\r\n - 0 sec $29.99 (1 item) Image\r\n   says:&quot;Wait for a lower price!&quot;\r\n - 7 sec $31.99 (1 item) Image\r\n   says:&quot;Wait for a lower price!&quot;\r\n - 13 sec $27.99 (1 item) Image\r\n   says:&quot;Bet you can do better!&quot;\r\n - 16 sec $1.99 (0 item) Image says:&quot;You\r\n   would be nuts to pay us something for\r\n   nothing!&quot;\r\n - 21 sec $4.99 (two items)  Image\r\n   says:&quot;Thats getting better!&quot;\r\n - 24 sec $4.99 (tres itemos) Image\r\n   says:&quot;It doesn&#39;t get any better than\r\n   that!&quot;\r\n - 26 sec $8.99 (2 items)  Image\r\n   says:&quot;Bet you can do better!&quot;\r\n\r\nrepeat....\r\n\r\non a gradually tightening cycle that will lengthen the time the correct &quot;$4.99 (tres itemos)&quot; is displayed\r\n\r\n\r\nIf the bot hits refresh then the cycle restarts. If the user, misses and selects the wrong # of items / price -- decide if you want to let them buy at that price. \r\n\r\nIf they &quot;overspend&quot; for example, they pay $24.99 for 3 items and woot was only going to charge them $4.99 for 3 items then include a coupon for $20 off their next woot purchase. \r\n\r\n**Goal #3: Don&#39;t hassle the &#39;normal&#39; users with any tasks to complete to prove they&#39;re human.**\r\n\r\nYou are making a logical fallacy here. You are assuming that any Turing test (http://en.wikipedia.org/wiki/Turing_test ) has to be irritating. This is not true! \r\n\r\n\r\nHere are some ideas:\r\n\r\n 1. Create a game. The reward for playing the game is a $5 off coupon on the next order.\r\n 2. Pair up 2 random users and have them chat with each other. Each user is told to answer 2 questions to the other user : &quot;Ask what color is the your hair ?&quot; and &quot;What are you going to do next weekend?&quot; Some users get paired with a woot random sentence generator.  Each user is then asked if the other user is a human. If a user says the woot random sentence generator is human then reply &quot;No I am not and may be you are from Mars as well. Do you want to try again?&quot;\r\n 3. Simple flash game that requires the user to maneuver through an obstacle course to get a discount coupon.\r\n 4. Ask what city they are in. The reverse geo-code the ip address to see if they are close to being correct.\r\n 5. Ask silly questions - &quot;Do you think John McCain is a great president?&quot; &quot;Whose picture is on your driver&#39;s license?&quot;\r\n\r\nOnly ask 3 times since all you really want to do is slow down the script kidees.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234508382, "answer_id": 544999, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234508382, "body_markdown": "**What about the [NoBot Control][1] from the ASP.net AJAX control toolkit?**\r\n\r\nIt does some automated javascript request and timing tricks to prevent bots from accessing the site with NO user interaction.\r\n\r\nSorry if this doesn&#39;t meet some requirement, i&#39;ll just have to call &lt;br/&gt;\r\ntl;dr &gt;D\r\n\r\n\r\n  [1]: http://www.asp.net/AJAX/AjaxControlToolkit/Samples/NoBot/NoBot.aspx"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234509982, "answer_id": 545051, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234509982, "body_markdown": "Turn certain parts of the page into images so the bots can&#39;t understand them.  \r\n\r\nFor example create small images of the integers 0-9, the dollar sign, and the decimal point.  Cache the images on the client&#39;s computer when the page loads... then display the price using images chosen via code running server-side.  Most human users won&#39;t notice the difference and the bots won&#39;t know the prices of any items."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234509988, "answer_id": 545052, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234509988, "body_markdown": "**My Opinion as a longtime WOOTer**\r\n\r\nI would be happy to have a CAPTCHA on ordering, ***turned on only for the BOC***.  I think most wooters would agree.  Plus, 99.9% of the time you don&#39;t even get to the order screen because it sells out so fast, so hardly anybody would even know!!\r\n\r\nIf you make the CAPTCHA a really hard math problem, I&#39;ll be able to finally explain to my mom the practical benefit of so many years of studying math."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234510443, "answer_id": 545063, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234510443, "body_markdown": "I don&#39;t see why IP address filtering HAS to be prohibitively expensive. With IIS you can build an ISAPI filter to do this in native code. I am sure apache has similar interfaces. Using the IP address of the client, you can write a simple rate-limiter for HTTP requests that does not depend on a banned list or other such nonsense. \r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234514181, "answer_id": 545189, "path": "stack.django.answer", "score": 20, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1234514181, "body_markdown": "So the problem really seems to be:  the bots want their &quot;bag &#39;o crap&quot; because it has a high perceived value at a low perceived price.  You sometimes offer this item and the bots lurk, waiting to see if it&#39;s available and then they buy the item.\r\n\r\nSince it seems like the bot owners are making a profit (or potentially making a profit), the trick is to make this unprofitable for them by *encouraging* them to buy the crap.\r\n\r\nFirst, *always* offer the &quot;bag &#39;o crap&quot;.\r\n\r\nSecond, make sure that crap is usually crap.\r\n\r\nThird, rotate the crap frequently.\r\n\r\nSimple, no?\r\n\r\nYou&#39;ll need a permanent &quot;why is our crap sometimes crap?&quot; link next to the offer to explain to humans what&#39;s going on.\r\n\r\nWhen the bot sees that there&#39;s crap and the crap is automatically purchased, the recipient is going to be awfully upset that they&#39;ve paid $10 for a broken toothpick.  And then an empty trash bag.  And then some dirt from the bottom of your shoe.\r\n\r\nIf they buy enough of this crap in a relatively short period of time (and you have large disclaimers all over the place explaining why you&#39;re doing this), they&#39;re going to lose a fair &quot;bag &#39;o cash&quot; on your &quot;bag &#39;o crap&quot;.  Even human intervention on their part (checking to ensure that the crap isn&#39;t crap) can fail if you rotate the crap often enough.  Heck, maybe the bots will notice and not buy anything that&#39;s been in the rotation for too short a time, but that means the humans will buy the non-crap.\r\n\r\nHeck, your regular customers might be so amused that you can turn this into a huge marketing win.  Start posting how much of the &quot;crap&quot; carp is being sold.  People will come back just to see how hard the bots have been bitten.\r\n\r\n&lt;strong&gt;Update:&lt;/strong&gt;  I expect that you might get a few calls up front with people complaining.  I don&#39;t think you can stop that entirely.  However, if this kills the bots, you can always stop it and restart it later."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234516804, "answer_id": 545305, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234516804, "body_markdown": "1. Tarpit. Limiting page views to 1 per second won&#39;t bother human users.\r\n2. Links via JavaScript. Simple bots don&#39;t dig that. \r\n   as of usability, statistics show, that less then 1% of users doesn&#39;t use JS.\r\n  2a. hard-core version of above. Links in Flash. \r\n3. parameters stored in session, rather then in query string. Most bot are stateless.\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234518889, "answer_id": 545399, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234518889, "body_markdown": "Never thought I&#39;d recommend flash for anything, but what about flash?  Let your server send down asynchronous, encrypted content to the flash file signaling if it&#39;s deal time or not.  As long as the response is the same size deal or no deal, the bot can&#39;t tell which it is.\r\n\r\nAt a more general level, you need to focus on the resources a human plus a browser have that a scripted bot doesn&#39;t and take advantage of things that are easy for humans/browsers and hard for bots.  Captcha is obviously a simplistic attempt at doing this, but doesn&#39;t suit your site as you say.  Flash would weed out a ton of bots, leaving only the (slower) ones that drive a real browser.  The solution could be much simpler than captcha if it just requires the user to click in the right spot.  \r\n\r\nTake advantage of humans&#39; massively parallel image processing power!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234529764, "answer_id": 545808, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234529764, "body_markdown": "Make scanning the site expensive.  \r\n  \r\nThere is no way I know that can keep a bot out of your site. I even know a service, where there are humans that scan sites for you. How would you handle that?    \r\n\r\n  The worst thing for bots is, when a site changes. After a while it gets to expensive or to boring to keep the bot running. There might be updates on the your site that look like a new product, but actually are not. If you update unregularly and undpredictable things are getting realy hard to the bot.\r\n  \r\nBanning IPs might be a countermeasure, as long as it is a known IP. The offender needs to use a proxy. The proxies I know work well, but slow you down a lot."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234533795, "answer_id": 546037, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234533795, "body_markdown": "My thoughts (I haven&#39;t checked all the others, so I don&#39;t know if it&#39;s novel)\r\n\r\n**Dealing with swarming:**\r\n\r\n1. Convert the front-page matter for each day&#39;s stuff to be a flash/flex object. \r\n - Yes, some people will complain, but we&#39;re looking for the common case here, not the ideal.\r\n - You should also randomize the name of your flash objects, so they aren&#39;t in any predictable pattern of names.\r\n\r\n2. Using Akamai or another CDN, deploy this flash object in advance to the outside world.  Akamai produces what appears to be random URLs, so it makes it hard to predict.  \r\n3. When it is time for a new sale, you just have to change your URL locally to refer to the appropriate object at Akamai, and people will go fetch the flash object from them to discover if the deal is a BoC or not.\r\n\r\nEnd-of-the-day - you now have Akamai handling your swarms of midnight traffic\r\n \r\n**Dealing with auto-buy**\r\n\r\n1. Each of the flash objects you create can have lots and lots of content hidden inside - images, links, arbitrary ids, including &#39;bag of crap&#39; in a thousand places.   you should be able to obfuscate the flash as well.\r\n2. When the flash object &quot;goes live&quot;, people will start to attack it.  But there are so many false positives that a simple string scan is useless - they&#39;ll have to simulate running the flash locally.  \r\n3. But the flash doesn&#39;t write text. It draws lines and shapes.  Shapes in different colors, all connected to timers that make them appear and disappear at different times.\r\n - If you&#39;ve seen the Colbert Report, you know how the intro has hundreds of words describing Colbert.   Imagine something like that for your intro, which will always include Bag O Crap.  \r\n - Now, imagine that the intro takes an arbitrary amount of time - sometimes a few seconds, sometimes as long as a minute or more (make it funny)\r\n - Meanwhile, &quot;Bag O Crap&quot; is constantly showing up, but again, clearly as part of the intro.\r\n - Finally, the actual deal of the day is revealed, with an active &#39;shimmer&#39; effect that makes it difficult for any single snapshot of the canvas to reveal the actual product name.  This is floating above an animated background that still says &#39;bag O crap&#39; and is constantly in motion\r\n - again, all of this is handled with lines and shapes, not with text strings\r\n\r\nEnd result - your hacker is forced to take lots of image snapshots of the deal, figure out how to separate all the false positives and identify the actual deal.  Meanwhile, humans just look at it, and between eye fatigue and our ability to fill in gaps in the text, we can read the deal as is.\r\n\r\n\r\nThis won&#39;t work forever, but it would work for a while.\r\n\r\n\r\n\r\nAnother idea is to simply restrict people from buying BoCs unless they&#39;ve bought something before with that account, and to never let them buy a BoC again.   \r\n\r\n\r\n\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234534948, "answer_id": 546093, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1234534948, "body_markdown": "I agree with the poster above who said about sometimes selling really &#39;crap&#39; bags of crap.\r\n\r\nYou appear to have come up with a business model which is serverly limited by the technology through which you are trying to deliver it.  Yet like most tech minded individuals (not a crticism, after all that is the what this site is for) you are trying to come up with a technical solution.  BUT THIS IS A BUSINESS PROBLEM.  This is being caused by a failure in the technology, but that does not mean that technology is the answer.  And most all solutions that anyone comes up with (and there will be many options) will in the end by bypassed by those determined to &#39;auto-buy&#39; (for want of a better short description) your &#39;bags of crap&#39;.\r\n\r\nIMHO you are asking the wrong people the wrong question and you are going to waste a lot of time and resource on the wrong solution."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234536269, "answer_id": 546181, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234536269, "body_markdown": " 1. Identify bots via IP or a suit of other mechanisms.\r\n \r\n 2. Always serve those identified as bots the normal front page.\r\n\r\nReal people falsely identified as bots will not get the specials, but they won&#39;t notice anyway.\r\n\r\nBot owners won&#39;t realize you&#39;ve identified them, so they will stop adapting their scripts."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234539692, "answer_id": 546400, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234539692, "body_markdown": "My solution is a combination of marketing changes and technology changes. \r\n\r\nCurrently the technical side of sellng portion of bags of crap promotions are handled as a normal woot sale. The sale starts, people race to buy, all items are sold. The same statistcal charts used for daily sales are used bag of crap sales.\r\n\r\nThere are several market goals involved:\r\n\r\n - Get customers to visit the site once every day (impluse purchasing). The possiblility of a seeing a bag of crap sale is the reason/reward. \r\n - Network/viral/gossipy effect where a customer sees a bag of crap sale is on they will IM/EMail/Telephone their friends.\r\n - There is also what I&#39;d call general &quot;good will&quot;. Woot is a really cool place because it occasionally rewards its customers with amazing sales (bag of crap that included a flat panel tv)... AND its done in a fair &quot;first comes first served&quot; manner.\r\n\r\nThe first 2 seem to be the most important. The sheer number of visitors has an effect on how fast normal deals sell (or sell out). New customers have traditionally been attracted pretty much by word of mouth, and having customers sending their friends to woot.com is a win.\r\n\r\nSo... my solution is to change the promotion delivery into more of a lottery. \r\n\r\nOccasionally users can do something fun to see if they are eligable for a bag of crap. The something fun could be a silly flash game along the lines of &quot;punch the monkey&quot; or Orbitz mini-puts, baseball, hockey. The goal here is game that a bot can&#39;t script so some considerable care will be needed. The goal is also not to only award bag of crap to game winners... but to all game players. \r\n\r\nThe technical core of the game is that at the end of the game a request is made to a server that does an &quot;instant lottery&quot; to determine if the user has won a bag of crap sale opportunity. The server request will need to include something calculated by the game itself (roughly speaking &quot;hash cash&quot;... a complex, CPU cycle consuming, calculation, and hopefully one that is difficult to reproduce). This is to prevent a bot from repeatedly entering the lottery just be querying the lottery server/service.\r\n\r\nThe game itself can change over time. You can do special event games for halloween, christmas, valinties, easter, etc. There&#39;s lots of room for fun marketing ideas that can match woot&#39;s &quot;wootiness&quot;.\r\n\r\nIf the user wins they can purchase N bags of crap (in a time limited window)... but they can also send N friends a time limited invitation to purchase a bag of crap (good for 24 hours). This provides a super strong network effect... customers will definately tell their friends. Or you could also do it as &quot;buy 1 give 1&quot;... let customers buy up to a total of N but force every second one to be shipped to a friend. The key here is to make the network/gossip effect an full fledged part... help the customer tell the world about the wonderfulness of woot.\r\n\r\nThe promotional material arounnd bag of crap sales concept will also need to be revamped. The graphs of how quickly a bag of crap sold out are no longer relevant. Something along the lines how frequently through the month people had the opportunity to purchase. How many people told their friends. The marterials should subtley emphasize the point that a daily woot visit is a good idea.\r\n\r\nYou can also promote the heck out of why bag of crap sales are changing. Especially that you hired the best bag of crap consultants available for free.\r\n\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234544656, "answer_id": 546761, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234544656, "body_markdown": "Honestly, I think your best solution is to make items during a Woot-Off only be visible to logged in users, and limit each logged-in user to one home page refresh every 500ms or so.  (Or possibly make only a picture of the item be visible to unauthenticated users during a Woot-Off, and make sure you don&#39;t always use the same picture for Random Crap.)  I think Woot users would be willing to accept this if you sell it as a measure to help them get their Bowls of Creaminess, and you can also point out that it&#39;ll help them check out quicker.  Anything else--even using captchas--is subject to your typical arms race."}, {"tags": [], "down_vote_count": 1, "creation_date": 1234550909, "answer_id": 547190, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1234550909, "body_markdown": "Build a better bot\r\n------------------\r\n\r\nThe market place is telling you something. They want to get that bag o crap. So rather than fight the scripts (RIAA v file-sharing anyone?) Build a better bot.\r\n\r\nOffer everyone an installed app that is just as good or better than anything a script kidee could put together. The user installs *your* branded app and every time the bag of crap is offered. The app will automatically try to buy it. If the current b-o-c is missed, the app has a &quot;ticket&quot; to give it a better chance for the next b-o-c sale. So if a user rolls their own script, they don&#39;t get the &quot;ticket&quot; in line for the next b-o-c sale, while users of the official app do.\r\n\r\nBetween b-o-c sales the app can show the current item for sale. Hell, make it so that the user can tell the woot app to look for &quot;memory sticks&quot;\r\n\r\nWho will build their own script, when the official woot b-o-c+ script app is just as good or not better?\r\n\r\nAdditionally, woot gets another way of connecting to the customer.\r\n\r\nYour customers are telling you what they want."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234551361, "answer_id": 547205, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234551361, "body_markdown": "Give the user a choice between the original price and a much higher price.\r\nYou will have to find some way to associate the buttons with their respective prices - colour, position, perhaps &quot;emotional connotation&quot; of the button - something difficult to programmatically determine but which only needs the user to connect a button to a price.\r\nEasy, intuitive and hassle free for the user, difficult and, more importantly, risky for the scripter - especially if you vary the method of association.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234553177, "answer_id": 547330, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1234553177, "body_markdown": "I&#39;m in agreement with OP here - no captcha&#39;s please - it&#39;s not a very woot way of doing things.\r\n\r\nFirstly set a few bot traps. I&#39;d mention BOC more often on the home page, to trap the bots into looking as bots aren&#39;t intelligent, so again wording different each time e.g. &quot;BOC complaints up!&quot; - so bots just scanning for keywords will get trapped.\r\n\r\nHowever, I think the real issue here is twofold, firstly the performance issues that you have need to be addressed, today it&#39;s bots causing a problem, but it indicates to me that there is a performance issue to be addressed.\r\n\r\nSecondly it&#39;s a business opportunity to shift some real crap at a profit. So I&#39;d keep with the overall woot style and state &quot;we check for bots. If we think you are a bot you will get a box of botcrap.&quot;\r\n\r\nThe bot checking would be done offline sometime after the sale has been made, using bot traps, IP numbers, cookies, sessions, browser strings etc. Do some serious analysis with the data that you&#39;ve got of purchasers to decide who gets botcrap. If you decide to ship botcrap - then you can free up some normal crap to sell to someone else.\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234556524, "answer_id": 547524, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1234556524, "body_markdown": "Some ideas:\r\n\r\n1. Simple: don&#39;t name it &quot;Random Crap.&quot;  Change the name of the item every time so that the bots will have a harder time identifying it.  They may still look for the $1.00 items, in which case I suggest occasionally selling $1 sticks of gum for a few minutes.  The $5 shipping should make it worth your while.\r\n\r\n2. Harder: don&#39;t make the users do anything extra - make the users&#39; computers do something extra.  Write a JavaScript function that performs an intensive calculation taking a good amount of processing power - say, the ten-millionth prime number - and have the user&#39;s computer calculate that value and pass it back before you accept the order (perhaps even to create the &quot;place order&quot; URL).  Change the function for every BoC so that bots can&#39;t pre-calculate and cache results (but so that you can).  The calculation overhead might just slow down the bots enough to keep them off your backs - if nothing else, it would slow the hits on your servers so that they could breathe.  You could also vary the depth of the calculation - ten-millionth prime versus hundred-millionth - at random so that the ordering process is no longer strictly first-come, first served, and to avoid penalizing customers with slower computers.\r\n\r\n - E\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234557101, "answer_id": 547558, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234557101, "body_markdown": "If you are willing to make javascript mandatory, you can use a [hashcash][1] scheme to require, for example, ~30 seconds worth of client-side computation for each request. (Of course that might be 5 min on an iPhone or 1 second on a botnet of 30 computers: a significant drawback.)\r\n\r\nYou can also make scraping more difficult by generating the page with (obfuscated) javascript or (gag) flash.\r\n\r\nYou can also troll for bots with invisible (via CSS and javascript) random crap links.\r\n\r\nYou can detect &#39;bot-like&#39; IP addresses (by rate and by visits to honeypot links) and redirect them to a special server (e.g. one with extra CC verification such as &#39;verified by visa&#39; -- or merely one with a captcha.)\r\n\r\nBut really, it&#39;s an arms race. :) And one you may very well have to eventually escalate even beyond captchas.\r\n\r\nWhich brings me to: Why not change from a first-come, first-serve model to a lottery model where bots don&#39;t have such a large advantage over real shoppers? \r\n\r\n\r\n  [1]: http://hashcash.org"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234601216, "answer_id": 548777, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234601796, "last_edit_date": 1234601796, "body_markdown": "Okay,  I have a couple of questions more than an answer because I have no experience with the technology to know if it could/would work or would help.\r\n\r\nWith the following goals:&lt;br&gt;\r\n   1. Sell the item to non-scripting humans.&lt;br&gt;\r\n   2. Keep the site running at a speed not slowed by bots.&lt;br&gt;\r\n   3. Don&#39;t hassle the &#39;normal&#39; users with any tasks to complete to prove they&#39;re human.&lt;br&gt;\r\n\r\nMy questions are:&lt;br&gt;\r\n-. Would a Flash application, or Java applet, or Silverlight or anything similar reduce the ease of screen scraping enough to decrease the impact of the bots?&lt;br&gt;\r\nI&#39;m curious if these are as wide open to external manipulation as typical javascript/html.\r\nWhile it is not standard for web development and may not be &#39;good&#39; from an SEO point of view, it sounds like search visibility isn&#39;t your problem if you have millions of users.  I believe that any of these could still offer a very good looking interface so your humans wouldn&#39;t be put off by the design.\r\n\r\n-. Could you put all of your information in an Image?  I&#39;ve never seen the part of woot you are referring too, but what I&#39;m suggesting is to place any text that a human needs to know in a human friendly image instead of a bot-friendly textbox.  \r\n\r\n\r\nOh, and to second something alluded to in some of the other responses.  Don&#39;t miss the big opportunity you have:\r\nYou have LOTS of Demand from Bots, and those people with Bots really buy right?  Do you still want their money?  (Cause if not, I&#39;ll take it.)\r\n\r\nDo these people with the Bots have any alternative to buy from you?  Separate out your bags of crap.\r\n\r\nHave a woot subsite built for bots, geared towards bots and let the scripters have lots of fun AND pay you money for it.  Sell them crap and let them challenge themselves against other scripters.  It&#39;s a whole separate market available to you.\r\n\r\nIf they have an alternative where they can win something AND get bragging rights about it, they might be a little less inclined to beat up on the little old human. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1234969277, "answer_id": 561414, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1234969277, "body_markdown": "Forgive me if this answer was already submitted.  There are a lot of answers to try to read &amp; understand all of them.  \r\n\r\nWhy couldn&#39;t you just **change your purchasing API** every once in a while?  Wouldn&#39;t that be completely transparent to the human users and pretty much kill most of the bot purchasers?\r\n\r\nOne implementation would be to change the names of the fields that the user has to fill in and submit on the page after hitting the &quot;I Want One&quot; button.  How many times a year do you actually sell BOC?  Not that often.  So this would not be a huge programming burden to have a different purchasing API programmed, tested and ready for use every time a BOC goes on sale.  \r\n\r\nJust make sure the bots that are using the old and incorrect API don&#39;t bring your server down.  Maybe host the BOC purchase API on a different server each time too.  That way the bots can bring down a server that is not actually being used by us human BOC purchasers."}, {"tags": [], "down_vote_count": 0, "creation_date": 1236418478, "answer_id": 621594, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1236418478, "body_markdown": "If I understand right, your biggest problem is with the screen scraping, not the automated purchase itself. \r\n\r\nIf so, your most effective step would be to defeat screen scraping by randomly encoding the page so that it look the same (kind of) but is always different at code level. (use hex codes, java encoding, pictures, change surrounding code structure...)\r\n\r\nThat would force them to constantly rewrite their scraping code and therefore make it that much more expensive for them to buy your &quot;crap&quot; automatically. If they can manage. They would probably continue to hit your website for a while until they realize they can&#39;t gain anything from it and drop it.\r\n\r\nThe downside of confusing the hell out of bots is that it will also confuse the hell out of search engine crawlers."}, {"tags": [], "down_vote_count": 0, "creation_date": 1242375486, "answer_id": 867548, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1242375486, "body_markdown": "use concurrent connection limiting per IP address via either iptables on the server (if it is Linux based) or use a dedicated &quot;router&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1245686097, "answer_id": 1027976, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1245686097, "body_markdown": "Just a side-remark: it seems to me that the problem is, that your user expected behaviour is very similar to a bot (come in big waves, unautheticated, click every button :)), so the Captcha might be the only turing test able to discern it :))."}, {"tags": [], "down_vote_count": 0, "creation_date": 1247378501, "answer_id": 1115393, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1247378501, "body_markdown": "You should have some record of the users who have purchased BOC most often, why not just ban those accounts or something. Sure legit users will be banned in this process but you are a business providing a product and if your are being abused by a group of users and such you have the right to refuse service to them. You have a lot of info on your users including paypal and bank accounts, you could ban those accounts forcing the bot users to get new accounts. Certainly I could come up with a script to buy BOC all the time or just download one from the net, but I have better morals than that. Never actually having successfully purchased BOC, I know the frustration of legit users who would like to receive a BOC in the hopes of getting a great deal. Perhaps instead of offering a BOC as an individual item  every once and awhile, you could just give it to random users every day. When they receive an item they get a little note and and an additional item saying they also received a BOC. Then the only way someone could get a BOC is if they legitimately purchased something that only an actual human would have wanted. There would be nothing better than purchasing a coffee maker or something and also receiving a 42&quot; tv or something in addition to your legitimate purchase. I think the majority of script kiddies would no longer be interested in your site if in order to get a BOC they would also have to commit to a purchase of more than 10 dollars."}, {"tags": [], "down_vote_count": 0, "creation_date": 1247405911, "answer_id": 1116062, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1247405911, "body_markdown": "Upfront caveats:  \r\n\r\nI&#39;m not script-literate; \r\nI haven&#39;t read many of the other comments here.  \r\n\r\nI stumbled on this from the Woot description this morning.  I thought a few comments from a moderate user of the woot sites (and two-time manual purchaser of BOCs) might be helpful.  \r\n\r\nWoot is in a unique position where it is *both* a commerce site and a destination with loyal users, and I understand the perceived delicacy of that balance.  But personally I feel your concern about &quot;negative user impact&quot; of a Crap-CAPCHA (&quot;CRAPCHA&quot; - somehow I doubt I&#39;m the first to make that gag) on users is way overstated.  As a user I&#39;d be happy to prove I&#39;m human.  And I trust Woot to make the process fun and interesting, integrating it into the overall experience. \r\n\r\nWill this lead to the &quot;arms race&quot; posited? I dunno, but it can only help.  If, say, key information to purchase is included in the product image or implied in the product description (in a different way each time), about the best a script could do would be to open a purchase page on detection of the C-word.  Actually, I think this is fine: you are still required to be on-line and first-come-first-served still applies -- Wootalyzer and similar tools just increase *awareness* rather than automating purchase while I sleep or work.  \r\n\r\nGood luck figuring this out, and keep up the good work.  \r\n\r\nJGM\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1247406988, "answer_id": 1116084, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1247406988, "body_markdown": "How about selling RSA keys to each user :) Hey, if they can do it for WoW, you guys should be able to do it.\r\n\r\nI expect a BoC for my answer ;)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1247422990, "answer_id": 1116599, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1247422990, "body_markdown": "Why not make the front page just an image-mapped graphic (all one picture with no labels, tags, etc)? Easy for a human to read and understand on pretty much any device, but impossible for a bot to interrogate. In essence make the whole front page a captcha. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1247426930, "answer_id": 1116707, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1247426930, "body_markdown": "You will make enough on the lights today to pay for the CAPTCHA program from Cisco!! We are all used to them from buying concert tickets and other things.. It only seems fair. The way it is being done today is upsetting some and raising questions about a lottery or sweeps. I am sure you checked into that before you tried but it is not really a fun way to buy BOCs... It takes all the excitement out!  \r\n\r\nGetting the BOC first or a great product even by being on the sight draws people to Woot. If there is no reason to hang around and buy tons of stuff you don&#39;t need while waiting for the random BOC to come up, sales will drop off. The CAPTCHA may be the only way to defeat these people and still keep the excitement of Woot.\r\n\r\nI was one of the first to get it to order a BOC last time and my first order was taken dumped with the million shipping and the second went through but was taken out of my account later. I was upset. I left Woot and have not purchased items like I did in the past on other days. I was willing to try it again, this way, today. I doubt I will in the future without a CAPTCHA for the fun stuff. \r\n\r\nThere are many sites trying to be like Woot. Of course they are not up to your level. I find myself reading a product description, not because I want the product, but I check in even for a laugh. I would hate to see someone come in with a fairer program and take away most of your business.\r\n\r\nJust my opinion. I know almost nothing about bots and computers since I am a nurse.. But my vote is to upgrade to the higher level... The guys with the bots would just have to get in line with the rest of us and that is the way it should be:)\r\nLori "}, {"tags": [], "down_vote_count": 0, "creation_date": 1247427483, "answer_id": 1116726, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1247427483, "body_markdown": "As for CAPTCHAing everyone, why not use the Google solution of only requiring CAPTCHAs from IPs you suspect as being bots, or even just users that hammer the site? I&#39;m sure asking someone for a CAPTCHA when they purchase isn&#39;t so bad if they&#39;ve been hammering the site anyway, its just about the same as staying up and hitting F5 repeatedly. That or maybe require a periodic CAPTCHA when hammering, say every hundred (maybe smaller?) or so refreshes, to stop alarm-bots from working. You need some sort of CAPTCHA to prevent botting, but you also need to account for the fact that your real users will act like bots."}, {"tags": [], "down_vote_count": 0, "creation_date": 1247428015, "answer_id": 1116750, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1247428015, "body_markdown": "As a long time (4 year) user of Woot.com and purchaser of a few bags of crap, amongst the many other items now taking up space in my garage, it seems that the solution should be part of the overall Woot theme.  \r\n\r\nUse captcha, but in a humorous vein.  Much like the $1,000,000 promotion, make a game out of identifying yourself as a person.  This has, in the past delayed the &quot;sell out&quot; of the BOC for a reasonable amount of time, while people, like myself, scramble to figure out the fairly simple but humorous puzzle to enter a coupon code.  \r\n\r\nAlso, while people complain endlessly about the server errors, they don&#39;t stop coming back.  Part of the thrill of a BOC in my opinion is the fact there are a gazillion other people trying to get one.  If the servers throw an error, or a funky page, it&#39;s a sign that I&#39;m somewhere in a group of way too many people trying to get one of 1500 products.\r\n\r\nIf you put as much creativity into building the puzzle, and it is original enough, it will delay the bots long enough to give everyone else a chance.  Incorporating a random word that&#39;s captured as a code, putting an interim page between the &quot;I Want One&quot; and the purchase page, that requires some uniquely human interaction, you&#39;ve stopped the bots there, until they figure out what needs to happen.  \r\n\r\n\u2022 You haven&#39;t implemented a boring, and sometimes painfully difficult to read captcha\r\n\u2022 you&#39;ve made the process more fun, \r\n\u2022 you&#39;ve reduced the load on the actual secure purchase server\r\n\u2022 You&#39;ll train the users that they will need to &quot;DO&quot; something to get a BOC\r\n\u2022 You&#39;ll stopped the bots at the interim page, delaying their purchases until most people have at least had a chance to try and figure out the funny, but not terribly difficult puzzle.  \r\n\u2022 Since being random is what a BOC is all about, a random, and changing puzzle/task would fit in simply with the whole pitch of a BOC.\r\n\r\nAs you experiment, the technology behind the interim page can become more advanced, with random information that can be captured for use in the purchase page.  Since\r\n\r\nI have purchased, without the aid of bots, or any scripts other than wootalyzer, which I feel is an acceptable aid, 7 BOC&#39;s since 5/31/05.  The best one, which I didn&#39;t get, was the Please Please Me BOC.  The B&amp;D batteries were also fun, but I&#39;m guessing didn&#39;t stump the bots, only frustrated the regular users.\r\n\r\nSometimes the best solution for a technology issue, isn&#39;t more technology.  \r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1247432089, "answer_id": 1116896, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1247432089, "body_markdown": "Two solutions, one high-tech, one low-tech.\r\n\r\nFirst the high-tech: The BOC offerings sell out in a seconds because bots get many of them in the first few milliseconds. So instead of trying to defeat the bots, sell them what they are scanning for: a bag of crap. Worthless crap, of course: bent paper clips and defiled photos of Rosie O&#39;Donnell. Then have built-in random delays on the server for a few seconds at a time. As the sale continues, the actual value of the product sold will increase while the sell price does not. That way the first buyers (bots in the first few milliseconds) will get something worth much less than what they paid (brown onion cakes?), the next buyers (slower bots or faster humans) will get something unspectacular but worth the purchase price (bought on consignment?), and the last buyers (almost all humans) will get something worth more than the purchase price (break out champagne?). That flat-screen TV might be in the very last BOC purchased.\r\n\r\nAnyone that waits too long will miss out, but at the same time anyone who buys too quickly will get hosed. The trick is to wait for some amount of time...but not too much. There&#39;s some luck involved, which is as it should be.\r\n\r\nThe low-tech solution would be to change up the name of the BOC to something humans can interpret but bots can&#39;t. Wineskin of excrement? Sack containing smelliness? Topologically flat surface adjacent to assorted goods? Never use the same name twice, use marginally different pictures, and explain in the product description what is actually being sold."}, {"tags": [], "down_vote_count": 0, "creation_date": 1247435847, "answer_id": 1117046, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1247436190, "last_edit_date": 1247436190, "body_markdown": "A potential solution to your particular problem (and not the general one) would be to require users to be signed in if they want to see the &#39;crap&#39;. Only display the crap prizes to users that happen to be logged in. All other items can remain viewable to non-logged in users as they always have been. Then your loyal users are given first priority to the crap.\r\n\r\nYou&#39;d obviously have to notify your users of this, perhaps with a notification that this is being done to increase the chances of real users finding the crap.\r\n\r\nIf your specific problem is bots harvesting for one particular type of item, then take the least restrictive alternative and only defend against that particular attack. This option would then prevent captchyas and the userability hit that you&#39;re concerned about.\r\n\r\nIf the bots log in and start spamming, you could force their log out and lock the account.\r\n\r\nIf they&#39;re only there to get the bag o&#39; crap, they will leave fairly quickly and your page won&#39;t be taking the massive hits. Forget the highly technical solutions."}, {"tags": [], "down_vote_count": 0, "creation_date": 1247445318, "answer_id": 1117316, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1247445318, "body_markdown": "2 things:\r\n\r\nserver layer solution: mod_evasive (if you use apache)\r\n\r\nhttp://www.zdziarski.com/projects/mod_evasive/\r\n\r\n\r\nfront layer solution: reverse captcha, or other non intrusive captcha\r\n\r\nhttp://www.ccs.uottawa.ca/webmaster/reverse-captcha.html\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1247453300, "answer_id": 1117540, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1247453300, "body_markdown": "What if you randomized or encrypted the form names and IDs, randomized the order of the form fields, and made the form labels a random captcha image, that&#39;d make a script attack a lot harder :-D"}, {"tags": [], "down_vote_count": 0, "creation_date": 1247453562, "answer_id": 1117548, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1247453562, "body_markdown": "Make the whole bloody page a CAPTCHA!&lt;br&gt;\r\nSorta like Sesame Street... eight of these things, don&#39;t belong here...\r\n\r\nPut 9 items, 9 HTML forms, 9 I WANT ONE buttons on the screen.&lt;br&gt;\r\n(9&#39;s just the number for the day... pick whatever number you want to make the layout still look good. 12 perhaps.  Maybe customize it some for the resolution of the loading browser...)\r\n\r\nAnd scramble them for each person.&lt;br&gt;\r\nMake sure the BOC has to be &quot;seen&quot; to know which one it is... of course this means the other 8 have to bee &quot;seen only&quot; also, to know they are NOT the item to buy.&lt;br&gt;\r\nMake sure you only use crazy-ass numbers to reference everything behind the scenes on the page&#39;s source.\r\nFine, so the BOT sees its BOC time... but it&#39;ll be a wild guess to pick the right HTML form to submit back for processing.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1247512125, "answer_id": 1121469, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1247512125, "body_markdown": "There is probably not a magic silver bullet that will take care of Bots, but a combination of these suggestions may help deter them, and reduce them to a more manageable number. &lt;br&gt;\r\nPlease let me know if you need any clarification on any of these suggestions:\r\n\r\n - Any images that depict the item should be either always the same image name (such as &quot;current_item.jpg&quot;) or should be a random name that changes for each request. The server should know what the current item is and will deliver the appropriate image. This image should also have a random amount of padding to reduce bots comparing image sizes. (Possibly changing a watermark of some sort to deter more sophisticated bots).\r\n - Remove the ALT text from these images. This text is usually redundant information that can be found elsewhere on the pages, or make them generic alt text (such as &quot;Current item image would be here&quot;).\r\n - The description could change each time a Bag of Crap comes up. It could rotate (randomly) between a number of different names: &quot;Random Crap&quot;, &quot;BoC&quot;, &quot;Crappy Crap&quot;, etc...\r\n - Woot could also offer more items at the &quot;Random Crap&quot; price, or have the price be a random amount between $0.95 and $1.05 (only change price once for each time the Crap comes up, not for each user, for fairness)\r\n - The Price, Description, and other areas that differentiate a BoC from other Woots could be images instead of text.  \r\n - These fields could also be Java (not javaScript) or Flash. While dependent on a third-party plug-in, it would make it more difficult for the bots to scrape your site in a useful manner.\r\n - Using a combination of Images, Java, Flash, and maybe other technologies would be another way to make it more difficult for the bots. This would be a little more difficult to manage, as administrators would have to know many different platforms.\r\n - There are other ways to obfuscate this information. Using a combination of client-side scripting (javascript, etc) and server-side obfuscation (random image names) would be the most likely way to do it without affecting the user experience. Adding some obfuscating Java and/or Flash, or similar would make it more difficult, while possibly minimally impacting some users. \r\n - Combine some of these tactics with some that were mentioned above: if a page is reloaded more than x times per minute, then change the image name (if you had a static image name suggested above), or give them a two minute old cached page. \r\n - There are some very sophisticated things you could do on the back end with user behavior tracking that might not take too much processing. You could off-load that work to a dedicated server to minimize the performance impact. Take some data from the request and send it to a dedicated server that can process that data. If it finds a suspected bot, based on its behavior, it can send a hook to another server (front end routing firewall, server, router, etc OR back-end web or content server) to add some additional security to these users. maybe add Java applets for these users, or require additional information from the user (do not pre-fill all fields in the order page, making a different field empty each time randomly, etc).\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1247594249, "answer_id": 1126983, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1247594249, "body_markdown": "Why dont you just change the name and picture of the BOC every time you offer it? It would become part of the fun of wooting to see the latest iteration of the BOC."}, {"tags": [], "down_vote_count": 0, "creation_date": 1255205550, "answer_id": 1548952, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1255205550, "body_markdown": "Create a simple ip firewall rule that blacklists the IP-address if you detect more than a max. number of requests coming in per second."}, {"tags": [], "down_vote_count": 0, "creation_date": 1256774105, "answer_id": 1640876, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1256774105, "body_markdown": "You are making this way to hard. I will probably kick myself since I just won a BOC from the site today with a bot site, but just put the RANDOM CRAP text in captchas on the site main page. The bots all look for the text &quot;RANDOM CRAP&quot;. So you basically just avoid triggering them in the first place. Anyone looking with their eyes will see that it says &quot;Random Crap&quot;. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1267874615, "answer_id": 2392299, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1267874615, "body_markdown": "A rather simple solution is to track the time difference between rendering the forms and getting the response: bots usually have extreme short response times of milliseconds, no user could do that; or extreme long response times of several hours.\r\n\r\nThere&#39;s a django snippet doing it, along with a more detailed description:\r\n\r\n[Alternative to Captchas (Without Human Interaction)][1]\r\n\r\n\r\n  [1]: http://www.djangosnippets.org/snippets/1092/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1274802362, "answer_id": 2906220, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1274802362, "body_markdown": "You know, if you published your RSS feed using pubsubhubbub, people wouldn&#39;t have to hit your web page over and over again to see the next thing in the Woot-off, they&#39;d just wait for it to show up on their Google Reader."}, {"tags": [], "down_vote_count": 1, "creation_date": 1291061699, "answer_id": 4307648, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1291061699, "body_markdown": "I have a solution that (probably) isn&#39;t listed (as I haven&#39;t read through all of the ones here just yet...)\r\n\r\nYou can track unique users through their browser&#39;s User Agent String. Essentially, by checking which information is available &#39;unique&#39; you&#39;d be able to get enough information to distinguish between different people (even on the same IP address).\r\n\r\nCheck out this article written by the [EFF][1]\r\nAs well as [this site][2] (also by the EFF) that will &#39;test&#39; your uniques just based on your `User Agent` from the browser.\r\n\r\nFor even better uniqueness, you&#39;d be able to do a comparison between the bits of information from the uniqueness AND the ip address to really get the possibilities down to the offenders/bots.\r\n\r\n-----\r\nalso checkout this [pdf from EFF][3]\r\n\r\n\r\n  [1]: http://www.eff.org/deeplinks/2010/01/tracking-by-user-agent\r\n  [2]: https://panopticlick.eff.org/\r\n  [3]: https://panopticlick.eff.org/browser-uniqueness.pdf"}, {"tags": [], "down_vote_count": 2, "creation_date": 1293418054, "answer_id": 4536348, "path": "stack.django.answer", "score": -2, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1293418054, "body_markdown": "how about using multiple order buttons (four or more). File-name them &quot;image1&quot; through &quot;image4&quot;, three are the same image visually (&quot;don&#39;t click here&quot;) and one reading &quot;click here&quot;. For each sale, randomly assign the image # for each option. Make them fairly large, so users would not accidentally click the wrong one. Images would be the same file size. Once a IP clicks a button, any button, they are taken to the appropriate web page (ordering process, or &quot;Oops, you clicked the wrong button&quot;) and given a 2-minute timeout from re-accessing the server."}, {"tags": [], "down_vote_count": 0, "creation_date": 1324421006, "answer_id": 8582930, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1324421006, "body_markdown": "for this purpose i use Cloudflare as it doesn&#39;t affect my site but blocks any malicious user with CAPTCHA automatically and gives you more features ."}, {"tags": [], "down_vote_count": 0, "creation_date": 1476080604, "answer_id": 39952339, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1476080604, "body_markdown": "I probably don&#39;t understand the problem fully, but this idea occurred to me. Use AJAX to draw and update the dynamic content at a fixed interval while making the full page deliberately slow to load using refresh.\r\n\r\nFor example, make the whole page take a full 15 seconds to draw the first time it is visited, after which dynamic content is automatically refreshed using AJAX after a set time of, say, 5 seconds. It would be a major disadvantage to do a full page reload. The page may regularly display new information (including ads), but a full page redraw using reload would be considerably slower.\r\n\r\nIt will be possible for script kiddies to figure out the AJAX query and automate it but, then, it would also be very easy to rate-limit those requests from the same IP. Since there is no typical method for a standard human user to initiate those requests from the browser, it would be obvious that high-rate requests to the AJAX URL from the same IP would be initiated by some form of automated system."}], "title": "Stopping scripters from slamming your website hundreds of times a second", "view_count": 84781, "answer_count": 129, "code_snippet": ["<code>&lt;form&gt;</code>"], "path": "stack.django"}, {"tags": ["git", "svn", "version-control"], "creation_date": 1222940825, "body_markdown": "I am starting a new distributed project. Should I use SVN or Git, and why?", "last_edit_date": 1365636885, "up_vote_count": 325, "link": "https://stackoverflow.com/questions/161541/should-i-use-svn-or-git", "_childDocuments_": [{"tags": [], "down_vote_count": 5, "creation_date": 1222940956, "answer_id": 161548, "path": "stack.django.answer", "score": 6, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1222940956, "body_markdown": "I would opt for SVN since it is more widely spread and better known.\r\n\r\nI guess, Git would be better for Linux user."}, {"tags": [], "down_vote_count": 0, "creation_date": 1222941151, "answer_id": 161559, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1222941151, "body_markdown": "Git is not natively supported under Windows, just yet. It is optimized for Posix systems. However running Cygwin or MinGW lets you run Git successful.\r\n\r\nNowadays I prefer Git over SVN, but it takes a while to get over the threshold if you come from CVS, SVN land."}, {"tags": [], "down_vote_count": 5, "creation_date": 1222941162, "answer_id": 161562, "path": "stack.django.answer", "score": 9, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1222942017, "last_edit_date": 1222942017, "body_markdown": "Definitely `svn`, since Windows is\u2014at best\u2014a second-class citizen in the world of `git` (see &lt;http://en.wikipedia.org/wiki/Git_(software)#Portability&gt; for more details).\r\n\r\nUPDATE: Sorry for the broken link, but I&#39;ve given up trying to get SO to work with URIs that contain parentheses. [link fixed now. -ed]"}, {"tags": [], "down_vote_count": 0, "creation_date": 1222941227, "answer_id": 161563, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1222941227, "body_markdown": "I would probably choose Git because I feel it&#39;s much more powerful than SVN. There are cheap Code Hosting services available which work just great for me - you don&#39;t have to do backups or any maintenance work - [GitHub][1] is the most obvious candidate.\r\n\r\nThat said, I don&#39;t know anything regarding the integration of Visual Studio and the different SCM systems. I imagine the integration with SVN to notably better.\r\n\r\n  [1]: http://www.github.com"}, {"tags": [], "down_vote_count": 1, "creation_date": 1222941325, "answer_id": 161568, "path": "stack.django.answer", "score": 7, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1320839586, "last_edit_date": 1320839586, "body_markdown": "The main point is, that Git is a distributed VCS and Subversion a centralized one. Distributed VCSs are a little bit more difficult to understand, but have many advantages. If you don&#39;t need this advantages, Subversion may the better choice.\r\n\r\nAnother question is tool-support. Which VCS is better supported by the tools you plan to use?\r\n\r\n**EDIT:** Three years ago I answered this way:\r\n&gt; And Git works on Windows at the moment only via Cygwin or [MSYS][1].\r\n&gt; Subversion supported Windows from the beginning. As the git-solutions\r\n&gt; for windows may work for you, there may be problems, as the most\r\n&gt; developers of Git work with Linux and didn&#39;t have portability in the\r\n&gt; mind from the beginning. At the moment I would prefer Subversion for\r\n&gt; development under Windows. In a few years this may be irrelevant.\r\n\r\nNow the world has changed a little bit. Git has a good implementation on windows now. Although I tested not thouroughly on windows (as I no longer use this system), I&#39;m quite confident, that all the major VCS (SVN, Git, Mercurial, Bazaar) have proper Windows-implementation now. This advantage for SVN is gone. The other points (Centralized vs. Distributed and the check for tool support) stay valid.\r\n\r\n\r\n  [1]: http://code.google.com/p/msysgit/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1222941341, "answer_id": 161571, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1222942053, "last_edit_date": 1222942053, "body_markdown": "May I expand on the question and ask if Git work well on MacOS?\r\n\r\nReply to Comments: Thanks for the news, I&#39;d been looking forward to trying it out. I&#39;ll install it at home on my Mac."}, {"tags": [], "down_vote_count": 9, "creation_date": 1222941352, "answer_id": 161572, "path": "stack.django.answer", "score": 252, "up_vote_count": 261, "is_accepted": false, "last_activity_date": 1432738674, "last_edit_date": 1432738674, "body_markdown": "SVN is one repo and lots of clients. Git is a repo with lots of client repos, each with a user. It&#39;s decentralised to a point where people can track their own edits locally without having to push things to an external server.\r\n\r\nSVN is designed to be more central where Git is based on each user having their own Git repo and those repos push changes back up into a central one. For that reason, Git gives individuals better local version control. \r\n\r\nMeanwhile you have the choice between [TortoiseGit](http://code.google.com/p/tortoisegit/), [GitExtensions](http://code.google.com/p/gitextensions/) (and if you host your &quot;central&quot; git-repository on github, their own [client \u2013 GitHub for Windows](http://windows.github.com/)).\r\n\r\nIf you&#39;re looking on getting out of SVN, you might want to evaluate [Bazaar][1] for a bit. It&#39;s one of the next generation of version control systems that have this distributed element. It isn&#39;t POSIX dependant like git so **there are native Windows builds** and it has some powerful open source brands backing it.\r\n\r\nBut you might not even need these sorts of features yet. Have a look at [the features, advantages and disadvantages of the distributed VCSes][2]. If you need more than SVN offers, consider one. If you don&#39;t, you might want to stick with SVN&#39;s (currently) superior desktop integration.\r\n\r\n\r\n  [1]: http://bazaar-vcs.org/\r\n  [2]: http://en.wikipedia.org/wiki/Distributed_revision_control"}, {"tags": [], "down_vote_count": 1, "creation_date": 1222941916, "answer_id": 161602, "path": "stack.django.answer", "score": 11, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1222941916, "body_markdown": "I would set up a Subversion repository. By doing it this way, individual developers can choose whether to use Subversion clients or Git clients (with `git-svn`). Using `git-svn` doesn&#39;t give you *all* the benefits of a full Git solution, but it does give individual developers a great deal of control over their own workflow.\r\n\r\nI believe it will be a relatively short time before Git works just as well on Windows as it does on Unix and Mac OS X (since you asked).\r\n\r\nSubversion has excellent tools for Windows, such as TortoiseSVN for Explorer integration and AnkhSVN for Visual Studio integration."}, {"tags": [], "down_vote_count": 1, "creation_date": 1222941977, "answer_id": 161606, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1222941977, "body_markdown": "SVN seems like a good choice under Windows, as pointed by other people.\r\n\r\nIf some of your developper wants to try GIT, it may always use GIT-SVN where the SVN repository is recreated in a GIT repository. Then he should be able to work locally with GIT and then use SVN to publish its changes to the main repository.\r\n"}, {"tags": [], "down_vote_count": 3, "creation_date": 1222942025, "answer_id": 161609, "path": "stack.django.answer", "score": 3, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1222942025, "body_markdown": "have you tried [Bzr][1]?\r\n\r\n\r\nIt&#39;s pretty good, connonical (the people who make Ubuntu) made it because they didn&#39;t like anything else on the market...\r\n\r\n  [1]: http://bazaar-vcs.org/"}, {"tags": [], "down_vote_count": 3, "creation_date": 1222942646, "answer_id": 161647, "path": "stack.django.answer", "score": 107, "up_vote_count": 110, "is_accepted": false, "last_activity_date": 1222942646, "body_markdown": "I have never understand this concept of &quot;git not being good on Windows&quot;; I develop exclusively under Windows and I have never had any problems with git.\r\n\r\nI would definitely recommend git over subversion; its simply so much more versatile and allows &quot;offline development&quot; in a way subversion never really could.  Its available on almost every platform imaginable and has more features than you&#39;ll probably ever use."}, {"tags": [], "down_vote_count": 1, "creation_date": 1222943558, "answer_id": 161681, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1222943558, "body_markdown": "You have to go with a DVCS, it is like a quantum leap in source management.  Personally I use [Monotone][1] and its sped up development time no end.  We are using it for Windows, Linux and Mac and it has been very stable.  I even have buildbot doing nightly builds of the project on each of the platforms.  \r\n\r\nDVCS while being distributed usually means you will create a central server just for people to push changes to and from.\r\n\r\n\r\n  [1]: http://monotone.ca"}, {"tags": [], "down_vote_count": 4, "creation_date": 1222943695, "answer_id": 161688, "path": "stack.django.answer", "score": 9, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1222943695, "body_markdown": "Not really answering your question but if you want the benefits of [Distributed Revision Control][1] - it sounds like you do - and you&#39;re using Windows I think you&#39;d be better off using [Mercurial][2] rather that Git as Mercurial has much better Windows support.  Mercurial does have a Mac port too.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Revision_control#Distributed_revision_control\r\n  [2]: http://www.selenic.com/mercurial/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1222946592, "answer_id": 161793, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1222946592, "body_markdown": "There is an interesting Video on YouTube about this. Its from Linus Torwalds himself: [Goolge Tech Talk: Linus Torvalds on git][1]\r\n\r\n\r\n  [1]: http://www.youtube.com/watch?v=4XpnKHJAok8"}, {"tags": [], "down_vote_count": 0, "creation_date": 1222947176, "answer_id": 161821, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1222947176, "body_markdown": "If your team is already familiar with version and source control softwares like cvs or svn, then, for a simple and small project (such as you claim it is), I would recommend you stick to SVN. I am really comfortable with svn, but for the current e-commerce project I am doing on django, I decided to work on git (I am using git in svn-mode, that is, with a centralised repo that I push to and pull from in order to collaborate with at least one other developer). The other developer is comfortable with SVN, and while others&#39; experiences may differ, both of us are having a really bad time embracing git for this small project. (We are both hardcore Linux users, if it matters at all.)\r\n\r\nYour mileage may vary, of course."}, {"tags": [], "down_vote_count": 0, "creation_date": 1222952695, "answer_id": 162141, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1222952695, "body_markdown": "The funny thing is:\r\nI host projects in Subversion Repos, but access them via the Git Clone command.\r\n\r\nPlease read [Develop with Git on a Google Code Project][1]\r\n\r\n&gt; Although Google Code natively speaks\r\n&gt; Subversion, you can easily use Git\r\n&gt; during development. Searching for &quot;git\r\n&gt; svn&quot; suggests this practice is\r\n&gt; widespread, and we too encourage you\r\n&gt; to experiment with it.\r\n\r\nUsing Git on a Svn Repository gives me benefits:\r\n\r\n 1. I can work *distributed* on several\r\n    machines, commiting and pulling from\r\n    and to them\r\n 1. I have a *central* `backup/public` svn repository for others to check out\r\n 1. And they are free to use Git for their own\r\n\r\n\r\n\r\n  [1]: http://google-opensource.blogspot.com/2008/05/develop-with-git-on-google-code-project.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1250007996, "answer_id": 1261491, "path": "stack.django.answer", "score": 36, "up_vote_count": 36, "is_accepted": false, "last_activity_date": 1250007996, "body_markdown": "2 key advantages of SVN that are rarely cited:\r\n\r\n1. Large file support. In addition to code, I use SVN to manage my home directory. SVN is the only VCS (distributed or not) that doesn&#39;t choke on my TrueCrypt files (please correct me if there&#39;s another VCS that handles 500MB+ files effectively). This is because diff comparisons are streamed (this is a very essential point). Rsync is unacceptable because it&#39;s not 2-way.\r\n\r\n2. Partial repository (subdir) checkout/checkin. Mercurial and bzr don&#39;t support this, and git&#39;s support is limited. This is bad in a team environment, but invaluable if I want to check something out on another computer from my home dir.\r\n\r\nJust my experiences.\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1269987447, "answer_id": 2549128, "path": "stack.django.answer", "score": 77, "up_vote_count": 79, "is_accepted": false, "last_activity_date": 1269988090, "last_edit_date": 1495541350, "body_markdown": "Here is a copy of an answer I made of [some duplicate question since then deleted][1] about Git vs. SVN (September 2009).\r\n\r\nBetter? Aside from the usual link [WhyGitIsBetterThanX][2], they are different:\r\n\r\none is a Central VCS based on cheap copy for branches and tags\r\nthe other (Git) is a distributed VCS based on a graph of revisions.\r\nSee also [Core concepts of VCS][3].\r\n\r\n---- \r\n\r\nThat first part generated some mis-informed comments pretending that the fundamental purpose of the two programs (SVN and Git) is the same, but that they have been implemented quite differently.  \r\nTo clarify the [fundamental difference between SVN and Git][4], let me rephrase:\r\n\r\n- SVN is the third implementation of a [**revision** control][5]: [RCS, then CVS and finally SVN][6] manage directories of versioned data. SVN offers VCS features (labeling and merging), but its tag is just a directory copy (like a branch, except you are not &quot;supposed&quot; to touch anything in a tag directory), and its merge is still complicated, currently based on meta-data added to remember what has already been merged.\r\n\r\n- Git is a **file content management** (a tool made to merge files), **evolved into a true Version Control System**, based on a DAG ([Directed Acyclic Graph][7]) of commits, where branches are part of the history of datas (and not a data itself), and where tags are a true meta-data.\r\n\r\nTo say they are not &quot;fundamentally&quot; different because you can achieve the same thing, resolve the same problem, is... plain false on so many levels.\r\n\r\n- if you have many complex merges, doing them with SVN will be longer and more error prone.\r\nif you have to create many branches, you will need to manage them and merge them, again much more easily with Git than with SVN, especially if a high number of files are involved (the speed then becomes important)\r\n- if you have partial merges for a work in progress, you will take advantage of the Git staging area (index) to commit only what you need, stash the rest, and move on on another branch.\r\n- if you need offline development... well with Git you are always &quot;online&quot;, with your own local repository, whatever the workflow you want to follow with other repositories.\r\n\r\n-----\r\n\r\nStill the comments on that old (deleted) answer insisted:\r\n\r\n&gt; VonC: You are confusing fundamental difference in implementation (the differences are very fundamental, we both clearly agree on this) with difference in purpose.  \r\nThey are both tools used for the same purpose: this is why many teams who&#39;ve formerly used SVN have quite successfully been able to dump it in favor of Git.  \r\nIf they didn&#39;t solve the same problem, this *substitutability* wouldn&#39;t exist.\r\n\r\n, to which I replied:\r\n\r\n&quot;substitutability&quot;... interesting term ([used in computer programming][8]).  \r\nOff course, Git is hardly a subtype of SVN.  \r\n\r\nYou may achieve the same technical features (tag, branch, merge) with both, but Git does not get in your way and **allow you to focus on the content of the files**, without thinking about the tool itself.\r\n\r\nYou certainly cannot (always) just replace SVN by Git &quot;without altering any of the desirable properties of that program (correctness, task performed, ...)&quot; (which is a reference to the aforementioned [substitutability definition][9]):\r\n\r\n- One is an extended revision tool, the other a true version control system.\r\n- One is suited small to medium monolithic project with simple merge workflow and (not too much) parallel versions. SVN is enough for that purpose, and you may not need all the Git features.\r\n- The other allows for medium to large projects based on multiple components ([one repo per component][10]), with large number of files to merges between multiple branches in a complex merge workflow, parallel versions in branches, retrofit merges, and so on. You could do it with SVN, but you are much better off with Git.  \r\nSVN simply can not manage any project of any size with any merge workflow. Git can.\r\n\r\nAgain, **their nature is fundamentally different** (which then leads to different implementation but that is not the point).  \r\nOne see revision control as directories and files, the other only see the content of the file (so much so that empty directories won&#39;t even register in Git!).  \r\n\r\nThe general end-goal might be the same, but you cannot use them in the same way, nor can you solve the same class of problem (in scope or complexity).  \r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/1438662/which-of-the-two-is-bettergit-or-svn\r\n  [2]: http://whygitisbetterthanx.com/\r\n  [3]: https://stackoverflow.com/questions/645008/what-are-the-basic-clearcase-concepts-every-developer-should-know/645771#645771\r\n  [4]: https://stackoverflow.com/questions/995636/popularity-of-git-mercurial-bazaar-vs-which-to-recommend/995799#995799\r\n  [5]: https://stackoverflow.com/questions/1056912/source-control-vs-revision-control/1056947#1056947\r\n  [6]: http://www.ibr.cs.tu-bs.de/kb/revision-control.html\r\n  [7]: http://en.wikipedia.org/wiki/Directed_acyclic_graph\r\n  [8]: http://en.wikipedia.org/wiki/Substitutability\r\n  [9]: http://en.wikipedia.org/wiki/Substitutability\r\n  [10]: https://stackoverflow.com/questions/984707/what-are-the-git-limits/984973#984973"}, {"tags": [], "down_vote_count": 1, "creation_date": 1289639537, "answer_id": 4171789, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1289728385, "last_edit_date": 1289728385, "body_markdown": "I have used SVN for a long time, but whenever I used Git, I felt that Git is much powerful, lightweight, and although a little bit of learning curve involved but is better than SVN.\r\n\r\nWhat I have noted is that each SVN project, as it grows, becomes a very big size project unless it is exported. Where as, GIT project (along with Git data) is very light weight in size.\r\n\r\nIn SVN, I&#39;ve dealt with developers from novice to experts, and the novices and intermediates seem to introduce File conflicts if they copy one folder from another SVN project in order to re-use it. Whereas, I think in Git, you just copy the folder and it works, because Git doesn&#39;t introduce .git folders in all its subfolders (as SVN does).\r\n\r\nAfter dealing alot with SVN since long time, I&#39;m finally thinking to move my developers and me to Git, since it is easy to collaborate and merge work, as well as one great advantage is that a local copy&#39;s changes can be committed as much desired, and then finally pushed to the branch on server in one go, unlike SVN (where we have to commit the changes from time to time in the repository on server).\r\n\r\nAnyone who can help me decide if I should really go with Git?\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1289640408, "answer_id": 4171841, "path": "stack.django.answer", "score": 24, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1335285175, "last_edit_date": 1335285175, "body_markdown": "After doing more research, and reviewing this link: https://git.wiki.kernel.org/articles/g/i/t/GitSvnComparison_cb82.html\r\n\r\n(Some extracts below):\r\n\r\n- It&#39;s incredibly fast.\r\nNo other SCM that I have used has been able to keep up with it, and I&#39;ve used a lot, including Subversion, Perforce, darcs, BitKeeper, ClearCase and CVS.\r\n- It&#39;s fully distributed.\r\nThe repository owner can&#39;t dictate how I work. I can create branches and commit changes while disconnected on my laptop, then later synchronize that with any number of other repositories.\r\n- Synchronization can occur over many media.\r\nAn SSH channel, over HTTP via WebDAV, by FTP, or by sending emails holding patches to be applied by the recipient of the message. A central repository isn&#39;t necessary, but can be used.\r\n- Branches are even cheaper than they are in Subversion.\r\nCreating a branch is as simple as writing a 41 byte file to disk. Deleting a branch is as simple as deleting that file.\r\n- Unlike Subversion branches carry along their complete history.\r\nwithout having to perform a strange copy and walk through the copy. When using Subversion I always found it awkward to look at the history of a file on branch that occurred before the branch was created. from #git: &lt;robinr&gt; spearce: I don&#39;t understand one thing about SVN in the page. I made a branch i SVN and browsing the history showed the whole history a file in the branch\r\n- Branch merging is simpler and more automatic in Git.\r\nIn Subversion you need to remember what was the last revision you merged from so you can generate the correct merge command. Git does this automatically, and always does it right. Which means there&#39;s less chance of making a mistake when merging two branches together.\r\n- Branch merges are recorded as part of the proper history of the\r\nrepository. If I merge two branches together, or if I merge a branch back into the trunk it came from, that merge operation is recorded as part of the repostory history as having been performed by me, and when. It&#39;s hard to dispute who performed the merge when it&#39;s right there in the log.\r\n- Creating a repository is a trivial operation:\r\nmkdir foo; cd foo; git init\r\nThat&#39;s it. Which means I create a Git repository for everything these days. I tend to use one repository per class. Most of those repositories are under 1 MB in disk as they only store lecture notes, homework assignments, and my LaTeX answers.\r\n- The repository&#39;s internal file formats are incredible simple.\r\nThis means repair is very easy to do, but even better because it&#39;s so simple its very hard to get corrupted. I don&#39;t think anyone has ever had a Git repository get corrupted. I&#39;ve seen Subversion with fsfs corrupt itself. And I&#39;ve seen Berkley DB corrupt itself too many times to trust my code to the bdb backend of Subversion.\r\n- Git&#39;s file format is very good at compressing data, despite\r\nit&#39;s a very simple format. The Mozilla project&#39;s CVS repository is about 3 GB; it&#39;s about 12 GB in Subversion&#39;s fsfs format. In Git it&#39;s around 300 MB.\r\n\r\nAfter reading all this, I&#39;m convinced that Git is the way to go (although a little bit of learning curve exists). I have used Git and SVN on Windows platforms as well.\r\n\r\nI&#39;d love to hear what others have to say after reading the above?"}, {"tags": [], "down_vote_count": 0, "creation_date": 1295620970, "answer_id": 4760076, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1295620970, "body_markdown": "It comes down to this:\r\n\r\nWill your development be linear? If so, you should stick with Subversion. \r\n\r\nIf on the other hand, your development will not be linear, which means that you will need to create branching for different changes, and then merging such changes back to the main development line (known to Git as the master branch) then Git will do MUCH more for you."}], "title": "Should I use SVN or Git?", "view_count": 269682, "answer_count": 21, "code_snippet": ["<code>git-svn</code>", "<code>git-svn</code>", "<code>backup/public</code>", "<code>svn</code>", "<code>git</code>", "<code>.svn</code>"], "path": "stack.django"}, {"tags": ["django", "django-templates"], "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1247201730, "answer_id": 1107757, "path": "stack.django.answer", "score": 7, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1247202302, "last_edit_date": 1247202302, "body_markdown": "You don&#39;t pass `n` itself, but rather `range(n)` [the list of integers from 0 to n-1 included], from your view to your template, and in the latter you do `{% for i in therange %}` (if you absolutely insist on 1-based rather than the normal 0-based index you can use `forloop.counter` in the loop&#39;s body;-).\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1247201840, "answer_id": 1107763, "path": "stack.django.answer", "score": 27, "up_vote_count": 29, "is_accepted": false, "last_activity_date": 1460508391, "last_edit_date": 1460508391, "body_markdown": "You can pass a binding of\r\n\r\n    {&#39;n&#39; : range(n) }\r\n\r\nto the template, then do\r\n\r\n    {% for i in n %}\r\n    ...\r\n    {% endfor %}\r\n\r\nNote that you&#39;ll get 0-based behavior (0, 1, ... n-1).\r\n\r\n(Updated for Python3 compatibility)"}, {"tags": [], "down_vote_count": 3, "creation_date": 1247202058, "answer_id": 1107777, "path": "stack.django.answer", "score": 79, "up_vote_count": 82, "is_accepted": false, "last_activity_date": 1247202058, "body_markdown": "Unfortunately, that&#39;s [not supported](http://code.djangoproject.com/ticket/5172) in the Django template language. There are a [couple](http://www.djangosnippets.org/snippets/779/)  of [suggestions](http://www.djangosnippets.org/snippets/1357/), but they seem a little complex. I would just put a variable in the context:\r\n\r\n    ...\r\n    render_to_response(&#39;foo.html&#39;, {..., &#39;range&#39;: range(10), ...}, ...)\r\n    ...\r\n\r\nand in the template:\r\n\r\n    {% for i in range %}\r\n         ...\r\n    {% endfor %}"}, {"tags": [], "down_vote_count": 3, "creation_date": 1266187848, "answer_id": 2263177, "path": "stack.django.answer", "score": 8, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1266187848, "body_markdown": "Just incase anyone else comes across this question\u2026 I&#39;ve created a template tag which lets you create a `range(...)`: http://www.djangosnippets.org/snippets/1926/\r\n\r\n&lt;pre&gt;\r\nAccepts the same arguments as the &#39;range&#39; builtin and creates a list containing\r\nthe result of &#39;range&#39;.\r\n\r\nSyntax:\r\n    {% mkrange [start,] stop[, step] as context_name %}\r\n\r\nFor example:\r\n    {% mkrange 5 10 2 as some_range %}\r\n    {% for i in some_range %}\r\n      {{ i }}: Something I want to repeat\\n\r\n    {% endfor %}\r\n\r\nProduces:\r\n    5: Something I want to repeat \r\n    7: Something I want to repeat \r\n    9: Something I want to repeat\r\n\r\n&lt;/pre&gt;"}, {"tags": [], "down_vote_count": 3, "creation_date": 1299782711, "answer_id": 5264251, "path": "stack.django.answer", "score": -3, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1299782711, "body_markdown": "If the number is coming from a model, I found this to be a nice patch to the model:\r\n\r\n    def iterableQuantity(self):\r\n        return range(self.quantity)"}, {"tags": [], "down_vote_count": 7, "creation_date": 1303500086, "answer_id": 5759160, "path": "stack.django.answer", "score": 309, "up_vote_count": 316, "is_accepted": false, "last_activity_date": 1346876555, "last_edit_date": 1346876555, "body_markdown": "I&#39;ve used a simple technique that works nicely for small cases with no special tags and no additional context.  Sometimes this comes in handy\r\n\r\n    {% for i in &quot;xxxxxxxxxxxxxxxxxxxx&quot; %}\r\n        {{ forloop.counter0 }}\r\n    {% endfor %}\r\n\r\nAdjust the length of &quot;xxxxxxxxxxxxxxxxxxxx&quot; according to your needs.  &quot;xxx&quot; to just do 3 iterations, etc.  "}, {"tags": [], "down_vote_count": 0, "creation_date": 1345001423, "answer_id": 11963767, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1345001423, "body_markdown": "You should use &quot;[slice][1]&quot; in template, a example like this:\r\n\r\nin views.py\r\n\r\n    contexts = {\r\n        &#39;ALL_STORES&#39;: Store.objects.all(),\r\n    }\r\n\r\n    return render_to_response(&#39;store_list.html&#39;, contexts, RequestContext(request, processors=[custom_processor]))\r\n\r\nin store_list.html:\r\n\r\n    &lt;ul&gt;\r\n    {% for store in ALL_STORES|slice:&quot;:10&quot; %}\r\n        &lt;li class=&quot;store_item&quot;&gt;{{ store.name }}&lt;/li&gt;\r\n    {% endfor %}\r\n    &lt;/ul&gt;\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/dev/ref/templates/builtins/#slice"}, {"tags": [], "down_vote_count": 0, "creation_date": 1349777535, "answer_id": 12797728, "path": "stack.django.answer", "score": 62, "up_vote_count": 62, "is_accepted": false, "last_activity_date": 1349777535, "body_markdown": "My take on this issue, i think is the nicest. I keep a my_filters.py on the templatetags directory. \r\n\r\n    @register.filter(name=&#39;times&#39;) \r\n    def times(number):\r\n        return range(number)\r\n\r\nAnd you would use like this:\r\n\r\n    {% load my_filters %}\r\n    {% for i in 15|times %}\r\n        &lt;li&gt;Item&lt;/li&gt;\r\n    {% endfor %}\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1358460724, "answer_id": 14389078, "path": "stack.django.answer", "score": 69, "up_vote_count": 69, "is_accepted": false, "last_activity_date": 1358460724, "body_markdown": "    {% with &#39;&#39;|center:n as range %}\r\n    {% for _ in range %}\r\n        {{ forloop.counter }}\r\n    {% endfor %}\r\n    {% endwith %}"}, {"tags": [], "down_vote_count": 0, "creation_date": 1368724613, "answer_id": 16593580, "path": "stack.django.answer", "score": 25, "up_vote_count": 25, "is_accepted": false, "last_activity_date": 1397426307, "last_edit_date": 1397426307, "body_markdown": "Maybe like this?\r\n\r\n    {% for i in &quot;x&quot;|rjust:&quot;100&quot; %}\r\n    ...\r\n    {% endfor %}"}, {"tags": [], "down_vote_count": 0, "creation_date": 1456202507, "answer_id": 35568978, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1456203165, "last_edit_date": 1456203165, "body_markdown": "This method supports all the functionality of the standard `range([start,] stop[, step])` function\r\n\r\n`&lt;app&gt;/templatetags/range.py`\r\n\r\n    from django import template\r\n    \r\n    register = template.Library()\r\n    \r\n\r\n    @register.filter(name=&#39;range&#39;)\r\n    def _range(_min, args=None):\r\n        _max, _step = None, None\r\n        if args:\r\n            if not isinstance(args, int):\r\n                _max, _step = map(int, args.split(&#39;,&#39;))\r\n            else:\r\n                _max = args\r\n        args = filter(None, (_min, _max, _step))\r\n        return range(*args)\r\n\r\n\r\nUsage:\r\n\r\n    {% load range %}\r\n\r\n    &lt;p&gt;stop 5\r\n    {% for value in 5|range %}\r\n    {{ value }}\r\n    {% endfor %}\r\n    &lt;/p&gt;\r\n    \r\n    &lt;p&gt;start 5 stop 10\r\n    {% for value in 5|range:10 %}\r\n    {{ value }}\r\n    {% endfor %}\r\n    &lt;/p&gt;\r\n    \r\n    &lt;p&gt;start 5 stop 10 step 2\r\n    {% for value in 5|range:&quot;10,2&quot; %}\r\n    {{ value }}\r\n    {% endfor %}\r\n    &lt;/p&gt;\r\n\r\n\r\nOutput\r\n\r\n    &lt;p&gt;stop 5\r\n    0 1 2 3 4\r\n    &lt;/p&gt;\r\n    \r\n    &lt;p&gt;start 5 stop 10\r\n    5 6 7 8 9\r\n    &lt;/p&gt;\r\n    \r\n    &lt;p&gt;start 5 stop 10 step 2\r\n    5 7 9\r\n    &lt;/p&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1467918980, "answer_id": 38253611, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1467918980, "last_edit_date": 1495542397, "body_markdown": "I tried very hard on this question, and I find the best answer here: \r\n(from https://stackoverflow.com/questions/5242866/how-to-loop-7-times-in-the-django-templates)\r\n\r\nYou can even access the idx!\r\n\r\nviews.py:\r\n\r\n    context[&#39;loop_times&#39;] = range(1, 8)\r\n\r\nhtml:\r\n\r\n    {% for i in loop_times %}\r\n            &lt;option value={{ i }}&gt;{{ i }}&lt;/option&gt;\r\n    {% endfor %}\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1473060034, "answer_id": 39325574, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1473060034, "body_markdown": "I&#39;m just taking the popular answer a bit further and making it more robust.  This lets you specify any start point, so 0 or 1 for example.  It also uses python&#39;s range feature where the end is one less so it can be used directly with list lengths for example.\r\n\r\n    @register.filter(name=&#39;range&#39;)\r\n    def filter_range(start, end):\r\n      return range(start, end)\r\n\r\nThen in your template just include the above template tag file and use the following:\r\n\r\n    {% for c in 1|range:6 %}\r\n    {{ c }}\r\n    {% endfor %}\r\n\r\nNow you can do 1-6 instead of just 0-6 or hard coding it.  Adding a step would require a template tag, this should cover more uses cases so it&#39;s a step forward."}, {"tags": [], "down_vote_count": 0, "creation_date": 1473890119, "answer_id": 39500253, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1473894857, "last_edit_date": 1473894857, "body_markdown": "You can use:\r\n`{% with &#39;&#39;|center: i as range %}`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1488212860, "answer_id": 42490786, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1488212860, "body_markdown": "This essentially requires a `range` function. A Django feature ticket was raised (https://code.djangoproject.com/ticket/13088) for this but closed as &quot;won&#39;t fix&quot; with the following comment.\r\n\r\n&gt; My impression of this idea is that it is trying to lead to programming in the template. If you have a list of options that need to be rendered, they should be computed in the view, not in the template. If that&#39;s as simple as a range of values, then so be it.\r\n\r\nThey have a good point - Templates are supposed to be very simple representations of the view. You should create the limited required data in the view and pass to the template in the context.\r\n"}], "creation_date": 1247201284, "body_markdown": "How do I write a numeric `for` loop in a Django template? I mean something like\r\n\r\n    for i = 1 to n", "title": "Numeric for loop in Django templates", "view_count": 148289, "up_vote_count": 171, "answer_count": 15, "link": "https://stackoverflow.com/questions/1107737/numeric-for-loop-in-django-templates", "code_snippet": ["<code>for</code>", "<code>for i = 1 to n\n</code>", "<code>{% for i in \"xxxxxxxxxxxxxxxxxxxx\" %}\n    {{ forloop.counter0 }}\n{% endfor %}\n</code>", "<code>{% for i in \"x\"|rjust:\"100\" %}</code>", "<code>...\nrender_to_response('foo.html', {..., 'range': range(10), ...}, ...)\n...\n</code>", "<code>{% for i in range %}\n     ...\n{% endfor %}\n</code>", "<code>{% with ''|center:n as range %}\n{% for _ in range %}\n    {{ forloop.counter }}\n{% endfor %}\n{% endwith %}\n</code>", "<code>@register.filter(name='times') \ndef times(number):\n    return range(number)\n</code>", "<code>{% load my_filters %}\n{% for i in 15|times %}\n    &lt;li&gt;Item&lt;/li&gt;\n{% endfor %}\n</code>", "<code>range(1, 16)</code>", "<code>from django.template import Library;register = Library()</code>", "<code>@register.filter(name='range') def filter_range(start, end):   return range(start, end)</code>", "<code>{% for i in 1|range:6 %}{% endfor %}</code>", "<code>try:  return range(number)  except:  return []</code>", "<code>{'n' : range(n) }\n</code>", "<code>{% for i in n %}\n...\n{% endfor %}\n</code>", "<code>range(n)</code>", "<code>{% for i in \"x\"|rjust:\"100\" %}\n...\n{% endfor %}\n</code>", "<code>range(...)</code>", "<code>n</code>", "<code>range(n)</code>", "<code>{% for i in therange %}</code>", "<code>forloop.counter</code>", "<code>contexts = {\n    'ALL_STORES': Store.objects.all(),\n}\n\nreturn render_to_response('store_list.html', contexts, RequestContext(request, processors=[custom_processor]))\n</code>", "<code>&lt;ul&gt;\n{% for store in ALL_STORES|slice:\":10\" %}\n    &lt;li class=\"store_item\"&gt;{{ store.name }}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code>", "<code>range([start,] stop[, step])</code>", "<code>&lt;app&gt;/templatetags/range.py</code>", "<code>from django import template\n\nregister = template.Library()\n\n\n@register.filter(name='range')\ndef _range(_min, args=None):\n    _max, _step = None, None\n    if args:\n        if not isinstance(args, int):\n            _max, _step = map(int, args.split(','))\n        else:\n            _max = args\n    args = filter(None, (_min, _max, _step))\n    return range(*args)\n</code>", "<code>{% load range %}\n\n&lt;p&gt;stop 5\n{% for value in 5|range %}\n{{ value }}\n{% endfor %}\n&lt;/p&gt;\n\n&lt;p&gt;start 5 stop 10\n{% for value in 5|range:10 %}\n{{ value }}\n{% endfor %}\n&lt;/p&gt;\n\n&lt;p&gt;start 5 stop 10 step 2\n{% for value in 5|range:\"10,2\" %}\n{{ value }}\n{% endfor %}\n&lt;/p&gt;\n</code>", "<code>&lt;p&gt;stop 5\n0 1 2 3 4\n&lt;/p&gt;\n\n&lt;p&gt;start 5 stop 10\n5 6 7 8 9\n&lt;/p&gt;\n\n&lt;p&gt;start 5 stop 10 step 2\n5 7 9\n&lt;/p&gt;\n</code>", "<code>context['loop_times'] = range(1, 8)\n</code>", "<code>{% for i in loop_times %}\n        &lt;option value={{ i }}&gt;{{ i }}&lt;/option&gt;\n{% endfor %}\n</code>", "<code>@register.filter(name='range')\ndef filter_range(start, end):\n  return range(start, end)\n</code>", "<code>{% for c in 1|range:6 %}\n{{ c }}\n{% endfor %}\n</code>", "<code>{% with ''|center: i as range %}</code>", "<code>range</code>", "<code>def iterableQuantity(self):\n    return range(self.quantity)\n</code>"], "path": "stack.django"}, {"tags": ["database", "postgresql", "primary-key"], "creation_date": 1225217301, "body_markdown": "I ran into the problem that my primary key sequence is not in sync with my table rows. \r\n\r\nThat is, when I insert a new row I get a duplicate key error because the sequence implied in the serial datatype returns a number that already exists.\r\n\r\nIt seems to be caused by import/restores not maintaining the sequence properly.", "last_edit_date": 1225218491, "up_vote_count": 375, "link": "https://stackoverflow.com/questions/244243/how-to-reset-postgres-primary-key-sequence-when-it-falls-out-of-sync", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1225217455, "answer_id": 244251, "path": "stack.django.answer", "score": 0, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1297358547, "last_edit_date": 1297358547, "body_markdown": "Try [reindex](http://www.postgresql.org/docs/7.3/static/sql-reindex.html).\r\n\r\nUPDATE: As pointed out in the comments, this was in reply to the original question."}, {"tags": [], "down_vote_count": 0, "creation_date": 1225217653, "answer_id": 244265, "path": "stack.django.answer", "score": 530, "up_vote_count": 530, "is_accepted": true, "last_activity_date": 1505873002, "last_edit_date": 1505873002, "body_markdown": "    -- Login to psql and run the following\r\n\r\n    -- What is the result?\r\n    SELECT MAX(id) FROM your_table;\r\n\r\n    -- Then run...\r\n    -- This should be higher than the last result.\r\n    SELECT nextval(&#39;your_table_id_seq&#39;);\r\n\r\n    -- If it&#39;s not higher... run this set the sequence last to your highest id. \r\n    -- (wise to run a quick pg_dump first...)\r\n\r\n    BEGIN;\r\n    -- protect against concurrent inserts while you update the counter\r\n    LOCK TABLE your_table IN EXCLUSIVE MODE;\r\n    -- Update the sequence\r\n    SELECT setval(&#39;your_table_id_seq&#39;, COALESCE((SELECT MAX(id)+1 FROM your_table), 1), false);\r\n    COMMIT;\r\n\r\n[Source - Ruby Forum][1]\r\n\r\n\r\n  [1]: http://www.ruby-forum.com/topic/64428#72333"}, {"tags": [], "down_vote_count": 3, "creation_date": 1228897751, "answer_id": 355416, "path": "stack.django.answer", "score": 30, "up_vote_count": 33, "is_accepted": false, "last_activity_date": 1418516626, "last_edit_date": 1418516626, "body_markdown": "&lt;strike&gt;ALTER SEQUENCE sequence_name RESTART WITH (SELECT max(id) FROM table_name);&lt;/strike&gt;\r\nDoesn&#39;t work.\r\n\r\nCopied from @tardate answer:\r\n\r\n    SELECT setval(pg_get_serial_sequence(&#39;table_name&#39;, &#39;id&#39;), MAX(id)) FROM table_name;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1284365968, "answer_id": 3698777, "path": "stack.django.answer", "score": 148, "up_vote_count": 148, "is_accepted": false, "last_activity_date": 1436550690, "last_edit_date": 1436550690, "body_markdown": "[`pg_get_serial_sequence`][1] can be used to avoid any incorrect assumptions about the sequence name. This resets the sequence in one shot:\r\n\r\n    SELECT pg_catalog.setval(pg_get_serial_sequence(&#39;table_name&#39;, &#39;id&#39;), (SELECT MAX(id) FROM table_name)+1);\r\n\r\nOr more concisely:\r\n\r\n    SELECT pg_catalog.setval(pg_get_serial_sequence(&#39;table_name&#39;, &#39;id&#39;), MAX(id)) FROM table_name;\r\n\r\nHowever this form can&#39;t handle empty tables correctly, since max(id) is null, and neither can you setval 0 because it would be out of range of the sequence. One workaround for this is to resort to the `ALTER SEQUENCE` syntax i.e.\r\n\r\n    ALTER SEQUENCE table_name_id_seq RESTART WITH 1;\r\n    ALTER SEQUENCE table_name_id_seq RESTART; -- 8.4 or higher\r\n\r\nBut `ALTER SEQUENCE` is of limited use because the sequence name and restart value cannot be expressions.\r\n\r\nIt seems the best all-purpose solution is to call `setval` with false as the 3rd parameter, allowing us to specify the &quot;next value to use&quot;:\r\n\r\n    SELECT setval(pg_get_serial_sequence(&#39;t1&#39;, &#39;id&#39;), coalesce(max(id),0) + 1, false) FROM t1;\r\n\r\nThis ticks all my boxes:\r\n\r\n 1. avoids hard-coding the actual sequence name \r\n 2. handles empty tables correctly \r\n 3. handles tables with existing data, and does not leave a\r\n    hole in the sequence\r\n\r\nFinally, note that `pg_get_serial_sequence` only works if the sequence is owned by the column. This will be the case if the incrementing column was defined as a `serial` type, however if the sequence was added manually it is necessary to ensure `ALTER SEQUENCE .. OWNED BY` is also performed. \r\n\r\ni.e. if `serial` type was used for table creation, this should all work:\r\n\r\n    CREATE TABLE t1 (\r\n      id serial,\r\n      name varchar(20)\r\n    );\r\n    \r\n    SELECT pg_get_serial_sequence(&#39;t1&#39;, &#39;id&#39;); -- returns &#39;t1_id_seq&#39;\r\n    \r\n    -- reset the sequence, regardless whether table has rows or not:\r\n    SELECT setval(pg_get_serial_sequence(&#39;t1&#39;, &#39;id&#39;), coalesce(max(id),0) + 1, false) FROM t1;\r\n\r\nBut if sequences were added manually:\r\n\r\n    CREATE TABLE t2 (\r\n      id integer NOT NULL,\r\n      name varchar(20)\r\n    );\r\n    \r\n    CREATE SEQUENCE t2_custom_id_seq\r\n        START WITH 1\r\n        INCREMENT BY 1\r\n        NO MINVALUE\r\n        NO MAXVALUE\r\n        CACHE 1;\r\n    \r\n    ALTER TABLE t2 ALTER COLUMN id SET DEFAULT nextval(&#39;t2_custom_id_seq&#39;::regclass);\r\n    \r\n    ALTER SEQUENCE t2_custom_id_seq OWNED BY t2.id; -- required for pg_get_serial_sequence\r\n    \r\n    SELECT pg_get_serial_sequence(&#39;t2&#39;, &#39;id&#39;); -- returns &#39;t2_custom_id_seq&#39;\r\n    \r\n    -- reset the sequence, regardless whether table has rows or not:\r\n    SELECT setval(pg_get_serial_sequence(&#39;t2&#39;, &#39;id&#39;), coalesce(max(id),0) + 1, false) FROM t1;\r\n\r\n  [1]: http://www.postgresql.org/docs/9.4/static/functions-info.html\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1285328430, "answer_id": 3786682, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1285328430, "body_markdown": "Reset all sequence from public\r\n\r\n    CREATE OR REPLACE FUNCTION &quot;reset_sequence&quot; (tablename text) RETURNS &quot;pg_catalog&quot;.&quot;void&quot; AS \r\n    $body$  \r\n      DECLARE \r\n      BEGIN \r\n      EXECUTE &#39;SELECT setval( &#39;&#39;&#39; \r\n      || tablename  \r\n      || &#39;_id_seq&#39;&#39;, &#39; \r\n      || &#39;(SELECT id + 1 FROM &quot;&#39; \r\n      || tablename  \r\n      || &#39;&quot; ORDER BY id DESC LIMIT 1), false)&#39;;  \r\n      END;  \r\n    $body$  LANGUAGE &#39;plpgsql&#39;;\r\n    \r\n    select sequence_name, reset_sequence(split_part(sequence_name, &#39;_id_seq&#39;,1)) from information_schema.sequences\r\n            where sequence_schema=&#39;public&#39;;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1288904593, "answer_id": 4101362, "path": "stack.django.answer", "score": 47, "up_vote_count": 47, "is_accepted": false, "last_activity_date": 1288904593, "body_markdown": "This will reset all sequences from public making no assumptions about table or column names. Tested on version 8.4\r\n\r\n \r\n\r\n    CREATE OR REPLACE FUNCTION &quot;reset_sequence&quot; (tablename text, columnname text, sequence_name text) RETURNS &quot;pg_catalog&quot;.&quot;void&quot; AS \r\n        \r\n        $body$  \r\n          DECLARE \r\n          BEGIN \r\n        \r\n          EXECUTE &#39;SELECT setval( &#39;&#39;&#39; || sequence_name  || &#39;&#39;&#39;, &#39; || &#39;(SELECT MAX(&#39; || columnname || &#39;) FROM &#39; || tablename || &#39;)&#39; || &#39;+1)&#39;;\r\n        \r\n        \r\n        \r\n          END;  \r\n        \r\n        $body$  LANGUAGE &#39;plpgsql&#39;;\r\n        \r\n        \r\n        select table_name || &#39;_&#39; || column_name || &#39;_seq&#39;, reset_sequence(table_name, column_name, table_name || &#39;_&#39; || column_name || &#39;_seq&#39;) from information_schema.columns where column_default like &#39;nextval%&#39;;\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1299704752, "answer_id": 5252155, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1299704752, "body_markdown": "The Klaus answer is the most useful, execpt for a little miss : you\r\nhave to add DISTINCT in select statement.\r\n\r\nHowever, if you are sure that no table+column names can be equivalent\r\nfor two different tables, you can also use :\r\n\r\n    select sequence_name, --PG_CLASS.relname, PG_ATTRIBUTE.attname\r\n           reset_sequence(split_part(sequence_name, &#39;_id_seq&#39;,1))\r\n    from PG_CLASS\r\n    join PG_ATTRIBUTE on PG_ATTRIBUTE.attrelid = PG_CLASS.oid\r\n    join information_schema.sequences\r\n         on information_schema.sequences.sequence_name = PG_CLASS.relname || &#39;_&#39; || PG_ATTRIBUTE.attname\r\n    where sequence_schema=&#39;public&#39;;\r\n\r\nwhich is an extension of user457226 solution for the case when\r\nsome interested column name is not &#39;ID&#39;.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1299707440, "answer_id": 5252617, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1325612731, "last_edit_date": 1325612731, "body_markdown": "before I had not tried yet the code : in the following I post\r\nthe version for the sql-code for both Klaus and user457226 solutions\r\nwhich worked on my pc [Postgres 8.3], with just some little adjustements\r\nfor the Klaus one and of my version for the user457226 one.\r\n\r\n\r\nKlaus solution :\r\n\r\n    drop function IF EXISTS rebuilt_sequences() RESTRICT;\r\n    CREATE OR REPLACE FUNCTION  rebuilt_sequences() RETURNS integer as\r\n    $body$\r\n      DECLARE sequencedefs RECORD; c integer ;\r\n      BEGIN\r\n        FOR sequencedefs IN Select\r\n          constraint_column_usage.table_name as tablename,\r\n          constraint_column_usage.table_name as tablename, \r\n          constraint_column_usage.column_name as columnname,\r\n          replace(replace(columns.column_default,&#39;&#39;&#39;::regclass)&#39;,&#39;&#39;),&#39;nextval(&#39;&#39;&#39;,&#39;&#39;) as sequencename\r\n          from information_schema.constraint_column_usage, information_schema.columns\r\n          where constraint_column_usage.table_schema =&#39;public&#39; AND \r\n          columns.table_schema = &#39;public&#39; AND columns.table_name=constraint_column_usage.table_name\r\n          AND constraint_column_usage.column_name = columns.column_name\r\n          AND columns.column_default is not null\r\n       LOOP    \r\n          EXECUTE &#39;select max(&#39;||sequencedefs.columnname||&#39;) from &#39; || sequencedefs.tablename INTO c;\r\n          IF c is null THEN c = 0; END IF;\r\n          IF c is not null THEN c = c+ 1; END IF;\r\n          EXECUTE &#39;alter sequence &#39; || sequencedefs.sequencename ||&#39; restart  with &#39; || c;\r\n       END LOOP;\r\n    \r\n       RETURN 1; END;\r\n    $body$ LANGUAGE plpgsql;\r\n    \r\n    select rebuilt_sequences();\r\n\r\nuser457226 solution :\r\n\r\n\r\n    --drop function IF EXISTS reset_sequence (text,text) RESTRICT;\r\n    CREATE OR REPLACE FUNCTION &quot;reset_sequence&quot; (tablename text,columnname text) RETURNS bigint --&quot;pg_catalog&quot;.&quot;void&quot;\r\n    AS\r\n    $body$\r\n      DECLARE seqname character varying;\r\n              c integer;\r\n      BEGIN\r\n        select tablename || &#39;_&#39; || columnname || &#39;_seq&#39; into seqname;\r\n        EXECUTE &#39;SELECT max(&quot;&#39; || columnname || &#39;&quot;) FROM &quot;&#39; || tablename || &#39;&quot;&#39; into c;\r\n        if c is null then c = 0; end if;\r\n        c = c+1; --because of substitution of setval with &quot;alter sequence&quot;\r\n        --EXECUTE &#39;SELECT setval( &quot;&#39; || seqname || &#39;&quot;, &#39; || cast(c as character varying) || &#39;, false)&#39;; DOES NOT WORK!!!\r\n        EXECUTE &#39;alter sequence &#39; || seqname ||&#39; restart with &#39; || cast(c as character varying);\r\n        RETURN nextval(seqname)-1;\r\n      END;\r\n    $body$ LANGUAGE &#39;plpgsql&#39;;\r\n    \r\n    select sequence_name, PG_CLASS.relname, PG_ATTRIBUTE.attname,\r\n           reset_sequence(PG_CLASS.relname,PG_ATTRIBUTE.attname)\r\n    from PG_CLASS\r\n    join PG_ATTRIBUTE on PG_ATTRIBUTE.attrelid = PG_CLASS.oid\r\n    join information_schema.sequences\r\n         on information_schema.sequences.sequence_name = PG_CLASS.relname || &#39;_&#39; || PG_ATTRIBUTE.attname || &#39;_seq&#39;\r\n    where sequence_schema=&#39;public&#39;;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1304979643, "answer_id": 5943183, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1304981768, "last_edit_date": 1304981768, "body_markdown": "These functions are fraught with perils when sequence names, column names, table names or schema names have funny characters such as spaces, punctuation marks, and the like.  I have written this:\r\n\r\n    CREATE OR REPLACE FUNCTION sequence_max_value(oid) RETURNS bigint\r\n    VOLATILE STRICT LANGUAGE plpgsql AS  $$\r\n    DECLARE\r\n     tabrelid oid;\r\n     colname name;\r\n     r record;\r\n     newmax bigint;\r\n    BEGIN\r\n     FOR tabrelid, colname IN SELECT attrelid, attname\r\n                   FROM pg_attribute\r\n                  WHERE (attrelid, attnum) IN (\r\n                          SELECT adrelid::regclass,adnum\r\n                            FROM pg_attrdef\r\n                           WHERE oid IN (SELECT objid\r\n                                           FROM pg_depend\r\n                                          WHERE refobjid = $1\r\n                                                AND classid = &#39;pg_attrdef&#39;::regclass\r\n                                        )\r\n              ) LOOP\r\n          FOR r IN EXECUTE &#39;SELECT max(&#39; || quote_ident(colname) || &#39;) FROM &#39; || tabrelid::regclass LOOP\r\n              IF newmax IS NULL OR r.max &gt; newmax THEN\r\n                  newmax := r.max;\r\n              END IF;\r\n          END LOOP;\r\n      END LOOP;\r\n      RETURN newmax;\r\n    END; $$ ;\r\n\r\nYou can call it for a single sequence by passing it the OID and it will return the highest number used by any table that has the sequence as default; or you can run it with a query like this, to reset all the sequences in your database:\r\n\r\n     select relname, setval(oid, sequence_max_value(oid))\r\n       from pg_class\r\n      where relkind = &#39;S&#39;;\r\n\r\nUsing a different qual you can reset only the sequence in a certain schema, and so on.  For example, if you want to adjust sequences in the &quot;public&quot; schema:\r\n\r\n    select relname, setval(pg_class.oid, sequence_max_value(pg_class.oid))\r\n      from pg_class, pg_namespace\r\n     where pg_class.relnamespace = pg_namespace.oid and\r\n           nspname = &#39;public&#39; and\r\n           relkind = &#39;S&#39;;\r\n\r\n\r\nNote that due to how setval() works, you don&#39;t need to add 1 to the result.\r\n\r\nAs a closing note, I have to warn that some databases seem to have defaults linking to sequences in ways that do not let the system catalogs have full information of them.  This happens when you see things like this in psql&#39;s \\d:\r\n\r\n    alvherre=# \\d baz\r\n                         Tabla &#171;public.baz&#187;\r\n     Columna |  Tipo   |                 Modificadores                  \r\n    ---------+---------+------------------------------------------------\r\n     a       | integer | default nextval((&#39;foo_a_seq&#39;::text)::regclass)\r\n\r\nNote that the nextval() call in that default clause has a ::text cast in addition to the ::regclass cast.  I *think* this is due to databases being pg_dump&#39;ed from old PostgreSQL versions.  What will happen is that the function sequence_max_value() above will ignore such a table.  To fix the problem, you can redefine the DEFAULT clause to refer to the sequence directly without the cast:\r\n\r\n    alvherre=# alter table baz alter a set default nextval(&#39;foo_a_seq&#39;);\r\n    ALTER TABLE\r\n\r\nThen psql displays it properly:\r\n\r\n    alvherre=# \\d baz\r\n                         Tabla &#171;public.baz&#187;\r\n     Columna |  Tipo   |             Modificadores              \r\n    ---------+---------+----------------------------------------\r\n     a       | integer | default nextval(&#39;foo_a_seq&#39;::regclass)\r\n\r\nAs soon as you&#39;ve fixed that, the function works correctly for this table as well as all others that might use the same sequence.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1315938159, "answer_id": 7406591, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1315938159, "body_markdown": "My version use the first one, with some error checking...\r\n\r\n\r\n    BEGIN;\r\n    CREATE OR REPLACE FUNCTION reset_sequence(_table_schema text, _tablename text, _columnname text, _sequence_name text)\r\n    RETURNS pg_catalog.void AS\r\n    $BODY$\r\n    DECLARE\r\n    BEGIN\r\n     PERFORM 1\r\n     FROM information_schema.sequences\r\n     WHERE\r\n      sequence_schema = _table_schema AND\r\n      sequence_name = _sequence_name;\r\n     IF FOUND THEN\r\n      EXECUTE &#39;SELECT setval( &#39;&#39;&#39; || _table_schema || &#39;.&#39; || _sequence_name  || &#39;&#39;&#39;, &#39; || &#39;(SELECT MAX(&#39; || _columnname || &#39;) FROM &#39; || _table_schema || &#39;.&#39; || _tablename || &#39;)&#39; || &#39;+1)&#39;;\r\n     ELSE\r\n      RAISE WARNING &#39;SEQUENCE NOT UPDATED ON %.%&#39;, _tablename, _columnname;\r\n     END IF;\r\n    END; \r\n    $BODY$\r\n     LANGUAGE &#39;plpgsql&#39;;\r\n    \r\n    SELECT reset_sequence(table_schema, table_name, column_name, table_name || &#39;_&#39; || column_name || &#39;_seq&#39;)\r\n    FROM information_schema.columns\r\n    WHERE column_default LIKE &#39;nextval%&#39;;\r\n    \r\n    DROP FUNCTION reset_sequence(_table_schema text, _tablename text, _columnname text, _sequence_name text) ;\r\n    COMMIT;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1352463969, "answer_id": 13308052, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1352463969, "body_markdown": "Putting it all together\r\n\r\n    CREATE OR REPLACE FUNCTION &quot;reset_sequence&quot; (tablename text) \r\n    RETURNS &quot;pg_catalog&quot;.&quot;void&quot; AS\r\n    $body$\r\n    DECLARE\r\n    BEGIN\r\n      EXECUTE &#39;SELECT setval( pg_get_serial_sequence(&#39;&#39;&#39; || tablename || &#39;&#39;&#39;, &#39;&#39;id&#39;&#39;),\r\n      (SELECT COALESCE(MAX(id)+1,1) FROM &#39; || tablename || &#39;), false)&#39;;\r\n    END;\r\n    $body$  LANGUAGE &#39;plpgsql&#39;;\r\n\r\nwill fix &#39;`id&#39;` sequence of the given table (as usually necessary with django for instance)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1359658843, "answer_id": 14633145, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1359658843, "body_markdown": "Reset all sequences, no assumptions about names except that the primary key of each table is &quot;id&quot;:\r\n\r\n    CREATE OR REPLACE FUNCTION &quot;reset_sequence&quot; (tablename text, columnname text)\r\n    RETURNS &quot;pg_catalog&quot;.&quot;void&quot; AS\r\n    $body$\r\n    DECLARE\r\n    BEGIN\r\n        EXECUTE &#39;SELECT setval( pg_get_serial_sequence(&#39;&#39;&#39; || tablename || &#39;&#39;&#39;, &#39;&#39;&#39; || columnname || &#39;&#39;&#39;),\r\n        (SELECT COALESCE(MAX(id)+1,1) FROM &#39; || tablename || &#39;), false)&#39;;\r\n    END;\r\n    $body$  LANGUAGE &#39;plpgsql&#39;;\r\n\r\n    select table_name || &#39;_&#39; || column_name || &#39;_seq&#39;, reset_sequence(table_name, column_name) from information_schema.columns where column_default like &#39;nextval%&#39;;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1369694313, "answer_id": 16781395, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1369694313, "body_markdown": "Ugly hack to fix it using some shell magic, not a great solution but might inspire others with similar problems :)\r\n\r\n    pg_dump -s &lt;DATABASE&gt; | grep &#39;CREATE TABLE&#39; | awk &#39;{print &quot;SELECT setval(#&quot; $3 &quot;_id_seq#, (SELECT MAX(id) FROM &quot; $3 &quot;));&quot;}&#39; | sed &quot;s/#/&#39;/g&quot; | psql &lt;DATABASE&gt; -f -"}, {"tags": [], "down_vote_count": 0, "creation_date": 1398866848, "answer_id": 23390399, "path": "stack.django.answer", "score": 25, "up_vote_count": 25, "is_accepted": false, "last_activity_date": 1513917973, "last_edit_date": 1513917973, "body_markdown": "The ***shortest and fastest*** way:\r\n\r\n    SELECT setval(&#39;tbl_tbl_id_seq&#39;, max(tbl_id)) FROM tbl;\r\n\r\n`tbl_id` being the [`serial`][1] column of table `tbl`, drawing from the sequence `tbl_tbl_id_seq` (which is the default automatic name).\r\n\r\nIf you don&#39;t know the name of the attached sequence (which doesn&#39;t have to be in default form), use [**`pg_get_serial_sequence()`**][2]:\r\n\r\n    SELECT setval(pg_get_serial_sequence(&#39;tbl&#39;, &#39;tbl_id&#39;), max(tbl_id)) FROM tbl;\r\n\r\nThere is no off-by-one error here. [Per documentation:][3]\r\n\r\n&gt; The two-parameter form sets the sequence&#39;s last_value field to the\r\n&gt; specified value and sets its `is_called` field to true, meaning that the\r\n&gt; **next `nextval` will advance the sequence** before returning a value.\r\n\r\nBold emphasis mine.\r\n\r\n### Concurrency\r\nThere is no defense against concurrent sequence activity or writes to the table in the above queries, yet. If that&#39;s relevant, you might ***lock the table*** in exclusive mode. It keeps concurrent transactions from writing a higher number while you are trying to get in sync. (It also temporarily blocks harmless writes not messing with the maximum number.)\r\n\r\nBut it does not take clients into account that may have fetched sequence numbers in advance without any locks on the main table, yet (which can happen). To allow for that, too, only *increase* the current value of the sequence, never decrease it. It may seem paranoid, but that&#39;s in accord with the nature of sequences and defending against concurrency issues.\r\n\r\n    BEGIN;\r\n\r\n    LOCK TABLE tbl IN EXCLUSIVE MODE;\r\n    \r\n    SELECT setval(&#39;tbl_tbl_id_seq&#39;, max(tbl_id))\r\n    FROM   tbl\r\n    HAVING max(tbl_id) &gt; (SELECT last_value FROM tbl_tbl_id_seq);\r\n    \r\n    COMMIT;\r\n\r\n\r\n  [1]: https://www.postgresql.org/docs/current/interactive/datatype-numeric.html#DATATYPE-SERIAL\r\n  [2]: https://www.postgresql.org/docs/current/interactive/functions-info.html#FUNCTIONS-INFO-CATALOG-TABLE\r\n  [3]: https://www.postgresql.org/docs/current/interactive/functions-sequence.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1400853120, "answer_id": 23831064, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1400853120, "body_markdown": "If you see this error when you are loading custom SQL data for initialization, another way to avoid this is:\r\n\r\nInstead of writing:\r\n\r\n    INSERT INTO book (id, name, price) VALUES (1 , &#39;Alchemist&#39; , 10),\r\n\r\nRemove the `id` (primary key) from initial data\r\n\r\n    INSERT INTO book (name, price) VALUES (&#39;Alchemist&#39; , 10),\r\n\r\nThis keeps the Postgres sequence in sync !"}, {"tags": [], "down_vote_count": 0, "creation_date": 1409567388, "answer_id": 25603776, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1448026835, "last_edit_date": 1448026835, "body_markdown": "This command for only change auto generated key sequence value in postgresql \r\n\r\n    ALTER SEQUENCE &quot;your_sequence_name&quot; RESTART WITH 0;\r\n\r\nIn place of zero you can put any number from which you want to restart sequence.\r\n\r\ndefault sequence name will `&quot;TableName_FieldName_seq&quot;`. For example, if your table name is `&quot;MyTable&quot;` and your field name is `&quot;MyID&quot;`, then your sequence name will be **`&quot;MyTable_MyID_seq&quot;`**.\r\n\r\nThis is answer is same as @murugesanponappan&#39;s answer, but there is a syntax error in his solution. you can not use sub query `(select max()...)` in `alter` command. So that either you have to use fixed numeric value or you need to use a variable in place of sub query."}, {"tags": [], "down_vote_count": 0, "creation_date": 1415363667, "answer_id": 26801367, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1415364487, "last_edit_date": 1415364487, "body_markdown": "Some really hardcore answers here, I&#39;m assuming it used to be really bad at around the time when this has been asked, since a lot of answers from here don&#39;t works for version 9.3. The [documentation](http://www.postgresql.org/docs/8.0/static/sql-createsequence.html) since version 8.0 provides an answer to this very question:\r\n\r\n    SELECT setval(&#39;serial&#39;, max(id)) FROM distributors;\r\n\r\nAlso, if you need to take care of case-sensitive sequence names, that&#39;s how you do it:\r\n\r\n    SELECT setval(&#39;&quot;Serial&quot;&#39;, max(id)) FROM distributors;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1432227666, "answer_id": 30380044, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1432230451, "last_edit_date": 1432230451, "body_markdown": "`SELECT setval...` makes JDBC bork, so here&#39;s a Java-compatible way of doing this:\r\n\r\n    -- work around JDBC &#39;A result was returned when none was expected.&#39;\r\n    -- fix broken nextval due to poorly written 20140320100000_CreateAdminUserRoleTables.sql\r\n    DO &#39;BEGIN PERFORM setval(pg_get_serial_sequence(&#39;&#39;admin_user_role_groups&#39;&#39;, &#39;&#39;id&#39;&#39;), 1 + COALESCE(MAX(id), 0), FALSE) FROM admin_user_role_groups; END;&#39;;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1433240143, "answer_id": 30593263, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1433240143, "body_markdown": "Recheck all sequence in public schema function\r\n\r\n    CREATE OR REPLACE FUNCTION public.recheck_sequence (\r\n    )\r\n    RETURNS void AS\r\n    $body$\r\n    DECLARE\r\n      _table_name VARCHAR;\r\n      _column_name VARCHAR;  \r\n      _sequence_name VARCHAR;\r\n    BEGIN\r\n      FOR _table_name IN SELECT tablename FROM pg_catalog.pg_tables WHERE schemaname = &#39;public&#39; LOOP\r\n      \tFOR _column_name IN SELECT column_name FROM information_schema.columns WHERE table_name = _table_name LOOP\r\n      \t\tSELECT pg_get_serial_sequence(_table_name, _column_name) INTO _sequence_name;\r\n            IF _sequence_name IS NOT NULL THEN \r\n    \t\t\tEXECUTE &#39;SELECT setval(&#39;&#39;&#39;||_sequence_name||&#39;&#39;&#39;, COALESCE((SELECT MAX(&#39;||quote_ident(_column_name)||&#39;)+1 FROM &#39;||quote_ident(_table_name)||&#39;), 1), FALSE);&#39;;\r\n            END IF;\r\n    \tEND LOOP;  \t\r\n      END LOOP;\r\n    END;\r\n    $body$\r\n    LANGUAGE &#39;plpgsql&#39;\r\n    VOLATILE\r\n    CALLED ON NULL INPUT\r\n    SECURITY INVOKER\r\n    COST 100;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1466103914, "answer_id": 37867461, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1466103914, "body_markdown": "This answer is a copy from mauro.\r\n\r\n    \t\r\n    drop function IF EXISTS rebuilt_sequences() RESTRICT;\r\n    CREATE OR REPLACE FUNCTION  rebuilt_sequences() RETURNS integer as\r\n    $body$\r\n      DECLARE sequencedefs RECORD; c integer ;\r\n      BEGIN\r\n        FOR sequencedefs IN Select\r\n          DISTINCT(constraint_column_usage.table_name) as tablename,\r\n          constraint_column_usage.column_name as columnname,\r\n          replace(replace(columns.column_default,&#39;&#39;&#39;::regclass)&#39;,&#39;&#39;),&#39;nextval(&#39;&#39;&#39;,&#39;&#39;) as sequencename\r\n          from information_schema.constraint_column_usage, information_schema.columns\r\n          where constraint_column_usage.table_schema =&#39;public&#39; AND \r\n          columns.table_schema = &#39;public&#39; AND columns.table_name=constraint_column_usage.table_name\r\n          AND constraint_column_usage.column_name = columns.column_name\r\n          AND columns.column_default is not null \r\n          ORDER BY sequencename\r\n       LOOP    \r\n          EXECUTE &#39;select max(&#39;||sequencedefs.columnname||&#39;) from &#39; || sequencedefs.tablename INTO c;\r\n          IF c is null THEN c = 0; END IF;\r\n          IF c is not null THEN c = c+ 1; END IF;\r\n          EXECUTE &#39;alter sequence &#39; || sequencedefs.sequencename ||&#39; minvalue &#39;||c ||&#39; start &#39; || c ||&#39; restart  with &#39; || c;\r\n       END LOOP;\r\n    \r\n       RETURN 1; END;\r\n    $body$ LANGUAGE plpgsql;\r\n    \r\n    select rebuilt_sequences();"}, {"tags": [], "down_vote_count": 0, "creation_date": 1469474951, "answer_id": 38575949, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1480341274, "last_edit_date": 1480341274, "body_markdown": "I suggest this solution found on postgres wiki. It updates all sequences of your tables.\r\n\r\n    SELECT &#39;SELECT SETVAL(&#39; ||\r\n           quote_literal(quote_ident(PGT.schemaname) || &#39;.&#39; || quote_ident(S.relname)) ||\r\n           &#39;, COALESCE(MAX(&#39; ||quote_ident(C.attname)|| &#39;), 1) ) FROM &#39; ||\r\n           quote_ident(PGT.schemaname)|| &#39;.&#39;||quote_ident(T.relname)|| &#39;;&#39;\r\n    FROM pg_class AS S,\r\n         pg_depend AS D,\r\n         pg_class AS T,\r\n         pg_attribute AS C,\r\n         pg_tables AS PGT\r\n    WHERE S.relkind = &#39;S&#39;\r\n        AND S.oid = D.objid\r\n        AND D.refobjid = T.oid\r\n        AND D.refobjid = C.attrelid\r\n        AND D.refobjsubid = C.attnum\r\n        AND T.relname = PGT.tablename\r\n    ORDER BY S.relname;\r\n\r\nHow to use(from postgres wiki):\r\n\r\n - Save this to a file, say &#39;reset.sql&#39;\r\n - Run the file and save its output in a way that doesn&#39;t include the usual headers, then run that output. Example:\r\n\r\nExample:\r\n\r\n    psql -Atq -f reset.sql -o temp\r\n    psql -f temp\r\n    rm temp\r\n\r\nOriginal article(also with fix for sequence ownership) [here][1]\r\n\r\n\r\n  [1]: https://wiki.postgresql.org/wiki/Fixing_Sequences"}, {"tags": [], "down_vote_count": 0, "creation_date": 1472741591, "answer_id": 39274810, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1472741591, "body_markdown": "To restart all sequence to 1 use:\r\n\r\n    -- Create Function\r\n    CREATE OR REPLACE FUNCTION &quot;sy_restart_seq_to_1&quot; (\r\n    \trelname TEXT\r\n    )\r\n    RETURNS &quot;pg_catalog&quot;.&quot;void&quot; AS\r\n    $BODY$\r\n    \r\n    DECLARE\r\n    \r\n    BEGIN\r\n    \tEXECUTE &#39;ALTER SEQUENCE &#39;||relname||&#39; RESTART WITH 1;&#39;;\r\n    END;\r\n    $BODY$\r\n    \r\n    LANGUAGE &#39;plpgsql&#39;;\r\n    \r\n    -- Use Function\r\n    SELECT \r\n    \trelname\r\n    \t,sy_restart_seq_to_1(relname)\r\n    FROM pg_class\r\n    WHERE relkind = &#39;S&#39;;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1492690204, "answer_id": 43519125, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1508751461, "last_edit_date": 1508751461, "body_markdown": "Yet another plpgsql - resets only if `max(att) &gt; then lastval`\r\n\r\n    do --check seq not in sync\r\n    $$\r\n    declare\r\n     _r record;\r\n     _i bigint;\r\n     _m bigint;\r\n    begin\r\n      for _r in (\r\n        SELECT relname,nspname,d.refobjid::regclass, a.attname, refobjid\r\n        FROM   pg_depend    d\r\n        JOIN   pg_attribute a ON a.attrelid = d.refobjid AND a.attnum = d.refobjsubid\r\n        JOIN pg_class r on r.oid = objid\r\n        JOIN pg_namespace n on n.oid = relnamespace\r\n        WHERE  d.refobjsubid &gt; 0 and  relkind = &#39;S&#39;\r\n       ) loop\r\n        execute format(&#39;select last_value from %I.%I&#39;,_r.nspname,_r.relname) into _i;\r\n        execute format(&#39;select max(%I) from %s&#39;,_r.attname,_r.refobjid) into _m;\r\n        if coalesce(_m,0) &gt; _i then\r\n          raise info &#39;%&#39;,concat(&#39;changed: &#39;,_r.nspname,&#39;.&#39;,_r.relname,&#39; from:&#39;,_i,&#39; to:&#39;,_m);\r\n          execute format(&#39;alter sequence %I.%I restart with %s&#39;,_r.nspname,_r.relname,_m+1);\r\n        end if;\r\n      end loop;\r\n    \r\n    end;\r\n    $$\r\n    ;\r\n\r\n\r\nalso commenting the line `--execute format(&#39;alter sequence` will give the list, not actually resetting the value"}, {"tags": [], "down_vote_count": 0, "creation_date": 1499274021, "answer_id": 44932074, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1499274021, "body_markdown": "I spent an hour trying to get djsnowsill&#39;s answer to work with a database using Mixed Case tables and columns, then finally stumbled upon the solution thanks to a comment from Manuel Darveau, but I thought I could make it a bit clearer for everyone:\r\n\r\n    CREATE OR REPLACE FUNCTION &quot;reset_sequence&quot; (tablename text, columnname text)\r\n    RETURNS &quot;pg_catalog&quot;.&quot;void&quot; AS\r\n    $body$\r\n    DECLARE\r\n    BEGIN\r\n    EXECUTE format(&#39;SELECT setval(pg_get_serial_sequence(&#39;&#39;%1$I&#39;&#39;, %2$L),\r\n            (SELECT COALESCE(MAX(%2$I)+1,1) FROM %1$I), false)&#39;,tablename,columnname);\r\n    END;\r\n    $body$  LANGUAGE &#39;plpgsql&#39;;\r\n\r\n    SELECT format(&#39;%s_%s_seq&#39;,table_name,column_name), reset_sequence(table_name,column_name) \r\n    FROM information_schema.columns WHERE column_default like &#39;nextval%&#39;;\r\nThis has the benefit of:\r\n\r\n - not assuming ID column is spelled a particular way.\r\n - not assuming all tables have a sequence.\r\n - working for Mixed Case table/column names. \r\n - using format to be more concise.\r\n\r\nTo explain, the problem was that &lt;code&gt;pg_get_serial_sequence&lt;/code&gt; takes strings to work out what you&#39;re referring to, so if you do:\r\n\r\n    &quot;TableName&quot; --it thinks it&#39;s a table or column\r\n    &#39;TableName&#39; --it thinks it&#39;s a string, but makes it lower case\r\n    &#39;&quot;TableName&quot;&#39; --it works!\r\nThis is achieved using &lt;code&gt;&#39;&#39;%1$I&#39;&#39;&lt;/code&gt; in the format string, &lt;code&gt;&#39;&#39;&lt;/code&gt; makes an apostrophe &lt;code&gt;1$&lt;/code&gt; means first arg, and &lt;code&gt;I&lt;/code&gt; means in quotes"}], "title": "How to reset postgres&#39; primary key sequence when it falls out of sync?", "view_count": 171465, "answer_count": 24, "code_snippet": ["<code>-- Login to psql and run the following\n\n-- What is the result?\nSELECT MAX(id) FROM your_table;\n\n-- Then run...\n-- This should be higher than the last result.\nSELECT nextval('your_table_id_seq');\n\n-- If it's not higher... run this set the sequence last to your highest id. \n-- (wise to run a quick pg_dump first...)\n\nBEGIN;\n-- protect against concurrent inserts while you update the counter\nLOCK TABLE your_table IN EXCLUSIVE MODE;\n-- Update the sequence\nSELECT setval('your_table_id_seq', COALESCE((SELECT MAX(id)+1 FROM your_table), 1), false);\nCOMMIT;\n</code>", "<code>SELECT setval('your_table_id_seq', coalesce((select max(id)+1 from your_table), 1), false);</code>", "<code>SELECT setval('your_seq',(SELECT GREATEST(MAX(your_id)+1,nextval('your_seq'))-1 FROM your_table))</code>", "<code>pg_get_serial_sequence</code>", "<code>SELECT pg_catalog.setval(pg_get_serial_sequence('table_name', 'id'), (SELECT MAX(id) FROM table_name)+1);\n</code>", "<code>SELECT pg_catalog.setval(pg_get_serial_sequence('table_name', 'id'), MAX(id)) FROM table_name;\n</code>", "<code>ALTER SEQUENCE</code>", "<code>ALTER SEQUENCE table_name_id_seq RESTART WITH 1;\nALTER SEQUENCE table_name_id_seq RESTART; -- 8.4 or higher\n</code>", "<code>ALTER SEQUENCE</code>", "<code>setval</code>", "<code>SELECT setval(pg_get_serial_sequence('t1', 'id'), coalesce(max(id),0) + 1, false) FROM t1;\n</code>", "<code>pg_get_serial_sequence</code>", "<code>serial</code>", "<code>ALTER SEQUENCE .. OWNED BY</code>", "<code>serial</code>", "<code>CREATE TABLE t1 (\n  id serial,\n  name varchar(20)\n);\n\nSELECT pg_get_serial_sequence('t1', 'id'); -- returns 't1_id_seq'\n\n-- reset the sequence, regardless whether table has rows or not:\nSELECT setval(pg_get_serial_sequence('t1', 'id'), coalesce(max(id),0) + 1, false) FROM t1;\n</code>", "<code>CREATE TABLE t2 (\n  id integer NOT NULL,\n  name varchar(20)\n);\n\nCREATE SEQUENCE t2_custom_id_seq\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\nALTER TABLE t2 ALTER COLUMN id SET DEFAULT nextval('t2_custom_id_seq'::regclass);\n\nALTER SEQUENCE t2_custom_id_seq OWNED BY t2.id; -- required for pg_get_serial_sequence\n\nSELECT pg_get_serial_sequence('t2', 'id'); -- returns 't2_custom_id_seq'\n\n-- reset the sequence, regardless whether table has rows or not:\nSELECT setval(pg_get_serial_sequence('t2', 'id'), coalesce(max(id),0) + 1, false) FROM t1;\n</code>", "<code>setval()</code>", "<code>nextval()</code>", "<code>CREATE OR REPLACE FUNCTION \"reset_sequence\" (tablename text, columnname text, sequence_name text) RETURNS \"pg_catalog\".\"void\" AS \n\n    $body$  \n      DECLARE \n      BEGIN \n\n      EXECUTE 'SELECT setval( ''' || sequence_name  || ''', ' || '(SELECT MAX(' || columnname || ') FROM ' || tablename || ')' || '+1)';\n\n\n\n      END;  \n\n    $body$  LANGUAGE 'plpgsql';\n\n\n    select table_name || '_' || column_name || '_seq', reset_sequence(table_name, column_name, table_name || '_' || column_name || '_seq') from information_schema.columns where column_default like 'nextval%';\n</code>", "<code>substring(column_default, '''(.*)''')</code>", "<code>table_name || '_' || column_name || '_seq'</code>", "<code>quote_literal</code>", "<code>quote_ident</code>", "<code>format</code>", "<code>substring(column_default from 'nextval\\(''(.+)''::regclass\\)')</code>", "<code>SELECT setval(pg_get_serial_sequence('table_name', 'id'), MAX(id)) FROM table_name;\n</code>", "<code>SELECT setval('tbl_tbl_id_seq', max(tbl_id)) FROM tbl;\n</code>", "<code>tbl_id</code>", "<code>serial</code>", "<code>tbl</code>", "<code>tbl_tbl_id_seq</code>", "<code>pg_get_serial_sequence()</code>", "<code>SELECT setval(pg_get_serial_sequence('tbl', 'tbl_id'), max(tbl_id)) FROM tbl;\n</code>", "<code>is_called</code>", "<code>nextval</code>", "<code>BEGIN;\n\nLOCK TABLE tbl IN EXCLUSIVE MODE;\n\nSELECT setval('tbl_tbl_id_seq', max(tbl_id))\nFROM   tbl\nHAVING max(tbl_id) &gt; (SELECT last_value FROM tbl_tbl_id_seq);\n\nCOMMIT;\n</code>", "<code>EXECUTE format()</code>", "<code>CREATE OR REPLACE FUNCTION \"reset_sequence\" (tablename text, columnname text)\nRETURNS \"pg_catalog\".\"void\" AS\n$body$\nDECLARE\nBEGIN\n    EXECUTE 'SELECT setval( pg_get_serial_sequence(''' || tablename || ''', ''' || columnname || '''),\n    (SELECT COALESCE(MAX(id)+1,1) FROM ' || tablename || '), false)';\nEND;\n$body$  LANGUAGE 'plpgsql';\n\nselect table_name || '_' || column_name || '_seq', reset_sequence(table_name, column_name) from information_schema.columns where column_default like 'nextval%';\n</code>", "<code>pg_get_serial_sequence(''\"' || tablename || '\"''</code>", "<code>EXECUTE format( 'SELECT setval(pg_get_serial_sequence(%L, %L), coalesce(max(id),0) + 1, false) FROM %I;', $1,$2,$1 );</code>", "<code>ALTER SEQUENCE \"your_sequence_name\" RESTART WITH 0;\n</code>", "<code>\"TableName_FieldName_seq\"</code>", "<code>\"MyTable\"</code>", "<code>\"MyID\"</code>", "<code>\"MyTable_MyID_seq\"</code>", "<code>(select max()...)</code>", "<code>alter</code>", "<code>CREATE OR REPLACE FUNCTION sequence_max_value(oid) RETURNS bigint\nVOLATILE STRICT LANGUAGE plpgsql AS  $$\nDECLARE\n tabrelid oid;\n colname name;\n r record;\n newmax bigint;\nBEGIN\n FOR tabrelid, colname IN SELECT attrelid, attname\n               FROM pg_attribute\n              WHERE (attrelid, attnum) IN (\n                      SELECT adrelid::regclass,adnum\n                        FROM pg_attrdef\n                       WHERE oid IN (SELECT objid\n                                       FROM pg_depend\n                                      WHERE refobjid = $1\n                                            AND classid = 'pg_attrdef'::regclass\n                                    )\n          ) LOOP\n      FOR r IN EXECUTE 'SELECT max(' || quote_ident(colname) || ') FROM ' || tabrelid::regclass LOOP\n          IF newmax IS NULL OR r.max &gt; newmax THEN\n              newmax := r.max;\n          END IF;\n      END LOOP;\n  END LOOP;\n  RETURN newmax;\nEND; $$ ;\n</code>", "<code> select relname, setval(oid, sequence_max_value(oid))\n   from pg_class\n  where relkind = 'S';\n</code>", "<code>select relname, setval(pg_class.oid, sequence_max_value(pg_class.oid))\n  from pg_class, pg_namespace\n where pg_class.relnamespace = pg_namespace.oid and\n       nspname = 'public' and\n       relkind = 'S';\n</code>", "<code>alvherre=# \\d baz\n                     Tabla \u00abpublic.baz\u00bb\n Columna |  Tipo   |                 Modificadores                  \n---------+---------+------------------------------------------------\n a       | integer | default nextval(('foo_a_seq'::text)::regclass)\n</code>", "<code>alvherre=# alter table baz alter a set default nextval('foo_a_seq');\nALTER TABLE\n</code>", "<code>alvherre=# \\d baz\n                     Tabla \u00abpublic.baz\u00bb\n Columna |  Tipo   |             Modificadores              \n---------+---------+----------------------------------------\n a       | integer | default nextval('foo_a_seq'::regclass)\n</code>", "<code>newmax := r.max::bigint;</code>", "<code>'SELECT max(' || quote_ident(colname) || ') FROM '</code>", "<code>'SELECT max(' || quote_ident(colname) || '::bigint) FROM '</code>", "<code>::bigint</code>", "<code>CREATE OR REPLACE FUNCTION \"reset_sequence\" (tablename text) RETURNS \"pg_catalog\".\"void\" AS \n$body$  \n  DECLARE \n  BEGIN \n  EXECUTE 'SELECT setval( ''' \n  || tablename  \n  || '_id_seq'', ' \n  || '(SELECT id + 1 FROM \"' \n  || tablename  \n  || '\" ORDER BY id DESC LIMIT 1), false)';  \n  END;  \n$body$  LANGUAGE 'plpgsql';\n\nselect sequence_name, reset_sequence(split_part(sequence_name, '_id_seq',1)) from information_schema.sequences\n        where sequence_schema='public';\n</code>", "<code>BEGIN;\nCREATE OR REPLACE FUNCTION reset_sequence(_table_schema text, _tablename text, _columnname text, _sequence_name text)\nRETURNS pg_catalog.void AS\n$BODY$\nDECLARE\nBEGIN\n PERFORM 1\n FROM information_schema.sequences\n WHERE\n  sequence_schema = _table_schema AND\n  sequence_name = _sequence_name;\n IF FOUND THEN\n  EXECUTE 'SELECT setval( ''' || _table_schema || '.' || _sequence_name  || ''', ' || '(SELECT MAX(' || _columnname || ') FROM ' || _table_schema || '.' || _tablename || ')' || '+1)';\n ELSE\n  RAISE WARNING 'SEQUENCE NOT UPDATED ON %.%', _tablename, _columnname;\n END IF;\nEND; \n$BODY$\n LANGUAGE 'plpgsql';\n\nSELECT reset_sequence(table_schema, table_name, column_name, table_name || '_' || column_name || '_seq')\nFROM information_schema.columns\nWHERE column_default LIKE 'nextval%';\n\nDROP FUNCTION reset_sequence(_table_schema text, _tablename text, _columnname text, _sequence_name text) ;\nCOMMIT;\n</code>", "<code>RAISE WARNING</code>", "<code>drop function IF EXISTS rebuilt_sequences() RESTRICT;\nCREATE OR REPLACE FUNCTION  rebuilt_sequences() RETURNS integer as\n$body$\n  DECLARE sequencedefs RECORD; c integer ;\n  BEGIN\n    FOR sequencedefs IN Select\n      constraint_column_usage.table_name as tablename,\n      constraint_column_usage.table_name as tablename, \n      constraint_column_usage.column_name as columnname,\n      replace(replace(columns.column_default,'''::regclass)',''),'nextval(''','') as sequencename\n      from information_schema.constraint_column_usage, information_schema.columns\n      where constraint_column_usage.table_schema ='public' AND \n      columns.table_schema = 'public' AND columns.table_name=constraint_column_usage.table_name\n      AND constraint_column_usage.column_name = columns.column_name\n      AND columns.column_default is not null\n   LOOP    \n      EXECUTE 'select max('||sequencedefs.columnname||') from ' || sequencedefs.tablename INTO c;\n      IF c is null THEN c = 0; END IF;\n      IF c is not null THEN c = c+ 1; END IF;\n      EXECUTE 'alter sequence ' || sequencedefs.sequencename ||' restart  with ' || c;\n   END LOOP;\n\n   RETURN 1; END;\n$body$ LANGUAGE plpgsql;\n\nselect rebuilt_sequences();\n</code>", "<code>--drop function IF EXISTS reset_sequence (text,text) RESTRICT;\nCREATE OR REPLACE FUNCTION \"reset_sequence\" (tablename text,columnname text) RETURNS bigint --\"pg_catalog\".\"void\"\nAS\n$body$\n  DECLARE seqname character varying;\n          c integer;\n  BEGIN\n    select tablename || '_' || columnname || '_seq' into seqname;\n    EXECUTE 'SELECT max(\"' || columnname || '\") FROM \"' || tablename || '\"' into c;\n    if c is null then c = 0; end if;\n    c = c+1; --because of substitution of setval with \"alter sequence\"\n    --EXECUTE 'SELECT setval( \"' || seqname || '\", ' || cast(c as character varying) || ', false)'; DOES NOT WORK!!!\n    EXECUTE 'alter sequence ' || seqname ||' restart with ' || cast(c as character varying);\n    RETURN nextval(seqname)-1;\n  END;\n$body$ LANGUAGE 'plpgsql';\n\nselect sequence_name, PG_CLASS.relname, PG_ATTRIBUTE.attname,\n       reset_sequence(PG_CLASS.relname,PG_ATTRIBUTE.attname)\nfrom PG_CLASS\njoin PG_ATTRIBUTE on PG_ATTRIBUTE.attrelid = PG_CLASS.oid\njoin information_schema.sequences\n     on information_schema.sequences.sequence_name = PG_CLASS.relname || '_' || PG_ATTRIBUTE.attname || '_seq'\nwhere sequence_schema='public';\n</code>", "<code>CREATE OR REPLACE FUNCTION \"reset_sequence\" (tablename text) \nRETURNS \"pg_catalog\".\"void\" AS\n$body$\nDECLARE\nBEGIN\n  EXECUTE 'SELECT setval( pg_get_serial_sequence(''' || tablename || ''', ''id''),\n  (SELECT COALESCE(MAX(id)+1,1) FROM ' || tablename || '), false)';\nEND;\n$body$  LANGUAGE 'plpgsql';\n</code>", "<code>id'</code>", "<code>SELECT setval('serial', max(id)) FROM distributors;\n</code>", "<code>SELECT setval('\"Serial\"', max(id)) FROM distributors;\n</code>", "<code>SELECT 'SELECT SETVAL(' ||\n       quote_literal(quote_ident(PGT.schemaname) || '.' || quote_ident(S.relname)) ||\n       ', COALESCE(MAX(' ||quote_ident(C.attname)|| '), 1) ) FROM ' ||\n       quote_ident(PGT.schemaname)|| '.'||quote_ident(T.relname)|| ';'\nFROM pg_class AS S,\n     pg_depend AS D,\n     pg_class AS T,\n     pg_attribute AS C,\n     pg_tables AS PGT\nWHERE S.relkind = 'S'\n    AND S.oid = D.objid\n    AND D.refobjid = T.oid\n    AND D.refobjid = C.attrelid\n    AND D.refobjsubid = C.attnum\n    AND T.relname = PGT.tablename\nORDER BY S.relname;\n</code>", "<code>psql -Atq -f reset.sql -o temp\npsql -f temp\nrm temp\n</code>", "<code>CREATE OR REPLACE FUNCTION public.recheck_sequence (\n)\nRETURNS void AS\n$body$\nDECLARE\n  _table_name VARCHAR;\n  _column_name VARCHAR;  \n  _sequence_name VARCHAR;\nBEGIN\n  FOR _table_name IN SELECT tablename FROM pg_catalog.pg_tables WHERE schemaname = 'public' LOOP\n    FOR _column_name IN SELECT column_name FROM information_schema.columns WHERE table_name = _table_name LOOP\n        SELECT pg_get_serial_sequence(_table_name, _column_name) INTO _sequence_name;\n        IF _sequence_name IS NOT NULL THEN \n            EXECUTE 'SELECT setval('''||_sequence_name||''', COALESCE((SELECT MAX('||quote_ident(_column_name)||')+1 FROM '||quote_ident(_table_name)||'), 1), FALSE);';\n        END IF;\n    END LOOP;   \n  END LOOP;\nEND;\n$body$\nLANGUAGE 'plpgsql'\nVOLATILE\nCALLED ON NULL INPUT\nSECURITY INVOKER\nCOST 100;\n</code>", "<code>-- Create Function\nCREATE OR REPLACE FUNCTION \"sy_restart_seq_to_1\" (\n    relname TEXT\n)\nRETURNS \"pg_catalog\".\"void\" AS\n$BODY$\n\nDECLARE\n\nBEGIN\n    EXECUTE 'ALTER SEQUENCE '||relname||' RESTART WITH 1;';\nEND;\n$BODY$\n\nLANGUAGE 'plpgsql';\n\n-- Use Function\nSELECT \n    relname\n    ,sy_restart_seq_to_1(relname)\nFROM pg_class\nWHERE relkind = 'S';\n</code>", "<code>max(att) &gt; then lastval</code>", "<code>do --check seq not in sync\n$$\ndeclare\n _r record;\n _i bigint;\n _m bigint;\nbegin\n  for _r in (\n    SELECT relname,nspname,d.refobjid::regclass, a.attname, refobjid\n    FROM   pg_depend    d\n    JOIN   pg_attribute a ON a.attrelid = d.refobjid AND a.attnum = d.refobjsubid\n    JOIN pg_class r on r.oid = objid\n    JOIN pg_namespace n on n.oid = relnamespace\n    WHERE  d.refobjsubid &gt; 0 and  relkind = 'S'\n   ) loop\n    execute format('select last_value from %I.%I',_r.nspname,_r.relname) into _i;\n    execute format('select max(%I) from %s',_r.attname,_r.refobjid) into _m;\n    if coalesce(_m,0) &gt; _i then\n      raise info '%',concat('changed: ',_r.nspname,'.',_r.relname,' from:',_i,' to:',_m);\n      execute format('alter sequence %I.%I restart with %s',_r.nspname,_r.relname,_m+1);\n    end if;\n  end loop;\n\nend;\n$$\n;\n</code>", "<code>--execute format('alter sequence</code>", "<code>select sequence_name, --PG_CLASS.relname, PG_ATTRIBUTE.attname\n       reset_sequence(split_part(sequence_name, '_id_seq',1))\nfrom PG_CLASS\njoin PG_ATTRIBUTE on PG_ATTRIBUTE.attrelid = PG_CLASS.oid\njoin information_schema.sequences\n     on information_schema.sequences.sequence_name = PG_CLASS.relname || '_' || PG_ATTRIBUTE.attname\nwhere sequence_schema='public';\n</code>", "<code>pg_dump -s &lt;DATABASE&gt; | grep 'CREATE TABLE' | awk '{print \"SELECT setval(#\" $3 \"_id_seq#, (SELECT MAX(id) FROM \" $3 \"));\"}' | sed \"s/#/'/g\" | psql &lt;DATABASE&gt; -f -\n</code>", "<code>INSERT INTO book (id, name, price) VALUES (1 , 'Alchemist' , 10),\n</code>", "<code>id</code>", "<code>INSERT INTO book (name, price) VALUES ('Alchemist' , 10),\n</code>", "<code>drop function IF EXISTS rebuilt_sequences() RESTRICT;\nCREATE OR REPLACE FUNCTION  rebuilt_sequences() RETURNS integer as\n$body$\n  DECLARE sequencedefs RECORD; c integer ;\n  BEGIN\n    FOR sequencedefs IN Select\n      DISTINCT(constraint_column_usage.table_name) as tablename,\n      constraint_column_usage.column_name as columnname,\n      replace(replace(columns.column_default,'''::regclass)',''),'nextval(''','') as sequencename\n      from information_schema.constraint_column_usage, information_schema.columns\n      where constraint_column_usage.table_schema ='public' AND \n      columns.table_schema = 'public' AND columns.table_name=constraint_column_usage.table_name\n      AND constraint_column_usage.column_name = columns.column_name\n      AND columns.column_default is not null \n      ORDER BY sequencename\n   LOOP    \n      EXECUTE 'select max('||sequencedefs.columnname||') from ' || sequencedefs.tablename INTO c;\n      IF c is null THEN c = 0; END IF;\n      IF c is not null THEN c = c+ 1; END IF;\n      EXECUTE 'alter sequence ' || sequencedefs.sequencename ||' minvalue '||c ||' start ' || c ||' restart  with ' || c;\n   END LOOP;\n\n   RETURN 1; END;\n$body$ LANGUAGE plpgsql;\n\nselect rebuilt_sequences();\n</code>", "<code>SELECT setval...</code>", "<code>-- work around JDBC 'A result was returned when none was expected.'\n-- fix broken nextval due to poorly written 20140320100000_CreateAdminUserRoleTables.sql\nDO 'BEGIN PERFORM setval(pg_get_serial_sequence(''admin_user_role_groups'', ''id''), 1 + COALESCE(MAX(id), 0), FALSE) FROM admin_user_role_groups; END;';\n</code>", "<code>CREATE OR REPLACE FUNCTION \"reset_sequence\" (tablename text, columnname text)\nRETURNS \"pg_catalog\".\"void\" AS\n$body$\nDECLARE\nBEGIN\nEXECUTE format('SELECT setval(pg_get_serial_sequence(''%1$I'', %2$L),\n        (SELECT COALESCE(MAX(%2$I)+1,1) FROM %1$I), false)',tablename,columnname);\nEND;\n$body$  LANGUAGE 'plpgsql';\n\nSELECT format('%s_%s_seq',table_name,column_name), reset_sequence(table_name,column_name) \nFROM information_schema.columns WHERE column_default like 'nextval%';\n</code>", "<code>pg_get_serial_sequence</code>", "<code>\"TableName\" --it thinks it's a table or column\n'TableName' --it thinks it's a string, but makes it lower case\n'\"TableName\"' --it works!\n</code>", "<code>''%1$I''</code>", "<code>''</code>", "<code>1$</code>", "<code>I</code>"], "path": "stack.django"}, {"tags": ["asp.net-mvc", "spark-view-engine", "viewengine", "razor"], "creation_date": 1253461667, "body_markdown": "I&#39;ve been searching on SO &amp; Google for a breakdown of the various View Engines available for ASP.NET MVC, but haven&#39;t found much more than simple high-level descriptions of what a view engine is.\r\n\r\nI&#39;m not necessarily looking for &quot;best&quot; or &quot;fastest&quot; but rather some real world comparisons of advantages / disadvantages of the major players (e.g. the default WebFormViewEngine, MvcContrib View Engines, etc.) for various situations.  I think this would be really helpful in determining if switching from the default engine would be advantageous for a given project or development group.\r\n\r\nHas anyone encountered such a comparison?\r\n", "last_edit_date": 1368051365, "up_vote_count": 328, "link": "https://stackoverflow.com/questions/1451319/asp-net-mvc-view-engine-comparison", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1253461763, "answer_id": 1451322, "path": "stack.django.answer", "score": 11, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1253461763, "body_markdown": "I know this doesn&#39;t really answer your question, but different View Engines have different purposes.  The [Spark View Engine][1], for example, aims to rid your views of &quot;tag soup&quot; by trying to make everything fluent and readable.\r\n\r\nYour best bet would be to just look at some implementations.  If it looks appealing to the intent of your solution, try it out.  You can mix and match view engines in MVC, so it shouldn&#39;t be an issue if you decide to not go with a specific engine.\r\n\r\n\r\n  [1]: http://dev.dejardin.org/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1253462590, "answer_id": 1451355, "path": "stack.django.answer", "score": 420, "up_vote_count": 421, "is_accepted": true, "last_activity_date": 1475688720, "last_edit_date": 1495541906, "body_markdown": "ASP.NET MVC View Engines (Community Wiki)\r\n--------------\r\n\r\nSince a comprehensive list does not appear to exist, let&#39;s start one here on SO. This can be of great value to the ASP.NET MVC community if people add their experience (esp. anyone who contributed to one of these).  Anything implementing `IViewEngine` (e.g. `VirtualPathProviderViewEngine`) is fair game here.  Just alphabetize new View Engines (leaving WebFormViewEngine and Razor at the top), and try to be objective in comparisons.\r\n\r\n----\r\n\r\n**[System.Web.Mvc.WebFormViewEngine][1]**\r\n\r\nDesign Goals:\r\n\r\n&gt; A view engine that is used to render a\r\n&gt; Web Forms page to the response.\r\n\r\nPros:\r\n\r\n- ubiquitous since it ships with ASP.NET MVC\r\n- familiar experience for ASP.NET developers\r\n- IntelliSense\r\n- can choose any language with a CodeDom provider (e.g. C#, VB.NET, F#, Boo, Nemerle)\r\n- on-demand compilation or [precompiled][2] views\r\n\r\nCons:\r\n\r\n- usage is confused by existence of &quot;classic ASP.NET&quot; patterns which no longer apply in MVC (e.g. ViewState PostBack)\r\n- can contribute to anti-pattern of &quot;tag soup&quot;\r\n- code-block syntax and strong-typing can get in the way\r\n- IntelliSense enforces style not always appropriate for inline code blocks\r\n- can be noisy when designing simple templates\r\n\r\nExample:\r\n\r\n    &lt;%@ Control Inherits=&quot;System.Web.Mvc.ViewPage&lt;IEnumerable&lt;Product&gt;&gt;&quot; %&gt;\r\n    &lt;% if(model.Any()) { %&gt;\r\n    &lt;ul&gt;\r\n        &lt;% foreach(var p in model){%&gt;\r\n        &lt;li&gt;&lt;%=p.Name%&gt;&lt;/li&gt;\r\n        &lt;%}%&gt;\r\n    &lt;/ul&gt;\r\n    &lt;%}else{%&gt;\r\n        &lt;p&gt;No products available&lt;/p&gt;\r\n    &lt;%}%&gt;\r\n\r\n----\r\n\r\n**[System.Web.Razor][18]**\r\n\r\nDesign Goals:\r\n\r\nPros:\r\n\r\n - Compact, Expressive, and Fluid  \r\n - Easy to Learn\r\n - Is not a new language\r\n - Has great Intellisense\r\n - Unit Testable\r\n - Ubiquitous, ships with ASP.NET MVC\r\n\r\nCons:\r\n\r\n- Creates a slightly different problem from &quot;tag soup&quot; referenced above. Where the server tags actually provide structure around server and non-server code, Razor confuses HTML and server code, making pure HTML or JS development challenging (see Con Example #1) as you end up having to &quot;escape&quot; HTML and / or JavaScript tags under certain very common conditions.\r\n- Poor encapsulation+reuseability: It&#39;s impractical to call a razor template as if it were a normal method - in practice razor can call code but not vice versa, which can encourage mixing of code and presentation.\r\n- Syntax is very html-oriented; generating non-html content can be tricky.  Despite this, razor&#39;s data model is essentially just string-concatenation, so syntax and nesting errors are neither statically nor dynamically detected, though VS.NET design-time help mitigates this somewhat.  Maintainability and refactorability can suffer due to this.\r\n- &lt;strike&gt;No documented API&lt;/strike&gt;, http://msdn.microsoft.com/en-us/library/system.web.razor.aspx\r\n\r\nCon Example #1 (notice the placement of &quot;string[]...&quot;):\r\n\r\n    @{\r\n        &lt;h3&gt;Team Members&lt;/h3&gt; string[] teamMembers = {&quot;Matt&quot;, &quot;Joanne&quot;, &quot;Robert&quot;};\r\n        foreach (var person in teamMembers)\r\n        {\r\n            &lt;p&gt;@person&lt;/p&gt;\r\n        }\r\n    }\r\n\r\n---\r\n\r\n**[Bellevue][3]**\r\n\r\nDesign goals:\r\n\r\n&gt; - Respect HTML as first-class language as opposed to treating it as &quot;just text&quot;. \r\n&gt; - Don&#39;t mess with my HTML! The data binding code (Bellevue code) should be separate from HTML.\r\n&gt; - Enforce strict Model-View separation\r\n\r\n---\r\n\r\n**[Brail][4]**\r\n\r\nDesign Goals:\r\n\r\n&gt; The Brail view engine has been ported\r\n&gt; from MonoRail to work with the\r\n&gt; Microsoft ASP.NET MVC Framework. For\r\n&gt; an introduction to Brail, see the\r\n&gt; documentation on the [Castle project\r\n&gt; website][5].\r\n\r\nPros:\r\n\r\n- modeled after &quot;wrist-friendly python syntax&quot;\r\n- On-demand compiled views (but no precompilation available)\r\n\r\nCons:\r\n\r\n- designed to be written in the language [Boo][6]\r\n\r\nExample:\r\n\r\n    &lt;html&gt;    \r\n    &lt;head&gt;        \r\n    &lt;title&gt;${title}&lt;/title&gt;\r\n    &lt;/head&gt;    \r\n    &lt;body&gt;        \r\n         &lt;p&gt;The following items are in the list:&lt;/p&gt;  \r\n         &lt;ul&gt;&lt;%for element in list:    output &quot;&lt;li&gt;${element}&lt;/li&gt;&quot;%&gt;&lt;/ul&gt;\r\n         &lt;p&gt;I hope that you would like Brail&lt;/p&gt;    \r\n    &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\n----\r\n\r\n**[Hasic][7]**\r\n\r\n&gt; Hasic uses VB.NET&#39;s XML literals instead of strings like most other view engines.\r\n\r\nPros:\r\n\r\n- Compile-time checking of valid XML\r\n- Syntax colouring\r\n- Full intellisense\r\n- Compiled views\r\n- Extensibility using regular CLR classes, functions, etc\r\n- Seamless composability and manipulation since it&#39;s regular VB.NET code\r\n- Unit testable\r\n\r\nCons:\r\n\r\n- Performance: Builds the whole DOM before sending it to client. \r\n\r\nExample:\r\n\r\n    Protected Overrides Function Body() As XElement\r\n        Return _\r\n        &lt;body&gt;\r\n            &lt;h1&gt;Hello, World&lt;/h1&gt;\r\n        &lt;/body&gt;\r\n    End Function\r\n\r\n\r\n---\r\n\r\n**[NDjango][8]**\r\n\r\nDesign Goals:\r\n\r\n&gt; NDjango is an implementation of the\r\n&gt; [Django Template Language][9] on the .NET\r\n&gt; platform, using the [F# language][10].\r\n\r\nPros:\r\n\r\n- [NDjango release 0.9.1.0 seems to be more stable under stress than `WebFormViewEngine`][11]\r\n- Django Template Editor with syntax colorization, code completion, and as-you-type diagnostics (VS2010 only)\r\n- Integrated with ASP.NET, Castle MonoRail and Bistro MVC frameworks\r\n\r\n----\r\n\r\n**[NHaml][12]**\r\n\r\nDesign Goals:\r\n\r\n&gt; .NET port of Rails Haml view engine.\r\n&gt; From [the Haml website][13]:\r\n&gt; \r\n&gt; Haml is a markup language that&#39;s used\r\n&gt; to cleanly and simply describe the\r\n&gt; XHTML of any web document, without the\r\n&gt; use of inline code... Haml avoids the\r\n&gt; need for explicitly coding XHTML into\r\n&gt; the template, because it is actually\r\n&gt; an abstract description of the XHTML,\r\n&gt; with some code to generate dynamic\r\n&gt; content.\r\n\r\nPros:\r\n\r\n- terse structure (i.e. D.R.Y.)\r\n- well indented\r\n- clear structure\r\n- [C# Intellisense][14] (for VS2008 without ReSharper)\r\n\r\nCons:\r\n\r\n- an abstraction from XHTML rather than leveraging familiarity of the markup\r\n- No Intellisense for VS2010\r\n\r\nExample:\r\n\r\n    @type=IEnumerable&lt;Product&gt;\r\n    - if(model.Any())\r\n      %ul\r\n        - foreach (var p in model)\r\n          %li= p.Name\r\n    - else\r\n      %p No products available\r\n\r\n----\r\n\r\n**[NVelocityViewEngine (MvcContrib)][15]**\r\n\r\nDesign Goals:\r\n\r\n&gt; A view engine based upon\r\n&gt; [NVelocity][16] which is a .NET port\r\n&gt; of the popular Java project\r\n&gt; [Velocity][17].\r\n\r\nPros:\r\n\r\n- easy to read/write\r\n- concise view code\r\n\r\nCons:\r\n\r\n- limited number of helper methods available on the view\r\n- does not automatically have Visual Studio integration (IntelliSense, compile-time checking of views, or refactoring)\r\n\r\nExample:\r\n\r\n    #foreach ($p in $viewdata.Model)\r\n    #beforeall\r\n        &lt;ul&gt;\r\n    #each\r\n        &lt;li&gt;$p.Name&lt;/li&gt;\r\n    #afterall\r\n        &lt;/ul&gt;\r\n    #nodata \r\n        &lt;p&gt;No products available&lt;/p&gt;\r\n    #end\r\n\r\n\r\n----\r\n\r\n\r\n**[SharpTiles][19]**\r\n\r\nDesign Goals:\r\n\r\n&gt; SharpTiles is a partial port of [JSTL][20]\r\n&gt; combined with concept behind the [Tiles\r\n&gt; framework][21] (as of Mile stone 1).\r\n\r\nPros:\r\n\r\n- familiar to Java developers\r\n- XML-style code blocks\r\n\r\nCons:\r\n\r\n- ...\r\n\r\nExample:\r\n\r\n    &lt;c:if test=&quot;${not fn:empty(Page.Tiles)}&quot;&gt;\r\n      &lt;p class=&quot;note&quot;&gt;\r\n        &lt;fmt:message key=&quot;page.tilesSupport&quot;/&gt;\r\n      &lt;/p&gt;\r\n    &lt;/c:if&gt;\r\n\r\n----\r\n\r\n**[Spark View Engine][22]**\r\n\r\nDesign Goals:\r\n\r\n&gt; The idea is to allow the html to\r\n&gt; dominate the flow and the code to fit\r\n&gt; seamlessly.\r\n\r\nPros:\r\n\r\n- Produces more readable templates\r\n- [C# Intellisense][23]  (for VS2008 without ReSharper)\r\n- [SparkSense plug-in][24] for VS2010 (works with ReSharper)\r\n- Provides a powerful [Bindings feature][25] to get rid of *all* code in your views and allows you to easily invent your own HTML tags\r\n\r\nCons:\r\n\r\n- No clear separation of template logic from literal markup (this can be mitigated by namespace prefixes)\r\n\r\nExample:\r\n\r\n    &lt;viewdata products=&quot;IEnumerable[[Product]]&quot;/&gt;\r\n    &lt;ul if=&quot;products.Any()&quot;&gt;\r\n        &lt;li each=&quot;var p in products&quot;&gt;${p.Name}&lt;/li&gt;\r\n    &lt;/ul&gt;\r\n    &lt;else&gt;\r\n        &lt;p&gt;No products available&lt;/p&gt;\r\n    &lt;/else&gt;\r\n\r\n    &lt;Form style=&quot;background-color:olive;&quot;&gt;\r\n        &lt;Label For=&quot;username&quot; /&gt;\r\n        &lt;TextBox For=&quot;username&quot; /&gt;\r\n        &lt;ValidationMessage For=&quot;username&quot; Message=&quot;Please type a valid username.&quot; /&gt;\r\n    &lt;/Form&gt;\r\n\r\n----\r\n\r\n**[StringTemplate View Engine MVC][26]**\r\n\r\nDesign Goals:\r\n\r\n&gt; - Lightweight. No page classes are created.\r\n&gt; - Fast. Templates are written to the Response Output stream.\r\n&gt; - Cached. Templates are cached, but utilize a FileSystemWatcher to detect\r\n&gt; file changes.\r\n&gt; - Dynamic. Templates can be generated on the fly in code.\r\n&gt; - Flexible. Templates can be nested to any level.\r\n&gt; - In line with MVC principles. Promotes separation of UI and Business\r\n&gt; Logic. All data is created ahead of\r\n&gt; time, and passed down to the template.\r\n\r\nPros:\r\n\r\n- familiar to StringTemplate Java developers\r\n\r\nCons:\r\n\r\n- simplistic template syntax can interfere with intended output (e.g. [jQuery conflict][27])\r\n\r\n----\r\n\r\n**[Wing Beats][28]**\r\n\r\n&gt; Wing Beats is an internal DSL for creating XHTML. It is based on F# and includes an ASP.NET MVC view engine, but can also be used solely for its capability of creating XHTML. \r\n\r\nPros:\r\n\r\n- Compile-time checking of valid XML\r\n- Syntax colouring\r\n- Full intellisense\r\n- Compiled views\r\n- Extensibility using regular CLR classes, functions, etc\r\n- Seamless composability and manipulation since it&#39;s regular F# code\r\n- Unit testable\r\n\r\nCons:\r\n\r\n- You don&#39;t really write HTML but code that represents HTML in a DSL.\r\n\r\n---\r\n\r\n**[XsltViewEngine (MvcContrib)][29]**\r\n\r\nDesign Goals:\r\n\r\n&gt; Builds views from familiar XSLT\r\n\r\nPros:\r\n\r\n- widely ubiquitous\r\n- familiar template language for XML developers\r\n- XML-based\r\n- time-tested\r\n- Syntax and element nesting errors can be statically detected.\r\n\r\nCons:\r\n\r\n- functional language style makes flow control difficult\r\n- XSLT 2.0 is (probably?) not supported.  (XSLT 1.0 is much less practical).\r\n\r\n----\r\n\r\n\r\n  [1]: http://www.codeplex.com/aspnet\r\n  [2]: http://msdn.microsoft.com/en-us/library/ms229863.aspx\r\n  [3]: http://www.ope.ag/bellevue\r\n  [4]: http://mvccontrib.codeplex.com/Wiki/View.aspx?title=Brail\r\n  [5]: http://castleproject.org/monorail/documentation/trunk/viewengines/brail/\r\n  [6]: http://boo.codehaus.org/\r\n  [7]: http://www.assembla.com/wiki/show/hasic\r\n  [8]: http://ndjango.org/\r\n  [9]: http://docs.djangoproject.com/en/dev/topics/templates/\r\n  [10]: http://msdn2.microsoft.com/en-us/fsharp\r\n  [11]: http://ndjango.org/index.php?title=Load_tests\r\n  [12]: http://code.google.com/p/nhaml\r\n  [13]: http://haml-lang.com/about.html\r\n  [14]: http://github.com/sztupy/nhamlsense\r\n  [15]: http://mvccontrib.codeplex.com/Wiki/View.aspx?title=NVelocity\r\n  [16]: http://www.castleproject.org/others/nvelocity/index.html\r\n  [17]: http://velocity.apache.org/\r\n  [18]: http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx\r\n  [19]: http://sharptiles.org/\r\n  [20]: http://java.sun.com/products/jsp/jstl/\r\n  [21]: http://tiles.apache.org/\r\n  [22]: http://sparkviewengine.com/\r\n  [23]: http://sparkviewengine.com/usage/intellisense\r\n  [24]: http://visualstudiogallery.msdn.microsoft.com/en-us/ef944259-fc8a-42e0-838e-f397957e1d11\r\n  [25]: http://www.sparkviewengine.com/documentation/bindings\r\n  [26]: http://code.google.com/p/string-template-view-engine-mvc/\r\n  [27]: https://stackoverflow.com/questions/173207/best-template-engine-for-aspnet-mvc\r\n  [28]: http://wingbeats.codeplex.com/\r\n  [29]: http://mvccontrib.codeplex.com/Wiki/View.aspx?title=XSLT"}, {"tags": [], "down_vote_count": 1, "creation_date": 1265046671, "answer_id": 2178828, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1286917308, "last_edit_date": 1286917308, "body_markdown": "I think this list should also include samples of each view engine so users can get a flavour of each without having to visit every website. \r\n\r\nPictures say a thousand words and markup samples are like screenshots for view engines :) So here&#39;s one from my favourite [Spark View Engine][1]\r\n\r\n    &lt;viewdata products=&quot;IEnumerable[[Product]]&quot;/&gt;\r\n    &lt;ul if=&quot;products.Any()&quot;&gt;\r\n      &lt;li each=&quot;var p in products&quot;&gt;${p.Name}&lt;/li&gt;\r\n    &lt;/ul&gt;\r\n    &lt;else&gt;\r\n      &lt;p&gt;No products available&lt;/p&gt;\r\n    &lt;/else&gt;\r\n\r\n\r\n  [1]: http://sparkviewengine.com/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1267127337, "answer_id": 2337116, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1267127337, "body_markdown": "I like [ndjango][1]. It is very easy to use and very flexible. You can easily extend view functionality with custom tags and filters. I think that &quot;greatly tied to F#&quot; is rather advantage than disadvantage.\r\n\r\n\r\n  [1]: http://www.ndjango.org/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1272661834, "answer_id": 2747723, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1272661834, "body_markdown": "Check this [SharpDOM][1] . This is a c# 4.0 internal dsl for generating html and also asp.net mvc view engine.\r\n\r\n\r\n  [1]: http://sharpdom.codeplex.com/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1321212075, "answer_id": 8114002, "path": "stack.django.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1321212075, "body_markdown": "My current choice is Razor. It is very clean and easy to read and keeps the view pages very easy to maintain. There is also intellisense support which is really great. ALos, when used with web helpers it is really powerful too.\r\n\r\nTo provide a simple sample:\r\n\r\n    @Model namespace.model\r\n    &lt;!Doctype html&gt;\r\n    &lt;html&gt;\r\n    &lt;head&gt;\r\n    &lt;title&gt;Test Razor&lt;/title&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n    &lt;ul class=&quot;mainList&quot;&gt;\r\n    @foreach(var x in ViewData.model)\r\n    {\r\n    &lt;li&gt;@x.PropertyName&lt;/li&gt;\r\n    }\r\n    &lt;/ul&gt;\r\n    &lt;/body&gt;\r\n\r\nAnd there you have it. That is very clean and easy to read. Granted, that&#39;s a simple example but even on complex pages and forms it is still very easy to read and understand.\r\n\r\nAs for the cons? Well so far (I&#39;m new to this) when using some of the helpers for forms there is a lack of support for adding a CSS class reference which is a little annoying.\r\n\r\nThanks\r\nNathj07"}], "title": "ASP.NET MVC View Engine Comparison", "view_count": 98334, "answer_count": 6, "code_snippet": ["<code>IViewEngine</code>", "<code>VirtualPathProviderViewEngine</code>", "<code>&lt;%@ Control Inherits=\"System.Web.Mvc.ViewPage&lt;IEnumerable&lt;Product&gt;&gt;\" %&gt;\n&lt;% if(model.Any()) { %&gt;\n&lt;ul&gt;\n    &lt;% foreach(var p in model){%&gt;\n    &lt;li&gt;&lt;%=p.Name%&gt;&lt;/li&gt;\n    &lt;%}%&gt;\n&lt;/ul&gt;\n&lt;%}else{%&gt;\n    &lt;p&gt;No products available&lt;/p&gt;\n&lt;%}%&gt;\n</code>", "<code>@{\n    &lt;h3&gt;Team Members&lt;/h3&gt; string[] teamMembers = {\"Matt\", \"Joanne\", \"Robert\"};\n    foreach (var person in teamMembers)\n    {\n        &lt;p&gt;@person&lt;/p&gt;\n    }\n}\n</code>", "<code>&lt;html&gt;    \n&lt;head&gt;        \n&lt;title&gt;${title}&lt;/title&gt;\n&lt;/head&gt;    \n&lt;body&gt;        \n     &lt;p&gt;The following items are in the list:&lt;/p&gt;  \n     &lt;ul&gt;&lt;%for element in list:    output \"&lt;li&gt;${element}&lt;/li&gt;\"%&gt;&lt;/ul&gt;\n     &lt;p&gt;I hope that you would like Brail&lt;/p&gt;    \n&lt;/body&gt;\n&lt;/html&gt;\n</code>", "<code>Protected Overrides Function Body() As XElement\n    Return _\n    &lt;body&gt;\n        &lt;h1&gt;Hello, World&lt;/h1&gt;\n    &lt;/body&gt;\nEnd Function\n</code>", "<code>WebFormViewEngine</code>", "<code>@type=IEnumerable&lt;Product&gt;\n- if(model.Any())\n  %ul\n    - foreach (var p in model)\n      %li= p.Name\n- else\n  %p No products available\n</code>", "<code>#foreach ($p in $viewdata.Model)\n#beforeall\n    &lt;ul&gt;\n#each\n    &lt;li&gt;$p.Name&lt;/li&gt;\n#afterall\n    &lt;/ul&gt;\n#nodata \n    &lt;p&gt;No products available&lt;/p&gt;\n#end\n</code>", "<code>&lt;c:if test=\"${not fn:empty(Page.Tiles)}\"&gt;\n  &lt;p class=\"note\"&gt;\n    &lt;fmt:message key=\"page.tilesSupport\"/&gt;\n  &lt;/p&gt;\n&lt;/c:if&gt;\n</code>", "<code>&lt;viewdata products=\"IEnumerable[[Product]]\"/&gt;\n&lt;ul if=\"products.Any()\"&gt;\n    &lt;li each=\"var p in products\"&gt;${p.Name}&lt;/li&gt;\n&lt;/ul&gt;\n&lt;else&gt;\n    &lt;p&gt;No products available&lt;/p&gt;\n&lt;/else&gt;\n\n&lt;Form style=\"background-color:olive;\"&gt;\n    &lt;Label For=\"username\" /&gt;\n    &lt;TextBox For=\"username\" /&gt;\n    &lt;ValidationMessage For=\"username\" Message=\"Please type a valid username.\" /&gt;\n&lt;/Form&gt;\n</code>", "<code>@Model namespace.model\n&lt;!Doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Test Razor&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;ul class=\"mainList\"&gt;\n@foreach(var x in ViewData.model)\n{\n&lt;li&gt;@x.PropertyName&lt;/li&gt;\n}\n&lt;/ul&gt;\n&lt;/body&gt;\n</code>", "<code>&lt;viewdata products=\"IEnumerable[[Product]]\"/&gt;\n&lt;ul if=\"products.Any()\"&gt;\n  &lt;li each=\"var p in products\"&gt;${p.Name}&lt;/li&gt;\n&lt;/ul&gt;\n&lt;else&gt;\n  &lt;p&gt;No products available&lt;/p&gt;\n&lt;/else&gt;\n</code>"], "path": "stack.django"}, {"tags": ["validation", "rest", "http-status-codes"], "creation_date": 1261694092, "body_markdown": "I&#39;m currently returning 401 Unauthorized whenever I encounter a validation failure in my [Django](http://djangoproject.com/)/[Piston](https://bitbucket.org/jespern/django-piston/wiki/Home) based REST API application.\r\nHaving had a look at the [HTTP Status Code Registry](http://www.iana.org/assignments/http-status-codes)\r\nI&#39;m not convinced that this is an appropriate code for a validation failure, what do y&#39;all recommend?\r\n\r\n* 400       Bad Request\r\n* 401       Unauthorized\r\n* 403       Forbidden\r\n* 405       Method Not Allowed\r\n* 406       Not Acceptable\r\n* 412       Precondition Failed\r\n* 417       Expectation Failed\r\n* 422       Unprocessable Entity\r\n* 424       Failed Dependency\r\n\r\n**Update**: &quot;Validation failure&quot; above means an application level data validation failure, i.e., incorrectly specified datetime, bogus email address etc.", "last_edit_date": 1387162682, "up_vote_count": 293, "link": "https://stackoverflow.com/questions/1959947/whats-an-appropriate-http-status-code-to-return-by-a-rest-api-service-for-a-val", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1261694320, "answer_id": 1959954, "path": "stack.django.answer", "score": 1, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1261694320, "body_markdown": "There&#39;s a little bit more information about the semantics of these errors in [RFC 2616][1], which documents HTTP 1.1.\r\n\r\nPersonally, I would probably use `400 Bad Request`, but this is just my personal opinion without any factual support.\r\n\r\n\r\n  [1]: http://www.rfc-editor.org/rfc/rfc2616.txt"}, {"tags": [], "down_vote_count": 1, "creation_date": 1261694323, "answer_id": 1959956, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1261694323, "body_markdown": "What exactly do you mean by &quot;validation failure&quot;? What are you validating? Are you referring to something like a syntax error (e.g. malformed XML)?\r\n\r\nIf that&#39;s the case, I&#39;d say 400 Bad Request is probably the right thing, but without knowing what it is you&#39;re &quot;validating&quot;, it&#39;s impossible to say."}, {"tags": [], "down_vote_count": 0, "creation_date": 1261694844, "answer_id": 1959977, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1302064752, "last_edit_date": 1302064752, "body_markdown": "I would say technically it might not be an HTTP failure, since the resource was (presumably) validly specified, the user was authenticated, and there was no operational failure (however even the spec does include some reserved codes like 402 Payment Required which aren&#39;t strictly speaking HTTP-related either, though it might be advisable to have that at the protocol level so that any device can recognize the condition).\r\n\r\nIf that&#39;s actually the case, I would add a status field to the response with application errors, like\r\n\r\n&amp;lt;status&amp;gt;&amp;lt;code&amp;gt;4&amp;lt;/code&amp;gt;&amp;lt;message&amp;gt;Date range is invalid&amp;lt;/message&amp;gt;&amp;lt;/status&amp;gt;\r\n"}, {"tags": [], "down_vote_count": 5, "creation_date": 1261714393, "answer_id": 1960453, "path": "stack.django.answer", "score": 221, "up_vote_count": 226, "is_accepted": true, "last_activity_date": 1497894544, "last_edit_date": 1497894544, "body_markdown": "If &quot;validation failure&quot; means that there is some client error in the request, then use HTTP 400 (Bad Request).  For instance if the URI is supposed to have an ISO-8601 date and you find that it&#39;s in the wrong format or refers to February 31st, then you would return an HTTP 400.  Ditto if you expect well-formed XML in an entity body and it fails to parse.\r\n\r\n(1/2016): Over the last five years [WebDAV][2]&#39;s more specific HTTP 422 (Unprocessable Entity) has become a very reasonable alternative to HTTP 400.  See for instance its use in [JSON API][3]. But do note that HTTP 422 has *not* made it into HTTP 1.1, [RFC-7231][4].\r\n\r\nRichardson and Ruby&#39;s [RESTful Web Services][1] contains a very helpful appendix on when to use the various HTTP response codes.  They say:\r\n\r\n&gt; **400 (\u201cBad Request\u201d)**  \r\nImportance: High.  \r\nThis is the generic client-side error status, used when no other 4xx error code is appropriate. It\u2019s commonly used when the client submits a representation along with a\r\nPUT or POST request, and the representation is in the right format, but it doesn\u2019t make\r\nany sense. (p. 381)\r\n\r\nand:\r\n\r\n&gt; **401 (\u201cUnauthorized\u201d)**  \r\nImportance: High.  \r\nThe client tried to operate on a protected resource without providing the proper authentication credentials. It may have provided the wrong credentials, or none at all.\r\nThe credentials may be a username and password, an API key, or an authentication\r\ntoken\u2014whatever the service in question is expecting. It\u2019s common for a client to make\r\na request for a URI and accept a 401 just so it knows what kind of credentials to send\r\nand in what format. [...]\r\n\r\n  [1]: http://www.amazon.com/Restful-Web-Services-Leonard-Richardson/dp/0596529260/\r\n  [2]: http://tools.ietf.org/html/rfc4918#section-11.2\r\n  [3]: http://jsonapi.org/examples/#error-objects-error-codes\r\n  [4]: https://tools.ietf.org/html/rfc7231#page-47"}, {"tags": [], "down_vote_count": 1, "creation_date": 1408981398, "answer_id": 25489597, "path": "stack.django.answer", "score": 70, "up_vote_count": 71, "is_accepted": false, "last_activity_date": 1483933182, "last_edit_date": 1483933182, "body_markdown": "From RFC 4918 (and also documented at http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml):\r\n\r\n&gt;    The 422 (Unprocessable Entity) status code means the server\r\n&gt;   understands the content type of the request entity (hence a\r\n&gt;   415 (Unsupported Media Type) status code is inappropriate), and the\r\n&gt;   syntax of the request entity is correct (thus a 400 (Bad Request)\r\n&gt;   status code is inappropriate) but was unable to process the contained\r\n&gt;   instructions.  For example, this error condition may occur if an XML\r\n&gt;   request body contains well-formed (i.e., syntactically correct), but\r\n&gt;   semantically erroneous, XML instructions.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1413500797, "answer_id": 26415346, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1413500797, "body_markdown": "A duplicate in the database should be a `409 CONFLICT`.\r\n\r\nI recommend using `422 UNPROCESSABLE ENTITY` for validation errors.\r\n\r\nI give a longer explanation of 4xx codes here: [http://parker0phil.com/2014/10/16/REST_http_4xx_status_codes_syntax_and_sematics/][1]\r\n\r\n\r\n  [1]: http://parker0phil.com/2014/10/16/REST_http_4xx_status_codes_syntax_and_sematics/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1449233593, "answer_id": 34088882, "path": "stack.django.answer", "score": 10, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1503782214, "last_edit_date": 1503782214, "body_markdown": "Here it is: \r\n\r\n**rfc2616#section-10.4.1 - 400 Bad Request**\r\n\r\n&gt;    The request could not be understood by the server due to **malformed \r\n&gt; syntax**. The client SHOULD NOT repeat the request without modifications.\r\n\r\n**rfc7231#section-6.5.1 - 6.5.1.  400 Bad Request**\r\n\r\n&gt; The 400 (Bad Request) status code indicates that the server cannot\r\n or    will not process the request due to something that is perceived\r\nto be    a client error ***(e.g., malformed request syntax, invalid request    message framing, or deceptive request routing)***.\r\n\r\nRefers to malformed (not wellformed) cases!\r\n\r\n**rfc4918 - 11.2.  422 Unprocessable Entity**\r\n\r\n&gt;    The 422 (Unprocessable Entity) status code means the server   \r\nunderstands the content type of the request entity (hence a 415 (Unsupported Media Type) status code is inappropriate), and the **syntax of the request entity is correct** (thus a 400 (Bad Request) status code is inappropriate) but was unable to process the contained instructions.  For example, this error condition may occur if an XML request body contains well-formed (i.e., syntactically correct), but **semantically erroneous**, XML instructions.\r\n\r\n**Conclusion**\r\n\r\nRule of thumb: [_]00 covers the most general case and cases that are not covered by designated code.\r\n\r\n**422** fits best object validation error (precisely my recommendation:)  \r\nAs for **semantically erroneous -** Think of something like &quot;This username already exists&quot; validation. \r\n\r\n400 is incorrectly used for object validation \r\n\r\n"}], "title": "What&#39;s an appropriate HTTP status code to return by a REST API service for a validation failure?", "view_count": 136966, "answer_count": 7, "code_snippet": ["<code>409 CONFLICT</code>", "<code>422 UNPROCESSABLE ENTITY</code>", "<code>400 Bad Request</code>"], "path": "stack.django"}, {"tags": ["python", "shell", "python-3.x", "shebang"], "creation_date": 1312266942, "body_markdown": "Should I put the shebang in my Python scripts? In what form?\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    #!/usr/bin/env python \r\n\r\nor\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    #!/usr/local/bin/python\r\n\r\nAre these equally portable? Which form is used most?\r\n\r\n***Note:*** the [tornado](https://github.com/facebook/tornado) project uses the shebang. On the other hand the [Django](https://www.djangoproject.com/) project doesn&#39;t.", "last_edit_date": 1509499248, "up_vote_count": 438, "link": "https://stackoverflow.com/questions/6908143/should-i-put-shebang-in-python-scripts-and-what-form-should-it-take", "_childDocuments_": [{"tags": [], "down_vote_count": 11, "creation_date": 1312267170, "answer_id": 6908180, "path": "stack.django.answer", "score": 65, "up_vote_count": 76, "is_accepted": false, "last_activity_date": 1312267170, "body_markdown": "It&#39;s really just a matter of taste. Adding the shebang means people can invoke the script directly if they want (assuming it&#39;s marked as executable); omitting it just means `python` has to be invoked manually.\r\n\r\nThe end result of running the program isn&#39;t affected either way; it&#39;s just options of the means."}, {"tags": [], "down_vote_count": 0, "creation_date": 1312267512, "answer_id": 6908238, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1419854222, "last_edit_date": 1419854222, "body_markdown": "The purpose of shebang is for the script to recognize the interpreter type when you want to execute the script from the shell. \r\nMostly, and not always, you execute scripts by supplying the interpreter externally.\r\nExample usage: `python-x.x script.py`\r\n\r\nThis will work even if you don&#39;t have a shebang declarator.\r\n\r\nWhy first one is more &quot;portable&quot; is because, `/usr/bin/env` contains your `PATH` declaration which accounts for all the destinations where your system executables reside.\r\n\r\nNOTE: Tornado doesn&#39;t strictly use shebangs, and Django strictly doesn&#39;t. It varies with how you are executing your application&#39;s main function.\r\n\r\nALSO: It doesn&#39;t vary with Python."}, {"tags": [], "down_vote_count": 1, "creation_date": 1312270946, "answer_id": 6908732, "path": "stack.django.answer", "score": 10, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1312270946, "body_markdown": "You should add a shebang if the script is intended to be executable. You should also install the script with an installing software that modifies the shebang to something correct so it will work on the target platform. Examples of this is distutils and Distribute."}, {"tags": [], "down_vote_count": 0, "creation_date": 1359532336, "answer_id": 14599026, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1359532336, "body_markdown": "Sometimes, if the answer is not very clear (I mean you cannot decide if yes or no), then it does not matter too much, and you can ignore the problem until the answer *is* clear.\r\n\r\nThe `#!` only purpose is for launching the script. Django loads the sources on its own and uses them. It never needs to decide what interpreter should be used. This way, the `#!` actually makes no sense here.\r\n\r\nGenerally, if it is a module and cannot be used as a script, there is no need for using the `#!`. On the other hand, a module source often contains `if __name__ == &#39;__main__&#39;: ...` with at least some trivial testing of the functionality. Then the `#!` makes sense again.\r\n\r\nOne good reason for using `#!` is when you use both Python 2 and Python 3 scripts -- they must be interpreted by different versions of Python. This way, you have to remember what `python` must be used when launching the script manually (without the `#!` inside). If you have a mixture of such scripts, it is a good idea to use the `#!` inside, make them executable, and launch them as executables (chmod ...).\r\n\r\nWhen using MS-Windows, the `#!` had no sense -- until recently. Python 3.3 introduces a Windows Python Launcher (py.exe and pyw.exe) that reads the `#!` line, detects the installed versions of Python, and uses the correct or explicitly wanted version of Python. As the extension can be associated with a program, you can get similar behaviour in Windows as with execute flag in Unix-based systems."}, {"tags": [], "down_vote_count": 1, "creation_date": 1376161066, "answer_id": 18165365, "path": "stack.django.answer", "score": 13, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1509499401, "last_edit_date": 1509499401, "body_markdown": "If you have more than one version of Python and the script needs to run under a specific version, the she-bang can ensure the right one is used when the script is executed directly, for example:\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    #!/usr/bin/python2.7\r\n\r\nNote the script could still be run via a complete Python command line, or via import, in which case the she-bang is ignored.  But for scripts run directly, this is a decent reason to use the she-bang.\r\n\r\n`#!/usr/bin/env python` is generally the better approach, but this helps with special cases.\r\n\r\nUsually it would be better to establish a Python virtual environment, in which case the generic `#!/usr/bin/env python` would identify the correct instance of Python for the virtualenv."}, {"tags": [], "down_vote_count": 2, "creation_date": 1381435135, "answer_id": 19305076, "path": "stack.django.answer", "score": 608, "up_vote_count": 610, "is_accepted": true, "last_activity_date": 1513284633, "last_edit_date": 1513284633, "body_markdown": "The shebang line in any script determines the script&#39;s ability to be executed like an standalone executable without typing `python` beforehand in the terminal or when double clicking it in a file manager (when configured properly). It isn&#39;t necessary but generally put there so when someone sees the file opened in an editor, they immediately know what they&#39;re looking at. However, which shebang line you use **IS** important.\r\n\r\n**Correct** usage for Python 3 scripts is:\r\n\r\n&lt;!-- language-all: lang-none --&gt;\r\n\r\n    #!/usr/bin/env python3\r\n\r\nThis defaults to version 3.latest. For Python 2.7.latest use `python2` in place of `python3`.\r\n\r\nThe following **should NOT be used** (except for the rare case that you are writing code which is compatible with both Python 2.x and 3.x):\r\n\r\n    #!/usr/bin/env python\r\n\r\nThe reason for these recommendations, given in [PEP 394][1], is that `python` can refer either to `python2` or `python3` on different systems. It currently refers to `python2` on most distributions, but that is likely to change at some point.\r\n\r\n**Also, DO NOT Use:**\r\n\r\n    #!/usr/local/bin/python\r\n\r\n&gt; &quot;python may be installed at /usr/bin/python or /bin/python in those\r\n&gt; cases, the above #! will fail.&quot;\r\n\r\n --[&quot;#!/usr/bin/env python&quot; vs &quot;#!/usr/local/bin/python&quot;][2]\r\n\r\n\r\n  [1]: https://www.python.org/dev/peps/pep-0394/#recommendation &quot;PEP 394&quot;\r\n  [2]: https://mail.python.org/pipermail/tutor/2007-June/054816.html"}, {"tags": [], "down_vote_count": 1, "creation_date": 1439344727, "answer_id": 31954823, "path": "stack.django.answer", "score": 17, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1439373242, "last_edit_date": 1439373242, "body_markdown": "&gt; Should I put the shebang in my Python scripts? \r\n\r\nPut a shebang into a Python script to indicate:\r\n\r\n- this module can be run as a script\r\n- whether it can be run only on python2, python3 or is it Python 2/3 compatible\r\n- on POSIX, it is necessary if you want to run the script directly without invoking `python` executable explicitly\r\n\r\n&gt; Are these equally portable? Which form is used most?\r\n\r\nIf you write a shebang *manually* then always use `#!/usr/bin/env python` unless you have a specific reason not to use it. This form is understood even on Windows (Python launcher).\r\n\r\nNote: *installed* scripts should use a specific python executable e.g., `/usr/bin/python` or `/home/me/.virtualenvs/project/bin/python`. It is bad if some tool breaks if you activate a virtualenv in your shell. Luckily, the correct shebang is created automatically in most cases by `setuptools` or your distribution package tools (on Windows, `setuptools` can generate wrapper `.exe` scripts automatically).\r\n\r\nIn other words, if the script is in a source checkout then you will probably see `#!/usr/bin/env python`. If it is installed then the shebang is a path to a specific python executable such as `#!/usr/local/bin/python`  (NOTE: you should not write the paths from the latter category manually).\r\n\r\nTo choose whether you should use `python`, `python2`, or `python3` in the shebang, see [PEP 394 - The &quot;python&quot; Command on Unix-Like Systems](https://www.python.org/dev/peps/pep-0394/):\r\n\r\n&gt; - ... `python` should be used in the shebang line only for scripts that are\r\n&gt; source compatible with both Python 2 and 3.\r\n&gt; \r\n&gt; - in preparation for an eventual change in the default version of\r\n&gt; Python, Python 2 only scripts should either be updated to be source\r\n&gt; compatible with Python 3 or else to use `python2` in the shebang line.\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1482313002, "answer_id": 41259452, "path": "stack.django.answer", "score": 0, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1515600551, "last_edit_date": 1515600551, "body_markdown": "Use first\r\n\r\n    which python\r\n\r\nThis will give the output as the location where my python interpreter (binary) is present.\r\n\r\nThis output could be any such as\r\n\r\n    /usr/bin/python\r\nor\r\n\r\n    /bin/python\r\n\r\nNow appropriately select the shebang line and use it.\r\n\r\nTo generalize we can use:\r\n\r\n    #!/usr/bin/env\r\n\r\nor \r\n\r\n    #!/bin/env\r\n\r\n "}, {"tags": [], "down_vote_count": 0, "creation_date": 1485057907, "answer_id": 41787224, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1512697892, "last_edit_date": 1512697892, "body_markdown": "Answer:  Only if you plan to make it a command-line executable script.\r\n-\r\n\r\nHere is the procedure:\r\n-\r\n\r\nStart off by verifying the proper shebang string to use:\r\n\r\n    which python\r\n\r\nTake the output from that and add it (with the shebang #!) in the first line.\r\n\r\nOn my system it responds like so:\r\n\r\n    $which python\r\n    /usr/bin/python\r\n\r\n**So your shebang will look like:**\r\n\r\n    #!/usr/bin/python\r\n\r\nAfter saving, it will still run as before since python will see that first line as a comment.\r\n\r\n    python filename.py\r\n\r\nTo make it a command, copy it to drop the .py extension.  \r\n\r\n    cp filename.py filename\r\n\r\nTell the file system that this will be executable:\r\n\r\n    chmod +x filename\r\n\r\nTo test it, use:\r\n\r\n    ./filename\r\n\r\nBest practice is to move it somewhere in your $PATH so all you need to type is the filename itself. \r\n\r\n    sudo cp filename /usr/sbin\r\n\r\nThat way it will work everywhere (without the ./ before the filename)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1496367609, "answer_id": 44319561, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1496367609, "body_markdown": "When I installed Python 3.6.1 on Windows 7 recently, it also installed the Python Launcher for Windows, which is supposed to handle the shebang line.  However, I found that the Python Launcher did not do this: the shebang line was ignored and Python 2.7.13 was always used (unless I executed the script using py -3).\r\n\r\nTo fix this, I had to edit the Windows registry key `HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Python.File\\shell\\open\\command`.  This still had the value\r\n\r\n    &quot;C:\\Python27\\python.exe&quot; &quot;%1&quot; %*\r\n\r\nfrom my earlier Python 2.7 installation.  I modified this registry key value to\r\n\r\n    &quot;C:\\Windows\\py.exe&quot; &quot;%1&quot; %*\r\n\r\nand the Python Launcher shebang line processing worked as described above.\r\n"}], "title": "Should I put #! (shebang) in Python scripts, and what form should it take?", "view_count": 244799, "answer_count": 10, "code_snippet": ["<code>#!/usr/bin/env python \n</code>", "<code>#!/usr/local/bin/python\n</code>", "<code>#!/usr/bin/python</code>", "<code>python</code>", "<code>#!/usr/bin/env python3\n</code>", "<code>python2</code>", "<code>python3</code>", "<code>#!/usr/bin/env python\n</code>", "<code>python</code>", "<code>python2</code>", "<code>python3</code>", "<code>python2</code>", "<code>#!/usr/local/bin/python\n</code>", "<code>env</code>", "<code>/usr/bin/</code>", "<code>PATH</code>", "<code>env</code>", "<code>env</code>", "<code>env</code>", "<code>env</code>", "<code>env</code>", "<code>/usr/bin/</code>", "<code>/usr/bin/env</code>", "<code>python</code>", "<code>python2</code>", "<code>python3</code>", "<code>python</code>", "<code>chmod a+x [your-script].py</code>", "<code>./[your-script.py]</code>", "<code>python</code>", "<code>#!/usr/bin/env python</code>", "<code>/usr/bin/python</code>", "<code>/home/me/.virtualenvs/project/bin/python</code>", "<code>setuptools</code>", "<code>setuptools</code>", "<code>.exe</code>", "<code>#!/usr/bin/env python</code>", "<code>#!/usr/local/bin/python</code>", "<code>python</code>", "<code>python2</code>", "<code>python3</code>", "<code>python</code>", "<code>python2</code>", "<code>#!/usr/bin/env python</code>", "<code>#!/usr/bin/python2.7\n</code>", "<code>#!/usr/bin/env python</code>", "<code>#!/usr/bin/env python</code>", "<code>which</code>", "<code>which</code>", "<code>python-x.x script.py</code>", "<code>/usr/bin/env</code>", "<code>PATH</code>", "<code>#!</code>", "<code>#!</code>", "<code>#!</code>", "<code>if __name__ == '__main__': ...</code>", "<code>#!</code>", "<code>#!</code>", "<code>python</code>", "<code>#!</code>", "<code>#!</code>", "<code>#!</code>", "<code>#!</code>", "<code>which python\n</code>", "<code>$which python\n/usr/bin/python\n</code>", "<code>#!/usr/bin/python\n</code>", "<code>python filename.py\n</code>", "<code>cp filename.py filename\n</code>", "<code>chmod +x filename\n</code>", "<code>./filename\n</code>", "<code>sudo cp filename /usr/sbin\n</code>", "<code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\Python.File\\shell\\open\\command</code>", "<code>\"C:\\Python27\\python.exe\" \"%1\" %*\n</code>", "<code>\"C:\\Windows\\py.exe\" \"%1\" %*\n</code>", "<code>which python\n</code>", "<code>/usr/bin/python\n</code>", "<code>/bin/python\n</code>", "<code>#!/usr/bin/env\n</code>", "<code>#!/bin/env\n</code>", "<code>#!/usr/bin/env</code>", "<code>which</code>", "<code>which python</code>"], "path": "stack.django"}, {"tags": ["django", "django-migrations"], "creation_date": 1440087871, "body_markdown": "I&#39;ve made a migration that added a new table and want to revert it and delete the migration, without creating a new migration.\r\n\r\nHow do I do it? Is there a command to revert last migration and then I can simply delete the migration file?\r\n", "last_edit_date": 1462258306, "up_vote_count": 170, "link": "https://stackoverflow.com/questions/32123477/django-revert-last-migration", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1440090003, "answer_id": 32124113, "path": "stack.django.answer", "score": 303, "up_vote_count": 304, "is_accepted": false, "last_activity_date": 1485878704, "last_edit_date": 1485878704, "body_markdown": "You can revert by migrating to the previous migration.\r\n\r\nFor example, if your last two migrations are:\r\n\r\n * `0010_previous_migration`\r\n * `0011_migration_to_revert`\r\n\r\nThen you would do:\r\n\r\n    ./manage.py migrate my_app 0010_previous_migration \r\n\r\nYou can then delete migration `0011_migration_to_revert`.\r\n\r\nIf you&#39;re using Django 1.8+, you can show the names of all the migrations with\r\n\r\n    ./manage.py showmigrations my_app\r\n\r\nTo reverse all migrations for an app, you can run:\r\n\r\n    ./manage.py migrate my_app zero"}, {"tags": [], "down_vote_count": 2, "creation_date": 1461561097, "answer_id": 36832446, "path": "stack.django.answer", "score": 6, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1462256782, "last_edit_date": 1462256782, "body_markdown": "The other thing that you can do is delete the table created manually. \r\n\r\nAlong with that, you will have to delete that particular migration file. Also, you will have to **delete that particular entry in the django-migrations table**(probably the last one in your case) which correlates to that particular migration."}, {"tags": [], "down_vote_count": 0, "creation_date": 1468458570, "answer_id": 38364007, "path": "stack.django.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1476282455, "last_edit_date": 1476282455, "body_markdown": "The answer by Alasdair covers the basics\r\n\r\n - Identify the migrations you want by `./manage.py showmigrations`\r\n - `migrate` using the app name and the migration name\r\n\r\nBut it should be pointed out that not all migrations _can_ be reversed. This happens if Django doesn&#39;t have a rule to do the reversal. For most changes that you automatically made migrations by `./manage.py makemigrations`, the reversal will be possible. However, custom scripts will need to have both a forward and reverse written, as described in the example here:\r\n\r\nhttps://docs.djangoproject.com/en/1.9/ref/migration-operations/\r\n\r\n## How to do a no-op reversal\r\n\r\nIf you had a `RunPython` operation, then maybe you just want to back out the migration without writing a logically rigorous reversal script. The following quick hack to the example from the docs (above link) allows this, leaving the database in the same state that it was after the migration was applied, even after reversing it.\r\n\r\n&lt;!-- language: lang-python --&gt;\r\n\r\n    # -*- coding: utf-8 -*-\r\n    from __future__ import unicode_literals\r\n    \r\n    from django.db import migrations, models\r\n    \r\n    def forwards_func(apps, schema_editor):\r\n        # We get the model from the versioned app registry;\r\n        # if we directly import it, it&#39;ll be the wrong version\r\n        Country = apps.get_model(&quot;myapp&quot;, &quot;Country&quot;)\r\n        db_alias = schema_editor.connection.alias\r\n        Country.objects.using(db_alias).bulk_create([\r\n            Country(name=&quot;USA&quot;, code=&quot;us&quot;),\r\n            Country(name=&quot;France&quot;, code=&quot;fr&quot;),\r\n        ])\r\n    \r\n    class Migration(migrations.Migration):\r\n    \r\n        dependencies = []\r\n    \r\n        operations = [\r\n            migrations.RunPython(forwards_func, lambda apps, schema_editor: None),\r\n        ]\r\n\r\nThis works for Django 1.8, 1.9\r\n\r\n\r\n----------\r\n\r\n\r\nUpdate: A better way of writing this would be to replace `lambda apps, schema_editor: None` with `migrations.RunPython.noop` in the snippet above. These are both functionally the same thing. (credit to the comments)"}, {"tags": [], "down_vote_count": 1, "creation_date": 1481229045, "answer_id": 41048289, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1481229045, "body_markdown": "I did this in 1.9.1 (to delete the last or latest migration created):\r\n\r\n 1. `rm &lt;appname&gt;/migrations/&lt;migration #&gt;*`\r\n\r\n     *example:* `rm myapp/migrations/0011*`\r\n\r\n 2. logged into database and ran this SQL (postgres in this example)\r\n\r\n    `delete from django_migrations where name like &#39;0011%&#39;;`\r\n\r\nI was then able to create new migrations that started with the migration number that I had just deleted (in this case, 11).\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1496509997, "answer_id": 44346600, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1496509997, "body_markdown": "Here is my solution, since the above solution do not really cover the use-case, when you use `RunPython`.\r\n\r\nYou can access the table via the ORM with\r\n\r\n    from django.db.migrations.recorder import MigrationRecorder\r\n    \r\n    &gt;&gt;&gt; MigrationRecorder.Migration.objects.all()\r\n    &gt;&gt;&gt; MigrationRecorder.Migration.objects.latest(&#39;id&#39;)\r\n    Out[5]: &lt;Migration: Migration 0050_auto_20170603_1814 for model&gt;\r\n    &gt;&gt;&gt; MigrationRecorder.Migration.objects.latest(&#39;id&#39;).delete()\r\n    Out[4]: (1, {u&#39;migrations.Migration&#39;: 1})\r\n\r\nSo you can query the tables and delete those entries that are relevant for you. This way you can modify in detail. With `RynPython` migrations you also need to take care of the data that was added/changed/removed. The above example only displays, how you access the table via Djang ORM.\r\n\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1506295034, "answer_id": 46395738, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1506295034, "body_markdown": "The first part how to *&quot;revert migration&quot;* has been answered by Alasdair. I will answer:\r\n&gt; ...delete the migration, without creating a new migration?\r\n\r\n**TL;DR:** You can delete a few last reverted (confused) migrations and make a new one after fixing models. You can **use other means** to setup **to not create a table** by migrate command, but the **last migration must be created that match the current models**.\r\n\r\nThe &quot;problematic&quot; migration that created an unwanted table is caused by a new Model class that you added.\r\n\r\nWhy can anyone want to not get a table? How to solve it?\r\n\r\n\r\n**A)** No such table should exist in no database on no machine and no conditions\r\n\r\n+  *When:* It is a base model of another model, created only for model inheritance.\r\n+ *Solution:* Set `class Meta: abstract = True`\r\n\r\n**B)** The table is created rarely, by something else or manually in a special way.\r\n\r\n+ *Solution:* Use `class Meta: managed = False`  \r\nThe migration is created, but never used, only in tests. Migration file is important, otherwise database tests can&#39;t run, starting from reproducible initial state.\r\n\r\n**C)** The table is used only on some machine (e.g. in development).\r\n\r\n+ *Solution:* Move the model to a new application that is added to INSTALLED_APPS only under special conditions or use a conditional `class Meta: managed = some_switch`.\r\n\r\n**D)** The project uses multiple databases in `settings.DATABASES`\r\n\r\n+ *Solution:* Write a [Database router](https://docs.djangoproject.com/en/1.11/topics/db/multi-db/#automatic-database-routing) with method `allow_migrate` in order to differentiate the databases where the table can or can not be created.\r\n\r\n(Did I forget something? I expect that everything other worked for you, only the table should not be created. Then e.g. a bug in proxy option of an model can be excluded.)\r\n\r\nThe migration is created in cases B), C), D) with Django 1.8 and in all cases ABCD with Django 1.9+, but applied to the database only in appropriate cases or maybe never if required so. Migrations has been necessary for running tests since Django 1.8. The complete relevant current state is recorded by migrations even for models with managed=False in Django 1.9+ to be possible to create a ForeignKey between managed/unmanaged models or to can make the model managed=True later. (This question has been written at the time of Django 1.8 mainstream. Everything here should be valid for versions between 1.8 to the current 1.11.)\r\n"}], "title": "django revert last migration", "view_count": 68537, "answer_count": 6, "code_snippet": ["<code>./manage.py migrate my_app 0010</code>", "<code>0010_previous_migration</code>", "<code>0011_migration_to_revert</code>", "<code>./manage.py migrate my_app 0010_previous_migration \n</code>", "<code>0011_migration_to_revert</code>", "<code>./manage.py showmigrations my_app\n</code>", "<code>./manage.py migrate my_app zero\n</code>", "<code>migrate</code>", "<code>./manage.py migrate my_app zero</code>", "<code>'0010_previous_migration'</code>", "<code>./manage.py showmigrations</code>", "<code>migrate</code>", "<code>./manage.py makemigrations</code>", "<code>RunPython</code>", "<code># -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\ndef forwards_func(apps, schema_editor):\n    # We get the model from the versioned app registry;\n    # if we directly import it, it'll be the wrong version\n    Country = apps.get_model(\"myapp\", \"Country\")\n    db_alias = schema_editor.connection.alias\n    Country.objects.using(db_alias).bulk_create([\n        Country(name=\"USA\", code=\"us\"),\n        Country(name=\"France\", code=\"fr\"),\n    ])\n\nclass Migration(migrations.Migration):\n\n    dependencies = []\n\n    operations = [\n        migrations.RunPython(forwards_func, lambda apps, schema_editor: None),\n    ]\n</code>", "<code>lambda apps, schema_editor: None</code>", "<code>migrations.RunPython.noop</code>", "<code>RunPython.noop</code>", "<code>migrations.RunPython(forwards_func, migrations.RunPython.noop)</code>", "<code>RunPython</code>", "<code>from django.db.migrations.recorder import MigrationRecorder\n\n&gt;&gt;&gt; MigrationRecorder.Migration.objects.all()\n&gt;&gt;&gt; MigrationRecorder.Migration.objects.latest('id')\nOut[5]: &lt;Migration: Migration 0050_auto_20170603_1814 for model&gt;\n&gt;&gt;&gt; MigrationRecorder.Migration.objects.latest('id').delete()\nOut[4]: (1, {u'migrations.Migration': 1})\n</code>", "<code>RynPython</code>", "<code>rm &lt;appname&gt;/migrations/&lt;migration #&gt;*</code>", "<code>rm myapp/migrations/0011*</code>", "<code>delete from django_migrations where name like '0011%';</code>", "<code>class Meta: abstract = True</code>", "<code>class Meta: managed = False</code>", "<code>class Meta: managed = some_switch</code>", "<code>settings.DATABASES</code>", "<code>allow_migrate</code>"], "path": "stack.django"}, {"tags": ["ruby-on-rails", "android-activity", "social-networking"], "creation_date": 1224007657, "body_markdown": "I&#39;m interested in hearing your opinions in which is the best way of implementing a social activity stream (Facebook is the most famous example). Problems/challenges involved are:\r\n\r\n- Different types of activities (posting, commenting ..)\r\n- Different types of objects (post, comment, photo ..)\r\n- 1-n users involved in different roles (&quot;User x replied to User y&#39;s comment on User&#39;s Z post&quot;)\r\n- Different views of the same activity item (&quot;you commented ..&quot; vs. &quot;your friend x commented&quot; vs. &quot;user x commented ..&quot; =&gt; 3 representations of a &quot;comment&quot; activity)\r\n\r\n.. and some more, especially if you take it to a high level of sophistication, as Facebook does, for example, combining several activity items into one (&quot;users x, y and z commented on that photo&quot;\r\n\r\nAny thoughts or pointers on patterns, papers, etc on the most flexible, efficient and powerful approaches to implementing such a system, data model, etc. would be appreciated.\r\n\r\nAlthough most of the issues are platform-agnostic, chances are I end up implementing such a system on Ruby on Rails\r\n  \r\n", "last_edit_date": 1267983838, "up_vote_count": 261, "link": "https://stackoverflow.com/questions/202198/whats-the-best-manner-of-implementing-a-social-activity-stream", "_childDocuments_": [{"tags": [], "down_vote_count": 3, "creation_date": 1224008123, "answer_id": 202227, "path": "stack.django.answer", "score": 3, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1224008123, "body_markdown": "I think [Plurk&#39;s](http://plurk.com) approach is interesting: they supply your entire timeline in a format that looks a lot like Google Finance&#39;s stock charts.\r\n\r\nIt may be worth looking at [Ning](http://ning.com) to see how a social networking network works. The [developer](http://developer.ning.com) pages look especially helpful."}, {"tags": [], "down_vote_count": 1, "creation_date": 1224079422, "answer_id": 204819, "path": "stack.django.answer", "score": 18, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1224079422, "body_markdown": "The biggest issues with event streams are visibility and performance; you need to restrict the events displayed to be only the interesting ones for that particular user, and you need to keep the amount of time it takes to sort through and identify those events manageable. I&#39;ve built a smallish social network; I found that at small scales, keeping an &quot;events&quot; table in a database works, but that it gets to be a performance problem under moderate load.\r\n\r\nWith a larger stream of messages and users, it&#39;s probably best to go with a messaging system, where events are sent as messages to individual profiles. This means that you can&#39;t easily subscribe to people&#39;s event streams and see previous events very easily, but you are simply rendering a small group of messages when you need to render the stream for a particular user.\r\n\r\nI believe this was Twitter&#39;s original design flaw- I remember reading that they were hitting the database to pull in and filter their events. This had everything to do with architecture and nothing to do with Rails, which (unfortunately) gave birth to the &quot;ruby doesn&#39;t scale&quot; meme. I recently saw a presentation where the developer used Amazon&#39;s &lt;a href=&quot;http://aws.amazon.com/sqs/&quot;&gt;Simple Queue Service&lt;/a&gt; as their messaging backend for a twitter-like application that would have far higher scaling capabilities- it may be worth looking into SQS as part of your system, if your loads are high enough."}, {"tags": [], "down_vote_count": 2, "creation_date": 1224089131, "answer_id": 205477, "path": "stack.django.answer", "score": 141, "up_vote_count": 143, "is_accepted": false, "last_activity_date": 1224089131, "body_markdown": "I have created such system and I took this approach:\r\n\r\nDatabase table with the following columns: id, userId, type, data, time.\r\n\r\n* **userId** is the user who generated the activity\r\n* **type** is the type of the activity (i.e. Wrote blog post, added photo, commented on user&#39;s photo)\r\n* **data** is a serialized object with meta-data for the activity where you can put in whatever you want\r\n\r\nThis limits the searches/lookups, you can do in the feeds, to users, time and activity types, but in a facebook-type activity feed, this isn&#39;t really limiting. And with correct indices on the table the lookups are _fast_.\r\n\r\nWith this design you would have to decide what metadata each type of event should require. For example a feed activity for a new photo could look something like this:\r\n\r\n    {id:1, userId:1, type:PHOTO, time:2008-10-15 12:00:00, data:{photoId:2089, photoName:A trip to the beach}}\r\n\r\nYou can see that, although the name of the photo most certainly is stored in some other table containing the photos, and I could retrieve the name from there, I will duplicate the name in the metadata field, because you don&#39;t want to do any joins on other database tables if you want speed. And in order to display, say 200, different events from 50 different users, you need speed.\r\n\r\n\r\nThen I have classes that extends a basic FeedActivity class for rendering the different types of activity entries. Grouping of events would be built in the rendering code as well, to keep away complexity from the database."}, {"tags": [], "down_vote_count": 1, "creation_date": 1224103439, "answer_id": 206386, "path": "stack.django.answer", "score": 10, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1300909023, "last_edit_date": 1300909023, "body_markdown": "&lt;pre&gt;\r\n// one entry per actual event\r\nevents {\r\n  id, timestamp, type, data\r\n}\r\n\r\n// one entry per event, per feed containing that event\r\nevents_feeds {\r\n  event_id, feed_id\r\n}\r\n&lt;/pre&gt;\r\nWhen the event is created, decide which feeds it appears in and add those to events_feeds. \r\nTo get a feed, select from events_feeds, join in events, order by timestamp.\r\nFiltering and aggregation can then be done on the results of that query.\r\nWith this model, you can change the event properties after creation with no extra work.\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1227116690, "answer_id": 302753, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1227116690, "body_markdown": "I had a similar approach to that of heyman - a denormalized table containing all of the data that would be displayed in a given activity stream.  It works fine for a small site with limited activity.\r\n\r\nAs mentioned above, it is likely to face scalability issues as the site grows.  Personally, I am not worried about the scaling issues right now.  I&#39;ll worry about that at a later time.\r\n\r\nFacebook has obviously done a great job of scaling so I would recommend that you read their engineering blog, as it has a ton of great content -&gt; [http://www.facebook.com/notes.php?id=9445547199][1]\r\n\r\nI have been looking into better solutions than the denormalized table I mentioned above.  Another way I have found of accomplishing this is to condense all the content that would be in a given activity stream into a single row.  It could be stored in XML, JSON, or some serialized format that could be read by your application.  The update process would be simple too.  Upon activity, place the new activity into a queue (perhaps using Amazon SQS or something else) and then continually poll the queue for the next item.  Grab that item, parse it, and place its contents in the appropriate feed object stored in the database.\r\n\r\nThe good thing about this method is that you only need to read a single database table whenever that particular feed is requested, rather than grabbing a series of tables.  Also, it allows you to maintain a finite list of activities as you may pop off the oldest activity item whenever you update the list.\r\n\r\nHope this helps! :)\r\n\r\n  [1]: http://www.facebook.com/notes.php?id=9445547199"}, {"tags": [], "down_vote_count": 0, "creation_date": 1228301943, "answer_id": 336816, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1228301943, "body_markdown": "If you do decide that you&#39;re going to implement in Rails, perhaps you will find the following plugin useful:\r\n\r\nActivityStreams: [http://github.com/face/activity_streams/tree/master][1]\r\n\r\nIf nothing else, you&#39;ll get to look at an implementation, both in terms of the data model, as well as the API provided for pushing and pulling activities.\r\n\r\n\r\n  [1]: http://github.com/face/activity_streams/tree/master"}, {"tags": [], "down_vote_count": 0, "creation_date": 1228820886, "answer_id": 352404, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1228820886, "body_markdown": "I started to implement a system like this yesterday, here&#39;s where I&#39;ve got to...\r\n\r\nI created a **StreamEvent** class with the properties *Id*, *ActorId*, *TypeId*, *Date*, *ObjectId* and a hashtable of additional *Details* key/value pairs. This is represented in the database by a **StreamEvent** table (*Id*, *ActorId*, *TypeId*, *Date*, *ObjectId*) and a **StreamEventDetails** table (*StreamEventId*, *DetailKey*, *DetailValue*).\r\n\r\nThe *ActorId*, *TypeId* and *ObjectId* allow for a Subject-Verb-Object event to be captured (and later queried). Each action may result in  several StreamEvent instances being created.\r\n\r\nI&#39;ve then created a sub-class for of StreamEvent each type of event, e.g. **LoginEvent**, **PictureCommentEvent**. Each of these subclasses has more context specific properties such as *PictureId*, *ThumbNail*, *CommenText*, etc (whatever is required for the event) which are actually stored as key/value pairs in the hashtable/StreamEventDetail table.\r\n\r\nWhen pulling these events back from the database I use a factory method (based on the *TypeId*) to create the correct StreamEvent class.\r\n\r\nEach subclass of StreamEvent has a Render(*context* As **StreamContext**) method which outputs the event to screen based on the passed **StreamContext** class. The StreamContext class allows options to be set based on the context of the view. If you look at Facebook for example your news feed on the homepage lists the fullnames (and links to their profile) of everyone involved in each action, whereas looking a friend&#39;s feed you only see their first name (but the full names of other actors).\r\n\r\nI haven&#39;t implemented a aggregate feed (Facebook home) yet but I imagine I&#39;ll create a **AggregateFeed** table which has the fields *UserId*, *StreamEventId* which is populated based on some kind of &#39;Hmmm, you might find this interesting&#39; algorithm.\r\n\r\nAny comments would be massively appreciated."}, {"tags": [], "down_vote_count": 0, "creation_date": 1258512648, "answer_id": 1753335, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1318009487, "last_edit_date": 1318009487, "body_markdown": "I solved this a few months ago, but I think my implementation is too basic.  \r\nI created the following models:\r\n\r\n    HISTORY_TYPE\r\n    \r\n    ID           - The id of the history type\r\n    NAME         - The name (type of the history)\r\n    DESCRIPTION  - A description\r\n    \r\n    HISTORY_MESSAGES\r\n    \r\n    ID\r\n    HISTORY_TYPE - A message of history belongs to a history type\r\n    MESSAGE      - The message to print, I put variables to be replaced by the actual values\r\n    \r\n    HISTORY_ACTIVITY\r\n    \r\n    ID\r\n    MESSAGE_ID    - The message ID to use\r\n    VALUES        - The data to use\r\n\r\nExample\r\n\r\n    MESSAGE_ID_1 =&gt; &quot;User %{user} created a new entry&quot;\r\n    ACTIVITY_ID_1 =&gt; MESSAGE_ID = 1, VALUES = {user: &quot;Rodrigo&quot;}"}, {"tags": [], "down_vote_count": 0, "creation_date": 1297892066, "answer_id": 5022398, "path": "stack.django.answer", "score": 116, "up_vote_count": 116, "is_accepted": false, "last_activity_date": 1363975201, "last_edit_date": 1363975201, "body_markdown": "This is a very good presentation outlining how Etsy.com architected their activity streams. It&#39;s the best example I&#39;ve found on the topic, though it&#39;s not rails specific.\r\n\r\n[http://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture][1]\r\n\r\n\r\n  [1]: http://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture"}, {"tags": [], "down_vote_count": 0, "creation_date": 1351746682, "answer_id": 13171306, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1378106482, "last_edit_date": 1378106482, "body_markdown": "If you are willing to use a separate software I suggest the Graphity server which exactly solves the problem for activity streams (building on top of neo4j graph data base).\r\n\r\nThe algorithms have been implemented as a standalone REST server so that you can host your own server to deliver activity streams: http://www.rene-pickhardt.de/graphity-server-for-social-activity-streams-released-gplv3/\r\n\r\nIn the paper and benchmark I showed that retrieving news streams depends only linear on the amount of items you want to retrieve without any redundancy you would get from denormalizing the data:\r\n\r\nhttp://www.rene-pickhardt.de/graphity-an-efficient-graph-model-for-retrieving-the-top-k-news-feeds-for-users-in-social-networks/\r\n\r\nOn the above link you find screencasts and a benchmark of this approach (showing that graphity is able to retrieve more than 10k streams per second). \r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1366300467, "answer_id": 16087652, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1366300467, "body_markdown": "There are two railscasts about such an activity stream:\r\n\r\n - http://railscasts.com/episodes/406-public-activity (An activity feed with the gem [public_activity][1])\r\n - http://railscasts.com/episodes/407-activity-feed-from-scratch (Same thing from scratch)\r\n\r\nThose solutions dont include all your requirements, but it should give you some ideas.\r\n\r\n\r\n  [1]: https://github.com/pokonski/public_activity"}, {"tags": [], "down_vote_count": 2, "creation_date": 1371612056, "answer_id": 17182358, "path": "stack.django.answer", "score": 2, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1393968969, "last_edit_date": 1393968969, "body_markdown": "After implementing activity streams to enable social feeds, microblogging, and collaboration features in several applications, I realized that the base functionality is quite common and could be turned into an external service that you utilize via an API.  If you are building the stream into a production application and do not have unique or deeply complex needs, utilizing a proven service may be the best way to go. I would definitely recommend this for production applications over rolling your own simple solution on top of a relational database.\r\n\r\nMy company Collabinate (http://www.collabinate.com) grew out of this realization, and we have implemented a scalable, high performance activity stream engine on top of a graph database to achieve it.  We actually utilized a variant of the Graphity algorithm (adapted from the early work of @RenePickhardt who also provided an answer here) to build the engine.\r\n\r\nIf you want to host the engine yourself or require specialized functionality, the core code is actually open source for non-commercial purposes, so you&#39;re welcome to take a look."}, {"tags": [], "down_vote_count": 2, "creation_date": 1383138835, "answer_id": 19683260, "path": "stack.django.answer", "score": 39, "up_vote_count": 41, "is_accepted": false, "last_activity_date": 1494796458, "last_edit_date": 1494796458, "body_markdown": "We&#39;ve open sourced our approach:\r\nhttps://github.com/tschellenbach/Stream-Framework\r\nIt&#39;s currently the largest open source library aimed at solving this problem.\r\n\r\nThe same team which built Stream Framework also offers a hosted API, which handles the complexity for you. Have a look at [getstream.io][1] There are clients available for Node, Python, Rails and PHP.\r\n\r\nIn addition have a look at this high scalability post were we explain some of the design decisions involved:\r\nhttp://highscalability.com/blog/2013/10/28/design-decisions-for-scaling-your-high-traffic-feeds.html\r\n\r\n[This tutorial][2] will help you setup a system like Pinterest&#39;s feed using Redis. It&#39;s quite easy to get started with.\r\n\r\nTo learn more about feed design I highly recommend reading some of the articles which we based Feedly on:\r\n\r\n- [Yahoo Research Paper][3]\r\n- [Twitter 2013 Redis based][4], with fallback\r\n- [Cassandra at Instagram][5]\r\n- [Etsy feed scaling][6]\r\n- [Facebook history][7]\r\n- [Django project][8], with good naming conventions. (But database only)\r\n- http://activitystrea.ms/specs/atom/1.0/ (actor, verb, object, target)\r\n- [Quora post on best practises][9]\r\n- [Quora scaling a social network feed][10]\r\n- [Redis ruby example][11]\r\n- [FriendFeed approach][12]\r\n- [Thoonk setup][13]\r\n- [Twitter&#39;s Approach][14]\r\n\r\n\r\nThough Stream Framework is Python based it wouldn&#39;t be too hard to use from a Ruby app. You could simply run it as a service and stick a small http API in front of it. We are considering adding an API to access Feedly from other languages. At the moment you&#39;ll have to role your own though.\r\n\r\n\r\n  [1]: https://getstream.io\r\n  [2]: http://www.mellowmorning.com/2013/10/18/scalable-pinterest-tutorial-feedly-redis/\r\n  [3]: http://research.yahoo.com/files/sigmod278-silberstein.pdf\r\n  [4]: http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html\r\n  [5]: http://planetcassandra.org/blog/post/instagram-making-the-switch-to-cassandra-from-redis-75-instasavings\r\n  [6]: http://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture/\r\n  [7]: http://www.infoq.com/presentations/Facebook-Software-Stack\r\n  [8]: http://django-activity-stream.readthedocs.io/en/latest/\r\n  [9]: http://www.quora.com/What-are-best-practices-for-building-something-like-a-News-Feed?q=news%20feeds\r\n  [10]: http://www.quora.com/What-are-the-scaling-issues-to-keep-in-mind-while-developing-a-social-network-feed\r\n  [11]: http://web.archive.org/web/20130525202810/http://blog.waxman.me/how-to-build-a-fast-news-feed-in-redis\r\n  [12]: http://backchannel.org/blog/friendfeed-schemaless-mysql\r\n  [13]: http://blog.thoonk.com/\r\n  [14]: http://www.slideshare.net/nkallen/q-con-3770885"}], "title": "What&#39;s the best manner of implementing a social activity stream?", "view_count": 48857, "answer_count": 13, "code_snippet": ["<code>{id:1, userId:1, type:PHOTO, time:2008-10-15 12:00:00, data:{photoId:2089, photoName:A trip to the beach}}\n</code>", "<code>HISTORY_TYPE\n\nID           - The id of the history type\nNAME         - The name (type of the history)\nDESCRIPTION  - A description\n\nHISTORY_MESSAGES\n\nID\nHISTORY_TYPE - A message of history belongs to a history type\nMESSAGE      - The message to print, I put variables to be replaced by the actual values\n\nHISTORY_ACTIVITY\n\nID\nMESSAGE_ID    - The message ID to use\nVALUES        - The data to use\n</code>", "<code>MESSAGE_ID_1 =&gt; \"User %{user} created a new entry\"\nACTIVITY_ID_1 =&gt; MESSAGE_ID = 1, VALUES = {user: \"Rodrigo\"}\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "django-models"], "creation_date": 1295429436, "body_markdown": "    Foo.objects.get(pk=&quot;foo&quot;)\r\n    &lt;Foo: test&gt;\r\n\r\nIn the database, I want to add another object which is a copy of the object above.\r\n\r\nSuppose my table has one row. I want to insert the first row object into another row with a different primary key. How can I do that?\r\n", "last_edit_date": 1501588071, "up_vote_count": 172, "link": "https://stackoverflow.com/questions/4733609/how-do-i-clone-a-django-model-instance-object-and-save-it-to-the-database", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1295430026, "answer_id": 4733702, "path": "stack.django.answer", "score": 16, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1295440034, "last_edit_date": 1295440034, "body_markdown": "There&#39;s a clone snippet [here](http://djangosnippets.org/snippets/904/), which you can add to your model which does this:\r\n\r\n    def clone(self):\r\n      new_kwargs = dict([(fld.name, getattr(old, fld.name)) for fld in old._meta.fields if fld.name != old._meta.pk]);\r\n      return self.__class__.objects.create(**new_kwargs)"}, {"tags": [], "down_vote_count": 5, "creation_date": 1295446207, "answer_id": 4736172, "path": "stack.django.answer", "score": 283, "up_vote_count": 288, "is_accepted": true, "last_activity_date": 1482395077, "last_edit_date": 1482395077, "body_markdown": "Just change the primary key of your object and run save().\r\n\r\n    obj = Foo.objects.get(pk=&lt;some_existing_pk&gt;)\r\n    obj.pk = None\r\n    obj.save()\r\n\r\nIf you want auto-generated key, set the new key to None.\r\n\r\nMore on UPDATE/INSERT [here][1].\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/dev/ref/models/instances/#how-django-knows-to-update-vs-insert"}, {"tags": [], "down_vote_count": 0, "creation_date": 1334284469, "answer_id": 10134542, "path": "stack.django.answer", "score": 104, "up_vote_count": 104, "is_accepted": false, "last_activity_date": 1493228820, "last_edit_date": 1493228820, "body_markdown": "The Django documentation for database queries includes [a section on copying model instances][1].  Assuming your primary keys are autogenerated, you get the object you want to copy, set the primary key to `None`, and save the object again:\r\n\r\n    blog = Blog(name=&#39;My blog&#39;, tagline=&#39;Blogging is easy&#39;)\r\n    blog.save() # blog.pk == 1\r\n    \r\n    blog.pk = None\r\n    blog.save() # blog.pk == 2\r\n\r\nIn this snippet, the first `save()` creates the original object, and the second `save()` creates the copy.\r\n\r\nIf you keep reading the documentation, there are also examples on how to handle two more complex cases: (1) copying an object which is an instance of a model subclass, and (2) also copying related objects, including objects in many-to-many relations.\r\n\r\n----------\r\n\r\nNote on miah&#39;s answer: Setting the pk to `None` is mentioned in miah&#39;s answer, although it&#39;s not presented front and center. So my answer mainly serves to emphasize that method as the Django-recommended way to do it.\r\n\r\nHistorical note: This wasn&#39;t explained in the Django docs until version 1.4. It has been possible since before 1.4, though.\r\n\r\nPossible future functionality: The aforementioned docs change was made in [this ticket][2]. On the ticket&#39;s comment thread, there was also some discussion on adding a built-in `copy` function for model classes, but as far as I know they decided not to tackle that problem yet.  So this &quot;manual&quot; way of copying will probably have to do for now.\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/stable/topics/db/queries/#copying-model-instances\r\n  [2]: https://code.djangoproject.com/ticket/4027"}, {"tags": [], "down_vote_count": 0, "creation_date": 1350432778, "answer_id": 12925333, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1485321869, "last_edit_date": 1485321869, "body_markdown": "How to do this was added to the official Django docs in Django1.4\r\n\r\nhttps://docs.djangoproject.com/en/1.10/topics/db/queries/#copying-model-instances\r\n\r\nThe official answer is similar to miah&#39;s answer, but the docs point out some difficulties with  inheritance and related objects, so you should probably make sure you read the docs.\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.4/topics/db/queries/#copying-model-instances"}, {"tags": [], "down_vote_count": 1, "creation_date": 1369367430, "answer_id": 16727397, "path": "stack.django.answer", "score": 32, "up_vote_count": 33, "is_accepted": false, "last_activity_date": 1383215180, "last_edit_date": 1383215180, "body_markdown": "Be careful here.  This can be extremely expensive if you&#39;re in a loop of some kind and you&#39;re retrieving objects one by one.  If you don&#39;t want the call to the database, just do:\r\n\r\n    from copy import deepcopy\r\n\r\n    new_instance = deepcopy(object_you_want_copied)\r\n    new_instance.id = None\r\n    new_instance.save()\r\n\r\nIt does the same thing as some of these other answers, but it doesn&#39;t make the database call to retrieve an object.  This is also useful if you want to make a copy of an object that doesn&#39;t exist yet in the database."}, {"tags": [], "down_vote_count": 0, "creation_date": 1402920263, "answer_id": 24243330, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1437375433, "last_edit_date": 1437375433, "body_markdown": "Use the below code :\r\n\r\n    from django.forms import model_to_dict\r\n    \r\n    instance = Some.objects.get(slug=&#39;something&#39;)\r\n    \r\n    kwargs = model_to_dict(instance, exclude=[&#39;id&#39;])\r\n    new_instance = Some.objects.create(**kwargs)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1410508791, "answer_id": 25803483, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1410508791, "body_markdown": "setting pk to None is better, sinse Django can correctly create a pk for you\r\n\r\n    object_copy = MyObject.objects.get(pk=...)\r\n    object_copy.pk = None\r\n    object_copy.save()"}, {"tags": [], "down_vote_count": 0, "creation_date": 1447899966, "answer_id": 33794192, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1447899966, "last_edit_date": 1495540966, "body_markdown": "To clone a model with multiple inheritance levels, i.e. &gt;= 2, or ModelC below\r\n\r\n    class ModelA(models.Model):\r\n        info1 = models.CharField(max_length=64)\r\n\r\n    class ModelB(ModelA):\r\n        info2 = models.CharField(max_length=64)\r\n\r\n    class ModelC(ModelB):\r\n        info3 = models.CharField(max_length=64)\r\n\r\nPlease refer the question [here][1].\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/15907091/clone-an-inherited-django-model-instance"}, {"tags": [], "down_vote_count": 0, "creation_date": 1482401233, "answer_id": 41280546, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1482401233, "body_markdown": "Try this\r\n\r\n    original_object = Foo.objects.get(pk=&quot;foo&quot;)\r\n    v = vars(original_object)\r\n    v.pop(&quot;pk&quot;)\r\n    new_object = Foo(**v)\r\n    new_object.save()"}], "title": "How do I clone a Django model instance object and save it to the database?", "view_count": 75516, "answer_count": 9, "code_snippet": ["<code>Foo.objects.get(pk=\"foo\")\n&lt;Foo: test&gt;\n</code>", "<code>obj = Foo.objects.get(pk=&lt;some_existing_pk&gt;)\nobj.pk = None\nobj.save()\n</code>", "<code>obj.pk</code>", "<code>obj.id</code>", "<code>None</code>", "<code>blog = Blog(name='My blog', tagline='Blogging is easy')\nblog.save() # blog.pk == 1\n\nblog.pk = None\nblog.save() # blog.pk == 2\n</code>", "<code>save()</code>", "<code>save()</code>", "<code>None</code>", "<code>copy</code>", "<code>from copy import deepcopy\n\nnew_instance = deepcopy(object_you_want_copied)\nnew_instance.id = None\nnew_instance.save()\n</code>", "<code>def clone(self):\n  new_kwargs = dict([(fld.name, getattr(old, fld.name)) for fld in old._meta.fields if fld.name != old._meta.pk]);\n  return self.__class__.objects.create(**new_kwargs)\n</code>", "<code>from django.forms import model_to_dict\n\ninstance = Some.objects.get(slug='something')\n\nkwargs = model_to_dict(instance, exclude=['id'])\nnew_instance = Some.objects.create(**kwargs)\n</code>", "<code>model_to_dict</code>", "<code>exclude</code>", "<code>pop</code>", "<code>model_to_dict(instance, exclude=['id'])</code>", "<code>stable</code>", "<code>object_copy = MyObject.objects.get(pk=...)\nobject_copy.pk = None\nobject_copy.save()\n</code>", "<code>class ModelA(models.Model):\n    info1 = models.CharField(max_length=64)\n\nclass ModelB(ModelA):\n    info2 = models.CharField(max_length=64)\n\nclass ModelC(ModelB):\n    info3 = models.CharField(max_length=64)\n</code>", "<code>original_object = Foo.objects.get(pk=\"foo\")\nv = vars(original_object)\nv.pop(\"pk\")\nnew_object = Foo(**v)\nnew_object.save()\n</code>"], "path": "stack.django"}, {"tags": ["python", "naming-conventions", "private", "underscores", "double-underscore"], "creation_date": 1250701917, "body_markdown": "I want to clear this up once and for all. Can someone please explain the exact meaning of having leading underscores before an object&#39;s name in Python? Also explain the difference between a single and a double leading underscore. Also, does that meaning stay the same whether the object in question is a variable, a function, a method, etc?", "last_edit_date": 1486908935, "up_vote_count": 901, "link": "https://stackoverflow.com/questions/1301346/what-is-the-meaning-of-a-single-and-a-double-underscore-before-an-object-name", "_childDocuments_": [{"tags": [], "down_vote_count": 5, "creation_date": 1250702153, "answer_id": 1301369, "path": "stack.django.answer", "score": 852, "up_vote_count": 857, "is_accepted": true, "last_activity_date": 1360616063, "last_edit_date": 1360616063, "body_markdown": "Single Underscore\r\n-----\r\nNames, in a class, with a leading underscore are simply to indicate to other programmers that the attribute or method is intended to be private.  However, nothing special is done with the name itself.\r\n\r\nTo quote [PEP-8][1]:\r\n\r\n&gt; _single_leading_underscore: weak &quot;internal use&quot; indicator. E.g. `from M import *` does not import objects whose name starts with an underscore.\r\n\r\n\r\nDouble Underscore (Name Mangling)\r\n------\r\n\r\nFrom [the Python docs](http://docs.python.org/tutorial/classes.html#private-variables-and-class-local-references):\r\n\r\n&gt; Any identifier of the form `__spam` (at least two leading underscores, at most one trailing underscore) is textually replaced with `_classname__spam`, where `classname` is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, so it can be used to define class-private instance and class variables, methods, variables stored in globals, and even variables stored in instances. private to this class on instances of other classes. \r\n\r\nAnd a warning from the same page:\r\n\r\n&gt; Name mangling is intended to give classes an easy way to define \u201cprivate\u201d instance variables and methods, without having to worry about instance variables defined by derived classes, or mucking with instance variables by code outside the class. Note that the mangling rules are designed mostly to avoid accidents; it still is possible for a determined soul to access or modify a variable that is considered private.\r\n\r\nExample\r\n-------\r\n\r\n    &gt;&gt;&gt; class MyClass():\r\n    ...     def __init__(self):\r\n    ...             self.__superprivate = &quot;Hello&quot;\r\n    ...             self._semiprivate = &quot;, world!&quot;\r\n    ...\r\n    &gt;&gt;&gt; mc = MyClass()\r\n    &gt;&gt;&gt; print mc.__superprivate\r\n    Traceback (most recent call last):\r\n      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    AttributeError: myClass instance has no attribute &#39;__superprivate&#39;\r\n    &gt;&gt;&gt; print mc._semiprivate\r\n    , world!\r\n    &gt;&gt;&gt; print mc.__dict__\r\n    {&#39;_MyClass__superprivate&#39;: &#39;Hello&#39;, &#39;_semiprivate&#39;: &#39;, world!&#39;}\r\n\r\n[1]: http://www.python.org/dev/peps/pep-0008/"}, {"tags": [], "down_vote_count": 2, "creation_date": 1250702231, "answer_id": 1301384, "path": "stack.django.answer", "score": 3, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1250702231, "body_markdown": "Single leading underscores is a convention. there is no difference from the interpreter&#39;s point of view if whether names starts with a single underscore or not. \r\n\r\nDouble leading and trailing underscores are used for built-in methods, such as `__init__`, `__bool__`, etc.\r\n\r\nDouble leading underscores w/o trailing counterparts are a convention too, however, the class methods will be [mangled](http://docs.python.org/tutorial/classes.html#private-variables) by the interpreter. For variables or basic function names no difference exists."}, {"tags": [], "down_vote_count": 4, "creation_date": 1250702489, "answer_id": 1301409, "path": "stack.django.answer", "score": 233, "up_vote_count": 237, "is_accepted": false, "last_activity_date": 1250703572, "last_edit_date": 1250703572, "body_markdown": "`__foo__`: this is just a convention, a way for the Python system to use names that won&#39;t conflict with user names.\r\n\r\n`_foo`: this is just a convention, a way for the programmer to indicate that the variable is private (whatever that means in Python).\r\n\r\n`__foo`: this has real meaning: the interpreter replaces this name with `_classname__foo` as a way to ensure that the name will not overlap with a similar name in another class.\r\n\r\nNo other form of underscores have meaning in the Python world.\r\n\r\nThere&#39;s no difference between class, variable, global, etc in these conventions."}, {"tags": [], "down_vote_count": 0, "creation_date": 1250703064, "answer_id": 1301456, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1250703064, "body_markdown": "Your question is good, it is not only about methods. Functions and objects in modules are commonly prefixed with one underscore as well, and can be prefixed by two.\r\n\r\nBut __double_underscore names are not name-mangled in modules, for example. What happens is that names beginning with one (or more) underscores are not imported if you import all from a module (from module import *), nor are the names shown in help(module).\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1250704356, "answer_id": 1301557, "path": "stack.django.answer", "score": 261, "up_vote_count": 262, "is_accepted": false, "last_activity_date": 1370858743, "last_edit_date": 1370858743, "body_markdown": "Excellent answers so far but some tidbits are missing. A single leading underscore isn&#39;t exactly *just* a convention: if you use `from foobar import *`, and module `foobar` does not define an `__all__` list, the names imported from the module **do not** include those with a leading underscore. Let&#39;s say it&#39;s *mostly* a convention, since this case is a pretty obscure corner;-).\r\n\r\nThe leading-underscore convention is widely used not just for *private* names, but also for what C++ would call *protected* ones -- for example, names of methods that are fully intended to be overridden by subclasses (even ones that **have** to be overridden since in the base class they `raise NotImplementedError`!-) are often single-leading-underscore names to indicate to code **using** instances of that class (or subclasses) that said methods are not meant to be called directly.\r\n\r\nFor example, to make a thread-safe queue with a different queueing discipline than FIFO, one imports Queue, subclasses Queue.Queue, and overrides such methods as `_get` and `_put`; &quot;client code&quot; never calls those (&quot;hook&quot;) methods, but rather the (&quot;organizing&quot;) public methods such as `put` and `get` (this is known as the [Template Method][1] design pattern -- see e.g. [here][2] for an interesting presentation based on a video of a talk of mine on the subject, with the addition of synopses of the transcript).\r\n\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Template_method_pattern\r\n  [2]: http://www.catonmat.net/blog/learning-python-design-patterns-through-video-lectures/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1326299302, "answer_id": 8822881, "path": "stack.django.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1326299302, "body_markdown": "Sometimes you have what appears to be a tuple with a leading underscore as in \r\n\r\n    def foo(bar):\r\n        return _(&#39;my_&#39; + bar)\r\n\r\nIn this case, what&#39;s going on is that _() is an alias for a localization function that operates on text to put it into the proper language, etc. based on the locale. For example, Sphinx does this, and you&#39;ll find among the imports\r\n\r\n    from sphinx.locale import l_, _\r\n\r\nand in sphinx.locale, _() is assigned as an alias of some localization function.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1348779404, "answer_id": 12629901, "path": "stack.django.answer", "score": 160, "up_vote_count": 160, "is_accepted": false, "last_activity_date": 1463479748, "last_edit_date": 1463479748, "body_markdown": "`._variable` is semiprivate and meant just for convention\r\n\r\n`.__variable` is often incorrectly considered superprivate, while it&#39;s actual meaning is just to namemangle to **prevent accidental access**[\\[1\\]][1]\r\n\r\n`.__variable__` is typically reserved for builtin methods or variables\r\n\r\nYou can still access `.__mangled` variables if you desperately want to. The double underscores just namemangles, or renames, the variable to something like `instance._className__mangled`\r\n\r\nExample:\r\n\r\n    class Test(object):\r\n        def __init__(self):\r\n            self.__a = &#39;a&#39;\r\n            self._b = &#39;b&#39;\r\n    \r\n    &gt;&gt;&gt; t = Test()\r\n    &gt;&gt;&gt; t._b\r\n    &#39;b&#39;\r\n\r\nt._b is accessible because it is only hidden by convention\r\n\r\n    &gt;&gt;&gt; t.__a\r\n    Traceback (most recent call last):\r\n      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    AttributeError: &#39;Test&#39; object has no attribute &#39;__a&#39;\r\n\r\nt.__a isn&#39;t found because it no longer exists due to namemangling\r\n\r\n    &gt;&gt;&gt; t._Test__a\r\n    &#39;a&#39;\r\n\r\nBy accessing `instance._className__variable` instead of just the double underscore name, you can access the hidden value\r\n\r\n\r\n  [1]: https://www.youtube.com/watch?v=HTLu2DFOdTg&amp;t=33m8s"}, {"tags": [], "down_vote_count": 1, "creation_date": 1365991094, "answer_id": 16006566, "path": "stack.django.answer", "score": 7, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1365991094, "body_markdown": "If one really wants to make a variable read-only, IMHO the best way would be to use property() with only getter passed to it. With property() we can have complete control over the data.\r\n\r\n    class PrivateVarC(object):\r\n\r\n        def get_x(self):\r\n            pass\r\n\r\n        def set_x(self, val):\r\n            pass\r\n\r\n        rwvar = property(get_p, set_p)  \r\n\r\n        ronly = property(get_p) \r\n\r\nI understand that OP asked a little different question but since I found another question asking for &#39;how to set private variables&#39; marked duplicate with this one, I thought of adding this additional info here."}, {"tags": [], "down_vote_count": 0, "creation_date": 1408734948, "answer_id": 25454077, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1408734948, "body_markdown": "Here is a simple illustrative example on how double underscore properties can affect an inherited class. So with the following setup:\r\n\r\n    class parent(object):\r\n        __default = &quot;parent&quot;\r\n        def __init__(self, name=None):\r\n            self.default = name or self.__default\r\n        \r\n        @property\r\n        def default(self):\r\n            return self.__default\r\n\r\n        @default.setter\r\n        def default(self, value):\r\n            self.__default = value\r\n\r\n    \r\n    class child(parent):\r\n        __default = &quot;child&quot;\r\n\r\nif you then create a child instance in the python REPL, you will see the below\r\n\r\n    child_a = child()\r\n    child_a.default            # &#39;parent&#39;\r\n    child_a._child__default    # &#39;child&#39;\r\n    child_a._parent__default   # &#39;parent&#39;\r\n\r\n    child_b = child(&quot;orphan&quot;)\r\n    ## this will show \r\n    child_b.default            # &#39;orphan&#39;\r\n    child_a._child__default    # &#39;child&#39;\r\n    child_a._parent__default   # &#39;orphan&#39;\r\n\r\n\r\nThis may be obvious to some, but it caught me off guard in a much more complex environment"}, {"tags": [], "down_vote_count": 0, "creation_date": 1418638220, "answer_id": 27481645, "path": "stack.django.answer", "score": 78, "up_vote_count": 78, "is_accepted": false, "last_activity_date": 1509053237, "last_edit_date": 1509053237, "body_markdown": "**Single underscore at the beginning:**\r\n\r\nPython doesn&#39;t have real private methods, so one underscore at the start of a method or attribute name means you shouldn&#39;t access this method, because it&#39;s not part of the API.\r\n\r\n    class BaseForm(StrAndUnicode):\r\n        \r\n        def _get_errors(self):\r\n            &quot;Returns an ErrorDict for the data provided for the form&quot;\r\n            if self._errors is None:\r\n                self.full_clean()\r\n            return self._errors\r\n    \r\n        errors = property(_get_errors)\r\n\r\n\r\n\r\n\r\ncode snippet taken from django source code (django/forms/forms.py). This means errors is a property, and it&#39;s part of the module, but the method this property calls, _get_errors, is &quot;private&quot;, so you shouldn&#39;t access it.\r\n\r\n**Two underscores at the beginning:**\r\n\r\nThis causes a lot of confusion. It should not be used to create a private method. It should be used to avoid your method to be overridden by a subclass or accessed accidentally. Let&#39;s see an example:\r\n\r\n\r\n    class A(object):\r\n        def __test(self):\r\n            print &quot;I&#39;m test method in class A&quot;\r\n    \r\n        def test(self):\r\n            self.__test()\r\n     \r\n    a = A()\r\n    a.test()\r\n\r\n\r\n\r\nOutput: \r\n\r\n    $ python test.py\r\n    I&#39;m test method in class A\r\n\r\n\r\nNow create a subclass B and do customization for __test method\r\n\r\n\r\n    class B(A):\r\n        def __test(self):\r\n            print &quot;I&#39;m test method in class B&quot;\r\n\r\n    b = B()\r\n    b.test()\r\n\r\nOutput will be....\r\n\r\n    $ python test.py\r\n    I&#39;m test method in class A\r\n\r\n\r\nAs we have seen, A.test() didn&#39;t call B.__test() methods, as we might expect. But in fact, this is the correct behavior for __. So when you create a method starting with __ it means that you don&#39;t want to anyone to be able to override it, it will be accessible only from inside the own class.\r\n\r\n\r\n**Two underscores at the beginning and at the end:**\r\n\r\n\r\n\r\nWhen we see a method like `__this__`, don&#39;t call it. Because it means it&#39;s a method which python calls, not by you. Let&#39;s take a look:\r\n\r\n\r\n    &gt;&gt;&gt; name = &quot;test string&quot;\r\n    &gt;&gt;&gt; name.__len__()\r\n    11\r\n    &gt;&gt;&gt; len(name)\r\n    11\r\n\r\n    &gt;&gt;&gt; number = 10\r\n    &gt;&gt;&gt; number.__add__(40)\r\n    50\r\n    &gt;&gt;&gt; number + 50\r\n    60\r\n\r\n\r\n\r\n\r\nThere is always an operator or native function which calls these magic methods. Sometimes it&#39;s just a hook python calls in specific situations. For example `__init__()` is called when the object is created after `__new__()` is called to build the instance...\r\n\r\n\r\nLet&#39;s take an example...\r\n\r\n\r\n    class FalseCalculator(object):\r\n    \r\n        def __init__(self, number):\r\n            self.number = number\r\n    \r\n        def __add__(self, number):\r\n            return self.number - number\r\n    \r\n        def __sub__(self, number):\r\n            return self.number + number\r\n    \r\n\r\n\r\n    number = FalseCalculator(20)\r\n    print number + 10      # 10\r\n    print number - 20      # 40\r\n\r\nFor more details [PEP-8 guide][1] will help more.\r\n\r\n\r\n  [1]: https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables\r\n\r\n\r\n\r\nPlease find more magic methods in python here. https://github.com/RafeKettler/magicmethods/blob/master/magicmethods.pdf"}, {"tags": [], "down_vote_count": 0, "creation_date": 1423331830, "answer_id": 28385489, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1423331830, "body_markdown": "\u201cPrivate\u201d instance variables that cannot be accessed except from inside an object don\u2019t exist in Python. However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g. _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member). It should be considered an implementation detail and subject to change without notice.\r\n\r\nreference\r\nhttps://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references"}, {"tags": [], "down_vote_count": 0, "creation_date": 1509817570, "answer_id": 47113678, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1509817909, "last_edit_date": 1509817909, "body_markdown": "Getting the facts of _ and __ is pretty easy; the other answers express them pretty well. The usage is much harder to determine. \r\n\r\nThis is how I see it:\r\n\r\n    _\r\n\r\nShould be used to indicate that a function is not for public use as for example an API. This and the import restriction make it behave much like `internal` in c#.\r\n\r\n    __\r\n\r\nShould be used to avoid name collision in the inheritace hirarchy and to avoid latebinding. Much like private in c#.\r\n\r\n==&gt; \r\n\r\nIf you want to indicate that something is not for public use, but it should act like `protected` use `_`.\r\nIf you want to indicate that something is not for public use, but it should act like `private` use `__`.\r\n\r\nThis is also a quote that I like very much:\r\n\r\n&gt; The problem is that the author of a class may legitimately think &quot;this\r\n&gt; attribute/method name should be private, only accessible from within\r\n&gt; this class definition&quot; and use the __private convention. But later on,\r\n&gt; a user of that class may make a subclass that legitimately needs\r\n&gt; access to that name. So either the superclass has to be modified\r\n&gt; (which may be difficult or impossible), or the subclass code has to\r\n&gt; use manually mangled names (which is ugly and fragile at best).\r\n\r\nBut the problem with that is in my opinion that if there&#39;s no IDE that warns you when you override methods, finding the error might take you a while if you have accidentially overriden a method from a base-class."}, {"tags": [], "down_vote_count": 0, "creation_date": 1516888042, "answer_id": 48444449, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1516888042, "body_markdown": "**Underscore (_) in Python**\r\n\r\n**Following are different places where _ is used in Python:**\r\n\r\n**Single Underscore:**\r\n\r\n - In Interpreter\r\n - After a name\r\n - Before a name\r\n\r\n**Double Underscore:**\r\n\r\n - __leading_double_underscore\r\n\r\n - __before_after__\r\n\r\n - Single Underscore\r\n\r\n**In Interpreter:**\r\n\r\n*_ returns the value of last executed expression value in Python Prompt/Interpreter*\r\n\r\n    &gt;&gt;&gt; a = 10\r\n    &gt;&gt;&gt; b = 10\r\n    &gt;&gt;&gt; _\r\n    Traceback (most recent call last):\r\n    File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    NameError: name &#39;_&#39; is not defined\r\n    &gt;&gt;&gt; a+b\r\n    20\r\n    &gt;&gt;&gt; _\r\n    20\r\n    &gt;&gt;&gt; _ * 2\r\n    40\r\n    &gt;&gt;&gt; _\r\n    40\r\n    &gt;&gt;&gt; _ / 2\r\n    20\r\n\r\n**For ignoring values:**\r\n\r\nMultiple time we do not want return values at that time assign those values to Underscore. It used as throwaway variable.\r\n\r\n    # Ignore a value of specific location/index\r\n    for _ in rang(10)\r\n        print &quot;Test&quot;\r\n     \r\n    # Ignore a value when unpacking\r\n    a,b,_,_ = my_method(var1)\r\n\r\n**After a name**\r\n\r\nPython has their by default keywords which we can not use as the variable name. To avoid such conflict between python keyword and variable we use underscore after name\r\n\r\n**Example:**\r\n\r\n    &gt;&gt;&gt; class MyClass():\r\n    ...     def __init__(self):\r\n    ...             print &quot;OWK&quot;\r\n     \r\n    &gt;&gt;&gt; def my_defination(var1 = 1, class_ = MyClass):\r\n    ...     print var1\r\n    ...     print class_\r\n     \r\n    &gt;&gt;&gt; my_defination()\r\n    1\r\n    __main__.MyClass\r\n    &gt;&gt;&gt;\r\n\r\n**Before a name**\r\n\r\nLeading Underscore before variable/function/method name indicates to programmer that It is for internal use only, that can be modified whenever class want.\r\n\r\nHere name prefix by underscore is treated as non-public.\r\nIf specify from Import * all the name starts with _ will not import.\r\n\r\nPython does not specify truly private so this ones can be call directly from other modules if it is specified in __all__, We also call it weak Private\r\n\r\n    class Prefix:\r\n    ...     def __init__(self):\r\n    ...             self.public = 10\r\n    ...             self._private = 12\r\n    &gt;&gt;&gt; test = Prefix()\r\n    &gt;&gt;&gt; test.public\r\n    10\r\n    &gt;&gt;&gt; test._private\r\n    12\r\n    Python class_file.py\r\n    \r\n    def public_api():\r\n        print &quot;public api&quot;\r\n     \r\n    def _private_api():\r\n        print &quot;private api&quot;\r\n\r\nCalling file from Prompt\r\n\r\n    &gt;&gt;&gt; from class_file import *\r\n    &gt;&gt;&gt; public_api()\r\n    public api\r\n     \r\n    &gt;&gt;&gt; _private_api()\r\n    Traceback (most recent call last):\r\n    File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    NameError: name &#39;_private_api&#39; is not defined\r\n     \r\n    &gt;&gt;&gt; import class_file\r\n    &gt;&gt;&gt; class_file.public_api()\r\n    public api\r\n    &gt;&gt;&gt; class_file._private_api()\r\n    private api\r\n    Double Underscore(__)\r\n\r\n**__leading_double_underscore**\r\n\r\nLeading double underscore tell python interpreter to rewrite name in order to avoid conflict in subclass.Interpreter changes variable name with class extension and that feature known as the Mangling.\r\ntestFile.py\r\n\r\n    class Myclass():\r\n        def __init__(self):\r\n            self.__variable = 10\r\n\r\nCalling from Interpreter\r\n\r\n    &gt;&gt;&gt; import testFile\r\n    &gt;&gt;&gt; obj = testFile.Myclass()\r\n    &gt;&gt;&gt; obj.__variable\r\n    Traceback (most recent call last):\r\n    File &quot;&quot;, line 1, in\r\n    AttributeError: Myclass instance has no attribute &#39;__variable&#39;\r\n    nce has no attribute &#39;Myclass&#39;\r\n    &gt;&gt;&gt; obj._Myclass__variable\r\n    10\r\n\r\nIn Mangling python interpreter modify variable name with ___. So Multiple time It use as the Private member because another class can not access that variable directly. Main purpose for __ is to use variable/method in class only If you want to use it outside of the class you can make public api\r\n\r\n    class Myclass():\r\n        def __init__(self):\r\n            self.__variable = 10\r\n        def func(self)\r\n            print self.__variable\r\n\r\nCalling from Interpreter\r\n\r\n    &gt;&gt;&gt; import testFile\r\n    &gt;&gt;&gt; obj = testFile.Myclass()\r\n    &gt;&gt;&gt; obj.func()\r\n    10\r\n\r\n**__BEFORE_AFTER__**\r\n\r\nName with start with __ and ends with same considers special methods in Python. Python provide this methods to use it as the operator overloading depending on the user.\r\n\r\nPython provides this convention to differentiate between the user defined function with the module\u2019s function\r\n\r\n    class Myclass():\r\n        def __add__(self,a,b):\r\n            print a*b\r\n\r\nCalling from Interpreter\r\n\r\n    &gt;&gt;&gt; import testFile\r\n    &gt;&gt;&gt; obj = testFile.Myclass()\r\n    &gt;&gt;&gt; obj.__add__(1,2)\r\n    2\r\n    &gt;&gt;&gt; obj.__add__(5,2)\r\n    10\r\n\r\n[Reference][1]\r\n\r\n\r\n  [1]: https://www.geeksforgeeks.org/underscore-_-python/"}], "title": "What is the meaning of a single- and a double-underscore before an object name?", "view_count": 252559, "answer_count": 13, "code_snippet": ["<code>from M import *</code>", "<code>__spam</code>", "<code>_classname__spam</code>", "<code>classname</code>", "<code>&gt;&gt;&gt; class MyClass():\n...     def __init__(self):\n...             self.__superprivate = \"Hello\"\n...             self._semiprivate = \", world!\"\n...\n&gt;&gt;&gt; mc = MyClass()\n&gt;&gt;&gt; print mc.__superprivate\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: myClass instance has no attribute '__superprivate'\n&gt;&gt;&gt; print mc._semiprivate\n, world!\n&gt;&gt;&gt; print mc.__dict__\n{'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'}\n</code>", "<code>__</code>", "<code>a, __ = foo()</code>", "<code>from foobar import *</code>", "<code>foobar</code>", "<code>__all__</code>", "<code>raise NotImplementedError</code>", "<code>_get</code>", "<code>_put</code>", "<code>put</code>", "<code>get</code>", "<code>_var_name</code>", "<code>var_name</code>", "<code>__all__</code>", "<code>__foo__</code>", "<code>_foo</code>", "<code>__foo</code>", "<code>_classname__foo</code>", "<code>__foo</code>", "<code>instance.__foo()</code>", "<code>from module import *</code>", "<code>_foo</code>", "<code>B</code>", "<code>A</code>", "<code>foo()</code>", "<code>B.foo()</code>", "<code>.foo()</code>", "<code>A</code>", "<code>B</code>", "<code>B.foo()</code>", "<code>super(B).foo()</code>", "<code>._variable</code>", "<code>.__variable</code>", "<code>.__variable__</code>", "<code>.__mangled</code>", "<code>instance._className__mangled</code>", "<code>class Test(object):\n    def __init__(self):\n        self.__a = 'a'\n        self._b = 'b'\n\n&gt;&gt;&gt; t = Test()\n&gt;&gt;&gt; t._b\n'b'\n</code>", "<code>&gt;&gt;&gt; t.__a\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'Test' object has no attribute '__a'\n</code>", "<code>&gt;&gt;&gt; t._Test__a\n'a'\n</code>", "<code>instance._className__variable</code>", "<code>class BaseForm(StrAndUnicode):\n\n    def _get_errors(self):\n        \"Returns an ErrorDict for the data provided for the form\"\n        if self._errors is None:\n            self.full_clean()\n        return self._errors\n\n    errors = property(_get_errors)\n</code>", "<code>class A(object):\n    def __test(self):\n        print \"I'm test method in class A\"\n\n    def test(self):\n        self.__test()\n\na = A()\na.test()\n</code>", "<code>$ python test.py\nI'm test method in class A\n</code>", "<code>class B(A):\n    def __test(self):\n        print \"I'm test method in class B\"\n\nb = B()\nb.test()\n</code>", "<code>$ python test.py\nI'm test method in class A\n</code>", "<code>__this__</code>", "<code>&gt;&gt;&gt; name = \"test string\"\n&gt;&gt;&gt; name.__len__()\n11\n&gt;&gt;&gt; len(name)\n11\n\n&gt;&gt;&gt; number = 10\n&gt;&gt;&gt; number.__add__(40)\n50\n&gt;&gt;&gt; number + 50\n60\n</code>", "<code>__init__()</code>", "<code>__new__()</code>", "<code>class FalseCalculator(object):\n\n    def __init__(self, number):\n        self.number = number\n\n    def __add__(self, number):\n        return self.number - number\n\n    def __sub__(self, number):\n        return self.number + number\n\n\n\nnumber = FalseCalculator(20)\nprint number + 10      # 10\nprint number - 20      # 40\n</code>", "<code>def foo(bar):\n    return _('my_' + bar)\n</code>", "<code>from sphinx.locale import l_, _\n</code>", "<code>class PrivateVarC(object):\n\n    def get_x(self):\n        pass\n\n    def set_x(self, val):\n        pass\n\n    rwvar = property(get_p, set_p)  \n\n    ronly = property(get_p) \n</code>", "<code>__init__</code>", "<code>__bool__</code>", "<code>&gt;&gt;&gt; a = 10\n&gt;&gt;&gt; b = 10\n&gt;&gt;&gt; _\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name '_' is not defined\n&gt;&gt;&gt; a+b\n20\n&gt;&gt;&gt; _\n20\n&gt;&gt;&gt; _ * 2\n40\n&gt;&gt;&gt; _\n40\n&gt;&gt;&gt; _ / 2\n20\n</code>", "<code># Ignore a value of specific location/index\nfor _ in rang(10)\n    print \"Test\"\n\n# Ignore a value when unpacking\na,b,_,_ = my_method(var1)\n</code>", "<code>&gt;&gt;&gt; class MyClass():\n...     def __init__(self):\n...             print \"OWK\"\n\n&gt;&gt;&gt; def my_defination(var1 = 1, class_ = MyClass):\n...     print var1\n...     print class_\n\n&gt;&gt;&gt; my_defination()\n1\n__main__.MyClass\n&gt;&gt;&gt;\n</code>", "<code>class Prefix:\n...     def __init__(self):\n...             self.public = 10\n...             self._private = 12\n&gt;&gt;&gt; test = Prefix()\n&gt;&gt;&gt; test.public\n10\n&gt;&gt;&gt; test._private\n12\nPython class_file.py\n\ndef public_api():\n    print \"public api\"\n\ndef _private_api():\n    print \"private api\"\n</code>", "<code>&gt;&gt;&gt; from class_file import *\n&gt;&gt;&gt; public_api()\npublic api\n\n&gt;&gt;&gt; _private_api()\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name '_private_api' is not defined\n\n&gt;&gt;&gt; import class_file\n&gt;&gt;&gt; class_file.public_api()\npublic api\n&gt;&gt;&gt; class_file._private_api()\nprivate api\nDouble Underscore(__)\n</code>", "<code>class Myclass():\n    def __init__(self):\n        self.__variable = 10\n</code>", "<code>&gt;&gt;&gt; import testFile\n&gt;&gt;&gt; obj = testFile.Myclass()\n&gt;&gt;&gt; obj.__variable\nTraceback (most recent call last):\nFile \"\", line 1, in\nAttributeError: Myclass instance has no attribute '__variable'\nnce has no attribute 'Myclass'\n&gt;&gt;&gt; obj._Myclass__variable\n10\n</code>", "<code>class Myclass():\n    def __init__(self):\n        self.__variable = 10\n    def func(self)\n        print self.__variable\n</code>", "<code>&gt;&gt;&gt; import testFile\n&gt;&gt;&gt; obj = testFile.Myclass()\n&gt;&gt;&gt; obj.func()\n10\n</code>", "<code>class Myclass():\n    def __add__(self,a,b):\n        print a*b\n</code>", "<code>&gt;&gt;&gt; import testFile\n&gt;&gt;&gt; obj = testFile.Myclass()\n&gt;&gt;&gt; obj.__add__(1,2)\n2\n&gt;&gt;&gt; obj.__add__(5,2)\n10\n</code>", "<code>class parent(object):\n    __default = \"parent\"\n    def __init__(self, name=None):\n        self.default = name or self.__default\n\n    @property\n    def default(self):\n        return self.__default\n\n    @default.setter\n    def default(self, value):\n        self.__default = value\n\n\nclass child(parent):\n    __default = \"child\"\n</code>", "<code>child_a = child()\nchild_a.default            # 'parent'\nchild_a._child__default    # 'child'\nchild_a._parent__default   # 'parent'\n\nchild_b = child(\"orphan\")\n## this will show \nchild_b.default            # 'orphan'\nchild_a._child__default    # 'child'\nchild_a._parent__default   # 'orphan'\n</code>", "<code>_\n</code>", "<code>internal</code>", "<code>__\n</code>", "<code>protected</code>", "<code>_</code>", "<code>private</code>", "<code>__</code>"], "path": "stack.django"}, {"tags": ["python", "proxy", "pip"], "creation_date": 1357258937, "body_markdown": "I am trying to use pip behind a proxy at work.\r\n\r\nOne of the answers from [this post][1] suggested using [CNTLM][2]. I installed and configured it per [this other post][3], but running `cntlm.exe -c cntlm.ini -I -M http://google.com` gave the error `Connection to proxy failed, bailing out`.\r\n\r\nI also tried `pip install -\u2013proxy=user:pass@localhost:3128` (the default CNTLM port) but that raised `Cannot fetch index base URL http://pypi.python.org/simple/`. Clearly something&#39;s up with the proxy.\r\n\r\nDoes anyone know how to check more definitively whether CNTLM is set up right, or if there&#39;s another way around this altogether? I know you can also set the `http_proxy` environment variable as described [here][4] but I&#39;m not sure what credentials to put in. The ones from `cntlm.ini`?\r\n\r\n  [1]: https://stackoverflow.com/questions/9698557/how-to-use-pip-on-windows-behind-an-authenticating-proxy\r\n  [2]: http://cntlm.sourceforge.net/\r\n  [3]: https://stackoverflow.com/questions/9181637/how-to-fill-proxy-information-in-cntlm-config-file\r\n  [4]: https://stackoverflow.com/questions/11726881/how-to-set-an-http-proxy-in-python-2-7", "last_edit_date": 1508192137, "up_vote_count": 179, "link": "https://stackoverflow.com/questions/14149422/using-pip-behind-a-proxy", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1357267577, "answer_id": 14150397, "path": "stack.django.answer", "score": 20, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1357267577, "body_markdown": "for windows; set your proxy in command prompt as&lt;br&gt; \r\n`set HTTP_PROXY=domain\\username:password@myproxy:myproxyport`\r\n\r\nexample: &lt;br&gt;`set http_proxy=IND\\namit.kewat:xl123456@192.168.180.150:8880`"}, {"tags": [], "down_vote_count": 4, "creation_date": 1357516948, "answer_id": 14188155, "path": "stack.django.answer", "score": 41, "up_vote_count": 45, "is_accepted": true, "last_activity_date": 1396511660, "last_edit_date": 1396511660, "body_markdown": "To setup CNTLM for windows, follow this [article][1]. For Ubuntu, read [my blog post][2]. \r\n\r\n**Edit:**\r\n\r\nBasically, to use CNTLM in any platform, you need to setup your username and *hashed* password, before using `http://127.0.0.1:3128` as a proxy to your parent proxy.\r\n\r\n1. Edit the config and add important information like domain, username, password and parent proxy. \r\n\r\n2. Generate hashed password.\r\n\r\n **Windows** `cntlm \u2013c cntlm.ini \u2013H`\r\n\r\n **Ubuntu/Linux** `cntlm -v -H -c /etc/cntlm.conf`\r\n\r\n3. Remove plain text password from the config and replace them with the generated passwords.\r\n\r\nTo check if working:\r\n\r\n **Windows** `cntlm \u2013M http://www.google.com`\r\n\r\n **Ubuntu/Linux** `sudo cntlm -M http://www.google.com/`\r\n\r\nFor more detailed instructions, see links above.\r\n\r\n**Update:** \r\n\r\nJust for completeness sake, I was able to configure and use CNTLM in Windows recently. I encountered a problem during the syncing process of Kindle for PC because of our proxy and installing and configuring CNTLM for Windows fixed that issue for me. Refer to [my article][3] for more details. \r\n\r\n  [1]: http://stormpoopersmith.com/2012/03/20/using-applications-behind-a-corporate-proxy/\r\n  [2]: http://annelagang.blogspot.com/2012/11/installing-gems-in-ubuntu-1204-using.html\r\n  [3]: http://annelagang.blogspot.com/2014/01/register-and-download-books-using.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1366811018, "answer_id": 16193626, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1366811018, "body_markdown": "I had the same issue : behind a corporate proxy with auth at work, I couldn&#39;t have pip work, as well as Sublime Text 2 (well, it worked with custom setup of my proxy settings).\r\nFor pip (and I&#39;ll try that on git), I solved it installing cntlm proxy.\r\nIt was very simple to configure :\r\n\r\n 1. Edit cntlm.ini\r\n 2. Edit &quot;Username&quot;, &quot;Domain&quot;, &quot;Password&quot; fields\r\n 3. Add a &quot;Proxy&quot; line, with your proxy settings : `server:port`\r\n 4. Make sure the line &quot;NoProxy&quot; integrates &quot;localhost&quot; (like that by default)\r\n 5. Note the default port : 3128\r\n 6. Save and that&#39;s it.\r\n\r\nTo test that works, just launch a new command line tool, and try :\r\n\r\n    pip install django --proxy=localhost:3128\r\n\r\nThat worked for me.\r\nHope this will help you."}, {"tags": [], "down_vote_count": 0, "creation_date": 1367578207, "answer_id": 16357159, "path": "stack.django.answer", "score": 64, "up_vote_count": 64, "is_accepted": false, "last_activity_date": 1367578207, "body_markdown": "Under Windows dont forget to set\r\n\r\n    SET HTTPS_PROXY=&lt;proxyHost&gt;:&lt;proxyPort&gt;\r\n\r\nwhat I needed to set for\r\n\r\n    pip install pep8\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1369733076, "answer_id": 16788430, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1369733076, "body_markdown": "Under our security policy **I may not use https** with pypi, SSL-inspection rewrites certificates, it breaks the built-in security of pip for www.python.org. The man in the middle is the network-admin.\r\n\r\nSo **I need to use plain http**. To do so I need to override the system proxy as well as the default pypi:\r\n\r\n    bin/pip install --proxy=squidproxy:3128 -i http://www.python.org/pypi --upgrade &quot;SQLAlchemy&gt;=0.7.10&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1384371867, "answer_id": 19962913, "path": "stack.django.answer", "score": 184, "up_vote_count": 184, "is_accepted": false, "last_activity_date": 1491919472, "last_edit_date": 1491919472, "body_markdown": "Under Ubuntu:\r\n\r\nI could not get the proxy option to work as advertised - so following command did *not* work:\r\n\r\n    sudo pip --proxy http://web-proxy.mydomain.com install somepackage\r\n\r\nBut exporting the https_proxy env variable (note its https_proxy not http_proxy) did the trick:\r\n\r\n    export https_proxy=http://web-proxy.mydomain.com\r\n\r\nthen\r\n\r\n    sudo -E pip install somepackage\r\n\r\n \r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1389154537, "answer_id": 20986910, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1389154537, "body_markdown": "Phone as mobile hotspot/USB tethering\r\n----------------------------------\r\n\r\nIf I have much trouble finding a way through the corporate proxy, I connect to the web through my phone (wireless hotspot if I have wifi, USB tether if not) and do a quick `pip install`. \r\n\r\nMight not work for all setups, but should get most people by in a pinch."}, {"tags": [], "down_vote_count": 0, "creation_date": 1394121082, "answer_id": 22229387, "path": "stack.django.answer", "score": 27, "up_vote_count": 27, "is_accepted": false, "last_activity_date": 1394121082, "body_markdown": "You can continue to use pip over HTTPS by adding your corporation&#39;s root certificate to the cacert.pem file in your site-packages/pip folder. Then configure pip to use your proxy by adding the following lines to ~/pip/pip.conf (or ~\\pip\\pip.ini if you&#39;re on Windows):\r\n\r\n    [global]\r\n    proxy = [user:passwd@]proxy.server:port\r\n\r\nThat&#39;s it. No need to use third party packages or give up HTTPS (of course, your network admin can still see what you&#39;re doing)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1428591947, "answer_id": 29542216, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1500891688, "last_edit_date": 1500891688, "body_markdown": "How about just doing it locally? Most likely you are able to download from https source through your browser\r\n\r\n 1. Download your module file (mysql-connector-python-2.0.3.zip /gz...\r\n    etc). \r\n 2. Extract it and go the extracted dir where setup.py is located\r\n        and call:\r\n\r\n        C:\\mysql-connector-python-2.0.3&gt;python.exe setup.py install"}, {"tags": [], "down_vote_count": 0, "creation_date": 1433745292, "answer_id": 30702558, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1433746604, "last_edit_date": 1433746604, "body_markdown": "For windows users: if you want to install Flask-MongoAlchemy then use the following code\r\n\r\n    pip install Flask-MongoAlchemy --proxy=&quot;http://example.com:port&quot;**"}, {"tags": [], "down_vote_count": 0, "creation_date": 1436956629, "answer_id": 31428078, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1436956629, "body_markdown": "At CentOS (actually I think all linux distros are similar) run\r\n\r\n    env|grep http_proxy\r\n\r\nand\r\n\r\n    env|grep https_proxy\r\n\r\ncheck what is the output of those commands (they should contain your proxy addresses).\r\n\r\nIf the outputs are empty or have incorrect values, modify them, for ex:\r\n   \r\n    export http_proxy=http://10.1.1.1:8080\r\n    export https_proxy=http://10.1.1.1:8080\r\n\r\nNow try to fetch and install some packages by using pip:\r\n\r\n    pip --proxy http://10.1.1.1:8080 install robotframework\r\n\r\nand actually I have never met the case when it didn&#39;t work. For some systems you need to be a root (sudo is not enough).\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1438096752, "answer_id": 31680589, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1438096752, "body_markdown": "Warning, there is something very bad with the &quot;pip search&quot; command.\r\nThe search command do not use the proxy setting regardless of the way it&#39;s being passed.\r\n\r\nI was trying to figure out the problem only trying the &quot;search&quot; command, and found this post with detailed explanation about that bug: [https://github.com/pypa/pip/issues/1104][1] \r\n\r\nI can confirm the bug remains with pip 1.5.6 on Debian 8 with python 2.7.9.\r\nThe &quot;pip install&quot; command works like a charm.\r\n\r\n\r\n  [1]: https://github.com/pypa/pip/issues/1104"}, {"tags": [], "down_vote_count": 1, "creation_date": 1443549225, "answer_id": 32850674, "path": "stack.django.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1501580996, "last_edit_date": 1501580996, "body_markdown": "In Ubuntu 14.04 LTS\r\n\r\n\r\n       sudo pip --proxy http://PROXYDOM:PROXYPORT install package\r\n\r\n\r\nCheers\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1447078323, "answer_id": 33611028, "path": "stack.django.answer", "score": 25, "up_vote_count": 25, "is_accepted": false, "last_activity_date": 1510178154, "last_edit_date": 1510178154, "body_markdown": "I was not working to me. I used https for works: \r\n\r\n    pip install --proxy=https://user@mydomain:port somepackage\r\n\r\nIn order to update, add -U."}, {"tags": [], "down_vote_count": 0, "creation_date": 1454075615, "answer_id": 35086261, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1454075615, "body_markdown": "I got the error:\r\n\r\n    chris@green:~$ sudo http_proxy=http://localhost:3128 pip install django==1.8.8 \r\n    Downloading/unpacking django==1.8.8\r\n      Cannot fetch index base URL http://pypi.python.org/simple/\r\n      Could not find any downloads that satisfy the requirement django==1.8.8\r\n    No distributions at all found for django==1.8.8\r\n    Storing complete log in /home/chris/.pip/pip.log\r\n\r\n(The proxy server&#39;s port is ssh port forwarded to `localhost:3128`).\r\n\r\nI had to set both http and https proxies to make it work:\r\n\r\n    chris@green:~$ sudo http_proxy=http://localhost:3128 https_proxy=http://localhost:3128 pip install django==1.8.8\r\n    Downloading/unpacking django==1.8.8\r\n      Downloading Django-1.8.8.tar.gz (7.3Mb): 7.3Mb downloaded\r\n      Running setup.py egg_info for package django\r\n        \r\n        warning: no previously-included files matching &#39;__pycache__&#39; found under directory &#39;*&#39;\r\n        warning: no previously-included files matching &#39;*.py[co]&#39; found under directory &#39;*&#39;\r\n    Installing collected packages: django\r\n      Running setup.py install for django\r\n        \r\n        warning: no previously-included files matching &#39;__pycache__&#39; found under directory &#39;*&#39;\r\n        warning: no previously-included files matching &#39;*.py[co]&#39; found under directory &#39;*&#39;\r\n        changing mode of build/scripts-2.7/django-admin.py from 644 to 755\r\n        changing mode of /usr/local/bin/django-admin.py to 755\r\n        Installing django-admin script to /usr/local/bin\r\n    Successfully installed django\r\n    Cleaning up...\r\n\r\nas `http://pypi.python.org/simple/` redirects to `https://pypi.python.org/simple` but `pip`&#39;s error does not tell you.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1465375885, "answer_id": 37697661, "path": "stack.django.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1510178114, "last_edit_date": 1510178114, "body_markdown": "This worked for me (on Windows via CMD):\r\n\r\n    pip install --proxy proxyserver:port requests\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1466151237, "answer_id": 37876429, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1466151237, "body_markdown": "Set up invironment variable in Advanced System Settings.\r\nIn Command prompt it should behave like this :\r\n\r\n&gt; C:\\Windows\\system32&gt;echo %http_proxy%\r\n&gt; \r\n&gt; http://username:passowrd@proxy:port\r\n&gt; \r\n&gt; C:\\Windows\\system32&gt;echo %https_proxy%\r\n&gt; \r\n&gt; http://username:password@proxy:port\r\n\r\nLater , Simply \r\n`pip install whatEver` should work."}, {"tags": [], "down_vote_count": 0, "creation_date": 1487157975, "answer_id": 42248048, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1487157975, "body_markdown": "In Windows 7:\r\n\r\n    pip install --proxy DOMAIN\\user:password@proxyaddress:port package\r\n\r\ni.e.:\r\n\r\n    pip install --proxy BR\\neo:p4ssw0rd@myproxyrocks.com.br:8080 virtualenv"}, {"tags": [], "down_vote_count": 1, "creation_date": 1490892279, "answer_id": 43123788, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1500890341, "last_edit_date": 1500890341, "body_markdown": "This is what works for me: \r\n\r\n    pip --proxy proxy url:port command package\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1495284114, "answer_id": 44086002, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1495284114, "body_markdown": "I am also no expert in this but I made it work by setting the `all_proxy` variable in the ~/.bashrc file. To open `~/.bashrc` file and edit it from a terminal run following commands,\r\n\r\n    gedit ~/.bashrc &amp;\r\n\r\nAdd following at the end of file,\r\n\r\n    export all_proxy=&quot;http://x.y.z.w:port&quot;\r\n\r\nThen either open a new terminal or run following in the same terminal,\r\n\r\n    source ~/.bashrc\r\n\r\nJust setting `http_proxy` and `https_proxy` variables aren&#39;t enough for simple usage `pip install somepackage`. Though somehow `sudo -E pip install somepackage` works, but this have given me some problem in case I am using a local installation of Anaconda in my users&#39; folder.\r\n\r\nP.S. - I am using Ubuntu 16.04."}], "title": "Using pip behind a proxy", "view_count": 376186, "answer_count": 20, "code_snippet": ["<code>cntlm.exe -c cntlm.ini -I -M http://google.com</code>", "<code>Connection to proxy failed, bailing out</code>", "<code>pip install -\u2013proxy=user:pass@localhost:3128</code>", "<code>Cannot fetch index base URL http://pypi.python.org/simple/</code>", "<code>http_proxy</code>", "<code>cntlm.ini</code>", "<code>http://127.0.0.1:3128</code>", "<code>cntlm \u2013c cntlm.ini \u2013H</code>", "<code>cntlm -v -H -c /etc/cntlm.conf</code>", "<code>cntlm \u2013M http://www.google.com</code>", "<code>sudo cntlm -M http://www.google.com/</code>", "<code>sudo pip --proxy http://web-proxy.mydomain.com install somepackage\n</code>", "<code>https_proxy</code>", "<code>https_proxy</code>", "<code>http_proxy</code>", "<code>export https_proxy=http://web-proxy.mydomain.com\n</code>", "<code>sudo -E pip install somepackage\n</code>", "<code>-E</code>", "<code>sudo</code>", "<code>SET HTTPS_PROXY=&lt;proxyHost&gt;:&lt;proxyPort&gt;\n</code>", "<code>pip install pep8\n</code>", "<code>SET HTTPS_PROXY=username:password@&lt;proxyHost&gt;:&lt;proxyPort&gt;</code>", "<code>[global]\nproxy = [user:passwd@]proxy.server:port\n</code>", "<code>~/.pip/pip.conf</code>", "<code>export PIP_CONFIG_FILE=/root/.pip/pip.conf</code>", "<code>pip install --proxy=https://user@mydomain:port somepackage\n</code>", "<code>set HTTP_PROXY=domain\\username:password@myproxy:myproxyport</code>", "<code>set http_proxy=IND\\namit.kewat:xl123456@192.168.180.150:8880</code>", "<code>pip install --proxy proxyserver:port requests\n</code>", "<code>bin/pip install --proxy=squidproxy:3128 -i http://www.python.org/pypi --upgrade \"SQLAlchemy&gt;=0.7.10\"\n</code>", "<code>Security</code>", "<code>pip install</code>", "<code>pip install --proxy DOMAIN\\user:password@proxyaddress:port package\n</code>", "<code>pip install --proxy BR\\neo:p4ssw0rd@myproxyrocks.com.br:8080 virtualenv\n</code>", "<code>   sudo pip --proxy http://PROXYDOM:PROXYPORT install package\n</code>", "<code>server:port</code>", "<code>pip install django --proxy=localhost:3128\n</code>", "<code>pip install Flask-MongoAlchemy --proxy=\"http://example.com:port\"**\n</code>", "<code>pip install whatEver</code>", "<code>env|grep http_proxy\n</code>", "<code>env|grep https_proxy\n</code>", "<code>export http_proxy=http://10.1.1.1:8080\nexport https_proxy=http://10.1.1.1:8080\n</code>", "<code>pip --proxy http://10.1.1.1:8080 install robotframework\n</code>", "<code>chris@green:~$ sudo http_proxy=http://localhost:3128 pip install django==1.8.8 \nDownloading/unpacking django==1.8.8\n  Cannot fetch index base URL http://pypi.python.org/simple/\n  Could not find any downloads that satisfy the requirement django==1.8.8\nNo distributions at all found for django==1.8.8\nStoring complete log in /home/chris/.pip/pip.log\n</code>", "<code>localhost:3128</code>", "<code>chris@green:~$ sudo http_proxy=http://localhost:3128 https_proxy=http://localhost:3128 pip install django==1.8.8\nDownloading/unpacking django==1.8.8\n  Downloading Django-1.8.8.tar.gz (7.3Mb): 7.3Mb downloaded\n  Running setup.py egg_info for package django\n\n    warning: no previously-included files matching '__pycache__' found under directory '*'\n    warning: no previously-included files matching '*.py[co]' found under directory '*'\nInstalling collected packages: django\n  Running setup.py install for django\n\n    warning: no previously-included files matching '__pycache__' found under directory '*'\n    warning: no previously-included files matching '*.py[co]' found under directory '*'\n    changing mode of build/scripts-2.7/django-admin.py from 644 to 755\n    changing mode of /usr/local/bin/django-admin.py to 755\n    Installing django-admin script to /usr/local/bin\nSuccessfully installed django\nCleaning up...\n</code>", "<code>http://pypi.python.org/simple/</code>", "<code>https://pypi.python.org/simple</code>", "<code>pip</code>", "<code>all_proxy</code>", "<code>~/.bashrc</code>", "<code>gedit ~/.bashrc &amp;\n</code>", "<code>export all_proxy=\"http://x.y.z.w:port\"\n</code>", "<code>source ~/.bashrc\n</code>", "<code>http_proxy</code>", "<code>https_proxy</code>", "<code>pip install somepackage</code>", "<code>sudo -E pip install somepackage</code>", "<code>C:\\mysql-connector-python-2.0.3&gt;python.exe setup.py install\n</code>", "<code>pip --proxy proxy url:port command package\n</code>"], "path": "stack.django"}, {"tags": ["django", "settings", "django-1.5"], "creation_date": 1362029226, "body_markdown": "Once I change the `DEBUG = False`, my site will generate 500 (using wsgi &amp; manage.py runserver), and there is no error info in Apache error log and it will run normally when I change `debug` to ` True` .\r\n\r\nI&#39;m using Django 1.5 &amp; Python 2.7.3\r\nhere is Apache access log and without any log in apache error log\r\n\r\n    www.beta800.net:80 222.247.56.11 - - [28/Feb/2013:13:42:28 +0800] &quot;GET / HTTP/1.1&quot; 500 257 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.97 Safari/537.22&quot;\r\n    www.beta800.net:80 222.247.56.11 - - [28/Feb/2013:13:42:28 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 500 257 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.97 Safari/537.22&quot;\r\n    www.beta800.net:80 222.247.56.11 - - [28/Feb/2013:13:42:28 +0800] &quot;GET /favicon.ico HTTP/1.1&quot; 500 257 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.97 Safari/537.22&quot;\r\n\r\nHere is my settings file:\r\n\r\n    import os.path    \r\n    DEBUG = False \r\n    #TEMPLATE_DEBUG = DEBUG\r\n    \r\n    HERE = os.path.dirname(__file__)\r\n    ADMINS = (\r\n        (&#39;admin&#39;, &#39;xyzadmin@qq.com&#39;),\r\n    )\r\n    \r\n    MANAGERS = ADMINS\r\n    \r\n    DATABASES = {\r\n        &#39;default&#39;: {\r\n            &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;, # Add &#39;postgresql_psycopg2&#39;, &#39;mysql&#39;, &#39;sqlite3&#39; or &#39;oracle&#39;.\r\n            &#39;NAME&#39;: &#39;zdm&#39;,                      # Or path to database file if using sqlite3.\r\n            &#39;USER&#39;: &#39;root&#39;,                      # Not used with sqlite3.\r\n            &#39;PASSWORD&#39;: &#39;passwd&#39;,                  # Not used with sqlite3.\r\n            &#39;HOST&#39;: &#39;&#39;,                      # Set to empty string for localhost. Not used with sqlite3.\r\n            &#39;PORT&#39;: &#39;&#39;,                      # Set to empty string for default. Not used with sqlite3.\r\n        }\r\n    }\r\n    \r\n    # Local time zone for this installation. Choices can be found here:\r\n    # http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\r\n    # although not all choices may be available on all operating systems.\r\n    # In a Windows environment this must be set to your system time zone.\r\n    TIME_ZONE = &#39;America/Chicago&#39;\r\n    \r\n    # Language code for this installation. All choices can be found here:\r\n    # http://www.i18nguy.com/unicode/language-identifiers.html\r\n    LANGUAGE_CODE = &#39;en-us&#39;\r\n    \r\n    SITE_ID = 1\r\n    \r\n    # If you set this to False, Django will make some optimizations so as not\r\n    # to load the internationalization machinery.\r\n    USE_I18N = True\r\n    \r\n    # If you set this to False, Django will not format dates, numbers and\r\n    # calendars according to the current locale.\r\n    USE_L10N = True\r\n    \r\n    # If you set this to False, Django will not use timezone-aware datetimes.\r\n    USE_TZ = True\r\n    \r\n    # Absolute filesystem path to the directory that will hold user-uploaded files.\r\n    # Example: &quot;/home/media/media.lawrence.com/media/&quot;\r\n    MEDIA_ROOT = &#39;&#39;\r\n    \r\n    # URL that handles the media served from MEDIA_ROOT. Make sure to use a\r\n    # trailing slash.\r\n    # Examples: &quot;http://media.lawrence.com/media/&quot;, &quot;http://example.com/media/&quot;\r\n    MEDIA_URL = &#39;&#39;\r\n    \r\n    # Absolute path to the directory static files should be collected to.\r\n    # Don&#39;t put anything in this directory yourself; store your static files\r\n    # in apps&#39; &quot;static/&quot; subdirectories and in STATICFILES_DIRS.\r\n    # Example: &quot;/home/media/media.lawrence.com/static/&quot;\r\n    #STATIC_ROOT = os.path.join(HERE, &#39;static&#39;).replace(&#39;\\\\&#39;,&#39;/&#39;)\r\n    \r\n    # URL prefix for static files.\r\n    # Example: &quot;http://media.lawrence.com/static/&quot;\r\n    STATIC_URL = &#39;/static/&#39;\r\n    #STATIC_ROOT = os.path.join(HERE, &#39;static&#39;).replace(&#39;\\\\&#39;,&#39;/&#39;)\r\n    S= os.path.join(HERE, &#39;static&#39;).replace(&#39;\\\\&#39;,&#39;/&#39;)\r\n    \r\n    # Additional locations of static files\r\n    STATICFILES_DIRS = (\r\n        # Put strings here, like &quot;/home/html/static&quot; or &quot;C:/www/django/static&quot;.\r\n        # Always use forward slashes, even on Windows.\r\n        # Don&#39;t forget to use absolute paths, not relative paths.\r\n        &#39;/home/zdm/static&#39;,\r\n    )\r\n    \r\n    # List of finder classes that know how to find static files in\r\n    # various locations.\r\n    STATICFILES_FINDERS = (\r\n        &#39;django.contrib.staticfiles.finders.FileSystemFinder&#39;,\r\n        &#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&#39;,\r\n    #    &#39;django.contrib.staticfiles.finders.DefaultStorageFinder&#39;,\r\n    )\r\n    \r\n    # Make this unique, and don&#39;t share it with anybody.\r\n    SECRET_KEY = &#39;9a7!^gp8ojyk-^^d@*whuw!0rml+r+uaie4ur$(do9zz_6!hy0&#39;\r\n    \r\n    # List of callables that know how to import templates from various sources.\r\n    TEMPLATE_LOADERS = (\r\n        &#39;django.template.loaders.filesystem.Loader&#39;,\r\n        &#39;django.template.loaders.app_directories.Loader&#39;,\r\n    #     &#39;django.template.loaders.eggs.Loader&#39;,\r\n    )\r\n    \r\n    MIDDLEWARE_CLASSES = (\r\n        &#39;django.middleware.common.CommonMiddleware&#39;,\r\n        &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,\r\n        &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,\r\n        &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,\r\n        &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,\r\n        # Uncomment the next line for simple clickjacking protection:\r\n        # &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,\r\n    )\r\n    \r\n    ROOT_URLCONF = &#39;zdm.urls&#39;\r\n    \r\n    # Python dotted path to the WSGI application used by Django&#39;s runserver.\r\n    WSGI_APPLICATION = &#39;zdm.wsgi.application&#39;\r\n    \r\n    TEMPLATE_DIRS = (\r\n        # Put strings here, like &quot;/home/html/django_templates&quot; or &quot;C:/www/django/templates&quot;.\r\n        # Always use forward slashes, even on Windows.\r\n        # Don&#39;t forget to use absolute paths, not relative paths.\r\n        &#39;/home/zdm/templates&#39;,\r\n    )\r\n    \r\n    INSTALLED_APPS = (\r\n        &#39;django.contrib.auth&#39;,\r\n        &#39;django.contrib.contenttypes&#39;,\r\n        &#39;django.contrib.sessions&#39;,\r\n        &#39;django.contrib.sites&#39;,\r\n        &#39;django.contrib.messages&#39;,\r\n        &#39;django.contrib.staticfiles&#39;,\r\n        # Uncomment the next line to enable the admin:\r\n        &#39;django.contrib.admin&#39;,\r\n        # Uncomment the next line to enable admin documentation:\r\n        # &#39;django.contrib.admindocs&#39;,\r\n        &#39;zdm&#39;,\r\n        &#39;portal&#39;,\r\n        &#39;admin&#39;,\r\n        &#39;tagging&#39;,\r\n    )", "last_edit_date": 1446899507, "up_vote_count": 255, "link": "https://stackoverflow.com/questions/15128135/setting-debug-false-causes-500-error", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1362030180, "answer_id": 15128309, "path": "stack.django.answer", "score": 392, "up_vote_count": 392, "is_accepted": true, "last_activity_date": 1464969507, "last_edit_date": 1464969507, "body_markdown": "Django 1.5 introduced the [allowed hosts setting][1] that is required for security reasons. A settings file created with Django 1.5 has this new section which you need to add:\r\n    \r\n    # Hosts/domain names that are valid for this site; required if DEBUG is False\r\n    # See https://docs.djangoproject.com/en/1.9/ref/settings/#allowed-hosts\r\n    ALLOWED_HOSTS = []\r\n\r\nAdd your host here like `[&#39;www.beta800.net&#39;]` or `[&#39;*&#39;]` for a quick test, [but don&#39;t use `[&#39;*&#39;]` for production][2].\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.9/releases/1.5/#allowed-hosts-required-in-production\r\n  [2]: https://docs.djangoproject.com/en/1.9/ref/settings/#allowed-hosts"}, {"tags": [], "down_vote_count": 1, "creation_date": 1368804951, "answer_id": 16612938, "path": "stack.django.answer", "score": 12, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1368804951, "body_markdown": "Right, in Django 1.5 if DEBUG = False, configure ALLOWED_HOSTS, adding domains without the port number. example: \r\n\r\n    ALLOWED_HOSTS = [&#39;localhost&#39;]"}, {"tags": [], "down_vote_count": 0, "creation_date": 1371543821, "answer_id": 17163948, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1455648693, "last_edit_date": 1455648693, "body_markdown": "You must also check your URLs all over the place. When the `DEBUG` is set to `False`, all URLs without trailing `/` are treated as a bug, unlike when you have `DEBUG = True`, in which case Django will append `/` everywhere it is missing. So, in short, make sure all links end with a slash EVERYWHERE."}, {"tags": [], "down_vote_count": 0, "creation_date": 1381312532, "answer_id": 19268741, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1455649201, "last_edit_date": 1455649201, "body_markdown": "I have a hilarious story for all. After reaching this page I said &quot;Eureka! I&#39;m saved. That MUST be my problem.&quot; So I inserted the required `ALLOWED_HOSTS` list in setting.py and... nothing. Same old 500 error. And no, it wasn&#39;t for lack of a 404.html file.\r\n\r\nSo for 2 days I busied myself with wild theories, such as that it had something to do with serving static files (understand that I am a noob and noobs don&#39;t know what they&#39;re doing).\r\n\r\nSo what was it? It is now Mr. Moderator that we come to a useful tip. Whereas my development Django is version 1.5.something, my production server version is 1.5.something+1... or maybe plus 2. Whatever. And so after I added the `ALLOWED_HOSTS` to the desktop version of _settings.py_, which lacked what hwjp requested--- a &quot;default value in settings.py, perhaps with an explanatory comment&quot;--- I did the same on the production server with the proper domain for it.\r\n\r\nBut I failed to notice that on the production server with the later version of Django there WAS a default value in settings.py with an explanatory comment. It was well below where I made my entry, out of sight on the monitor. And of course the list was empty. Hence my waste of time."}, {"tags": [], "down_vote_count": 0, "creation_date": 1381428370, "answer_id": 19303031, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1381428370, "body_markdown": "I think it could also be the http server settings. Mine is still broken and had ALLOWED_HOSTS the entire time. I can access it locally (i use gunicorn), but not via the domain name when DEBUG=False. when I try using the domain name it then gives me the error, so makes me think its a nginx related issue.\r\n\r\nHere is my conf file for nginx:\r\n\r\n    server {\r\n        listen   80;\r\n        server_name localhost myproject.ca www.myproject.ca;\r\n        root /var/web/myproject/deli_cms;\r\n    \r\n        # serve directly - analogous for static/staticfiles\r\n        location /media/ {\r\n            # if asset versioning is used\r\n            if ($query_string) {\r\n                expires max;\r\n            }\r\n        }\r\n        location /admin/media/ {\r\n            # this changes depending on your python version\r\n            root /var/web/myproject/lib/python2.6/site-packages/django/contrib;\r\n        }\r\n        location /static/ {\r\n        alias /var/web/myproject/deli_cms/static_root/;\r\n        }\r\n    \r\n        location / {\r\n            proxy_pass_header Server;\r\n            proxy_set_header Host $http_host;\r\n            proxy_redirect off;\r\n            proxy_set_header X-Real-IP $remote_addr;\r\n            proxy_set_header X-Scheme $scheme;\r\n            proxy_connect_timeout 10;\r\n            proxy_read_timeout 10;\r\n            proxy_pass http://localhost:8000/;\r\n        }\r\n        # what to serve if upstream is not available or crashes\r\n        error_page 500 502 503 504 /media/50x.html;\r\n    }\r\n\r\n"}, {"tags": [], "down_vote_count": 7, "creation_date": 1387263072, "answer_id": 20627745, "path": "stack.django.answer", "score": -5, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1387263072, "body_markdown": "If you want to allow for all hosts. \r\nUse ALLOWED_HOSTS = [&#39;*&#39;,] \r\ninstead of \r\nALLOWED_HOSTS = [&#39;*&#39;]"}, {"tags": [], "down_vote_count": 0, "creation_date": 1388947003, "answer_id": 20937512, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1455648627, "last_edit_date": 1455648627, "body_markdown": "For what it&#39;s worth - I was getting a 500 with `DEBUG = False` on some pages only. Tracing back the exception with pdb revealed a missing asset (I suspect the `{% static ... %}` template tag was the culprit for the 500."}, {"tags": [], "down_vote_count": 0, "creation_date": 1420853711, "answer_id": 27871939, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1420853711, "body_markdown": "I know this is an old question, but I was also getting a 500 error when DEBUG=False. After several hours, I realized I had forgot to end some of the links in my base.html with a trailing slash. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1422860336, "answer_id": 28272531, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1422860336, "body_markdown": "I faced the same problem when I did `DEBUG = FALSE`. Here is a consolidated solution as scattered in answers above and other posts.\r\n\r\nBy default, in settings.py we have `ALLOWED_HOSTS = []` . Here are possible changes you will have to make in `ALLOWED_HOSTS` value as per scenario to get rid of the error:\r\n\r\n1: Your domain name:\r\n\r\n    ALLOWED_HOSTS = [&#39;www.example.com&#39;] # Your domain name here\r\n\r\n2: Your deployed server IP if you don&#39;t have domain name yet (which was my case and worked like a charm):\r\n\r\n    ALLOWED_HOSTS = [&#39;123.123.198.123&#39;] # Enter your IP here\r\n\r\n3: If you are testing on local server, you can edit your `settings.py` or `settings_local.py` as:\r\n\r\n    ALLOWED_HOSTS = [&#39;localhost&#39;, &#39;127.0.0.1&#39;]\r\n\r\n4: You can also provide &#39;*&#39; in the `ALLOWED_HOSTS` value but its **not recommended in the production environment** due to security reasons: \r\n\r\n    ALLOWED_HOSTS = [&#39;*&#39;] # Not recommended in production environment\r\n\r\nI have also posted a detailed solution on my [blog][1] which you may want to refer.\r\n\r\n\r\n  [1]: http://www.alirazabhayani.com/2015/01/django-setting-debug-false-causes-500-error-solved.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1434999789, "answer_id": 30987797, "path": "stack.django.answer", "score": 20, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1434999789, "body_markdown": "In my case, reading docs of third party apps properly saved me. \r\n\r\nThe culprit? django_compressor\r\n\r\nI had \r\n\r\n    {% load compress %}\r\n    {% compress css %}\r\n     ... css files linked here ..\r\n    {% endcompress %}\r\n\r\n`DEBUG = True` always gave me 500. To fix it, I needed a line in my settings to get it running\r\n\r\n    COMPRESS_ENABLED = os.environ.get(&#39;COMPRESS_ENABLED&#39;, False)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1444251184, "answer_id": 33002229, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1444251184, "body_markdown": "This is old and my problem ended up being related to the problem but not for the OP but my solution is for anyone else who tried the above to no avail. \r\n\r\nI had a setting in a modified version of Django to minify CSS and JS files that only ran when DEBUG was off. My server did not have the CSS minifier installed and threw the error. If you are using Django-Mako-Plus, this might be your issue."}, {"tags": [], "down_vote_count": 0, "creation_date": 1448302651, "answer_id": 33877811, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1448356132, "last_edit_date": 1448356132, "body_markdown": "ALLOWED_HOSTS is NOT the only issue, for me I had to make a 404.html and put it in the base level of my templates (not app level) - Also, you can make a 404 view and add a 404handler url but I think thats optional. 404.html fixed it\r\n\r\n\r\nin mainproject.urls\r\n\r\n    handler404 = &#39;app.views.custom_404&#39;\r\n\r\nin app.views\r\n\r\n\r\n    def custom_404(request):\r\n        return render(request, &#39;404.html&#39;, {}, status=404)\r\n\r\nthen make a templates/404.html template\r\n\r\n \r\ngot this from another S/O post that I cannot find it\r\n\r\n**EDIT**\r\n\r\nalso, I get 500 errors when I serve assets with whitenoise. Could not figure that out for the life of me, error was ValueError from whitenoise not being able to find an asset that I also could not find, had to go with default django serving for now"}, {"tags": [], "down_vote_count": 0, "creation_date": 1456844722, "answer_id": 35726356, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1456844722, "body_markdown": "One small thing to note, If the array has None in it, then all the subsequent allowed hosts are ignored.\r\n\r\n    ALLOWED_HOSTS = [\r\n        &quot;localhost&quot;,\r\n        None,\r\n        &#39;example.com&#39;, # First DNS alias (set up in the app)\r\n        #&#39;www.example.com&#39;, # Second DNS alias (set up in the app)\r\n    ]\r\n\r\n`Django version 1.8.4`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1462578280, "answer_id": 37082908, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1515272475, "last_edit_date": 1515272475, "body_markdown": "**Complementing the main answer**&lt;br&gt;\r\nIt is annoying to change the ALLOWED_HOSTS and DEBUG global constants in `settings.py` when switching between development and production.\r\nI am using this code to set these setting automatically:\r\n\r\n    import socket\r\n\r\n    if socket.gethostname() == &quot;server_name&quot;:\r\n        DEBUG = False\r\n        ALLOWED_HOSTS = [&quot;.your_domain_name.com&quot;,]\r\n        ...\r\n    else:\r\n        DEBUG = True\r\n        ALLOWED_HOSTS = [&quot;localhost&quot;, &quot;127.0.0.1&quot;,]\r\n        ..."}, {"tags": [], "down_vote_count": 0, "creation_date": 1463169743, "answer_id": 37218484, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1463169743, "body_markdown": "I know this is late but I ended up here with a search for my error 500 with `DEBUG=False`, in my case it did turn out to be the `ALLOWED_HOSTS` but I was using `os.environ.get(&#39;variable&#39;)` to populate the hosts, I did not notice this until I enabled logging, you can log all errors to file with the below and it will log even when `DEBUG=False`:\r\n\r\n    # settings.py\r\n    LOGGING = {\r\n        &#39;version&#39;: 1,\r\n        &#39;disable_existing_loggers&#39;: False,\r\n        &#39;formatters&#39;: {\r\n            &#39;verbose&#39;: {\r\n                &#39;format&#39; : &quot;[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s&quot;,\r\n                &#39;datefmt&#39; : &quot;%d/%b/%Y %H:%M:%S&quot;\r\n            },\r\n            &#39;simple&#39;: {\r\n                &#39;format&#39;: &#39;%(levelname)s %(message)s&#39;\r\n            },\r\n        },\r\n        &#39;handlers&#39;: {\r\n            &#39;file&#39;: {\r\n                &#39;level&#39;: &#39;DEBUG&#39;,\r\n                &#39;class&#39;: &#39;logging.FileHandler&#39;,\r\n                &#39;filename&#39;: &#39;mysite.log&#39;,\r\n                &#39;formatter&#39;: &#39;verbose&#39;\r\n            },\r\n        },\r\n        &#39;loggers&#39;: {\r\n            &#39;django&#39;: {\r\n                &#39;handlers&#39;:[&#39;file&#39;],\r\n                &#39;propagate&#39;: True,\r\n                &#39;level&#39;:&#39;DEBUG&#39;,\r\n            },\r\n            &#39;MYAPP&#39;: {\r\n                &#39;handlers&#39;: [&#39;file&#39;],\r\n                &#39;level&#39;: &#39;DEBUG&#39;,\r\n            },\r\n        }\r\n    }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1466800124, "answer_id": 38021613, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1466800124, "body_markdown": "I know that this is a super old question, but maybe I could help some one else.  If you are having a 500 error after setting DEBUG=False, you can always run the manage.py runserver in the command line to see any errors that wont appear in any web error logs."}, {"tags": [], "down_vote_count": 0, "creation_date": 1477736566, "answer_id": 40318134, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1477736566, "body_markdown": "A bit late to the party, and off course there could be a legion of issues but I&#39;ve had a similar issue and it turned out that I had {% %} special characters inside my html remark...\r\n\r\n    &lt;!-- &lt;img src=&quot;{% static &quot;my_app/myexample.jpg&quot; %}&quot; alt=&quot;My image&quot;/&gt; --&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1492543188, "answer_id": 43480514, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1492543188, "body_markdown": "I have the similar issue, in my case it was caused by having a Commented script inside the body tag. \r\n\r\n    &lt;!--&lt;script&gt;  &lt;/script&gt;--&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1493513976, "answer_id": 43701897, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1493513976, "body_markdown": "\r\nI was searching and testing more about this issue and I realized that static files direcotiries specified in settings.py can be a cause of this, so fist, we need to run this command\r\n\r\n    python manage.py collecstatic\r\n\r\nin settings.py, the code should look something like this:\r\n\r\n    STATIC_URL = &#39;/static/&#39;\r\n    \r\n    STATICFILES_DIRS = (\r\n        os.path.join(BASE_DIR, &#39;static&#39;),\r\n    )\r\n    \r\n    STATIC_ROOT = os.path.join(BASE_DIR, &#39;staticfiles&#39;)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1493727836, "answer_id": 43737826, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1493727836, "body_markdown": "I had one view that threw a 500 error in debug=false but worked in debug=true. For anyone who is getting this kind of thing and Allowed Hosts is not the problem, I fixed my view by updating a template&#39;s static tag that was pointing to the wrong location. \r\n\r\nSo I&#39;d suggest just checking links and tags are airtight in any templates used, maybe certain things slip through the net in debug but give errors in production."}, {"tags": [], "down_vote_count": 0, "creation_date": 1505731144, "answer_id": 46277261, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1505731144, "body_markdown": "I ran into this issue. Turns out I was including in the template, using the `static` template tag, a file that did not exist anymore. A look in the logs showed me the problem.\r\n\r\nI guess this is just one of many possible reasons for this kind of error. \r\n\r\nMoral of the story: always log errors and always check logs."}, {"tags": [], "down_vote_count": 0, "creation_date": 1507667988, "answer_id": 46675613, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1507667988, "body_markdown": "I found yet another cause of the 500 error when DEBUG=False.  I use the Django `compressor` utility and our front-end engineer added references to font files *inside* a `compress css` block in a Django template.  Like this:\r\n\r\n    {% compress css %}\r\n        &lt;link href=&quot;{% static &quot;css/bootstrap.css&quot; %}&quot; rel=&quot;stylesheet&quot;&gt;\r\n        &lt;link href=&quot;{% static &quot;css/bootstrap-spinedit.css&quot; %}&quot; rel=&quot;stylesheet&quot;&gt;\r\n        &lt;link href=&quot;{% static &quot;djangular/css/styles.css&quot; %}&quot; rel=&quot;stylesheet&quot;&gt;\r\n        &lt;link href=&quot;{% static &quot;fonts/fontawesome-webfont.ttf&quot; %}&quot; rel=&quot;stylesheet&quot;&gt;\r\n    {% endcompress %}\r\n\r\nThe solution was to move the link to the `ttf` file below the `endcompress` line."}, {"tags": [], "down_vote_count": 0, "creation_date": 1514296582, "answer_id": 47979597, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1514296582, "body_markdown": "Thanks to @squarebear, in the log file, I found the error:\r\n`ValueError: The file &#39;myapp/styles.css&#39; could not be found with &lt;whitenoise.storage.CompressedManifestStaticFilesStorage ...&gt;`.  \r\n\r\nI had a few problems in my django app. I removed the line  \r\n `STATICFILES_STORAGE = &#39;whitenoise.django.GzipManifestStaticFilesStorage&#39;` which I found from the heroku&#39;s documentation. \r\n\r\nI also had to add extra directory (thanks to [another SO answer][1]) `static` in the root of django application as `myapp/static` even though I wasn&#39;t using it. Then running the command `python manage.py collectstatic` before running the server solved the problem. Finally, it started working fine.\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/44232706/6210807"}, {"tags": [], "down_vote_count": 0, "creation_date": 1518290188, "answer_id": 48724639, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1518290188, "body_markdown": "I encountered the same issue just recently in Django 2.0. I was able to figure out the problem by setting `DEBUG_PROPAGATE_EXCEPTIONS = True`. See here: https://docs.djangoproject.com/en/2.0/ref/settings/#debug-propagate-exceptions\r\n\r\nIn my case, the error was `ValueError: Missing staticfiles manifest entry for &#39;admin/css/base.css&#39;`. I fixed that by locally running `python manage.py collectstatic`.\r\n"}], "title": "Setting DEBUG = False causes 500 Error", "view_count": 98383, "answer_count": 24, "code_snippet": ["<code>DEBUG = False</code>", "<code>debug</code>", "<code>True</code>", "<code>www.beta800.net:80 222.247.56.11 - - [28/Feb/2013:13:42:28 +0800] \"GET / HTTP/1.1\" 500 257 \"-\" \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.97 Safari/537.22\"\nwww.beta800.net:80 222.247.56.11 - - [28/Feb/2013:13:42:28 +0800] \"GET /favicon.ico HTTP/1.1\" 500 257 \"-\" \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.97 Safari/537.22\"\nwww.beta800.net:80 222.247.56.11 - - [28/Feb/2013:13:42:28 +0800] \"GET /favicon.ico HTTP/1.1\" 500 257 \"-\" \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.97 Safari/537.22\"\n</code>", "<code>import os.path    \nDEBUG = False \n#TEMPLATE_DEBUG = DEBUG\n\nHERE = os.path.dirname(__file__)\nADMINS = (\n    ('admin', 'xyzadmin@qq.com'),\n)\n\nMANAGERS = ADMINS\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.\n        'NAME': 'zdm',                      # Or path to database file if using sqlite3.\n        'USER': 'root',                      # Not used with sqlite3.\n        'PASSWORD': 'passwd',                  # Not used with sqlite3.\n        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.\n        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.\n    }\n}\n\n# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# In a Windows environment this must be set to your system time zone.\nTIME_ZONE = 'America/Chicago'\n\n# Language code for this installation. All choices can be found here:\n# http://www.i18nguy.com/unicode/language-identifiers.html\nLANGUAGE_CODE = 'en-us'\n\nSITE_ID = 1\n\n# If you set this to False, Django will make some optimizations so as not\n# to load the internationalization machinery.\nUSE_I18N = True\n\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.\nUSE_L10N = True\n\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = True\n\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: \"/home/media/media.lawrence.com/media/\"\nMEDIA_ROOT = ''\n\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://media.lawrence.com/media/\", \"http://example.com/media/\"\nMEDIA_URL = ''\n\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n# Example: \"/home/media/media.lawrence.com/static/\"\n#STATIC_ROOT = os.path.join(HERE, 'static').replace('\\\\','/')\n\n# URL prefix for static files.\n# Example: \"http://media.lawrence.com/static/\"\nSTATIC_URL = '/static/'\n#STATIC_ROOT = os.path.join(HERE, 'static').replace('\\\\','/')\nS= os.path.join(HERE, 'static').replace('\\\\','/')\n\n# Additional locations of static files\nSTATICFILES_DIRS = (\n    # Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".\n    # Always use forward slashes, even on Windows.\n    # Don't forget to use absolute paths, not relative paths.\n    '/home/zdm/static',\n)\n\n# List of finder classes that know how to find static files in\n# various locations.\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n#    'django.contrib.staticfiles.finders.DefaultStorageFinder',\n)\n\n# Make this unique, and don't share it with anybody.\nSECRET_KEY = '9a7!^gp8ojyk-^^d@*whuw!0rml+r+uaie4ur$(do9zz_6!hy0'\n\n# List of callables that know how to import templates from various sources.\nTEMPLATE_LOADERS = (\n    'django.template.loaders.filesystem.Loader',\n    'django.template.loaders.app_directories.Loader',\n#     'django.template.loaders.eggs.Loader',\n)\n\nMIDDLEWARE_CLASSES = (\n    'django.middleware.common.CommonMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    # Uncomment the next line for simple clickjacking protection:\n    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',\n)\n\nROOT_URLCONF = 'zdm.urls'\n\n# Python dotted path to the WSGI application used by Django's runserver.\nWSGI_APPLICATION = 'zdm.wsgi.application'\n\nTEMPLATE_DIRS = (\n    # Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".\n    # Always use forward slashes, even on Windows.\n    # Don't forget to use absolute paths, not relative paths.\n    '/home/zdm/templates',\n)\n\nINSTALLED_APPS = (\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.sites',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Uncomment the next line to enable the admin:\n    'django.contrib.admin',\n    # Uncomment the next line to enable admin documentation:\n    # 'django.contrib.admindocs',\n    'zdm',\n    'portal',\n    'admin',\n    'tagging',\n)\n</code>", "<code># Hosts/domain names that are valid for this site; required if DEBUG is False\n# See https://docs.djangoproject.com/en/1.9/ref/settings/#allowed-hosts\nALLOWED_HOSTS = []\n</code>", "<code>['www.beta800.net']</code>", "<code>['*']</code>", "<code>['*']</code>", "<code>['*']</code>", "<code>{% load compress %}\n{% compress css %}\n ... css files linked here ..\n{% endcompress %}\n</code>", "<code>DEBUG = True</code>", "<code>COMPRESS_ENABLED = os.environ.get('COMPRESS_ENABLED', False)\n</code>", "<code>DEBUG=False</code>", "<code>ALLOWED_HOSTS</code>", "<code>os.environ.get('variable')</code>", "<code>DEBUG=False</code>", "<code># settings.py\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format' : \"[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s\",\n            'datefmt' : \"%d/%b/%Y %H:%M:%S\"\n        },\n        'simple': {\n            'format': '%(levelname)s %(message)s'\n        },\n    },\n    'handlers': {\n        'file': {\n            'level': 'DEBUG',\n            'class': 'logging.FileHandler',\n            'filename': 'mysite.log',\n            'formatter': 'verbose'\n        },\n    },\n    'loggers': {\n        'django': {\n            'handlers':['file'],\n            'propagate': True,\n            'level':'DEBUG',\n        },\n        'MYAPP': {\n            'handlers': ['file'],\n            'level': 'DEBUG',\n        },\n    }\n}\n</code>", "<code>ALLOWED_HOSTS = ['localhost']\n</code>", "<code>DEBUG</code>", "<code>False</code>", "<code>/</code>", "<code>DEBUG = True</code>", "<code>/</code>", "<code>DEBUG=False</code>", "<code>ALLOWED_HOSTS</code>", "<code>ALLOWED_HOSTS</code>", "<code>local_settings.py</code>", "<code>settings.py</code>", "<code>DEBUG = FALSE</code>", "<code>ALLOWED_HOSTS = []</code>", "<code>ALLOWED_HOSTS</code>", "<code>ALLOWED_HOSTS = ['www.example.com'] # Your domain name here\n</code>", "<code>ALLOWED_HOSTS = ['123.123.198.123'] # Enter your IP here\n</code>", "<code>settings.py</code>", "<code>settings_local.py</code>", "<code>ALLOWED_HOSTS = ['localhost', '127.0.0.1']\n</code>", "<code>ALLOWED_HOSTS</code>", "<code>ALLOWED_HOSTS = ['*'] # Not recommended in production environment\n</code>", "<code>DEBUG = False</code>", "<code>{% static ... %}</code>", "<code>static</code>", "<code>settings.py</code>", "<code>import socket\n\nif socket.gethostname() == \"server_name\":\n    DEBUG = False\n    ALLOWED_HOSTS = [\".your_domain_name.com\",]\n    ...\nelse:\n    DEBUG = True\n    ALLOWED_HOSTS = [\"localhost\", \"127.0.0.1\",]\n    ...\n</code>", "<code>handler404 = 'app.views.custom_404'\n</code>", "<code>def custom_404(request):\n    return render(request, '404.html', {}, status=404)\n</code>", "<code>python manage.py collectstatic</code>", "<code>python manage.py collecstatic\n</code>", "<code>STATIC_URL = '/static/'\n\nSTATICFILES_DIRS = (\n    os.path.join(BASE_DIR, 'static'),\n)\n\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n</code>", "<code>DEBUG_PROPAGATE_EXCEPTIONS = True</code>", "<code>ValueError: Missing staticfiles manifest entry for 'admin/css/base.css'</code>", "<code>python manage.py collectstatic</code>", "<code>server {\n    listen   80;\n    server_name localhost myproject.ca www.myproject.ca;\n    root /var/web/myproject/deli_cms;\n\n    # serve directly - analogous for static/staticfiles\n    location /media/ {\n        # if asset versioning is used\n        if ($query_string) {\n            expires max;\n        }\n    }\n    location /admin/media/ {\n        # this changes depending on your python version\n        root /var/web/myproject/lib/python2.6/site-packages/django/contrib;\n    }\n    location /static/ {\n    alias /var/web/myproject/deli_cms/static_root/;\n    }\n\n    location / {\n        proxy_pass_header Server;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_connect_timeout 10;\n        proxy_read_timeout 10;\n        proxy_pass http://localhost:8000/;\n    }\n    # what to serve if upstream is not available or crashes\n    error_page 500 502 503 504 /media/50x.html;\n}\n</code>", "<code>&lt;!--&lt;script&gt;  &lt;/script&gt;--&gt;\n</code>", "<code>static</code>", "<code>ValueError: The file 'myapp/styles.css' could not be found with &lt;whitenoise.storage.CompressedManifestStaticFilesStorage ...&gt;</code>", "<code>STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'</code>", "<code>static</code>", "<code>myapp/static</code>", "<code>python manage.py collectstatic</code>", "<code>ALLOWED_HOSTS = [\n    \"localhost\",\n    None,\n    'example.com', # First DNS alias (set up in the app)\n    #'www.example.com', # Second DNS alias (set up in the app)\n]\n</code>", "<code>Django version 1.8.4</code>", "<code>&lt;!-- &lt;img src=\"{% static \"my_app/myexample.jpg\" %}\" alt=\"My image\"/&gt; --&gt;\n</code>", "<code>compressor</code>", "<code>compress css</code>", "<code>{% compress css %}\n    &lt;link href=\"{% static \"css/bootstrap.css\" %}\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"{% static \"css/bootstrap-spinedit.css\" %}\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"{% static \"djangular/css/styles.css\" %}\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"{% static \"fonts/fontawesome-webfont.ttf\" %}\" rel=\"stylesheet\"&gt;\n{% endcompress %}\n</code>", "<code>ttf</code>", "<code>endcompress</code>"], "path": "stack.django"}, {"tags": ["python", "pip"], "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1273596195, "answer_id": 2812627, "path": "stack.django.answer", "score": 72, "up_vote_count": 72, "is_accepted": false, "last_activity_date": 1394999393, "last_edit_date": 1394999393, "body_markdown": "`/path/to/python2.{5,6} /path/to/pip install PackageName` doesn&#39;t work?\r\n\r\nFor this to work on any python version that doesn&#39;t have pip already installed you need to download pip and do `python*version* setup.py install`. For example `python3.3 setup.py install`. This resolves the import error in the comments.  (As suggested by @hbdgaf)"}, {"tags": [], "down_vote_count": 3, "creation_date": 1296948281, "answer_id": 4910393, "path": "stack.django.answer", "score": 265, "up_vote_count": 268, "is_accepted": true, "last_activity_date": 1396300397, "last_edit_date": 1396300397, "body_markdown": "Since version 0.8, Pip supports `pip-{version}`. You can use it the same as `easy_install-{version}`:\r\n\r\n    $ pip-2.5 install myfoopackage\r\n    $ pip-2.6 install otherpackage\r\n    $ pip-2.7 install mybarpackage\r\n\r\n--------\r\n\r\n**EDIT**: pip changed its schema to use `pipVERSION` instead of `pip-VERSION` in version 1.5. You should use the following if you have `pip &gt;= 1.5`:\r\n\r\n    $ pip2.6 install otherpackage\r\n    $ pip2.7 install mybarpackage\r\n\r\nCheck https://github.com/pypa/pip/pull/1053 for more details\r\n\r\n\r\n----------\r\n\r\nReferences:\r\n\r\n* https://github.com/pypa/pip/issues/200\r\n* http://www.pip-installer.org/docs/pip/en/0.8.3/news.html#id4\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1365422724, "answer_id": 15878602, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1365422724, "body_markdown": "So apparently there are multiple versions of `easy_install` *and* `pip`. It seems to be a big mess. Anyway, this is what I did to install Django for Python 2.7 on Ubuntu 12.10:\r\n\r\n\r\n    $ sudo easy_install-2.7 pip\r\n    Searching for pip\r\n    Best match: pip 1.1\r\n    Adding pip 1.1 to easy-install.pth file\r\n    Installing pip-2.7 script to /usr/local/bin\r\n    \r\n    Using /usr/lib/python2.7/dist-packages\r\n    Processing dependencies for pip\r\n    Finished processing dependencies for pip\r\n\r\n    $ sudo pip-2.7 install django\r\n    Downloading/unpacking django\r\n      Downloading Django-1.5.1.tar.gz (8.0Mb): 8.0Mb downloaded\r\n      Running setup.py egg_info for package django\r\n        \r\n        warning: no previously-included files matching &#39;__pycache__&#39; found under directory &#39;*&#39;\r\n        warning: no previously-included files matching &#39;*.py[co]&#39; found under directory &#39;*&#39;\r\n    Installing collected packages: django\r\n      Running setup.py install for django\r\n        changing mode of build/scripts-2.7/django-admin.py from 644 to 755\r\n        \r\n        warning: no previously-included files matching &#39;__pycache__&#39; found under directory &#39;*&#39;\r\n        warning: no previously-included files matching &#39;*.py[co]&#39; found under directory &#39;*&#39;\r\n        changing mode of /usr/local/bin/django-admin.py to 755\r\n    Successfully installed django\r\n    Cleaning up...\r\n\r\n    $ python\r\n    Python 2.7.3 (default, Sep 26 2012, 21:51:14) \r\n    [GCC 4.7.2] on linux2\r\n    Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\r\n    &gt;&gt;&gt; import django\r\n    &gt;&gt;&gt; \r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1408900346, "answer_id": 25474222, "path": "stack.django.answer", "score": 42, "up_vote_count": 42, "is_accepted": false, "last_activity_date": 1408900346, "body_markdown": "I had python 2.6 installed by default (Amazon EC2 AMI), but needed python2.7 plus some external packages for my application. Assuming you already installed python2.7 alongside with default python (2.6 in my case). Here is how to install pip and packages for non-default python2.7\r\n\r\nInstall pip for your python version:\r\n    \r\n    curl -O https://bootstrap.pypa.io/get-pip.py\r\n    python27 get-pip.py\r\n\r\nUse specific pip version to install packages:\r\n\r\n    pip2.7 install mysql-connector-python --allow-external mysql-connector-python"}, {"tags": [], "down_vote_count": 0, "creation_date": 1457074854, "answer_id": 35789911, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1457074854, "body_markdown": "I ran into this issue myself recently and found that I wasn&#39;t getting the right pip for Python 3, on my Linux system that also has Python 2.\r\n\r\nFirst you must ensure that you have installed pip for your python version:\r\n\r\nFor Python 2:\r\n\r\n    sudo apt-get install python-pip\r\n\r\n\r\nFor Python 3:\r\n\r\n    sudo apt-get install python3-pip\r\n\r\n\r\n\r\nThen to install packages for one version of Python or the other, simply use the following for Python 2:\r\n\r\n    pip install &lt;package&gt;\r\n\r\n or for Python 3:\r\n\r\n    pip3 install &lt;package&gt;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1463395212, "answer_id": 37251956, "path": "stack.django.answer", "score": 55, "up_vote_count": 56, "is_accepted": false, "last_activity_date": 1502945151, "last_edit_date": 1502945151, "body_markdown": "In Windows, you can execute the pip module by mentioning the python version ( You need to ensure that the launcher is on your path )\r\n\r\n`py -3.4 -m pip install pyfora` \r\n \r\n`py -2.7 -m pip install pyfora`\r\n\r\nAlternatively, you can call the desired python executable directly like this:\r\n\r\n`/path/to/python.exe -m pip install pyfora`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1463600562, "answer_id": 37308766, "path": "stack.django.answer", "score": 21, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1463600562, "body_markdown": "It worked for me in windows this way:\r\n\r\n 1. I changed the name of python files python.py and pythonw.exe to python3.py pythonw3.py \r\n\r\n 2. Then I just ran this command in the prompt:\r\n\r\n `python3 -m pip install package`\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1476036627, "answer_id": 39946882, "path": "stack.django.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1486715639, "last_edit_date": 1486715639, "body_markdown": "Other answers show how to use pip with both 2.X and 3.X Python, but does not show **how to handle the case of multiple Python distributions (eg. original Python and Anaconda Python)**.\r\n\r\nI have a total of 3 Python versions: original Python 2.7 and Python 3.5 and Anaconda Python 3.5.\r\n\r\nHere is how I install a package into:\r\n\r\n1. Original **Python 3.5**:\r\n\r\n        /usr/bin/python3 -m pip install python-daemon\r\n\r\n2. Original **Python 2.7**:\r\n\r\n        /usr/bin/python -m pip install python-daemon\r\n\r\n3. **Anaconda Python 3.5**:\r\n\r\n        python3 -m pip install python-daemon\r\n\r\n   or\r\n\r\n        pip3 install python-daemon\r\n\r\n   Simpler, as Anaconda overrides original Python binaries in user environment.\r\n\r\n   *Of course, installing in anaconda should be done with `conda` command, this is just an example.*\r\n\r\n------\r\n\r\nAlso, make sure that pip is installed for that specific python.You might need to manually install pip. This works in Ubuntu 16.04:\r\n\r\n    sudo apt-get install python-pip \r\n\r\nor\r\n\r\n    sudo apt-get install python3-pip\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1477662264, "answer_id": 40306420, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1477667473, "last_edit_date": 1477667473, "body_markdown": "Context: Archlinux  \r\n\r\nAction:  \r\nInstall python2-pip:  \r\n`sudo pacman -S python2-pip`  \r\n\r\nYou now have pip2.7:  \r\n`sudo pip2.7 install boto`\r\n\r\nTest (in my case I needed &#39;boto&#39;):  \r\nRun the following commands:  \r\n\r\n    python2\r\n    import boto\r\n\r\nSuccess: No error.\r\n\r\nExit: &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;D&lt;/kbd&gt;   "}, {"tags": [], "down_vote_count": 0, "creation_date": 1483231398, "answer_id": 41412605, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1483231398, "body_markdown": "From here: https://docs.python.org/3/installing/\r\n\r\nHere is how to install packages for various versions that are installed at the same time **linux, mac, posix**:\r\n\r\n    python2   -m pip install SomePackage  # default Python 2\r\n    python2.7 -m pip install SomePackage  # specifically Python 2.7\r\n    python3   -m pip install SomePackage  # default Python 3\r\n    python3.4 -m pip install SomePackage  # specifically Python 3.4\r\n    python3.5 -m pip install SomePackage  # specifically Python 3.5\r\n    python3.6 -m pip install SomePackage  # specifically Python 3.6\r\n\r\n\r\nOn **Windows**, use the py Python launcher in combination with the -m switch:\r\n\r\n    py -2   -m pip install SomePackage  # default Python 2\r\n    py -2.7 -m pip install SomePackage  # specifically Python 2.7\r\n    py -3   -m pip install SomePackage  # default Python 3\r\n    py -3.4 -m pip install SomePackage  # specifically Python 3.4"}, {"tags": [], "down_vote_count": 0, "creation_date": 1483693348, "answer_id": 41502177, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1483693348, "body_markdown": "for example, if you set other versions (e.g. 3.5) as default and want to install pip for python 2.7:\r\n\r\n1. download pip at https://pypi.python.org/pypi/pip (tar)\r\n2. unzip tar file\r\n3. cd to the file\u2019s directory\r\n4. sudo python2.7 setup.py install"}, {"tags": [], "down_vote_count": 0, "creation_date": 1491114811, "answer_id": 43165320, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1491114811, "body_markdown": "pip is also a python package. So the easiest way to install modules to a specific python version would be below\r\n\r\n     python2.7 /usr/bin/pip install foo\r\n\r\nor \r\n\r\n    python2.7 -m pip install foo"}, {"tags": [], "down_vote_count": 0, "creation_date": 1513561882, "answer_id": 47861174, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1513561882, "body_markdown": "Most of the answers here address the issue but I want to add something what was continually confusing me with regard to creating an alternate installation of python in the `/usr/local` on CentOS 7. When I installed there, it appeared like pip was working since I could use `pip2.7 install` and it would install modules. However, what I couldn&#39;t figure out was why my newly installed version of python wasn&#39;t seeing what I was installing.\r\n\r\nIt turns out in CentOS 7 that there is already a python2.7 and a pip2.7 in the `/usr/bin` folder. To install pip for your new python distribution, you need to specifically tell sudo to go to `/usr/local/bin`\r\n\r\n    sudo /usr/local/bin/python2.7 -m ensurepip\r\n\r\nThis should get pip2.7 installed in your `/usr/local/bin` folder along with your version of python. The trick is that when you want to install modules, you either need to modify the sudo `$PATH` variable to include `/usr/local/bin` or you need to execute\r\n    \r\n    sudo /usr/local/bin/pip2.7 install &lt;module&gt;\r\n\r\nif you want to install a new module. It took me forever to remember that `sudo` wasn&#39;t immediately seeing `/usr/local/bin`."}], "creation_date": 1273595538, "body_markdown": "Is there any way to make `pip` play well with multiple versions of Python? For example, I want to use `pip` to explicitly install things to either my site 2.5 installation or my site 2.6 installation.\r\n\r\nFor example, with `easy_install`, I use `easy_install-2.{5,6}`.\r\n\r\nAnd, yes \u2014 I know about virtualenv, and no \u2014 it&#39;s not a solution to this particular problem.\r\n\r\n", "title": "pip: dealing with multiple Python versions?", "view_count": 252096, "up_vote_count": 249, "answer_count": 13, "link": "https://stackoverflow.com/questions/2812520/pip-dealing-with-multiple-python-versions", "code_snippet": ["<code>pip</code>", "<code>pip</code>", "<code>easy_install</code>", "<code>easy_install-2.{5,6}</code>", "<code>pip2</code>", "<code>pip3</code>", "<code>pip-{version}</code>", "<code>easy_install-{version}</code>", "<code>$ pip-2.5 install myfoopackage\n$ pip-2.6 install otherpackage\n$ pip-2.7 install mybarpackage\n</code>", "<code>pipVERSION</code>", "<code>pip-VERSION</code>", "<code>pip &gt;= 1.5</code>", "<code>$ pip2.6 install otherpackage\n$ pip2.7 install mybarpackage\n</code>", "<code>pip</code>", "<code>pip</code>", "<code>easy_install</code>", "<code>get-pip.py</code>", "<code>pip install --upgrade pip</code>", "<code>pip</code>", "<code>pip-2.7</code>", "<code>pip</code>", "<code>/path/to/python2.{5,6} /path/to/pip install PackageName</code>", "<code>python*version* setup.py install</code>", "<code>python3.3 setup.py install</code>", "<code>python2.7 -m pip install PackageName</code>", "<code>py -3.4 -m pip install pyfora</code>", "<code>py -2.7 -m pip install pyfora</code>", "<code>/path/to/python.exe -m pip install pyfora</code>", "<code>python2</code>", "<code>python3</code>", "<code>pip2</code>", "<code>pip3</code>", "<code>curl -O https://bootstrap.pypa.io/get-pip.py\npython27 get-pip.py\n</code>", "<code>pip2.7 install mysql-connector-python --allow-external mysql-connector-python\n</code>", "<code>python3 get-pip.py</code>", "<code>pip34 install example</code>", "<code>Could not find a version that satisfies the requirement pip (from versions: ) No matching distribution found for pip</code>", "<code>python2.6 get-pip.py</code>", "<code>python3 -m pip install package</code>", "<code>/usr/bin/python3 -m pip install python-daemon\n</code>", "<code>/usr/bin/python -m pip install python-daemon\n</code>", "<code>python3 -m pip install python-daemon\n</code>", "<code>pip3 install python-daemon\n</code>", "<code>conda</code>", "<code>sudo apt-get install python-pip \n</code>", "<code>sudo apt-get install python3-pip\n</code>", "<code>sudo apt-get install python-pip\n</code>", "<code>sudo apt-get install python3-pip\n</code>", "<code>pip install &lt;package&gt;\n</code>", "<code>pip3 install &lt;package&gt;\n</code>", "<code>easy_install</code>", "<code>pip</code>", "<code>$ sudo easy_install-2.7 pip\nSearching for pip\nBest match: pip 1.1\nAdding pip 1.1 to easy-install.pth file\nInstalling pip-2.7 script to /usr/local/bin\n\nUsing /usr/lib/python2.7/dist-packages\nProcessing dependencies for pip\nFinished processing dependencies for pip\n\n$ sudo pip-2.7 install django\nDownloading/unpacking django\n  Downloading Django-1.5.1.tar.gz (8.0Mb): 8.0Mb downloaded\n  Running setup.py egg_info for package django\n\n    warning: no previously-included files matching '__pycache__' found under directory '*'\n    warning: no previously-included files matching '*.py[co]' found under directory '*'\nInstalling collected packages: django\n  Running setup.py install for django\n    changing mode of build/scripts-2.7/django-admin.py from 644 to 755\n\n    warning: no previously-included files matching '__pycache__' found under directory '*'\n    warning: no previously-included files matching '*.py[co]' found under directory '*'\n    changing mode of /usr/local/bin/django-admin.py to 755\nSuccessfully installed django\nCleaning up...\n\n$ python\nPython 2.7.3 (default, Sep 26 2012, 21:51:14) \n[GCC 4.7.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import django\n&gt;&gt;&gt; \n</code>", "<code> python2.7 /usr/bin/pip install foo\n</code>", "<code>python2.7 -m pip install foo\n</code>", "<code>python2   -m pip install SomePackage  # default Python 2\npython2.7 -m pip install SomePackage  # specifically Python 2.7\npython3   -m pip install SomePackage  # default Python 3\npython3.4 -m pip install SomePackage  # specifically Python 3.4\npython3.5 -m pip install SomePackage  # specifically Python 3.5\npython3.6 -m pip install SomePackage  # specifically Python 3.6\n</code>", "<code>py -2   -m pip install SomePackage  # default Python 2\npy -2.7 -m pip install SomePackage  # specifically Python 2.7\npy -3   -m pip install SomePackage  # default Python 3\npy -3.4 -m pip install SomePackage  # specifically Python 3.4\n</code>", "<code>/usr/local</code>", "<code>pip2.7 install</code>", "<code>/usr/bin</code>", "<code>/usr/local/bin</code>", "<code>sudo /usr/local/bin/python2.7 -m ensurepip\n</code>", "<code>/usr/local/bin</code>", "<code>$PATH</code>", "<code>/usr/local/bin</code>", "<code>sudo /usr/local/bin/pip2.7 install &lt;module&gt;\n</code>", "<code>sudo</code>", "<code>/usr/local/bin</code>", "<code>sudo pacman -S python2-pip</code>", "<code>sudo pip2.7 install boto</code>", "<code>python2\nimport boto\n</code>"], "path": "stack.django"}, {"tags": ["javascript", "regex"], "creation_date": 1220263129, "body_markdown": "I am using the function below to match URLs inside a given text and replace them for HTML links. The regular expression is working great, but currently I am only replacing the first match.\r\n\r\nHow I can replace all the URL? I guess I should be using the *exec* command, but I did not really figure how to do it.\r\n\r\n    function replaceURLWithHTMLLinks(text) {\r\n        var exp = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])/i;\r\n        return text.replace(exp,&quot;&lt;a href=&#39;$1&#39;&gt;$1&lt;/a&gt;&quot;); \r\n    }\r\n", "last_edit_date": 1313263520, "up_vote_count": 394, "link": "https://stackoverflow.com/questions/37684/how-to-replace-plain-urls-with-links", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1220263252, "answer_id": 37687, "path": "stack.django.answer", "score": 281, "up_vote_count": 283, "is_accepted": false, "last_activity_date": 1393235840, "last_edit_date": 1495541454, "body_markdown": "### Replacing URLs with links (Answer to the General Problem)\r\n\r\nThe regular expression in the question misses *a lot* of edge cases. When detecting URLs, it&#39;s always better to use a specialized library that handles international domain names, new TLDs like `.museum`, parentheses and other punctuation within and at the end of the URL, and many other edge cases. See the Jeff Atwood&#39;s blog post *[The Problem With URLs][1]* for an explanation of some of the other issues. \r\n \r\n&gt;The **best summary of URL matching libraries** is in **[Dan Dascalescu&#39;s Answer ![+100][2]][DansAnswer]**  \r\n(as of Feb 2014)\r\n\r\n---\r\n\r\n### &quot;Make a regular expression replace more than one match&quot; (Answer to the specific problem)\r\n\r\nAdd a &quot;g&quot; to the end of the regular expression to enable global matching:\r\n\r\n    /ig;\r\n\r\nBut that only fixes the problem in the question where the regular expression was only replacing the first match. *Do not use that code.*\r\n\r\n\r\n  [DansAnswer]: https://stackoverflow.com/questions/37684/how-to-replace-plain-urls-with-links#21925491\r\n\r\n\r\n  [1]: http://www.codinghorror.com/blog/2008/10/the-problem-with-urls.html\r\n  [2]: http://i.stack.imgur.com/AhNsx.png"}, {"tags": [], "down_vote_count": 1, "creation_date": 1240802435, "answer_id": 792151, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1240802435, "body_markdown": "I had to do the opposite, and make html links into just the URL, but I modified your regex and it works like a charm, thanks :) \r\n\r\n&lt;pre&gt;\r\nvar exp = /&amp;lt;a\\s.*href=[&#39;&amp;quot;](\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&amp;amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;amp;@#\\/%=~_|])[&#39;&amp;quot;].*&amp;gt;.*&amp;lt;\\/a&amp;gt;/ig;\r\n\r\nsource = source.replace(exp,&amp;quot;$1&amp;quot;);\r\n&lt;/pre&gt;"}, {"tags": [], "down_vote_count": 2, "creation_date": 1264809358, "answer_id": 2166104, "path": "stack.django.answer", "score": 22, "up_vote_count": 24, "is_accepted": false, "last_activity_date": 1392976554, "last_edit_date": 1392976554, "body_markdown": "Thanks, this was very helpful. I also wanted something that would link things that looked like a URL -- as a basic requirement, it&#39;d link something like www.yahoo.com, even if the http:// protocol prefix was not present. So basically, if &quot;www.&quot; is present, it&#39;ll link it and assume it&#39;s http://. I also wanted emails to turn into mailto: links. EXAMPLE:  www.yahoo.com would be converted to &lt;a href=&quot;http://www.yahoo.com&quot; target=&quot;_blank&quot;&gt;www.yahoo.com&lt;/a&gt;\r\n\r\nHere&#39;s the code I ended up with (combination of code from this page and other stuff I found online, and other stuff I did on my own):\r\n\r\n    function Linkify(inputText) {\r\n    \t//URLs starting with http://, https://, or ftp://\r\n    \tvar replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])/gim;\r\n    \tvar replacedText = inputText.replace(replacePattern1, &#39;&lt;a href=&quot;$1&quot; target=&quot;_blank&quot;&gt;$1&lt;/a&gt;&#39;);\r\n    \t\r\n    \t//URLs starting with www. (without // before it, or it&#39;d re-link the ones done above)\r\n    \tvar replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\r\n    \tvar replacedText = replacedText.replace(replacePattern2, &#39;$1&lt;a href=&quot;http://$2&quot; target=&quot;_blank&quot;&gt;$2&lt;/a&gt;&#39;);\r\n    \t\r\n    \t//Change email addresses to mailto:: links\r\n    \tvar replacePattern3 = /(\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,6})/gim;\r\n    \tvar replacedText = replacedText.replace(replacePattern3, &#39;&lt;a href=&quot;mailto:$1&quot;&gt;$1&lt;/a&gt;&#39;);\r\n    \t\r\n    \treturn replacedText\r\n    }\r\n\r\nIn the 2nd replace, the (^|[^\\/]) part is only replacing www.whatever.com if it&#39;s not already prefixed by // -- to avoid double-linking if a URL was already linked in the first replace. Also, it&#39;s possible that www.whatever.com might be at the beginning of the string, which is the first &quot;or&quot; condition in that part of the regex.\r\n\r\nThis could be integrated as a jQuery plugin as Jesse P illustrated above -- but I specifically wanted a regular function that wasn&#39;t acting on an existing DOM element, because I&#39;m taking text I have and then adding it to the DOM, and I want the text to be &quot;linkified&quot; before I add it, so I pass the text through this function. Works great."}, {"tags": [], "down_vote_count": 1, "creation_date": 1265961736, "answer_id": 2250355, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1313263858, "last_edit_date": 1313263858, "body_markdown": "The e-mail detection in Travitron&#39;s answer above did not work for me, so I extended/replaced it with the following (C# code).\r\n\r\n    // Change e-mail addresses to mailto: links.\r\n    const RegexOptions o = RegexOptions.Multiline | RegexOptions.IgnoreCase;\r\n    const string pat3 = @&quot;([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,6})&quot;;\r\n    const string rep3 = @&quot;&lt;a href=&quot;&quot;mailto:$1@$2.$3&quot;&quot;&gt;$1@$2.$3&lt;/a&gt;&quot;;\r\n    text = Regex.Replace(text, pat3, rep3, o);\r\n\r\nThis allows for e-mail addresses like &quot;*firstname.secondname@one.two.three.co.uk*&quot;.\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1277443100, "answer_id": 3115735, "path": "stack.django.answer", "score": 7, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1277443100, "body_markdown": "The best script to do this:\r\nhttp://benalman.com/projects/javascript-linkify-process-lin/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1286538619, "answer_id": 3890175, "path": "stack.django.answer", "score": 126, "up_vote_count": 127, "is_accepted": false, "last_activity_date": 1392976516, "last_edit_date": 1392976516, "body_markdown": "I&#39;ve made some small modifications to Travis&#39;s code (just to avoid any unnecessary redeclaration - but it&#39;s working great for my needs, so nice job!):\r\n\r\n    function linkify(inputText) {\r\n        var replacedText, replacePattern1, replacePattern2, replacePattern3;\r\n\r\n        //URLs starting with http://, https://, or ftp://\r\n        replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])/gim;\r\n        replacedText = inputText.replace(replacePattern1, &#39;&lt;a href=&quot;$1&quot; target=&quot;_blank&quot;&gt;$1&lt;/a&gt;&#39;);\r\n\r\n        //URLs starting with &quot;www.&quot; (without // before it, or it&#39;d re-link the ones done above).\r\n        replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\r\n        replacedText = replacedText.replace(replacePattern2, &#39;$1&lt;a href=&quot;http://$2&quot; target=&quot;_blank&quot;&gt;$2&lt;/a&gt;&#39;);\r\n\r\n        //Change email addresses to mailto:: links.\r\n        replacePattern3 = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\r\n        replacedText = replacedText.replace(replacePattern3, &#39;&lt;a href=&quot;mailto:$1&quot;&gt;$1&lt;/a&gt;&#39;);\r\n\r\n        return replacedText;\r\n    }"}, {"tags": [], "down_vote_count": 1, "creation_date": 1313766230, "answer_id": 7123542, "path": "stack.django.answer", "score": 61, "up_vote_count": 62, "is_accepted": false, "last_activity_date": 1413567288, "last_edit_date": 1413567288, "body_markdown": "Made some optimizations to Travis&#39; `Linkify()` code above. I also fixed a bug where email addresses with subdomain type formats would not be matched (i.e. example@domain.co.uk).\r\n\r\n\r\nIn addition, I changed the implementation to prototype the `String` class so that items can be matched like so:\r\n\r\n    var text = &#39;address@example.com&#39;;\r\n    text.linkify();\r\n\r\n    &#39;http://stackoverflow.com/&#39;.linkify();\r\n\r\nAnyway, here&#39;s the script:\r\n\r\n    if(!String.linkify) {\r\n        String.prototype.linkify = function() {\r\n\r\n            // http://, https://, ftp://\r\n            var urlPattern = /\\b(?:https?|ftp):\\/\\/[a-z0-9-+&amp;@#\\/%?=~_|!:,.;]*[a-z0-9-+&amp;@#\\/%=~_|]/gim;\r\n\r\n            // www. sans http:// or https://\r\n            var pseudoUrlPattern = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\r\n\r\n            // Email addresses\r\n            var emailAddressPattern = /[\\w.]+@[a-zA-Z_-]+?(?:\\.[a-zA-Z]{2,6})+/gim;\r\n\r\n            return this\r\n                .replace(urlPattern, &#39;&lt;a href=&quot;$&amp;&quot;&gt;$&amp;&lt;/a&gt;&#39;)\r\n                .replace(pseudoUrlPattern, &#39;$1&lt;a href=&quot;http://$2&quot;&gt;$2&lt;/a&gt;&#39;)\r\n                .replace(emailAddressPattern, &#39;&lt;a href=&quot;mailto:$&amp;&quot;&gt;$&amp;&lt;/a&gt;&#39;);\r\n        };\r\n    }"}, {"tags": [], "down_vote_count": 2, "creation_date": 1313936109, "answer_id": 7138764, "path": "stack.django.answer", "score": 10, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1313936109, "body_markdown": "I made a change to Roshambo String.linkify() to the emailAddressPattern to recognize aaa.bbb.@ccc.ddd addresses\r\n\r\n\tif(!String.linkify) {\r\n\t    String.prototype.linkify = function() {\r\n\t    \t\r\n\t        // http://, https://, ftp://\r\n\t        var urlPattern = /\\b(?:https?|ftp):\\/\\/[a-z0-9-+&amp;@#\\/%?=~_|!:,.;]*[a-z0-9-+&amp;@#\\/%=~_|]/gim;\r\n\r\n\t        // www. sans http:// or https://\r\n\t        var pseudoUrlPattern = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\r\n\r\n\t        // Email addresses *** here I&#39;ve changed the expression ***\r\n\t        var emailAddressPattern = /(([a-zA-Z0-9_\\-\\.]+)@[a-zA-Z_]+?(?:\\.[a-zA-Z]{2,6}))+/gim;\r\n\r\n\t        return this\r\n\t            .replace(urlPattern, &#39;&lt;a target=&quot;_blank&quot; href=&quot;$&amp;&quot;&gt;$&amp;&lt;/a&gt;&#39;)\r\n\t            .replace(pseudoUrlPattern, &#39;$1&lt;a target=&quot;_blank&quot; href=&quot;http://$2&quot;&gt;$2&lt;/a&gt;&#39;)\r\n\t            .replace(emailAddressPattern, &#39;&lt;a target=&quot;_blank&quot; href=&quot;mailto:$1&quot;&gt;$1&lt;/a&gt;&#39;);\r\n\t    };\r\n\t}\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1323420154, "answer_id": 8443010, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1323420154, "body_markdown": "If you need to show shorter link (only domain), but with same long URL, you can try my modification of Sam Hasler&#39;s code version posted above\r\n\r\n    function replaceURLWithHTMLLinks(text) {\r\n    \tvar exp = /(\\b(https?|ftp|file):\\/\\/([-A-Z0-9+&amp;@#%?=~_|!:,.;]*)([-A-Z0-9+&amp;@#%?\\/=~_|!:,.;]*)[-A-Z0-9+&amp;@#\\/%=~_|])/ig;\r\n    \treturn text.replace(exp, &quot;&lt;a href=&#39;$1&#39; target=&#39;_blank&#39;&gt;$3&lt;/a&gt;&quot;);\r\n    }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1336478565, "answer_id": 10498205, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1346247689, "last_edit_date": 1346247689, "body_markdown": "Identifying URLs is tricky because they are often surrounded by punctuation marks and because users frequently do not use the full form of the URL. Many JavaScript functions exist for replacing URLs with hyperlinks, but I was unable to find one that works as well as the `urlize` filter in the Python-based web framework Django. I therefore ported Django&#39;s `urlize` function to JavaScript:\r\n\r\n&gt; https://github.com/ljosa/urlize.js\r\n\r\nAn example:\r\n\r\n    urlize(&#39;Go to SO (stackoverflow.com) and ask. &lt;grin&gt;&#39;, \r\n           {nofollow: true, autoescape: true})\r\n    =&gt; &quot;Go to SO (&lt;a href=&quot;http://stackoverflow.com&quot; rel=&quot;nofollow&quot;&gt;stackoverflow.com&lt;/a&gt;) and ask. &amp;lt;grin&amp;gt;&quot;\r\n\r\nThe second argument, if true, causes `rel=&quot;nofollow&quot;` to be inserted. The third argument, if true, escapes characters that have special meaning in HTML. See [the README file](https://github.com/ljosa/urlize.js/blob/master/README.md)."}, {"tags": [], "down_vote_count": 2, "creation_date": 1353611027, "answer_id": 13518703, "path": "stack.django.answer", "score": 5, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1353625017, "last_edit_date": 1353625017, "body_markdown": "This solution works like many of the others, and in fact uses the same regex as one of them, however in stead of returning a HTML String this will return a document fragment containing the A element and any applicable text nodes. \r\n\r\n     function make_link(string) {\r\n        var words = string.split(&#39; &#39;),\r\n            ret = document.createDocumentFragment();\r\n        for (var i = 0, l = words.length; i &lt; l; i++) {\r\n            if (words[i].match(/[-a-zA-Z0-9@:%_\\+.~#?&amp;//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*)?/gi)) {\r\n                var elm = document.createElement(&#39;a&#39;);\r\n                elm.href = words[i];\r\n                elm.textContent = words[i];\r\n                if (ret.childNodes.length &gt; 0) {\r\n                    ret.lastChild.textContent += &#39; &#39;;\r\n                }\r\n                ret.appendChild(elm);\r\n            } else {\r\n                if (ret.lastChild &amp;&amp; ret.lastChild.nodeType === 3) {\r\n                    ret.lastChild.textContent += &#39; &#39; + words[i];\r\n                } else {\r\n                    ret.appendChild(document.createTextNode(&#39; &#39; + words[i]));\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\nThere are some caveats, namely with older IE and textContent support. \r\n\r\n[here](http://jsfiddle.net/rlemon/Npavu/) is a demo."}, {"tags": [], "down_vote_count": 2, "creation_date": 1383584361, "answer_id": 19772928, "path": "stack.django.answer", "score": 0, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1383584361, "last_edit_date": 1495540519, "body_markdown": "After input from several sources I&#39;ve now a solution that works well.  It had to do with writing your own replacement code.\r\n\r\n[Answer](https://stackoverflow.com/a/19708150/1153319).\r\n\r\n[Fiddle](http://jsfiddle.net/EwzcD/1/).\r\n\r\n    function replaceURLWithHTMLLinks(text) {\r\n        var re = /(\\(.*?)?\\b((?:https?|ftp|file):\\/\\/[-a-z0-9+&amp;@#\\/%?=~_()|!:,.;]*[-a-z0-9+&amp;@#\\/%=~_()|])/ig;\r\n        return text.replace(re, function(match, lParens, url) {\r\n            var rParens = &#39;&#39;;\r\n            lParens = lParens || &#39;&#39;;\r\n\r\n            // Try to strip the same number of right parens from url\r\n            // as there are left parens.  Here, lParenCounter must be\r\n            // a RegExp object.  You cannot use a literal\r\n            //     while (/\\(/g.exec(lParens)) { ... }\r\n            // because an object is needed to store the lastIndex state.\r\n            var lParenCounter = /\\(/g;\r\n            while (lParenCounter.exec(lParens)) {\r\n                var m;\r\n                // We want m[1] to be greedy, unless a period precedes the\r\n                // right parenthesis.  These tests cannot be simplified as\r\n                //     /(.*)(\\.?\\).*)/.exec(url)\r\n                // because if (.*) is greedy then \\.? never gets a chance.\r\n                if (m = /(.*)(\\.\\).*)/.exec(url) ||\r\n                        /(.*)(\\).*)/.exec(url)) {\r\n                    url = m[1];\r\n                    rParens = m[2] + rParens;\r\n                }\r\n            }\r\n            return lParens + &quot;&lt;a href=&#39;&quot; + url + &quot;&#39;&gt;&quot; + url + &quot;&lt;/a&gt;&quot; + rParens;\r\n        });\r\n    }\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1391083114, "answer_id": 21455918, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1391083114, "last_edit_date": 1495539206, "body_markdown": "**Reg Ex:** \r\n`/(\\b((https?|ftp|file):\\/\\/|(www))[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|]*)/ig`\r\n\r\n    function UriphiMe(text) {\r\n          var exp = /(\\b((https?|ftp|file):\\/\\/|(www))[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|]*)/ig;\t\r\n          return text.replace(exp,&quot;&lt;a href=&#39;$1&#39;&gt;$1&lt;/a&gt;&quot;);\r\n    }\r\n\r\n\r\n**Below are some tested string:** \r\n\r\n 1. Find me on to www.google.com \r\n 2. www\r\n 3. Find me on to www.http://www.com \r\n 4. Follow me on : http://www.nishantwork.wordpress.com \r\n 5. http://www.nishantwork.wordpress.com \r\n 6. Follow me on : http://www.nishantwork.wordpress.com \r\n 7. https://stackoverflow.com/users/430803/nishant\r\n\r\n\r\nNote: If you don&#39;t want to pass `www` as valid one just use below reg ex: \r\n`/(\\b((https?|ftp|file):\\/\\/|(www))[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])/ig`\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 6, "creation_date": 1392957967, "answer_id": 21925491, "path": "stack.django.answer", "score": 269, "up_vote_count": 275, "is_accepted": true, "last_activity_date": 1468010592, "last_edit_date": 1468010592, "body_markdown": "First off, rolling your own regexp to parse URLs is a _terrible idea_. You must imagine this is a common enough problem that someone has written, debugged and [tested](http://benalman.com/code/test/js-linkify/) a library for it, according to [the RFCs](https://metacpan.org/pod/Regexp::Common::URI#REFERENCES). **URIs are complex** - check out the [code for URL parsing in Node.js](https://github.com/joyent/node/blob/master/lib/url.js) and the Wikipedia page on [URI schemes](http://en.wikipedia.org/wiki/URI_scheme).\r\n\r\nThere are a ton of edge cases when it comes to parsing URLs: [international domain names](http://en.wikipedia.org/wiki/Top-level_domain#IDN_test_domains), actual (`.museum`) vs. nonexistent (`.etc`) TLDs, weird punctuation including [parentheses][1], punctuation at the end of the URL, IPV6 hostnames etc.\r\n\r\nI&#39;ve looked at [a ton](https://github.com/search?l=JavaScript&amp;q=linkify&amp;ref=cmdform&amp;search_target=global&amp;type=Repositories) of [libraries](https://github.com/search?l=JavaScript&amp;q=autolink&amp;ref=cmdform&amp;search_target=global&amp;type=Repositories), and there are a few worth using despite some downsides:\r\n\r\n* Soapbox&#39;s [linkify](http://soapbox.github.io/jQuery-linkify/) has seen some serious effort put into it, and [a major refactor in June 2015](https://github.com/SoapBox/jQuery-linkify/pull/51) [removed the jQuery dependency](https://github.com/SoapBox/jQuery-linkify/issues/56). It still has [issues with IDNs](https://github.com/SoapBox/linkifyjs/issues/92).\r\n* [AnchorMe](http://alexcorvi.github.io/anchorme.js/) is a newcomer that [claims to be faster](https://github.com/ali-saleem/anchorme.js/issues/2) and leaner. Some [IDN issues](https://github.com/ali-saleem/anchorme.js/issues/1) as well.\r\n* [Autolinker.js](https://github.com/gregjacobs/Autolinker.js) lists features very specifically (e.g. _&quot;Will properly handle HTML input. The utility will not change the `href` attribute inside anchor (&lt;a&gt;) tags&quot;_). I&#39;ll thrown some tests at it when a [demo becomes available](https://github.com/gregjacobs/Autolinker.js/issues/138).\r\n\r\nLibraries that I&#39;ve disqualified quickly for this task:\r\n\r\n* Django&#39;s urlize [didn&#39;t handle certain TLDs properly](https://github.com/ljosa/urlize.js/pull/18) (here is the official [list of valid TLDs](http://data.iana.org/TLD/tlds-alpha-by-domain.txt). [No demo](https://github.com/ljosa/urlize.js/issues/21).\r\n* [autolink-js](https://github.com/bryanwoods/autolink-js/issues/12) wouldn&#39;t detect &quot;www.google.com&quot; without http://, so it&#39;s not quite suitable for autolinking &quot;casual URLs&quot; (without a scheme/protocol) found in plain text.\r\n* [Ben Alman&#39;s linkify](https://github.com/cowboy/javascript-linkify) hasn&#39;t been maintained since 2009.\r\n\r\nIf you insist on a regular expression, the most comprehensive is the [URL regexp from Component](https://github.com/component/regexps/blob/master/index.js#L3), though it will falsely detect some non-existent two-letter TLDs by looking at it.\r\n\r\n  [1]: http://www.codinghorror.com/blog/2008/10/the-problem-with-urls.html"}, {"tags": [], "down_vote_count": 1, "creation_date": 1401188326, "answer_id": 23887643, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1401188980, "last_edit_date": 1401188980, "body_markdown": "Keep it simple! Say what you cannot have, rather than what you can have :)\r\n\r\nAs mentioned above, URLs can be quite complex, especially after the &#39;?&#39;, and not all of them start with a &#39;www.&#39; e.g. `maps.bing.com/something?key=!&quot;&#163;$%^*()&amp;lat=65&amp;lon&amp;lon=20`\r\n\r\nSo, rather than have a complex regex that wont meet all edge cases, and will be hard to maintain, how about this much simpler one, which works well for me in practise.\r\n\r\nMatch\r\n\r\n`http(s):// (anything but a space)+`\r\n\r\n`www. (anything but a space)+`\r\n\r\nWhere &#39;anything&#39; is `[^&#39;&quot;&lt;&gt;\\s]`\r\n... basically a greedy match, carrying on to you meet a space, quote, angle bracket, or end of line \r\n\r\nAlso:\r\n\r\nRemember to check that it is not already in URL format, e.g. the text contains `href=&quot;...&quot;` or `src=&quot;...&quot;`\r\n\r\nAdd ref=nofollow (if appropriate)\r\n\r\nThis solution isn&#39;t as &quot;good&quot; as the libraries mentioned above, but is much simpler, and works well in practise.\r\n\r\n\r\n\r\n\tif html.match( /(href)|(src)/i )) {\r\n\t\treturn html; // text already has a hyper link in it\r\n\t\t}\r\n\t\t\r\n\thtml = html.replace( \r\n                /\\b(https?:\\/\\/[^\\s\\(\\)\\&#39;\\&quot;\\&lt;\\&gt;]+)/ig, \r\n                &quot;&lt;a ref=&#39;nofollow&#39; href=&#39;$1&#39;&gt;$1&lt;/a&gt;&quot; \r\n                );\r\n\t\r\n\thtml = html.replace( \r\n                /\\s(www\\.[^\\s\\(\\)\\&#39;\\&quot;\\&lt;\\&gt;]+)/ig, \r\n                &quot;&lt;a ref=&#39;nofollow&#39; href=&#39;http://$1&#39;&gt;$1&lt;/a&gt;&quot; \r\n                );\r\n\r\n\thtml = html.replace( \r\n                 /^(www\\.[^\\s\\(\\)\\&#39;\\&quot;\\&lt;\\&gt;]+)/ig, \r\n                &quot;&lt;a ref=&#39;nofollow&#39; href=&#39;http://$1&#39;&gt;$1&lt;/a&gt;&quot; \r\n                );\r\n\t\t\r\n\treturn html;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1431805818, "answer_id": 30280085, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1431805818, "body_markdown": "Correct URL detection with international domains &amp; astral characters support is not trivial thing. `linkify-it` library builds regex from [many conditions](https://github.com/markdown-it/linkify-it/blob/master/lib/re.js), and final size is about 6 kilobytes :) . It&#39;s more accurate than all libs, currently referenced in accepted answer.\r\n\r\nSee [linkify-it demo](http://markdown-it.github.io/linkify-it/) to check live all edge cases and test your ones.\r\n\r\nIf you need to linkify HTML source, you should parse it first, and iterate each text token separately."}, {"tags": [], "down_vote_count": 1, "creation_date": 1434058304, "answer_id": 30791827, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1434058304, "body_markdown": "Replace URLs in text with HTML links, ignore the URLs within a href/pre tag. \r\nhttps://github.com/JimLiu/auto-link\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1456953960, "answer_id": 35758393, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1481541831, "last_edit_date": 1481541831, "body_markdown": "I&#39;ve wrote yet another JavaScript library, it might be better for you since it&#39;s very sensitive with the least possible false positives, fast and small in size. I&#39;m currently actively maintaining it so please do test it &lt;a href=&quot;http://alexcorvi.github.io/anchorme.js/&quot;&gt;in the demo page&lt;/a&gt; and see how it would work for you.\r\n\r\nlink: https://github.com/alexcorvi/anchorme.js\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1458829151, "answer_id": 36202408, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1458829151, "body_markdown": "I searched on google for anything newer and ran across this one:\r\n\r\n    $(&#39;p&#39;).each(function(){\r\n       $(this).html( $(this).html().replace(/((http|https|ftp):\\/\\/[\\w?=&amp;.\\/-;#~%-]+(?![\\w\\s?&amp;.\\/;#~%&quot;=-]*&gt;))/g, &#39;&lt;a href=&quot;$1&quot;&gt;$1&lt;/a&gt; &#39;) );\r\n    });\r\n\r\n\r\n**demo:** http://jsfiddle.net/kachibito/hEgvc/1/\r\n\r\nWorks really well for normal links."}, {"tags": [], "down_vote_count": 0, "creation_date": 1462212680, "answer_id": 36988874, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1462212680, "body_markdown": "The warnings about URI complexity should be noted, but the simple answer to your question is:  \r\nTo replace every match you need to add the `/g` flag to the end of the RegEx:  \r\n` /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])/gi`"}], "title": "How to replace plain URLs with links?", "view_count": 204610, "answer_count": 20, "code_snippet": ["<code>function replaceURLWithHTMLLinks(text) {\n    var exp = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])/i;\n    return text.replace(exp,\"&lt;a href='$1'&gt;$1&lt;/a&gt;\"); \n}\n</code>", "<code>.museum</code>", "<code>.etc</code>", "<code>href</code>", "<code>URL regexp from Component</code>", "<code>Autolinker.js</code>", "<code>urlize.js</code>", "<code>.museum</code>", "<code>/ig;\n</code>", "<code>function linkify(inputText) {\n    var replacedText, replacePattern1, replacePattern2, replacePattern3;\n\n    //URLs starting with http://, https://, or ftp://\n    replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])/gim;\n    replacedText = inputText.replace(replacePattern1, '&lt;a href=\"$1\" target=\"_blank\"&gt;$1&lt;/a&gt;');\n\n    //URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\n    replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n    replacedText = replacedText.replace(replacePattern2, '$1&lt;a href=\"http://$2\" target=\"_blank\"&gt;$2&lt;/a&gt;');\n\n    //Change email addresses to mailto:: links.\n    replacePattern3 = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n    replacedText = replacedText.replace(replacePattern3, '&lt;a href=\"mailto:$1\"&gt;$1&lt;/a&gt;');\n\n    return replacedText;\n}\n</code>", "<code>[a-zA-Z]{2,6}</code>", "<code>(?:[a-zA-Z]{2,6})+</code>", "<code>replacePattern3 = /(\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,6})/gim;</code>", "<code>replacePattern3 = /(\\w+@[a-zA-Z_]+?(\\.[a-zA-Z]{2,6})+)/gim;</code>", "<code>Linkify()</code>", "<code>String</code>", "<code>var text = 'address@example.com';\ntext.linkify();\n\n'http://stackoverflow.com/'.linkify();\n</code>", "<code>if(!String.linkify) {\n    String.prototype.linkify = function() {\n\n        // http://, https://, ftp://\n        var urlPattern = /\\b(?:https?|ftp):\\/\\/[a-z0-9-+&amp;@#\\/%?=~_|!:,.;]*[a-z0-9-+&amp;@#\\/%=~_|]/gim;\n\n        // www. sans http:// or https://\n        var pseudoUrlPattern = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n\n        // Email addresses\n        var emailAddressPattern = /[\\w.]+@[a-zA-Z_-]+?(?:\\.[a-zA-Z]{2,6})+/gim;\n\n        return this\n            .replace(urlPattern, '&lt;a href=\"$&amp;\"&gt;$&amp;&lt;/a&gt;')\n            .replace(pseudoUrlPattern, '$1&lt;a href=\"http://$2\"&gt;$2&lt;/a&gt;')\n            .replace(emailAddressPattern, '&lt;a href=\"mailto:$&amp;\"&gt;$&amp;&lt;/a&gt;');\n    };\n}\n</code>", "<code>+</code>", "<code>foo+bar@domain.com</code>", "<code>/[\\w.+]+@[a-zA-Z_-]+?(?:\\.[a-zA-Z]{2,6})+/gim</code>", "<code>+</code>", "<code>function Linkify(inputText) {\n    //URLs starting with http://, https://, or ftp://\n    var replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])/gim;\n    var replacedText = inputText.replace(replacePattern1, '&lt;a href=\"$1\" target=\"_blank\"&gt;$1&lt;/a&gt;');\n\n    //URLs starting with www. (without // before it, or it'd re-link the ones done above)\n    var replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n    var replacedText = replacedText.replace(replacePattern2, '$1&lt;a href=\"http://$2\" target=\"_blank\"&gt;$2&lt;/a&gt;');\n\n    //Change email addresses to mailto:: links\n    var replacePattern3 = /(\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,6})/gim;\n    var replacedText = replacedText.replace(replacePattern3, '&lt;a href=\"mailto:$1\"&gt;$1&lt;/a&gt;');\n\n    return replacedText\n}\n</code>", "<code>urlize</code>", "<code>urlize</code>", "<code>urlize('Go to SO (stackoverflow.com) and ask. &lt;grin&gt;', \n       {nofollow: true, autoescape: true})\n=&gt; \"Go to SO (&lt;a href=\"http://stackoverflow.com\" rel=\"nofollow\"&gt;stackoverflow.com&lt;/a&gt;) and ask. &amp;lt;grin&amp;gt;\"\n</code>", "<code>rel=\"nofollow\"</code>", "<code>django_compatible</code>", "<code>urlize</code>", "<code>if(!String.linkify) {\n    String.prototype.linkify = function() {\n\n        // http://, https://, ftp://\n        var urlPattern = /\\b(?:https?|ftp):\\/\\/[a-z0-9-+&amp;@#\\/%?=~_|!:,.;]*[a-z0-9-+&amp;@#\\/%=~_|]/gim;\n\n        // www. sans http:// or https://\n        var pseudoUrlPattern = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n\n        // Email addresses *** here I've changed the expression ***\n        var emailAddressPattern = /(([a-zA-Z0-9_\\-\\.]+)@[a-zA-Z_]+?(?:\\.[a-zA-Z]{2,6}))+/gim;\n\n        return this\n            .replace(urlPattern, '&lt;a target=\"_blank\" href=\"$&amp;\"&gt;$&amp;&lt;/a&gt;')\n            .replace(pseudoUrlPattern, '$1&lt;a target=\"_blank\" href=\"http://$2\"&gt;$2&lt;/a&gt;')\n            .replace(emailAddressPattern, '&lt;a target=\"_blank\" href=\"mailto:$1\"&gt;$1&lt;/a&gt;');\n    };\n}\n</code>", "<code> function make_link(string) {\n    var words = string.split(' '),\n        ret = document.createDocumentFragment();\n    for (var i = 0, l = words.length; i &lt; l; i++) {\n        if (words[i].match(/[-a-zA-Z0-9@:%_\\+.~#?&amp;//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*)?/gi)) {\n            var elm = document.createElement('a');\n            elm.href = words[i];\n            elm.textContent = words[i];\n            if (ret.childNodes.length &gt; 0) {\n                ret.lastChild.textContent += ' ';\n            }\n            ret.appendChild(elm);\n        } else {\n            if (ret.lastChild &amp;&amp; ret.lastChild.nodeType === 3) {\n                ret.lastChild.textContent += ' ' + words[i];\n            } else {\n                ret.appendChild(document.createTextNode(' ' + words[i]));\n            }\n        }\n    }\n    return ret;\n}\n</code>", "<code>function replaceURLWithHTMLLinks(text) {\n    var exp = /(\\b(https?|ftp|file):\\/\\/([-A-Z0-9+&amp;@#%?=~_|!:,.;]*)([-A-Z0-9+&amp;@#%?\\/=~_|!:,.;]*)[-A-Z0-9+&amp;@#\\/%=~_|])/ig;\n    return text.replace(exp, \"&lt;a href='$1' target='_blank'&gt;$3&lt;/a&gt;\");\n}\n</code>", "<code>$('p').each(function(){\n   $(this).html( $(this).html().replace(/((http|https|ftp):\\/\\/[\\w?=&amp;.\\/-;#~%-]+(?![\\w\\s?&amp;.\\/;#~%\"=-]*&gt;))/g, '&lt;a href=\"$1\"&gt;$1&lt;/a&gt; ') );\n});\n</code>", "<code>http://example.com/folder/folder/folder/</code>", "<code>https://example.org/blah</code>", "<code>/(\\b((https?|ftp|file):\\/\\/|(www))[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|]*)/ig</code>", "<code>function UriphiMe(text) {\n      var exp = /(\\b((https?|ftp|file):\\/\\/|(www))[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|]*)/ig; \n      return text.replace(exp,\"&lt;a href='$1'&gt;$1&lt;/a&gt;\");\n}\n</code>", "<code>www</code>", "<code>/(\\b((https?|ftp|file):\\/\\/|(www))[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])/ig</code>", "<code>maps.bing.com/something?key=!\"\u00a3$%^*()&amp;lat=65&amp;lon&amp;lon=20</code>", "<code>http(s):// (anything but a space)+</code>", "<code>www. (anything but a space)+</code>", "<code>[^'\"&lt;&gt;\\s]</code>", "<code>href=\"...\"</code>", "<code>src=\"...\"</code>", "<code>if html.match( /(href)|(src)/i )) {\n    return html; // text already has a hyper link in it\n    }\n\nhtml = html.replace( \n            /\\b(https?:\\/\\/[^\\s\\(\\)\\'\\\"\\&lt;\\&gt;]+)/ig, \n            \"&lt;a ref='nofollow' href='$1'&gt;$1&lt;/a&gt;\" \n            );\n\nhtml = html.replace( \n            /\\s(www\\.[^\\s\\(\\)\\'\\\"\\&lt;\\&gt;]+)/ig, \n            \"&lt;a ref='nofollow' href='http://$1'&gt;$1&lt;/a&gt;\" \n            );\n\nhtml = html.replace( \n             /^(www\\.[^\\s\\(\\)\\'\\\"\\&lt;\\&gt;]+)/ig, \n            \"&lt;a ref='nofollow' href='http://$1'&gt;$1&lt;/a&gt;\" \n            );\n\nreturn html;\n</code>", "<code>/g</code>", "<code>/(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])/gi</code>", "<code>linkify-it</code>", "<code>// Change e-mail addresses to mailto: links.\nconst RegexOptions o = RegexOptions.Multiline | RegexOptions.IgnoreCase;\nconst string pat3 = @\"([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,6})\";\nconst string rep3 = @\"&lt;a href=\"\"mailto:$1@$2.$3\"\"&gt;$1@$2.$3&lt;/a&gt;\";\ntext = Regex.Replace(text, pat3, rep3, o);\n</code>", "<code>function replaceURLWithHTMLLinks(text) {\n    var re = /(\\(.*?)?\\b((?:https?|ftp|file):\\/\\/[-a-z0-9+&amp;@#\\/%?=~_()|!:,.;]*[-a-z0-9+&amp;@#\\/%=~_()|])/ig;\n    return text.replace(re, function(match, lParens, url) {\n        var rParens = '';\n        lParens = lParens || '';\n\n        // Try to strip the same number of right parens from url\n        // as there are left parens.  Here, lParenCounter must be\n        // a RegExp object.  You cannot use a literal\n        //     while (/\\(/g.exec(lParens)) { ... }\n        // because an object is needed to store the lastIndex state.\n        var lParenCounter = /\\(/g;\n        while (lParenCounter.exec(lParens)) {\n            var m;\n            // We want m[1] to be greedy, unless a period precedes the\n            // right parenthesis.  These tests cannot be simplified as\n            //     /(.*)(\\.?\\).*)/.exec(url)\n            // because if (.*) is greedy then \\.? never gets a chance.\n            if (m = /(.*)(\\.\\).*)/.exec(url) ||\n                    /(.*)(\\).*)/.exec(url)) {\n                url = m[1];\n                rParens = m[2] + rParens;\n            }\n        }\n        return lParens + \"&lt;a href='\" + url + \"'&gt;\" + url + \"&lt;/a&gt;\" + rParens;\n    });\n}\n</code>"], "path": "stack.django"}, {"tags": ["python", "virtualenv", "pip"], "creation_date": 1296746670, "body_markdown": "Given the name of a Python (2.X) package that can be installed with [pip][1] and [virtualenv][2], is there any way to find out a list of all the possible versions of it that pip could install? Right now it&#39;s trial and error.\r\n\r\nI&#39;m trying to install a version for a third party library, but the newest version is too new, there were backwards incompatible changes made. So I&#39;d like to somehow have a list of all the versions that pip knows about, so that I can test them.\r\n\r\n  [1]: http://pip.openplans.org/\r\n  [2]: http://pypi.python.org/pypi/virtualenv\r\n", "last_edit_date": 1460141551, "up_vote_count": 244, "link": "https://stackoverflow.com/questions/4888027/python-and-pip-list-all-versions-of-a-package-thats-available", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1296849834, "answer_id": 4902398, "path": "stack.django.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1409064876, "last_edit_date": 1409064876, "body_markdown": "After looking at pip&#39;s code for a while, it looks like the code responsible for locating packages can be found in the `PackageFinder` class in `pip.index`. Its method `find_requirement` looks up the versions of a `InstallRequirement`, but unfortunately only returns the most recent version. \r\n\r\nThe code below is almost a 1:1 copy of the original function, with the return in line 114 changed to return all versions.\r\n\r\nThe script expects one package name as first and only argument and returns all versions.\r\n\r\nhttp://pastebin.com/axzdUQhZ\r\n\r\n**I can&#39;t guarantee for the correctness, as I&#39;m not familiar with pip&#39;s code.** But hopefully this helps.\r\n\r\nSample output\r\n\r\n    $ python test.py pip\r\n    Versions of pip\r\n    0.8.2\r\n    0.8.1\r\n    0.8\r\n    0.7.2\r\n    0.7.1\r\n    0.7\r\n    0.6.3\r\n    0.6.2\r\n    0.6.1\r\n    0.6\r\n    0.5.1\r\n    0.5\r\n    0.4\r\n    0.3.1\r\n    0.3\r\n    0.2.1\r\n    0.2 dev\r\n\r\nThe code:\r\n\r\n    import posixpath\r\n    import pkg_resources\r\n    import sys\r\n    from pip.download import url_to_path\r\n    from pip.exceptions import DistributionNotFound\r\n    from pip.index import PackageFinder, Link\r\n    from pip.log import logger\r\n    from pip.req import InstallRequirement\r\n    from pip.util import Inf\r\n     \r\n     \r\n    class MyPackageFinder(PackageFinder):\r\n       \r\n        def find_requirement(self, req, upgrade):\r\n            url_name = req.url_name\r\n            # Only check main index if index URL is given:\r\n            main_index_url = None\r\n            if self.index_urls:\r\n                # Check that we have the url_name correctly spelled:\r\n                main_index_url = Link(posixpath.join(self.index_urls[0], url_name))\r\n                # This will also cache the page, so it&#39;s okay that we get it again later:\r\n                page = self._get_page(main_index_url, req)\r\n                if page is None:\r\n                    url_name = self._find_url_name(Link(self.index_urls[0]), url_name, req) or req.url_name\r\n     \r\n            # Combine index URLs with mirror URLs here to allow\r\n            # adding more index URLs from requirements files\r\n            all_index_urls = self.index_urls + self.mirror_urls\r\n     \r\n            def mkurl_pypi_url(url):\r\n                loc = posixpath.join(url, url_name)\r\n                # For maximum compatibility with easy_install, ensure the path\r\n                # ends in a trailing slash.  Although this isn&#39;t in the spec\r\n                # (and PyPI can handle it without the slash) some other index\r\n                # implementations might break if they relied on easy_install&#39;s behavior.\r\n                if not loc.endswith(&#39;/&#39;):\r\n                    loc = loc + &#39;/&#39;\r\n                return loc\r\n            if url_name is not None:\r\n                locations = [\r\n                    mkurl_pypi_url(url)\r\n                    for url in all_index_urls] + self.find_links\r\n            else:\r\n                locations = list(self.find_links)\r\n            locations.extend(self.dependency_links)\r\n            for version in req.absolute_versions:\r\n                if url_name is not None and main_index_url is not None:\r\n                    locations = [\r\n                        posixpath.join(main_index_url.url, version)] + locations\r\n     \r\n            file_locations, url_locations = self._sort_locations(locations)\r\n     \r\n            locations = [Link(url) for url in url_locations]\r\n            logger.debug(&#39;URLs to search for versions for %s:&#39; % req)\r\n            for location in locations:\r\n                logger.debug(&#39;* %s&#39; % location)\r\n            found_versions = []\r\n            found_versions.extend(\r\n                self._package_versions(\r\n                    [Link(url, &#39;-f&#39;) for url in self.find_links], req.name.lower()))\r\n            page_versions = []\r\n            for page in self._get_pages(locations, req):\r\n                logger.debug(&#39;Analyzing links from page %s&#39; % page.url)\r\n                logger.indent += 2\r\n                try:\r\n                    page_versions.extend(self._package_versions(page.links, req.name.lower()))\r\n                finally:\r\n                    logger.indent -= 2\r\n            dependency_versions = list(self._package_versions(\r\n                [Link(url) for url in self.dependency_links], req.name.lower()))\r\n            if dependency_versions:\r\n                logger.info(&#39;dependency_links found: %s&#39; % &#39;, &#39;.join([link.url for parsed, link, version in dependency_versions]))\r\n            file_versions = list(self._package_versions(\r\n                    [Link(url) for url in file_locations], req.name.lower()))\r\n            if not found_versions and not page_versions and not dependency_versions and not file_versions:\r\n                logger.fatal(&#39;Could not find any downloads that satisfy the requirement %s&#39; % req)\r\n                raise DistributionNotFound(&#39;No distributions at all found for %s&#39; % req)\r\n            if req.satisfied_by is not None:\r\n                found_versions.append((req.satisfied_by.parsed_version, Inf, req.satisfied_by.version))\r\n            if file_versions:\r\n                file_versions.sort(reverse=True)\r\n                logger.info(&#39;Local files found: %s&#39; % &#39;, &#39;.join([url_to_path(link.url) for parsed, link, version in file_versions]))\r\n                found_versions = file_versions + found_versions\r\n            all_versions = found_versions + page_versions + dependency_versions\r\n            applicable_versions = []\r\n            for (parsed_version, link, version) in all_versions:\r\n                if version not in req.req:\r\n                    logger.info(&quot;Ignoring link %s, version %s doesn&#39;t match %s&quot;\r\n                                % (link, version, &#39;,&#39;.join([&#39;&#39;.join(s) for s in req.req.specs])))\r\n                    continue\r\n                applicable_versions.append((link, version))\r\n            applicable_versions = sorted(applicable_versions, key=lambda v: pkg_resources.parse_version(v[1]), reverse=True)\r\n            existing_applicable = bool([link for link, version in applicable_versions if link is Inf])\r\n            if not upgrade and existing_applicable:\r\n                if applicable_versions[0][1] is Inf:\r\n                    logger.info(&#39;Existing installed version (%s) is most up-to-date and satisfies requirement&#39;\r\n                                % req.satisfied_by.version)\r\n                else:\r\n                    logger.info(&#39;Existing installed version (%s) satisfies requirement (most up-to-date version is %s)&#39;\r\n                                % (req.satisfied_by.version, applicable_versions[0][1]))\r\n                return None\r\n            if not applicable_versions:\r\n                logger.fatal(&#39;Could not find a version that satisfies the requirement %s (from versions: %s)&#39;\r\n                             % (req, &#39;, &#39;.join([version for parsed_version, link, version in found_versions])))\r\n                raise DistributionNotFound(&#39;No distributions matching the version for %s&#39; % req)\r\n            if applicable_versions[0][0] is Inf:\r\n                # We have an existing version, and its the best version\r\n                logger.info(&#39;Installed version (%s) is most up-to-date (past versions: %s)&#39;\r\n                            % (req.satisfied_by.version, &#39;, &#39;.join([version for link, version in applicable_versions[1:]]) or &#39;none&#39;))\r\n                return None\r\n            if len(applicable_versions) &gt; 1:\r\n                logger.info(&#39;Using version %s (newest of versions: %s)&#39; %\r\n                            (applicable_versions[0][1], &#39;, &#39;.join([version for link, version in applicable_versions])))\r\n            return applicable_versions\r\n     \r\n     \r\n    if __name__ == &#39;__main__&#39;:\r\n        req = InstallRequirement.from_line(sys.argv[1], None)\r\n        finder = MyPackageFinder([], [&#39;http://pypi.python.org/simple/&#39;])\r\n        versions = finder.find_requirement(req, False)\r\n        print &#39;Versions of %s&#39; % sys.argv[1]\r\n        for v in versions:\r\n            print v[1]\r\n\r\n"}, {"tags": [], "down_vote_count": 26, "creation_date": 1300983102, "answer_id": 5422144, "path": "stack.django.answer", "score": 143, "up_vote_count": 169, "is_accepted": true, "last_activity_date": 1489629190, "last_edit_date": 1489629190, "body_markdown": "The script at pastebin does work. However it&#39;s not very convenient if you&#39;re working with multiple environments/hosts because you will have to copy/create it every time.\r\n\r\nA better all-around solution would be to use [yolk][1], which is available to install with pip. E.g. to see what versions of Django are available:\r\n\r\n    $ pip install yolk\r\n    $ yolk -V django\r\n    Django 1.3\r\n    Django 1.2.5\r\n    Django 1.2.4\r\n    Django 1.2.3\r\n    Django 1.2.2\r\n    Django 1.2.1\r\n    Django 1.2\r\n    Django 1.1.4\r\n    Django 1.1.3\r\n    Django 1.1.2\r\n    Django 1.0.4\r\n\r\nA minor caveat: yolk depends on distribute. This is not a bad thing, but it may be a problem if you need for some reason to stick with (the deprecated) python setuptools.\r\n\r\n**Note:** I am not involved in the development of yolk. **If something doesn&#39;t seem to work as it should, leaving a comment here should not make much difference.** Use the [yolk issue tracker][2] instead and consider submitting a fix, if possible.\r\n\r\n  [1]: https://pypi.python.org/pypi/yolk\r\n  [2]: https://github.com/cakebread/yolk/issues"}, {"tags": [], "down_vote_count": 0, "creation_date": 1363000901, "answer_id": 15337317, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1363000901, "body_markdown": "https://pypi.python.org/pypi/Django/ - works for packages whose maintainers choose to show all packages\r\nhttps://pypi.python.org/simple/pip/ - should do the trick anyhow (lists all links)"}, {"tags": [], "down_vote_count": 5, "creation_date": 1381736655, "answer_id": 19355548, "path": "stack.django.answer", "score": 70, "up_vote_count": 75, "is_accepted": false, "last_activity_date": 1506586739, "last_edit_date": 1506586739, "body_markdown": "**Update:**  \r\n**As of Sep 2017 this method no longer works: `--no-install` was removed in pip 7**\r\n\r\nUse ``pip install -v``, you can see all versions that available\r\n\r\n    root@node7:~# pip install web.py -v\r\n    Downloading/unpacking web.py\r\n      Using version 0.37 (newest of versions: 0.37, 0.36, 0.35, 0.34, 0.33, 0.33, 0.32, 0.31, 0.22, 0.2)\r\n      Downloading web.py-0.37.tar.gz (90Kb): 90Kb downloaded\r\n      Running setup.py egg_info for package web.py\r\n        running egg_info\r\n        creating pip-egg-info/web.py.egg-info\r\n\r\n\r\nTo not install any package, use one of following solution:\r\n\r\n\r\n    root@node7:~# pip install --no-deps --no-install flask -v                                                                                                      \r\n    Downloading/unpacking flask\r\n      Using version 0.10.1 (newest of versions: 0.10.1, 0.10, 0.9, 0.8.1, 0.8, 0.7.2, 0.7.1, 0.7, 0.6.1, 0.6, 0.5.2, 0.5.1, 0.5, 0.4, 0.3.1, 0.3, 0.2, 0.1)\r\n      Downloading Flask-0.10.1.tar.gz (544Kb): 544Kb downloaded\r\n\r\nor \r\n\r\n    root@node7:~# cd $(mktemp -d)\r\n    root@node7:/tmp/tmp.c6H99cWD0g# pip install flask -d . -v\r\n    Downloading/unpacking flask\r\n      Using version 0.10.1 (newest of versions: 0.10.1, 0.10, 0.9, 0.8.1, 0.8, 0.7.2, 0.7.1, 0.7, 0.6.1, 0.6, 0.5.2, 0.5.1, 0.5, 0.4, 0.3.1, 0.3, 0.2, 0.1)\r\n      Downloading Flask-0.10.1.tar.gz (544Kb): 4.1Kb downloaded\r\n\r\nTested with pip 1.0\r\n\r\n    root@node7:~# pip --version\r\n    pip 1.0 from /usr/lib/python2.7/dist-packages (python 2.7)\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1407722516, "answer_id": 25234919, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1407722516, "body_markdown": "You could the yolk3k package instead of yolk. yolk3k is a fork from the original yolk and it supports both python2 and 3.\r\n\r\nhttps://github.com/myint/yolk\r\n\r\n    pip install yolk3k"}, {"tags": [], "down_vote_count": 1, "creation_date": 1414706860, "answer_id": 26664162, "path": "stack.django.answer", "score": 386, "up_vote_count": 387, "is_accepted": false, "last_activity_date": 1506587472, "last_edit_date": 1506587472, "body_markdown": "For **pip &gt;= 9.0** use\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    $ pip install pylibmc==\r\n    Collecting pylibmc==\r\n      Could not find a version that satisfies the requirement pylibmc== (from \r\n      versions: 0.2, 0.3, 0.4, 0.5.1, 0.5.2, 0.5.3, 0.5.4, 0.5.5, 0.5, 0.6.1, 0.6, \r\n      0.7.1, 0.7.2, 0.7.3, 0.7.4, 0.7, 0.8.1, 0.8.2, 0.8, 0.9.1, 0.9.2, 0.9, \r\n      1.0-alpha, 1.0-beta, 1.0, 1.1.1, 1.1, 1.2.0, 1.2.1, 1.2.2, 1.2.3, 1.3.0)\r\n    No matching distribution found for pylibmc==\r\n\r\n\u2013 all the available versions will be printed without actually downloading or installing any additional packages.\r\n\r\nFor **pip &lt; 9.0** use\r\n\r\n    pip install pylibmc==blork\r\n\r\nwhere `blork` can be any string that is not likely to be an install candidate."}, {"tags": [], "down_vote_count": 0, "creation_date": 1417478639, "answer_id": 27239645, "path": "stack.django.answer", "score": 42, "up_vote_count": 42, "is_accepted": false, "last_activity_date": 1424713859, "last_edit_date": 1424713859, "body_markdown": "You don&#39;t need a third party package to get this information. pypi provides simple JSON feeds for all packages under\r\n\r\n    https://pypi.python.org/pypi/{PKG_NAME}/json\r\n\r\nHere&#39;s some Python code using only the standard library which gets all versions.\r\n\r\n    import json\r\n    import urllib2\r\n    from distutils.version import StrictVersion\r\n\r\n    def versions(package_name):\r\n        url = &quot;https://pypi.python.org/pypi/%s/json&quot; % (package_name,)\r\n        data = json.load(urllib2.urlopen(urllib2.Request(url)))\r\n        versions = data[&quot;releases&quot;].keys()\r\n        versions.sort(key=StrictVersion)\r\n        return versions\r\n\r\n    print &quot;\\n&quot;.join(versions(&quot;scikit-image&quot;))\r\n \r\nThat code prints (as of Feb 23rd, 2015):\r\n\r\n    0.7.2\r\n    0.8.0\r\n    0.8.1\r\n    0.8.2\r\n    0.9.0\r\n    0.9.1\r\n    0.9.2\r\n    0.9.3\r\n    0.10.0\r\n    0.10.1\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1420692237, "answer_id": 27833089, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1420692237, "body_markdown": "I didn&#39;t have any luck with `yolk`, `yolk3k` or `pip install -v` but so I ended up using this (adapted to Python 3 from eric chiang&#39;s answer):\r\n\r\n    import json\r\n    import requests\r\n    from distutils.version import StrictVersion\r\n    \r\n    def versions(package_name):\r\n        url = &quot;https://pypi.python.org/pypi/{}/json&quot;.format(package_name)\r\n        data = requests.get(url).json()\r\n        return sorted(list(data[&quot;releases&quot;].keys()), key=StrictVersion, reverse=True)\r\n    \r\n    &gt;&gt;&gt; print(&quot;\\n&quot;.join(versions(&quot;gunicorn&quot;)))\r\n    19.1.1\r\n    19.1.0\r\n    19.0.0\r\n    18.0\r\n    17.5\r\n    0.17.4\r\n    0.17.3\r\n    ...\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1436326016, "answer_id": 31283018, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1436326016, "body_markdown": "Pip 7.1.0 has removed --no-install option from install. I found a method to get all versions of a package without any extra package.\r\n\r\n    $ pip install --no-deps Django==x.x.x\r\n    Collecting Django==x.x.x.\r\n    Could not find a version that satisfies the requirement Django==x.x.x. (from versions: 1.1.3, 1.1.4, 1.2, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 1.2.7, 1.3, 1.3.1, 1.3.2, 1.3.3, 1.3.4, 1.3.5, 1.3.6, 1.3.7, 1.4, 1.4.1, 1.4.2, 1.4.3, 1.4.4, 1.4.5, 1.4.6, 1.4.7, 1.4.8, 1.4.9, 1.4.10, 1.4.11, 1.4.12, 1.4.13, 1.4.14, 1.4.15, 1.4.16, 1.4.17, 1.4.18, 1.4.19, 1.4.20, 1.5, 1.5.1, 1.5.2, 1.5.3, 1.5.4, 1.5.5, 1.5.6, 1.5.7, 1.5.8, 1.5.9, 1.5.10, 1.5.11, 1.5.12, 1.6, 1.6.1, 1.6.2, 1.6.3, 1.6.4, 1.6.5, 1.6.6, 1.6.7, 1.6.8, 1.6.9, 1.6.10, 1.6.11, 1.7, 1.7.1, 1.7.2, 1.7.3, 1.7.4, 1.7.5, 1.7.6, 1.7.7, 1.7.8, 1.8a1, 1.8b1, 1.8b2, 1.8rc1, 1.8, 1.8.1, 1.8.2)\r\n    No matching distribution found for Django==x.x.x.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1436654881, "answer_id": 31362608, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1487154522, "last_edit_date": 1487154522, "body_markdown": "I came up with dead-simple bash script. Thanks to [jq](https://stedolan.github.io/jq/manual/)&#39;s author.\r\n\r\n    #!/bin/bash\r\n    set -e\r\n    \r\n    PACKAGE_JSON_URL=&quot;https://pypi.python.org/pypi/${1}/json&quot;\r\n\r\n    curl -s &quot;$PACKAGE_JSON_URL&quot; | jq  -r &#39;.releases | keys | .[]&#39; | sort -V\r\n\r\n&gt; **Update:** Add sorting by version number."}, {"tags": [], "down_vote_count": 5, "creation_date": 1445472618, "answer_id": 33271339, "path": "stack.django.answer", "score": 2, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1445472618, "body_markdown": "I just ran this:\r\n\r\n    pip show packagename\r\n\r\ne.g.:\r\n\r\n    &gt; pip3 show setuptools\r\n    ---\r\n    Metadata-Version: 2.0\r\n    Name: setuptools\r\n    Version: 18.4\r\n    Summary: Easily download, build, install, upgrade, and uninstall Python packages\r\n    Home-page: https://bitbucket.org/pypa/setuptools\r\n    Author: Python Packaging Authority\r\n    Author-email: distutils-sig@python.org\r\n    License: PSF or ZPL\r\n    Location: /usr/local/lib/python3.4/site-packages\r\n    Requires: \r\n\r\n"}, {"tags": [], "down_vote_count": 5, "creation_date": 1467527659, "answer_id": 38167368, "path": "stack.django.answer", "score": -3, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1467527659, "body_markdown": "you can grep the result of your `pip list`\r\n\r\n    -&gt; % pip list | grep &#39;beautifulsoup4&#39;\r\n    \r\n    beautifulsoup4 (4.4.1)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1479828281, "answer_id": 40745656, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1479830526, "last_edit_date": 1479830526, "body_markdown": "You can use this short Python3 snippet to grab the list of available versions for a package from [PyPI](http://pypi.python.org/pypi/). Unlike some other Python solutions posted here, this doesn&#39;t break on loose versions like `django`&#39;s `1.10rc1` or `uwsgi`&#39;s `2.0.13.1`:\r\n\r\n    &gt;&gt;&gt; import requests\r\n    &gt;&gt;&gt; from pkg_resources import parse_version\r\n    &gt;&gt;&gt; \r\n    &gt;&gt;&gt; def versions(name):\r\n    ...     url = &quot;https://pypi.python.org/pypi/{}/json&quot;.format(name)\r\n    ...     return sorted(requests.get(url).json()[&quot;releases&quot;], key=parse_version)\r\n    ... \r\n    &gt;&gt;&gt; print(*reversed(versions(&quot;Django&quot;)), sep=&quot;\\n&quot;)\r\n    1.10.3\r\n    1.10.2\r\n    1.10.1\r\n    1.10\r\n    1.10rc1\r\n    1.10b1\r\n    1.10a1\r\n    ...\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1485723505, "answer_id": 41925887, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1485723505, "body_markdown": "This works for me on OSX:\r\n\r\n`pip install docker-compose== 2&gt;&amp;1 | grep -oE &#39;(\\(.*\\))&#39; | awk -F:\\  &#39;{print$NF}&#39; | sed -E &#39;s/( |\\))//g&#39; | tr &#39;,&#39; &#39;\\n&#39;`\r\n\r\nIt returns the list one per line:\r\n\r\n    1.1.0rc1\r\n    1.1.0rc2\r\n    1.1.0\r\n    1.2.0rc1\r\n    1.2.0rc2\r\n    1.2.0rc3\r\n    1.2.0rc4\r\n    1.2.0\r\n    1.3.0rc1\r\n    1.3.0rc2\r\n    1.3.0rc3\r\n    1.3.0\r\n    1.3.1\r\n    1.3.2\r\n    1.3.3\r\n    1.4.0rc1\r\n    1.4.0rc2\r\n    1.4.0rc3\r\n    1.4.0\r\n    1.4.1\r\n    1.4.2\r\n    1.5.0rc1\r\n    1.5.0rc2\r\n    1.5.0rc3\r\n    1.5.0\r\n    1.5.1\r\n    1.5.2\r\n    1.6.0rc1\r\n    1.6.0\r\n    1.6.1\r\n    1.6.2\r\n    1.7.0rc1\r\n    1.7.0rc2\r\n    1.7.0\r\n    1.7.1\r\n    1.8.0rc1\r\n    1.8.0rc2\r\n    1.8.0\r\n    1.8.1\r\n    1.9.0rc1\r\n    1.9.0rc2\r\n    1.9.0rc3\r\n    1.9.0rc4\r\n    1.9.0\r\n    1.10.0rc1\r\n    1.10.0rc2\r\n    1.10.0\r\n\r\nOr to get the latest version available:\r\n\r\n`pip install docker-compose== 2&gt;&amp;1 | grep -oE &#39;(\\(.*\\))&#39; | awk -F:\\  &#39;{print$NF}&#39; | sed -E &#39;s/( |\\))//g&#39; | tr &#39;,&#39; &#39;\\n&#39; | gsort -r -V | head -1`\r\n\r\n    1.10.0rc2\r\n\r\nKeep in mind `gsort` has to be installed (on OSX) to parse the versions. You can install it with `brew install coreutils`"}, {"tags": [], "down_vote_count": 1, "creation_date": 1501009785, "answer_id": 45311693, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1501009785, "body_markdown": "I know this is kind of silly but you can try something like this:\r\n\r\n    pip install django == x\r\n\r\nThis will error out but will list all the versions that are available for this package.\r\n\r\nJust replace `django` with the package you want and also I believe, hopefully,  there is no such version called x."}, {"tags": [], "down_vote_count": 0, "creation_date": 1518477116, "answer_id": 48757084, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1518477116, "body_markdown": "Here&#39;s the current Python pip-based method, searching the legacy PyPi package API:\r\n\r\n    from pip import index\r\n    import requests\r\n    finder = index.PackageFinder(\r\n        [],\r\n        [&#39;https://pypi.python.org/simple&#39;],\r\n        session=requests.Session()\r\n    )\r\n    results = finder.find_all_candidates(&quot;package_name&quot;)\r\n    versions = [p.version for p in results]"}], "title": "Python and pip, list all versions of a package that&#39;s available?", "view_count": 101006, "answer_count": 16, "code_snippet": ["<code>pip install pylibmc==</code>", "<code>$ pip install yolk\n$ yolk -V django\nDjango 1.3\nDjango 1.2.5\nDjango 1.2.4\nDjango 1.2.3\nDjango 1.2.2\nDjango 1.2.1\nDjango 1.2\nDjango 1.1.4\nDjango 1.1.3\nDjango 1.1.2\nDjango 1.0.4\n</code>", "<code>pip install somepackage==999999</code>", "<code>yolk -V</code>", "<code>$ pip install pylibmc==\nCollecting pylibmc==\n  Could not find a version that satisfies the requirement pylibmc== (from \n  versions: 0.2, 0.3, 0.4, 0.5.1, 0.5.2, 0.5.3, 0.5.4, 0.5.5, 0.5, 0.6.1, 0.6, \n  0.7.1, 0.7.2, 0.7.3, 0.7.4, 0.7, 0.8.1, 0.8.2, 0.8, 0.9.1, 0.9.2, 0.9, \n  1.0-alpha, 1.0-beta, 1.0, 1.1.1, 1.1, 1.2.0, 1.2.1, 1.2.2, 1.2.3, 1.3.0)\nNo matching distribution found for pylibmc==\n</code>", "<code>pip install pylibmc==blork\n</code>", "<code>blork</code>", "<code>pip install pylibmc==versionsplease</code>", "<code>pip install pylibmc==wtf</code>", "<code>--no-install</code>", "<code>pip install -v</code>", "<code>root@node7:~# pip install web.py -v\nDownloading/unpacking web.py\n  Using version 0.37 (newest of versions: 0.37, 0.36, 0.35, 0.34, 0.33, 0.33, 0.32, 0.31, 0.22, 0.2)\n  Downloading web.py-0.37.tar.gz (90Kb): 90Kb downloaded\n  Running setup.py egg_info for package web.py\n    running egg_info\n    creating pip-egg-info/web.py.egg-info\n</code>", "<code>root@node7:~# pip install --no-deps --no-install flask -v                                                                                                      \nDownloading/unpacking flask\n  Using version 0.10.1 (newest of versions: 0.10.1, 0.10, 0.9, 0.8.1, 0.8, 0.7.2, 0.7.1, 0.7, 0.6.1, 0.6, 0.5.2, 0.5.1, 0.5, 0.4, 0.3.1, 0.3, 0.2, 0.1)\n  Downloading Flask-0.10.1.tar.gz (544Kb): 544Kb downloaded\n</code>", "<code>root@node7:~# cd $(mktemp -d)\nroot@node7:/tmp/tmp.c6H99cWD0g# pip install flask -d . -v\nDownloading/unpacking flask\n  Using version 0.10.1 (newest of versions: 0.10.1, 0.10, 0.9, 0.8.1, 0.8, 0.7.2, 0.7.1, 0.7, 0.6.1, 0.6, 0.5.2, 0.5.1, 0.5, 0.4, 0.3.1, 0.3, 0.2, 0.1)\n  Downloading Flask-0.10.1.tar.gz (544Kb): 4.1Kb downloaded\n</code>", "<code>root@node7:~# pip --version\npip 1.0 from /usr/lib/python2.7/dist-packages (python 2.7)\n</code>", "<code>pip 1.5.4</code>", "<code>DEPRECATION: --no-install, --no-download, --build, and --no-clean are deprecated.  See https://github.com/pypa/pip/issues/906.</code>", "<code>-v</code>", "<code>no such option: --no-install</code>", "<code>https://pypi.python.org/pypi/{PKG_NAME}/json\n</code>", "<code>import json\nimport urllib2\nfrom distutils.version import StrictVersion\n\ndef versions(package_name):\n    url = \"https://pypi.python.org/pypi/%s/json\" % (package_name,)\n    data = json.load(urllib2.urlopen(urllib2.Request(url)))\n    versions = data[\"releases\"].keys()\n    versions.sort(key=StrictVersion)\n    return versions\n\nprint \"\\n\".join(versions(\"scikit-image\"))\n</code>", "<code>0.7.2\n0.8.0\n0.8.1\n0.8.2\n0.9.0\n0.9.1\n0.9.2\n0.9.3\n0.10.0\n0.10.1\n</code>", "<code>versions = [x for x in data[\"releases\"] if any([y[\"python_version\"] in ['cp26', '2.6'] for y in data[\"releases\"][x]])]</code>", "<code>cp26</code>", "<code>cp27</code>", "<code>curl -s https://pypi.python.org/pypi/{PKG_NAME}/json | jq -r '.releases | keys[]' | sort -t. -k 1,1n -k 2,2n -k 3,3n</code>", "<code>ValueError</code>", "<code>pip install yolk3k\n</code>", "<code>yolk -V attest</code>", "<code>Attest 0.5.3</code>", "<code>PackageFinder</code>", "<code>pip.index</code>", "<code>find_requirement</code>", "<code>InstallRequirement</code>", "<code>$ python test.py pip\nVersions of pip\n0.8.2\n0.8.1\n0.8\n0.7.2\n0.7.1\n0.7\n0.6.3\n0.6.2\n0.6.1\n0.6\n0.5.1\n0.5\n0.4\n0.3.1\n0.3\n0.2.1\n0.2 dev\n</code>", "<code>import posixpath\nimport pkg_resources\nimport sys\nfrom pip.download import url_to_path\nfrom pip.exceptions import DistributionNotFound\nfrom pip.index import PackageFinder, Link\nfrom pip.log import logger\nfrom pip.req import InstallRequirement\nfrom pip.util import Inf\n\n\nclass MyPackageFinder(PackageFinder):\n\n    def find_requirement(self, req, upgrade):\n        url_name = req.url_name\n        # Only check main index if index URL is given:\n        main_index_url = None\n        if self.index_urls:\n            # Check that we have the url_name correctly spelled:\n            main_index_url = Link(posixpath.join(self.index_urls[0], url_name))\n            # This will also cache the page, so it's okay that we get it again later:\n            page = self._get_page(main_index_url, req)\n            if page is None:\n                url_name = self._find_url_name(Link(self.index_urls[0]), url_name, req) or req.url_name\n\n        # Combine index URLs with mirror URLs here to allow\n        # adding more index URLs from requirements files\n        all_index_urls = self.index_urls + self.mirror_urls\n\n        def mkurl_pypi_url(url):\n            loc = posixpath.join(url, url_name)\n            # For maximum compatibility with easy_install, ensure the path\n            # ends in a trailing slash.  Although this isn't in the spec\n            # (and PyPI can handle it without the slash) some other index\n            # implementations might break if they relied on easy_install's behavior.\n            if not loc.endswith('/'):\n                loc = loc + '/'\n            return loc\n        if url_name is not None:\n            locations = [\n                mkurl_pypi_url(url)\n                for url in all_index_urls] + self.find_links\n        else:\n            locations = list(self.find_links)\n        locations.extend(self.dependency_links)\n        for version in req.absolute_versions:\n            if url_name is not None and main_index_url is not None:\n                locations = [\n                    posixpath.join(main_index_url.url, version)] + locations\n\n        file_locations, url_locations = self._sort_locations(locations)\n\n        locations = [Link(url) for url in url_locations]\n        logger.debug('URLs to search for versions for %s:' % req)\n        for location in locations:\n            logger.debug('* %s' % location)\n        found_versions = []\n        found_versions.extend(\n            self._package_versions(\n                [Link(url, '-f') for url in self.find_links], req.name.lower()))\n        page_versions = []\n        for page in self._get_pages(locations, req):\n            logger.debug('Analyzing links from page %s' % page.url)\n            logger.indent += 2\n            try:\n                page_versions.extend(self._package_versions(page.links, req.name.lower()))\n            finally:\n                logger.indent -= 2\n        dependency_versions = list(self._package_versions(\n            [Link(url) for url in self.dependency_links], req.name.lower()))\n        if dependency_versions:\n            logger.info('dependency_links found: %s' % ', '.join([link.url for parsed, link, version in dependency_versions]))\n        file_versions = list(self._package_versions(\n                [Link(url) for url in file_locations], req.name.lower()))\n        if not found_versions and not page_versions and not dependency_versions and not file_versions:\n            logger.fatal('Could not find any downloads that satisfy the requirement %s' % req)\n            raise DistributionNotFound('No distributions at all found for %s' % req)\n        if req.satisfied_by is not None:\n            found_versions.append((req.satisfied_by.parsed_version, Inf, req.satisfied_by.version))\n        if file_versions:\n            file_versions.sort(reverse=True)\n            logger.info('Local files found: %s' % ', '.join([url_to_path(link.url) for parsed, link, version in file_versions]))\n            found_versions = file_versions + found_versions\n        all_versions = found_versions + page_versions + dependency_versions\n        applicable_versions = []\n        for (parsed_version, link, version) in all_versions:\n            if version not in req.req:\n                logger.info(\"Ignoring link %s, version %s doesn't match %s\"\n                            % (link, version, ','.join([''.join(s) for s in req.req.specs])))\n                continue\n            applicable_versions.append((link, version))\n        applicable_versions = sorted(applicable_versions, key=lambda v: pkg_resources.parse_version(v[1]), reverse=True)\n        existing_applicable = bool([link for link, version in applicable_versions if link is Inf])\n        if not upgrade and existing_applicable:\n            if applicable_versions[0][1] is Inf:\n                logger.info('Existing installed version (%s) is most up-to-date and satisfies requirement'\n                            % req.satisfied_by.version)\n            else:\n                logger.info('Existing installed version (%s) satisfies requirement (most up-to-date version is %s)'\n                            % (req.satisfied_by.version, applicable_versions[0][1]))\n            return None\n        if not applicable_versions:\n            logger.fatal('Could not find a version that satisfies the requirement %s (from versions: %s)'\n                         % (req, ', '.join([version for parsed_version, link, version in found_versions])))\n            raise DistributionNotFound('No distributions matching the version for %s' % req)\n        if applicable_versions[0][0] is Inf:\n            # We have an existing version, and its the best version\n            logger.info('Installed version (%s) is most up-to-date (past versions: %s)'\n                        % (req.satisfied_by.version, ', '.join([version for link, version in applicable_versions[1:]]) or 'none'))\n            return None\n        if len(applicable_versions) &gt; 1:\n            logger.info('Using version %s (newest of versions: %s)' %\n                        (applicable_versions[0][1], ', '.join([version for link, version in applicable_versions])))\n        return applicable_versions\n\n\nif __name__ == '__main__':\n    req = InstallRequirement.from_line(sys.argv[1], None)\n    finder = MyPackageFinder([], ['http://pypi.python.org/simple/'])\n    versions = finder.find_requirement(req, False)\n    print 'Versions of %s' % sys.argv[1]\n    for v in versions:\n        print v[1]\n</code>", "<code>#!/bin/bash\nset -e\n\nPACKAGE_JSON_URL=\"https://pypi.python.org/pypi/${1}/json\"\n\ncurl -s \"$PACKAGE_JSON_URL\" | jq  -r '.releases | keys | .[]' | sort -V\n</code>", "<code>curl</code>", "<code>wget --no-check-certificate</code>", "<code>curl -k --insecure</code>", "<code>wget</code>", "<code>ERROR: certificate common name `www.python.org\u00b4 doesn\u00b4t match requested host name `pypi.python.org\u00b4.</code>", "<code>sort -V</code>", "<code>sort -V</code>", "<code>jq</code>", "<code>yolk</code>", "<code>yolk3k</code>", "<code>pip install -v</code>", "<code>import json\nimport requests\nfrom distutils.version import StrictVersion\n\ndef versions(package_name):\n    url = \"https://pypi.python.org/pypi/{}/json\".format(package_name)\n    data = requests.get(url).json()\n    return sorted(list(data[\"releases\"].keys()), key=StrictVersion, reverse=True)\n\n&gt;&gt;&gt; print(\"\\n\".join(versions(\"gunicorn\")))\n19.1.1\n19.1.0\n19.0.0\n18.0\n17.5\n0.17.4\n0.17.3\n...\n</code>", "<code>StrictVersion</code>", "<code>django</code>", "<code>uwsgi</code>", "<code>psycopg2</code>", "<code>parse_version()</code>", "<code>setuptools</code>", "<code>$ pip install --no-deps Django==x.x.x\nCollecting Django==x.x.x.\nCould not find a version that satisfies the requirement Django==x.x.x. (from versions: 1.1.3, 1.1.4, 1.2, 1.2.1, 1.2.2, 1.2.3, 1.2.4, 1.2.5, 1.2.6, 1.2.7, 1.3, 1.3.1, 1.3.2, 1.3.3, 1.3.4, 1.3.5, 1.3.6, 1.3.7, 1.4, 1.4.1, 1.4.2, 1.4.3, 1.4.4, 1.4.5, 1.4.6, 1.4.7, 1.4.8, 1.4.9, 1.4.10, 1.4.11, 1.4.12, 1.4.13, 1.4.14, 1.4.15, 1.4.16, 1.4.17, 1.4.18, 1.4.19, 1.4.20, 1.5, 1.5.1, 1.5.2, 1.5.3, 1.5.4, 1.5.5, 1.5.6, 1.5.7, 1.5.8, 1.5.9, 1.5.10, 1.5.11, 1.5.12, 1.6, 1.6.1, 1.6.2, 1.6.3, 1.6.4, 1.6.5, 1.6.6, 1.6.7, 1.6.8, 1.6.9, 1.6.10, 1.6.11, 1.7, 1.7.1, 1.7.2, 1.7.3, 1.7.4, 1.7.5, 1.7.6, 1.7.7, 1.7.8, 1.8a1, 1.8b1, 1.8b2, 1.8rc1, 1.8, 1.8.1, 1.8.2)\nNo matching distribution found for Django==x.x.x.\n</code>", "<code>pip install django == x\n</code>", "<code>django</code>", "<code>pip show packagename\n</code>", "<code>&gt; pip3 show setuptools\n---\nMetadata-Version: 2.0\nName: setuptools\nVersion: 18.4\nSummary: Easily download, build, install, upgrade, and uninstall Python packages\nHome-page: https://bitbucket.org/pypa/setuptools\nAuthor: Python Packaging Authority\nAuthor-email: distutils-sig@python.org\nLicense: PSF or ZPL\nLocation: /usr/local/lib/python3.4/site-packages\nRequires: \n</code>", "<code>virtualenv</code>", "<code>pip: error: No command by the name pip show</code>", "<code>django</code>", "<code>1.10rc1</code>", "<code>uwsgi</code>", "<code>2.0.13.1</code>", "<code>&gt;&gt;&gt; import requests\n&gt;&gt;&gt; from pkg_resources import parse_version\n&gt;&gt;&gt; \n&gt;&gt;&gt; def versions(name):\n...     url = \"https://pypi.python.org/pypi/{}/json\".format(name)\n...     return sorted(requests.get(url).json()[\"releases\"], key=parse_version)\n... \n&gt;&gt;&gt; print(*reversed(versions(\"Django\")), sep=\"\\n\")\n1.10.3\n1.10.2\n1.10.1\n1.10\n1.10rc1\n1.10b1\n1.10a1\n...\n</code>", "<code>pip install docker-compose== 2&gt;&amp;1 | grep -oE '(\\(.*\\))' | awk -F:\\  '{print$NF}' | sed -E 's/( |\\))//g' | tr ',' '\\n'</code>", "<code>1.1.0rc1\n1.1.0rc2\n1.1.0\n1.2.0rc1\n1.2.0rc2\n1.2.0rc3\n1.2.0rc4\n1.2.0\n1.3.0rc1\n1.3.0rc2\n1.3.0rc3\n1.3.0\n1.3.1\n1.3.2\n1.3.3\n1.4.0rc1\n1.4.0rc2\n1.4.0rc3\n1.4.0\n1.4.1\n1.4.2\n1.5.0rc1\n1.5.0rc2\n1.5.0rc3\n1.5.0\n1.5.1\n1.5.2\n1.6.0rc1\n1.6.0\n1.6.1\n1.6.2\n1.7.0rc1\n1.7.0rc2\n1.7.0\n1.7.1\n1.8.0rc1\n1.8.0rc2\n1.8.0\n1.8.1\n1.9.0rc1\n1.9.0rc2\n1.9.0rc3\n1.9.0rc4\n1.9.0\n1.10.0rc1\n1.10.0rc2\n1.10.0\n</code>", "<code>pip install docker-compose== 2&gt;&amp;1 | grep -oE '(\\(.*\\))' | awk -F:\\  '{print$NF}' | sed -E 's/( |\\))//g' | tr ',' '\\n' | gsort -r -V | head -1</code>", "<code>1.10.0rc2\n</code>", "<code>gsort</code>", "<code>brew install coreutils</code>", "<code>from pip import index\nimport requests\nfinder = index.PackageFinder(\n    [],\n    ['https://pypi.python.org/simple'],\n    session=requests.Session()\n)\nresults = finder.find_all_candidates(\"package_name\")\nversions = [p.version for p in results]\n</code>", "<code>pip list</code>", "<code>-&gt; % pip list | grep 'beautifulsoup4'\n\nbeautifulsoup4 (4.4.1)\n</code>"], "path": "stack.django"}, {"tags": ["python", "string", "datetime", "format", "timedelta"], "creation_date": 1234384843, "body_markdown": "I&#39;m a Python newbie (2 weeks) and I&#39;m having trouble formatting a `datetime.timedelta` object.\r\n\r\nHere&#39;s what I&#39;m trying to do: \r\n  I have a list of objects and one of the members of the class of the object is a timedelta object that shows the duration of an event.  I would like to display that duration in the format of hours:minutes.\r\n\r\nI have tried a variety of methods for doing this and I&#39;m having difficulty.  My current approach is to add methods to the class for my objects that return hours and minutes.  I can get the hours by dividing the timedelta.seconds by 3600 and rounding it. I&#39;m having trouble with getting the remainder seconds and converting that to minutes.\r\n\r\nBy the way, I&#39;m using `Google AppEngine` with `Django Templates` for presentation.\r\n\r\nIf anyone can help or knows of a better way to resolve this, I would be very happy.\r\n\r\nThanks,", "last_edit_date": 1372592701, "up_vote_count": 171, "link": "https://stackoverflow.com/questions/538666/python-format-timedelta-to-string", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1234385079, "answer_id": 538687, "path": "stack.django.answer", "score": 43, "up_vote_count": 45, "is_accepted": false, "last_activity_date": 1234386054, "last_edit_date": 1234386054, "body_markdown": "    &gt;&gt;&gt; str(datetime.timedelta(hours=10.56))\r\n    10:33:36\r\n\r\n    &gt;&gt;&gt; td = datetime.timedelta(hours=10.505) # any timedelta object\r\n    &gt;&gt;&gt; &#39;:&#39;.join(str(td).split(&#39;:&#39;)[:2])\r\n    10:30\r\n\r\nPassing the `timedelta` object to the `str()` function calls the same formatting code used if we simply type `print td`. Since you don&#39;t want the seconds, we can split the string by colons (3 parts) and put it back together with only the first 2 parts."}, {"tags": [], "down_vote_count": 1, "creation_date": 1234385538, "answer_id": 538720, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1234385538, "body_markdown": "Following Joe&#39;s example value above, I&#39;d use the modulus arithmetic operator, thusly:\r\n\r\n    td = datetime.timedelta(hours=10.56)\r\n    td_str = &quot;%d:%d&quot; % (td.seconds/3600, td.seconds%3600/60)\r\n\r\nNote that integer division in Python rounds down by default; if you want to be more explicit, use math.floor() or math.ceil() as appropriate."}, {"tags": [], "down_vote_count": 4, "creation_date": 1234385544, "answer_id": 538721, "path": "stack.django.answer", "score": 143, "up_vote_count": 147, "is_accepted": false, "last_activity_date": 1338409103, "last_edit_date": 1338409103, "body_markdown": "You can just convert the timedelta to a string with str(). Here&#39;s an example:\r\n\r\n    import datetime\r\n    start = datetime.datetime(2009,2,10,14,00)\r\n    end   = datetime.datetime(2009,2,10,16,00)\r\n    delta = end-start\r\n    print str(delta)\r\n    # prints 2:00:00\r\n\r\n"}, {"tags": [], "down_vote_count": 12, "creation_date": 1234386686, "answer_id": 538818, "path": "stack.django.answer", "score": -8, "up_vote_count": 4, "is_accepted": true, "last_activity_date": 1234386686, "body_markdown": "Thanks everyone for your help.  I took many of your ideas and put them together, let me know what you think.\r\n\r\nI added two methods to the class like this:\r\n\r\n    def hours(self):\r\n        retval = &quot;&quot;\r\n        if self.totalTime:\r\n        \thoursfloat = self.totalTime.seconds / 3600\r\n        \tretval = round(hoursfloat)\r\n        return retval\r\n        \r\n    def minutes(self):\r\n        retval = &quot;&quot;\r\n        if self.totalTime:\r\n        \tminutesfloat = self.totalTime.seconds / 60\r\n        \thoursAsMinutes = self.hours() * 60\r\n        \tretval = round(minutesfloat - hoursAsMinutes)\r\n        return retval\r\n\r\nIn my django I used this (sum is the object and it is in a dictionary):\r\n\r\n    &lt;td&gt;{{ sum.0 }}&lt;/td&gt;\t\r\n    &lt;td&gt;{{ sum.1.hours|stringformat:&quot;d&quot; }}:{{ sum.1.minutes|stringformat:&quot;#02.0d&quot; }}&lt;/td&gt;\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 6, "creation_date": 1234395273, "answer_id": 539360, "path": "stack.django.answer", "score": 129, "up_vote_count": 135, "is_accepted": false, "last_activity_date": 1343408568, "last_edit_date": 1343408568, "body_markdown": "As you know, you can get the seconds from a timedelta object by accessing the `.seconds` attribute.\r\n\r\nYou can convert that to hours and remainder by using a combination of modulo and subtraction:\r\n\r\n&lt;!-- language: lang-py --&gt;\r\n\r\n    # arbitrary number of seconds\r\n    s = 13420\r\n    # hours\r\n    hours = s // 3600 \r\n    # remaining seconds\r\n    s = s - (hours * 3600)\r\n    # minutes\r\n    minutes = s // 60\r\n    # remaining seconds\r\n    seconds = s - (minutes * 60)\r\n    # total time\r\n    print &#39;%s:%s:%s&#39; % (hours, minutes, seconds)\r\n    # result: 3:43:40\r\n\r\nHowever, python provides the builtin function divmod() which allows us to simplify this code:\r\n\r\n    s = 13420\r\n    hours, remainder = divmod(s, 3600)\r\n    minutes, seconds = divmod(remainder, 60)\r\n    print &#39;%s:%s:%s&#39; % (hours, minutes, seconds)\r\n    # result: 3:43:40\r\n\r\nHope this helps!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1256826202, "answer_id": 1644095, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1326342504, "last_edit_date": 1326342504, "body_markdown": "My `datetime.timedelta` objects went greater than a day. So here is a further problem.  All the discussion above assumes less than a day.  A `timedelta` is actually a tuple of days, seconds and microseconds.  The above discussion should use `td.seconds` as joe did, but if you have days it is NOT included in the seconds value. \r\n\r\nI am getting a span of time between 2 datetimes and printing days and hours.\r\n\r\n    span = currentdt - previousdt\r\n    print &#39;%d,%d\\n&#39; % (span.days,span.seconds/3600)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1354847093, "answer_id": 13756038, "path": "stack.django.answer", "score": 24, "up_vote_count": 24, "is_accepted": false, "last_activity_date": 1354847093, "body_markdown": "    def td_format(td_object):\r\n            seconds = int(td_object.total_seconds())\r\n            periods = [\r\n                    (&#39;year&#39;,        60*60*24*365),\r\n                    (&#39;month&#39;,       60*60*24*30),\r\n                    (&#39;day&#39;,         60*60*24),\r\n                    (&#39;hour&#39;,        60*60),\r\n                    (&#39;minute&#39;,      60),\r\n                    (&#39;second&#39;,      1)\r\n                    ]\r\n    \r\n            strings=[]\r\n            for period_name,period_seconds in periods:\r\n                    if seconds &gt; period_seconds:\r\n                            period_value , seconds = divmod(seconds,period_seconds)\r\n                            if period_value == 1:\r\n                                    strings.append(&quot;%s %s&quot; % (period_value, period_name))\r\n                            else:\r\n                                    strings.append(&quot;%s %ss&quot; % (period_value, period_name))\r\n    \r\n            return &quot;, &quot;.join(strings)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1357769786, "answer_id": 14247500, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1357769786, "body_markdown": "Questioner wants a nicer format than the typical:\r\n\r\n      &gt;&gt;&gt; import datetime\r\n      &gt;&gt;&gt; datetime.timedelta(seconds=41000)\r\n      datetime.timedelta(0, 41000)\r\n      &gt;&gt;&gt; str(datetime.timedelta(seconds=41000))\r\n      &#39;11:23:20&#39;\r\n      &gt;&gt;&gt; str(datetime.timedelta(seconds=4102.33))\r\n      &#39;1:08:22.330000&#39;\r\n      &gt;&gt;&gt; str(datetime.timedelta(seconds=413302.33))\r\n      &#39;4 days, 18:48:22.330000&#39;\r\n\r\nSo, really there&#39;s two formats, one where days are 0 and it&#39;s left out, and another where there&#39;s text &quot;n days, h:m:s&quot;.  But, the seconds may have fractions, and there&#39;s no leading zeroes in the printouts, so columns are messy.\r\n\r\nHere&#39;s my routine, if you like it:\r\n\r\n    def printNiceTimeDelta(stime, etime):\r\n        delay = datetime.timedelta(seconds=(etime - stime))\r\n        if (delay.days &gt; 0):\r\n            out = str(delay).replace(&quot; days, &quot;, &quot;:&quot;)\r\n        else:\r\n            out = &quot;0:&quot; + str(delay)\r\n        outAr = out.split(&#39;:&#39;)\r\n        outAr = [&quot;%02d&quot; % (int(float(x))) for x in outAr]\r\n        out   = &quot;:&quot;.join(outAr)\r\n        return out\r\n\r\nthis returns output as dd:hh:mm:ss format:\r\n\r\n    00:00:00:15\r\n    00:00:00:19\r\n    02:01:31:40\r\n    02:01:32:22\r\n\r\nI did think about adding years to this, but this is left as an exercise for the reader, since the output is safe at over 1 year:\r\n\r\n    &gt;&gt;&gt; str(datetime.timedelta(seconds=99999999))\r\n    &#39;1157 days, 9:46:39&#39;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1371656484, "answer_id": 17195550, "path": "stack.django.answer", "score": 20, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1485713883, "last_edit_date": 1485713883, "body_markdown": "He already has a timedelta object so why not use its built-in method total_seconds() to convert it to seconds, then use divmod() to get hours and minutes?  \r\n\r\n    hours, remainder = divmod(myTimeDelta.total_seconds(), 3600)\r\n    minutes, seconds = divmod(remainder, 60)\r\n\r\n    # Formatted only for hours and minutes as requested\r\n    print &#39;%s:%s&#39; % (hours, minutes)\r\n\r\nThis works regardless if the time delta has even days or years."}, {"tags": [], "down_vote_count": 2, "creation_date": 1374411660, "answer_id": 17772597, "path": "stack.django.answer", "score": -1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1374411660, "body_markdown": "    t1 = datetime.datetime.strptime(StartTime, &quot;%H:%M:%S %d-%m-%y&quot;)\r\n    \r\n    t2 = datetime.datetime.strptime(EndTime, &quot;%H:%M:%S %d-%m-%y&quot;)\r\n    \r\n    return str(t2-t1)\r\n\r\n\r\nSo for:\r\n\r\n    StartTime = &#39;15:28:53 21-07-13&#39;\r\n    EndTime = &#39;15:32:40 21-07-13&#39;\r\n\r\nreturns:\r\n\r\n    &#39;0:03:47&#39;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1380432086, "answer_id": 19074707, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1387729462, "last_edit_date": 1387729462, "body_markdown": "    def seconds_to_time_left_string(total_seconds):\r\n        s = int(total_seconds)\r\n        years = s // 31104000\r\n        if years &gt; 1:\r\n            return &#39;%d years&#39; % years\r\n        s = s - (years * 31104000)\r\n        months = s // 2592000\r\n        if years == 1:\r\n            r = &#39;one year&#39;\r\n            if months &gt; 0:\r\n                r += &#39; and %d months&#39; % months\r\n            return r\r\n        if months &gt; 1:\r\n            return &#39;%d months&#39; % months\r\n        s = s - (months * 2592000)\r\n        days = s // 86400\r\n        if months == 1:\r\n            r = &#39;one month&#39;\r\n            if days &gt; 0:\r\n                r += &#39; and %d days&#39; % days\r\n            return r\r\n        if days &gt; 1:\r\n            return &#39;%d days&#39; % days\r\n        s = s - (days * 86400)\r\n        hours = s // 3600\r\n        if days == 1:\r\n            r = &#39;one day&#39;\r\n            if hours &gt; 0:\r\n                r += &#39; and %d hours&#39; % hours\r\n            return r \r\n        s = s - (hours * 3600)\r\n        minutes = s // 60\r\n        seconds = s - (minutes * 60)\r\n        if hours &gt;= 6:\r\n            return &#39;%d hours&#39; % hours\r\n        if hours &gt;= 1:\r\n            r = &#39;%d hours&#39; % hours\r\n            if hours == 1:\r\n                r = &#39;one hour&#39;\r\n            if minutes &gt; 0:\r\n                r += &#39; and %d minutes&#39; % minutes\r\n            return r\r\n        if minutes == 1:\r\n            r = &#39;one minute&#39;\r\n            if seconds &gt; 0:\r\n                r += &#39; and %d seconds&#39; % seconds\r\n            return r\r\n        if minutes == 0:\r\n            return &#39;%d seconds&#39; % seconds\r\n        if seconds == 0:\r\n            return &#39;%d minutes&#39; % minutes\r\n        return &#39;%d minutes and %d seconds&#39; % (minutes, seconds)\r\n\r\n    for i in range(10):\r\n        print pow(8, i), seconds_to_time_left_string(pow(8, i))\r\n\r\n\r\n    Output:\r\n    1 1 seconds\r\n    8 8 seconds\r\n    64 one minute and 4 seconds\r\n    512 8 minutes and 32 seconds\r\n    4096 one hour and 8 minutes\r\n    32768 9 hours\r\n    262144 3 days\r\n    2097152 24 days\r\n    16777216 6 months\r\n    134217728 4 years\r\n\r\n\r\n "}, {"tags": [], "down_vote_count": 0, "creation_date": 1399731679, "answer_id": 23582157, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1399732007, "last_edit_date": 1399732007, "body_markdown": "I had a similar problem with the output of overtime calculation at work. The value should always show up in HH:MM, even when it is greater than one day and the value can get negative. I combined some of the shown solutions and maybe someone else find this solution useful. I realized that if the timedelta value is negative most of the shown solutions with the divmod method doesn&#39;t work out of the box:\r\n\r\n    def td2HHMMstr(td):\r\n      &#39;&#39;&#39;Convert timedelta objects to a HH:MM string with (+/-) sign&#39;&#39;&#39;\r\n      if td &lt; datetime.timedelta(seconds=0):\r\n        sign=&#39;-&#39;\r\n        td = -td\r\n      else:\r\n        sign = &#39;&#39;\r\n      tdhours, rem = divmod(td.total_seconds(), 3600)\r\n      tdminutes, rem = divmod(rem, 60)\r\n      tdstr = &#39;{}{:}:{:02d}&#39;.format(sign, int(tdhours), int(tdminutes))\r\n      return tdstr\r\n\r\ntimedelta to HH:MM string:\r\n\r\n    td2HHMMstr(datetime.timedelta(hours=1, minutes=45))\r\n    &#39;1:54&#39;\r\n    \r\n    td2HHMMstr(datetime.timedelta(days=2, hours=3, minutes=2))\r\n    &#39;51:02&#39;\r\n    \r\n    td2HHMMstr(datetime.timedelta(hours=-3, minutes=-2))\r\n    &#39;-3:02&#39;\r\n    \r\n    td2HHMMstr(datetime.timedelta(days=-35, hours=-3, minutes=-2))\r\n    &#39;-843:02&#39;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1422642246, "answer_id": 28242294, "path": "stack.django.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1422642246, "body_markdown": "I know that this is an old answered question, but I use `datetime.utcfromtimestamp()` for this. It takes the number of seconds and returns a `datetime` that can be formatted like any other `datetime`.\r\n\r\n    duration = datetime.utcfromtimestamp(end - begin)\r\n    print duration.strftime(&#39;%H:%M&#39;)\r\n\r\nAs long as you stay in the legal ranges for the time parts this should work, i.e. it doesn&#39;t return 1234:35 as hours are &lt;= 23."}, {"tags": [], "down_vote_count": 1, "creation_date": 1424904808, "answer_id": 28731232, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1424904808, "body_markdown": "I would seriously consider the Occam&#39;s Razor approach here:\r\n\r\n    td = str(timedelta).split(&#39;.&#39;)[0]\r\n\r\nThis returns a string without the microseconds\r\n\r\nIf you want to regenerate the datetime.timedelta object, just do this:\r\n\r\n    h,m,s = re.split(&#39;:&#39;, td)\r\n    new_delta = datetime.timedelta(hours=int(h),minutes=int(m),seconds=int(s))\r\n\r\n2 years in, I love this language!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1456994073, "answer_id": 35766976, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1456994073, "body_markdown": "Please check this function - it converts timedelta object into string &#39;HH:MM:SS&#39;\r\n\r\n    def format_timedelta(td):\r\n        hours, remainder = divmod(td.total_seconds(), 3600)\r\n        minutes, seconds = divmod(remainder, 60)\r\n        hours, minutes, seconds = int(hours), int(minutes), int(seconds)\r\n        if hours &lt; 10:\r\n            hours = &#39;0%s&#39; % int(hours)\r\n        if minutes &lt; 10:\r\n            minutes = &#39;0%s&#39; % minutes\r\n        if seconds &lt; 10:\r\n            seconds = &#39;0%s&#39; % seconds\r\n        return &#39;%s:%s:%s&#39; % (hours, minutes, seconds)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1474897305, "answer_id": 39704521, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1474897305, "body_markdown": "    from django.utils.translation import ngettext\r\n\r\n    def localize_timedelta(delta):\r\n\t\tret = []\r\n\t\tnum_years = int(delta.days / 365)\r\n\t\tif num_years &gt; 0:\r\n\t\t    delta -= timedelta(days=num_years * 365)\r\n            ret.append(ngettext(&#39;%d year&#39;, &#39;%d years&#39;, num_years) % num_years)\r\n\r\n\t\tif delta.days &gt; 0:\r\n\t\t    ret.append(ngettext(&#39;%d day&#39;, &#39;%d days&#39;, delta.days) % delta.days)\r\n\r\n\t\tnum_hours = int(delta.seconds / 3600)\r\n\t\tif num_hours &gt; 0:\r\n\t    \tdelta -= timedelta(hours=num_hours)\r\n\t\t    ret.append(ngettext(&#39;%d hour&#39;, &#39;%d hours&#39;, num_hours) % num_hours)\r\n\r\n\t\tnum_minutes = int(delta.seconds / 60)\r\n\t\tif num_minutes &gt; 0:\r\n\t\t    ret.append(ngettext(&#39;%d minute&#39;, &#39;%d minutes&#39;, num_minutes) % num_minutes)\r\n\r\n\t\treturn &#39; &#39;.join(ret)\r\n\r\nThis will produce:\r\n\r\n    &gt;&gt;&gt; from datetime import timedelta\r\n    &gt;&gt;&gt; localize_timedelta(timedelta(days=3660, minutes=500))\r\n    &#39;10 years 10 days 8 hours 20 minutes&#39;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1479400226, "answer_id": 40660157, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1485855839, "last_edit_date": 1485855839, "body_markdown": "I personally use the [`humanize`](https://pypi.python.org/pypi/humanize) library for this:\r\n\r\n    &gt;&gt;&gt; import datetime\r\n    &gt;&gt;&gt; humanize.naturalday(datetime.datetime.now())\r\n    &#39;today&#39;\r\n    &gt;&gt;&gt; humanize.naturalday(datetime.datetime.now() - datetime.timedelta(days=1))\r\n    &#39;yesterday&#39;\r\n    &gt;&gt;&gt; humanize.naturalday(datetime.date(2007, 6, 5))\r\n    &#39;Jun 05&#39;\r\n    &gt;&gt;&gt; humanize.naturaldate(datetime.date(2007, 6, 5))\r\n    &#39;Jun 05 2007&#39;\r\n    &gt;&gt;&gt; humanize.naturaltime(datetime.datetime.now() - datetime.timedelta(seconds=1))\r\n    &#39;a second ago&#39;\r\n    &gt;&gt;&gt; humanize.naturaltime(datetime.datetime.now() - datetime.timedelta(seconds=3600))\r\n    &#39;an hour ago&#39;\r\n\r\nOf course, it doesn&#39;t give you *exactly* the answer you were looking for (which is, indeed, `str(timeA - timeB)`, but I have found that once you go beyond a few hours, the display becomes quickly unreadable. `humanize` has support for much larger values that are human-readable, and is also well localized.\r\n\r\nIt&#39;s inspired by Django&#39;s `contrib.humanize` module, apparently, so since you are using Django, you should probably use that.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1487449222, "answer_id": 42320260, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1487449705, "last_edit_date": 1495535491, "body_markdown": "Here is a general purpose function for converting either a `timedelta` object or a regular number (in the form of seconds or minutes, etc.) to a nicely formatted string.  I took [mpounsett&#39;s fantastic answer][1] on a duplicate question, made it a bit more flexible, improved readibility, and added documentation.  \r\n\r\nYou will find that it is the most flexible answer here so far since it allows you to:\r\n\r\n 1. Customize the string format on the fly instead of it being hard-coded.\r\n 2. Leave out certain time intervals without a problem (see examples below).\r\n\r\n**Function:**\r\n\r\n    from string import Formatter\r\n    from datetime import timedelta\r\n    \r\n    def strfdelta(tdelta, fmt=&#39;{D:02}d {H:02}h {M:02}m {S:02}s&#39;, inputtype=&#39;timedelta&#39;):\r\n        &quot;&quot;&quot;Convert a datetime.timedelta object or a regular number to a custom-\r\n        formatted string, just like the stftime() method does for datetime.datetime\r\n        objects.\r\n    \r\n        The fmt argument allows custom formatting to be specified.  Fields can \r\n        include seconds, minutes, hours, days, and weeks.  Each field is optional.\r\n    \r\n        Some examples:\r\n            &#39;{D:02}d {H:02}h {M:02}m {S:02}s&#39; --&gt; &#39;05d 08h 04m 02s&#39; (default)\r\n            &#39;{W}w {D}d {H}:{M:02}:{S:02}&#39;     --&gt; &#39;4w 5d 8:04:02&#39;\r\n            &#39;{D:2}d {H:2}:{M:02}:{S:02}&#39;      --&gt; &#39; 5d  8:04:02&#39;\r\n            &#39;{H}h {S}s&#39;                       --&gt; &#39;72h 800s&#39;\r\n    \r\n        The inputtype argument allows tdelta to be a regular number instead of the  \r\n        default, which is a datetime.timedelta object.  Valid inputtype strings: \r\n            &#39;s&#39;, &#39;seconds&#39;, \r\n            &#39;m&#39;, &#39;minutes&#39;, \r\n            &#39;h&#39;, &#39;hours&#39;, \r\n            &#39;d&#39;, &#39;days&#39;, \r\n            &#39;w&#39;, &#39;weeks&#39;\r\n        &quot;&quot;&quot;\r\n    \r\n        # Convert tdelta to integer seconds.\r\n        if inputtype == &#39;timedelta&#39;:\r\n            remainder = int(tdelta.total_seconds())\r\n        elif inputtype in [&#39;s&#39;, &#39;seconds&#39;]:\r\n            remainder = int(tdelta)\r\n        elif inputtype in [&#39;m&#39;, &#39;minutes&#39;]:\r\n            remainder = int(tdelta)*60\r\n        elif inputtype in [&#39;h&#39;, &#39;hours&#39;]:\r\n            remainder = int(tdelta)*3600\r\n        elif inputtype in [&#39;d&#39;, &#39;days&#39;]:\r\n            remainder = int(tdelta)*86400\r\n        elif inputtype in [&#39;w&#39;, &#39;weeks&#39;]:\r\n            remainder = int(tdelta)*604800\r\n    \r\n        f = Formatter()\r\n        desired_fields = [field_tuple[1] for field_tuple in f.parse(fmt)]\r\n        possible_fields = (&#39;W&#39;, &#39;D&#39;, &#39;H&#39;, &#39;M&#39;, &#39;S&#39;)\r\n        constants = {&#39;W&#39;: 604800, &#39;D&#39;: 86400, &#39;H&#39;: 3600, &#39;M&#39;: 60, &#39;S&#39;: 1}\r\n        values = {}\r\n        for field in possible_fields:\r\n            if field in desired_fields and field in constants:\r\n                values[field], remainder = divmod(remainder, constants[field])\r\n        return f.format(fmt, **values)\r\n\r\n**Demo:**\r\n\r\n    &gt;&gt;&gt; td = timedelta(days=2, hours=3, minutes=5, seconds=8, microseconds=340)\r\n\r\n    &gt;&gt;&gt; print strfdelta(td)\r\n    02d 03h 05m 08s\r\n\r\n    &gt;&gt;&gt; print strfdelta(td, &#39;{D}d {H}:{M:02}:{S:02}&#39;)\r\n    2d 3:05:08\r\n\r\n    &gt;&gt;&gt; print strfdelta(td, &#39;{D:2}d {H:2}:{M:02}:{S:02}&#39;)\r\n     2d  3:05:08\r\n\r\n    &gt;&gt;&gt; print strfdelta(td, &#39;{H}h {S}s&#39;)\r\n    51h 308s\r\n\r\n    &gt;&gt;&gt; print strfdelta(12304, inputtype=&#39;s&#39;)\r\n    00d 03h 25m 04s\r\n\r\n    &gt;&gt;&gt; print strfdelta(620, &#39;{H}:{M:02}&#39;, &#39;m&#39;)\r\n    10:20\r\n\r\n    &gt;&gt;&gt; print strfdelta(49, &#39;{D}d {H}h&#39;, &#39;h&#39;)\r\n    2d 1h\r\n\r\n  [1]: https://stackoverflow.com/a/17847006/5405967"}, {"tags": [], "down_vote_count": 1, "creation_date": 1511241865, "answer_id": 47405765, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1511243038, "last_edit_date": 1511243038, "body_markdown": "    t =  str(timedelta(seconds=500000)) \r\n    \r\n    print t[:-6] + &#39; hours &#39; + t[-5:-3] + &#39; mins&#39;"}], "title": "Python format timedelta to string", "view_count": 163774, "answer_count": 19, "code_snippet": ["<code>datetime.timedelta</code>", "<code>Google AppEngine</code>", "<code>Django Templates</code>", "<code>datetime.utcfromtimestamp()</code>", "<code>import datetime\nstart = datetime.datetime(2009,2,10,14,00)\nend   = datetime.datetime(2009,2,10,16,00)\ndelta = end-start\nprint str(delta)\n# prints 2:00:00\n</code>", "<code>print 'some thing ' + str(delta)</code>", "<code>ConvertDuration=datetime.timedelta(milliseconds=int(254459))</code>", "<code>TotalDuration=str(ConvertDuration).split('.', 2)[0]</code>", "<code>.seconds</code>", "<code># arbitrary number of seconds\ns = 13420\n# hours\nhours = s // 3600 \n# remaining seconds\ns = s - (hours * 3600)\n# minutes\nminutes = s // 60\n# remaining seconds\nseconds = s - (minutes * 60)\n# total time\nprint '%s:%s:%s' % (hours, minutes, seconds)\n# result: 3:43:40\n</code>", "<code>s = 13420\nhours, remainder = divmod(s, 3600)\nminutes, seconds = divmod(remainder, 60)\nprint '%s:%s:%s' % (hours, minutes, seconds)\n# result: 3:43:40\n</code>", "<code>abs(s)</code>", "<code>'%d:%02d:%02d'</code>", "<code>.seconds</code>", "<code>.seconds</code>", "<code>.days</code>", "<code>.total_seconds()</code>", "<code>&gt;&gt;&gt; str(datetime.timedelta(hours=10.56))\n10:33:36\n\n&gt;&gt;&gt; td = datetime.timedelta(hours=10.505) # any timedelta object\n&gt;&gt;&gt; ':'.join(str(td).split(':')[:2])\n10:30\n</code>", "<code>timedelta</code>", "<code>str()</code>", "<code>print td</code>", "<code>str(my_timedelta)</code>", "<code>def td_format(td_object):\n        seconds = int(td_object.total_seconds())\n        periods = [\n                ('year',        60*60*24*365),\n                ('month',       60*60*24*30),\n                ('day',         60*60*24),\n                ('hour',        60*60),\n                ('minute',      60),\n                ('second',      1)\n                ]\n\n        strings=[]\n        for period_name,period_seconds in periods:\n                if seconds &gt; period_seconds:\n                        period_value , seconds = divmod(seconds,period_seconds)\n                        if period_value == 1:\n                                strings.append(\"%s %s\" % (period_value, period_name))\n                        else:\n                                strings.append(\"%s %ss\" % (period_value, period_name))\n\n        return \", \".join(strings)\n</code>", "<code>if seconds &gt; period_seconds:</code>", "<code>if seconds &gt;= period_seconds:</code>", "<code>hours, remainder = divmod(myTimeDelta.total_seconds(), 3600)\nminutes, seconds = divmod(remainder, 60)\n\n# Formatted only for hours and minutes as requested\nprint '%s:%s' % (hours, minutes)\n</code>", "<code>  &gt;&gt;&gt; import datetime\n  &gt;&gt;&gt; datetime.timedelta(seconds=41000)\n  datetime.timedelta(0, 41000)\n  &gt;&gt;&gt; str(datetime.timedelta(seconds=41000))\n  '11:23:20'\n  &gt;&gt;&gt; str(datetime.timedelta(seconds=4102.33))\n  '1:08:22.330000'\n  &gt;&gt;&gt; str(datetime.timedelta(seconds=413302.33))\n  '4 days, 18:48:22.330000'\n</code>", "<code>def printNiceTimeDelta(stime, etime):\n    delay = datetime.timedelta(seconds=(etime - stime))\n    if (delay.days &gt; 0):\n        out = str(delay).replace(\" days, \", \":\")\n    else:\n        out = \"0:\" + str(delay)\n    outAr = out.split(':')\n    outAr = [\"%02d\" % (int(float(x))) for x in outAr]\n    out   = \":\".join(outAr)\n    return out\n</code>", "<code>00:00:00:15\n00:00:00:19\n02:01:31:40\n02:01:32:22\n</code>", "<code>&gt;&gt;&gt; str(datetime.timedelta(seconds=99999999))\n'1157 days, 9:46:39'\n</code>", "<code>datetime.timedelta</code>", "<code>timedelta</code>", "<code>td.seconds</code>", "<code>span = currentdt - previousdt\nprint '%d,%d\\n' % (span.days,span.seconds/3600)\n</code>", "<code>humanize</code>", "<code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; humanize.naturalday(datetime.datetime.now())\n'today'\n&gt;&gt;&gt; humanize.naturalday(datetime.datetime.now() - datetime.timedelta(days=1))\n'yesterday'\n&gt;&gt;&gt; humanize.naturalday(datetime.date(2007, 6, 5))\n'Jun 05'\n&gt;&gt;&gt; humanize.naturaldate(datetime.date(2007, 6, 5))\n'Jun 05 2007'\n&gt;&gt;&gt; humanize.naturaltime(datetime.datetime.now() - datetime.timedelta(seconds=1))\n'a second ago'\n&gt;&gt;&gt; humanize.naturaltime(datetime.datetime.now() - datetime.timedelta(seconds=3600))\n'an hour ago'\n</code>", "<code>str(timeA - timeB)</code>", "<code>humanize</code>", "<code>contrib.humanize</code>", "<code>naturaltime</code>", "<code>datetime.utcfromtimestamp()</code>", "<code>datetime</code>", "<code>datetime</code>", "<code>duration = datetime.utcfromtimestamp(end - begin)\nprint duration.strftime('%H:%M')\n</code>", "<code>print timedelta(seconds=end - begin)</code>", "<code>.zfill(8)</code>", "<code>timedelta</code>", "<code>from string import Formatter\nfrom datetime import timedelta\n\ndef strfdelta(tdelta, fmt='{D:02}d {H:02}h {M:02}m {S:02}s', inputtype='timedelta'):\n    \"\"\"Convert a datetime.timedelta object or a regular number to a custom-\n    formatted string, just like the stftime() method does for datetime.datetime\n    objects.\n\n    The fmt argument allows custom formatting to be specified.  Fields can \n    include seconds, minutes, hours, days, and weeks.  Each field is optional.\n\n    Some examples:\n        '{D:02}d {H:02}h {M:02}m {S:02}s' --&gt; '05d 08h 04m 02s' (default)\n        '{W}w {D}d {H}:{M:02}:{S:02}'     --&gt; '4w 5d 8:04:02'\n        '{D:2}d {H:2}:{M:02}:{S:02}'      --&gt; ' 5d  8:04:02'\n        '{H}h {S}s'                       --&gt; '72h 800s'\n\n    The inputtype argument allows tdelta to be a regular number instead of the  \n    default, which is a datetime.timedelta object.  Valid inputtype strings: \n        's', 'seconds', \n        'm', 'minutes', \n        'h', 'hours', \n        'd', 'days', \n        'w', 'weeks'\n    \"\"\"\n\n    # Convert tdelta to integer seconds.\n    if inputtype == 'timedelta':\n        remainder = int(tdelta.total_seconds())\n    elif inputtype in ['s', 'seconds']:\n        remainder = int(tdelta)\n    elif inputtype in ['m', 'minutes']:\n        remainder = int(tdelta)*60\n    elif inputtype in ['h', 'hours']:\n        remainder = int(tdelta)*3600\n    elif inputtype in ['d', 'days']:\n        remainder = int(tdelta)*86400\n    elif inputtype in ['w', 'weeks']:\n        remainder = int(tdelta)*604800\n\n    f = Formatter()\n    desired_fields = [field_tuple[1] for field_tuple in f.parse(fmt)]\n    possible_fields = ('W', 'D', 'H', 'M', 'S')\n    constants = {'W': 604800, 'D': 86400, 'H': 3600, 'M': 60, 'S': 1}\n    values = {}\n    for field in possible_fields:\n        if field in desired_fields and field in constants:\n            values[field], remainder = divmod(remainder, constants[field])\n    return f.format(fmt, **values)\n</code>", "<code>&gt;&gt;&gt; td = timedelta(days=2, hours=3, minutes=5, seconds=8, microseconds=340)\n\n&gt;&gt;&gt; print strfdelta(td)\n02d 03h 05m 08s\n\n&gt;&gt;&gt; print strfdelta(td, '{D}d {H}:{M:02}:{S:02}')\n2d 3:05:08\n\n&gt;&gt;&gt; print strfdelta(td, '{D:2}d {H:2}:{M:02}:{S:02}')\n 2d  3:05:08\n\n&gt;&gt;&gt; print strfdelta(td, '{H}h {S}s')\n51h 308s\n\n&gt;&gt;&gt; print strfdelta(12304, inputtype='s')\n00d 03h 25m 04s\n\n&gt;&gt;&gt; print strfdelta(620, '{H}:{M:02}', 'm')\n10:20\n\n&gt;&gt;&gt; print strfdelta(49, '{D}d {H}h', 'h')\n2d 1h\n</code>", "<code>td = datetime.timedelta(hours=10.56)\ntd_str = \"%d:%d\" % (td.seconds/3600, td.seconds%3600/60)\n</code>", "<code>td.total_seconds()</code>", "<code>.seconds</code>", "<code>td = str(timedelta).split('.')[0]\n</code>", "<code>h,m,s = re.split(':', td)\nnew_delta = datetime.timedelta(hours=int(h),minutes=int(m),seconds=int(s))\n</code>", "<code>def seconds_to_time_left_string(total_seconds):\n    s = int(total_seconds)\n    years = s // 31104000\n    if years &gt; 1:\n        return '%d years' % years\n    s = s - (years * 31104000)\n    months = s // 2592000\n    if years == 1:\n        r = 'one year'\n        if months &gt; 0:\n            r += ' and %d months' % months\n        return r\n    if months &gt; 1:\n        return '%d months' % months\n    s = s - (months * 2592000)\n    days = s // 86400\n    if months == 1:\n        r = 'one month'\n        if days &gt; 0:\n            r += ' and %d days' % days\n        return r\n    if days &gt; 1:\n        return '%d days' % days\n    s = s - (days * 86400)\n    hours = s // 3600\n    if days == 1:\n        r = 'one day'\n        if hours &gt; 0:\n            r += ' and %d hours' % hours\n        return r \n    s = s - (hours * 3600)\n    minutes = s // 60\n    seconds = s - (minutes * 60)\n    if hours &gt;= 6:\n        return '%d hours' % hours\n    if hours &gt;= 1:\n        r = '%d hours' % hours\n        if hours == 1:\n            r = 'one hour'\n        if minutes &gt; 0:\n            r += ' and %d minutes' % minutes\n        return r\n    if minutes == 1:\n        r = 'one minute'\n        if seconds &gt; 0:\n            r += ' and %d seconds' % seconds\n        return r\n    if minutes == 0:\n        return '%d seconds' % seconds\n    if seconds == 0:\n        return '%d minutes' % minutes\n    return '%d minutes and %d seconds' % (minutes, seconds)\n\nfor i in range(10):\n    print pow(8, i), seconds_to_time_left_string(pow(8, i))\n\n\nOutput:\n1 1 seconds\n8 8 seconds\n64 one minute and 4 seconds\n512 8 minutes and 32 seconds\n4096 one hour and 8 minutes\n32768 9 hours\n262144 3 days\n2097152 24 days\n16777216 6 months\n134217728 4 years\n</code>", "<code>timedelta</code>", "<code>days</code>", "<code>seconds</code>", "<code>microseconds</code>", "<code>def td2HHMMstr(td):\n  '''Convert timedelta objects to a HH:MM string with (+/-) sign'''\n  if td &lt; datetime.timedelta(seconds=0):\n    sign='-'\n    td = -td\n  else:\n    sign = ''\n  tdhours, rem = divmod(td.total_seconds(), 3600)\n  tdminutes, rem = divmod(rem, 60)\n  tdstr = '{}{:}:{:02d}'.format(sign, int(tdhours), int(tdminutes))\n  return tdstr\n</code>", "<code>td2HHMMstr(datetime.timedelta(hours=1, minutes=45))\n'1:54'\n\ntd2HHMMstr(datetime.timedelta(days=2, hours=3, minutes=2))\n'51:02'\n\ntd2HHMMstr(datetime.timedelta(hours=-3, minutes=-2))\n'-3:02'\n\ntd2HHMMstr(datetime.timedelta(days=-35, hours=-3, minutes=-2))\n'-843:02'\n</code>", "<code>from django.utils.translation import ngettext\n\ndef localize_timedelta(delta):\n    ret = []\n    num_years = int(delta.days / 365)\n    if num_years &gt; 0:\n        delta -= timedelta(days=num_years * 365)\n        ret.append(ngettext('%d year', '%d years', num_years) % num_years)\n\n    if delta.days &gt; 0:\n        ret.append(ngettext('%d day', '%d days', delta.days) % delta.days)\n\n    num_hours = int(delta.seconds / 3600)\n    if num_hours &gt; 0:\n        delta -= timedelta(hours=num_hours)\n        ret.append(ngettext('%d hour', '%d hours', num_hours) % num_hours)\n\n    num_minutes = int(delta.seconds / 60)\n    if num_minutes &gt; 0:\n        ret.append(ngettext('%d minute', '%d minutes', num_minutes) % num_minutes)\n\n    return ' '.join(ret)\n</code>", "<code>&gt;&gt;&gt; from datetime import timedelta\n&gt;&gt;&gt; localize_timedelta(timedelta(days=3660, minutes=500))\n'10 years 10 days 8 hours 20 minutes'\n</code>", "<code>def format_timedelta(td):\n    hours, remainder = divmod(td.total_seconds(), 3600)\n    minutes, seconds = divmod(remainder, 60)\n    hours, minutes, seconds = int(hours), int(minutes), int(seconds)\n    if hours &lt; 10:\n        hours = '0%s' % int(hours)\n    if minutes &lt; 10:\n        minutes = '0%s' % minutes\n    if seconds &lt; 10:\n        seconds = '0%s' % seconds\n    return '%s:%s:%s' % (hours, minutes, seconds)\n</code>", "<code>t1 = datetime.datetime.strptime(StartTime, \"%H:%M:%S %d-%m-%y\")\n\nt2 = datetime.datetime.strptime(EndTime, \"%H:%M:%S %d-%m-%y\")\n\nreturn str(t2-t1)\n</code>", "<code>StartTime = '15:28:53 21-07-13'\nEndTime = '15:32:40 21-07-13'\n</code>", "<code>'0:03:47'\n</code>", "<code>t = str(timedelta(seconds=500000)) \n\nprint t[:-6] + ' hours ' + t[-5:-3] + ' mins'\n</code>", "<code>def hours(self):\n    retval = \"\"\n    if self.totalTime:\n        hoursfloat = self.totalTime.seconds / 3600\n        retval = round(hoursfloat)\n    return retval\n\ndef minutes(self):\n    retval = \"\"\n    if self.totalTime:\n        minutesfloat = self.totalTime.seconds / 60\n        hoursAsMinutes = self.hours() * 60\n        retval = round(minutesfloat - hoursAsMinutes)\n    return retval\n</code>", "<code>&lt;td&gt;{{ sum.0 }}&lt;/td&gt;    \n&lt;td&gt;{{ sum.1.hours|stringformat:\"d\" }}:{{ sum.1.minutes|stringformat:\"#02.0d\" }}&lt;/td&gt;\n</code>"], "path": "stack.django"}, {"tags": ["database", "postgresql", "count", "database-table"], "creation_date": 1270684289, "body_markdown": "I&#39;m looking for a way to find the row count for all my tables in Postgres.  I know I can do this one table at a time with:\r\n\r\n    SELECT count(*) FROM table_name;\r\n\r\nbut I&#39;d like to see the row count for all the tables and then order by that to get an idea of how big all my tables are.\r\n\r\n", "last_edit_date": 1504768588, "up_vote_count": 272, "link": "https://stackoverflow.com/questions/2596670/how-do-you-find-the-row-count-for-all-your-tables-in-postgres", "_childDocuments_": [{"tags": [], "down_vote_count": 4, "creation_date": 1270684664, "answer_id": 2596696, "path": "stack.django.answer", "score": 13, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1270684664, "body_markdown": "If you don&#39;t mind potentially stale data, you can [access the same statistics used by the query optimizer][1].\r\n\r\nSomething like:\r\n  \r\n    SELECT relname, n_tup_ins - n_tup_del as rowcount FROM pg_stat_all_tables;\r\n\r\n\r\n  [1]: http://www.postgresql.org/docs/8.4/static/monitoring-stats.html#MONITORING-STATS-VIEWS"}, {"tags": [], "down_vote_count": 1, "creation_date": 1270859186, "answer_id": 2611745, "path": "stack.django.answer", "score": 387, "up_vote_count": 388, "is_accepted": true, "last_activity_date": 1270859186, "body_markdown": "There&#39;s three ways to get this sort of count, each with their own tradeoffs.\r\n\r\nIf you want a true count, you have to execute the SELECT statement like the one you used against each table.  This is because PostgreSQL keeps row visibility information in the row itself, not anywhere else, so any accurate count can only be relative to some transaction.  You&#39;re getting a count of what that transaction sees at the point in time when it executes.  You could automate this to run against every table in the database, but you probably don&#39;t need that level of accuracy or want to wait that long.\r\n\r\nThe second approach notes that the statistics collector tracks roughly how many rows are &quot;live&quot; (not deleted or obsoleted by later updates) at any time.  This value can be off by a bit under heavy activity, but is generally a good estimate:\r\n\r\n    SELECT schemaname,relname,n_live_tup \r\n      FROM pg_stat_user_tables \r\n      ORDER BY n_live_tup DESC;\r\n\r\nThat can also show you how many rows are dead, which is itself an interesting number to monitor.\r\n\r\nThe third way is to note that the system ANALYZE command, which is executed by the autovacuum process regularly as of PostgreSQL 8.3 to update table statistics, also computes a row estimate.  You can grab that one like this:\r\n\r\n    SELECT \r\n      nspname AS schemaname,relname,reltuples\r\n    FROM pg_class C\r\n    LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace)\r\n    WHERE \r\n      nspname NOT IN (&#39;pg_catalog&#39;, &#39;information_schema&#39;) AND\r\n      relkind=&#39;r&#39; \r\n    ORDER BY reltuples DESC;\r\n\r\nWhich of these queries is better to use is hard to say.  Normally I make that decision based on whether there&#39;s more useful information I also want to use inside of pg_class or inside of pg_stat_user_tables.  For basic counting purposes just to see how big things are in general, either should be accurate enough."}, {"tags": [], "down_vote_count": 1, "creation_date": 1271337943, "answer_id": 2645613, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1271337943, "body_markdown": "I don&#39;t remember the URL from where I collected this.  But hope this should help you:\r\n\r\n    CREATE TYPE table_count AS (table_name TEXT, num_rows INTEGER); \r\n    \r\n    CREATE OR REPLACE FUNCTION count_em_all () RETURNS SETOF table_count  AS &#39;\r\n    DECLARE \r\n    \tthe_count RECORD; \r\n    \tt_name RECORD; \r\n    \tr table_count%ROWTYPE; \r\n    \r\n    BEGIN\r\n    \tFOR t_name IN \r\n    \t\tSELECT \r\n    \t\t\tc.relname\r\n    \t\tFROM\r\n    \t\t\tpg_catalog.pg_class c LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\r\n    \t\tWHERE \r\n    \t\t\tc.relkind = &#39;&#39;r&#39;&#39;\r\n    \t\t\tAND n.nspname = &#39;&#39;public&#39;&#39; \r\n    \t\tORDER BY 1 \r\n    \t\tLOOP\r\n    \t\t\tFOR the_count IN EXECUTE &#39;&#39;SELECT COUNT(*) AS &quot;count&quot; FROM &#39;&#39; || t_name.relname \r\n    \t\t\tLOOP \r\n    \t\t\tEND LOOP; \r\n    \t\t\t\r\n    \t\t\tr.table_name := t_name.relname; \r\n    \t\t\tr.num_rows := the_count.count; \r\n    \t\t\tRETURN NEXT r; \r\n    \t\tEND LOOP; \r\n    \t\tRETURN; \r\n    END;\r\n    &#39; LANGUAGE plpgsql; \r\n\r\nExecuting `select count_em_all();` should get you row count of all your tables."}, {"tags": [], "down_vote_count": 3, "creation_date": 1303264602, "answer_id": 5724737, "path": "stack.django.answer", "score": 8, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1303264602, "body_markdown": "Not sure if an answer ***in bash*** is acceptable to you, but FWIW...\r\n\r\n    PGCOMMAND=&quot; psql -h localhost -U fred -d mydb -At -c \\&quot;\r\n                SELECT   table_name\r\n                FROM     information_schema.tables\r\n                WHERE    table_type=&#39;BASE TABLE&#39;\r\n                AND      table_schema=&#39;public&#39;\r\n                \\&quot;&quot;\r\n    TABLENAMES=$(export PGPASSWORD=test; eval &quot;$PGCOMMAND&quot;)\r\n    \r\n    for TABLENAME in $TABLENAMES; do\r\n        PGCOMMAND=&quot; psql -h localhost -U fred -d mydb -At -c \\&quot;\r\n                    SELECT   &#39;$TABLENAME&#39;,\r\n                             count(*) \r\n                    FROM     $TABLENAME\r\n                    \\&quot;&quot;\r\n        eval &quot;$PGCOMMAND&quot;\r\n    done\r\n\r\n \r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1384420483, "answer_id": 19973650, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1398063151, "last_edit_date": 1398063151, "body_markdown": "I usually don&#39;t rely on statistics, especially in PostgreSQL.\r\n\r\n    SELECT table_name, dsql2(&#39;select count(*) from &#39;||table_name) as rownum\r\n    FROM information_schema.tables\r\n    WHERE table_type=&#39;BASE TABLE&#39;\r\n        AND table_schema=&#39;livescreen&#39;\r\n    ORDER BY 2 DESC;\r\n&lt;!-- --&gt;\r\n\r\n    CREATE OR REPLACE FUNCTION dsql2(i_text text)\r\n      RETURNS int AS\r\n    $BODY$\r\n    Declare\r\n      v_val int;\r\n    BEGIN\r\n      execute i_text into v_val;\r\n      return v_val;\r\n    END; \r\n    $BODY$\r\n      LANGUAGE plpgsql VOLATILE\r\n      COST 100;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1416482198, "answer_id": 27038227, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1418886100, "last_edit_date": 1418886100, "body_markdown": "I made a small variation to include all tables, also for non-public tables.\r\n\r\n\r\n    CREATE TYPE table_count AS (table_schema TEXT,table_name TEXT, num_rows INTEGER); \r\n\r\n    CREATE OR REPLACE FUNCTION count_em_all () RETURNS SETOF table_count  AS &#39;\r\n    DECLARE \r\n        the_count RECORD; \r\n        t_name RECORD; \r\n        r table_count%ROWTYPE; \r\n\r\n    BEGIN\r\n        FOR t_name IN \r\n            SELECT table_schema,table_name\r\n            FROM information_schema.tables\r\n            where table_schema !=&#39;&#39;pg_catalog&#39;&#39;\r\n              and table_schema !=&#39;&#39;information_schema&#39;&#39;\r\n            ORDER BY 1,2\r\n            LOOP\r\n                FOR the_count IN EXECUTE &#39;&#39;SELECT COUNT(*) AS &quot;count&quot; FROM &#39;&#39; || t_name.table_schema||&#39;&#39;.&#39;&#39;||t_name.table_name\r\n                LOOP \r\n                END LOOP; \r\n\r\n                r.table_schema := t_name.table_schema;\r\n                r.table_name := t_name.table_name; \r\n                r.num_rows := the_count.count; \r\n                RETURN NEXT r; \r\n            END LOOP; \r\n            RETURN; \r\n    END;\r\n    &#39; LANGUAGE plpgsql; \r\n\r\n\r\n\r\n\r\nuse `select count_em_all();` to call it.\r\n\r\n\r\n\r\nHope you find this usefull.\r\nPaul\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1424828229, "answer_id": 28709658, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1424828725, "last_edit_date": 1495542387, "body_markdown": "To get estimates, see [Greg Smith&#39;s answer][1].\r\n\r\nTo get exact counts, the other answers so far are plagued with some issues, some of them serious (see below). Here&#39;s a version that&#39;s hopefully better:\r\n\r\n    CREATE FUNCTION rowcount_all(schema_name text default &#39;public&#39;)\r\n      RETURNS table(table_name text, cnt bigint) as\r\n    $$\r\n    declare\r\n     table_name text;\r\n    begin\r\n      for table_name in SELECT c.relname FROM pg_class c\r\n        JOIN pg_namespace s ON (c.relnamespace=s.oid)\r\n        WHERE c.relkind = &#39;r&#39; AND s.nspname=schema_name\r\n      LOOP\r\n        RETURN QUERY EXECUTE format(&#39;select cast(%L as text),count(*) from %I.%I&#39;,\r\n           table_name, schema_name, table_name);\r\n      END LOOP;\r\n    end\r\n    $$ language plpgsql;\r\n\r\nIt takes a schema name as parameter, or `public` if no parameter is given.\r\n\r\nTo work with a specific list of schemas or a list coming from a query without modifying the function, it can be called from within a query like this:\r\n\r\n    WITH rc(schema_name,tbl) AS (\r\n      select s.n,rowcount_all(s.n) from (values (&#39;schema1&#39;),(&#39;schema2&#39;)) as s(n)\r\n    )\r\n    SELECT schema_name,(tbl).* FROM rc;\r\n\r\nThis produces a 3-columns output with the schema, the table and the rows count.\r\n\r\nNow here are some issues in the other answers that this function avoids:\r\n\r\n - Table and schema names shouldn&#39;t be injected into executable SQL without being quoted, either with `quote_ident` or with the more modern `format()` function with its `%I` format string. Otherwise some malicious person may name their table `tablename;DROP TABLE other_table` which is perfectly valid as a table name.\r\n\r\n - Even without the SQL injection and funny characters problems, table name may exist in variants differing by case. If a table is named `ABCD` and another one `abcd`, the `SELECT count(*) FROM...` must use a quoted name otherwise it will skip `ABCD` and count `abcd` twice. The `%I` of format does this automatically.\r\n\r\n - `information_schema.tables` lists custom composite types in addition to tables, even when table_type is `&#39;BASE TABLE&#39;` (!). As a consequence, we can&#39;t iterate on`information_schema.tables`, otherwise we risk having `select count(*) from name_of_composite_type` and that would fail. OTOH `pg_class where relkind=&#39;r&#39;` should always work fine.\r\n\r\n - The type of COUNT() is `bigint`, not `int`. Tables with more than 2.15 billion rows may exist (running a count(*) on them is a bad idea, though).\r\n\r\n - A permanent type need not to be created for a function to return a resultset with several columns. `RETURNS TABLE(definition...)` is a better alternative.\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/2611745/238814\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1443535397, "answer_id": 32846058, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1443535397, "last_edit_date": 1495540049, "body_markdown": "I like Daniel V&#233;rit&#233;&#39;s [answer][1].\r\nBut when you can&#39;t use a CREATE statement you can either use a [bash solution][2] or, if you&#39;re a windows user, a powershell one:\r\n\r\n    # You don&#39;t need this if you have pgpass.conf\r\n    $env:PGPASSWORD = &quot;userpass&quot;\r\n    \r\n    # Get table list\r\n    $tables = &amp; &#39;C:\\Program Files\\PostgreSQL\\9.4\\bin\\psql.exe&#39; -U user -w -d dbname -At -c &quot;select table_name from information_schema.tables where table_type=&#39;BASE TABLE&#39; AND table_schema=&#39;schema1&#39;&quot;\r\n    \r\n    foreach ($table in $tables) {\r\n        &amp; &#39;C:\\path_to_postresql\\bin\\psql.exe&#39; -U root -w -d dbname -At -c &quot;select &#39;$table&#39;, count(*) from $table&quot;\r\n    }\r\n\r\n  [1]: https://stackoverflow.com/a/28709658/1138946\r\n  [2]: https://stackoverflow.com/a/5724737/1138946\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1469965154, "answer_id": 38683586, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1469968132, "last_edit_date": 1469968132, "body_markdown": "The hacky, practical answer for people trying to evaluate which Heroku plan they need and can&#39;t wait for heroku&#39;s slow row counter to refresh:\r\n\r\nBasically you want to run `\\dt` in `psql`, copy the results to your favorite text editor (it will look like this:\r\n\r\n     public | auth_group                     | table | axrsosvelhutvw\r\n     public | auth_group_permissions         | table | axrsosvelhutvw\r\n     public | auth_permission                | table | axrsosvelhutvw\r\n     public | auth_user                      | table | axrsosvelhutvw\r\n     public | auth_user_groups               | table | axrsosvelhutvw\r\n     public | auth_user_user_permissions     | table | axrsosvelhutvw\r\n     public | background_task                | table | axrsosvelhutvw\r\n     public | django_admin_log               | table | axrsosvelhutvw\r\n     public | django_content_type            | table | axrsosvelhutvw\r\n     public | django_migrations              | table | axrsosvelhutvw\r\n     public | django_session                 | table | axrsosvelhutvw\r\n     public | exercises_assignment           | table | axrsosvelhutvw\r\n\r\n), then run a regex search and replace like this:\r\n\r\n    ^[^|]*\\|\\s+([^|]*?)\\s+\\| table \\|.*$\r\n\r\nto:\r\n\r\n    select &#39;\\1&#39;, count(*) from \\1 union/g\r\n\r\nwhich will yield you something very similar to this:\r\n\r\n    select &#39;auth_group&#39;, count(*) from auth_group union\r\n    select &#39;auth_group_permissions&#39;, count(*) from auth_group_permissions union\r\n    select &#39;auth_permission&#39;, count(*) from auth_permission union\r\n    select &#39;auth_user&#39;, count(*) from auth_user union\r\n    select &#39;auth_user_groups&#39;, count(*) from auth_user_groups union\r\n    select &#39;auth_user_user_permissions&#39;, count(*) from auth_user_user_permissions union\r\n    select &#39;background_task&#39;, count(*) from background_task union\r\n    select &#39;django_admin_log&#39;, count(*) from django_admin_log union\r\n    select &#39;django_content_type&#39;, count(*) from django_content_type union\r\n    select &#39;django_migrations&#39;, count(*) from django_migrations union\r\n    select &#39;django_session&#39;, count(*) from django_session\r\n    ;\r\n\r\n(You&#39;ll need to remove the `union` and add the semicolon at the end manually)\r\n\r\nRun it in `psql` and you&#39;re done.\r\n\r\n                ?column?            | count\r\n    --------------------------------+-------\r\n     auth_group_permissions         |     0\r\n     auth_user_user_permissions     |     0\r\n     django_session                 |  1306\r\n     django_content_type            |    17\r\n     auth_user_groups               |   162\r\n     django_admin_log               |  9106\r\n     django_migrations              |    19\r\n    [..]\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1469969971, "answer_id": 38684225, "path": "stack.django.answer", "score": 12, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1469969971, "body_markdown": "Here is a solution that does not require functions to get an accurate count for each table:\r\n\r\n    select table_schema, \r\n           table_name, \r\n           (xpath(&#39;/row/cnt/text()&#39;, xml_count))[1]::text::int as row_count\r\n    from (\r\n      select table_name, table_schema, \r\n             query_to_xml(format(&#39;select count(*) as cnt from %I.%I&#39;, table_schema, table_name), false, true, &#39;&#39;) as xml_count\r\n      from information_schema.tables\r\n      where table_schema = &#39;public&#39; --&lt;&lt; change here for the schema you want\r\n    ) t\r\n\r\n`query_to_xml` will run the passed SQL query and return an XML with the result (the row count for that table). The outer `xpath()` will then extract the count information from that xml and convert it to a number\r\n\r\nThe derived table is not really necessary, but makes the `xpath()` a bit easier to understand - otherwise the whole `query_to_xml()` would need to be passed to the `xpath()` function.\r\n"}], "title": "How do you find the row count for all your tables in Postgres", "view_count": 202322, "answer_count": 10, "code_snippet": ["<code>SELECT count(*) FROM table_name;\n</code>", "<code>SELECT schemaname,relname,n_live_tup \n  FROM pg_stat_user_tables \n  ORDER BY n_live_tup DESC;\n</code>", "<code>SELECT \n  nspname AS schemaname,relname,reltuples\nFROM pg_class C\nLEFT JOIN pg_namespace N ON (N.oid = C.relnamespace)\nWHERE \n  nspname NOT IN ('pg_catalog', 'information_schema') AND\n  relkind='r' \nORDER BY reltuples DESC;\n</code>", "<code>CREATE FUNCTION rowcount_all(schema_name text default 'public')\n  RETURNS table(table_name text, cnt bigint) as\n$$\ndeclare\n table_name text;\nbegin\n  for table_name in SELECT c.relname FROM pg_class c\n    JOIN pg_namespace s ON (c.relnamespace=s.oid)\n    WHERE c.relkind = 'r' AND s.nspname=schema_name\n  LOOP\n    RETURN QUERY EXECUTE format('select cast(%L as text),count(*) from %I.%I',\n       table_name, schema_name, table_name);\n  END LOOP;\nend\n$$ language plpgsql;\n</code>", "<code>public</code>", "<code>WITH rc(schema_name,tbl) AS (\n  select s.n,rowcount_all(s.n) from (values ('schema1'),('schema2')) as s(n)\n)\nSELECT schema_name,(tbl).* FROM rc;\n</code>", "<code>quote_ident</code>", "<code>format()</code>", "<code>%I</code>", "<code>tablename;DROP TABLE other_table</code>", "<code>ABCD</code>", "<code>abcd</code>", "<code>SELECT count(*) FROM...</code>", "<code>ABCD</code>", "<code>abcd</code>", "<code>%I</code>", "<code>information_schema.tables</code>", "<code>'BASE TABLE'</code>", "<code>information_schema.tables</code>", "<code>select count(*) from name_of_composite_type</code>", "<code>pg_class where relkind='r'</code>", "<code>bigint</code>", "<code>int</code>", "<code>RETURNS TABLE(definition...)</code>", "<code>SELECT relname, n_tup_ins - n_tup_del as rowcount FROM pg_stat_all_tables;\n</code>", "<code>ANALYZE</code>", "<code>select count(*) from table</code>", "<code>select table_schema, \n       table_name, \n       (xpath('/row/cnt/text()', xml_count))[1]::text::int as row_count\nfrom (\n  select table_name, table_schema, \n         query_to_xml(format('select count(*) as cnt from %I.%I', table_schema, table_name), false, true, '') as xml_count\n  from information_schema.tables\n  where table_schema = 'public' --&lt;&lt; change here for the schema you want\n) t\n</code>", "<code>query_to_xml</code>", "<code>xpath()</code>", "<code>xpath()</code>", "<code>query_to_xml()</code>", "<code>xpath()</code>", "<code>query_to_jsonb()</code>", "<code>PGCOMMAND=\" psql -h localhost -U fred -d mydb -At -c \\\"\n            SELECT   table_name\n            FROM     information_schema.tables\n            WHERE    table_type='BASE TABLE'\n            AND      table_schema='public'\n            \\\"\"\nTABLENAMES=$(export PGPASSWORD=test; eval \"$PGCOMMAND\")\n\nfor TABLENAME in $TABLENAMES; do\n    PGCOMMAND=\" psql -h localhost -U fred -d mydb -At -c \\\"\n                SELECT   '$TABLENAME',\n                         count(*) \n                FROM     $TABLENAME\n                \\\"\"\n    eval \"$PGCOMMAND\"\ndone\n</code>", "<code>select count(*) from table_name;</code>", "<code>\\dt</code>", "<code>psql</code>", "<code> public | auth_group                     | table | axrsosvelhutvw\n public | auth_group_permissions         | table | axrsosvelhutvw\n public | auth_permission                | table | axrsosvelhutvw\n public | auth_user                      | table | axrsosvelhutvw\n public | auth_user_groups               | table | axrsosvelhutvw\n public | auth_user_user_permissions     | table | axrsosvelhutvw\n public | background_task                | table | axrsosvelhutvw\n public | django_admin_log               | table | axrsosvelhutvw\n public | django_content_type            | table | axrsosvelhutvw\n public | django_migrations              | table | axrsosvelhutvw\n public | django_session                 | table | axrsosvelhutvw\n public | exercises_assignment           | table | axrsosvelhutvw\n</code>", "<code>^[^|]*\\|\\s+([^|]*?)\\s+\\| table \\|.*$\n</code>", "<code>select '\\1', count(*) from \\1 union/g\n</code>", "<code>select 'auth_group', count(*) from auth_group union\nselect 'auth_group_permissions', count(*) from auth_group_permissions union\nselect 'auth_permission', count(*) from auth_permission union\nselect 'auth_user', count(*) from auth_user union\nselect 'auth_user_groups', count(*) from auth_user_groups union\nselect 'auth_user_user_permissions', count(*) from auth_user_user_permissions union\nselect 'background_task', count(*) from background_task union\nselect 'django_admin_log', count(*) from django_admin_log union\nselect 'django_content_type', count(*) from django_content_type union\nselect 'django_migrations', count(*) from django_migrations union\nselect 'django_session', count(*) from django_session\n;\n</code>", "<code>union</code>", "<code>psql</code>", "<code>            ?column?            | count\n--------------------------------+-------\n auth_group_permissions         |     0\n auth_user_user_permissions     |     0\n django_session                 |  1306\n django_content_type            |    17\n auth_user_groups               |   162\n django_admin_log               |  9106\n django_migrations              |    19\n[..]\n</code>", "<code>CREATE TYPE table_count AS (table_name TEXT, num_rows INTEGER); \n\nCREATE OR REPLACE FUNCTION count_em_all () RETURNS SETOF table_count  AS '\nDECLARE \n    the_count RECORD; \n    t_name RECORD; \n    r table_count%ROWTYPE; \n\nBEGIN\n    FOR t_name IN \n        SELECT \n            c.relname\n        FROM\n            pg_catalog.pg_class c LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\n        WHERE \n            c.relkind = ''r''\n            AND n.nspname = ''public'' \n        ORDER BY 1 \n        LOOP\n            FOR the_count IN EXECUTE ''SELECT COUNT(*) AS \"count\" FROM '' || t_name.relname \n            LOOP \n            END LOOP; \n\n            r.table_name := t_name.relname; \n            r.num_rows := the_count.count; \n            RETURN NEXT r; \n        END LOOP; \n        RETURN; \nEND;\n' LANGUAGE plpgsql; \n</code>", "<code>select count_em_all();</code>", "<code>quote_ident(t_name.relname)</code>", "<code>SELECT table_name, dsql2('select count(*) from '||table_name) as rownum\nFROM information_schema.tables\nWHERE table_type='BASE TABLE'\n    AND table_schema='livescreen'\nORDER BY 2 DESC;\n</code>", "<code>CREATE OR REPLACE FUNCTION dsql2(i_text text)\n  RETURNS int AS\n$BODY$\nDeclare\n  v_val int;\nBEGIN\n  execute i_text into v_val;\n  return v_val;\nEND; \n$BODY$\n  LANGUAGE plpgsql VOLATILE\n  COST 100;\n</code>", "<code>CREATE TYPE table_count AS (table_schema TEXT,table_name TEXT, num_rows INTEGER); \n\nCREATE OR REPLACE FUNCTION count_em_all () RETURNS SETOF table_count  AS '\nDECLARE \n    the_count RECORD; \n    t_name RECORD; \n    r table_count%ROWTYPE; \n\nBEGIN\n    FOR t_name IN \n        SELECT table_schema,table_name\n        FROM information_schema.tables\n        where table_schema !=''pg_catalog''\n          and table_schema !=''information_schema''\n        ORDER BY 1,2\n        LOOP\n            FOR the_count IN EXECUTE ''SELECT COUNT(*) AS \"count\" FROM '' || t_name.table_schema||''.''||t_name.table_name\n            LOOP \n            END LOOP; \n\n            r.table_schema := t_name.table_schema;\n            r.table_name := t_name.table_name; \n            r.num_rows := the_count.count; \n            RETURN NEXT r; \n        END LOOP; \n        RETURN; \nEND;\n' LANGUAGE plpgsql; \n</code>", "<code>select count_em_all();</code>", "<code># You don't need this if you have pgpass.conf\n$env:PGPASSWORD = \"userpass\"\n\n# Get table list\n$tables = &amp; 'C:\\Program Files\\PostgreSQL\\9.4\\bin\\psql.exe' -U user -w -d dbname -At -c \"select table_name from information_schema.tables where table_type='BASE TABLE' AND table_schema='schema1'\"\n\nforeach ($table in $tables) {\n    &amp; 'C:\\path_to_postresql\\bin\\psql.exe' -U root -w -d dbname -At -c \"select '$table', count(*) from $table\"\n}\n</code>"], "path": "stack.django"}, {"tags": ["python", "json"], "creation_date": 1344477771, "body_markdown": "I have a basic dict as follows:\r\n\r\n    sample = {}\r\n    sample[&#39;title&#39;] = &quot;String&quot;\r\n    sample[&#39;somedate&#39;] = somedatetimehere\r\n\r\nWhen I try to do `jsonify(sample)` I get:\r\n\r\n`TypeError: datetime.datetime(2012, 8, 8, 21, 46, 24, 862000) is not JSON serializable`\r\n\r\nWhat can I do such that my dictionary sample can overcome the error above?\r\n\r\nNote: Though it may not be relevant, the dictionaries are generated from the retrieval of records out of mongodb where when I print out `str(sample[&#39;somedate&#39;])`, the output is `2012-08-08 21:46:24.862000`.", "last_edit_date": 1497876888, "up_vote_count": 363, "link": "https://stackoverflow.com/questions/11875770/how-to-overcome-datetime-datetime-not-json-serializable", "_childDocuments_": [{"tags": [], "down_vote_count": 8, "creation_date": 1344478077, "answer_id": 11875813, "path": "stack.django.answer", "score": 192, "up_vote_count": 200, "is_accepted": true, "last_activity_date": 1365120478, "last_edit_date": 1365120478, "body_markdown": "As you are using mongoengine (per comments) and pymongo is a dependency, pymongo has built-in utilities to help with json serialization:  \r\nhttp://api.mongodb.org/python/1.10.1/api/bson/json_util.html\r\n\r\nExample usage (serialization):\r\n    \r\n    from bson import json_util\r\n    import json\r\n\r\n    json.dumps(anObject, default=json_util.default)\r\n    \r\nExample usage (deserialization):\r\n    \r\n    json.loads(aJsonString, object_hook=json_util.object_hook)"}, {"tags": [], "down_vote_count": 12, "creation_date": 1344478255, "answer_id": 11875834, "path": "stack.django.answer", "score": 109, "up_vote_count": 121, "is_accepted": false, "last_activity_date": 1344478255, "body_markdown": "Convert the date to a string\r\n\r\n    sample[&#39;somedate&#39;] = str( datetime.now() )"}, {"tags": [], "down_vote_count": 0, "creation_date": 1344481690, "answer_id": 11876221, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1344481690, "body_markdown": "You have to supply a custom encoder class with the `cls` parameter of `json.dumps`. To quote from the [docs](http://docs.python.org/library/json.html):\r\n\r\n    &gt;&gt;&gt; import json\r\n    &gt;&gt;&gt; class ComplexEncoder(json.JSONEncoder):\r\n    ...     def default(self, obj):\r\n    ...         if isinstance(obj, complex):\r\n    ...             return [obj.real, obj.imag]\r\n    ...         return json.JSONEncoder.default(self, obj)\r\n    ...\r\n    &gt;&gt;&gt; dumps(2 + 1j, cls=ComplexEncoder)\r\n    &#39;[2.0, 1.0]&#39;\r\n    &gt;&gt;&gt; ComplexEncoder().encode(2 + 1j)\r\n    &#39;[2.0, 1.0]&#39;\r\n    &gt;&gt;&gt; list(ComplexEncoder().iterencode(2 + 1j))\r\n    [&#39;[&#39;, &#39;2.0&#39;, &#39;, &#39;, &#39;1.0&#39;, &#39;]&#39;]\r\n\r\nThis uses complex numbers as the example, but you can just as easily create a class to encode dates (except I think JSON is a little fuzzy about dates)"}, {"tags": [], "down_vote_count": 6, "creation_date": 1365117358, "answer_id": 15823348, "path": "stack.django.answer", "score": 73, "up_vote_count": 79, "is_accepted": false, "last_activity_date": 1452000847, "last_edit_date": 1452000847, "body_markdown": "For others who do not need or want to use the pymongo library for this.. you can achieve datetime JSON conversion easily with this small snippet:\r\n\r\n    def default(obj):\r\n        &quot;&quot;&quot;Default JSON serializer.&quot;&quot;&quot;\r\n        import calendar, datetime\r\n\r\n        if isinstance(obj, datetime.datetime):\r\n            if obj.utcoffset() is not None:\r\n                obj = obj - obj.utcoffset()\r\n            millis = int(\r\n                calendar.timegm(obj.timetuple()) * 1000 +\r\n                obj.microsecond / 1000\r\n            )\r\n            return millis\r\n        raise TypeError(&#39;Not sure how to serialize %s&#39; % (obj,))\r\n\r\nThen use it like so:\r\n\r\n    import datetime, json\r\n    print json.dumps(datetime.datetime.now(), default=default)\r\n\r\noutput:&amp;nbsp;\r\n\r\n    &#39;1365091796124&#39;\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1367563112, "answer_id": 16353080, "path": "stack.django.answer", "score": 24, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1472025442, "last_edit_date": 1472025442, "body_markdown": "Here is my solution:\r\n\r\n    # -*- coding: utf-8 -*-\r\n    import json\r\n\r\n\r\n    class DatetimeEncoder(json.JSONEncoder):\r\n        def default(self, obj):\r\n            try:\r\n                return super(DatetimeEncoder, obj).default(obj)\r\n            except TypeError:\r\n                return str(obj)\r\n\r\nThen you can use it like that:\r\n\r\n    json.dumps(dictionnary, cls=DatetimeEncoder)"}, {"tags": [], "down_vote_count": 3, "creation_date": 1367619682, "answer_id": 16368401, "path": "stack.django.answer", "score": 3, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1370785377, "last_edit_date": 1370785377, "body_markdown": "If you are using the result in a view be sure to return a proper response. According to the API, jsonify does the following:\r\n\r\n&gt; Creates a Response with the JSON representation of the given arguments\r\n&gt; with an application/json mimetype.\r\n\r\nTo mimic this behavior with json.dumps you have to add a few extra lines of code.\r\n\r\n\tresponse = make_response(dumps(sample, cls=CustomEncoder))\r\n\tresponse.headers[&#39;Content-Type&#39;] = &#39;application/json&#39;\r\n\tresponse.headers[&#39;mimetype&#39;] = &#39;application/json&#39;\r\n\treturn response\r\n\r\nYou should also return a dict to fully replicate jsonify&#39;s response. So, the entire file will look like this\r\n\r\n    from flask import make_response\r\n    from json import JSONEncoder, dumps\r\n    \r\n    \r\n    class CustomEncoder(JSONEncoder):\r\n    \tdef default(self, obj):\r\n    \t\tif set([&#39;quantize&#39;, &#39;year&#39;]).intersection(dir(obj)):\r\n    \t\t\treturn str(obj)\r\n    \t\telif hasattr(obj, &#39;next&#39;):\r\n    \t\t\treturn list(obj)\r\n    \t\treturn JSONEncoder.default(self, obj)\r\n    \r\n    @app.route(&#39;/get_reps/&#39;, methods=[&#39;GET&#39;])\r\n    def get_reps():\r\n    \tsample = [&#39;some text&#39;, &lt;datetime object&gt;, 123]\r\n    \tresponse = make_response(dumps({&#39;result&#39;: sample}, cls=CustomEncoder))\r\n        response.headers[&#39;Content-Type&#39;] = &#39;application/json&#39;\r\n        response.headers[&#39;mimetype&#39;] = &#39;application/json&#39;\r\n    \treturn response\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1374340901, "answer_id": 17764705, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1374340901, "body_markdown": "I had encountered same problem when externalizing django model object to dump as JSON.\r\nHere is how you can solve it.\r\n\r\n    def externalize(model_obj):\r\n      keys = model_obj._meta.get_all_field_names() \r\n      data = {}\r\n      for key in keys:\r\n        if key == &#39;date_time&#39;:\r\n          date_time_obj = getattr(model_obj, key)\r\n          data[key] = date_time_obj.strftime(&quot;%A %d. %B %Y&quot;)\r\n        else:\r\n          data[key] = getattr(model_obj, key)\r\n      return data\r\n    \r\n\r\n    "}, {"tags": [], "down_vote_count": 1, "creation_date": 1375229274, "answer_id": 17959535, "path": "stack.django.answer", "score": 13, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1375229274, "body_markdown": "My solution (with less verbosity, I think):\r\n\r\n    def default(o):\r\n        if type(o) is datetime.date or type(o) is datetime.datetime:\r\n            return o.isoformat()\r\n    \r\n    def jsondumps(o):\r\n        return json.dumps(o, default=default)\r\n\r\nThen use `jsondumps` instead of `json.dumps`. It will print:\r\n\r\n    &gt;&gt;&gt; jsondumps({&#39;today&#39;: datetime.date.today()})\r\n    &#39;{&quot;today&quot;: &quot;2013-07-30&quot;}&#39;\r\n\r\nI you want, later you can add other special cases to this with a simple twist of the `default` method. Example:  \r\n     \r\n    def default(o):\r\n        if type(o) is datetime.date or type(o) is datetime.datetime:\r\n            return o.isoformat()\r\n        if type(o) is decimal.Decimal:\r\n            return float(o)"}, {"tags": [], "down_vote_count": 1, "creation_date": 1375399658, "answer_id": 18006338, "path": "stack.django.answer", "score": 19, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1375399658, "body_markdown": "I have an application with a similar issue; my approach was to JSONize the datetime value as a 6-item list (year, month, day, hour, minutes, seconds); you could go to microseconds as a 7-item list, but I had no need to:\r\n\r\n    class DateTimeEncoder(json.JSONEncoder):\r\n        def default(self, obj):\r\n            if isinstance(obj, datetime.datetime):\r\n                encoded_object = list(obj.timetuple())[0:6]\r\n            else:\r\n                encoded_object =json.JSONEncoder.default(self, obj)\r\n            return encoded_object\r\n    \r\n    sample = {}\r\n    sample[&#39;title&#39;] = &quot;String&quot;\r\n    sample[&#39;somedate&#39;] = datetime.datetime.now()\r\n    \r\n    print sample\r\n    print json.dumps(sample, cls=DateTimeEncoder)\r\n\r\nproduces:\r\n\r\n    {&#39;somedate&#39;: datetime.datetime(2013, 8, 1, 16, 22, 45, 890000), &#39;title&#39;: &#39;String&#39;}\r\n    {&quot;somedate&quot;: [2013, 8, 1, 16, 22, 45], &quot;title&quot;: &quot;String&quot;}"}, {"tags": [], "down_vote_count": 1, "creation_date": 1383878169, "answer_id": 19850619, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1452574556, "last_edit_date": 1452574556, "body_markdown": "Here is my full solution for converting datetime to JSON and back..\r\n\r\n\timport calendar, datetime, json\r\n\t\r\n\tdef outputJSON(obj):\r\n\t\t&quot;&quot;&quot;Default JSON serializer.&quot;&quot;&quot;\r\n\t\r\n\t\tif isinstance(obj, datetime.datetime):\r\n\t\t\tif obj.utcoffset() is not None:\r\n\t\t\t\tobj = obj - obj.utcoffset()\r\n\t\t\t\r\n\t\t\treturn obj.strftime(&#39;%Y-%m-%d %H:%M:%S.%f&#39;)\r\n\t\treturn str(obj)\r\n\t\r\n\tdef inputJSON(obj):\r\n\t\tnewDic = {}\r\n\t\t\r\n\t\tfor key in obj:\r\n\t\t\ttry:\r\n\t\t\t\tif float(key) == int(float(key)):\r\n\t\t\t\t\tnewKey = int(key)\r\n\t\t\t\telse:\r\n\t\t\t\t\tnewKey = float(key)\r\n\t\t\t\t\r\n\t\t\t\tnewDic[newKey] = obj[key]\r\n\t\t\t\tcontinue\r\n\t\t\texcept ValueError:\r\n\t\t\t\tpass\r\n\t\t\t\r\n\t\t\ttry:\r\n\t\t\t\tnewDic[str(key)] = datetime.datetime.strptime(obj[key], &#39;%Y-%m-%d %H:%M:%S.%f&#39;)\r\n\t\t\t\tcontinue\r\n\t\t\texcept TypeError:\r\n\t\t\t\tpass\r\n\t\t\t\t\r\n\t\t\tnewDic[str(key)] = obj[key]\r\n\t\r\n\t\treturn newDic\r\n\t\r\n\tx = {&#39;Date&#39;: datetime.datetime.utcnow(), 34: 89.9, 12.3: 90, 45: 67, &#39;Extra&#39;: 6}\r\n\t\r\n\tprint x\r\n\t\r\n\twith open(&#39;my_dict.json&#39;, &#39;w&#39;) as fp:\r\n\t\tjson.dump(x, fp, default=outputJSON)\r\n\t\r\n\twith open(&#39;my_dict.json&#39;) as f:\r\n\t\tmy_dict = json.load(f, object_hook=inputJSON)\r\n\t\t\r\n\tprint my_dict\r\n\r\nOutput\r\n\r\n    {&#39;Date&#39;: datetime.datetime(2013, 11, 8, 2, 30, 56, 479727), 34: 89.9, 45: 67, 12.3: 90, &#39;Extra&#39;: 6}\r\n    {&#39;Date&#39;: datetime.datetime(2013, 11, 8, 2, 30, 56, 479727), 34: 89.9, 45: 67, 12.3: 90, &#39;Extra&#39;: 6}\r\n\r\nJSON File\r\n\r\n    {&quot;Date&quot;: &quot;2013-11-08 02:30:56.479727&quot;, &quot;34&quot;: 89.9, &quot;45&quot;: 67, &quot;12.3&quot;: 90, &quot;Extra&quot;: 6}\r\n\r\nThis has enabled me to import and export strings, ints, floats and datetime objects.\r\nIt shouldn&#39;t be to hard to extend for other types.\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1394149577, "answer_id": 22238613, "path": "stack.django.answer", "score": 296, "up_vote_count": 298, "is_accepted": false, "last_activity_date": 1502900032, "last_edit_date": 1502900032, "body_markdown": "Building on other answers, a simple solution based on a specific serializer that just converts `datetime.datetime` and `datetime.date` objects to strings.\r\n\r\n    from datetime import date, datetime\r\n    \r\n    def json_serial(obj):\r\n        &quot;&quot;&quot;JSON serializer for objects not serializable by default json code&quot;&quot;&quot;\r\n    \r\n        if isinstance(obj, (datetime, date)):\r\n            return obj.isoformat()\r\n        raise TypeError (&quot;Type %s not serializable&quot; % type(obj))\r\n\r\nAs seen, the code just checks to find out if object is of class `datetime.datetime` or `datetime.date`, and then uses `.isoformat()` to produce a serialized version of it, according to ISO 8601 format, YYYY-MM-DDTHH:MM:SS (which is easily decoded by JavaScript). If more complex serialized representations are sought, other code could be used instead of str() (see other answers to this question for examples). The code ends by raising an exception, to deal with the case it is called with a non-serializable type.\r\n\r\nThis json_serial function can be used as follows:\r\n\r\n    from datetime import datetime\r\n    from json import dumps\r\n    \r\n    print dumps(datetime.now(), default=json_serial)\r\n\r\nThe details about how the default parameter to json.dumps works can be found in [Section Basic Usage of the json module documentation][1]. \r\n\r\n\r\n  [1]: http://docs.python.org/2/library/json.html#basic-usage"}, {"tags": [], "down_vote_count": 0, "creation_date": 1416563564, "answer_id": 27058505, "path": "stack.django.answer", "score": 123, "up_vote_count": 123, "is_accepted": false, "last_activity_date": 1416563564, "body_markdown": "I have just encountered this problem and my solution is to subclass `json.JSONEncoder`:\r\n\r\n    from datetime import datetime\r\n    import json\r\n\r\n    class DateTimeEncoder(json.JSONEncoder):\r\n        def default(self, o):\r\n            if isinstance(o, datetime):\r\n                return o.isoformat()\r\n\r\n            return json.JSONEncoder.default(self, o)\r\n\r\nIn your call do something like: `json.dumps(yourobj, cls=DateTimeEncoder)` The `.isoformat()` I got from one of the answers above."}, {"tags": [], "down_vote_count": 0, "creation_date": 1435688715, "answer_id": 31145686, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1435688715, "body_markdown": "The simplest way to do this is to change the part of the dict that is in datetime format to isoformat. That value will effectively be a string in isoformat which json is ok with.\r\n\r\n \r\n\r\n    v_dict = version.dict()\r\n    v_dict[&#39;created_at&#39;] = v_dict[&#39;created_at&#39;].isoformat()\r\n    "}, {"tags": [], "down_vote_count": 1, "creation_date": 1440589086, "answer_id": 32225623, "path": "stack.django.answer", "score": 14, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1440589086, "last_edit_date": 1495542393, "body_markdown": "This Q repeats time and time again - a simple way to patch the json module such that serialization would support datetime.  \r\n\r\n    import json\r\n    import datetime\r\n    \r\n    json.JSONEncoder.default = lambda self,obj: (obj.isoformat() if isinstance(obj, datetime.datetime) else None)\r\n\r\nThan use json serialization as you always do - this time with datetime being serialized as isoformat.\r\n\r\n    json.dumps({&#39;created&#39;:datetime.datetime.now()})\r\n\r\nResulting in: &#39;{&quot;created&quot;: &quot;2015-08-26T14:21:31.853855&quot;}&#39;\r\n\r\nSee more details and some words of caution at:\r\n[StackOverflow: JSON datetime between Python and JavaScript][1]\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/455580/json-datetime-between-python-and-javascript/32224522#32224522"}, {"tags": [], "down_vote_count": 0, "creation_date": 1445520594, "answer_id": 33282237, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1445520594, "body_markdown": "My solution ...\r\n\r\n\r\n    from datetime import datetime\r\n    import json\r\n    \r\n    from pytz import timezone\r\n    import pytz\r\n    \r\n    \r\n    def json_dt_serializer(obj):\r\n        &quot;&quot;&quot;JSON serializer, by macm.\r\n        &quot;&quot;&quot;\r\n        rsp = dict()\r\n        if isinstance(obj, datetime):\r\n            rsp[&#39;day&#39;] = obj.day\r\n            rsp[&#39;hour&#39;] = obj.hour\r\n            rsp[&#39;microsecond&#39;] = obj.microsecond\r\n            rsp[&#39;minute&#39;] = obj.minute\r\n            rsp[&#39;month&#39;] = obj.month\r\n            rsp[&#39;second&#39;] = obj.second\r\n            rsp[&#39;year&#39;] = obj.year\r\n            rsp[&#39;tzinfo&#39;] = str(obj.tzinfo)\r\n            return rsp\r\n        raise TypeError(&quot;Type not serializable&quot;)\r\n    \r\n    \r\n    def json_dt_deserialize(obj):\r\n        &quot;&quot;&quot;JSON deserialize from json_dt_serializer, by macm.\r\n        &quot;&quot;&quot;\r\n        if isinstance(obj, str):\r\n            obj = json.loads(obj)\r\n        tzone = timezone(obj[&#39;tzinfo&#39;])\r\n        tmp_dt = datetime(obj[&#39;year&#39;],\r\n                          obj[&#39;month&#39;],\r\n                          obj[&#39;day&#39;],\r\n                          hour=obj[&#39;hour&#39;],\r\n                          minute=obj[&#39;minute&#39;],\r\n                          second=obj[&#39;second&#39;],\r\n                          microsecond=obj[&#39;microsecond&#39;])\r\n        loc_dt = tzone.localize(tmp_dt)\r\n        deserialize = loc_dt.astimezone(tzone)\r\n        return deserialize    \r\nOk, now some tests.\r\n\r\n    # Tests\r\n    now = datetime.now(pytz.utc)\r\n    \r\n    # Using this solution\r\n    rsp = json_dt_serializer(now)\r\n    tmp = json_dt_deserialize(rsp)\r\n    assert tmp == now\r\n    assert isinstance(tmp, datetime) == True\r\n    assert isinstance(now, datetime) == True\r\n    \r\n    # using default from json.dumps\r\n    tmp = json.dumps(datetime.now(pytz.utc), default=json_dt_serializer)\r\n    rsp = json_dt_deserialize(tmp)\r\n    assert isinstance(rsp, datetime) == True\r\n    \r\n    # Lets try another timezone\r\n    eastern = timezone(&#39;US/Eastern&#39;)\r\n    now = datetime.now(eastern)\r\n    rsp = json_dt_serializer(now)\r\n    tmp = json_dt_deserialize(rsp)\r\n    \r\n    print(tmp)\r\n    # 2015-10-22 09:18:33.169302-04:00\r\n    \r\n    print(now)\r\n    # 2015-10-22 09:18:33.169302-04:00\r\n    \r\n    # Wow, Works!\r\n    assert tmp == now"}, {"tags": [], "down_vote_count": 0, "creation_date": 1449094418, "answer_id": 34054131, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1449094418, "body_markdown": "I got the same error message while writing the serialize decorator inside a Class  with sqlalchemy. So instead of :\r\n\r\n    Class Puppy(Base):\r\n        ...\r\n        @property\r\n        def serialize(self):\r\n            return { &#39;id&#39;:self.id,\r\n                     &#39;date_birth&#39;:self.date_birth,\r\n                      ...\r\n                    }\r\n\r\nI  simply borrowed jgbarah&#39;s idea of using isoformat() and appended the original value with isoformat(), so that it now looks like:\r\n            \r\n\r\n                      ...\r\n                     &#39;date_birth&#39;:self.date_birth.isoformat(),\r\n                      ...\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1450238031, "answer_id": 34303655, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1450238031, "body_markdown": "Here is a simple solution to over come &quot;datetime not JSON serializable&quot;\r\nproblem. \r\n\r\n    enco = lambda obj: (\r\n        obj.isoformat()\r\n        if isinstance(obj, datetime.datetime)\r\n        or isinstance(obj, datetime.date)\r\n        else None\r\n    )\r\n    \r\n    json.dumps({&#39;date&#39;: datetime.datetime.now()}, default=enco)\r\n\r\n&lt;b&gt;Output:-&gt;&lt;/b&gt; {&quot;date&quot;: &quot;2015-12-16T04:48:20.024609&quot;} "}, {"tags": [], "down_vote_count": 0, "creation_date": 1454305047, "answer_id": 35123637, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1454307016, "last_edit_date": 1454307016, "body_markdown": "Convert the `date`  to  `string`\r\n\r\n\r\n    date = str(datetime.datetime(somedatetimehere)) "}, {"tags": [], "down_vote_count": 0, "creation_date": 1458599366, "answer_id": 36142844, "path": "stack.django.answer", "score": 116, "up_vote_count": 116, "is_accepted": false, "last_activity_date": 1484861827, "last_edit_date": 1484861827, "body_markdown": "My quick &amp; dirty JSON dump that eats dates and everything:\r\n\r\n    json.dumps(my_dictionary, indent=4, sort_keys=True, default=str)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1460161035, "answer_id": 36511287, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1464095940, "last_edit_date": 1464095940, "body_markdown": "A quick fix if you want your own formatting\r\n\r\n    for key,val in sample.items():\r\n        if isinstance(val, datetime):\r\n            sample[key] = &#39;{:%Y-%m-%d %H:%M:%S}&#39;.format(val) #you can add different formating here\r\n    json.dumps(sample)\r\n "}, {"tags": [], "down_vote_count": 0, "creation_date": 1476911553, "answer_id": 40141615, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1476911553, "last_edit_date": 1495540978, "body_markdown": "Generally there are several ways to serialize datetimes, like:\r\n\r\n1. ISO string, short and can include timezone info, e.g. @jgbarah&#39;s [answer][1]\r\n2. Timestamp (timezone data is lost), e.g. @JayTaylor&#39;s [answer][2]\r\n3. Dictionary of  properties (including timezone).\r\n\r\nIf you&#39;re okay with the last way, the [json_tricks][3] package handles dates, times and datetimes including timezones.\r\n\r\n    from datetime import datetime\r\n    from json_tricks import dumps\r\n    foo = {&#39;title&#39;: &#39;String&#39;, &#39;datetime&#39;: datetime(2012, 8, 8, 21, 46, 24, 862000)}\r\n    dumps(foo)\r\n\r\nwhich gives:\r\n\r\n    {&quot;title&quot;: &quot;String&quot;, &quot;datetime&quot;: {&quot;__datetime__&quot;: null, &quot;year&quot;: 2012, &quot;month&quot;: 8, &quot;day&quot;: 8, &quot;hour&quot;: 21, &quot;minute&quot;: 46, &quot;second&quot;: 24, &quot;microsecond&quot;: 862000}}\r\n\r\nSo all you need to do is\r\n\r\n    `pip install json_tricks`\r\n\r\nand then import from `json_tricks` instead of `json`.\r\n\r\nThe advantage of not storing it as a single string, int or float comes when decoding: if you encounter just a string or especially int or float, you need to know something about the data to know if it&#39;s a datetime. As a dict, you can store metadata so it can be decoded automatically, which is what `json_tricks` does for you. It&#39;s also easily editable for humans.\r\n\r\nDisclaimer: it&#39;s made by me. Because I had the same problem.\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/22238613/723090\r\n  [2]: https://stackoverflow.com/a/15823348/723090\r\n  [3]: https://github.com/mverleg/pyjson_tricks"}, {"tags": [], "down_vote_count": 0, "creation_date": 1492244871, "answer_id": 43423907, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1492244871, "body_markdown": "I may not 100% correct but,\r\nthis is the simple way to do serialize\r\n\r\n    #!/usr/bin/python\r\n    import datetime,json\r\n    \r\n    sampledict = {}\r\n    sampledict[&#39;a&#39;] = &quot;some string&quot;\r\n    sampledict[&#39;b&#39;] = datetime.datetime.now()\r\n    \r\n    print sampledict   # output : {&#39;a&#39;: &#39;some string&#39;, &#39;b&#39;: datetime.datetime(2017, 4, 15, 5, 15, 34, 652996)}\r\n    \r\n    #print json.dumps(sampledict)\r\n    \r\n    &#39;&#39;&#39;\r\n    output : \r\n    \r\n    Traceback (most recent call last):\r\n      File &quot;./jsonencodedecode.py&quot;, line 10, in &lt;module&gt;\r\n        print json.dumps(sampledict)\r\n      File &quot;/usr/lib/python2.7/json/__init__.py&quot;, line 244, in dumps\r\n        return _default_encoder.encode(obj)\r\n      File &quot;/usr/lib/python2.7/json/encoder.py&quot;, line 207, in encode\r\n        chunks = self.iterencode(o, _one_shot=True)\r\n      File &quot;/usr/lib/python2.7/json/encoder.py&quot;, line 270, in iterencode\r\n        return _iterencode(o, 0)\r\n      File &quot;/usr/lib/python2.7/json/encoder.py&quot;, line 184, in default\r\n        raise TypeError(repr(o) + &quot; is not JSON serializable&quot;)\r\n    TypeError: datetime.datetime(2017, 4, 15, 5, 16, 17, 435706) is not JSON serializable\r\n    \r\n    \r\n    &#39;&#39;&#39;\r\n    \r\n    sampledict[&#39;b&#39;] = datetime.datetime.now().strftime(&quot;%B %d, %Y %H:%M %p&quot;)\r\n    \r\n    afterdump = json.dumps(sampledict)\r\n    \r\n    print afterdump  #output : {&quot;a&quot;: &quot;some string&quot;, &quot;b&quot;: &quot;April 15, 2017 05:18 AM&quot;}\r\n    \r\n    print type(afterdump) #&lt;type &#39;str&#39;&gt;\r\n    \r\n    \r\n    afterloads = json.loads(afterdump) \r\n    \r\n    print afterloads # output : {u&#39;a&#39;: u&#39;some string&#39;, u&#39;b&#39;: u&#39;April 15, 2017 05:18 AM&#39;}\r\n    \r\n    \r\n    print type(afterloads) # output :&lt;type &#39;dict&#39;&gt; \r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1509450523, "answer_id": 47034670, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1518501908, "last_edit_date": 1518501908, "body_markdown": "You should use **.strftime()** method on **.datetime.now()** method for serializable. such as below code:\r\n\r\n    from datetime import datetime\r\n    \r\n    time_dict = {&#39;time&#39;: datetime.now().strftime(&#39;%Y-%m-%dT%H:%M:%S&#39;)}\r\n    sample_dict = {&#39;a&#39;: 1, &#39;b&#39;: 2}\r\n    sample_dict.update(time_dict)\r\n    sample_dict\r\nOutput:\r\n\r\n    Out[0]: {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;time&#39;: &#39;2017-10-31T15:16:30&#39;}\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1513903497, "answer_id": 47934587, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1513903497, "body_markdown": "https://github.com/django/django/blob/master/django/core/serializers/json.py\r\n\r\nA ported version which doesn&#39;t depend on Django:\r\n\r\n    import datetime\r\n    import decimal\r\n    import json\r\n    import uuid\r\n    \r\n    \r\n    class JSONEncoder(json.JSONEncoder):\r\n        &quot;&quot;&quot;JSONEncoder subclass that knows how to encode date/time, decimal types, and UUIDs.&quot;&quot;&quot;\r\n    \r\n        def default(self, o):\r\n            # See &quot;Date Time String Format&quot; in the ECMA-262 specification.\r\n            if isinstance(o, datetime.datetime):\r\n                r = o.isoformat()\r\n                if o.microsecond:\r\n                    r = r[:23] + r[26:]\r\n                if r.endswith(&#39;+00:00&#39;):\r\n                    r = r[:-6] + &#39;Z&#39;\r\n                return r\r\n            elif isinstance(o, datetime.date):\r\n                return o.isoformat()\r\n            elif isinstance(o, datetime.time):\r\n                if o.utcoffset() is not None:\r\n                    raise ValueError(&quot;JSON can&#39;t represent timezone-aware times.&quot;)\r\n                r = o.isoformat()\r\n                if o.microsecond:\r\n                    r = r[:12]\r\n                return r\r\n            elif isinstance(o, (decimal.Decimal, uuid.UUID)):\r\n                return str(o)\r\n            else:\r\n                return super(JSONEncoder, self).default(o)\r\n    \r\n    print(json.dumps(datetime.datetime.now(), cls=JSONEncoder))"}, {"tags": [], "down_vote_count": 0, "creation_date": 1519762547, "answer_id": 49017211, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1519764895, "last_edit_date": 1519764895, "body_markdown": "    def j_serial(o):     # self contained\r\n        from datetime import datetime, date\r\n        return str(o).split(&#39;.&#39;)[0] if isinstance(o, (datetime, date)) else None\r\n\r\nUsage of above utility:\r\n\r\n    import datetime\r\n    serial_d = j_serial(datetime.datetime.now())\r\n    if serial_d:\r\n        print(serial_d)  # output: 2018-02-28 02:23:15"}], "title": "How to overcome &quot;datetime.datetime not JSON serializable&quot;?", "view_count": 237416, "answer_count": 25, "code_snippet": ["<code>sample = {}\nsample['title'] = \"String\"\nsample['somedate'] = somedatetimehere\n</code>", "<code>jsonify(sample)</code>", "<code>TypeError: datetime.datetime(2012, 8, 8, 21, 46, 24, 862000) is not JSON serializable</code>", "<code>str(sample['somedate'])</code>", "<code>2012-08-08 21:46:24.862000</code>", "<code>from bson import json_util\nimport json\n\njson.dumps(anObject, default=json_util.default)\n</code>", "<code>json.loads(aJsonString, object_hook=json_util.object_hook)\n</code>", "<code>Django MongoDB</code>", "<code>datetime.datetime</code>", "<code>datetime.date</code>", "<code>from datetime import date, datetime\n\ndef json_serial(obj):\n    \"\"\"JSON serializer for objects not serializable by default json code\"\"\"\n\n    if isinstance(obj, (datetime, date)):\n        return obj.isoformat()\n    raise TypeError (\"Type %s not serializable\" % type(obj))\n</code>", "<code>datetime.datetime</code>", "<code>datetime.date</code>", "<code>.isoformat()</code>", "<code>from datetime import datetime\nfrom json import dumps\n\nprint dumps(datetime.now(), default=json_serial)\n</code>", "<code>json.JSONEncoder</code>", "<code>from datetime import datetime\nimport json\n\nclass DateTimeEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, datetime):\n            return o.isoformat()\n\n        return json.JSONEncoder.default(self, o)\n</code>", "<code>json.dumps(yourobj, cls=DateTimeEncoder)</code>", "<code>.isoformat()</code>", "<code>DjangoJSONEncoder</code>", "<code>return super(DateTimeEncoder, self).default(o)</code>", "<code>json.dumps(my_dictionary, indent=4, sort_keys=True, default=str)\n</code>", "<code>default</code>", "<code>str</code>", "<code>sample['somedate'] = str( datetime.now() )\n</code>", "<code>oDate = datetime.datetime.strptime(sDate, '%Y-%m-%d %H:%M:%S.%f')</code>", "<code>.now()</code>", "<code>.utcnow()</code>", "<code>def default(obj):\n    \"\"\"Default JSON serializer.\"\"\"\n    import calendar, datetime\n\n    if isinstance(obj, datetime.datetime):\n        if obj.utcoffset() is not None:\n            obj = obj - obj.utcoffset()\n        millis = int(\n            calendar.timegm(obj.timetuple()) * 1000 +\n            obj.microsecond / 1000\n        )\n        return millis\n    raise TypeError('Not sure how to serialize %s' % (obj,))\n</code>", "<code>import datetime, json\nprint json.dumps(datetime.datetime.now(), default=default)\n</code>", "<code>'1365091796124'\n</code>", "<code>millis=</code>", "<code>datetime.now()</code>", "<code>obj</code>", "<code>datetime.utcnow()</code>", "<code># -*- coding: utf-8 -*-\nimport json\n\n\nclass DatetimeEncoder(json.JSONEncoder):\n    def default(self, obj):\n        try:\n            return super(DatetimeEncoder, obj).default(obj)\n        except TypeError:\n            return str(obj)\n</code>", "<code>json.dumps(dictionnary, cls=DatetimeEncoder)\n</code>", "<code>isinstance(obj, datetime.datetime)</code>", "<code>str(obj)</code>", "<code>repr(obj)</code>", "<code>class DateTimeEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime.datetime):\n            encoded_object = list(obj.timetuple())[0:6]\n        else:\n            encoded_object =json.JSONEncoder.default(self, obj)\n        return encoded_object\n\nsample = {}\nsample['title'] = \"String\"\nsample['somedate'] = datetime.datetime.now()\n\nprint sample\nprint json.dumps(sample, cls=DateTimeEncoder)\n</code>", "<code>{'somedate': datetime.datetime(2013, 8, 1, 16, 22, 45, 890000), 'title': 'String'}\n{\"somedate\": [2013, 8, 1, 16, 22, 45], \"title\": \"String\"}\n</code>", "<code>import json\nimport datetime\n\njson.JSONEncoder.default = lambda self,obj: (obj.isoformat() if isinstance(obj, datetime.datetime) else None)\n</code>", "<code>json.dumps({'created':datetime.datetime.now()})\n</code>", "<code>def default(o):\n    if type(o) is datetime.date or type(o) is datetime.datetime:\n        return o.isoformat()\n\ndef jsondumps(o):\n    return json.dumps(o, default=default)\n</code>", "<code>jsondumps</code>", "<code>json.dumps</code>", "<code>&gt;&gt;&gt; jsondumps({'today': datetime.date.today()})\n'{\"today\": \"2013-07-30\"}'\n</code>", "<code>default</code>", "<code>def default(o):\n    if type(o) is datetime.date or type(o) is datetime.datetime:\n        return o.isoformat()\n    if type(o) is decimal.Decimal:\n        return float(o)\n</code>", "<code>enco = lambda obj: (\n    obj.isoformat()\n    if isinstance(obj, datetime.datetime)\n    or isinstance(obj, datetime.date)\n    else None\n)\n\njson.dumps({'date': datetime.datetime.now()}, default=enco)\n</code>", "<code>cls</code>", "<code>json.dumps</code>", "<code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; class ComplexEncoder(json.JSONEncoder):\n...     def default(self, obj):\n...         if isinstance(obj, complex):\n...             return [obj.real, obj.imag]\n...         return json.JSONEncoder.default(self, obj)\n...\n&gt;&gt;&gt; dumps(2 + 1j, cls=ComplexEncoder)\n'[2.0, 1.0]'\n&gt;&gt;&gt; ComplexEncoder().encode(2 + 1j)\n'[2.0, 1.0]'\n&gt;&gt;&gt; list(ComplexEncoder().iterencode(2 + 1j))\n['[', '2.0', ', ', '1.0', ']']\n</code>", "<code>v_dict = version.dict()\nv_dict['created_at'] = v_dict['created_at'].isoformat()\n</code>", "<code>from datetime import datetime\n\ntime_dict = {'time': datetime.now().strftime('%Y-%m-%dT%H:%M:%S')}\nsample_dict = {'a': 1, 'b': 2}\nsample_dict.update(time_dict)\nsample_dict\n</code>", "<code>Out[0]: {'a': 1, 'b': 2, 'time': '2017-10-31T15:16:30'}\n</code>", "<code>response = make_response(dumps(sample, cls=CustomEncoder))\nresponse.headers['Content-Type'] = 'application/json'\nresponse.headers['mimetype'] = 'application/json'\nreturn response\n</code>", "<code>from flask import make_response\nfrom json import JSONEncoder, dumps\n\n\nclass CustomEncoder(JSONEncoder):\n    def default(self, obj):\n        if set(['quantize', 'year']).intersection(dir(obj)):\n            return str(obj)\n        elif hasattr(obj, 'next'):\n            return list(obj)\n        return JSONEncoder.default(self, obj)\n\n@app.route('/get_reps/', methods=['GET'])\ndef get_reps():\n    sample = ['some text', &lt;datetime object&gt;, 123]\n    response = make_response(dumps({'result': sample}, cls=CustomEncoder))\n    response.headers['Content-Type'] = 'application/json'\n    response.headers['mimetype'] = 'application/json'\n    return response\n</code>", "<code>pymongo</code>", "<code>import calendar, datetime, json\n\ndef outputJSON(obj):\n    \"\"\"Default JSON serializer.\"\"\"\n\n    if isinstance(obj, datetime.datetime):\n        if obj.utcoffset() is not None:\n            obj = obj - obj.utcoffset()\n\n        return obj.strftime('%Y-%m-%d %H:%M:%S.%f')\n    return str(obj)\n\ndef inputJSON(obj):\n    newDic = {}\n\n    for key in obj:\n        try:\n            if float(key) == int(float(key)):\n                newKey = int(key)\n            else:\n                newKey = float(key)\n\n            newDic[newKey] = obj[key]\n            continue\n        except ValueError:\n            pass\n\n        try:\n            newDic[str(key)] = datetime.datetime.strptime(obj[key], '%Y-%m-%d %H:%M:%S.%f')\n            continue\n        except TypeError:\n            pass\n\n        newDic[str(key)] = obj[key]\n\n    return newDic\n\nx = {'Date': datetime.datetime.utcnow(), 34: 89.9, 12.3: 90, 45: 67, 'Extra': 6}\n\nprint x\n\nwith open('my_dict.json', 'w') as fp:\n    json.dump(x, fp, default=outputJSON)\n\nwith open('my_dict.json') as f:\n    my_dict = json.load(f, object_hook=inputJSON)\n\nprint my_dict\n</code>", "<code>{'Date': datetime.datetime(2013, 11, 8, 2, 30, 56, 479727), 34: 89.9, 45: 67, 12.3: 90, 'Extra': 6}\n{'Date': datetime.datetime(2013, 11, 8, 2, 30, 56, 479727), 34: 89.9, 45: 67, 12.3: 90, 'Extra': 6}\n</code>", "<code>{\"Date\": \"2013-11-08 02:30:56.479727\", \"34\": 89.9, \"45\": 67, \"12.3\": 90, \"Extra\": 6}\n</code>", "<code>TypeError: 'str' does not support the buffer interface</code>", "<code>'wb'</code>", "<code>'w'</code>", "<code>'0000891618-05-000338'</code>", "<code>from datetime import datetime\nimport json\n\nfrom pytz import timezone\nimport pytz\n\n\ndef json_dt_serializer(obj):\n    \"\"\"JSON serializer, by macm.\n    \"\"\"\n    rsp = dict()\n    if isinstance(obj, datetime):\n        rsp['day'] = obj.day\n        rsp['hour'] = obj.hour\n        rsp['microsecond'] = obj.microsecond\n        rsp['minute'] = obj.minute\n        rsp['month'] = obj.month\n        rsp['second'] = obj.second\n        rsp['year'] = obj.year\n        rsp['tzinfo'] = str(obj.tzinfo)\n        return rsp\n    raise TypeError(\"Type not serializable\")\n\n\ndef json_dt_deserialize(obj):\n    \"\"\"JSON deserialize from json_dt_serializer, by macm.\n    \"\"\"\n    if isinstance(obj, str):\n        obj = json.loads(obj)\n    tzone = timezone(obj['tzinfo'])\n    tmp_dt = datetime(obj['year'],\n                      obj['month'],\n                      obj['day'],\n                      hour=obj['hour'],\n                      minute=obj['minute'],\n                      second=obj['second'],\n                      microsecond=obj['microsecond'])\n    loc_dt = tzone.localize(tmp_dt)\n    deserialize = loc_dt.astimezone(tzone)\n    return deserialize    \n</code>", "<code># Tests\nnow = datetime.now(pytz.utc)\n\n# Using this solution\nrsp = json_dt_serializer(now)\ntmp = json_dt_deserialize(rsp)\nassert tmp == now\nassert isinstance(tmp, datetime) == True\nassert isinstance(now, datetime) == True\n\n# using default from json.dumps\ntmp = json.dumps(datetime.now(pytz.utc), default=json_dt_serializer)\nrsp = json_dt_deserialize(tmp)\nassert isinstance(rsp, datetime) == True\n\n# Lets try another timezone\neastern = timezone('US/Eastern')\nnow = datetime.now(eastern)\nrsp = json_dt_serializer(now)\ntmp = json_dt_deserialize(rsp)\n\nprint(tmp)\n# 2015-10-22 09:18:33.169302-04:00\n\nprint(now)\n# 2015-10-22 09:18:33.169302-04:00\n\n# Wow, Works!\nassert tmp == now\n</code>", "<code>Class Puppy(Base):\n    ...\n    @property\n    def serialize(self):\n        return { 'id':self.id,\n                 'date_birth':self.date_birth,\n                  ...\n                }\n</code>", "<code>                  ...\n                 'date_birth':self.date_birth.isoformat(),\n                  ...\n</code>", "<code>date</code>", "<code>string</code>", "<code>date = str(datetime.datetime(somedatetimehere)) \n</code>", "<code>for key,val in sample.items():\n    if isinstance(val, datetime):\n        sample[key] = '{:%Y-%m-%d %H:%M:%S}'.format(val) #you can add different formating here\njson.dumps(sample)\n</code>", "<code>from datetime import datetime\nfrom json_tricks import dumps\nfoo = {'title': 'String', 'datetime': datetime(2012, 8, 8, 21, 46, 24, 862000)}\ndumps(foo)\n</code>", "<code>{\"title\": \"String\", \"datetime\": {\"__datetime__\": null, \"year\": 2012, \"month\": 8, \"day\": 8, \"hour\": 21, \"minute\": 46, \"second\": 24, \"microsecond\": 862000}}\n</code>", "<code>`pip install json_tricks`\n</code>", "<code>json_tricks</code>", "<code>json</code>", "<code>json_tricks</code>", "<code>import datetime\nimport decimal\nimport json\nimport uuid\n\n\nclass JSONEncoder(json.JSONEncoder):\n    \"\"\"JSONEncoder subclass that knows how to encode date/time, decimal types, and UUIDs.\"\"\"\n\n    def default(self, o):\n        # See \"Date Time String Format\" in the ECMA-262 specification.\n        if isinstance(o, datetime.datetime):\n            r = o.isoformat()\n            if o.microsecond:\n                r = r[:23] + r[26:]\n            if r.endswith('+00:00'):\n                r = r[:-6] + 'Z'\n            return r\n        elif isinstance(o, datetime.date):\n            return o.isoformat()\n        elif isinstance(o, datetime.time):\n            if o.utcoffset() is not None:\n                raise ValueError(\"JSON can't represent timezone-aware times.\")\n            r = o.isoformat()\n            if o.microsecond:\n                r = r[:12]\n            return r\n        elif isinstance(o, (decimal.Decimal, uuid.UUID)):\n            return str(o)\n        else:\n            return super(JSONEncoder, self).default(o)\n\nprint(json.dumps(datetime.datetime.now(), cls=JSONEncoder))\n</code>", "<code>def externalize(model_obj):\n  keys = model_obj._meta.get_all_field_names() \n  data = {}\n  for key in keys:\n    if key == 'date_time':\n      date_time_obj = getattr(model_obj, key)\n      data[key] = date_time_obj.strftime(\"%A %d. %B %Y\")\n    else:\n      data[key] = getattr(model_obj, key)\n  return data\n</code>", "<code>#!/usr/bin/python\nimport datetime,json\n\nsampledict = {}\nsampledict['a'] = \"some string\"\nsampledict['b'] = datetime.datetime.now()\n\nprint sampledict   # output : {'a': 'some string', 'b': datetime.datetime(2017, 4, 15, 5, 15, 34, 652996)}\n\n#print json.dumps(sampledict)\n\n'''\noutput : \n\nTraceback (most recent call last):\n  File \"./jsonencodedecode.py\", line 10, in &lt;module&gt;\n    print json.dumps(sampledict)\n  File \"/usr/lib/python2.7/json/__init__.py\", line 244, in dumps\n    return _default_encoder.encode(obj)\n  File \"/usr/lib/python2.7/json/encoder.py\", line 207, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File \"/usr/lib/python2.7/json/encoder.py\", line 270, in iterencode\n    return _iterencode(o, 0)\n  File \"/usr/lib/python2.7/json/encoder.py\", line 184, in default\n    raise TypeError(repr(o) + \" is not JSON serializable\")\nTypeError: datetime.datetime(2017, 4, 15, 5, 16, 17, 435706) is not JSON serializable\n\n\n'''\n\nsampledict['b'] = datetime.datetime.now().strftime(\"%B %d, %Y %H:%M %p\")\n\nafterdump = json.dumps(sampledict)\n\nprint afterdump  #output : {\"a\": \"some string\", \"b\": \"April 15, 2017 05:18 AM\"}\n\nprint type(afterdump) #&lt;type 'str'&gt;\n\n\nafterloads = json.loads(afterdump) \n\nprint afterloads # output : {u'a': u'some string', u'b': u'April 15, 2017 05:18 AM'}\n\n\nprint type(afterloads) # output :&lt;type 'dict'&gt; \n</code>", "<code>def j_serial(o):     # self contained\n    from datetime import datetime, date\n    return str(o).split('.')[0] if isinstance(o, (datetime, date)) else None\n</code>", "<code>import datetime\nserial_d = j_serial(datetime.datetime.now())\nif serial_d:\n    print(serial_d)  # output: 2018-02-28 02:23:15\n</code>"], "path": "stack.django"}, {"tags": ["python", "pip"], "creation_date": 1361560894, "body_markdown": "Is it possible to install packages using pip from the local filesystem?\r\n\r\nI have run `python setup.py sdist` for my package, which has created the appropriate tar.gz file. This file is stored on my system at `/srv/pkg/mypackage/mypackage-0.1.0.tar.gz`.\r\n\r\nNow in a virtual environment I would like to install packages either coming from pypi or from the specific local location `/srv/pkg`.\r\n\r\nIs this possible?\r\n\r\n**PS**\r\nI know that I can specify `pip install /srv/pkg/mypackage/mypackage-0.1.0.tar.gz`. That will work, but I am talking about using the `/srv/pkg` location as another place for pip to search if I typed `pip install mypackage`.", "last_edit_date": 1361564912, "up_vote_count": 174, "link": "https://stackoverflow.com/questions/15031694/installing-python-packages-from-local-file-system-folder-with-pip", "_childDocuments_": [{"tags": [], "down_vote_count": 3, "creation_date": 1361561529, "answer_id": 15031843, "path": "stack.django.answer", "score": 74, "up_vote_count": 77, "is_accepted": true, "last_activity_date": 1422664923, "last_edit_date": 1422664923, "body_markdown": "I am pretty sure that what you are looking for is called ``--find-links`` option.\r\n\r\nThough you might need to generate a dummy ``index.html`` for your local package index which lists the links to all packages. This tool helps:\r\n\r\nhttps://github.com/wolever/pip2pi\r\n\r\n"}, {"tags": [], "down_vote_count": 4, "creation_date": 1384765841, "answer_id": 20043907, "path": "stack.django.answer", "score": 289, "up_vote_count": 293, "is_accepted": false, "last_activity_date": 1384765841, "body_markdown": "What about::\r\n\r\n    pip install --help\r\n    ...\r\n      -e, --editable &lt;path/url&gt;   Install a project in editable mode (i.e. setuptools\r\n                                  &quot;develop mode&quot;) from a local project path or a VCS url.\r\n\r\neg, `pip install -e /srv/pkg`\r\n\r\nwhere /srv/pkg is the top-level directory where &#39;setup.py&#39; can be found."}, {"tags": [], "down_vote_count": 0, "creation_date": 1413415028, "answer_id": 26393695, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1413415028, "last_edit_date": 1495539204, "body_markdown": "This is the solution that I ended up using:\r\n\r\n    import pip\r\n    \r\n    \r\n    def install(package):\r\n        # Debugging\r\n        # pip.main([&quot;install&quot;, &quot;--pre&quot;, &quot;--upgrade&quot;, &quot;--no-index&quot;,\r\n        #         &quot;--find-links=.&quot;, package, &quot;--log-file&quot;, &quot;log.txt&quot;, &quot;-vv&quot;])\r\n        pip.main([&quot;install&quot;, &quot;--upgrade&quot;, &quot;--no-index&quot;, &quot;--find-links=.&quot;, package])\r\n    \r\n    \r\n    if __name__ == &quot;__main__&quot;:\r\n        install(&quot;mypackagename&quot;)\r\n        raw_input(&quot;Press Enter to Exit...\\n&quot;)\r\n\r\nI pieced this together from [pip install examples][1] as well as from [Rikard&#39;s answer][2] on [another question][3]. The &quot;--pre&quot; argument lets you install non-production versions. The &quot;--no-index&quot; argument avoids searching the PyPI indexes. The &quot;--find-links=.&quot; argument searches in the local folder (this can be relative or absolute). I used the &quot;--log-file&quot;, &quot;log.txt&quot;, and &quot;-vv&quot; arguments for debugging. The &quot;--upgrade&quot; argument lets you install newer versions over older ones.\r\n\r\nI also found a good way to uninstall them. This is useful when you have several different Python environments. It&#39;s the same basic format, just using &quot;uninstall&quot; instead of &quot;install&quot;, with a safety measure to prevent unintended uninstalls:\r\n\r\n    import pip\r\n    \r\n    \r\n    def uninstall(package):\r\n        response = raw_input(&quot;Uninstall &#39;%s&#39;? [y/n]:\\n&quot; % package)\r\n        if &quot;y&quot; in response.lower():\r\n            # Debugging\r\n            # pip.main([&quot;uninstall&quot;, package, &quot;-vv&quot;])\r\n            pip.main([&quot;uninstall&quot;, package])\r\n        pass\r\n    \r\n    \r\n    if __name__ == &quot;__main__&quot;:\r\n        uninstall(&quot;mypackagename&quot;)\r\n        raw_input(&quot;Press Enter to Exit...\\n&quot;)\r\n\r\nThe local folder contains these files: install.py, uninstall.py, mypackagename-1.0.zip\r\n\r\n\r\n  [1]: http://pip.readthedocs.org/en/latest/reference/pip_install.html#pip-install-examples\r\n  [2]: https://stackoverflow.com/a/15950647/1267255\r\n  [3]: https://stackoverflow.com/questions/12332975/installing-python-module-within-code"}, {"tags": [], "down_vote_count": 0, "creation_date": 1441107523, "answer_id": 32330650, "path": "stack.django.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1441107523, "body_markdown": "I am installing pyfuzzy.  It&#39;s not in PyPI, &quot;No matching distribution found for pyfuzzy&quot;.  However, I try the accepted answer \r\n\r\n    pip install  --no-index --find-links=file:///Users/victor/Downloads/pyfuzzy-0.1.0 pyfuzzy\r\n\r\nIt cannot work as well. The result is:\r\n\r\n&gt; Ignoring indexes: https://pypi.python.org/simple\r\nCollecting pyfuzzy\r\n  Could not find a version that satisfies the requirement pyfuzzy (from versions: )\r\nNo matching distribution found for pyfuzzy\r\n\r\n\r\nAt last , I find a simple good way.  https://pip.pypa.io/en/latest/reference/pip_install.html\r\n\r\n\r\n    Install a particular source archive file.\r\n    $ pip install ./downloads/SomePackage-1.0.4.tar.gz\r\n    $ pip install http://my.package.repo/SomePackage-1.0.4.zip\r\n\r\npip install ../pyfuzzy-0.1.0.tar.gz.   Now works well.  Hope help you.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1499770547, "answer_id": 45032558, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1499770884, "last_edit_date": 1499770884, "body_markdown": "An option [--find-links](https://pip.readthedocs.io/en/latest/reference/pip_install/#pip-install-examples) does the job and it works from `requirements.txt` file! \r\n\r\nYou can put package archives in some folder and take the latest one without changing the requirements file, for example `requirements`:\r\n\r\n    .\r\n    \u2514\u2500\u2500\u2500requirements.txt\r\n    \u2514\u2500\u2500\u2500requirements\r\n        \u251c\u2500\u2500\u2500foo_bar-0.1.5-py2.py3-none-any.whl\r\n        \u251c\u2500\u2500\u2500foo_bar-0.1.6-py2.py3-none-any.whl\r\n        \u251c\u2500\u2500\u2500wiz_bang-0.7-py2.py3-none-any.whl\r\n        \u251c\u2500\u2500\u2500wiz_bang-0.8-py2.py3-none-any.whl\r\n        \u251c\u2500\u2500\u2500base.txt\r\n        \u251c\u2500\u2500\u2500local.txt\r\n        \u2514\u2500\u2500\u2500production.txt\r\n\r\nNow in `requirements/base.txt` put:\r\n\r\n    --find-links=requirements\r\n    foo_bar\r\n    wiz_bang&gt;=0.8\r\n    \r\n\r\nA neat way to update proprietary packages, just drop new one in the folder\r\n\r\nIn this way you can install packages from `local folder` AND `pypi` with the same single call: `pip install -r requirements/production.txt`\r\n\r\nPS. See my [cokiecutter-djangopackage](https://github.com/wooyek/cookiecutter-djangopackage/tree/wooyek/%7B%7Bcookiecutter.repo_name%7D%7D/requirements) fork to see how to split requirements and use folder based requirements organization.\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1505299503, "answer_id": 46195453, "path": "stack.django.answer", "score": 24, "up_vote_count": 25, "is_accepted": false, "last_activity_date": 1515490229, "last_edit_date": 1515490229, "body_markdown": "This is very simple. The command you need is:\r\n\r\n    pip install -e &lt;DIRECTORY&gt;\r\n\r\n\r\nNote that the directory *must* have a `setup.py` file in it"}], "title": "Installing Python packages from local file system folder with pip", "view_count": 164869, "answer_count": 6, "code_snippet": ["<code>python setup.py sdist</code>", "<code>/srv/pkg/mypackage/mypackage-0.1.0.tar.gz</code>", "<code>/srv/pkg</code>", "<code>pip install /srv/pkg/mypackage/mypackage-0.1.0.tar.gz</code>", "<code>/srv/pkg</code>", "<code>pip install mypackage</code>", "<code>pip install &lt;Path-to-WHL-file&gt;</code>", "<code>--find-links</code>", "<code>index.html</code>", "<code>pip install mypackage --no-index --find-links file:///srv/pkg/mypackage</code>", "<code>easy_install --allow-hosts=None --find-links file:///srv/pkg/mypackage mypackage</code>", "<code>pip install --help\n...\n  -e, --editable &lt;path/url&gt;   Install a project in editable mode (i.e. setuptools\n                              \"develop mode\") from a local project path or a VCS url.\n</code>", "<code>pip install -e /srv/pkg</code>", "<code>--editable</code>", "<code>pip install -e &lt;DIRECTORY&gt;\n</code>", "<code>setup.py</code>", "<code>import pip\n\n\ndef install(package):\n    # Debugging\n    # pip.main([\"install\", \"--pre\", \"--upgrade\", \"--no-index\",\n    #         \"--find-links=.\", package, \"--log-file\", \"log.txt\", \"-vv\"])\n    pip.main([\"install\", \"--upgrade\", \"--no-index\", \"--find-links=.\", package])\n\n\nif __name__ == \"__main__\":\n    install(\"mypackagename\")\n    raw_input(\"Press Enter to Exit...\\n\")\n</code>", "<code>import pip\n\n\ndef uninstall(package):\n    response = raw_input(\"Uninstall '%s'? [y/n]:\\n\" % package)\n    if \"y\" in response.lower():\n        # Debugging\n        # pip.main([\"uninstall\", package, \"-vv\"])\n        pip.main([\"uninstall\", package])\n    pass\n\n\nif __name__ == \"__main__\":\n    uninstall(\"mypackagename\")\n    raw_input(\"Press Enter to Exit...\\n\")\n</code>", "<code>pip install  --no-index --find-links=file:///Users/victor/Downloads/pyfuzzy-0.1.0 pyfuzzy\n</code>", "<code>Install a particular source archive file.\n$ pip install ./downloads/SomePackage-1.0.4.tar.gz\n$ pip install http://my.package.repo/SomePackage-1.0.4.zip\n</code>", "<code>requirements.txt</code>", "<code>requirements</code>", "<code>.\n\u2514\u2500\u2500\u2500requirements.txt\n\u2514\u2500\u2500\u2500requirements\n    \u251c\u2500\u2500\u2500foo_bar-0.1.5-py2.py3-none-any.whl\n    \u251c\u2500\u2500\u2500foo_bar-0.1.6-py2.py3-none-any.whl\n    \u251c\u2500\u2500\u2500wiz_bang-0.7-py2.py3-none-any.whl\n    \u251c\u2500\u2500\u2500wiz_bang-0.8-py2.py3-none-any.whl\n    \u251c\u2500\u2500\u2500base.txt\n    \u251c\u2500\u2500\u2500local.txt\n    \u2514\u2500\u2500\u2500production.txt\n</code>", "<code>requirements/base.txt</code>", "<code>--find-links=requirements\nfoo_bar\nwiz_bang&gt;=0.8\n</code>", "<code>local folder</code>", "<code>pypi</code>", "<code>pip install -r requirements/production.txt</code>"], "path": "stack.django"}, {"tags": ["javascript", "localization", "internationalization"], "creation_date": 1245928091, "body_markdown": "I have been trying to detect the browser language preference using JavaScript.\r\n\r\nIf I set the browser language in IE in `Tools&gt;Internet Options&gt;General&gt;Languages`, how do I read this value using JavaScript?\r\n\r\nSame problem for Firefox. I&#39;m not able to detect the setting for `tools&gt;options&gt;content&gt;languages` using `navigator.language`.\r\n\r\nUsing  `navigator.userLanguage`  , it detects the setting done thru\r\n`Start&gt;ControlPanel&gt;RegionalandLanguageOptions&gt;Regional Options` tab.\r\n\r\nI have tested with `navigator.browserLanguage` and `navigator.systemLanguage` but neither  returns the value for the first setting(`Tools&gt;InternetOptions&gt;General&gt;Languages`)\r\n\r\nI found a &lt;a href=&quot;http://www.velocityreviews.com/forums/t99655-save-way-to-detect-browser-language.html&quot;&gt;link&lt;/a&gt; which discusses this in detail, but the question remains unanswered :(\r\n", "last_edit_date": 1245930630, "up_vote_count": 350, "link": "https://stackoverflow.com/questions/1043339/javascript-for-detecting-browser-language-preference", "_childDocuments_": [{"tags": [], "down_vote_count": 3, "creation_date": 1245930021, "answer_id": 1043451, "path": "stack.bower.answer", "score": 14, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1405051369, "last_edit_date": 1405051369, "body_markdown": "`navigator.userLanguage` for IE\r\n\r\n`window.navigator.language` for firefox/opera/safari"}, {"tags": [], "down_vote_count": 1, "creation_date": 1245930401, "answer_id": 1043479, "path": "stack.bower.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1363358573, "last_edit_date": 1363358573, "body_markdown": "I can&#39;t find a single reference that state that it&#39;s possible without involving the serverside.\r\n\r\nMSDN on:\r\n\r\n - navigator.[browserLanguage][1]\r\n - navigator.[systemLanguage][2]\r\n - navigator.[userLanguage][3]\r\n\r\nFrom browserLanguage:\r\n\r\n&gt; In Microsoft Internet Explorer 4.0 and\r\n&gt; earlier, the browserLanguage property\r\n&gt; reflects the language of the installed\r\n&gt; browser&#39;s user interface. For example,\r\n&gt; if you install a Japanese version of\r\n&gt; Windows Internet Explorer on an\r\n&gt; English operating system,\r\n&gt; browserLanguage would be ja.\r\n&gt; \r\n&gt; In Internet Explorer 5 and later,\r\n&gt; however, the browserLanguage property\r\n&gt; reflects the language of the operating\r\n&gt; system regardless of the installed\r\n&gt; language version of Internet Explorer.\r\n&gt; However, if Microsoft Windows 2000\r\n&gt; MultiLanguage version is installed,\r\n&gt; the browserLanguage property indicates\r\n&gt; the language set in the operating\r\n&gt; system&#39;s current menus and dialogs, as\r\n&gt; found in the Regional Options of the\r\n&gt; Control Panel. For example, if you\r\n&gt; install a Japanese version of Internet\r\n&gt; Explorer 5 on an English (United\r\n&gt; Kingdom) operating system,\r\n&gt; browserLanguage would be en-gb. If you\r\n&gt; install Windows 2000 MultiLanguage\r\n&gt; version and set the language of the\r\n&gt; menus and dialogs to French,\r\n&gt; browserLanguage would be fr, even\r\n&gt; though you have a Japanese version of\r\n&gt; Internet Explorer.\r\n&gt; \r\n&gt; \r\n&gt;&gt; Note  This property does not indicate\r\n&gt;&gt; the language or languages set by the\r\n&gt;&gt; user in Language Preferences, located\r\n&gt;&gt; in the Internet Options dialog box.\r\n\r\nFurthermore, it looks like `browserLanguage` is deprecated cause IE8 doesn&#39;t list it\r\n\r\n  [1]: http://msdn.microsoft.com/en-us/library/ms533542(VS.85).aspx\r\n  [2]: http://msdn.microsoft.com/en-us/library/ms534653(VS.85).aspx\r\n  [3]: http://msdn.microsoft.com/en-us/library/ms534713(VS.85).aspx"}, {"tags": [], "down_vote_count": 1, "creation_date": 1257849387, "answer_id": 1707001, "path": "stack.bower.answer", "score": 17, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1257849387, "body_markdown": "There is no decent way to get that setting, at least not something browser independent.\r\n\r\nBut the server has that info, because it is part of the HTTP request header (the Accept-Language field, see [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4][1])\r\n\r\nSo the only reliable way is to get an answer back from the server. You will need something that runs on the server (like .asp, .jsp, .php, CGI) and that &quot;thing&quot; can return that info.\r\nGood examples here: [http://www.developershome.com/wap/detection/detection.asp?page=readHeader][2]\r\n\r\n\r\n  [1]: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\r\n  [2]: http://www.developershome.com/wap/detection/detection.asp?page=readHeader"}, {"tags": [], "down_vote_count": 4, "creation_date": 1280152331, "answer_id": 3335420, "path": "stack.bower.answer", "score": 241, "up_vote_count": 245, "is_accepted": true, "last_activity_date": 1438680564, "last_edit_date": 1438680564, "body_markdown": "I think the main problem here is that the browser settings don&#39;t actually affect the `navigator.language` property that is obtained via javascript. \r\n\r\nWhat they do affect is the HTTP &#39;Accept-Language&#39; header, but it appears this value is not available through javascript at all. (Probably why @anddoutoi states he can&#39;t find a reference for it that doesn&#39;t involve server side.)\r\n\r\nI have coded a workaround: I&#39;ve knocked up a google app engine script at http://ajaxhttpheaders.appspot.com that will return you the HTTP request headers via JSONP.\r\n\r\n(Note: this is a hack only to be used if you do not have a back end available that can do this for you. In general you should not be making calls to  third party hosted javascript files in your pages unless you have a very high level of trust in the host.)\r\n\r\nI intend to leave it there in perpetuity so feel free to use it in your code.\r\n\r\nHere&#39;s some example code (in jQuery) for how you might use it\r\n\r\n    $.ajax({ \r\n        url: &quot;http://ajaxhttpheaders.appspot.com&quot;, \r\n        dataType: &#39;jsonp&#39;, \r\n        success: function(headers) {\r\n            language = headers[&#39;Accept-Language&#39;];\r\n            nowDoSomethingWithIt(language);\r\n        }\r\n    });\r\n\r\nHope someone finds this useful.\r\n\r\nEdit: I have written a small jQuery plugin on github that wraps this functionality: https://github.com/dansingerman/jQuery-Browser-Language\r\n\r\nEdit 2: As requested here is the code that is running on AppEngine (super trivial really):\r\n\r\n\r\n    class MainPage(webapp.RequestHandler):\r\n        def get(self):\r\n            headers = self.request.headers\r\n            callback = self.request.get(&#39;callback&#39;)\r\n    \r\n            if callback:\r\n              self.response.headers[&#39;Content-Type&#39;] = &#39;application/javascript&#39;\r\n              self.response.out.write(callback + &quot;(&quot;)\r\n              self.response.out.write(headers)\r\n              self.response.out.write(&quot;)&quot;)\r\n            else:\r\n              self.response.headers[&#39;Content-Type&#39;] = &#39;text/plain&#39;\r\n              self.response.out.write(&quot;I need a callback=&quot;)\r\n    \r\n    application = webapp.WSGIApplication(\r\n                                         [(&#39;/&#39;, MainPage)],\r\n                                         debug=False)\r\n    \r\n    def main():\r\n        run_wsgi_app(application)\r\n    \r\n    if __name__ == &quot;__main__&quot;:\r\n        main()\r\n\r\nEdit3: Have open sourced the app engine code here: https://github.com/dansingerman/app-engine-headers"}, {"tags": [], "down_vote_count": 9, "creation_date": 1288715158, "answer_id": 4079798, "path": "stack.bower.answer", "score": 210, "up_vote_count": 219, "is_accepted": false, "last_activity_date": 1420549263, "last_edit_date": 1420549263, "body_markdown": "    var language = window.navigator.userLanguage || window.navigator.language;\r\n    alert(language); //works IE/SAFARI/CHROME/FF\r\n\r\n`window.navigator.userLanguage` is IE only and it&#39;s the language set in **Windows Control Panel - Regional Options** and NOT browser language, but you could suppose that a user using a machine with Window Regional settings set to France is probably a French user.\r\n\r\n`navigator.language` is FireFox and all other browser.\r\n\r\nSome language code: `&#39;it&#39;` = italy, `&#39;en-US&#39;` = english US, etc.\r\n\r\n---\r\n\r\nAs pointed out by *rcoup* and *The WebMacheter* in comments below, this workaround won&#39;t let you discriminate among English dialects when users are viewing website in browsers other than IE.\r\n\r\n*`window.navigator.language` (Chrome/FF/Safari) returns always browser language and not browser&#39;s preferred language, but: &quot;it&#39;s pretty common for English speakers (gb, au, nz, etc) to have an en-us version of Firefox/Chrome/Safari.&quot; Hence `window.navigator.language` will still return `en-US` even if the user preferred language is `en-GB`.*"}, {"tags": [], "down_vote_count": 1, "creation_date": 1320482396, "answer_id": 8019086, "path": "stack.bower.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1320482396, "body_markdown": "DanSingerman has a very good solution for this question.\r\n\r\nThe only reliable source for the language is in the HTTP-request header.\r\nSo you need a server-side script to reply the request-header or at least the `Accept-Language` field back to you.\r\n\r\nHere is a very simple Node.js server which should be compatible with DanSingermans jQuery plugin.\r\n\r\n    var http = require(&#39;http&#39;);\r\n    http.createServer(function (req, res) {\r\n      res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\r\n      res.end(JSON.stringify(req.headers));\r\n    }).listen(80,&#39;0.0.0.0&#39;);\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1352967597, "answer_id": 13393716, "path": "stack.bower.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1352967597, "body_markdown": "For what it&#39;s worth, Wikimedia&#39;s Universal Language Selector library has hooks for doing this:\r\nhttps://www.mediawiki.org/wiki/Extension:UniversalLanguageSelector\r\n\r\nSee the function getFrequentLanguageList in resources/js/ext.uls.init.js . Direct link:\r\nhttps://gerrit.wikimedia.org/r/gitweb?p=mediawiki/extensions/UniversalLanguageSelector.git;a=blob;f=resources/js/ext.uls.init.js;hb=HEAD\r\n\r\nIt still depends on the server, or more specifically, the MediaWiki API. The reason I&#39;m showing it is that it may provide a good example of getting all the useful information about the user&#39;s language: browser language, Accept-Language, geolocation (with getting country/language info from the CLDR), and of course, user&#39;s own site preferences."}, {"tags": [], "down_vote_count": 2, "creation_date": 1391642730, "answer_id": 21590840, "path": "stack.bower.answer", "score": 2, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1402977864, "last_edit_date": 1402977864, "body_markdown": "Dan Singerman&#39;s answer has an issue that the header fetched has to be used right away, due to the asynchronous nature of jQuery&#39;s ajax.  However, with his google app server, I wrote the following, such that the header is set as part of the initial set up and can be used at later time.\r\n\r\n\r\n    &lt;html&gt;\r\n    &lt;head&gt;\r\n    &lt;script&gt;\r\n    \r\n        var bLocale=&#39;raw&#39;; // can be used at any other place\r\n    \r\n        function processHeaders(headers){\r\n            bLocale=headers[&#39;Accept-Language&#39;];\r\n            comma=bLocale.indexOf(&#39;,&#39;);\r\n            if(comma&gt;0) bLocale=bLocale.substring(0, comma);\r\n        }\r\n    \r\n    &lt;/script&gt;\r\n    \r\n    &lt;script src=&quot;jquery-1.11.0.js&quot;&gt;&lt;/script&gt;\r\n    \r\n    &lt;script type=&quot;application/javascript&quot; src=&quot;http://ajaxhttpheaders.appspot.com?callback=processHeaders&quot;&gt;&lt;/script&gt;\r\n    \r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n    \r\n    &lt;h1 id=&quot;bLocale&quot;&gt;Should be the browser locale here&lt;/h1&gt;\r\n    \r\n    &lt;/body&gt;\r\n    \r\n    &lt;script&gt;\r\n    \r\n        $(&quot;#bLocale&quot;).text(bLocale);\r\n    \r\n    &lt;/script&gt;\r\n    &lt;/html&gt;\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1409566823, "answer_id": 25603630, "path": "stack.bower.answer", "score": 167, "up_vote_count": 169, "is_accepted": false, "last_activity_date": 1457468687, "last_edit_date": 1457468687, "body_markdown": "Update of year 2014.\r\n\r\nNow there is a way to get Accept-Languages in Firefox and Chrome using **&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage.languages&quot;&gt;navigator.languages&lt;/a&gt;**  (works in Chrome &gt;= 32 and Firefox &gt;= 32)\r\n\r\nAlso, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage.language&quot;&gt;navigator.language&lt;/a&gt; in Firefox these years reflects most preferred language of content, not language of UI. But since this notion is yet to be supported by other browsers, it is not very useful.\r\n\r\nSo, to get most preferred content language when possible, and use UI language as fallback:\r\n\r\n    navigator.languages\r\n        ? navigator.languages[0]\r\n        : (navigator.language || navigator.userLanguage)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1411139146, "answer_id": 25936993, "path": "stack.bower.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1411139146, "body_markdown": "If you only need to support certain modern browsers then you can now use:\r\n\r\n    navigator.languages\r\n\r\nwhich returns an array of the user&#39;s language preferences in the order specified by the user.\r\n\r\nAs of now (Sep 2014) this works on:\r\nChrome (v37), \r\nFirefox (v32) and \r\nOpera (v24)\r\n\r\nBut not on:\r\nIE (v11)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1413356018, "answer_id": 26376233, "path": "stack.bower.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1413356018, "body_markdown": "If you have control of a backend and are using django, a 4 line implementation of Dan&#39;s idea is:\r\n\r\n    def get_browser_lang(request):\r\n    if request.META.has_key(&#39;HTTP_ACCEPT_LANGUAGE&#39;):\r\n        return JsonResponse({&#39;response&#39;: request.META[&#39;HTTP_ACCEPT_LANGUAGE&#39;]})\r\n    else:\r\n        return JsonResponse({&#39;response&#39;: settings.DEFAULT_LANG})\r\n\r\nthen in urls.py:\r\n\r\n    url(r&#39;^browserlang/$&#39;, views.get_browser_lang, name=&#39;get_browser_lang&#39;),\r\n\r\nand on the front end:\r\n\r\n    $.get(lg(&#39;SERVER&#39;) + &#39;browserlang/&#39;, function(data){\r\n        var lang_code = data.response.split(&#39;,&#39;)[0].split(&#39;;&#39;)[0].split(&#39;-&#39;)[0];\r\n    });\r\n\r\n(you have to set DEFAULT_LANG in settings.py of course)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1415801781, "answer_id": 26889118, "path": "stack.bower.answer", "score": 27, "up_vote_count": 27, "is_accepted": false, "last_activity_date": 1415801781, "body_markdown": "    &lt;script type=&quot;text/javascript&quot;&gt;\r\n    var lang = window.navigator.languages ? window.navigator.languages[0] : null;\r\n        lang = lang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\r\n    if (lang.indexOf(&#39;-&#39;) !== -1)\r\n        lang = lang.split(&#39;-&#39;)[0];\r\n    \r\n    if (lang.indexOf(&#39;_&#39;) !== -1)\r\n        lang = lang.split(&#39;_&#39;)[0];\r\n    &lt;/script&gt;\r\n\r\nI only needed the primary component for my needs, but you can easily just use the full string. Works with latest Chrome, Firefox, Safari and IE10+."}, {"tags": [], "down_vote_count": 1, "creation_date": 1416214107, "answer_id": 26968718, "path": "stack.bower.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1416214107, "last_edit_date": 1495541454, "body_markdown": "Based on the answer here https://stackoverflow.com/questions/220231/accessing-the-web-pages-http-headers-in-javascript I built the following script to get the browser language:\r\n\r\n    var req = new XMLHttpRequest();\r\n    req.open(&#39;GET&#39;, document.location, false);\r\n    req.send(null);\r\n    var headers = req.getAllResponseHeaders().toLowerCase();\r\n    var contentLanguage = headers.match( /^content-language\\:(.*)$/gm );\r\n    if(contentLanguage[0]) {\r\n        return contentLanguage[0].split(&quot;:&quot;)[1].trim().toUpperCase();\r\n    }\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1424699101, "answer_id": 28675190, "path": "stack.bower.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1424699101, "body_markdown": "If you don&#39;t want to rely on an external server and you have one of your own you can use a simple PHP script to achieve the same behavior as @DanSingerman answer.\r\n\r\n**languageDetector.php**:\r\n\r\n    &lt;?php\r\n    $lang = substr($_SERVER[&#39;HTTP_ACCEPT_LANGUAGE&#39;], 0, 2);\r\n    echo json_encode($lang);\r\n    ?&gt;\r\n\r\nAnd just change this lines from the jQuery script:\r\n\r\n    url: &quot;languageDetector.php&quot;,\r\n    dataType: &#39;json&#39;,\r\n    success: function(language) {\r\n        nowDoSomethingWithIt(language);\r\n    }\r\n\r\n "}, {"tags": [], "down_vote_count": 0, "creation_date": 1426614260, "answer_id": 29106129, "path": "stack.bower.answer", "score": 38, "up_vote_count": 38, "is_accepted": false, "last_activity_date": 1495047281, "last_edit_date": 1495047281, "body_markdown": "I came across this piece of code to detect browser&#39;s language in [Angular Translate module][1], which you can find the source [here][2]. I slightly modified the code by replacing angular.isArray with Array.isArray to make it independent of Angular library.\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\nvar getFirstBrowserLanguage = function () {\r\n        var nav = window.navigator,\r\n        browserLanguagePropertyKeys = [&#39;language&#39;, &#39;browserLanguage&#39;, &#39;systemLanguage&#39;, &#39;userLanguage&#39;],\r\n        i,\r\n        language;\r\n    \r\n        // support for HTML 5.1 &quot;navigator.languages&quot;\r\n        if (Array.isArray(nav.languages)) {\r\n          for (i = 0; i &lt; nav.languages.length; i++) {\r\n            language = nav.languages[i];\r\n            if (language &amp;&amp; language.length) {\r\n              return language;\r\n            }\r\n          }\r\n        }\r\n    \r\n        // support for other well known properties in browsers\r\n        for (i = 0; i &lt; browserLanguagePropertyKeys.length; i++) {\r\n          language = nav[browserLanguagePropertyKeys[i]];\r\n          if (language &amp;&amp; language.length) {\r\n            return language;\r\n          }\r\n        }\r\n    \r\n        return null;\r\n      };\r\n\r\n    console.log(getFirstBrowserLanguage());\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n      \r\n\r\n  [1]: http://angular-translate.github.io/\r\n  [2]: http://rawgit.com/angular-translate/bower-angular-translate/master/angular-translate.js"}, {"tags": [], "down_vote_count": 0, "creation_date": 1427967935, "answer_id": 29409813, "path": "stack.bower.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1427967935, "body_markdown": "Javascript way:\r\n\r\n    var language = window.navigator.userLanguage || window.navigator.language;//returns value like &#39;en-us&#39;\r\n\r\nIf you are using [jQuery.i18n plugin][1], you can use:\r\n\r\n    jQuery.i18n.browserLang();//returns value like &#39;&quot;en-US&quot;&#39;\r\n\r\n\r\n  [1]: https://github.com/jquery-i18n-properties/jquery-i18n-properties"}, {"tags": [], "down_vote_count": 0, "creation_date": 1430876257, "answer_id": 30066021, "path": "stack.bower.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1430876257, "body_markdown": "If you are developing a Chrome App / Extension use the [chrome.i18n API][1].\r\n\r\n    chrome.i18n.getAcceptLanguages(function(languages) {\r\n      console.log(languages);\r\n      // [&quot;en-AU&quot;, &quot;en&quot;, &quot;en-US&quot;]\r\n    });\r\n\r\n  [1]: https://developer.chrome.com/extensions/i18n#method-getAcceptLanguages"}, {"tags": [], "down_vote_count": 0, "creation_date": 1437457790, "answer_id": 31531274, "path": "stack.bower.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1437486774, "last_edit_date": 1437486774, "body_markdown": "I had the same problem, and I wrote the following front-end only library that wraps up the code for multiple browsers. It&#39;s not much code, but nice to not have to copy and paste the same code across multiple websites.\r\n\r\nGet it: [acceptedlanguages.js](https://github.com/leighmcculloch/acceptedlanguages.js)\r\n\r\nUse it:\r\n\r\n    &lt;script src=&quot;acceptedlanguages.js&quot;&gt;&lt;/script&gt;\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n      console.log(&#39;Accepted Languages:  &#39; + acceptedlanguages.accepted);\r\n    &lt;/script&gt;\r\n\r\nIt always returns an array, ordered by users preference. In Safari &amp; IE the array is always single length. In FF and Chrome it may be more than one language."}, {"tags": [], "down_vote_count": 0, "creation_date": 1439556278, "answer_id": 32010455, "path": "stack.bower.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1439556278, "body_markdown": "If you are using ASP .NET MVC and you want to get the **Accepted-Languages** header from JavaScript then here is a workaround example that does not involve any asynchronous requests.\r\n\r\nIn your .cshtml file, store the header securely in a div&#39;s data- attribute:\r\n\r\n    &lt;div data-languages=&quot;@Json.Encode(HttpContext.Current.Request.UserLanguages)&quot;&gt;&lt;/div&gt;\r\n\r\nThen your JavaScript code can access the info, e.g. using JQuery:\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n    $(&#39;[data-languages]&#39;).each(function () {\r\n        var languages = $(this).data(&quot;languages&quot;);\r\n        for (var i = 0; i &lt; languages.length; i++) {\r\n            var regex = /[-;]/;\r\n            console.log(languages[i].split(regex)[0]);\r\n        }\r\n    });\r\n    &lt;/script&gt;\r\n\r\nOf course you can use a similar approach with other server technologies as others have mentioned.\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1450756038, "answer_id": 34408120, "path": "stack.bower.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1450756974, "last_edit_date": 1450756974, "body_markdown": "For who are looking for Java Server solution\r\n\r\nHere is RestEasy\r\n\r\n    @GET\r\n    @Path(&quot;/preference-language&quot;)\r\n    @Consumes({&quot;application/json&quot;, &quot;application/xml&quot;})\r\n    @Produces({&quot;application/json&quot;, &quot;application/xml&quot;})\r\n    public Response getUserLanguagePreference(@Context HttpHeaders headers) {\r\n        return Response.status(200)\r\n                .entity(headers.getAcceptableLanguages().get(0))\r\n                .build();\r\n    }\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1458559335, "answer_id": 36129715, "path": "stack.bower.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1458559335, "body_markdown": "i had a diffrent approach, this might help someone in the future:\r\n\r\nthe customer wanted a page where you can swap languages.\r\ni needed to format numbers by that setting (not the browser setting / not by any predefined setting)\r\n\r\nso i set an initial setting depending on the config settings (i18n)\r\n\r\n    $clang = $this-&gt;Session-&gt;read(&#39;Config.language&#39;);\r\n\techo &quot;&lt;script type=&#39;text/javascript&#39;&gt;var clang = &#39;$clang&#39;&lt;/script&gt;&quot;;\r\n\r\nlater in the script i used a function to determine what numberformating i need\r\n\r\n    function getLangsettings(){\r\n\t  if(typeof clang === &#39;undefined&#39;) clang = navigator.language;\r\n\t  //console.log(clang);\r\n\t  switch(clang){\r\n\t\tcase &#39;de&#39;:\r\n\t\tcase &#39;de-de&#39;:\r\n\t\t\treturn {precision : 2, thousand : &quot;.&quot;, decimal : &quot;,&quot;}\r\n\t\tcase &#39;en&#39;:\r\n\t\tcase &#39;en-gb&#39;:\r\n\t\tdefault:\r\n\t\t\treturn {precision : 2, thousand : &quot;,&quot;, decimal : &quot;.&quot;}\r\n\t  }\r\n    }\r\n\t\t\r\n\r\nso i used the set language of the page and as a fallback i used the browser settings.\r\n\r\nwhich should be helpfull for testing purposes aswell.\r\n\r\ndepending on your customers you might not need that settings."}, {"tags": [], "down_vote_count": 1, "creation_date": 1467392453, "answer_id": 38150585, "path": "stack.bower.answer", "score": 22, "up_vote_count": 23, "is_accepted": false, "last_activity_date": 1467452453, "last_edit_date": 1467452453, "body_markdown": "\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var language = navigator.languages &amp;&amp; navigator.languages[0] || // Chrome / Firefox\r\n                   navigator.language ||   // All browsers\r\n                   navigator.userLanguage; // IE &lt;= 10\r\n\r\n    console.log(language);\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n- https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/languages\r\n- https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/language\r\n\r\nTry PWA Template https://github.com/StartPolymer/progressive-web-app-template\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1485274718, "answer_id": 41833124, "path": "stack.bower.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1485276404, "last_edit_date": 1485276404, "body_markdown": "I have a hack that I think uses very little code and is quite reliable.\r\n\r\nPut your site&#39;s files in a subdirectory. SSL into your server and create symlinks to that subdirectory where your files are stored that indicate your languages.\r\n\r\nSomething like this:\r\n\r\n    ln -s /var/www/yourhtml /var/www/en\r\n    ln -s /var/www/yourhtml /var/www/sp\r\n    ln -s /var/www/yourhtml /var/www/it\r\n\r\nUse your web server to read HTTP_ACCEPT_LANGUAGE and redirect to these &quot;different subdirectories&quot; according to the language value it provides.\r\n\r\nNow you can use Javascript&#39;s window.location.href to get your url and use it in conditionals to reliably identify the preferred language.\r\n\r\n    url_string = window.location.href;\r\n    if (url_string = &quot;http://yoursite.com/it/index.html&quot;) {\r\n    \tdocument.getElementById(&quot;page-wrapper&quot;).className = &quot;italian&quot;;\r\n    }\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1488894359, "answer_id": 42649975, "path": "stack.bower.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1488894359, "body_markdown": "I&#39;ve just come up with this. It combines newer JS destructuring syntax with a few standard operations to retrieve the language and locale.\r\n\r\n    var [lang, locale] = (((navigator.userLanguage || navigator.language).replace(&#39;-&#39;, &#39;_&#39;)).toLowerCase()).split(&#39;_&#39;);\r\n\r\nHope it helps someone"}, {"tags": [], "down_vote_count": 1, "creation_date": 1495459473, "answer_id": 44114093, "path": "stack.bower.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1495459473, "body_markdown": "First of all, excuse me for my English.\r\nI would like to share my code, because it works and it is different than the others given anwers. \r\nIn this exemple,if you speak French (France, Belgium or other french language) you are redirected on the french page, otherwise on the english page, depending on the browser configuration :\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n            $(document).ready(function () {\r\n                var userLang = navigator.language || navigator.userLanguage;\r\n                if (userLang.startsWith(&quot;fr&quot;)) {\r\n                        window.location.href = &#39;../fr/index.html&#39;;\r\n                    }\r\n                else {\r\n                        window.location.href = &#39;../en/index.html&#39;;\r\n                    }\r\n                });\r\n        &lt;/script&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1506874029, "answer_id": 46514247, "path": "stack.bower.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1506874029, "body_markdown": "I&#39;ve been using Hamid&#39;s answer for a while, but it in cases where the languages array is like [&quot;en&quot;, &quot;en-GB&quot;, &quot;en-US&quot;, &quot;fr-FR&quot;, &quot;fr&quot;, &quot;en-ZA&quot;] it will return &quot;en&quot;, when &quot;en-GB&quot; would be a better match.\r\n\r\nMy update (below) will return the first long format code e.g. &quot;en-GB&quot;, otherwise it will return the first short code e.g. &quot;en&quot;, otherwise it will return null.\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function getFirstBrowserLanguage() {\r\n            var nav = window.navigator,\r\n                browserLanguagePropertyKeys = [&#39;language&#39;, &#39;browserLanguage&#39;, &#39;systemLanguage&#39;, &#39;userLanguage&#39;],\r\n                i,\r\n                language,\r\n                len,\r\n                shortLanguage = null;\r\n\r\n            // support for HTML 5.1 &quot;navigator.languages&quot;\r\n            if (Array.isArray(nav.languages)) {\r\n                for (i = 0; i &lt; nav.languages.length; i++) {\r\n                    language = nav.languages[i];\r\n                    len = language.length;\r\n                    if (!shortLanguage &amp;&amp; len) {\r\n                        shortLanguage = language;\r\n                    }\r\n                    if (language &amp;&amp; len&gt;2) {\r\n                        return language;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // support for other well known properties in browsers\r\n            for (i = 0; i &lt; browserLanguagePropertyKeys.length; i++) {\r\n                language = nav[browserLanguagePropertyKeys[i]];\r\n                len = language.length;\r\n                if (!shortLanguage &amp;&amp; len) {\r\n                    shortLanguage = language;\r\n                }\r\n                if (language &amp;&amp; len &gt; 2) {\r\n                    return language;\r\n                }\r\n            }\r\n\r\n            return shortLanguage;\r\n        }\r\n\r\n    console.log(getFirstBrowserLanguage());\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"}], "title": "JavaScript for detecting browser language preference", "view_count": 362247, "answer_count": 26, "code_snippet": ["<code>Tools&gt;Internet Options&gt;General&gt;Languages</code>", "<code>tools&gt;options&gt;content&gt;languages</code>", "<code>navigator.language</code>", "<code>navigator.userLanguage</code>", "<code>Start&gt;ControlPanel&gt;RegionalandLanguageOptions&gt;Regional Options</code>", "<code>navigator.browserLanguage</code>", "<code>navigator.systemLanguage</code>", "<code>Tools&gt;InternetOptions&gt;General&gt;Languages</code>", "<code>navigator.language</code>", "<code>$.ajax({ \n    url: \"http://ajaxhttpheaders.appspot.com\", \n    dataType: 'jsonp', \n    success: function(headers) {\n        language = headers['Accept-Language'];\n        nowDoSomethingWithIt(language);\n    }\n});\n</code>", "<code>class MainPage(webapp.RequestHandler):\n    def get(self):\n        headers = self.request.headers\n        callback = self.request.get('callback')\n\n        if callback:\n          self.response.headers['Content-Type'] = 'application/javascript'\n          self.response.out.write(callback + \"(\")\n          self.response.out.write(headers)\n          self.response.out.write(\")\")\n        else:\n          self.response.headers['Content-Type'] = 'text/plain'\n          self.response.out.write(\"I need a callback=\")\n\napplication = webapp.WSGIApplication(\n                                     [('/', MainPage)],\n                                     debug=False)\n\ndef main():\n    run_wsgi_app(application)\n\nif __name__ == \"__main__\":\n    main()\n</code>", "<code>var language = window.navigator.userLanguage || window.navigator.language;\nalert(language); //works IE/SAFARI/CHROME/FF\n</code>", "<code>window.navigator.userLanguage</code>", "<code>navigator.language</code>", "<code>'it'</code>", "<code>'en-US'</code>", "<code>window.navigator.language</code>", "<code>window.navigator.language</code>", "<code>en-US</code>", "<code>en-GB</code>", "<code>navigator.language</code>", "<code>navigator.languages\n    ? navigator.languages[0]\n    : (navigator.language || navigator.userLanguage)\n</code>", "<code>window.navigator.languages || [window.navigator.language || window.navigator.userLanguage]</code>", "<code>navigator.languages[0]</code>", "<code>navigator.language</code>", "<code>navigator.languages</code>", "<code>[\"en-US\", \"en\", \"ru\", \"uk\"]</code>", "<code>navigator.languages</code>", "<code>var getFirstBrowserLanguage = function () {\r\n    var nav = window.navigator,\r\n    browserLanguagePropertyKeys = ['language', 'browserLanguage', 'systemLanguage', 'userLanguage'],\r\n    i,\r\n    language;\r\n\r\n    // support for HTML 5.1 \"navigator.languages\"\r\n    if (Array.isArray(nav.languages)) {\r\n      for (i = 0; i &lt; nav.languages.length; i++) {\r\n        language = nav.languages[i];\r\n        if (language &amp;&amp; language.length) {\r\n          return language;\r\n        }\r\n      }\r\n    }\r\n\r\n    // support for other well known properties in browsers\r\n    for (i = 0; i &lt; browserLanguagePropertyKeys.length; i++) {\r\n      language = nav[browserLanguagePropertyKeys[i]];\r\n      if (language &amp;&amp; language.length) {\r\n        return language;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\nconsole.log(getFirstBrowserLanguage());</code>", "<code>&lt;script type=\"text/javascript\"&gt;\nvar lang = window.navigator.languages ? window.navigator.languages[0] : null;\n    lang = lang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\nif (lang.indexOf('-') !== -1)\n    lang = lang.split('-')[0];\n\nif (lang.indexOf('_') !== -1)\n    lang = lang.split('_')[0];\n&lt;/script&gt;\n</code>", "<code>var language = navigator.languages &amp;&amp; navigator.languages[0] || // Chrome / Firefox\r\n               navigator.language ||   // All browsers\r\n               navigator.userLanguage; // IE &lt;= 10\r\n\r\nconsole.log(language);</code>", "<code>en-US</code>", "<code>navigator.languages[0]</code>", "<code>navigator.userLanguage</code>", "<code>window.navigator.language</code>", "<code>var language = window.navigator.userLanguage || window.navigator.language;//returns value like 'en-us'\n</code>", "<code>jQuery.i18n.browserLang();//returns value like '\"en-US\"'\n</code>", "<code>browserLanguage</code>", "<code>navigator.browserLanguage</code>", "<code>chrome.i18n.getAcceptLanguages(function(languages) {\n  console.log(languages);\n  // [\"en-AU\", \"en\", \"en-US\"]\n});\n</code>", "<code>Accept-Language</code>", "<code>var http = require('http');\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end(JSON.stringify(req.headers));\n}).listen(80,'0.0.0.0');\n</code>", "<code>navigator.languages\n</code>", "<code>&lt;script src=\"acceptedlanguages.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n  console.log('Accepted Languages:  ' + acceptedlanguages.accepted);\n&lt;/script&gt;\n</code>", "<code>function getFirstBrowserLanguage() {\r\n        var nav = window.navigator,\r\n            browserLanguagePropertyKeys = ['language', 'browserLanguage', 'systemLanguage', 'userLanguage'],\r\n            i,\r\n            language,\r\n            len,\r\n            shortLanguage = null;\r\n\r\n        // support for HTML 5.1 \"navigator.languages\"\r\n        if (Array.isArray(nav.languages)) {\r\n            for (i = 0; i &lt; nav.languages.length; i++) {\r\n                language = nav.languages[i];\r\n                len = language.length;\r\n                if (!shortLanguage &amp;&amp; len) {\r\n                    shortLanguage = language;\r\n                }\r\n                if (language &amp;&amp; len&gt;2) {\r\n                    return language;\r\n                }\r\n            }\r\n        }\r\n\r\n        // support for other well known properties in browsers\r\n        for (i = 0; i &lt; browserLanguagePropertyKeys.length; i++) {\r\n            language = nav[browserLanguagePropertyKeys[i]];\r\n            len = language.length;\r\n            if (!shortLanguage &amp;&amp; len) {\r\n                shortLanguage = language;\r\n            }\r\n            if (language &amp;&amp; len &gt; 2) {\r\n                return language;\r\n            }\r\n        }\r\n\r\n        return shortLanguage;\r\n    }\r\n\r\nconsole.log(getFirstBrowserLanguage());</code>", "<code>&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\n\n    var bLocale='raw'; // can be used at any other place\n\n    function processHeaders(headers){\n        bLocale=headers['Accept-Language'];\n        comma=bLocale.indexOf(',');\n        if(comma&gt;0) bLocale=bLocale.substring(0, comma);\n    }\n\n&lt;/script&gt;\n\n&lt;script src=\"jquery-1.11.0.js\"&gt;&lt;/script&gt;\n\n&lt;script type=\"application/javascript\" src=\"http://ajaxhttpheaders.appspot.com?callback=processHeaders\"&gt;&lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1 id=\"bLocale\"&gt;Should be the browser locale here&lt;/h1&gt;\n\n&lt;/body&gt;\n\n&lt;script&gt;\n\n    $(\"#bLocale\").text(bLocale);\n\n&lt;/script&gt;\n&lt;/html&gt;\n</code>", "<code>var [lang, locale] = (((navigator.userLanguage || navigator.language).replace('-', '_')).toLowerCase()).split('_');\n</code>", "<code>&lt;script type=\"text/javascript\"&gt;\r\n        $(document).ready(function () {\r\n            var userLang = navigator.language || navigator.userLanguage;\r\n            if (userLang.startsWith(\"fr\")) {\r\n                    window.location.href = '../fr/index.html';\r\n                }\r\n            else {\r\n                    window.location.href = '../en/index.html';\r\n                }\r\n            });\r\n    &lt;/script&gt;</code>", "<code>def get_browser_lang(request):\nif request.META.has_key('HTTP_ACCEPT_LANGUAGE'):\n    return JsonResponse({'response': request.META['HTTP_ACCEPT_LANGUAGE']})\nelse:\n    return JsonResponse({'response': settings.DEFAULT_LANG})\n</code>", "<code>url(r'^browserlang/$', views.get_browser_lang, name='get_browser_lang'),\n</code>", "<code>$.get(lg('SERVER') + 'browserlang/', function(data){\n    var lang_code = data.response.split(',')[0].split(';')[0].split('-')[0];\n});\n</code>", "<code>var req = new XMLHttpRequest();\nreq.open('GET', document.location, false);\nreq.send(null);\nvar headers = req.getAllResponseHeaders().toLowerCase();\nvar contentLanguage = headers.match( /^content-language\\:(.*)$/gm );\nif(contentLanguage[0]) {\n    return contentLanguage[0].split(\":\")[1].trim().toUpperCase();\n}\n</code>", "<code>&lt;?php\n$lang = substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 2);\necho json_encode($lang);\n?&gt;\n</code>", "<code>url: \"languageDetector.php\",\ndataType: 'json',\nsuccess: function(language) {\n    nowDoSomethingWithIt(language);\n}\n</code>", "<code>&lt;div data-languages=\"@Json.Encode(HttpContext.Current.Request.UserLanguages)\"&gt;&lt;/div&gt;\n</code>", "<code>&lt;script type=\"text/javascript\"&gt;\n$('[data-languages]').each(function () {\n    var languages = $(this).data(\"languages\");\n    for (var i = 0; i &lt; languages.length; i++) {\n        var regex = /[-;]/;\n        console.log(languages[i].split(regex)[0]);\n    }\n});\n&lt;/script&gt;\n</code>", "<code>@GET\n@Path(\"/preference-language\")\n@Consumes({\"application/json\", \"application/xml\"})\n@Produces({\"application/json\", \"application/xml\"})\npublic Response getUserLanguagePreference(@Context HttpHeaders headers) {\n    return Response.status(200)\n            .entity(headers.getAcceptableLanguages().get(0))\n            .build();\n}\n</code>", "<code>$clang = $this-&gt;Session-&gt;read('Config.language');\necho \"&lt;script type='text/javascript'&gt;var clang = '$clang'&lt;/script&gt;\";\n</code>", "<code>function getLangsettings(){\n  if(typeof clang === 'undefined') clang = navigator.language;\n  //console.log(clang);\n  switch(clang){\n    case 'de':\n    case 'de-de':\n        return {precision : 2, thousand : \".\", decimal : \",\"}\n    case 'en':\n    case 'en-gb':\n    default:\n        return {precision : 2, thousand : \",\", decimal : \".\"}\n  }\n}\n</code>", "<code>ln -s /var/www/yourhtml /var/www/en\nln -s /var/www/yourhtml /var/www/sp\nln -s /var/www/yourhtml /var/www/it\n</code>", "<code>url_string = window.location.href;\nif (url_string = \"http://yoursite.com/it/index.html\") {\n    document.getElementById(\"page-wrapper\").className = \"italian\";\n}\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "web-applications", "scheduled-tasks"], "creation_date": 1235245199, "body_markdown": "I&#39;ve been working on a web app using Django, and I&#39;m curious if there is a way to schedule a job to run periodically. \r\n\r\nBasically I just want to run through the database and make some calculations/updates on an automatic, regular basis, but I can&#39;t seem to find any documentation on doing this.\r\n\r\nDoes anyone know how to set this up?\r\n\r\n\r\nTo clarify:  I know I can set up a `cron` job to do this, but I&#39;m curious if there is some feature in Django that provides this functionality.   I&#39;d like people to be able to deploy this app themselves without having to do much config (preferably zero).\r\n\r\nI&#39;ve considered triggering these actions &quot;retroactively&quot; by simply checking if a job should have been run since the last time a request was sent to the site, but I&#39;m hoping for something a bit cleaner.", "last_edit_date": 1336070134, "up_vote_count": 388, "link": "https://stackoverflow.com/questions/573618/django-set-up-a-scheduled-job", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1235246680, "answer_id": 573656, "path": "stack.django.answer", "score": 32, "up_vote_count": 33, "is_accepted": false, "last_activity_date": 1473552284, "last_edit_date": 1473552284, "body_markdown": "If you&#39;re using a standard POSIX OS, you use [cron][1].\r\n\r\nIf you&#39;re using Windows, you use [at][2].\r\n\r\nWrite a Django management command to \r\n\r\n1.  Figure out what platform they&#39;re on.\r\n\r\n2.  Either execute the appropriate &quot;AT&quot; command for your users, **or** update the crontab for your users.\r\n\r\n\r\n  [1]: http://linux.die.net/man/8/cron\r\n  [2]: http://technet.microsoft.com/en-us/library/cc755618.aspx"}, {"tags": [], "down_vote_count": 2, "creation_date": 1235246798, "answer_id": 573659, "path": "stack.django.answer", "score": 289, "up_vote_count": 291, "is_accepted": true, "last_activity_date": 1453883090, "last_edit_date": 1453883090, "body_markdown": "One solution that I have employed is to do this:\r\n\r\n1) Create a [custom management command][1], e.g. \r\n\r\n    python manage.py my_cool_command\r\n\r\n2) Use `cron` (on Linux) or `at` (on Windows) to run my command at the required times.\r\n\r\n\r\nThis is a simple solution that doesn&#39;t require installing a heavy AMQP stack. However there are nice advantages to using something like Celery, mentioned in the other answers. In particular, with Celery it is nice to not have to spread your application logic out into crontab files. However the cron solution works quite nicely for a small to medium sized application and where you don&#39;t want a lot of external dependencies.\r\n\r\nEDIT:\r\n\r\nIn later version of windows the `at` command is deprecated for Windows 8, Server 2012 and above. You can use `schtasks.exe` for same use.\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/howto/custom-management-commands/#howto-custom-management-commands"}, {"tags": [], "down_vote_count": 1, "creation_date": 1235248187, "answer_id": 573685, "path": "stack.django.answer", "score": 14, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1235248187, "body_markdown": "Look at Django Poor Man&#39;s Cron which is a Django app that makes use of spambots, search engine indexing robots and alike to run scheduled tasks in approximately regular intervals\r\n\r\nSee: [http://code.google.com/p/django-poormanscron/][1]\r\n\r\n\r\n  [1]: http://code.google.com/p/django-poormanscron/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1235272687, "answer_id": 574245, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1378393719, "last_edit_date": 1378393719, "body_markdown": "I personally use cron, but the [Jobs Scheduling][1] parts of [django-extensions][2] looks interesting.\r\n\r\n\r\n  [1]: http://code.google.com/p/django-command-extensions/wiki/JobsScheduling\r\n  [2]: https://github.com/django-extensions/django-extensions"}, {"tags": [], "down_vote_count": 0, "creation_date": 1236414750, "answer_id": 621538, "path": "stack.django.answer", "score": 22, "up_vote_count": 22, "is_accepted": false, "last_activity_date": 1507037500, "last_edit_date": 1507037500, "body_markdown": "Interesting new pluggable Django app: [django-chronograph][1]\r\n\r\nYou only have to add one cron entry which acts as a timer, and you have a very nice Django admin interface into the scripts to run.\r\n\r\n\r\n  [1]: https://bitbucket.org/wnielson/django-chronograph/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1246276607, "answer_id": 1057920, "path": "stack.django.answer", "score": 116, "up_vote_count": 116, "is_accepted": false, "last_activity_date": 1486342681, "last_edit_date": 1486342681, "body_markdown": "[Celery][1] is a distributed task queue, built on AMQP (RabbitMQ). It also handles periodic tasks in a cron-like fashion (see [periodic tasks][2]). Depending on your app, it might be worth a gander.\r\n\r\nCelery is pretty easy to set up with django ([docs][3]), and periodic tasks will actually skip missed tasks in case of a downtime. Celery also has built-in retry mechanisms, in case a task fails.\r\n\r\n\r\n  [1]:http://celeryproject.org/\r\n  [2]: http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html\r\n  [3]: http://docs.celeryproject.org/en/latest/django/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1262906770, "answer_id": 2024459, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1262906770, "body_markdown": "Put the following at the top of your cron.py file:\r\n\r\n    #!/usr/bin/python\r\n    import os, sys\r\n    sys.path.append(&#39;/path/to/&#39;) # the parent directory of the project\r\n    sys.path.append(&#39;/path/to/project&#39;) # these lines only needed if not on path\r\n    os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] = &#39;myproj.settings&#39;\r\n    \r\n    # imports and code below"}, {"tags": [], "down_vote_count": 0, "creation_date": 1305601753, "answer_id": 6025832, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1305601753, "body_markdown": "after the part of code,I can write anything just like my views.py :)\r\n\r\n    #######################################\r\n    import os,sys\r\n    sys.path.append(&#39;/home/administrator/development/store&#39;)\r\n    os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;]=&#39;store.settings&#39;\r\n    from django.core.management impor setup_environ\r\n    from store import settings\r\n    setup_environ(settings)\r\n    #######################################\r\n\r\nfrom\r\nhttp://www.cotellese.net/2007/09/27/running-external-scripts-against-django-models/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1314988893, "answer_id": 7287891, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1314988893, "body_markdown": "I had something similar with your problem today.\r\n\r\nI didn&#39;t wanted to have it handled by the server trhough cron (and most of the libs were just cron helpers in the end).\r\n\r\nSo i&#39;ve created a scheduling module and attached it to the __init__ .\r\n\r\nIt&#39;s not the best approach, but it helps me to have all the code in a single place and with its execution related to the main app."}, {"tags": [], "down_vote_count": 0, "creation_date": 1319980798, "answer_id": 7945123, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1327526107, "last_edit_date": 1327526107, "body_markdown": "I just thought about this rather simple solution:\r\n\r\n 1. Define a view function **do_work(req, param)** like you would with any other view, with URL mapping, return a HttpResponse and so on.\r\n 2. Set up a cron job with your timing preferences (or using AT or Scheduled Tasks in Windows) which runs **curl http://localhost/your/mapped/url?param=value**.\r\n\r\nYou can add parameters but just adding parameters to the URL.\r\n\r\nTell me what you guys think.\r\n\r\n**[Update]** I&#39;m now using runjob command from [django-extensions][1] instead of curl.\r\n\r\nMy cron looks something like this:\r\n\r\n    @hourly python /path/to/project/manage.py runjobs hourly\r\n... and so on for daily, monthly, etc&#39;. You can also set it up to run a specific job.\r\n\r\n[1]: https://github.com/django-extensions/django-extensions\r\n\r\nI find it more managable and a cleaner. Doesn&#39;t require mapping a URL to a view. Just define your job class and crontab and you&#39;re set."}, {"tags": [], "down_vote_count": 0, "creation_date": 1324384242, "answer_id": 8575485, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1324859032, "last_edit_date": 1324859032, "body_markdown": "Brian Neal&#39;s suggestion of running management commands via cron works well, but if you&#39;re looking for something a little more robust (yet not as elaborate as Celery) I&#39;d look into a library like [Kronos](https://github.com/jgorset/django-kronos):\r\n\r\n    # app/cron.py\r\n    \r\n    import kronos\r\n    \r\n    @kronos.register(&#39;0 * * * *&#39;)\r\n    def task():\r\n        pass\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1327960026, "answer_id": 9071268, "path": "stack.django.answer", "score": 42, "up_vote_count": 42, "is_accepted": false, "last_activity_date": 1327960026, "body_markdown": "We&#39;ve open-sourced what I think is a structured app. that Brian&#39;s solution above alludes too. Would love any / all feedback!\r\n\r\nhttps://github.com/tivix/django-cron\r\n\r\nIt comes with one management command:\r\n    \r\n    ./manage.py runcrons\r\n    \r\n\r\nThat does the job. Each cron is modeled as a class (so its all OO) and each cron runs at a different frequency and we make sure same cron type doesn&#39;t run in parallel (in case crons themselves take longer time to run than their frequency!)\r\n\r\nThanks!\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1333464858, "answer_id": 9995875, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1428275877, "last_edit_date": 1428275877, "body_markdown": "RabbitMQ and Celery have more features and task handling capabilities than Cron. If task failure isn&#39;t an issue, and you think you will handle broken tasks in the next call, then Cron is sufficient.\r\n\r\nCelery &amp; [AMQP](https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol) will let you handle the broken task, and it will get executed again by another worker (Celery workers listen for the next task to work on), until the task&#39;s `max_retries` attribute is reached. You can even invoke tasks on failure, like logging the failure, or sending an email to the admin once the `max_retries` has been reached.\r\n\r\nAnd you can distribute Celery and AMQP servers when you need to scale your application."}, {"tags": [], "down_vote_count": 2, "creation_date": 1395795876, "answer_id": 22649515, "path": "stack.django.answer", "score": 2, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1395795876, "body_markdown": "Yes, the method above is so great. And I tried some of them. At last, I found a method like this:\r\n\r\n        from threading import Timer\r\n\r\n        def sync():\r\n\r\n            do something...\r\n\r\n            sync_timer = Timer(self.interval, sync, ())\r\n            sync_timer.start()\r\n\r\nJust like **Recursive**.\r\n\r\nOk, I hope this method can meet your requirement. :)\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1441057956, "answer_id": 32320532, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1441059818, "last_edit_date": 1441059818, "body_markdown": "I use celery to create my periodical tasks. First you need to install it as follows:\r\n\r\n    pip install django-celery\r\n\r\nDon&#39;t forget to register `django-celery` in your settings and then you could do something like this:\r\n\r\n    from celery import task\r\n    from celery.decorators import periodic_task\r\n    from celery.task.schedules import crontab\r\n    from celery.utils.log import get_task_logger\r\n    @periodic_task(run_every=crontab(minute=&quot;0&quot;, hour=&quot;23&quot;))\r\n    def do_every_midnight():\r\n     #your code"}, {"tags": [], "down_vote_count": 0, "creation_date": 1468961383, "answer_id": 38468265, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1468961383, "body_markdown": "Although not part of Django, [Airflow][1] is a more recent project (as of 2016) that is useful for task management.\r\n\r\nAirflow is a workflow automation and scheduling system that can be used to author and manage data pipelines. A web-based UI provides the developer with a range of options for managing and viewing these pipelines.\r\n\r\nAirflow is written in Python and is built using Flask.\r\n\r\nAirflow was created by Maxime Beauchemin at Airbnb and open sourced in the spring of 2015.  It joined the Apache Software Foundation\u2019s incubation program in the winter of 2016.  Here is the [Git project page][2] and some addition [background information][3].\r\n\r\n\r\n  [1]: http://airflow.incubator.apache.org/project.html\r\n  [2]: https://github.com/apache/incubator-airflow\r\n  [3]: http://nerds.airbnb.com/airflow/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1484163268, "answer_id": 41599274, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1484163268, "body_markdown": "I am not sure will this be useful for anyone, since I had to provide other users of the system to schedule the jobs, without giving them access to the actual server(windows) Task Scheduler, I created this reusable app.\r\n\r\nPlease note users have access to one shared folder on server where they can create required command/task/.bat file. This task then can be scheduled using this app.\r\n\r\nApp name is [Django_Windows_Scheduler][1]\r\n\r\nScreenShot:\r\n[![enter image description here][2]][2]\r\n\r\n\r\n  [1]: https://github.com/just10minutes/Django_Windows_Scheduler\r\n  [2]: https://i.stack.imgur.com/y3gtF.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1498140260, "answer_id": 44701749, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1498140260, "body_markdown": "I had exactly the same requirement a while ago, and ended up solving it using [APScheduler](https://apscheduler.readthedocs.io/en/latest/) ([User Guide](https://apscheduler.readthedocs.io/en/latest/userguide.html))\r\n\r\nIt makes scheduling jobs super simple, and keeps it independent for from request-based execution of some code. Following is a simple example that I used in my code.\r\n\r\n    from apscheduler.schedulers.background import BackgroundScheduler\r\n\r\n    scheduler = BackgroundScheduler()\r\n    job = None\r\n\r\n    def tick():\r\n        print(&#39;One tick!&#39;)\\\r\n\r\n    def start_job():\r\n        global job\r\n        job = scheduler.add_job(tick, &#39;interval&#39;, seconds=3600)\r\n        try:\r\n            scheduler.start()\r\n        except:\r\n            pass\r\n\r\nHope this helps somebody!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1510418295, "answer_id": 47240258, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1510418295, "body_markdown": "A more modern solution (compared to Celery) is Django Q:\r\nhttps://django-q.readthedocs.io/en/latest/index.html\r\n\r\nIt has great documentation and is easy to grok. Windows support is lacking, because Windows does not support process forking. But it works fine if you create your dev environment using the Windows for Linux Subsystem. "}], "title": "Django - Set Up A Scheduled Job?", "view_count": 112775, "answer_count": 19, "code_snippet": ["<code>cron</code>", "<code>python manage.py my_cool_command\n</code>", "<code>cron</code>", "<code>at</code>", "<code>at</code>", "<code>schtasks.exe</code>", "<code>python manage.py runcrons</code>", "<code>./manage.py runcrons\n</code>", "<code>at</code>", "<code>cron</code>", "<code># app/cron.py\n\nimport kronos\n\n@kronos.register('0 * * * *')\ndef task():\n    pass\n</code>", "<code>max_retries</code>", "<code>max_retries</code>", "<code>#!/usr/bin/python\nimport os, sys\nsys.path.append('/path/to/') # the parent directory of the project\nsys.path.append('/path/to/project') # these lines only needed if not on path\nos.environ['DJANGO_SETTINGS_MODULE'] = 'myproj.settings'\n\n# imports and code below\n</code>", "<code>@hourly python /path/to/project/manage.py runjobs hourly\n</code>", "<code>#######################################\nimport os,sys\nsys.path.append('/home/administrator/development/store')\nos.environ['DJANGO_SETTINGS_MODULE']='store.settings'\nfrom django.core.management impor setup_environ\nfrom store import settings\nsetup_environ(settings)\n#######################################\n</code>", "<code>from apscheduler.schedulers.background import BackgroundScheduler\n\nscheduler = BackgroundScheduler()\njob = None\n\ndef tick():\n    print('One tick!')\\\n\ndef start_job():\n    global job\n    job = scheduler.add_job(tick, 'interval', seconds=3600)\n    try:\n        scheduler.start()\n    except:\n        pass\n</code>", "<code>    from threading import Timer\n\n    def sync():\n\n        do something...\n\n        sync_timer = Timer(self.interval, sync, ())\n        sync_timer.start()\n</code>", "<code>pip install django-celery\n</code>", "<code>django-celery</code>", "<code>from celery import task\nfrom celery.decorators import periodic_task\nfrom celery.task.schedules import crontab\nfrom celery.utils.log import get_task_logger\n@periodic_task(run_every=crontab(minute=\"0\", hour=\"23\"))\ndef do_every_midnight():\n #your code\n</code>"], "path": "stack.django"}, {"tags": ["selenium", "web-scraping", "scrapy", "phantomjs", "casperjs"], "creation_date": 1377887938, "body_markdown": "I&#39;m trying to put list of possible solutions for browser automatic tests suits and headless browser platforms capable of scraping.\r\n\r\n***\r\n\r\n**BROWSER TESTING / SCRAPING:**\r\n\r\n - [Selenium][1] - **polyglot** flagship in browser automation, bindings for Python, Ruby,  JavaScript, C#, Haskell and more, IDE for Firefox (as an extension) for faster test deployment. Can act as a Server and has tons of features.\r\n \r\n\r\n**JAVASCRIPT**\r\n\r\n - [PhantomJS][2] - **JavaScript**, headless testing with screen capture and automation, uses **Webkit**. As of version 1.8 Selenium&#39;s WebDriver API is implemented, so you can use any WebDriver binding and tests will be compatible with Selenium\r\n - [SlimerJS][3] - similar to PhantomJS, uses **Gecko** (Firefox) instead of **WebKit**\r\n - [CasperJS][4] - **JavaScript**, build on both PhantomJS and SlimerJS, has extra features\r\n - [Ghost Driver][5] - **JavaScript** implementation of the **WebDriver Wire Protocol** for **PhantomJS**. \r\n - ***new*** [PhantomCSS][6] - CSS regression testing. A CasperJS module for automating visual regression testing with PhantomJS and [Resemble.js][7].\r\n - ***new*** [WebdriverCSS][8] - plugin for [Webdriver.io][9] for automating visual regression testing\r\n - ***new*** [PhantomFlow][10] - Describe and visualize user flows through tests. An experimental approach to Web user interface testing.\r\n - ***new*** [trifleJS][11] - ports the PhantomJS API to use the Internet Explorer engine.\r\n - ***new*** [CasperJS IDE][12] *(commercial)*\r\n\r\n**NODE.JS**\r\n\r\n - [Node-phantom][13] - bridges the gap between **PhantomJS** and **node.js**\r\n - [WebDriverJs][14] - Selenium WebDriver bindings for node.js by Selenium Team\r\n - [WD.js][15] - node module for WebDriver/Selenium 2\r\n - [yiewd][16] - WD.js wrapper using latest Harmony generators! Get rid of the callback pyramid with **yield** \r\n - [ZombieJs][17] - Insanely fast, headless full-stack testing using **node.js**\r\n - [NightwatchJs][18] - Node JS based testing solution using Selenium Webdriver\r\n - [Chimera][19] - Chimera: can do everything what phantomJS does, but in a full JS environment\r\n - [Dalek.js][20] - Automated cross browser testing with JavaScript through Selenium Webdriver\r\n - [Webdriver.io][9] - better implementation of WebDriver bindings with predefined 50+ actions\r\n - [Nightmare][21] - Electron bridge with a high-level API. \r\n - [jsdom][23] - Tailored towards web scraping. A very lightweight DOM implemented in Node.js, it supports pages with javascript. \r\n\r\n**WEB SCRAPING / MINING**\r\n\r\n - [Scrapy][24] - **Python**, mainly a scraper/miner - fast, well documented and, can be linked with [Django Dynamic Scraper][25] for nice mining deployments, or [Scrapy Cloud][26] for PaaS (server-less) deployment, works in terminal or an server stand-alone proces, can be used with **Celery**, built on top of **Twisted**\r\n - [Snailer][27] - **node.js** module, untested yet. \r\n - [Node-Crawler][28] - **node.js** module, untested yet.\r\n\r\n**ONLINE TOOLS**\r\n\r\n - ***new*** [Online HTTP client][29] - Dedicated SO answer\r\n - ***dead*** [CasperBox][30] - Run **CasperJS** scripts online\r\n\r\n***\r\n\r\n**RELATED LINKS &amp; RESOURCES** \r\n\r\n - [Comparsion of Webscraping software][31]\r\n - ***new*** [Resemble.js][7] : Image analysis and comparison\r\n\r\n**Questions:**\r\n\r\n- Any pure Node.js solution or Nodejs to PhanthomJS/CasperJS module that actually works and is documented?\r\n\r\n**Answer:** Chimera seems to go in that direction, checkout [Chimera][19]\r\n\r\n- Other solutions capable of easier JavaScript injection than Selenium?\r\n\r\n- Do you know any pure **ruby** solutions?\r\n\r\n**Answer:** Checkout the list created by rjk with ruby based solutions\r\n\r\n- Do you know any related tech or solution?\r\n\r\n**Feel free to reedit this question and add content as you wish!** Thank you for your contributions!\r\n\r\n***\r\n\r\n**Updates**\r\n\r\n 1. added [SlimerJS][3] to the list\r\n 2. added [Snailer][27] and [Node-Crawler][28] and [Node-phantom][13]\r\n 3. added [Yiewd][16] WebDriver wrapper \r\n 4. added [WebDriverJs][14] and [WD.js][15]\r\n 5. added [Ghost Driver][5]\r\n 6. added [Comparsion of Webscraping software][31] on [Screen Scraper Blog][31]\r\n 7. added [ZombieJs][17]\r\n 8. added [Resemble.js][7] and [PhantomCSS][6] and [PhantomFlow][10], categorised and reedited content\r\n 9. 04.01.2014, added [Chimera][19], answered 2 questions\r\n 10. added [NightWatchJs][18]\r\n 11. added [DalekJS][20]\r\n 12. added [WebdriverCSS][8]\r\n 13. added [CasperBox][30]\r\n 14. added [trifleJS][11]\r\n 15. added [CasperJS IDE][12]\r\n 16. added [Nightmare][21]\r\n 17. added [jsdom][23]\r\n 18. added [Online HTTP client][29],\r\n     updated CasperBox (dead)\r\n\r\n\r\n  [1]: http://seleniumhq.org\r\n  [2]: http://phantomjs.org/\r\n  [3]: http://slimerjs.org/\r\n  [4]: http://casperjs.org/\r\n  [5]: https://github.com/detro/ghostdriver\r\n  [6]: https://github.com/Huddle/PhantomCSS\r\n  [7]: http://huddle.github.io/Resemble.js/\r\n  [8]: https://github.com/webdriverjs/webdrivercss\r\n  [9]: http://webdriver.io\r\n  [10]: https://github.com/Huddle/PhantomFlow\r\n  [11]: http://triflejs.org/\r\n  [12]: https://gum.co/casperjside\r\n  [13]: https://github.com/alexscheelmeyer/node-phantom\r\n  [14]: https://code.google.com/p/selenium/wiki/WebDriverJs\r\n  [15]: https://github.com/admc/wd\r\n  [16]: https://github.com/jlipps/yiewd\r\n  [17]: http://zombie.labnotes.org/\r\n  [18]: http://nightwatchjs.org/\r\n  [19]: https://github.com/deanmao/node-chimera\r\n  [20]: http://dalekjs.com\r\n  [21]: https://github.com/segmentio/nightmare\r\n  [22]: https://github.com/sgentle/phantomjs-node\r\n  [23]: https://github.com/tmpvar/jsdom\r\n  [24]: http://scrapy.org\r\n  [25]: http://django-dynamic-scraper.readthedocs.org/en/latest/\r\n  [26]: http://scrapinghub.com/scrapy-cloud.html\r\n  [27]: https://github.com/matthewhudson/snailer\r\n  [28]: https://github.com/sylvinus/node-crawler.git\r\n  [29]: https://stackoverflow.com/a/12637452/363573\r\n  [30]: https://www.casperbox.com\r\n  [31]: http://blog.screen-scraper.com/2010/06/28/comparison-of-web-scraping-software/", "last_edit_date": 1495541889, "up_vote_count": 327, "link": "https://stackoverflow.com/questions/18539491/headless-browser-and-scraping-solutions", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1378512710, "answer_id": 18668362, "path": "stack.django.answer", "score": 24, "up_vote_count": 24, "is_accepted": false, "last_activity_date": 1424763824, "last_edit_date": 1424763824, "body_markdown": "If Ruby is your thing, you may also try:\r\n\r\n - https://github.com/chriskite/anemone (dev stopped)\r\n - https://github.com/sparklemotion/mechanize\r\n - https://github.com/postmodern/spidr\r\n - https://github.com/stewartmckee/cobweb\r\n - http://watirwebdriver.com/ (Selenium)\r\n\r\nalso, Nokogiri gem can be used for scraping:\r\n\r\n - http://nokogiri.org/\r\n\r\nthere is a dedicated book about how to utilise nokogiri for scraping by packt publishing"}, {"tags": [], "down_vote_count": 0, "creation_date": 1393518218, "answer_id": 22074365, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1393518218, "body_markdown": "A kind of JS-based Selenium is [Dalek.js][1]. It not only aims for automated frontend-tests, you can also do screenshots with it. It has webdrivers for all important browsers. Unfortunately those webdrivers seem to be worth improving (just not to say &quot;buggy&quot; to Firefox).\r\n\r\n\r\n  [1]: http://dalekjs.com/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1409131071, "answer_id": 25523302, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1409131071, "body_markdown": "http://triflejs.org/ is like phantomjs but based on IE"}], "title": "Headless Browser and scraping - solutions", "view_count": 65781, "answer_count": 3, "code_snippet": [], "path": "stack.django"}, {"tags": ["django", "django-queryset"], "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1239442342, "answer_id": 739799, "path": "stack.django.answer", "score": 361, "up_vote_count": 361, "is_accepted": true, "last_activity_date": 1239442342, "body_markdown": "There is [`Q`][1] objects that allow to complex lookups. Example:\r\n\r\n    from django.db.models import Q\r\n\r\n    Item.objects.filter(Q(creator=owner) | Q(moderated=False))\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects"}, {"tags": [], "down_vote_count": 0, "creation_date": 1239450207, "answer_id": 739922, "path": "stack.django.answer", "score": 82, "up_vote_count": 82, "is_accepted": false, "last_activity_date": 1407058969, "last_edit_date": 1407058969, "body_markdown": "You can use the | operator to combine querysets directly without needing Q objects:\r\n\r\n    result = Item.objects.filter(item.creator = owner) | Item.objects.filter(item.moderated = False)\r\n\r\n(edit - I was initially unsure if this caused an extra query but @spookylukey pointed out that lazy queryset evaluation takes care of that)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1411289070, "answer_id": 25957427, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1411289070, "body_markdown": "You want to make filter dynamic then you have to use Lambda like   \r\n\r\n    from django.db.models import Q\r\n    \r\n    brands = [&#39;ABC&#39;,&#39;DEF&#39; , &#39;GHI&#39;]\r\n    \r\n    queryset = Product.objects.filter(reduce(lambda x, y: x | y, [Q(brand=item) for item in brands]))\r\n\r\n`reduce(lambda x, y: x | y, [Q(brand=item) for item in brands])` is equivalent to\r\n\r\n    Q(brand=brands[0]) | Q(brand=brands[1]) | Q(brand=brands[2]) | .....\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1427379996, "answer_id": 29281019, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1476930599, "last_edit_date": 1476930599, "body_markdown": "Similar to older answera, but a bit simpler, without the lambda:\r\n\r\n\r\n    filter_kwargs = {\r\n        &#39;field_a&#39;: 123,\r\n        &#39;field_b__in&#39;: (3, 4, 5, ),\r\n    }\r\n\r\nTo filter these two conditions using `OR`:\r\n\r\n    Item.objects.filter(Q(field_a=123) | Q(field_b__in=(3, 4, 5, ))\r\n\r\nTo get the same result programmatically:\r\n\r\n    list_of_Q = [Q(**{key: val}) for key, val in filter_kwargs.items()]\r\n    Item.objects.filter(reduce(operator.or_, list_of_Q))\r\n\r\n(broken in two lines here, for clarity)\r\n\r\n`operator` is in standard library: `import operator`  \r\nFrom docstring: \r\n &gt; or_(a, b) -- Same as a | b.\r\n\r\nFor Python3, reduce is not in standard library: `from functools import reduce`\r\n\r\n------\r\nP.S.\r\n\r\nDon&#39;t forget to make sure `list_of_Q` is not empty - `reduce()` will choke on empty list, it needs at least one element."}, {"tags": [], "down_vote_count": 0, "creation_date": 1453812168, "answer_id": 35014139, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1453812168, "body_markdown": "This might be useful https://docs.djangoproject.com/en/dev/topics/db/queries/#spanning-multi-valued-relationships\r\n\r\nBasically it sounds like they act as OR"}, {"tags": [], "down_vote_count": 0, "creation_date": 1498495452, "answer_id": 44764562, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1498495452, "body_markdown": "It is worth to note that it&#39;s possible to add **Q** expressions.\r\n\r\nFor example:\r\n\r\n    from django.db.models import Q\r\n    \r\n    query = Q(first_name=&#39;mark&#39;)\r\n    query.add(Q(email=&#39;mark@test.com&#39;), Q.OR)\r\n    query.add(Q(last_name=&#39;doe&#39;), Q.AND)\r\n    \r\n    queryset = Users.objects.filter(query)\r\n\r\nThis ends up with a query like :\r\n\r\n    (first_name = &#39;mark&#39; or email = &#39;mark@test.com&#39;) and last_name = &#39;doe&#39;\r\n\r\nThis way there is no need to deal with *or* operators, reduce&#39;s etc."}], "creation_date": 1239440526, "body_markdown": "How would I do an &quot;or&quot; in a django filter.\r\n\r\nBasically, I want to be able to list the items that either a user has added (they are listed as the creator) or the item has been approved\r\n\r\nso I basically need to select\r\n\r\n    item.creator = owner or item.moderated = False\r\n\r\nHow would I do this in django (preferably with a filter/queryset)", "title": "Django Filters - or?", "view_count": 85815, "up_vote_count": 201, "answer_count": 6, "link": "https://stackoverflow.com/questions/739776/django-filters-or", "code_snippet": ["<code>item.creator = owner or item.moderated = False\n</code>", "<code>Q</code>", "<code>from django.db.models import Q\n\nItem.objects.filter(Q(creator=owner) | Q(moderated=False))\n</code>", "<code>for f in filters: Item.objects.filter(Q(creator=f1) | Q(creator=f2) | ...)</code>", "<code>reduce(lambda q, f: q | Q(creator=f), filters, Q())</code>", "<code>Item.objects.filter(creator__in=creators)</code>", "<code>|</code>", "<code>result = Item.objects.filter(item.creator = owner) | Item.objects.filter(item.moderated = False)\n</code>", "<code>from django.db.models import Q\n\nbrands = ['ABC','DEF' , 'GHI']\n\nqueryset = Product.objects.filter(reduce(lambda x, y: x | y, [Q(brand=item) for item in brands]))\n</code>", "<code>reduce(lambda x, y: x | y, [Q(brand=item) for item in brands])</code>", "<code>Q(brand=brands[0]) | Q(brand=brands[1]) | Q(brand=brands[2]) | .....\n</code>", "<code>from functools import reduce</code>", "<code>filter_kwargs = {\n    'field_a': 123,\n    'field_b__in': (3, 4, 5, ),\n}\n</code>", "<code>OR</code>", "<code>Item.objects.filter(Q(field_a=123) | Q(field_b__in=(3, 4, 5, ))\n</code>", "<code>list_of_Q = [Q(**{key: val}) for key, val in filter_kwargs.items()]\nItem.objects.filter(reduce(operator.or_, list_of_Q))\n</code>", "<code>operator</code>", "<code>import operator</code>", "<code>from functools import reduce</code>", "<code>list_of_Q</code>", "<code>reduce()</code>", "<code>from django.db.models import Q\n\nquery = Q(first_name='mark')\nquery.add(Q(email='mark@test.com'), Q.OR)\nquery.add(Q(last_name='doe'), Q.AND)\n\nqueryset = Users.objects.filter(query)\n</code>", "<code>(first_name = 'mark' or email = 'mark@test.com') and last_name = 'doe'\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "json"], "creation_date": 1268336435, "body_markdown": "I&#39;m trying to convert a server side Ajax response script into a Django HttpResponse, but apparently it&#39;s not working.\r\n\r\nThis is the server-side script:\r\n\r\n    /* RECEIVE VALUE */\r\n    $validateValue=$_POST[&#39;validateValue&#39;];\r\n    $validateId=$_POST[&#39;validateId&#39;];\r\n    $validateError=$_POST[&#39;validateError&#39;];\r\n\r\n    /* RETURN VALUE */\r\n    $arrayToJs = array();\r\n    $arrayToJs[0] = $validateId;\r\n    $arrayToJs[1] = $validateError;\r\n\r\n    if($validateValue ==&quot;Testuser&quot;){  // Validate??\r\n        $arrayToJs[2] = &quot;true&quot;;       // RETURN TRUE\r\n        echo &#39;{&quot;jsonValidateReturn&quot;:&#39;.json_encode($arrayToJs).&#39;}&#39;;  // RETURN ARRAY WITH success\r\n    }\r\n    else{\r\n        for($x=0;$x&lt;1000000;$x++){\r\n            if($x == 990000){\r\n                $arrayToJs[2] = &quot;false&quot;;\r\n                echo &#39;{&quot;jsonValidateReturn&quot;:&#39;.json_encode($arrayToJs).&#39;}&#39;;   // RETURNS ARRAY WITH ERROR.\r\n            }\r\n        }\r\n    }\r\n\r\nAnd this is the converted code\r\n\r\n    def validate_user(request):\r\n        if request.method == &#39;POST&#39;:\r\n            vld_value = request.POST.get(&#39;validateValue&#39;)\r\n            vld_id = request.POST.get(&#39;validateId&#39;)\r\n            vld_error = request.POST.get(&#39;validateError&#39;)\r\n\r\n            array_to_js = [vld_id, vld_error, False]\r\n\r\n            if vld_value == &quot;TestUser&quot;:\r\n                array_to_js[2] = True\r\n                x = simplejson.dumps(array_to_js)\r\n                return HttpResponse(x)\r\n            else:\r\n                array_to_js[2] = False\r\n                x = simplejson.dumps(array_to_js)\r\n                error = &#39;Error&#39;\r\n                return render_to_response(&#39;index.html&#39;,{&#39;error&#39;:error},context_instance=RequestContext(request))\r\n        return render_to_response(&#39;index.html&#39;,context_instance=RequestContext(request))\r\n\r\nI&#39;m using simplejson to encode the Python list (so it will return a JSON array). I couldn&#39;t figure out the problem yet. But I think that I did something wrong about the &#39;echo&#39;.\r\n", "last_edit_date": 1340532973, "up_vote_count": 329, "link": "https://stackoverflow.com/questions/2428092/creating-a-json-response-using-django-and-python", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1268336695, "answer_id": 2428119, "path": "stack.django.answer", "score": 718, "up_vote_count": 718, "is_accepted": true, "last_activity_date": 1444649581, "last_edit_date": 1495535496, "body_markdown": "I usually use a dictionary, not a list to return JSON content. \r\n\r\n    import json\r\n\r\n    from django.http import HttpResponse\r\n\r\n    response_data = {}\r\n    response_data[&#39;result&#39;] = &#39;error&#39;\r\n    response_data[&#39;message&#39;] = &#39;Some error message&#39;\r\n\r\nPre-Django 1.7 you&#39;d return it like this:\r\n\r\n    return HttpResponse(json.dumps(response_data), content_type=&quot;application/json&quot;)\r\n\r\n\r\nFor Django 1.7+, use [`JsonResponse`](https://docs.djangoproject.com/en/dev/ref/request-response/#jsonresponse-objects) as shown in [this SO answer][1] like so : \r\n\r\n    from django.http import JsonResponse\r\n    return JsonResponse({&#39;foo&#39;:&#39;bar&#39;})\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/24411716/7376"}, {"tags": [], "down_vote_count": 1, "creation_date": 1268337329, "answer_id": 2428192, "path": "stack.django.answer", "score": 128, "up_vote_count": 129, "is_accepted": false, "last_activity_date": 1462926968, "last_edit_date": 1462926968, "body_markdown": "I use this, it works fine.\r\n\r\n    from django.utils import simplejson\r\n    from django.http import HttpResponse\r\n\r\n    def some_view(request):\r\n        to_json = {\r\n            &quot;key1&quot;: &quot;value1&quot;,\r\n            &quot;key2&quot;: &quot;value2&quot;\r\n        }\r\n        return HttpResponse(simplejson.dumps(to_json), mimetype=&#39;application/json&#39;)\r\n\r\nAlternative:\r\n    \r\n    from django.utils import simplejson\r\n\r\n    class JsonResponse(HttpResponse):\r\n        &quot;&quot;&quot;\r\n            JSON response\r\n        &quot;&quot;&quot;\r\n        def __init__(self, content, mimetype=&#39;application/json&#39;, status=None, content_type=None):\r\n            super(JsonResponse, self).__init__(\r\n                content=simplejson.dumps(content),\r\n                mimetype=mimetype,\r\n                status=status,\r\n                content_type=content_type,\r\n            )\r\n\r\nIn Django 1.7 [JsonResponse][1] objects have been added to the Django framework itself which makes this task even easier:\r\n\r\n    from django.http import JsonResponse\r\n    def some_view(request):\r\n        return JsonResponse({&quot;key&quot;: &quot;value&quot;})\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/dev/ref/request-response/#jsonresponse-objects"}, {"tags": [], "down_vote_count": 0, "creation_date": 1342181650, "answer_id": 11470298, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1342181650, "body_markdown": "You&#39;ll want to use the django serializer to help with unicode stuff:\r\n\r\n\r\n    from django.core import serializers\r\n\r\n    json_serializer = serializers.get_serializer(&quot;json&quot;)()\r\n        response =  json_serializer.serialize(list, ensure_ascii=False, indent=2, use_natural_keys=True)\r\n        return HttpResponse(response, mimetype=&quot;application/json&quot;)"}, {"tags": [], "down_vote_count": 2, "creation_date": 1349929676, "answer_id": 12832214, "path": "stack.django.answer", "score": 5, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1349929676, "last_edit_date": 1495541441, "body_markdown": "https://stackoverflow.com/questions/5106306/how-to-use-google-app-engine-with-ajax-json\r\n\r\nCode Javascript with JQuery:\r\n\r\n    $.ajax({\r\n\t\turl: &#39;/ajax&#39;,\r\n\t\tdataType : &#39;json&#39;,\r\n\t\tcache: false,\r\n\t\tsuccess: function(data) {\r\n\t\t\talert(&#39;Load was performed.&#39;+data.ajax_resp);\r\n\t\t}\r\n\t});\r\n\r\nCode Python\r\n\r\n    class Ajax(webapp2.RequestHandler):\r\n\tdef get(self):\r\n\t\tmy_response = {&#39;ajax_resp&#39;:&#39;Hello, webapp World!&#39;}\r\n\t\tdatos = json.dumps(my_response)\r\n\r\n\t\tself.response.headers.add_header(&#39;content-type&#39;, &#39;application/json&#39;, charset=&#39;utf-8&#39;)\r\n\t\tself.response.out.write(datos)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1350068005, "answer_id": 12865351, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1350068005, "body_markdown": "This is my preferred version using a class based view.\r\nSimply subclass the basic View and override the get()-method.\r\n\r\n\timport json\r\n\r\n\tclass MyJsonView(View):\r\n\r\n\t    def get(self, *args, **kwargs):\r\n\t        resp = {&#39;my_key&#39;: &#39;my value&#39;,}\r\n\t        return HttpResponse(json.dumps(resp), mimetype=&quot;application/json&quot; )\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1367588145, "answer_id": 16360219, "path": "stack.django.answer", "score": 15, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1391269869, "last_edit_date": 1391269869, "body_markdown": "    from django.http import HttpResponse\r\n    import json\r\n    \r\n    class JsonResponse(HttpResponse):\r\n        def __init__(self, content={}, mimetype=None, status=None,\r\n                 content_type=&#39;application/json&#39;):\r\n            super(JsonResponse, self).__init__(json.dumps(content), mimetype=mimetype,\r\n                                               status=status, content_type=content_type)\r\n\r\nAnd in the view:\r\n\r\n    resp_data = {&#39;my_key&#39;: &#39;my value&#39;,}\r\n    return JsonResponse(resp_data)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1403707282, "answer_id": 24411716, "path": "stack.django.answer", "score": 126, "up_vote_count": 126, "is_accepted": false, "last_activity_date": 1403707282, "body_markdown": "New in django 1.7\r\n\r\nyou could use [JsonResponse][1] objects. \r\n\r\nfrom the docs:\r\n\r\n    from django.http import JsonResponse\r\n    return JsonResponse({&#39;foo&#39;:&#39;bar&#39;})\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/dev/ref/request-response/#jsonresponse-objects"}, {"tags": [], "down_vote_count": 1, "creation_date": 1414672152, "answer_id": 26653011, "path": "stack.django.answer", "score": 20, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1414672152, "body_markdown": "Since Django 1.7 you have a standard [JsonResponse][1] that&#39;s exactly what you need:\r\n\r\n    from django.http import JsonResponse\r\n    ...\r\n    return JsonResponse(array_to_js, safe=False)\r\n\r\nYou don&#39;t even need to json.dump your array.\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.7/ref/request-response/#jsonresponse-objects"}, {"tags": [], "down_vote_count": 0, "creation_date": 1419239455, "answer_id": 27599604, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1419239455, "body_markdown": "    Django code(views.py):\r\n    \r\n    \r\n    def view(request):\r\n        if request.method == &#39;POST&#39;:\r\n            print request.body\r\n            data = request.body\r\n            return HttpResponse(json.dumps(data))\r\n\r\n\r\nHTML code(view.html):\r\n\r\n    &lt;!DOCTYPE html&gt;\r\n    &lt;html&gt;\r\n    &lt;head&gt;\r\n    &lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;script&gt;\r\n    $(document).ready(function(){\r\n        $(&quot;#mySelect&quot;).change(function(){\r\n            selected = $(&quot;#mySelect option:selected&quot;).text()\r\n            $.ajax({\r\n                type: &#39;POST&#39;,\r\n                dataType: &#39;json&#39;,\r\n                contentType: &#39;application/json; charset=utf-8&#39;,\r\n                url: &#39;/view/&#39;,\r\n                data: {\r\n                       &#39;fruit&#39;: selected\r\n                      },\r\n                success: function(result) {\r\n                        document.write(result)\r\n                        }\r\n        });\r\n      });\r\n    });\r\n    &lt;/script&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n    \r\n    &lt;form&gt;\r\n        {{data}}\r\n        &lt;br&gt;\r\n    Select your favorite fruit:\r\n    &lt;select id=&quot;mySelect&quot;&gt;\r\n      &lt;option value=&quot;apple&quot; selected &gt;Select fruit&lt;/option&gt;\r\n      &lt;option value=&quot;apple&quot;&gt;Apple&lt;/option&gt;\r\n      &lt;option value=&quot;orange&quot;&gt;Orange&lt;/option&gt;\r\n      &lt;option value=&quot;pineapple&quot;&gt;Pineapple&lt;/option&gt;\r\n      &lt;option value=&quot;banana&quot;&gt;Banana&lt;/option&gt;\r\n    &lt;/select&gt;\r\n    &lt;/form&gt;\r\n    &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1441743150, "answer_id": 32466453, "path": "stack.django.answer", "score": 12, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1441743150, "body_markdown": "For those who use Django 1.7+\r\n\r\n    from django.http import JsonResponse\r\n\r\n    def your_view(request):\r\n        json_object = {&#39;key&#39;: &quot;value&quot;}\r\n        return JsonResponse(json_object)\r\n\r\n[official docs][1]\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.8/ref/request-response/#jsonresponse-objects"}, {"tags": [], "down_vote_count": 0, "creation_date": 1500137249, "answer_id": 45120600, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1500137249, "body_markdown": "In View use this: \r\n\r\n    form.field.errors|striptags\r\n\r\nfor getting validation messages without html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1515261444, "answer_id": 48130216, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1515264677, "last_edit_date": 1515264677, "body_markdown": "Its very convenient with Django version 1.7 or higher as you have the JsonResponse class, which is a subclass of HttpResponse.\r\n\r\n    from django.http import JsonResponse\r\n        def profile(request):\r\n            data = {\r\n                &#39;name&#39;: &#39;Raghav&#39;,\r\n                &#39;location&#39;: &#39;India&#39;,\r\n                &#39;is_active&#39;: False,\r\n                &#39;count&#39;: 28\r\n            }\r\n            return JsonResponse(data)\r\n\r\nFor older versions of Django, you must use an HttpResponse object.\r\n\r\n    import json\r\n    from django.http import HttpResponse\r\n\r\n    def profile(request):\r\n        data = {\r\n            &#39;name&#39;: &#39;Raghav&#39;,\r\n            &#39;location&#39;: &#39;India&#39;,\r\n            &#39;is_active&#39;: False,\r\n            &#39;count&#39;: 28\r\n        }\r\n        dump = json.dumps(data)\r\n        return HttpResponse(dump, content_type=&#39;application/json&#39;)\r\n\r\n\r\n\r\n"}], "title": "Creating a JSON response using Django and Python", "view_count": 351952, "answer_count": 12, "code_snippet": ["<code>/* RECEIVE VALUE */\n$validateValue=$_POST['validateValue'];\n$validateId=$_POST['validateId'];\n$validateError=$_POST['validateError'];\n\n/* RETURN VALUE */\n$arrayToJs = array();\n$arrayToJs[0] = $validateId;\n$arrayToJs[1] = $validateError;\n\nif($validateValue ==\"Testuser\"){  // Validate??\n    $arrayToJs[2] = \"true\";       // RETURN TRUE\n    echo '{\"jsonValidateReturn\":'.json_encode($arrayToJs).'}';  // RETURN ARRAY WITH success\n}\nelse{\n    for($x=0;$x&lt;1000000;$x++){\n        if($x == 990000){\n            $arrayToJs[2] = \"false\";\n            echo '{\"jsonValidateReturn\":'.json_encode($arrayToJs).'}';   // RETURNS ARRAY WITH ERROR.\n        }\n    }\n}\n</code>", "<code>def validate_user(request):\n    if request.method == 'POST':\n        vld_value = request.POST.get('validateValue')\n        vld_id = request.POST.get('validateId')\n        vld_error = request.POST.get('validateError')\n\n        array_to_js = [vld_id, vld_error, False]\n\n        if vld_value == \"TestUser\":\n            array_to_js[2] = True\n            x = simplejson.dumps(array_to_js)\n            return HttpResponse(x)\n        else:\n            array_to_js[2] = False\n            x = simplejson.dumps(array_to_js)\n            error = 'Error'\n            return render_to_response('index.html',{'error':error},context_instance=RequestContext(request))\n    return render_to_response('index.html',context_instance=RequestContext(request))\n</code>", "<code>@ajax_request</code>", "<code>import json\n\nfrom django.http import HttpResponse\n\nresponse_data = {}\nresponse_data['result'] = 'error'\nresponse_data['message'] = 'Some error message'\n</code>", "<code>return HttpResponse(json.dumps(response_data), content_type=\"application/json\")\n</code>", "<code>JsonResponse</code>", "<code>from django.http import JsonResponse\nreturn JsonResponse({'foo':'bar'})\n</code>", "<code>content_type</code>", "<code>mimetype</code>", "<code>from django.utils import simplejson\nfrom django.http import HttpResponse\n\ndef some_view(request):\n    to_json = {\n        \"key1\": \"value1\",\n        \"key2\": \"value2\"\n    }\n    return HttpResponse(simplejson.dumps(to_json), mimetype='application/json')\n</code>", "<code>from django.utils import simplejson\n\nclass JsonResponse(HttpResponse):\n    \"\"\"\n        JSON response\n    \"\"\"\n    def __init__(self, content, mimetype='application/json', status=None, content_type=None):\n        super(JsonResponse, self).__init__(\n            content=simplejson.dumps(content),\n            mimetype=mimetype,\n            status=status,\n            content_type=content_type,\n        )\n</code>", "<code>from django.http import JsonResponse\ndef some_view(request):\n    return JsonResponse({\"key\": \"value\"})\n</code>", "<code>from django.utils import simplejson</code>", "<code>from django.http import JsonResponse\nreturn JsonResponse({'foo':'bar'})\n</code>", "<code>ensure_ascii</code>", "<code>from django.http import JsonResponse\n...\nreturn JsonResponse(array_to_js, safe=False)\n</code>", "<code>from django.http import HttpResponse\nimport json\n\nclass JsonResponse(HttpResponse):\n    def __init__(self, content={}, mimetype=None, status=None,\n             content_type='application/json'):\n        super(JsonResponse, self).__init__(json.dumps(content), mimetype=mimetype,\n                                           status=status, content_type=content_type)\n</code>", "<code>resp_data = {'my_key': 'my value',}\nreturn JsonResponse(resp_data)\n</code>", "<code>from django.http import JsonResponse\n\ndef your_view(request):\n    json_object = {'key': \"value\"}\n    return JsonResponse(json_object)\n</code>", "<code>from django.core import serializers\n\njson_serializer = serializers.get_serializer(\"json\")()\n    response =  json_serializer.serialize(list, ensure_ascii=False, indent=2, use_natural_keys=True)\n    return HttpResponse(response, mimetype=\"application/json\")\n</code>", "<code>$.ajax({\n    url: '/ajax',\n    dataType : 'json',\n    cache: false,\n    success: function(data) {\n        alert('Load was performed.'+data.ajax_resp);\n    }\n});\n</code>", "<code>class Ajax(webapp2.RequestHandler):\ndef get(self):\n    my_response = {'ajax_resp':'Hello, webapp World!'}\n    datos = json.dumps(my_response)\n\n    self.response.headers.add_header('content-type', 'application/json', charset='utf-8')\n    self.response.out.write(datos)\n</code>", "<code>import json\n\nclass MyJsonView(View):\n\n    def get(self, *args, **kwargs):\n        resp = {'my_key': 'my value',}\n        return HttpResponse(json.dumps(resp), mimetype=\"application/json\" )\n</code>", "<code>Django code(views.py):\n\n\ndef view(request):\n    if request.method == 'POST':\n        print request.body\n        data = request.body\n        return HttpResponse(json.dumps(data))\n</code>", "<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n$(document).ready(function(){\n    $(\"#mySelect\").change(function(){\n        selected = $(\"#mySelect option:selected\").text()\n        $.ajax({\n            type: 'POST',\n            dataType: 'json',\n            contentType: 'application/json; charset=utf-8',\n            url: '/view/',\n            data: {\n                   'fruit': selected\n                  },\n            success: function(result) {\n                    document.write(result)\n                    }\n    });\n  });\n});\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;form&gt;\n    {{data}}\n    &lt;br&gt;\nSelect your favorite fruit:\n&lt;select id=\"mySelect\"&gt;\n  &lt;option value=\"apple\" selected &gt;Select fruit&lt;/option&gt;\n  &lt;option value=\"apple\"&gt;Apple&lt;/option&gt;\n  &lt;option value=\"orange\"&gt;Orange&lt;/option&gt;\n  &lt;option value=\"pineapple\"&gt;Pineapple&lt;/option&gt;\n  &lt;option value=\"banana\"&gt;Banana&lt;/option&gt;\n&lt;/select&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code>", "<code>from django.http import JsonResponse\n    def profile(request):\n        data = {\n            'name': 'Raghav',\n            'location': 'India',\n            'is_active': False,\n            'count': 28\n        }\n        return JsonResponse(data)\n</code>", "<code>import json\nfrom django.http import HttpResponse\n\ndef profile(request):\n    data = {\n        'name': 'Raghav',\n        'location': 'India',\n        'is_active': False,\n        'count': 28\n    }\n    dump = json.dumps(data)\n    return HttpResponse(dump, content_type='application/json')\n</code>", "<code>form.field.errors|striptags\n</code>"], "path": "stack.django"}, {"tags": ["bash"], "creation_date": 1240573899, "body_markdown": "I&#39;ve renamed some files in a fairly large project and want to remove the .pyc files they&#39;ve left behind. I tried the bash script:\r\n\r\n     rm -r *.pyc\r\n\r\nBut that doesn&#39;t recurse through the folders as I thought it would. What am I doing wrong?\r\n\r\n", "last_edit_date": 1459564083, "up_vote_count": 535, "link": "https://stackoverflow.com/questions/785519/how-do-i-remove-all-pyc-files-from-a-project", "_childDocuments_": [{"tags": [], "down_vote_count": 17, "creation_date": 1240574127, "answer_id": 785534, "path": "stack.django.answer", "score": 902, "up_vote_count": 919, "is_accepted": true, "last_activity_date": 1488566571, "last_edit_date": 1488566571, "body_markdown": "    find . -name &quot;*.pyc&quot; -exec rm -f {} \\;\r\n\r\nas mentioned in the comments, you can also use the `-delete` action\r\n\r\n    find . -name \\*.pyc -delete\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1240574313, "answer_id": 785546, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1240574313, "body_markdown": "`rm -r` recurses into directories, but only the directories you give to `rm`. It will also delete those directories. One solution is:\r\n\r\n    for i in $( find . -name *.pyc )\r\n    do\r\n      rm $i\r\n    done\r\n\r\n`find` will find all *.pyc files recursively in the current directory, and the `for` loop will iterate through the list of files found, removing each one."}, {"tags": [], "down_vote_count": 0, "creation_date": 1240679578, "answer_id": 789347, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1391182357, "last_edit_date": 1391182357, "body_markdown": "    find . -name &#39;*.pyc&#39; -print0 | xargs -0 rm\r\n\r\nThe find recursively looks for *.pyc files.  The xargs takes that list of names and sends it to rm.  The -print0 and the -0 tell the two commands to seperate the filenames with null characters.  This allows it to work correctly on file names containing spaces, and even a file name containing a new line.  \r\n\r\nThe solution with -exec works, but it spins up a new copy of rm for every file.  On a slow system or with a great many files, that&#39;ll take too long.\r\n\r\nYou could also add a couple more args:\r\n\r\n    find . -iname &#39;*.pyc&#39; -print0 | xargs -0 --no-run-if-empty  rm\r\n\r\niname adds case insensitivity, like *.PYC .  The no-run-if-empty keeps you from getting an error from rm if you have no such files.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1240679982, "answer_id": 789352, "path": "stack.django.answer", "score": 30, "up_vote_count": 30, "is_accepted": false, "last_activity_date": 1376653468, "last_edit_date": 1376653468, "body_markdown": "I used to use an alias for that:\r\n\r\n    $ which pycclean\r\n\r\n    pycclean is aliased to `find . -name &quot;*.pyc&quot; | xargs -I {} rm -v &quot;{}&quot;&#39;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1240680972, "answer_id": 789378, "path": "stack.django.answer", "score": 46, "up_vote_count": 46, "is_accepted": false, "last_activity_date": 1485785211, "last_edit_date": 1485785211, "body_markdown": "If you&#39;re using bash &gt;=4.0 (or zsh)\r\n\r\n    rm **/*.pyc\r\n\r\nNote that `*/*.pyc` selects all `.pyc` files in the immediate first-level subdirectories while `**/*.pyc` recursively scans the whole directory tree. As an example, `foo/bar/qux.pyc` will be deleted by `rm **/*.pyc` but not by `*/*.pyc`.\r\n\r\nThe globstar shell options must be enabled. To enable `globstar`:\r\n\r\n    shopt -s globstar\r\nand to check its status:\r\n\r\n    shopt globstar"}, {"tags": [], "down_vote_count": 0, "creation_date": 1243597068, "answer_id": 925597, "path": "stack.django.answer", "score": 877, "up_vote_count": 877, "is_accepted": false, "last_activity_date": 1453293984, "last_edit_date": 1453293984, "body_markdown": "`find . -name &#39;*.pyc&#39; -delete`\r\n\r\nSurely the simplest."}, {"tags": [], "down_vote_count": 1, "creation_date": 1243597709, "answer_id": 925631, "path": "stack.django.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1243597709, "body_markdown": "Just to throw another variant into the mix, you can also use backquotes like this:\r\n\r\n    rm `find . -name *.pyc`"}, {"tags": [], "down_vote_count": 1, "creation_date": 1346701323, "answer_id": 12253230, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1346701323, "body_markdown": "full recursive\r\n \r\n\tll **/**/*.pyc\r\n\trm **/**/*.pyc"}, {"tags": [], "down_vote_count": 1, "creation_date": 1354447125, "answer_id": 13668751, "path": "stack.django.answer", "score": 74, "up_vote_count": 75, "is_accepted": false, "last_activity_date": 1354447125, "body_markdown": "In current version of debian you have `pyclean` script which is in `python-minimal` package. \r\n\r\nUsage is simple:\r\n\r\n    pyclean .\r\n\r\n\r\n   "}, {"tags": [], "down_vote_count": 0, "creation_date": 1396882945, "answer_id": 22916141, "path": "stack.django.answer", "score": 63, "up_vote_count": 63, "is_accepted": false, "last_activity_date": 1396882945, "body_markdown": "Add to your `~/.bashrc`:\r\n\r\n    pyclean () {\r\n            find . -type f -name &quot;*.py[co]&quot; -delete\r\n            find . -type d -name &quot;__pycache__&quot; -delete\r\n    }\r\n\r\nThis removes all .pyc and .pyo files, and `__pycache__` directories. It&#39;s also very fast.\r\n\r\nUsage is simply:\r\n\r\n    $ cd /path/to/directory\r\n    $ pyclean"}, {"tags": [], "down_vote_count": 0, "creation_date": 1405298967, "answer_id": 24728241, "path": "stack.django.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1405298967, "body_markdown": "\r\n    $ find . -name &#39;*.pyc&#39; -delete\r\n\r\n \r\n\r\nThis is faster than\r\n\r\n    $ find . -name &quot;*.pyc&quot; -exec rm -rf {} \\;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1414714226, "answer_id": 26665550, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1415099493, "last_edit_date": 1415099493, "body_markdown": "First run:\r\n\r\n    find . -type f -name &quot;*.py[c|o]&quot; -exec rm -f {} +\r\n\r\nThen add:\r\n\r\n    export PYTHONDONTWRITEBYTECODE=1\r\n\r\nTo ~/.profile"}, {"tags": [], "down_vote_count": 1, "creation_date": 1416485515, "answer_id": 27039296, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1416485515, "body_markdown": "    find . -name &quot;*.pyc&quot;|xargs rm -rf"}, {"tags": [], "down_vote_count": 1, "creation_date": 1445608067, "answer_id": 33303946, "path": "stack.django.answer", "score": 7, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1445608067, "body_markdown": "For windows users:\r\n\r\n    del /S *.pyc"}, {"tags": [], "down_vote_count": 0, "creation_date": 1450028776, "answer_id": 34254234, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1450028776, "body_markdown": "## Django Extension\r\n\r\n&gt; Note: This answer is very specific to **[Django project][1]** that have already been using [Django Extension][2].\r\n\r\n    python manage.py clean_pyc\r\n\r\nThe implementation can be viewed in [its source code][3].\r\n\r\n\r\n  [1]: https://www.djangoproject.com/\r\n  [2]: https://github.com/django-extensions/django-extensions\r\n  [3]: https://github.com/django-extensions/django-extensions/blob/master/django_extensions/management/commands/clean_pyc.py"}, {"tags": [], "down_vote_count": 0, "creation_date": 1492136904, "answer_id": 43404397, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1509324564, "last_edit_date": 1509324564, "body_markdown": "Further, people usually want to remove all `*.pyc`, `*.pyo` files and `__pycache__` directories recursively in the current directory.\r\n\r\nCommand:\r\n\r\n    find . | grep -E &quot;(__pycache__|\\.pyc|\\.pyo$)&quot; | xargs rm -rf\r\n\r\n"}], "title": "How do I remove all .pyc files from a project?", "view_count": 211038, "answer_count": 16, "code_snippet": ["<code> rm -r *.pyc\n</code>", "<code>rm</code>", "<code>**/*.pyc</code>", "<code>find . -name \"*.pyc\" -exec rm -f {} \\;\n</code>", "<code>-delete</code>", "<code>find . -name \\*.pyc -delete\n</code>", "<code>find . -name \\*.pyc -delete</code>", "<code>-delete</code>", "<code>find</code>", "<code>find . -name '*.pyc' -delete</code>", "<code>rm -rf</code>", "<code>find</code>", "<code>-delete</code>", "<code>__pycache__</code>", "<code>-name '*.py?'</code>", "<code>.pyo, .pyc,...</code>", "<code>pyclean</code>", "<code>python-minimal</code>", "<code>pyclean .\n</code>", "<code>pyclean</code>", "<code>py3clean</code>", "<code>~/.bashrc</code>", "<code>pyclean () {\n        find . -type f -name \"*.py[co]\" -delete\n        find . -type d -name \"__pycache__\" -delete\n}\n</code>", "<code>__pycache__</code>", "<code>$ cd /path/to/directory\n$ pyclean\n</code>", "<code>find . -type d -name \"__pycache__\" -delete</code>", "<code>2&gt;/dev/null</code>", "<code>rm **/*.pyc\n</code>", "<code>*/*.pyc</code>", "<code>.pyc</code>", "<code>**/*.pyc</code>", "<code>foo/bar/qux.pyc</code>", "<code>rm **/*.pyc</code>", "<code>*/*.pyc</code>", "<code>globstar</code>", "<code>shopt -s globstar\n</code>", "<code>shopt globstar\n</code>", "<code>rm **/*.pyc</code>", "<code>rm */*.pyc</code>", "<code>rm */*.pyc</code>", "<code>.pyc</code>", "<code>rm **/*.pyc</code>", "<code>.pyc</code>", "<code>**</code>", "<code>*</code>", "<code>shopt globstar</code>", "<code>$ which pycclean\n\npycclean is aliased to `find . -name \"*.pyc\" | xargs -I {} rm -v \"{}\"'\n</code>", "<code>find -print0</code>", "<code>xargs -0</code>", "<code>find . -name '*.pyc' -print0 | xargs -0 rm\n</code>", "<code>find . -iname '*.pyc' -print0 | xargs -0 --no-run-if-empty  rm\n</code>", "<code>$ find . -name '*.pyc' -delete\n</code>", "<code>$ find . -name \"*.pyc\" -exec rm -rf {} \\;\n</code>", "<code>rm `find . -name *.pyc`\n</code>", "<code>rm</code>", "<code>del /S *.pyc\n</code>", "<code>ll **/**/*.pyc\nrm **/**/*.pyc\n</code>", "<code>**</code>", "<code>d0k</code>", "<code>shopt -s globstar</code>", "<code>ll</code>", "<code>ls -l</code>", "<code>.pyc</code>", "<code>.</code>", "<code>echo **/*.pyc</code>", "<code>rm **/**/*.pyc</code>", "<code>python manage.py clean_pyc\n</code>", "<code>*.pyc</code>", "<code>*.pyo</code>", "<code>__pycache__</code>", "<code>find . | grep -E \"(__pycache__|\\.pyc|\\.pyo$)\" | xargs rm -rf\n</code>", "<code>find . -type f -name \"*.py[c|o]\" -exec rm -f {} +\n</code>", "<code>export PYTHONDONTWRITEBYTECODE=1\n</code>", "<code>rm -r</code>", "<code>rm</code>", "<code>for i in $( find . -name *.pyc )\ndo\n  rm $i\ndone\n</code>", "<code>find</code>", "<code>for</code>", "<code>find</code>", "<code>-exec</code>", "<code>find . -name '*.pyc' -exec rm {} +</code>", "<code>find . -name \"*.pyc\"|xargs rm -rf\n</code>"], "path": "stack.django"}, {"tags": ["javascript", "template-engine", "node.js"], "creation_date": 1259035728, "body_markdown": "I&#39;m experimenting with building an entire web application using Node.js. Is there a template engine similar to (for example) the Django template engine or the like that at least allows you to extend base templates?\r\n\r\n", "last_edit_date": 1370354129, "up_vote_count": 262, "link": "https://stackoverflow.com/questions/1787716/is-there-a-template-engine-for-node-js", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1259041920, "answer_id": 1788083, "path": "stack.django.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1259041920, "body_markdown": "If you&#39;re looking for a minimalist approach to templates, you can check out [JSON Template][1].\r\n\r\nA more full-featured alternative is [EJS][2].  It&#39;s a bit more similar to something you&#39;d get from Django.\r\n\r\nYour mileage may vary for each of these - they&#39;re designed for a browser Javascript environment, and not Node.js.\r\n\r\n\r\n  [1]: http://code.google.com/p/json-template/\r\n  [2]: http://embeddedjs.com/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1259042209, "answer_id": 1788096, "path": "stack.django.answer", "score": 15, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1259042209, "body_markdown": "There are new templating engines all the time.\r\n\r\nunderscore.js adds a lot of functional programming support to js, and has templating.\r\n\r\nAnd just today I heard about this: http://github.com/SamuraiJack/Shotenjin-Joosed\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1260046455, "answer_id": 1853426, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1260046455, "body_markdown": "Did you try [PURE][1] ?&lt;br /&gt;If you give it a try, feel free to post any trouble you may face at the [forum][2]\r\n\r\nWhile it was primarly designed for the browser, it works well with Jaxer and Rhino.\r\n\r\nI don&#39;t know node.js yet but if you can cache some JS and functions in memory, the speed should be even more impressive.\r\n\r\n\r\n  [1]: http://wiki.github.com/pure/pure\r\n  [2]: http://groups.google.com/group/Pure-Unobtrusive-Rendering-Engine"}, {"tags": [], "down_vote_count": 2, "creation_date": 1261076178, "answer_id": 1923827, "path": "stack.django.answer", "score": 52, "up_vote_count": 54, "is_accepted": false, "last_activity_date": 1261076178, "body_markdown": "You should be able to use mustache.js, if it doesn&#39;t work send me the issues and I&#39;ll get it fixed because I&#39;m about to be using them in node.js anyway.\r\n\r\nhttp://github.com/janl/mustache.js\r\n\r\nI know that it works without a DOM because a bunch of CouchDB standalone apps are using it in a Spidermonkey view server."}, {"tags": [], "down_vote_count": 1, "creation_date": 1261341002, "answer_id": 1936924, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1261341002, "body_markdown": "There is a port of the Django templating engine to JavaScript. However, its not been updated for a long time but it may still have enough features.\r\n\r\nhttp://code.google.com/p/jtl-javascript-template/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1262541950, "answer_id": 1995729, "path": "stack.django.answer", "score": 13, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1262541950, "body_markdown": "You should take a look at [node-asyncEJS][1], which is explicitly designed to take the asynchronous nature of node.js into account. It even allows async code blocks inside of the template.\r\n\r\nHere an example form the documentation:\r\n\r\n    &lt;html&gt;\r\n      &lt;head&gt;\r\n        &lt;% ctx.hello = &quot;World&quot;;  %&gt;\r\n        &lt;title&gt;&lt;%= &quot;Hello &quot; + ctx.hello %&gt;&lt;/title&gt;\r\n      &lt;/head&gt;\r\n      &lt;body&gt;\r\n\r\n        &lt;h1&gt;&lt;%? setTimeout(function () { res.print(&quot;Async Header&quot;); res.finish(); }, 2000)  %&gt;&lt;/h1&gt;\r\n        &lt;p&gt;&lt;%? setTimeout(function () { res.print(&quot;Body&quot;); res.finish(); }, 1000)  %&gt;&lt;/p&gt;\r\n\r\n      &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\n\r\n  [1]: http://github.com/cramforce/node-asyncEJS"}, {"tags": [], "down_vote_count": 1, "creation_date": 1268269156, "answer_id": 2421845, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1268269156, "body_markdown": "I have done some work on a pretty complete port of the Django template language for Simon Willisons [djangode project][1] (Utilities functions for node.js that borrow some useful concepts from Django).\r\n\r\nSee the documentation [here][2].\r\n\r\n  [1]: http://github.com/simonw/djangode/\r\n  [2]: http://github.com/simonw/djangode/blob/master/TEMPLATES.md"}, {"tags": [], "down_vote_count": 0, "creation_date": 1275288466, "answer_id": 2941826, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1275288466, "body_markdown": "Try [Yajet][1] too. ;-)  It&#39;s a new one that I just released yesterday, but I&#39;m using it for a while now and it&#39;s stable and fast (templates are compiled to a native JS function).\r\n\r\nIt has IMO the best syntax possible for a template engine, and a rich feature set despite its small code size (8.5K minified).  It has directives that allow you to introduce conditionals, iterate arrays/hashes, define reusable template components etc.\r\n\r\n  [1]: http://www.yajet.net/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1278083411, "answer_id": 3166940, "path": "stack.django.answer", "score": 40, "up_vote_count": 41, "is_accepted": false, "last_activity_date": 1278083411, "body_markdown": "If you like haml, but want something even better check out http://jade-lang.com for node, I wrote haml.js as well :)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1278694180, "answer_id": 3214795, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1278694180, "body_markdown": "Google&#39;s Closure Templates is a natively-JavaScript templating system and a seemingly natural fit with NodeJS. [Here are some instructions][1] for integrating them.\r\n\r\n\r\n  [1]: http://www.dashdashverbose.com/2009/11/closure-templates-and-nodejs-server.html"}, {"tags": [], "down_vote_count": 1, "creation_date": 1281732503, "answer_id": 3480553, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1281732503, "body_markdown": "haml is a good choice for node.js\r\n\r\nhttp://github.com/creationix/haml-js\r\n\r\n**haml-js**\r\n\r\n    !!! XML\r\n    !!! strict\r\n    %html{ xmlns: &quot;http://www.w3.org/1999/xhtml&quot; }\r\n      %head\r\n        %title Sample haml template\r\n      %body\r\n        .profile\r\n          .left.column\r\n            #date= print_date()\r\n            #address= current_user.address\r\n          .right.column\r\n            #email= current_user.email\r\n            #bio= current_user.bio\r\n\r\n**html**\r\n\r\n    &lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39; ?&gt;\r\n    &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;\r\n    &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;&lt;title&gt;Sample haml template\r\n    &lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;profile&quot;&gt;&lt;div class=&quot;left column&quot;&gt;&lt;div id=&quot;date&quot;&gt;January 1, 2009\r\n    &lt;/div&gt;&lt;div id=&quot;address&quot;&gt;Richardson, TX\r\n    &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;right column&quot;&gt;&lt;div id=&quot;email&quot;&gt;tim@creationix.com\r\n    &lt;/div&gt;&lt;div id=&quot;bio&quot;&gt;Experienced software professional...\r\n    &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1283928267, "answer_id": 3665226, "path": "stack.django.answer", "score": 163, "up_vote_count": 164, "is_accepted": false, "last_activity_date": 1473427443, "last_edit_date": 1473427443, "body_markdown": "Check out the Node js modules wiki page. They have listed all the [templating engines][1] supporting node.js.\r\n\r\n\r\n\r\n  [1]: https://github.com/nodejs/node/wiki/Modules#templating"}, {"tags": [], "down_vote_count": 0, "creation_date": 1301348862, "answer_id": 5465464, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1301348862, "body_markdown": "I&#39;ve heard good things about {dust} http://akdubya.github.com/dustjs/#dust"}, {"tags": [], "down_vote_count": 0, "creation_date": 1313065517, "answer_id": 7025795, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1369900710, "last_edit_date": 1369900710, "body_markdown": "**WARNING : JinJs is not maintained anymore. It is still working but not compatible with the lastest version of express.**\r\n\r\nYou could try using [jinjs][1]. It is a port of the Jinja, a very good Python templating system. You can install it with npm like this :\r\n\r\n    npm install jinjs\r\n\r\nin template.tpl :\r\n\r\n    I say : &quot;{{ sentence }}&quot;\r\n\r\nin your template.js :\r\n\r\n    jinjs = require(&#39;jinjs&#39;);\r\n    jinjs.registerExtension(&#39;.tpl&#39;);\r\n    tpl = require(&#39;./template&#39;);\r\n    str = tpl.render ({sentence : &#39;Hello, World!&#39;});\r\n    console.log(str);\r\n\r\nThe output will be :\r\n\r\n    I say : &quot;Hello, World!&quot;\r\n\r\nWe are actively developing it, a good documentation should come pretty soon.\r\n\r\n  [1]: http://bitbucket.org/ravelsoft/node-jinjs"}, {"tags": [], "down_vote_count": 1, "creation_date": 1317024474, "answer_id": 7552250, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1317024474, "body_markdown": "You can use dojox.dtl of DojoToolkit.org. Note that dojo 1.7 can well run on NodeJS and perform as a server side library. If you&#39;re interested, I can give you a simple example."}, {"tags": [], "down_vote_count": 1, "creation_date": 1318973744, "answer_id": 7814051, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1319308032, "last_edit_date": 1319308032, "body_markdown": "**Try &quot;vash&quot; - asp.net mvc like razor syntax for node.js**\r\n\r\nhttps://github.com/kirbysayshi/Vash\r\n\r\nalso checkout: http://haacked.com/archive/2011/01/06/razor-syntax-quick-reference.aspx\r\n\r\n-----------------------------------------------------------\r\n    // sample\r\n    var tmpl = vash.compile(&#39;&lt;hr/&gt;@model.a,@model.b&lt;hr/&gt;&#39;);\r\n    var html = tmpl({&quot;a&quot;: &quot;hello&quot;, &quot;b&quot;: &quot;world&quot;});\r\n    res.write(html);"}, {"tags": [], "down_vote_count": 0, "creation_date": 1329620070, "answer_id": 9346273, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1329620070, "body_markdown": "I found [hogan.js][1] from Twitter and recommended by Tim O&#39;Reilly on his site. I have no best practice with it, but I trust on Twitter and O&#39;Reilly. You should try...\r\n\r\n\r\n  [1]: http://twitter.github.com/hogan.js/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1331534781, "answer_id": 9662778, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1331534781, "body_markdown": "Here&#39;s a good evaluation of several engines\r\nhttp://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1341223792, "answer_id": 11291596, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1341223792, "body_markdown": "I use Twig with Symfony and am now dabbling in node.js, so I&#39;m looking at https://github.com/justjohn/twig.js and https://github.com/paularmstrong/swig, which you&#39;ll probably like if you use django."}, {"tags": [], "down_vote_count": 1, "creation_date": 1345981331, "answer_id": 12129816, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1345981331, "body_markdown": "Honestly, the best and most simple template engine for Node.js is (IMHO) Plates ([https://github.com/flatiron/plates][1]). You might also want to check out the Flatiron MVC framework for Node.js ([http://flatiron.org][2]).\r\n\r\n\r\n  [1]: https://github.com/flatiron/plates\r\n  [2]: http://flatiron.org"}, {"tags": [], "down_vote_count": 0, "creation_date": 1350816193, "answer_id": 12997112, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1400824000, "last_edit_date": 1400824000, "body_markdown": "You can try [beardless][1] (it&#39;s inspired by weld/plates):\r\n\r\nFor example:\r\n\r\n    { post:\r\n      { title: &quot;Next generation templating: Start shaving!&quot;\r\n      , text: &quot;TL;DR You should really check out beardless!&quot;\r\n      , comments:\r\n        [ {text: &quot;Hey cool!&quot;}\r\n        , {text: &quot;Really gotta check that out...&quot;}  ]\r\n      }\r\n    }\r\n\r\n\r\nYour template:\r\n\r\n    &lt;h1 data-template=&quot;post.title&quot;&gt;&lt;/h1&gt;\r\n    &lt;p data-template=&quot;post.text&quot;&gt;&lt;/p&gt;\r\n    &lt;div&gt;\r\n      &lt;div data-template=&quot;post.comments&quot; class=&quot;comment&quot;&gt;\r\n        &lt;p data-template=&quot;post.comments.text&quot;&gt;&lt;/p&gt;\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n\r\n\r\nOutput:\r\n\r\n    &lt;h1&gt;Next generation templating: Start shaving!&lt;/h1&gt;\r\n    &lt;p&gt;TL;DR You should really check out beardless!&lt;/p&gt;\r\n    &lt;div&gt;\r\n      &lt;div class=&quot;comment&quot;&gt;\r\n        &lt;p&gt;Hey cool!&lt;/p&gt;\r\n      &lt;/div&gt;\r\n      &lt;div class=&quot;comment&quot;&gt;\r\n        &lt;p&gt;Really gotta check that out...&lt;/p&gt;\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n\r\n\r\n  [1]: https://github.com/marcelklehr/beardless"}], "title": "Is there a template engine for Node.js?", "view_count": 131343, "answer_count": 21, "code_snippet": ["<code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;% ctx.hello = \"World\";  %&gt;\n    &lt;title&gt;&lt;%= \"Hello \" + ctx.hello %&gt;&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n    &lt;h1&gt;&lt;%? setTimeout(function () { res.print(\"Async Header\"); res.finish(); }, 2000)  %&gt;&lt;/h1&gt;\n    &lt;p&gt;&lt;%? setTimeout(function () { res.print(\"Body\"); res.finish(); }, 1000)  %&gt;&lt;/p&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;\n</code>", "<code>{ post:\n  { title: \"Next generation templating: Start shaving!\"\n  , text: \"TL;DR You should really check out beardless!\"\n  , comments:\n    [ {text: \"Hey cool!\"}\n    , {text: \"Really gotta check that out...\"}  ]\n  }\n}\n</code>", "<code>&lt;h1 data-template=\"post.title\"&gt;&lt;/h1&gt;\n&lt;p data-template=\"post.text\"&gt;&lt;/p&gt;\n&lt;div&gt;\n  &lt;div data-template=\"post.comments\" class=\"comment\"&gt;\n    &lt;p data-template=\"post.comments.text\"&gt;&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code>", "<code>&lt;h1&gt;Next generation templating: Start shaving!&lt;/h1&gt;\n&lt;p&gt;TL;DR You should really check out beardless!&lt;/p&gt;\n&lt;div&gt;\n  &lt;div class=\"comment\"&gt;\n    &lt;p&gt;Hey cool!&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div class=\"comment\"&gt;\n    &lt;p&gt;Really gotta check that out...&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code>", "<code>npm install jinjs\n</code>", "<code>I say : \"{{ sentence }}\"\n</code>", "<code>jinjs = require('jinjs');\njinjs.registerExtension('.tpl');\ntpl = require('./template');\nstr = tpl.render ({sentence : 'Hello, World!'});\nconsole.log(str);\n</code>", "<code>I say : \"Hello, World!\"\n</code>", "<code>!!! XML\n!!! strict\n%html{ xmlns: \"http://www.w3.org/1999/xhtml\" }\n  %head\n    %title Sample haml template\n  %body\n    .profile\n      .left.column\n        #date= print_date()\n        #address= current_user.address\n      .right.column\n        #email= current_user.email\n        #bio= current_user.bio\n</code>", "<code>&lt;?xml version='1.0' encoding='utf-8' ?&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt;&lt;title&gt;Sample haml template\n&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"profile\"&gt;&lt;div class=\"left column\"&gt;&lt;div id=\"date\"&gt;January 1, 2009\n&lt;/div&gt;&lt;div id=\"address\"&gt;Richardson, TX\n&lt;/div&gt;&lt;/div&gt;&lt;div class=\"right column\"&gt;&lt;div id=\"email\"&gt;tim@creationix.com\n&lt;/div&gt;&lt;div id=\"bio\"&gt;Experienced software professional...\n&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\n</code>", "<code>// sample\nvar tmpl = vash.compile('&lt;hr/&gt;@model.a,@model.b&lt;hr/&gt;');\nvar html = tmpl({\"a\": \"hello\", \"b\": \"world\"});\nres.write(html);\n</code>"], "path": "stack.django"}, {"tags": ["apache", ".htaccess", "mod-rewrite"], "creation_date": 1328477837, "body_markdown": "Many posters have problems debugging their RewriteRule and RewriteCond statements within their **`.htaccess`** files.  Most of these are using a shared hosting service and therefore don&#39;t have access to the root server configuration. They cannot avoid using `.htaccess` files for rewriting and _cannot_ enable a RewriteLogLevel&quot; as many respondents suggest.  Also there are many `.htaccess`-specific pitfalls and constraints are aren&#39;t covered well.  Setting up a local test LAMP stack involves too much of a learning curve for most.   \r\n\r\nSo my Q here is how would we recommend that they ***debug*** their rules _themselves_.  I provide a few suggestions below.  Other suggestions would be appreciated.\r\n\r\n 1. **Understand that the mod_rewrite engine cycles through `.htaccess` files**. The engine runs this loop:\r\n\r\n        do\r\n          execute server and vhost rewrites (in the Apache Virtual Host Config)\r\n          find the lowest &quot;Per Dir&quot; .htaccess file on the file path with rewrites enabled\r\n          if found(.htaccess)\r\n             execute .htaccess rewrites (in the user&#39;s directory)\r\n        while rewrite occurred\r\n\r\n    So your rules will get executed repeatedly and if you change the URI path then it may end up executing other `.htaccess`files if they exist. So make sure that you terminate this loop, if necessary by adding extra `RewriteCond` to stop rules firing.  Also delete any lower level `.htaccess` rewrite rulesets unless explicitly intent to use multi-level rulesets.  \r\n\r\n 2. **Make sure that the syntax of each Regexp is correct** by testing against a set of test patterns to make sure that is a valid syntax and does what you intend with a fully range of test URIs.  See [answer below][1] for more details.\r\n\r\n 3. **Build up your rules incrementally in a test directory.**  You can make use of the &quot;execute the deepest `.htaccess` file on the path feature&quot; to set up a separate test directory (tree) and debug rulesets here without screwing up your main rules and stopping your site working.  You have to add them one at a time because this is the only way to localise failures to individual rules.\r\n\r\n 4. **Use a dummy script stub to dump out server and environment variables**. (See **Listing 2**)If your app uses, say, `blog/index.php` then you can copy this into `test/blog/index.php` and use it to test out your blog rules in the `test` subdirectory.  You can also use environment variables to make sure that the rewrite engine in interpreting substitution strings correctly, e.g.\r\n\r\n        RewriteRule ^(.*) - [E=TEST0:%{DOCUMENT_ROOT}/blog/html_cache/$1.html]\r\n\r\n    and look for these **REDIRECT_\\*** variables in the phpinfo dump.  BTW, I used this one and discovered on my site that I had to use `%{ENV:DOCUMENT_ROOT_REAL}` instead.  In the case of redirector looping  **REDIRECT_REDIRECT_\\*** variables list the previous pass. Etc.. \r\n\r\n 5. **Make sure that you don&#39;t get bitten by your browser caching incorrect 301 redirects**.  See [answer below][2].  My thanks to [Ulrich Palha][3] for this.\r\n\r\n 6. The rewrite engine seems sensitive to cascaded rules within an `.htaccess` context, (that is where a `RewriteRule` results in a substitution and this falls though to further rules), as I found bugs with internal sub-requests [(1)][4], and incorrect **PATH_INFO** processing which can often be prevents by use of the \\[NS\\], \\[L\\] and \\[PT\\] flags.\r\n\r\nAny more comment or suggestions?\r\n\r\n##Listing 1 -- phpinfo##\r\n\r\n    &lt;?php phpinfo(INFO_ENVIRONMENT|INFO_VARIABLES);\r\n\r\n  [1]: https://stackoverflow.com/questions/9153262/tips-for-debugging-htaccess-rewrite-rules/9261963#9261963\r\n  [2]: https://stackoverflow.com/questions/9153262/tips-for-debugging-htaccess-rewrite-rules/9261963#9204355 \r\n  [3]: https://stackoverflow.com/users/499472/ulrich-palha\r\n  [4]: http://httpd.apache.org/docs/2.2/rewrite/flags.html#flag_n", "last_edit_date": 1495542899, "up_vote_count": 237, "link": "https://stackoverflow.com/questions/9153262/tips-for-debugging-htaccess-rewrite-rules", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1328752228, "answer_id": 9204355, "path": "stack.django.answer", "score": 117, "up_vote_count": 117, "is_accepted": false, "last_activity_date": 1328789967, "last_edit_date": 1328789967, "body_markdown": "Here are a few additional tips on testing rules that may ease the debugging for users on shared hosting\r\n\r\n# 1. Use a Fake-user agent \r\n When testing a new rule, add a condition to only execute it with a `fake` user-agent that you will use for your requests.  This way it will not affect anyone else on your site.\r\n\r\ne.g \r\n\r\n    #protect with a fake user agent\r\n    RewriteCond %{HTTP_USER_AGENT}  ^my-fake-user-agent$\r\n    #Here is the actual rule I am testing\r\n    RewriteCond %{HTTP_HOST} !^www\\.domain\\.com$ [NC] \r\n    RewriteRule ^ http://www.domain.com%{REQUEST_URI} [L,R=302] \r\n\r\nIf you are using Firefox, you can use the [User Agent Switcher][1] to create the fake user agent string and test.    \r\n\r\n\r\n\r\n\r\n# 2. Do not use 301 until you are done testing \r\n\r\nI have seen so many posts where people are still testing their rules and they are using 301&#39;s. **DON&#39;T**. \r\n\r\nIf you are not using suggestion 1 on your site, not only you, but anyone visiting your site at the time will be affected by the 301. \r\n\r\nRemember that they are permanent, and aggressively cached by your browser.\r\nUse a 302 instead till you are sure, then change it to a 301.\r\n\r\n# 3. Remember that 301&#39;s are aggressively cached in your browser \r\nIf your rule does not work and it looks right to you, and you were not using suggestions 1 and 2, then re-test after clearing your browser cache or while in private browsing.\r\n\r\n# 4. Use a HTTP Capture tool\r\nUse a HTTP capture tool like [Fiddler][2] to see the actual HTTP traffic between your browser and the server. \r\n\r\nWhile others might say that your `site does not look right`, you could instead see and report that `all of the images, css and js are returning 404 errors`, quickly narrowing down the problem.\r\n\r\nWhile others will report that you `started at URL A and ended at URL C`, you will be able to see that they started at `URL A, were 302 redirected to URL B and 301 redirected to URL C`. Even if URL C was the ultimate goal, you will know that this is bad for SEO and needs to be fixed.\r\n\r\nYou will be able to see cache headers that were set on the server side, replay requests, modify request headers to test ....\r\n\r\n\r\n----------\r\n\r\n\r\n\r\n\r\n  [1]: https://addons.mozilla.org/en-US/firefox/addon/user-agent-switcher/\r\n  [2]: http://fiddler2.com/fiddler2/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1329142284, "answer_id": 9261963, "path": "stack.django.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1370071423, "last_edit_date": 1370071423, "body_markdown": "#Make sure that the syntax of each Regexp is correct#\r\n by testing against a set of test patterns to make sure that is a valid syntax and does what you intend with a fully range of test URIs. \r\n\r\nSee **regexpCheck.php** below for a simple script that you can add to a private/test directory in your site to help you do this.  I&#39;ve kept this brief rather than pretty.  Just past this into a file `regexpCheck.php` in a test directory to use it on your website.  This will help you build up any regexp and test it against a list of test cases as you do so.  I am using the PHP PCRE engine here, but having had a look at the Apache source, this is basically identical to the one used in Apache.  There are many HowTos and tutorials which provide templates and can help you build your regexp skills.\r\n\r\n##Listing 1 -- regexpCheck.php##\r\n\r\n&lt;!-- language: lang-php --&gt;\r\n\r\n    &lt;html&gt;&lt;head&gt;&lt;title&gt;Regexp checker&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\r\n    &lt;?php \r\n        $a_pattern= isset($_POST[&#39;pattern&#39;]) ? $_POST[&#39;pattern&#39;] : &quot;&quot;;\r\n        $a_ntests = isset($_POST[&#39;ntests&#39;]) ? $_POST[&#39;ntests&#39;] : 1;\r\n        $a_test   = isset($_POST[&#39;test&#39;]) ? $_POST[&#39;test&#39;] : array();\r\n        \r\n        $res = array(); $maxM=-1; \r\n        foreach($a_test as $t ){\r\n            $rtn = @preg_match(&#39;#&#39;.$a_pattern.&#39;#&#39;,$t,$m);\r\n            if($rtn == 1){\r\n                $maxM=max($maxM,count($m));\r\n                $res[]=array_merge( array(&#39;matched&#39;),  $m );\r\n            } else {\r\n                $res[]=array(($rtn === FALSE ? &#39;invalid&#39; : &#39;non-matched&#39;));\r\n            }\r\n        } \r\n    ?&gt; &lt;p&gt;&amp;nbsp; &lt;/p&gt;\r\n    &lt;form method=&quot;post&quot; action=&quot;&lt;?php echo $_SERVER[&#39;SCRIPT_NAME&#39;];?&gt;&quot;&gt;\r\n        &lt;label for=&quot;pl&quot;&gt;Regexp Pattern: &lt;/label&gt;\r\n        &lt;input id=&quot;p&quot; name=&quot;pattern&quot; size=&quot;50&quot; value=&quot;&lt;?php echo htmlentities($a_pattern,ENT_QUOTES,&quot;UTF-8&quot;);;?&gt;&quot; /&gt;\r\n        &lt;label for=&quot;n&quot;&gt;&amp;nbsp; &amp;nbsp; Number of test vectors: &lt;/label&gt;\r\n        &lt;input id=&quot;n&quot; name=&quot;ntests&quot;  size=&quot;3&quot; value=&quot;&lt;?php echo $a_ntests;?&gt;&quot;/&gt;\r\n        &lt;input type=&quot;submit&quot; name=&quot;go&quot; value=&quot;OK&quot;/&gt;&lt;hr/&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;\r\n        &lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Test Vector&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp; &amp;nbsp; &lt;b&gt;Result&lt;/b&gt;&lt;/td&gt;\r\n    &lt;?php \r\n        for ( $i=0; $i&lt;$maxM; $i++ ) echo &quot;&lt;td&gt;&amp;nbsp; &amp;nbsp; &lt;b&gt;\\$$i&lt;/b&gt;&lt;/td&gt;&quot;;\r\n        echo &quot;&lt;/tr&gt;&lt;tbody&gt;\\n&quot;;\r\n        for( $i=0; $i&lt;$a_ntests; $i++ ){\r\n            echo &#39;&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;input name=&quot;test[]&quot; value=&quot;&#39;, \r\n                htmlentities($a_test[$i], ENT_QUOTES,&quot;UTF-8&quot;),&#39;&quot; /&gt;&lt;/td&gt;&#39;;\r\n            foreach ($res[$i] as $v) { echo &#39;&lt;td&gt;&amp;nbsp; &amp;nbsp; &#39;,htmlentities($v, ENT_QUOTES,&quot;UTF-8&quot;),&#39;&amp;nbsp; &amp;nbsp; &lt;/td&gt;&#39;;}\r\n            echo &quot;&lt;/tr&gt;\\n&quot;;\r\n        }\r\n    ?&gt; &lt;/table&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1343678087, "answer_id": 11728633, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1359758236, "last_edit_date": 1359758236, "body_markdown": "I found this question while trying to debug my mod_rewrite issues, and it definitely has some helpful advice. But in the end the most important thing is to make sure you have your regex syntax correct. Due to problems with my own RE syntax, installing the regexpCheck.php script was not a viable option.\r\n\r\nBut since Apache uses Perl-Compatible Regular Expressions (PCRE)s, any tool which helps writing PCREs should help. I&#39;ve used RegexPlanet&#39;s tool with Java and Javascript REs in the past, and was happy to find that they support Perl as well.\r\n\r\nJust type in your regular expression and one or more example URLs, and it will tell you if the regex matches (a &quot;1&quot; in the &quot;~=&quot; column) and if applicable, any matching groups (the numbers in the &quot;split&quot; column will correspond to the numbers Apache expects, e.g. $1, $2 etc.) for each URL. They claim PCRE support is &quot;in beta&quot;, but it was just what I needed to solve my syntax problems.\r\n\r\n[http://www.regexplanet.com/advanced/perl/index.html][1]\r\n\r\nI&#39;d have simply added a comment to an existing answer but my reputation isn&#39;t yet at that level. Hope this helps someone.\r\n\r\n\r\n  [1]: http://www.regexplanet.com/advanced/perl/index.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1359463807, "answer_id": 14583317, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1359463807, "body_markdown": "**Make sure you use the percent sign in front of variables, not the dollar sign.**\r\n\r\nIt&#39;s `%{HTTP_HOST}`, **not** `${HTTP_HOST}`. There will be nothing in the error_log, there will be no Internal Server Errors, your regexp is still correct, the rule will just not match. This is really hideous if you work with django / genshi templates a lot and have `${}` for variable substitution in muscle memory."}, {"tags": [], "down_vote_count": 0, "creation_date": 1359980791, "answer_id": 14686785, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1359980791, "body_markdown": "One from a couple of hours that I wasted:\r\n\r\nIf you&#39;ve applied all these tips and are only going on 500 errors because you don&#39;t have access to the server error log, maybe the problem isn&#39;t in the .htaccess but in the files it redirects to.  \r\n\r\nAfter I had fixed my .htaccess-problem I spent two more hours trying to fix it some more, even though I simply had forgotten about some permissions."}, {"tags": [], "down_vote_count": 0, "creation_date": 1363299397, "answer_id": 15421248, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1363299397, "last_edit_date": 1495539207, "body_markdown": "Regarding 4., you still need to ensure that your &quot;dummy script stub&quot; is actually the target URL after all the rewriting is done, or you won&#39;t see anything!\r\n\r\nA similar/related trick (see [this question](https://stackoverflow.com/questions/7806916/how-can-i-debug-mod-rewrite-rules)) is to insert a temporary rule such as:\r\n\r\n    RewriteRule (.*) /show.php?url=$1 [END]\r\n\r\nWhere `show.php` is some very simple script that just displays its `$_GET` parameters (you can display environment variables too, if you want).\r\n\r\nThis will stop the rewriting at the point you insert it into the ruleset, rather like a breakpoint in a debugger.\r\n\r\nIf you&#39;re using Apache &lt;2.3.9, you&#39;ll need to use `[L]` rather than `[END]`, and you *may* then need to add:\r\n\r\n    RewriteRule ^show.php$ - [L]\r\n\r\nAt the very top of your ruleset, *if* the URL `/show.php` is itself being rewritten."}, {"tags": [], "down_vote_count": 0, "creation_date": 1371798180, "answer_id": 17229466, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1371798180, "body_markdown": "**Don&#39;t forget that in .htaccess files it is a relative URL that is matched.**\r\n\r\nIn a .htaccess file the following RewriteRule will never match:\r\n\r\n    RewriteRule ^/(.*)     /something/$s\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1381726495, "answer_id": 19353715, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1381726495, "body_markdown": "(Similar to Doin idea)\r\nTo show what is being matched, I use this code\r\n\r\n    $keys = array_keys($_GET);\r\n    foreach($keys as $i=&gt;$key){\r\n    \techo &quot;$i =&gt; $key &lt;br&gt;&quot;;\r\n    }\r\n\r\nSave it to r.php on the server root and then do some tests in .htaccess  \r\nFor example, i want to match urls that do not start with a language prefix\r\n\r\n    RewriteRule ^(?!(en|de)/)(.*)$ /r.php?$1&amp;$2 [L] #$1&amp;$2&amp;...\r\n    RewriteRule ^(.*)$ /r.php?nomatch [L] #report nomatch and exit\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1391697841, "answer_id": 21605970, "path": "stack.django.answer", "score": 58, "up_vote_count": 58, "is_accepted": false, "last_activity_date": 1426294432, "last_edit_date": 1426294432, "body_markdown": "Online .htaccess rewrite testing\r\n================================\r\n\r\nI found [this](http://htaccess.madewithlove.be/) Googling for RegEx help, it saved me a lot of time from having to upload new `.htaccess` files every time I make a small modification.\r\n\r\nfrom the site:\r\n\r\n&gt;htaccess tester\r\n\r\n&gt;To test your htaccess rewrite rules, simply fill in the url that you&#39;re applying the rules to, place the contents of your htaccess on the larger input area and press &quot;Check Now&quot; button.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1437571878, "answer_id": 31564645, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1438698952, "last_edit_date": 1438698952, "body_markdown": "## Set environment variables and use headers to receive them:\r\n\r\nYou can create new environment variables with RewriteRule lines, as mentioned by OP:\r\n\r\n    RewriteRule ^(.*) - [E=TEST0:%{DOCUMENT_ROOT}/blog/html_cache/$1.html]\r\n\r\nBut if you can&#39;t get a server-side script to work, how can you then read this environment variable? One solution is to set a header:\r\n\r\n    Header set TEST_FOOBAR &quot;%{REDIRECT_TEST0}e&quot;\r\n\r\nThe value [accepts format specifiers][1], including the `%{NAME}e` specifier for environment variables (don&#39;t forget the lowercase e). Sometimes, you&#39;ll need to add the `REDIRECT_` prefix, but I haven&#39;t worked out when the prefix gets added and when it doesn&#39;t.\r\n\r\n  [1]: https://httpd.apache.org/docs/2.2/mod/mod_headers.html#header"}, {"tags": [], "down_vote_count": 0, "creation_date": 1441345160, "answer_id": 32390816, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1441345160, "last_edit_date": 1495541916, "body_markdown": "I&#39;ll leave this here, maybe obvious detail, but got me banging my head for hours:\r\nbe careful using `%{REQUEST_URI}` because what [@Krist van Besien](https://stackoverflow.com/a/17229466/1262357) say in his answer is totally right, **but not for the REQUEST_URI string**, because the out put of this *TestString* starts with a `/`. So take care:\r\n\r\n    RewriteCond %{REQUEST_URI} ^/assets/$  \r\n                                ^\r\n                                | check this pesky fella right here if missing"}, {"tags": [], "down_vote_count": 1, "creation_date": 1485597487, "answer_id": 41908462, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1485597487, "body_markdown": "If you planning on writing more than just one line of rules in .htacesss,  \r\ndon&#39;t even think about trying one of those hot-fix methods to debug it.\r\n\r\nI have wasted days on setting multiple rules without feedback from LOGs, only to finally giving up on one.  \r\nI got Apache on my PC, copied the whole site to HDD, and had the whole rule-set sorted out using logs real fast.  \r\nThen I reviewed my old rules which been working, I saw they are not really doing what was desired. A time bomb for a little different address.\r\n\r\nThere are so many pit falls in rewrite rules, it&#39;s not a straight logic thing at all.  \r\nYou can get Apache up and running in ten minutes, it&#39;s 10MB, good license, *NIX/WIN/MAC ready, even without install.  \r\nAlso, check the header lines of your server and get the same version of Apache from archive if it&#39;s old. My OP is still on 2.0, many things are not supported.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1489506177, "answer_id": 42790426, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1489506177, "body_markdown": "If you&#39;re creating redirections, test with [curl][1] to avoid browser caching issues.\r\nUse -I to fetch http headers only.\r\nUse -L to follow all redirections.\r\n\r\n\r\n  [1]: https://curl.haxx.se/docs/manpage.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1490608672, "answer_id": 43043330, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1490608672, "last_edit_date": 1495540056, "body_markdown": "Some mistakes I observed happens when writing `.htaccess`\r\n\r\nUsing of `^(.*)$` repetitively in multiple rules, using `^(.*)$` causes other rules to be impotent in most cases, because it matches all of the url in single hit.\r\n\r\nSo, if we are using rule for this url `sapmle/url` it will also consume this url `sapmle/url/string`.\r\n\r\n---\r\n\r\n[`[L]`][1] flag should be used to ensure our rule has done processing.\r\n\r\n---\r\nShould know about:\r\n\r\n[Difference in %n and $n][2]\r\n----------------------------\r\n\r\n`%n` is matched during `%{RewriteCond}` part and `$n` is matches on `%{RewriteRule}` part.\r\n\r\n[Working of RewriteBase][3]\r\n--------------------------\r\n\r\n&gt; The RewriteBase directive specifies the URL prefix to be used for\r\n&gt; per-directory (htaccess) RewriteRule directives that substitute a\r\n&gt; relative path.\r\n&gt; \r\n&gt; This directive is required when you use a relative path in a\r\n&gt; substitution in per-directory (htaccess) context unless any of the\r\n&gt; following conditions are true:\r\n&gt; \r\n&gt; The original request, and the substitution, are underneath the\r\n&gt; DocumentRoot (as opposed to reachable by other means, such as Alias).\r\n&gt; The filesystem path to the directory containing the RewriteRule,\r\n&gt; suffixed by the relative substitution is also valid as a URL path on\r\n&gt; the server (this is rare). In Apache HTTP Server 2.4.16 and later,\r\n&gt; this directive may be omitted when the request is mapped via Alias or\r\n&gt; mod_userdir.\r\n\r\n\r\n  [1]: https://httpd.apache.org/docs/current/rewrite/flags.html#flag_l\r\n  [2]: https://stackoverflow.com/questions/6654834/difference-between-1-vs-1-in-htaccess\r\n  [3]: https://httpd.apache.org/docs/current/mod/mod_rewrite.html#rewritebase"}], "title": "Tips for debugging .htaccess rewrite rules", "view_count": 90184, "answer_count": 14, "code_snippet": ["<code>.htaccess</code>", "<code>.htaccess</code>", "<code>.htaccess</code>", "<code>.htaccess</code>", "<code>do\n  execute server and vhost rewrites (in the Apache Virtual Host Config)\n  find the lowest \"Per Dir\" .htaccess file on the file path with rewrites enabled\n  if found(.htaccess)\n     execute .htaccess rewrites (in the user's directory)\nwhile rewrite occurred\n</code>", "<code>.htaccess</code>", "<code>RewriteCond</code>", "<code>.htaccess</code>", "<code>.htaccess</code>", "<code>blog/index.php</code>", "<code>test/blog/index.php</code>", "<code>test</code>", "<code>RewriteRule ^(.*) - [E=TEST0:%{DOCUMENT_ROOT}/blog/html_cache/$1.html]\n</code>", "<code>%{ENV:DOCUMENT_ROOT_REAL}</code>", "<code>.htaccess</code>", "<code>RewriteRule</code>", "<code>&lt;?php phpinfo(INFO_ENVIRONMENT|INFO_VARIABLES);\n</code>", "<code>fake</code>", "<code>#protect with a fake user agent\nRewriteCond %{HTTP_USER_AGENT}  ^my-fake-user-agent$\n#Here is the actual rule I am testing\nRewriteCond %{HTTP_HOST} !^www\\.domain\\.com$ [NC] \nRewriteRule ^ http://www.domain.com%{REQUEST_URI} [L,R=302] \n</code>", "<code>site does not look right</code>", "<code>all of the images, css and js are returning 404 errors</code>", "<code>started at URL A and ended at URL C</code>", "<code>URL A, were 302 redirected to URL B and 301 redirected to URL C</code>", "<code>[L,R=302]</code>", "<code>[L, R=302]</code>", "<code>[L,R]</code>", "<code>302</code>", "<code>.htaccess</code>", "<code>RewriteRule ^/(.*)     /something/$s\n</code>", "<code>/</code>", "<code>regexpCheck.php</code>", "<code>&lt;html&gt;&lt;head&gt;&lt;title&gt;Regexp checker&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&lt;?php \n    $a_pattern= isset($_POST['pattern']) ? $_POST['pattern'] : \"\";\n    $a_ntests = isset($_POST['ntests']) ? $_POST['ntests'] : 1;\n    $a_test   = isset($_POST['test']) ? $_POST['test'] : array();\n\n    $res = array(); $maxM=-1; \n    foreach($a_test as $t ){\n        $rtn = @preg_match('#'.$a_pattern.'#',$t,$m);\n        if($rtn == 1){\n            $maxM=max($maxM,count($m));\n            $res[]=array_merge( array('matched'),  $m );\n        } else {\n            $res[]=array(($rtn === FALSE ? 'invalid' : 'non-matched'));\n        }\n    } \n?&gt; &lt;p&gt;&amp;nbsp; &lt;/p&gt;\n&lt;form method=\"post\" action=\"&lt;?php echo $_SERVER['SCRIPT_NAME'];?&gt;\"&gt;\n    &lt;label for=\"pl\"&gt;Regexp Pattern: &lt;/label&gt;\n    &lt;input id=\"p\" name=\"pattern\" size=\"50\" value=\"&lt;?php echo htmlentities($a_pattern,ENT_QUOTES,\"UTF-8\");;?&gt;\" /&gt;\n    &lt;label for=\"n\"&gt;&amp;nbsp; &amp;nbsp; Number of test vectors: &lt;/label&gt;\n    &lt;input id=\"n\" name=\"ntests\"  size=\"3\" value=\"&lt;?php echo $a_ntests;?&gt;\"/&gt;\n    &lt;input type=\"submit\" name=\"go\" value=\"OK\"/&gt;&lt;hr/&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n    &lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;Test Vector&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp; &amp;nbsp; &lt;b&gt;Result&lt;/b&gt;&lt;/td&gt;\n&lt;?php \n    for ( $i=0; $i&lt;$maxM; $i++ ) echo \"&lt;td&gt;&amp;nbsp; &amp;nbsp; &lt;b&gt;\\$$i&lt;/b&gt;&lt;/td&gt;\";\n    echo \"&lt;/tr&gt;&lt;tbody&gt;\\n\";\n    for( $i=0; $i&lt;$a_ntests; $i++ ){\n        echo '&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;input name=\"test[]\" value=\"', \n            htmlentities($a_test[$i], ENT_QUOTES,\"UTF-8\"),'\" /&gt;&lt;/td&gt;';\n        foreach ($res[$i] as $v) { echo '&lt;td&gt;&amp;nbsp; &amp;nbsp; ',htmlentities($v, ENT_QUOTES,\"UTF-8\"),'&amp;nbsp; &amp;nbsp; &lt;/td&gt;';}\n        echo \"&lt;/tr&gt;\\n\";\n    }\n?&gt; &lt;/table&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;\n</code>", "<code>import_request_variables</code>", "<code>extract($_GET)</code>", "<code>extract($_POST)</code>", "<code>RewriteRule ^(.*) - [E=TEST0:%{DOCUMENT_ROOT}/blog/html_cache/$1.html]\n</code>", "<code>Header set TEST_FOOBAR \"%{REDIRECT_TEST0}e\"\n</code>", "<code>%{NAME}e</code>", "<code>REDIRECT_</code>", "<code>.htaccess</code>", "<code>%{HTTP_HOST}</code>", "<code>${HTTP_HOST}</code>", "<code>${}</code>", "<code>curl -IvL ...</code>", "<code>RewriteRule (.*) /show.php?url=$1 [END]\n</code>", "<code>show.php</code>", "<code>$_GET</code>", "<code>[L]</code>", "<code>[END]</code>", "<code>RewriteRule ^show.php$ - [L]\n</code>", "<code>/show.php</code>", "<code>.htaccess</code>", "<code>^(.*)$</code>", "<code>^(.*)$</code>", "<code>sapmle/url</code>", "<code>sapmle/url/string</code>", "<code>[L]</code>", "<code>%n</code>", "<code>%{RewriteCond}</code>", "<code>$n</code>", "<code>%{RewriteRule}</code>", "<code>$keys = array_keys($_GET);\nforeach($keys as $i=&gt;$key){\n    echo \"$i =&gt; $key &lt;br&gt;\";\n}\n</code>", "<code>RewriteRule ^(?!(en|de)/)(.*)$ /r.php?$1&amp;$2 [L] #$1&amp;$2&amp;...\nRewriteRule ^(.*)$ /r.php?nomatch [L] #report nomatch and exit\n</code>", "<code>QUERY_STRING</code>", "<code>%{REQUEST_URI}</code>", "<code>/</code>", "<code>RewriteCond %{REQUEST_URI} ^/assets/$  \n                            ^\n                            | check this pesky fella right here if missing\n</code>", "<code>mod_rewrite</code>", "<code>htaccess</code>"], "path": "stack.django"}, {"tags": ["python", "pip"], "creation_date": 1272360205, "body_markdown": "Is it possible to upgrade all Python packages at one time with **[`pip`][1]**?\r\n\r\nNote that there is [a feature request][2] for this on the official issue tracker.\r\n\r\n\r\n  [1]: https://pypi.python.org/pypi/pip\r\n  [2]: https://github.com/pypa/pip/issues/59", "last_edit_date": 1487628622, "up_vote_count": 1293, "link": "https://stackoverflow.com/questions/2720014/upgrading-all-packages-with-pip", "_childDocuments_": [{"tags": [], "down_vote_count": 14, "creation_date": 1281470209, "answer_id": 3452888, "path": "stack.django.answer", "score": 1495, "up_vote_count": 1509, "is_accepted": true, "last_activity_date": 1507057337, "last_edit_date": 1507057337, "body_markdown": "There isn&#39;t a built-in flag yet, but you can use\r\n\r\n    pip freeze --local | grep -v &#39;^\\-e&#39; | cut -d = -f 1  | xargs -n1 pip install -U\r\n\r\nNote: there are infinite potential variations for this. I&#39;m trying to keep this answer short and simple, but please do suggest variations in the comments!\r\n\r\nRelevant edits:\r\n\r\n - Added a `grep` to skip &quot;-e&quot; package definitions, as suggested by @jawache (Yes, you could replace `grep`+`cut` with `sed` or `awk` or `perl` or...).\r\n - Newer versions of `pip` allow you to list outdated packages: \r\n\r\n        pip list --outdated --format=freeze\r\n\r\n - Added `-n1` to `xargs`, prevents stopping everything if updating one package fails (thanks [@andsens])\r\n\r\n[@andsens]: https://stackoverflow.com/users/339505/andsens\r\n"}, {"tags": [], "down_vote_count": 4, "creation_date": 1304134276, "answer_id": 5839291, "path": "stack.django.answer", "score": 489, "up_vote_count": 493, "is_accepted": false, "last_activity_date": 1511091272, "last_edit_date": 1511091272, "body_markdown": "You can use the following Python code. Unlike `pip freeze`, this will not print warnings and FIXME errors.\r\n\r\n    import pip\r\n    from subprocess import call\r\n    \r\n    packages = [dist.project_name for dist in pip.get_installed_distributions()]\r\n    call(&quot;pip install --upgrade &quot; + &#39; &#39;.join(packages), shell=True)"}, {"tags": [], "down_vote_count": 2, "creation_date": 1306234700, "answer_id": 6109360, "path": "stack.django.answer", "score": 4, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1306398643, "last_edit_date": 1306398643, "body_markdown": "Here is my variation on rbp&#39;s answer, which bypasses &quot;editable&quot; and development distributions. It shares two flaws of the original: it re-downloads and reinstalls unnecessarily; and an error on one package will prevent the upgrade of every package after that.\r\n\r\n    pip freeze |sed -ne &#39;s/==.*//p&#39; |xargs pip install -U --\r\n\r\nRelated bug reports, a bit disjointed after the migration from bitbucket:\r\n\r\n- https://github.com/pypa/pip/issues/49\r\n- https://github.com/pypa/pip/issues/59\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1307710249, "answer_id": 6306608, "path": "stack.django.answer", "score": 67, "up_vote_count": 69, "is_accepted": false, "last_activity_date": 1307710249, "body_markdown": "You can just print the packages that are outdated\r\n\r\n    pip freeze | cut -d = -f 1 | xargs -n 1 pip search | grep -B2 &#39;LATEST:&#39;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1315906952, "answer_id": 7399772, "path": "stack.django.answer", "score": 13, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1315906952, "body_markdown": "when using a virtualenv and if you just want to upgrade packages **added** to your virtualenv, you may want to do:\r\n\r\n    pip install `pip freeze -l | cut --fields=1 -d = -` --upgrade\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1330193074, "answer_id": 9446559, "path": "stack.django.answer", "score": 78, "up_vote_count": 79, "is_accepted": false, "last_activity_date": 1330193074, "body_markdown": "Windows version after consulting excellent [documentation](http://www.robvanderwoude.com/ntfor.php#FOR_F) for `FOR` by Rob van der Woude\r\n\r\n`for /F &quot;delims===&quot; %i in (&#39;pip freeze -l&#39;) do pip install -U %i`"}, {"tags": [], "down_vote_count": 3, "creation_date": 1333489098, "answer_id": 10001798, "path": "stack.django.answer", "score": 26, "up_vote_count": 29, "is_accepted": false, "last_activity_date": 1357236129, "last_edit_date": 1357236129, "body_markdown": "From https://github.com/cakebread/yolk :\r\n\r\n    $ pip install -U `yolk -U | awk &#39;{print $1}&#39; | uniq`\r\n\r\nhowever you need to get yolk first:\r\n\r\n    $ sudo pip install -U yolk"}, {"tags": [], "down_vote_count": 1, "creation_date": 1351378567, "answer_id": 13104909, "path": "stack.django.answer", "score": 9, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1351378567, "body_markdown": "@Ramana&#39;s worked the best for me, of those here, but I had to add a few catches:\r\n\r\n    import pip\r\n    for dist in pip.get_installed_distributions():\r\n        if &#39;site-packages&#39; in dist.location:\r\n            try:\r\n                pip.call_subprocess([&#39;pip&#39;, &#39;install&#39;, &#39;-U&#39;, dist.key])\r\n            except Exception, exc:\r\n                print exc\r\n\r\nThe `site-packages` check excludes my development packages, because they are not located in the system site-packages directory. The try-except simply skips packages that have been removed from PyPI.\r\n\r\n@endolith: I was hoping for an easy `pip.install(dist.key, upgrade=True)`, too, but it doesn&#39;t look like pip was meant to be used by anything but the command line (the docs don&#39;t mention the internal API, and the pip developers didn&#39;t use docstrings)."}, {"tags": [], "down_vote_count": 2, "creation_date": 1367195677, "answer_id": 16269635, "path": "stack.django.answer", "score": 440, "up_vote_count": 442, "is_accepted": false, "last_activity_date": 1476249606, "last_edit_date": 1495540966, "body_markdown": "To upgrade all local packages; you could use [`pip-review`](https://github.com/jgonggrijp/pip-review):\r\n\r\n    $ pip install pip-review\r\n    $ pip-review --local --interactive\r\n\r\n---\r\n`pip-review` is a fork of `pip-tools`. See [`pip-tools` issue](https://github.com/nvie/pip-tools/issues/185) mentioned by [@knedlsepp](https://stackoverflow.com/questions/2720014/upgrading-all-packages-with-pip/16269635#comment51585726_16269635). `pip-review` package works but `pip-tools` package no longer works.\n\n`pip-review` works on Windows [since version 0.5](https://stackoverflow.com/questions/2720014/upgrading-all-packages-with-pip/16269635#comment67179492_16269635)."}, {"tags": [], "down_vote_count": 1, "creation_date": 1369226540, "answer_id": 16692085, "path": "stack.django.answer", "score": 22, "up_vote_count": 23, "is_accepted": false, "last_activity_date": 1369227486, "last_edit_date": 1369227486, "body_markdown": "One-liner version of @Ramana&#39;s answer.\r\n\r\n    python -c &#39;import pip, subprocess; [subprocess.call(&quot;pip install -U &quot; + d.project_name, shell=1) for d in pip.get_installed_distributions()]&#39;\r\n`"}, {"tags": [], "down_vote_count": 1, "creation_date": 1374025427, "answer_id": 17689760, "path": "stack.django.answer", "score": 12, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1374026492, "last_edit_date": 1374026492, "body_markdown": "You can try this :\r\n\r\n    for i in ` pip list|awk -F &#39; &#39; &#39;{print $1}&#39;`;do pip install --upgrade $i;done\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1390728693, "answer_id": 21361820, "path": "stack.django.answer", "score": 9, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1390728693, "body_markdown": "Sent through [a pull-request to the pip folk][1]; in the meantime use this pip library solution I wrote:\r\n\r\n    from pip import get_installed_distributions\r\n    from pip.commands import install\r\n    \r\n    install_cmd = install.InstallCommand()\r\n    \r\n    options, args = install_cmd.parse_args([package.project_name\r\n                                            for package in\r\n                                            get_installed_distributions()])\r\n    \r\n    options.upgrade = True\r\n    install_cmd.run(options, args)  # Chuck this in a try/except and print as wanted\r\n\r\n\r\n  [1]: https://github.com/pypa/pip/pull/1506"}, {"tags": [], "down_vote_count": 2, "creation_date": 1393835520, "answer_id": 22141956, "path": "stack.django.answer", "score": 4, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1397148503, "last_edit_date": 1397148503, "body_markdown": "I have tried the code of Ramana and I found out on Ubuntu you have to write `sudo` for each command. Here is my script which works fine on ubuntu 13.10:\r\n\r\n    #!/usr/bin/env python\r\n    import pip\r\n    from subprocess import call\r\n    \r\n    for dist in pip.get_installed_distributions():\r\n        call(&quot;sudo pip install --upgrade &quot; + dist.project_name, shell=True)"}, {"tags": [], "down_vote_count": 2, "creation_date": 1394223915, "answer_id": 22260015, "path": "stack.django.answer", "score": 57, "up_vote_count": 59, "is_accepted": false, "last_activity_date": 1501703365, "last_edit_date": 1501703365, "body_markdown": "The following one-liner might prove of help:\r\n\r\n```pip list --format legacy --outdated | sed &#39;s/(.*//g&#39; | xargs -n1 pip install -U```\r\n\r\n```xargs -n1``` keeps going if an error occurs. \r\n\r\nIf you need more &quot;fine grained&quot; control over what is omitted and what raises an error you should not add the ```-n1``` flag and explicitly define the errors to ignore, by &quot;piping&quot; the following line for each separate error:\r\n\r\n```| sed &#39;s/^&lt;First characters of the error&gt;.*//&#39;```\r\n\r\nHere is a working example:\r\n\r\n    pip list --format legacy --outdated | sed &#39;s/(.*//g&#39; | sed &#39;s/^&lt;First characters of the first error&gt;.*//&#39; | sed &#39;s/^&lt;First characters of the second error&gt;.*//&#39; | xargs pip install -U"}, {"tags": [], "down_vote_count": 3, "creation_date": 1412864636, "answer_id": 26280932, "path": "stack.django.answer", "score": 4, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1498399911, "last_edit_date": 1498399911, "body_markdown": "Isn&#39;t this more effective?\r\n\r\n    pip3 list -o | grep -v -i warning | cut -f1 -d&#39; &#39; | tr &quot; &quot; &quot;\\n&quot; | awk &#39;{if(NR&gt;=3)print}&#39; | cut -d&#39; &#39; -f1 | xargs -n1 pip3 install -U \r\n\r\n\r\n1. `pip list -o` lists outdated packages;\r\n2. `grep -v -i warning` inverted match on `warning` to avoid errors when updating\r\n2. `cut -f1 -d1&#39; &#39;` returns the first word - the name of the outdated package;\r\n3. `tr &quot;\\n|\\r&quot; &quot; &quot;` converts the multiline result from `cut` into a single-line, space-separated list;\r\n4. `awk &#39;{if(NR&gt;=3)print}&#39;` skips header lines \r\n5. `cut -d&#39; &#39; -f1` fetches the first column\r\n6. `xargs -n1 pip install -U` takes 1 argument from the pipe left of it, and passes it to the command to upgrade the list of packages."}, {"tags": [], "down_vote_count": 2, "creation_date": 1416611746, "answer_id": 27071962, "path": "stack.django.answer", "score": 40, "up_vote_count": 42, "is_accepted": false, "last_activity_date": 1498208736, "last_edit_date": 1498208736, "body_markdown": "This option seems to me more straightforward and readable:\r\n\r\n    pip install -U `pip list --outdated | awk &#39;{ print $1}&#39;`\r\n\r\n(`awk &#39;{ print $1}&#39;` selects the first word of the line (separated by a space))\r\n\r\nAnd this version allows for the suppression of warning message from `pip list --outdated`:\r\n\r\n    pip install -U `pip list --outdated | awk &#39;!/Could not|ignored/ { print $1}&#39;`\r\n\r\n(`awk &#39;!/&lt;pattern&gt;/&#39;` removes line containing a given pattern. In my case the warning messages include &quot;Could not&quot; and &quot;ignored&quot; respectively)\r\n\r\nThis could also be used to tackle the coming default `columns` format:\r\n\r\n    pip install -U `pip list --format=columns --outdated | awk &#39;!/Package|---/{ print $1}&#39;`"}, {"tags": [], "down_vote_count": 2, "creation_date": 1418135442, "answer_id": 27381371, "path": "stack.django.answer", "score": -1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1456532270, "last_edit_date": 1456532270, "body_markdown": "    pip list | awk -F &#39; &#39; &#39;{print $1}&#39; | xargs -l pip install --upgrade   "}, {"tags": [], "down_vote_count": 2, "creation_date": 1438813206, "answer_id": 31843791, "path": "stack.django.answer", "score": 9, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1438813206, "body_markdown": "This seemed to work for me...\r\n\r\n    pip install -U $(pip list --outdated|awk &#39;{printf $1&quot; &quot;}&#39;)\r\n\r\nI used `printf` with a space afterwards to properly separate the package names."}, {"tags": [], "down_vote_count": 4, "creation_date": 1447320027, "answer_id": 33667992, "path": "stack.django.answer", "score": 148, "up_vote_count": 152, "is_accepted": false, "last_activity_date": 1463252647, "last_edit_date": 1463252647, "body_markdown": "Works on Windows. Should be good for others too.\r\n($ is whatever directory you&#39;re in, in command prompt. eg. C:/Users/Username&gt;)\r\n\r\ndo\r\n\r\n    $ pip freeze &gt; requirements.txt\r\nthen do\r\n\r\n    $ pip install -r requirements.txt --upgrade\r\n\r\nIf you have a problem with a certain package stalling the upgrade (numpy sometimes), just go to the directory ($), comment out the name (add a # before it) and run the upgrade again. You can later uncomment that section back.\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1460416062, "answer_id": 36560836, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1460416062, "body_markdown": "here is another way of doing with a script in python\r\n\r\n    import pip, tempfile, contextlib\r\n    \r\n    with tempfile.TemporaryFile(&#39;w+&#39;) as temp:\r\n        with contextlib.redirect_stdout(temp):\r\n            pip.main([&#39;list&#39;,&#39;-o&#39;])\r\n        temp.seek(0)\r\n        for line in temp:\r\n            pk = line.split()[0]\r\n            print(&#39;--&gt; updating&#39;,pk,&#39;&lt;--&#39;)\r\n            pip.main([&#39;install&#39;,&#39;-U&#39;,pk])\r\n    "}, {"tags": [], "down_vote_count": 2, "creation_date": 1464766794, "answer_id": 37562337, "path": "stack.django.answer", "score": 11, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1469550888, "last_edit_date": 1469550888, "body_markdown": "The rather amazing yolk makes this easy.\r\n\r\n    pip install yolk3k # don&#39;t install `yolk`, see https://github.com/cakebread/yolk/issues/35\r\n    yolk --upgrade\r\n\r\nFor more info on yolk: https://pypi.python.org/pypi/yolk/0.4.3\r\n\r\nIt can do lots of things you&#39;ll probably find useful."}, {"tags": [], "down_vote_count": 1, "creation_date": 1465530443, "answer_id": 37739555, "path": "stack.django.answer", "score": 28, "up_vote_count": 29, "is_accepted": false, "last_activity_date": 1482085849, "last_edit_date": 1482085849, "body_markdown": "This seems more concise.\r\n\r\n    pip list --outdated | cut -d &#39; &#39; -f1 | xargs -n1 pip install -U\r\n\r\nExplanation:\r\n\r\n`pip list --outdated` gets lines like these\r\n\r\n    urllib3 (1.7.1) - Latest: 1.15.1 [wheel]\r\n    wheel (0.24.0) - Latest: 0.29.0 [wheel]\r\n\r\nIn `cut -d &#39; &#39; -f1`, `-d &#39; &#39;` sets &quot;space&quot; as the delimiter, `-f1` means to get the first column. \r\n\r\nSo the above lines becomes:\r\n\r\n    urllib3\r\n    wheel\r\n\r\nthen pass them to `xargs` to run the command, `pip install -U`, with each line as appending arguments\r\n\r\n`-n1` limits the number of arguments passed to each command `pip install -U` to be 1"}, {"tags": [], "down_vote_count": 1, "creation_date": 1474016838, "answer_id": 39527611, "path": "stack.django.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1474016838, "body_markdown": "Windows Powershell solution\r\n\r\n    pip freeze | %{$_.split(&#39;==&#39;)[0]} | %{pip install --upgrade $_}"}, {"tags": [], "down_vote_count": 1, "creation_date": 1478259265, "answer_id": 40421649, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1478276462, "last_edit_date": 1478276462, "body_markdown": "Here is a scripts that only updates the outdated packages.    \r\n\r\n    import os, sys\r\n    from subprocess import check_output, call\r\n\r\n    file = check_output([&quot;pip.exe&quot;,  &quot;list&quot;, &quot;--outdated&quot;, &quot;--format=legacy&quot;])\r\n    line = str(file).split()\r\n\r\n    for distro in line[::6]:\r\n        call(&quot;pip install --upgrade &quot; + distro, shell=True)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1481275307, "answer_id": 41056966, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1481275307, "body_markdown": "Here is my variation:\r\n\r\n    pip list --outdated --format=legacy | awk &#39;{print $1;}&#39; | xargs -n1 pip install -U"}, {"tags": [], "down_vote_count": 1, "creation_date": 1484014637, "answer_id": 41560100, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1484014637, "body_markdown": "My script:\r\n\r\n    pip list --outdated --format=legacy | cut -d &#39; &#39; -f1 | xargs -n1 pip install --upgrade"}, {"tags": [], "down_vote_count": 1, "creation_date": 1486661018, "answer_id": 42143061, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1487717572, "last_edit_date": 1487717572, "body_markdown": "\r\n\r\n    import pip\r\n    pkgs = [p.key for p in pip.get_installed_distributions()]\r\n    for pkg in pkgs:\r\n        pip.main([&#39;install&#39;, &#39;--upgrade&#39;, pkg])\r\n\r\n\r\nor even:\r\n\r\n    import pip\r\n    commands = [&#39;install&#39;, &#39;--upgrade&#39;]\r\n    pkgs = commands.extend([p.key for p in pip.get_installed_distributions()])\r\n    pip.main(commands)\r\n\r\nWorks fast as it is not constantly launching a shell.  I would love to find the time to get this actually using the list outdated to speed things up still more."}, {"tags": [], "down_vote_count": 0, "creation_date": 1486668170, "answer_id": 42145169, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1486668170, "body_markdown": "    import os\r\n    import pip\r\n    from subprocess import call, check_call\r\n    \r\n    pip_check_list = [&#39;pip&#39;, &#39;pip3&#39;]\r\n    pip_list = []\r\n    FNULL = open(os.devnull, &#39;w&#39;)\r\n    \r\n    \r\n    for s_pip in pip_check_list:\r\n    \ttry:\r\n    \t\tcheck_call([s_pip, &#39;-h&#39;], stdout=FNULL)\r\n    \t\tpip_list.append(s_pip)\r\n    \texcept FileNotFoundError:\r\n    \t\tpass\r\n    \r\n    \r\n    for dist in pip.get_installed_distributions():\r\n    \tfor pip in pip_list:\r\n    \t\tcall(&quot;{0} install --upgrade &quot;.format(pip) + dist.project_name, shell=True)\r\n\r\nI took @Ramana&#39;s answer and made it pip3 friendly."}, {"tags": [], "down_vote_count": 1, "creation_date": 1487209106, "answer_id": 42263301, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1487209106, "body_markdown": "I&#39;ve been using [pur][1] lately. It&#39;s simple and to the point. It updates your `requirements.txt` file to reflect the upgrades and you can then upgrade with your `requirements.txt` file as usual.\r\n\r\n    $ pip install pur\r\n    ...\r\n    Successfully installed pur-4.0.1\r\n    \r\n    $ pur\r\n    Updated boto3: 1.4.2 -&gt; 1.4.4\r\n    Updated Django: 1.10.4 -&gt; 1.10.5\r\n    Updated django-bootstrap3: 7.1.0 -&gt; 8.1.0\r\n    All requirements up-to-date.\r\n    \r\n    $ pip install --upgrade -r requirements.txt\r\n    Successfully installed Django-1.10.5 ...\r\n\r\n  [1]: https://pypi.python.org/pypi/pur"}, {"tags": [], "down_vote_count": 0, "creation_date": 1487540293, "answer_id": 42333208, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1487540293, "body_markdown": "    pip list -o | cut -d&#39; &#39; -f1 | xargs -n1 pip install -U 2&gt; /dev/null\r\n\r\nif you have 2 different version of python, and you only want to upgrade all python3&#39;s package, then just type `pip3` instead of `pip`.\r\n\r\nThe `2&gt; /dev/null` is for get rid of all the annoying error message "}, {"tags": [], "down_vote_count": 1, "creation_date": 1487551529, "answer_id": 42334797, "path": "stack.django.answer", "score": 19, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1501375596, "last_edit_date": 1501375596, "body_markdown": "**More Robust Solution**\r\n\r\nFor pip3 use this:\r\n\r\n    pip3 freeze --local |sed -rn &#39;s/^([^=# \\t\\\\][^ \\t=]*)=.*/echo; echo Processing \\1 ...; pip3 install -U \\1/p&#39; |sh\r\n\r\nFor pip, just remove the 3s as such:\r\n\r\n    pip freeze --local |sed -rn &#39;s/^([^=# \\t\\\\][^ \\t=]*)=.*/echo; echo Processing \\1 ...; pip install -U \\1/p&#39; |sh\r\n\r\n**OSX Oddity**\r\n\r\nOSX, as of July 2017, ships with a very old version of sed (a dozen years old).  To get extended regular expressions, use -E instead of -r in the solution above.\r\n\r\n**Solving Issues with Popular Solutions**\r\n\r\nThis solution is well designed and tested&lt;sup&gt;1&lt;/sup&gt;, whereas there are problems with even the most popular solutions.\r\n\r\n - Portability issues due to changing pip command line features\r\n - Crashing of xargs because common pip or pip3 child process failures\r\n - Crowded logging from the raw xargs output\r\n - Relying on a Python-to-OS bridge while potentially upgrading it&lt;sup&gt;3&lt;/sup&gt;\r\n\r\nThe above command uses the simplest and most portable pip syntax in combination with sed and sh to overcome these issues completely.  Details of sed operation can be scrutinized with the commented version&lt;sup&gt;2&lt;/sup&gt;.\r\n\r\n---\r\n\r\n**Details**\r\n\r\n[1] Tested and regularly used in a Linux 4.8.16-200.fc24.x86_64 cluster and tested on five other Linux/Unix flavors.  It also runs on Cygwin64 installed on Windows 10.  Testing on iOS is needed.\r\n\r\n[2] To see the anatomy of the command more clearly, this is the exact equivalent of the above pip3 command with comments: \r\n\r\n    # match lines from pip&#39;s local package list output\r\n    # that meet the following three criteria and pass the\r\n    # package name to the replacement string in group 1.\r\n    # (a) Do not start with invalid characters\r\n    # (b) Follow the rule of no white space in the package names\r\n    # (c) Immediately follow the package name with an equal sign\r\n    sed=&quot;s/^([^=# \\t\\\\][^ \\t=]*)=.*&quot;\r\n\r\n    # separate the output of package upgrades with a blank line\r\n    sed=&quot;$sed/echo&quot;\r\n\r\n    # indicate what package is being processed\r\n    sed=&quot;$sed; echo Processing \\1 ...&quot;\r\n\r\n    # perform the upgrade using just the valid package name\r\n    sed=&quot;$sed; pip3 install -U \\1&quot;\r\n\r\n    # output the commands\r\n    sed=&quot;$sed/p&quot;\r\n\r\n    # stream edit the list as above\r\n    # and pass the commands to a shell\r\n    pip3 freeze --local |sed -rn &quot;$sed&quot; |sh\r\n\r\n[3] Upgrading a Python or PIP component that is also used in the upgrading of a Python or PIP component can be a potential cause of a deadlock or package database corruption."}, {"tags": [], "down_vote_count": 0, "creation_date": 1487553197, "answer_id": 42334992, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1487553197, "body_markdown": "And, yet another way: `for pkg in $(pip list | cut -d&#39; &#39; -f1); do sudo pip install --upgrade $pkg; done`"}, {"tags": [], "down_vote_count": 1, "creation_date": 1493232227, "answer_id": 43642193, "path": "stack.django.answer", "score": 17, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1493232227, "body_markdown": "I had the same problem with upgrading. Thing is, i never upgrade all packages. I upgrade only what i need, because project may break.\r\n\r\nBecause there was no easy way for upgrading package by package, and updating the requirements.txt file, i wrote this [**pip-upgrader**][1] which **also updates the versions in your `requirements.txt` file** for the packages chosen (or all packages).\r\n\r\n**Installation**\r\n\r\n    pip install pip-upgrader\r\n\r\n**Usage**\r\n\r\nActivate your virtualenv (important, because it will also install the new versions of upgraded packages in current virtualenv).\r\n\r\n`cd` into your project directory, then run:\r\n\r\n    pip-upgrade\r\n\r\n**Advanced usage**\r\n\r\nIf the requirements are placed in a non-standard location, send them as arguments:\r\n\r\n    pip-upgrade path/to/requirements.txt\r\n\r\nIf you already know what package you want to upgrade, simply send them as arguments:\r\n\r\n    pip-upgrade -p django -p celery -p dateutil\r\n\r\n\r\nIf you need to upgrade to  pre-release / post-release version, add `--prerelease` argument to your command.\r\n\r\nFull disclosure: I wrote this package.\r\n\r\n\r\n  [1]: https://github.com/simion/pip-upgrader"}, {"tags": [], "down_vote_count": 0, "creation_date": 1499176169, "answer_id": 44907752, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1499176169, "body_markdown": "This is a PowerShell solution for Python 3:\r\n\r\n    pip3 list --outdated --format=legacy | ForEach { pip3 install -U $_.split(&quot; &quot;)[0] }\r\n\r\nAnd for Python 2:\r\n\r\n    pip2 list --outdated --format=legacy | ForEach { pip2 install -U $_.split(&quot; &quot;)[0] }\r\n\r\nThis upgrades the packages one by one. So a\r\n\r\n    pip3 check\r\n    pip2 check\r\n\r\nafterwards should make sure no dependencies are broken."}, {"tags": [], "down_vote_count": 0, "creation_date": 1500466392, "answer_id": 45190231, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1500466392, "body_markdown": "1. install jq at first(mac):\r\n\r\n    $brew install jq\r\n\r\n2.\r\n\r\n    $pip3 install --upgrade  `pip3 list --outdated --format json | jq &#39;.[] | .name&#39; | awk -F&#39;&quot;&#39; &#39;{print $2}&#39;`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1503469198, "answer_id": 45832011, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1503469246, "last_edit_date": 1503469246, "body_markdown": "    python -c &#39;import pip; [pip.main([&quot;install&quot;, &quot;--upgrade&quot;, d.project_name]) for d in pip.get_installed_distributions()]&#39;\r\n\r\nOne liner!\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1503928165, "answer_id": 45920637, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1505291641, "last_edit_date": 1505291641, "body_markdown": "The simplest and fastest solution that I found in the [pip issue discussion][1] is:\r\n\r\n    sudo -H pip install pipdate\r\n    sudo -H pipdate\r\n\r\nSource: https://github.com/pypa/pip/issues/3819\r\n\r\n\r\n  [1]: https://github.com/pypa/pip/issues/3819#issuecomment-286696776"}, {"tags": [], "down_vote_count": 0, "creation_date": 1505235029, "answer_id": 46181810, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1505235029, "body_markdown": "How about:\r\n\r\n\r\n    pip install -r &lt;(pip freeze) --upgrade\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1507239689, "answer_id": 46595221, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1507239689, "body_markdown": "The shortest and easiest I can find:\r\n\r\n    pip install -U $(pip freeze | cut -d&quot;=&quot; -f1)\r\n\r\nThe `$(cmd)` key allows you to wrap any shell command line (it returns its output)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1509367445, "answer_id": 47015620, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1509367445, "body_markdown": "As another answer here stated: \t\r\n\r\n    pip freeze --local | grep -v &#39;^\\-e&#39; | cut -d = -f 1 | xargs -n1 pip install -U\r\n\r\nIs a possible solution, \r\nSome comments here, myself included, had issues with permissions while using this command. A little change to the following solved those for me.\r\n\r\n\t\r\n    pip freeze --local | grep -v &#39;^\\-e&#39; | cut -d = -f 1 | xargs -n1 sudo -H pip install -U\r\n\r\nNote the added sudo -H which allowed the command to rum with root permissions. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1510219159, "answer_id": 47198015, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1510219159, "body_markdown": "use awk update packges:\r\n```\r\npip install -U $(pip freeze | awk -F&#39;[=]&#39; &#39;{print $1}&#39;)\r\n```"}, {"tags": [], "down_vote_count": 0, "creation_date": 1514377661, "answer_id": 47992205, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1514377661, "body_markdown": "the best solution which works even in conda env is :\r\n\r\n    pip freeze --local | grep -v &#39;^\\-e&#39; | cut -d = -f 1 |cut -d &#39;:&#39; -f 2 | xargs -n1 pip install -U"}, {"tags": [], "down_vote_count": 0, "creation_date": 1515767588, "answer_id": 48228354, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1515770253, "last_edit_date": 1515770253, "body_markdown": "One line in cmd:\r\n\r\n    for /F &quot;delims= &quot; %i in (&#39;pip list --outdated --format=legacy&#39;) do pip install -U %i\r\n\r\nSo a \r\n\r\n`pip check` \r\n\r\nafterwards should make sure no dependencies are broken."}], "title": "Upgrading all packages with pip", "view_count": 703614, "answer_count": 43, "code_snippet": ["<code>pip</code>", "<code>pip freeze</code>", "<code>bundle install</code>", "<code>npm shrinkwrap</code>", "<code>pip</code>", "<code>requests</code>", "<code>cannot import name IncompleteRead</code>", "<code>pip freeze --local | grep -v '^\\-e' | cut -d = -f 1  | xargs -n1 pip install -U\n</code>", "<code>grep</code>", "<code>grep</code>", "<code>cut</code>", "<code>sed</code>", "<code>awk</code>", "<code>perl</code>", "<code>pip</code>", "<code>pip list --outdated --format=freeze\n</code>", "<code>-n1</code>", "<code>xargs</code>", "<code>pip install -U</code>", "<code>tee</code>", "<code>pip freeze --local | tee before_upgrade.txt | ...</code>", "<code>pip freeze</code>", "<code>import pip\nfrom subprocess import call\n\npackages = [dist.project_name for dist in pip.get_installed_distributions()]\ncall(\"pip install --upgrade \" + ' '.join(packages), shell=True)\n</code>", "<code>import pip</code>", "<code>pip.install('packagename')</code>", "<code>pip-review</code>", "<code>$ pip install pip-review\n$ pip-review --local --interactive\n</code>", "<code>pip-review</code>", "<code>pip-tools</code>", "<code>pip-tools</code>", "<code>pip-review</code>", "<code>pip-tools</code>", "<code>pip-review</code>", "<code>.py</code>", "<code>cat</code>", "<code>sort</code>", "<code>$ pip freeze &gt; requirements.txt\n</code>", "<code>$ pip install -r requirements.txt --upgrade\n</code>", "<code>requirements.txt</code>", "<code>=={version}</code>", "<code>python-dateutil==2.4.2</code>", "<code>python-dateutil</code>", "<code>$ pip freeze | cut -d '=' -f1&gt; requirements.txt</code>", "<code>FOR</code>", "<code>for /F \"delims===\" %i in ('pip freeze -l') do pip install -U %i</code>", "<code>for /F \"delims= \" %i in ('pip list --outdated') do pip install -U %i </code>", "<code>n</code>", "<code>m</code>", "<code>n</code>", "<code>pip</code>", "<code>1 + n</code>", "<code>pip</code>", "<code>n*log(n)</code>", "<code>m</code>", "<code>n</code>", "<code>--outdated</code>", "<code>m</code>", "<code>pip</code>", "<code>m*log(n)</code>", "<code>m</code>", "<code>m</code>", "<code>n</code>", "<code>pip freeze | cut -d = -f 1 | xargs -n 1 pip search | grep -B2 'LATEST:'\n</code>", "<code>pip freeze --local | cut -d = -f 1 | xargs -n 1 pip search | grep -B2 'LATEST:'</code>", "<code>python -m pip list outdated</code>", "<code>pip list --format legacy --outdated | sed 's/(.*//g' | xargs -n1 pip install -U</code>", "<code>xargs -n1</code>", "<code>-n1</code>", "<code>| sed 's/^&lt;First characters of the error&gt;.*//'</code>", "<code>pip list --format legacy --outdated | sed 's/(.*//g' | sed 's/^&lt;First characters of the first error&gt;.*//' | sed 's/^&lt;First characters of the second error&gt;.*//' | xargs pip install -U\n</code>", "<code>| sed 's/^&lt;First characters of the error&gt;.*//'</code>", "<code>pip list --outdated | cut -d ' ' -f 1 | xargs -n 1 pip install --upgrade</code>", "<code>pip install -U `pip list --outdated | awk '{ print $1}'`\n</code>", "<code>awk '{ print $1}'</code>", "<code>pip list --outdated</code>", "<code>pip install -U `pip list --outdated | awk '!/Could not|ignored/ { print $1}'`\n</code>", "<code>awk '!/&lt;pattern&gt;/'</code>", "<code>columns</code>", "<code>pip install -U `pip list --format=columns --outdated | awk '!/Package|---/{ print $1}'`\n</code>", "<code>awk '{printf $1 \" \"}'</code>", "<code>awk {print $1}</code>", "<code>DEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.</code>", "<code>pip list --outdated | cut -d ' ' -f1 | xargs -n1 pip install -U\n</code>", "<code>pip list --outdated</code>", "<code>urllib3 (1.7.1) - Latest: 1.15.1 [wheel]\nwheel (0.24.0) - Latest: 0.29.0 [wheel]\n</code>", "<code>cut -d ' ' -f1</code>", "<code>-d ' '</code>", "<code>-f1</code>", "<code>urllib3\nwheel\n</code>", "<code>xargs</code>", "<code>pip install -U</code>", "<code>-n1</code>", "<code>pip install -U</code>", "<code>DEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.</code>", "<code>$ pip install -U `yolk -U | awk '{print $1}' | uniq`\n</code>", "<code>$ sudo pip install -U yolk\n</code>", "<code>alias</code>", "<code>yolk -U ...</code>", "<code>~/.bashrc</code>", "<code>python -c 'import pip, subprocess; [subprocess.call(\"pip install -U \" + d.project_name, shell=1) for d in pip.get_installed_distributions()]'\n</code>", "<code>sudo pip install</code>", "<code>pip3 freeze --local |sed -rn 's/^([^=# \\t\\\\][^ \\t=]*)=.*/echo; echo Processing \\1 ...; pip3 install -U \\1/p' |sh\n</code>", "<code>pip freeze --local |sed -rn 's/^([^=# \\t\\\\][^ \\t=]*)=.*/echo; echo Processing \\1 ...; pip install -U \\1/p' |sh\n</code>", "<code># match lines from pip's local package list output\n# that meet the following three criteria and pass the\n# package name to the replacement string in group 1.\n# (a) Do not start with invalid characters\n# (b) Follow the rule of no white space in the package names\n# (c) Immediately follow the package name with an equal sign\nsed=\"s/^([^=# \\t\\\\][^ \\t=]*)=.*\"\n\n# separate the output of package upgrades with a blank line\nsed=\"$sed/echo\"\n\n# indicate what package is being processed\nsed=\"$sed; echo Processing \\1 ...\"\n\n# perform the upgrade using just the valid package name\nsed=\"$sed; pip3 install -U \\1\"\n\n# output the commands\nsed=\"$sed/p\"\n\n# stream edit the list as above\n# and pass the commands to a shell\npip3 freeze --local |sed -rn \"$sed\" |sh\n</code>", "<code>sed: illegal option -- r</code>", "<code>$ sed --version</code>", "<code>sed: illegal option -- -</code>", "<code>sed</code>", "<code>requirements.txt</code>", "<code>pip install pip-upgrader\n</code>", "<code>cd</code>", "<code>pip-upgrade\n</code>", "<code>pip-upgrade path/to/requirements.txt\n</code>", "<code>pip-upgrade -p django -p celery -p dateutil\n</code>", "<code>--prerelease</code>", "<code>pip install `pip freeze -l | cut --fields=1 -d = -` --upgrade\n</code>", "<code>for i in ` pip list|awk -F ' ' '{print $1}'`;do pip install --upgrade $i;done\n</code>", "<code>pip install yolk3k # don't install `yolk`, see https://github.com/cakebread/yolk/issues/35\nyolk --upgrade\n</code>", "<code>yolk</code>", "<code>yolk3k</code>", "<code>import pip\nfor dist in pip.get_installed_distributions():\n    if 'site-packages' in dist.location:\n        try:\n            pip.call_subprocess(['pip', 'install', '-U', dist.key])\n        except Exception, exc:\n            print exc\n</code>", "<code>site-packages</code>", "<code>pip.install(dist.key, upgrade=True)</code>", "<code>pip</code>", "<code>/usr/local/lib/python2.7/dist-packages</code>", "<code>if</code>", "<code>from pip import get_installed_distributions\nfrom pip.commands import install\n\ninstall_cmd = install.InstallCommand()\n\noptions, args = install_cmd.parse_args([package.project_name\n                                        for package in\n                                        get_installed_distributions()])\n\noptions.upgrade = True\ninstall_cmd.run(options, args)  # Chuck this in a try/except and print as wanted\n</code>", "<code>pip install -U $(pip list --outdated|awk '{printf $1\" \"}')\n</code>", "<code>printf</code>", "<code>sudo -H pip install pipdate\nsudo -H pipdate\n</code>", "<code>pip freeze | %{$_.split('==')[0]} | %{pip install --upgrade $_}\n</code>", "<code>pip list --outdated --format=legacy | cut -d ' ' -f1 | xargs -n1 pip install --upgrade\n</code>", "<code>pip freeze |sed -ne 's/==.*//p' |xargs pip install -U --\n</code>", "<code>sudo</code>", "<code>#!/usr/bin/env python\nimport pip\nfrom subprocess import call\n\nfor dist in pip.get_installed_distributions():\n    call(\"sudo pip install --upgrade \" + dist.project_name, shell=True)\n</code>", "<code>import pip, tempfile, contextlib\n\nwith tempfile.TemporaryFile('w+') as temp:\n    with contextlib.redirect_stdout(temp):\n        pip.main(['list','-o'])\n    temp.seek(0)\n    for line in temp:\n        pk = line.split()[0]\n        print('--&gt; updating',pk,'&lt;--')\n        pip.main(['install','-U',pk])\n</code>", "<code>requirements.txt</code>", "<code>requirements.txt</code>", "<code>$ pip install pur\n...\nSuccessfully installed pur-4.0.1\n\n$ pur\nUpdated boto3: 1.4.2 -&gt; 1.4.4\nUpdated Django: 1.10.4 -&gt; 1.10.5\nUpdated django-bootstrap3: 7.1.0 -&gt; 8.1.0\nAll requirements up-to-date.\n\n$ pip install --upgrade -r requirements.txt\nSuccessfully installed Django-1.10.5 ...\n</code>", "<code>pip3 list -o | grep -v -i warning | cut -f1 -d' ' | tr \" \" \"\\n\" | awk '{if(NR&gt;=3)print}' | cut -d' ' -f1 | xargs -n1 pip3 install -U \n</code>", "<code>pip list -o</code>", "<code>grep -v -i warning</code>", "<code>warning</code>", "<code>cut -f1 -d1' '</code>", "<code>tr \"\\n|\\r\" \" \"</code>", "<code>cut</code>", "<code>awk '{if(NR&gt;=3)print}'</code>", "<code>cut -d' ' -f1</code>", "<code>xargs -n1 pip install -U</code>", "<code>kerberos iwlib PyYAML Could pygpgme Could Could Could ...</code>", "<code>pip list -o</code>", "<code>pip list -o</code>", "<code># pip list -o; urwid (Current: 1.1.1 Latest: 1.3.0); Could not find any downloads that satisfy the requirement python-default-encoding; pycups (Current: 1.9.63 Latest: 1.9.68); Could not find any downloads that satisfy the requirement policycoreutils-default-encoding; Could not find any downloads that satisfy the requirement sepolicy; </code>", "<code>pip install -U $(pip list -o | grep -i current | cut -f1 -d' ' | tr  \"\\n|\\r\" \" \") </code>", "<code>xargs</code>", "<code>pip list -o | awk '/Current:/ {print $1}' | xargs -rp -- pip install -U</code>", "<code>-r</code>", "<code>pip install -U</code>", "<code>-p</code>", "<code>-n1</code>", "<code>import os, sys\nfrom subprocess import check_output, call\n\nfile = check_output([\"pip.exe\",  \"list\", \"--outdated\", \"--format=legacy\"])\nline = str(file).split()\n\nfor distro in line[::6]:\n    call(\"pip install --upgrade \" + distro, shell=True)\n</code>", "<code>import pip\npkgs = [p.key for p in pip.get_installed_distributions()]\nfor pkg in pkgs:\n    pip.main(['install', '--upgrade', pkg])\n</code>", "<code>import pip\ncommands = ['install', '--upgrade']\npkgs = commands.extend([p.key for p in pip.get_installed_distributions()])\npip.main(commands)\n</code>", "<code>pip install -r &lt;(pip freeze) --upgrade\n</code>"], "path": "stack.django"}, {"tags": ["regex", "url", "language-agnostic"], "creation_date": 1222944797, "body_markdown": "How can I check if a given string is a valid URL address?\r\n\r\nMy knowledge of regular expressions is basic and doesn&#39;t allow me to choose from the hundreds of regular expressions I&#39;ve already seen on the web.\r\n", "last_edit_date": 1483030991, "up_vote_count": 610, "link": "https://stackoverflow.com/questions/161738/what-is-the-best-regular-expression-to-check-if-a-string-is-a-valid-url", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1222945149, "answer_id": 161749, "path": "stack.django.answer", "score": 33, "up_vote_count": 33, "is_accepted": false, "last_activity_date": 1502913742, "last_edit_date": 1502913742, "body_markdown": "The post [Getting parts of a URL (Regex)][1] discusses parsing a URL to identify its various components. If you want to check if a URL is well-formed, it should be sufficient for your needs.\r\n\r\nIf you need to check if it&#39;s actually valid, you&#39;ll eventually have to try to access whatever&#39;s on the other end.\r\n\r\nIn general, though, you&#39;d probably be better off using a function that&#39;s supplied to you by your framework or another library. Many platforms include functions that parse URLs. For example, there&#39;s Python&#39;s [urlparse][2] module, and in .NET you could use the [System.Uri class&#39;s constructor][3] as a means of validating the URL.\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/27745/getting-parts-of-a-url-regex#27755\r\n  [2]: https://docs.python.org/3/library/urllib.parse.html\r\n  [3]: http://msdn.microsoft.com/en-us/library/aa332621.aspx"}, {"tags": [], "down_vote_count": 9, "creation_date": 1222945258, "answer_id": 161756, "path": "stack.django.answer", "score": 73, "up_vote_count": 82, "is_accepted": false, "last_activity_date": 1379413276, "last_edit_date": 1495542890, "body_markdown": "What platform? If using .NET, use [`System.Uri.TryCreate`][1], not a regex.\r\n\r\nFor example:\r\n\r\n    static bool IsValidUrl(string urlString)\r\n    {\r\n        Uri uri;\r\n        return Uri.TryCreate(urlString, UriKind.Absolute, out uri)\r\n            &amp;&amp; (uri.Scheme == Uri.UriSchemeHttp\r\n             || uri.Scheme == Uri.UriSchemeHttps\r\n             || uri.Scheme == Uri.UriSchemeFtp\r\n             || uri.Scheme == Uri.UriSchemeMailto\r\n                /*...*/);\r\n    }\r\n\r\n    // In test fixture...\r\n\r\n    [Test]\r\n    void IsValidUrl_Test()\r\n    {\r\n        Assert.True(IsValidUrl(&quot;http://www.example.com&quot;));\r\n        Assert.False(IsValidUrl(&quot;javascript:alert(&#39;xss&#39;)&quot;));\r\n        Assert.False(IsValidUrl(&quot;&quot;));\r\n        Assert.False(IsValidUrl(null));\r\n    }\r\n\r\n(Thanks to [@Yoshi][2] for the tip about `javascript:`)\r\n\r\n\r\n  [1]: http://msdn.microsoft.com/en-us/library/system.uri.trycreate\r\n  [2]: https://stackoverflow.com/users/450141/yoshi"}, {"tags": [], "down_vote_count": 2, "creation_date": 1222945726, "answer_id": 161771, "path": "stack.django.answer", "score": 7, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1452805197, "last_edit_date": 1452805197, "body_markdown": "If you really search for the **ultimate** match, you probably find it on &quot;[A Good Url Regular Expression?][1]&quot;.\r\n\r\nBut a regex that really matches all possible domains and allows anything that is allowed according to RFCs is horribly long and unreadable, trust me ;-)\r\n\r\n  [1]: http://flanders.co.nz/2009/11/08/a-good-url-regular-expression-repost/"}, {"tags": [], "down_vote_count": 4, "creation_date": 1222946098, "answer_id": 161779, "path": "stack.django.answer", "score": 18, "up_vote_count": 22, "is_accepted": false, "last_activity_date": 1503582807, "last_edit_date": 1503582807, "body_markdown": "For reference purposes, here&#39;s the IETF Spec: ([TXT](http://www.ietf.org/rfc/rfc3986.txt) | [HTML](https://tools.ietf.org/html/rfc3986#appendix-B)). In particular, `Appendix B. Parsing a URI Reference with a Regular Expression` is on point. Here&#39;s the regex they provide:\r\n\r\n     ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\r\n\r\nAs someone else said, it&#39;s probably best to leave this to a lib/framework you&#39;re already using."}, {"tags": [], "down_vote_count": 2, "creation_date": 1222970003, "answer_id": 163684, "path": "stack.django.answer", "score": 50, "up_vote_count": 52, "is_accepted": false, "last_activity_date": 1505243305, "last_edit_date": 1505243305, "body_markdown": "Here&#39;s what [RegexBuddy][1] uses.\r\n\r\n    (\\b(https?|ftp|file)://)?[-A-Za-z0-9+&amp;@#/%?=~_|!:,.;]+[-A-Za-z0-9+&amp;@#/%=~_|]\r\n\r\nIt matches these below (inside the `** **` marks):  \r\n\r\n    **http://www.regexbuddy.com**  \r\n    **http://www.regexbuddy.com/**  \r\n    **http://www.regexbuddy.com/index.html**  \r\n    **http://www.regexbuddy.com/index.html?source=library**  \r\n\r\nYou can download RegexBuddy at **http://www.regexbuddy.com/download.html**. \r\n\r\n  [1]: http://en.wikipedia.org/wiki/RegexBuddy\r\n"}, {"tags": [], "down_vote_count": 8, "creation_date": 1223623381, "answer_id": 190405, "path": "stack.django.answer", "score": 333, "up_vote_count": 341, "is_accepted": false, "last_activity_date": 1435356007, "last_edit_date": 1435356007, "body_markdown": "I wrote my URL (actually IRI, internationalized) pattern to comply with RFC 3987 (&lt;http://www.faqs.org/rfcs/rfc3987.html&gt;). These are in PCRE syntax.\r\n\r\nFor absolute IRIs (internationalized):\r\n\r\n    /^[a-z](?:[-a-z0-9\\+\\.])*:(?:\\/\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:])*@)?(?:\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4}:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+[-a-z0-9\\._~!\\$&amp;&#39;\\(\\)\\*\\+,;=:]+)\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=@])*)(?::[0-9]*)?(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@]))*)*|\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@]))*)*)?|(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@])))(?:\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@])|[\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}\\/\\?])*)?(?:\\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@])|[\\/\\?])*)?$/i\r\n\r\nTo also allow relative IRIs:\r\n\r\n    /^(?:[a-z](?:[-a-z0-9\\+\\.])*:(?:\\/\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:])*@)?(?:\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4}:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+[-a-z0-9\\._~!\\$&amp;&#39;\\(\\)\\*\\+,;=:]+)\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=@])*)(?::[0-9]*)?(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@]))*)*|\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@]))*)*)?|(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@])))(?:\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@])|[\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}\\/\\?])*)?(?:\\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@])|[\\/\\?])*)?|(?:\\/\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:])*@)?(?:\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4}:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+[-a-z0-9\\._~!\\$&amp;&#39;\\(\\)\\*\\+,;=:]+)\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=@])*)(?::[0-9]*)?(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@]))*)*|\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@]))*)*)?|(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=@])+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@])))(?:\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@])|[\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}\\/\\?])*)?(?:\\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;&#39;\\(\\)\\*\\+,;=:@])|[\\/\\?])*)?)$/i\r\n\r\nHow they were compiled (in PHP):\r\n\r\n    &lt;?php\r\n\r\n    /* Regex convenience functions (character class, non-capturing group) */\r\n    function cc($str, $suffix = &#39;&#39;, $negate = false) {\r\n        return &#39;[&#39; . ($negate ? &#39;^&#39; : &#39;&#39;) . $str . &#39;]&#39; . $suffix;\r\n    }\r\n    function ncg($str, $suffix = &#39;&#39;) {\r\n        return &#39;(?:&#39; . $str . &#39;)&#39; . $suffix;\r\n    }\r\n\r\n    /* Preserved from RFC3986 */\r\n\r\n    $ALPHA = &#39;a-z&#39;;\r\n    $DIGIT = &#39;0-9&#39;;\r\n    $HEXDIG = $DIGIT . &#39;a-f&#39;;\r\n\r\n    $sub_delims = &#39;!\\\\$&amp;\\&#39;\\\\(\\\\)\\\\*\\\\+,;=&#39;;\r\n    $gen_delims = &#39;:\\\\/\\\\?\\\\#\\\\[\\\\]@&#39;;\r\n    $reserved = $gen_delims . $sub_delims;\r\n    $unreserved = &#39;-&#39; . $ALPHA . $DIGIT . &#39;\\\\._~&#39;;\r\n\r\n    $pct_encoded = &#39;%&#39; . cc($HEXDIG) . cc($HEXDIG);\r\n\r\n    $dec_octet = ncg(implode(&#39;|&#39;, array(\r\n        cc($DIGIT),\r\n        cc(&#39;1-9&#39;) . cc($DIGIT),\r\n        &#39;1&#39; . cc($DIGIT) . cc($DIGIT),\r\n        &#39;2&#39; . cc(&#39;0-4&#39;) . cc($DIGIT),\r\n        &#39;25&#39; . cc(&#39;0-5&#39;)\r\n    )));\r\n\r\n    $IPv4address = $dec_octet . ncg(&#39;\\\\.&#39; . $dec_octet, &#39;{3}&#39;);\r\n\r\n    $h16 = cc($HEXDIG, &#39;{1,4}&#39;);\r\n    $ls32 = ncg($h16 . &#39;:&#39; . $h16 . &#39;|&#39; . $IPv4address);\r\n\r\n    $IPv6address = ncg(implode(&#39;|&#39;, array(\r\n        ncg($h16 . &#39;:&#39;, &#39;{6}&#39;) . $ls32,\r\n        &#39;::&#39; . ncg($h16 . &#39;:&#39;, &#39;{5}&#39;) . $ls32,\r\n        ncg($h16, &#39;?&#39;) . &#39;::&#39; . ncg($h16 . &#39;:&#39;, &#39;{4}&#39;) . $ls32,\r\n        ncg($h16 . &#39;:&#39; . $h16, &#39;?&#39;) . &#39;::&#39; . ncg($h16 . &#39;:&#39;, &#39;{3}&#39;) . $ls32,\r\n        ncg(ncg($h16 . &#39;:&#39;, &#39;{0,2}&#39;) . $h16, &#39;?&#39;) . &#39;::&#39; . ncg($h16 . &#39;:&#39;, &#39;{2}&#39;) . $ls32,\r\n        ncg(ncg($h16 . &#39;:&#39;, &#39;{0,3}&#39;) . $h16, &#39;?&#39;) . &#39;::&#39; . $h16 . &#39;:&#39; . $ls32,\r\n        ncg(ncg($h16 . &#39;:&#39;, &#39;{0,4}&#39;) . $h16, &#39;?&#39;) . &#39;::&#39; . $ls32,\r\n        ncg(ncg($h16 . &#39;:&#39;, &#39;{0,5}&#39;) . $h16, &#39;?&#39;) . &#39;::&#39; . $h16,\r\n        ncg(ncg($h16 . &#39;:&#39;, &#39;{0,6}&#39;) . $h16, &#39;?&#39;) . &#39;::&#39;,\r\n    )));\r\n\r\n    $IPvFuture = &#39;v&#39; . cc($HEXDIG, &#39;+&#39;) . cc($unreserved . $sub_delims . &#39;:&#39;, &#39;+&#39;);\r\n\r\n    $IP_literal = &#39;\\\\[&#39; . ncg(implode(&#39;|&#39;, array($IPv6address, $IPvFuture))) . &#39;\\\\]&#39;;\r\n\r\n    $port = cc($DIGIT, &#39;*&#39;);\r\n\r\n    $scheme = cc($ALPHA) . ncg(cc(&#39;-&#39; . $ALPHA . $DIGIT . &#39;\\\\+\\\\.&#39;), &#39;*&#39;);\r\n\r\n    /* New or changed in RFC3987 */\r\n\r\n    $iprivate = &#39;\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}&#39;;\r\n\r\n    $ucschar = &#39;\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}&#39; .\r\n        &#39;\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}&#39; .\r\n        &#39;\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}&#39; .\r\n        &#39;\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}&#39; .\r\n        &#39;\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}&#39; .\r\n        &#39;\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}&#39;;\r\n\r\n    $iunreserved = &#39;-&#39; . $ALPHA . $DIGIT . &#39;\\\\._~&#39; . $ucschar;\r\n\r\n    $ipchar = ncg($pct_encoded . &#39;|&#39; . cc($iunreserved . $sub_delims . &#39;:@&#39;));\r\n\r\n    $ifragment = ncg($ipchar . &#39;|&#39; . cc(&#39;\\\\/\\\\?&#39;), &#39;*&#39;);\r\n\r\n    $iquery = ncg($ipchar . &#39;|&#39; . cc($iprivate . &#39;\\\\/\\\\?&#39;), &#39;*&#39;);\r\n\r\n    $isegment_nz_nc = ncg($pct_encoded . &#39;|&#39; . cc($iunreserved . $sub_delims . &#39;@&#39;), &#39;+&#39;);\r\n    $isegment_nz = ncg($ipchar, &#39;+&#39;);\r\n    $isegment = ncg($ipchar, &#39;*&#39;);\r\n\r\n    $ipath_empty = &#39;(?!&#39; . $ipchar . &#39;)&#39;;\r\n    $ipath_rootless = ncg($isegment_nz) . ncg(&#39;\\\\/&#39; . $isegment, &#39;*&#39;);\r\n    $ipath_noscheme = ncg($isegment_nz_nc) . ncg(&#39;\\\\/&#39; . $isegment, &#39;*&#39;);\r\n    $ipath_absolute = &#39;\\\\/&#39; . ncg($ipath_rootless, &#39;?&#39;); // Spec says isegment-nz *( &quot;/&quot; isegment )\r\n    $ipath_abempty = ncg(&#39;\\\\/&#39; . $isegment, &#39;*&#39;);\r\n\r\n    $ipath = ncg(implode(&#39;|&#39;, array(\r\n        $ipath_abempty,\r\n        $ipath_absolute,\r\n        $ipath_noscheme,\r\n        $ipath_rootless,\r\n        $ipath_empty\r\n    ))) . &#39;)&#39;;\r\n\r\n    $ireg_name = ncg($pct_encoded . &#39;|&#39; . cc($iunreserved . $sub_delims . &#39;@&#39;), &#39;*&#39;);\r\n\r\n    $ihost = ncg(implode(&#39;|&#39;, array($IP_literal, $IPv4address, $ireg_name)));\r\n    $iuserinfo = ncg($pct_encoded . &#39;|&#39; . cc($iunreserved . $sub_delims . &#39;:&#39;), &#39;*&#39;);\r\n    $iauthority = ncg($iuserinfo . &#39;@&#39;, &#39;?&#39;) . $ihost . ncg(&#39;:&#39; . $port, &#39;?&#39;);\r\n\r\n    $irelative_part = ncg(implode(&#39;|&#39;, array(\r\n        &#39;\\\\/\\\\/&#39; . $iauthority . $ipath_abempty . &#39;&#39;,\r\n        &#39;&#39; . $ipath_absolute . &#39;&#39;,\r\n        &#39;&#39; . $ipath_noscheme . &#39;&#39;,\r\n        &#39;&#39; . $ipath_empty . &#39;&#39;\r\n    )));\r\n\r\n    $irelative_ref = $irelative_part . ncg(&#39;\\\\?&#39; . $iquery, &#39;?&#39;) . ncg(&#39;\\\\#&#39; . $ifragment, &#39;?&#39;);\r\n\r\n    $ihier_part = ncg(implode(&#39;|&#39;, array(\r\n        &#39;\\\\/\\\\/&#39; . $iauthority . $ipath_abempty . &#39;&#39;,\r\n        &#39;&#39; . $ipath_absolute . &#39;&#39;,\r\n        &#39;&#39; . $ipath_rootless . &#39;&#39;,\r\n        &#39;&#39; . $ipath_empty . &#39;&#39;\r\n    )));\r\n\r\n    $absolute_IRI = $scheme . &#39;:&#39; . $ihier_part . ncg(&#39;\\\\?&#39; . $iquery, &#39;?&#39;);\r\n\r\n    $IRI = $scheme . &#39;:&#39; . $ihier_part . ncg(&#39;\\\\?&#39; . $iquery, &#39;?&#39;) . ncg(&#39;\\\\#&#39; . $ifragment, &#39;?&#39;);\r\n\r\n    $IRI_reference = ncg($IRI . &#39;|&#39; . $irelative_ref);\r\n\r\nEdit 7 March 2011: Because of the way PHP handles backslashes in quoted strings, these are unusable by default. You&#39;ll need to double-escape backslashes except where the backslash has a special meaning in regex. You can do that this way:\r\n\r\n    $escape_backslash = &#39;/(?&lt;!\\\\)\\\\(?![\\[\\]\\\\\\^\\$\\.\\|\\*\\+\\(\\)QEnrtaefvdwsDWSbAZzB1-9GX]|x\\{[0-9a-f]{1,4}\\}|\\c[A-Z]|)/&#39;;\r\n    $absolute_IRI = preg_replace($escape_backslash, &#39;\\\\\\\\&#39;, $absolute_IRI);\r\n    $IRI = preg_replace($escape_backslash, &#39;\\\\\\\\&#39;, $IRI);\r\n    $IRI_reference = preg_replace($escape_backslash, &#39;\\\\\\\\&#39;, $IRI_reference);"}, {"tags": [], "down_vote_count": 2, "creation_date": 1262805460, "answer_id": 2015516, "path": "stack.django.answer", "score": 40, "up_vote_count": 42, "is_accepted": false, "last_activity_date": 1374602483, "last_edit_date": 1374602483, "body_markdown": "With regard to **eyelidness**&#39; answer post that reads &quot;This is based on my reading of the URI specification.&quot;: Thanks Eyelidness, yours is the perfect solution I sought, as it is based on the URI spec! Superb work. :)\r\n\r\nI had to make two amendments. The first to get the regexp to match IP address URLs correctly in PHP (v5.2.10) with the preg_match() function.\r\n\r\nI had to add one more set of parenthesis to the line above &quot;IP Address&quot; around the pipes:\r\n\r\n    )|((\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])\\.){3}(?#\r\n\r\nNot sure why.\r\n\r\nI have also reduced the top level domain minimum length from 3 to 2 letters to support .co.uk and similar.\r\n\r\nFinal code:\r\n\r\n    /^(https?|ftp):\\/\\/(?#                                      protocol\r\n    )(([a-z0-9$_\\.\\+!\\*\\&#39;\\(\\),;\\?&amp;=-]|%[0-9a-f]{2})+(?#         username\r\n    )(:([a-z0-9$_\\.\\+!\\*\\&#39;\\(\\),;\\?&amp;=-]|%[0-9a-f]{2})+)?(?#      password\r\n    )@)?(?#                                                     auth requires @\r\n    )((([a-z0-9]\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\.)*(?#             domain segments AND\r\n    )[a-z][a-z0-9-]*[a-z0-9](?#                                 top level domain  OR\r\n    )|((\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])\\.){3}(?#\r\n        )(\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])(?#             IP address\r\n    ))(:\\d+)?(?#                                                port\r\n    ))(((\\/+([a-z0-9$_\\.\\+!\\*\\&#39;\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)*(?# path\r\n    )(\\?([a-z0-9$_\\.\\+!\\*\\&#39;\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)(?#      query string\r\n    )?)?)?(?#                                                   path and query string optional\r\n    )(#([a-z0-9$_\\.\\+!\\*\\&#39;\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)?(?#      fragment\r\n    )$/i\r\n\r\nThis modified version was not checked against the URI specification so I can&#39;t vouch for it&#39;s compliance, it was altered to handle URLs on local network environments and two digit TLDs as well as other kinds of Web URL, and to work better in the PHP setup I use.\r\n\r\nAs **PHP** code:\r\n\r\n    define(&#39;URL_FORMAT&#39;, \r\n    &#39;/^(https?):\\/\\/&#39;.                                         // protocol\r\n    &#39;(([a-z0-9$_\\.\\+!\\*\\&#39;\\(\\),;\\?&amp;=-]|%[0-9a-f]{2})+&#39;.         // username\r\n    &#39;(:([a-z0-9$_\\.\\+!\\*\\&#39;\\(\\),;\\?&amp;=-]|%[0-9a-f]{2})+)?&#39;.      // password\r\n    &#39;@)?(?#&#39;.                                                  // auth requires @\r\n    &#39;)((([a-z0-9]\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\.)*&#39;.                      // domain segments AND\r\n    &#39;[a-z][a-z0-9-]*[a-z0-9]&#39;.                                 // top level domain  OR\r\n    &#39;|((\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])\\.){3}&#39;.\r\n    &#39;(\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])&#39;.                 // IP address\r\n    &#39;)(:\\d+)?&#39;.                                                // port\r\n    &#39;)(((\\/+([a-z0-9$_\\.\\+!\\*\\&#39;\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)*&#39;. // path\r\n    &#39;(\\?([a-z0-9$_\\.\\+!\\*\\&#39;\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)&#39;.      // query string\r\n    &#39;?)?)?&#39;.                                                   // path and query string optional\r\n    &#39;(#([a-z0-9$_\\.\\+!\\*\\&#39;\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)?&#39;.      // fragment\r\n    &#39;$/i&#39;);\r\n\r\nHere is a test program in PHP which validates a variety of URLs using the regex:\r\n\r\n    &lt;?php\r\n\r\n    define(&#39;URL_FORMAT&#39;,\r\n    &#39;/^(https?):\\/\\/&#39;.                                         // protocol\r\n    &#39;(([a-z0-9$_\\.\\+!\\*\\&#39;\\(\\),;\\?&amp;=-]|%[0-9a-f]{2})+&#39;.         // username\r\n    &#39;(:([a-z0-9$_\\.\\+!\\*\\&#39;\\(\\),;\\?&amp;=-]|%[0-9a-f]{2})+)?&#39;.      // password\r\n    &#39;@)?(?#&#39;.                                                  // auth requires @\r\n    &#39;)((([a-z0-9]\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\.)*&#39;.                      // domain segments AND\r\n    &#39;[a-z][a-z0-9-]*[a-z0-9]&#39;.                                 // top level domain  OR\r\n    &#39;|((\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])\\.){3}&#39;.\r\n    &#39;(\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])&#39;.                 // IP address\r\n    &#39;)(:\\d+)?&#39;.                                                // port\r\n    &#39;)(((\\/+([a-z0-9$_\\.\\+!\\*\\&#39;\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)*&#39;. // path\r\n    &#39;(\\?([a-z0-9$_\\.\\+!\\*\\&#39;\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)&#39;.      // query string\r\n    &#39;?)?)?&#39;.                                                   // path and query string optional\r\n    &#39;(#([a-z0-9$_\\.\\+!\\*\\&#39;\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)?&#39;.      // fragment\r\n    &#39;$/i&#39;);\r\n\r\n    /**\r\n     * Verify the syntax of the given URL. \r\n     * \r\n     * @access public\r\n     * @param $url The URL to verify.\r\n     * @return boolean\r\n     */\r\n    function is_valid_url($url) {\r\n      if (str_starts_with(strtolower($url), &#39;http://localhost&#39;)) {\r\n        return true;\r\n      }\r\n      return preg_match(URL_FORMAT, $url);\r\n    }\r\n\r\n    \r\n    /**\r\n     * String starts with something\r\n     * \r\n     * This function will return true only if input string starts with\r\n     * niddle\r\n     * \r\n     * @param string $string Input string\r\n     * @param string $niddle Needle string\r\n     * @return boolean\r\n     */\r\n    function str_starts_with($string, $niddle) {\r\n          return substr($string, 0, strlen($niddle)) == $niddle;\r\n    }\r\n\r\n\r\n    /**\r\n     * Test a URL for validity and count results.\r\n     * @param url url\r\n     * @param expected expected result (true or false)\r\n     */\r\n\r\n    $numtests = 0;\r\n    $passed = 0;\r\n\r\n    function test_url($url, $expected) {\r\n      global $numtests, $passed;\r\n      $numtests++;\r\n      $valid = is_valid_url($url);\r\n      echo &quot;URL Valid?: &quot; . ($valid?&quot;yes&quot;:&quot;no&quot;) . &quot; for URL: $url. Expected: &quot;.($expected?&quot;yes&quot;:&quot;no&quot;).&quot;. &quot;;\r\n      if($valid == $expected) {\r\n        echo &quot;PASS\\n&quot;; $passed++;\r\n      } else {\r\n        echo &quot;FAIL\\n&quot;;\r\n      }\r\n    }\r\n\r\n    echo &quot;URL Tests:\\n\\n&quot;;\r\n\r\n    test_url(&quot;http://localserver/projects/public/assets/javascript/widgets/UserBoxMenu/widget.css&quot;, true);\r\n    test_url(&quot;http://www.google.com&quot;, true);\r\n    test_url(&quot;http://www.google.co.uk/projects/my%20folder/test.php&quot;, true);\r\n    test_url(&quot;https://myserver.localdomain&quot;, true);\r\n    test_url(&quot;http://192.168.1.120/projects/index.php&quot;, true);\r\n    test_url(&quot;http://192.168.1.1/projects/index.php&quot;, true);\r\n    test_url(&quot;http://projectpier-server.localdomain/projects/public/assets/javascript/widgets/UserBoxMenu/widget.css&quot;, true);\r\n    test_url(&quot;https://2.4.168.19/project-pier?c=test&amp;a=b&quot;, true);\r\n    test_url(&quot;https://localhost/a/b/c/test.php?c=controller&amp;arg1=20&amp;arg2=20&quot;, true);\r\n    test_url(&quot;http://user:password@localhost/a/b/c/test.php?c=controller&amp;arg1=20&amp;arg2=20&quot;, true);\r\n      \r\n    echo &quot;\\n$passed out of $numtests tests passed.\\n\\n&quot;;\r\n\r\n    ?&gt;\r\n\r\nThanks again to **eyelidness** for the regex!\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1299807414, "answer_id": 5268056, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1303615444, "last_edit_date": 1303615444, "body_markdown": "I&#39;ve been working on an in-depth article discussing URI validation using regular expressions. It is based on RFC3986.  \r\n  \r\n[Regular Expression URI Validation](http://jmrware.com/articles/2009/uri_regexp/URI_regex.html)\r\n\r\nAlthough the article is not yet complete, I have come up with a PHP function which does a pretty good job of validating HTTP and FTP URLs. Here is the current version:\r\n&lt;!-- language: lang-php --&gt;\r\n\r\n    // function url_valid($url) { Rev:20110423_2000\r\n    //\r\n    // Return associative array of valid URI components, or FALSE if $url is not\r\n    // RFC-3986 compliant. If the passed URL begins with: &quot;www.&quot; or &quot;ftp.&quot;, then\r\n    // &quot;http://&quot; or &quot;ftp://&quot; is prepended and the corrected full-url is stored in\r\n    // the return array with a key name &quot;url&quot;. This value should be used by the caller.\r\n    //\r\n    // Return value: FALSE if $url is not valid, otherwise array of URI components:\r\n    // e.g.\r\n    // Given: &quot;http://www.jmrware.com:80/articles?height=10&amp;width=75#fragone&quot;\r\n    // Array(\r\n    //    [scheme] =&gt; http\r\n    //    [authority] =&gt; www.jmrware.com:80\r\n    //    [userinfo] =&gt;\r\n    //    [host] =&gt; www.jmrware.com\r\n    //    [IP_literal] =&gt;\r\n    //    [IPV6address] =&gt;\r\n    //    [ls32] =&gt;\r\n    //    [IPvFuture] =&gt;\r\n    //    [IPv4address] =&gt;\r\n    //    [regname] =&gt; www.jmrware.com\r\n    //    [port] =&gt; 80\r\n    //    [path_abempty] =&gt; /articles\r\n    //    [query] =&gt; height=10&amp;width=75\r\n    //    [fragment] =&gt; fragone\r\n    //    [url] =&gt; http://www.jmrware.com:80/articles?height=10&amp;width=75#fragone\r\n    // )\r\n    function url_valid($url) {\r\n        if (strpos($url, &#39;www.&#39;) === 0) $url = &#39;http://&#39;. $url;\r\n        if (strpos($url, &#39;ftp.&#39;) === 0) $url = &#39;ftp://&#39;. $url;\r\n        if (!preg_match(&#39;/# Valid absolute URI having a non-empty, valid DNS host.\r\n            ^\r\n            (?P&lt;scheme&gt;[A-Za-z][A-Za-z0-9+\\-.]*):\\/\\/\r\n            (?P&lt;authority&gt;\r\n              (?:(?P&lt;userinfo&gt;(?:[A-Za-z0-9\\-._~!$&amp;\\&#39;()*+,;=:]|%[0-9A-Fa-f]{2})*)@)?\r\n              (?P&lt;host&gt;\r\n                (?P&lt;IP_literal&gt;\r\n                  \\[\r\n                  (?:\r\n                    (?P&lt;IPV6address&gt;\r\n                      (?:                                                (?:[0-9A-Fa-f]{1,4}:){6}\r\n                      |                                                ::(?:[0-9A-Fa-f]{1,4}:){5}\r\n                      | (?:                          [0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){4}\r\n                      | (?:(?:[0-9A-Fa-f]{1,4}:){0,1}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){3}\r\n                      | (?:(?:[0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){2}\r\n                      | (?:(?:[0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})?::   [0-9A-Fa-f]{1,4}:\r\n                      | (?:(?:[0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})?::\r\n                      )\r\n                      (?P&lt;ls32&gt;[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}\r\n                      | (?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}\r\n                           (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\r\n                      )\r\n                    |   (?:(?:[0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})?::   [0-9A-Fa-f]{1,4}\r\n                    |   (?:(?:[0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})?::\r\n                    )\r\n                  | (?P&lt;IPvFuture&gt;[Vv][0-9A-Fa-f]+\\.[A-Za-z0-9\\-._~!$&amp;\\&#39;()*+,;=:]+)\r\n                  )\r\n                  \\]\r\n                )\r\n              | (?P&lt;IPv4address&gt;(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}\r\n                                   (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\r\n              | (?P&lt;regname&gt;(?:[A-Za-z0-9\\-._~!$&amp;\\&#39;()*+,;=]|%[0-9A-Fa-f]{2})+)\r\n              )\r\n              (?::(?P&lt;port&gt;[0-9]*))?\r\n            )\r\n            (?P&lt;path_abempty&gt;(?:\\/(?:[A-Za-z0-9\\-._~!$&amp;\\&#39;()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)\r\n            (?:\\?(?P&lt;query&gt;       (?:[A-Za-z0-9\\-._~!$&amp;\\&#39;()*+,;=:@\\\\/?]|%[0-9A-Fa-f]{2})*))?\r\n            (?:\\#(?P&lt;fragment&gt;    (?:[A-Za-z0-9\\-._~!$&amp;\\&#39;()*+,;=:@\\\\/?]|%[0-9A-Fa-f]{2})*))?\r\n            $\r\n            /mx&#39;, $url, $m)) return FALSE;\r\n        switch ($m[&#39;scheme&#39;]) {\r\n        case &#39;https&#39;:\r\n        case &#39;http&#39;:\r\n            if ($m[&#39;userinfo&#39;]) return FALSE; // HTTP scheme does not allow userinfo.\r\n            break;\r\n        case &#39;ftps&#39;:\r\n        case &#39;ftp&#39;:\r\n            break;\r\n        default:\r\n            return FALSE;   // Unrecognized URI scheme. Default to FALSE.\r\n        }\r\n        // Validate host name conforms to DNS &quot;dot-separated-parts&quot;.\r\n        if ($m[&#39;regname&#39;]) { // If host regname specified, check for DNS conformance.\r\n            if (!preg_match(&#39;/# HTTP DNS host name.\r\n                ^                      # Anchor to beginning of string.\r\n                (?!.{256})             # Overall host length is less than 256 chars.\r\n                (?:                    # Group dot separated host part alternatives.\r\n                  [A-Za-z0-9]\\.        # Either a single alphanum followed by dot\r\n                |                      # or... part has more than one char (63 chars max).\r\n                  [A-Za-z0-9]          # Part first char is alphanum (no dash).\r\n                  [A-Za-z0-9\\-]{0,61}  # Internal chars are alphanum plus dash.\r\n                  [A-Za-z0-9]          # Part last char is alphanum (no dash).\r\n                  \\.                   # Each part followed by literal dot.\r\n                )*                     # Zero or more parts before top level domain.\r\n                (?:                    # Explicitly specify top level domains.\r\n                  com|edu|gov|int|mil|net|org|biz|\r\n                  info|name|pro|aero|coop|museum|\r\n                  asia|cat|jobs|mobi|tel|travel|\r\n                  [A-Za-z]{2})         # Country codes are exactly two alpha chars.\r\n                  \\.?                  # Top level domain can end in a dot.\r\n                $                      # Anchor to end of string.\r\n                /ix&#39;, $m[&#39;host&#39;])) return FALSE;\r\n        }\r\n        $m[&#39;url&#39;] = $url;\r\n        for ($i = 0; isset($m[$i]); ++$i) unset($m[$i]);\r\n        return $m; // return TRUE == array of useful named $matches plus the valid $url.\r\n    }\r\n\r\nThis function utilizes two regexes; one to match a subset of valid generic URIs (absolute ones having a non-empty host), and a second to validate the DNS &quot;dot-separated-parts&quot; host name. Although this function currently validates only HTTP and FTP schemes, it is structured such that it can be easily extended to handle other schemes.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1311334247, "answer_id": 6789329, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1407686310, "last_edit_date": 1407686310, "body_markdown": "I think some people weren&#39;t able to use your php code because of the modifiers implied. I copied your code as is and used as an example:\r\n\r\n    if(\r\n    \tpreg_match(\r\n    \t\t&quot;/^{$IRI_reference}$/iu&quot;,\r\n    \t\t&#39;http://www.url.com&#39;\r\n    \t)\r\n    ){\r\n    \techo &#39;true&#39;;\r\n    }\r\n\r\nNotice the &quot;i&quot; and &quot;u&quot; modifiers. without &quot;u&quot; php throws an exception saying:\r\n\r\n    Warning: preg_match() [function.preg-match]: Compilation failed: character value in \\x{...} sequence is too large at offset XX"}, {"tags": [], "down_vote_count": 3, "creation_date": 1322001534, "answer_id": 8234912, "path": "stack.django.answer", "score": 116, "up_vote_count": 119, "is_accepted": false, "last_activity_date": 1481183212, "last_edit_date": 1481183212, "body_markdown": "I&#39;ve just written up a blog post for a great solution for recognizing URLs in most used formats such as:\r\n\r\n- `www.google.com`\r\n- `http://www.google.com`\r\n- `mailto:somebody@google.com`\r\n- `somebody@google.com`\r\n- `www.url-with-querystring.com/?url=has-querystring`\r\n\r\nThe regular expression used is:\r\n\r\n    /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&amp;=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&amp;=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&amp;;%@.\\w_]*)#?(?:[\\w]*))?)/\r\n\r\nHowever, I would recommend you to go to http://blog.mattheworiordan.com/post/13174566389/url-regular-expression-for-links-with-or-without-the to see the working example."}, {"tags": [], "down_vote_count": 0, "creation_date": 1329255163, "answer_id": 9284473, "path": "stack.django.answer", "score": 32, "up_vote_count": 32, "is_accepted": false, "last_activity_date": 1438231404, "last_edit_date": 1438231404, "body_markdown": "Mathias Bynens has a great article on the best comparison of a lot of regular expressions: [In search of the perfect URL validation regex](http://mathiasbynens.be/demo/url-regex)\r\n\r\n[The best one posted](https://gist.github.com/729294 &quot;Regular Expression for URL validation&quot;) is a little long, but it matches just about anything you can throw at it.\r\n\r\n### JavaScript version\r\n\r\n    /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i\r\n\r\n### PHP version\r\n\r\n\r\n    _^(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\x{00a1}-\\x{ffff}0-9]-*)*[a-z\\x{00a1}-\\x{ffff}0-9]+)(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}0-9]-*)*[a-z\\x{00a1}-\\x{ffff}0-9]+)*(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$_iuS"}, {"tags": [], "down_vote_count": 0, "creation_date": 1351080398, "answer_id": 13048893, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1351080398, "body_markdown": "This is a rather old thread now and the question asks for a regex based URL validator.  I ran into the thread whilst looking for precisely the same thing.  While it may well be possible to write a really comprehensive regex to validate URLs I eventually settled on another way to do things - by using PHP&#39;s [parse_url][1] function.  \r\n\r\nIt returns boolean false if the url cannot be parsed. Otherwise it returns the scheme, the host and other information.  This may well not be enough for a comprehensive URL check on its own but can be drilled down into for further analysis.  If the intent is to simply catch typos, invalid schemes etc it is perfectly adequate.\r\n\r\n\r\n  [1]: http://php.net/manual/en/function.parse-url.php"}, {"tags": [], "down_vote_count": 1, "creation_date": 1351169606, "answer_id": 13069066, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1351169918, "last_edit_date": 1351169918, "body_markdown": "    function validateURL(textval) {\r\n                var urlregex = new RegExp(\r\n                &quot;^(http|https|ftp)\\://[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\\-\\._\\?\\,\\&#39;/\\\\\\+&amp;amp;%\\$#\\=~])*$&quot;);\r\n                return urlregex.test(textval);\r\n            }\r\n\r\nMatches\t\r\nhttp://www.asdah.com/~joe | ftp://ftp.asdah.co.uk:2828/asdah%20asdah.gif | https://asdah.gov/asdh-ah.as"}, {"tags": [], "down_vote_count": 0, "creation_date": 1351169853, "answer_id": 13069128, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1351169853, "body_markdown": "            function validateURL(textval) {\r\n                var urlregex = new RegExp(\r\n                &quot;^(http|https|ftp)\\://([a-zA-Z0-9\\.\\-]+(\\:[a-zA-Z0-9\\.&amp;amp;%\\$\\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\\-]+\\.)*[a-zA-Z0-9\\-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\\:[0-9]+)*(/($|[a-zA-Z0-9\\.\\,\\?\\&#39;\\\\\\+&amp;amp;%\\$#\\=~_\\-]+))*$&quot;);\r\n                return urlregex.test(textval);\r\n            }\r\n\r\nMatches\t\r\nhttp://site.com/dir/file.php?var=moo | ftp://user:pass@site.com:21/file/dir\r\n\r\nNon-Matches\t\r\nsite.com | http://site.com/dir//\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1354662219, "answer_id": 13713556, "path": "stack.django.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1354663086, "last_edit_date": 1354663086, "body_markdown": "i wrote a little groovy version that you can run\r\n\r\nit matches the following urls (which is good enough for me)\r\n\r\n    public static void main(args){\r\n    \t\tString url = &quot;go to http://www.m.abut.ly/abc its awesome&quot;\r\n    \t\turl = url.replaceAll(/https?:\\/\\/w{0,3}\\w*?\\.(\\w*?\\.)?\\w{2,3}\\S*|www\\.(\\w*?\\.)?\\w*?\\.\\w{2,3}\\S*|(\\w*?\\.)?\\w*?\\.\\w{2,3}[\\/\\?]\\S*/ , { it -&gt;\r\n    \t\t\t&quot;woof${it}woof&quot;\r\n    \t\t})\r\n    \t\tprintln url\r\n    \t\t\r\n    \t}\r\n\r\nhttp://google.com\r\n\r\nhttp://google.com/help.php\r\n\r\nhttp://google.com/help.php?a=5\r\n\r\nhttp://www.google.com\r\n\r\nhttp://www.google.com/help.php\r\n\r\nhttp://www.google.com?a=5\r\n\r\ngoogle.com?a=5\r\n\r\ngoogle.com/help.php\r\n\r\ngoogle.com/help.php?a=5\r\n\r\nhttp://www.m.google.com/help.php?a=5 (and all its permutations)\r\n\r\nwww.m.google.com/help.php?a=5 (and all its permutations)\r\n\r\nm.google.com/help.php?a=5 (and all its permutations)\r\n\r\nThe important thing for any urls that dont start with http or www is that they must include a / or ?\r\n\r\ni bet this can be tweaked a little more but it does the job pretty nice for being so short and compact... because you can pretty much split it in 3:\r\n\r\nfind anything that starts with http: https?:\\/\\/w{0,3}\\w*?\\.\\w{2,3}\\S*\r\n\r\nfind anything that starts with www: www\\.\\w*?\\.\\w{2,3}\\S*\r\n\r\nor find anything that must have a text then a dot then at least 2 letters and then a ? or /: \\w*?\\.\\w{2,3}[\\/\\?]\\S*\r\n\r\n "}, {"tags": [], "down_vote_count": 1, "creation_date": 1354779996, "answer_id": 13739087, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1354782772, "last_edit_date": 1354782772, "body_markdown": "I tried to formulate my version of url. My requirement was to capture instances in a String where possible url can be cse.uom.ac.mu - noting that it is not preceded by http nor www\r\n\r\n    String regularExpression = &quot;((((ht{2}ps?://)?)((w{3}\\\\.)?))?)[^.&amp;&amp;[a-zA-Z0-9]][a-zA-Z0-9.-]+[^.&amp;&amp;[a-zA-Z0-9]](\\\\.[a-zA-Z]{2,3})&quot;;\r\n\r\n    assertTrue(&quot;www.google.com&quot;.matches(regularExpression));\r\n    assertTrue(&quot;www.google.co.uk&quot;.matches(regularExpression));\r\n    assertTrue(&quot;http://www.google.com&quot;.matches(regularExpression));\r\n    assertTrue(&quot;http://www.google.co.uk&quot;.matches(regularExpression));\r\n    assertTrue(&quot;https://www.google.com&quot;.matches(regularExpression));\r\n    assertTrue(&quot;https://www.google.co.uk&quot;.matches(regularExpression));\r\n    assertTrue(&quot;google.com&quot;.matches(regularExpression));\r\n    assertTrue(&quot;google.co.uk&quot;.matches(regularExpression));\r\n    assertTrue(&quot;google.mu&quot;.matches(regularExpression));\r\n    assertTrue(&quot;mes.intnet.mu&quot;.matches(regularExpression));\r\n    assertTrue(&quot;cse.uom.ac.mu&quot;.matches(regularExpression));\r\n    \r\n    //cannot contain 2 &#39;.&#39; after www\r\n    assertFalse(&quot;www..dr.google&quot;.matches(regularExpression));\r\n\r\n    //cannot contain 2 &#39;.&#39; just before com\r\n    assertFalse(&quot;www.dr.google..com&quot;.matches(regularExpression));\r\n    \r\n    // to test case where url www must be followed with a &#39;.&#39;\r\n    assertFalse(&quot;www:google.com&quot;.matches(regularExpression));\r\n    \r\n    // to test case where url www must be followed with a &#39;.&#39;\r\n    //assertFalse(&quot;http://wwwe.google.com&quot;.matches(regularExpression));\r\n    \r\n    // to test case where www must be preceded with a &#39;.&#39;\r\n    assertFalse(&quot;https://www@.google.com&quot;.matches(regularExpression));"}, {"tags": [], "down_vote_count": 0, "creation_date": 1367950473, "answer_id": 16425824, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1367950473, "body_markdown": "For Python, this is the actual URL validating regex used in Django 1.5.1:\r\n\r\n    import re\r\n    regex = re.compile(\r\n            r&#39;^(?:http|ftp)s?://&#39;  # http:// or https://\r\n            r&#39;(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|&#39;  # domain...\r\n            r&#39;localhost|&#39;  # localhost...\r\n            r&#39;\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|&#39;  # ...or ipv4\r\n            r&#39;\\[?[A-F0-9]*:[A-F0-9:]+\\]?)&#39;  # ...or ipv6\r\n            r&#39;(?::\\d+)?&#39;  # optional port\r\n            r&#39;(?:/?|[/?]\\S+)$&#39;, re.IGNORECASE)\r\n\r\nThis does both ipv4 and ipv6 addresses as well as ports and GET parameters.\r\n\r\nFound in the [code here](https://github.com/django/django/blob/master/django/core/validators.py), Line 44."}, {"tags": [], "down_vote_count": 0, "creation_date": 1371602916, "answer_id": 17181268, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1371602916, "body_markdown": "whats wrong with plain and simple FILTER_VALIDATE_URL ?\r\n\r\n     $url = &quot;http://www.example.com&quot;;\r\n\r\n    if(!filter_var($url, FILTER_VALIDATE_URL))\r\n      {\r\n      echo &quot;URL is not valid&quot;;\r\n      }\r\n    else\r\n      {\r\n      echo &quot;URL is valid&quot;;\r\n      }\r\n\r\nI know its not the question exactly but it did the job for me when I needed to validate urls so thought it might be useful to others who come across this post looking for the same thing"}, {"tags": [], "down_vote_count": 0, "creation_date": 1371628403, "answer_id": 17185781, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1371628403, "body_markdown": "I was not able to find the regex I was looking for so I modified a regex to fullfill my requirements, and apparently it seems to work fine now. My requirements were:\r\n\r\n- Match URLs w/o protocol (www.gooogle.com)\r\n- Match URLs with query parameters and path (http://subdomain.web-site.com/cgi-bin/perl.cgi?key1=value1&amp;key2=value2e)\r\n- Don&#39;t match URLs where there are not acceptable characters (e.g. &quot;&#39;&#163;), for instance: (www.google.com/somthing&quot;/somethingmore)\r\n\r\nHere what I came up with, any suggestion is appreciated:\r\n\r\n    @Test\r\n        public void testWebsiteUrl(){\r\n            String regularExpression = &quot;((http|ftp|https):\\\\/\\\\/)?[\\\\w\\\\-_]+(\\\\.[\\\\w\\\\-_]+)+([\\\\w\\\\-\\\\.,@?^=%&amp;amp;:/~\\\\+#]*[\\\\w\\\\-\\\\@?^=%&amp;amp;/~\\\\+#])?&quot;;\r\n     \r\n            assertTrue(&quot;www.google.com&quot;.matches(regularExpression));\r\n            assertTrue(&quot;www.google.co.uk&quot;.matches(regularExpression));\r\n            assertTrue(&quot;http://www.google.com&quot;.matches(regularExpression));\r\n            assertTrue(&quot;http://www.google.co.uk&quot;.matches(regularExpression));\r\n            assertTrue(&quot;https://www.google.com&quot;.matches(regularExpression));\r\n            assertTrue(&quot;https://www.google.co.uk&quot;.matches(regularExpression));\r\n            assertTrue(&quot;google.com&quot;.matches(regularExpression));\r\n            assertTrue(&quot;google.co.uk&quot;.matches(regularExpression));\r\n            assertTrue(&quot;google.mu&quot;.matches(regularExpression));\r\n            assertTrue(&quot;mes.intnet.mu&quot;.matches(regularExpression));\r\n            assertTrue(&quot;cse.uom.ac.mu&quot;.matches(regularExpression));\r\n     \r\n            assertTrue(&quot;http://www.google.com/path&quot;.matches(regularExpression));\r\n            assertTrue(&quot;http://subdomain.web-site.com/cgi-bin/perl.cgi?key1=value1&amp;key2=value2e&quot;.matches(regularExpression));\r\n            assertTrue(&quot;http://www.google.com/?queryparam=123&quot;.matches(regularExpression));\r\n            assertTrue(&quot;http://www.google.com/path?queryparam=123&quot;.matches(regularExpression));\r\n             \r\n            assertFalse(&quot;www..dr.google&quot;.matches(regularExpression));\r\n     \r\n            assertFalse(&quot;www:google.com&quot;.matches(regularExpression));\r\n     \r\n            assertFalse(&quot;https://www@.google.com&quot;.matches(regularExpression));\r\n             \r\n            assertFalse(&quot;https://www.google.com\\&quot;&quot;.matches(regularExpression));\r\n            assertFalse(&quot;https://www.google.com&#39;&quot;.matches(regularExpression));\r\n             \r\n            assertFalse(&quot;http://www.google.com/path&#39;&quot;.matches(regularExpression));\r\n            assertFalse(&quot;http://subdomain.web-site.com/cgi-bin/perl.cgi?key1=value1&amp;key2=value2e&#39;&quot;.matches(regularExpression));\r\n            assertFalse(&quot;http://www.google.com/?queryparam=123&#39;&quot;.matches(regularExpression));\r\n            assertFalse(&quot;http://www.google.com/path?queryparam=12&#39;3&quot;.matches(regularExpression));\r\n             \r\n        }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1373196808, "answer_id": 17511761, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1389980314, "last_edit_date": 1389980314, "body_markdown": "This one works for me very well. `(https?|ftp)://(www\\d?|[a-zA-Z0-9]+)?\\.[a-zA-Z0-9-]+(\\:|\\.)([a-zA-Z0-9.]+|(\\d+)?)([/?:].*)?`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1374122824, "answer_id": 17714711, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1494047103, "last_edit_date": 1494047103, "body_markdown": "The best regular expression for URL for me would be:\r\n\r\n    &quot;(([\\w]+:)?//)?(([\\d\\w]|%[a-fA-F\\d]{2,2})+(:([\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,4}(:[\\d]+)?(/([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(&amp;?([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1378831915, "answer_id": 18724720, "path": "stack.django.answer", "score": 21, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1378831915, "body_markdown": "**This might not be a job for regexes, but for existing tools in your language of choice.**  You probably want to use existing code that has already been written, tested, and debugged.\r\n\r\nIn PHP, use the [`parse_url`](http://php.net/manual/en/function.parse-url.php) function.\r\n\r\n\r\nPerl: [`URI` module](http://search.cpan.org/dist/URI/).\r\n\r\nRuby: [`URI` module](http://www.ruby-doc.org/stdlib-1.9.3/libdoc/uri/rdoc/URI.html).\r\n\r\n.NET: [&#39;Uri&#39; class](http://msdn.microsoft.com/en-us/library/txt7706a.aspx)\r\n\r\n**Regexes are not a magic wand you wave at every problem that happens to involve strings.**"}, {"tags": [], "down_vote_count": 0, "creation_date": 1381346464, "answer_id": 19280767, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1381346464, "body_markdown": "The following RegEx will work:\r\n\r\n    &quot;@((((ht)|(f))tp[s]?://)|(www\\.))([a-z][-a-z0-9]+\\.)?([a-z][-a-z0-9]+\\.)?[a-z][-a-z0-9]+\\.[a-z]+[/]?[a-z0-9._\\/~#&amp;=;%+?-]*@si&quot;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1386847665, "answer_id": 20542241, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1386847665, "body_markdown": "To Check URL regex would be:\r\n\r\n    ^http(s{0,1})://[a-zA-Z0-9_/\\\\-\\\\.]+\\\\.([A-Za-z/]{2,5})[a-zA-Z0-9_/\\\\&amp;\\\\?\\\\=\\\\-\\\\.\\\\~\\\\%]*"}, {"tags": [], "down_vote_count": 0, "creation_date": 1401275338, "answer_id": 23909979, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1401294635, "last_edit_date": 1401294635, "body_markdown": "Use this one its working for me\r\n\r\n    function validUrl(Url) {\r\n        var myRegExp  =/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/i;\r\n        \r\n        if (!RegExp.test(Url.value)) {\r\n            $(&quot;#urlErrorLbl&quot;).removeClass(&#39;highlightNew&#39;);\r\n            return false;\r\n        } \r\n        \r\n        $(&quot;#urlErrorLbl&quot;).addClass(&#39;highlightNew&#39;);\t\r\n        return true; \r\n    }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1401965163, "answer_id": 24058129, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1453769348, "last_edit_date": 1453769348, "body_markdown": "This will match all URLs\r\n\r\n - with or without *http*/*https*   \r\n - with or without *www*\r\n\r\n...including sub-domains and those new top-level domain name extensions such as \r\n  .*museum*, \r\n  .*academy*, \r\n  .*foundation*\r\n  etc. which can have up to 63 characters (not just .*com*, .*net*, .*info* etc.)\r\n\r\n\r\n    (([\\w]+:)?//)?(([\\d\\w]|%[a-fA-f\\d]{2,2})+(:([\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,63}(:[\\d]+)?(/([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(&amp;?([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?\r\n\r\n\r\nBecause today maximum length of the available top-level domain name extension is 13 characters such as .*international*, you can change the number 63 in expression to 13 to prevent someone misusing it.\r\n\r\nas javascript\r\n\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var urlreg=/(([\\w]+:)?\\/\\/)?(([\\d\\w]|%[a-fA-f\\d]{2,2})+(:([\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,63}(:[\\d]+)?(\\/([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(&amp;?([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?/;\r\n\r\n    $(&#39;textarea&#39;).on(&#39;input&#39;,function(){\r\n      var url = $(this).val();\r\n      $(this).toggleClass(&#39;invalid&#39;, urlreg.test(url) == false)\r\n    });\r\n\r\n    $(&#39;textarea&#39;).trigger(&#39;input&#39;);\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    textarea{color:green;}\r\n    .invalid{color:red;}\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;textarea&gt;http://www.google.com&lt;/textarea&gt;\r\n    &lt;textarea&gt;http//www.google.com&lt;/textarea&gt;\r\n    &lt;textarea&gt;googlecom&lt;/textarea&gt;\r\n    &lt;textarea&gt;https://www.google.com&lt;/textarea&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nWikipedia Article: [List of all internet top-level domains][1]\r\n\r\n\r\n  [1]: http://en.wikipedia.org/wiki/List_of_Internet_top-level_domains"}, {"tags": [], "down_vote_count": 0, "creation_date": 1409183527, "answer_id": 25538699, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1409187301, "last_edit_date": 1409187301, "body_markdown": "I use this regex:\r\n\r\n    ((https?:)?//)?(([\\d\\w]|%[a-fA-f\\d]{2,2})+(:([\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,63}(:[\\d]+)?(/([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(&amp;?([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?\r\n\r\nTo support both:\r\n\r\n    http://stackoverflow.com\r\n    https://stackoverflow.com\r\n\r\nAnd:    \r\n\r\n    //stackoverflow.com"}, {"tags": [], "down_vote_count": 2, "creation_date": 1410681215, "answer_id": 25831196, "path": "stack.django.answer", "score": 1, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1410681215, "body_markdown": "Here is the best and the most matched regex for this situation\r\n\r\n    ^(?:http(?:s)?:\\/\\/)?(?:www\\.)?(?:[\\w-]*)\\.\\w{2,}$"}, {"tags": [], "down_vote_count": 0, "creation_date": 1418129329, "answer_id": 27379352, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1418129940, "last_edit_date": 1418129940, "body_markdown": "For convenience here&#39;s a one-liner regexp for URL&#39;s that will also match localhost where you&#39;re more likely to have ports than `.com` or similar.\r\n\r\n    (http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}(\\.[a-z]{2,6}|:[0-9]{3,4})\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;\\/\\/=]*)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1421245224, "answer_id": 27945109, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1421245224, "body_markdown": "To match the URL up to the domain: \r\n\r\n    (^(\\bhttp)(|s):\\/{2})(?=[a-z0-9-_]{1,255})\\.\\1\\.([a-z]{3,7}$)\r\n\r\nIt can be simplified to: \r\n\r\n    (^(\\bhttp)(|s):\\/{2})(?=[a-z0-9-_.]{1,255})\\.([a-z]{3,7})\r\n\r\nthe latter does not check for the end for the end line so that it can be later used create full blown URL with full paths and query strings.\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1424011759, "answer_id": 28527268, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1424011759, "body_markdown": "Here&#39;s a ready-to-go Java version from the Android source code.  This is the best one I&#39;ve found.\r\n\r\n    public static final Matcher WEB  = Pattern.compile(new StringBuilder()                 \r\n    .append(&quot;((?:(http|https|Http|Https|rtsp|Rtsp):&quot;)                      \r\n    .append(&quot;\\\\/\\\\/(?:(?:[a-zA-Z0-9\\\\$\\\\-\\\\_\\\\.\\\\+\\\\!\\\\*\\\\&#39;\\\\(\\\\)&quot;)                         \r\n    .append(&quot;\\\\,\\\\;\\\\?\\\\&amp;\\\\=]|(?:\\\\%[a-fA-F0-9]{2})){1,64}(?:\\\\:(?:[a-zA-Z0-9\\\\$\\\\-\\\\_&quot;)                         \r\n    .append(&quot;\\\\.\\\\+\\\\!\\\\*\\\\&#39;\\\\(\\\\)\\\\,\\\\;\\\\?\\\\&amp;\\\\=]|(?:\\\\%[a-fA-F0-9]{2})){1,25})?\\\\@)?)?&quot;)                         \r\n    .append(&quot;((?:(?:[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,64}\\\\.)+&quot;)   // named host                            \r\n    .append(&quot;(?:&quot;)   // plus top level domain                         \r\n    .append(&quot;(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])&quot;)                         \r\n    .append(&quot;|(?:biz|b[abdefghijmnorstvwyz])&quot;)                         \r\n    .append(&quot;|(?:cat|com|coop|c[acdfghiklmnoruvxyz])&quot;)                         \r\n    .append(&quot;|d[ejkmoz]&quot;)                         \r\n    .append(&quot;|(?:edu|e[cegrstu])&quot;)                         \r\n    .append(&quot;|f[ijkmor]&quot;)                         \r\n    .append(&quot;|(?:gov|g[abdefghilmnpqrstuwy])&quot;)                         \r\n    .append(&quot;|h[kmnrtu]&quot;)                         \r\n    .append(&quot;|(?:info|int|i[delmnoqrst])&quot;)                         \r\n    .append(&quot;|(?:jobs|j[emop])&quot;)                         \r\n    .append(&quot;|k[eghimnrwyz]&quot;)                         \r\n    .append(&quot;|l[abcikrstuvy]&quot;)                         \r\n    .append(&quot;|(?:mil|mobi|museum|m[acdghklmnopqrstuvwxyz])&quot;)                         \r\n    .append(&quot;|(?:name|net|n[acefgilopruz])&quot;)                         \r\n    .append(&quot;|(?:org|om)&quot;)                         \r\n    .append(&quot;|(?:pro|p[aefghklmnrstwy])&quot;)                         \r\n    .append(&quot;|qa&quot;)                         \r\n    .append(&quot;|r[eouw]&quot;)                         \r\n    .append(&quot;|s[abcdeghijklmnortuvyz]&quot;)                         \r\n    .append(&quot;|(?:tel|travel|t[cdfghjklmnoprtvwz])&quot;)                         \r\n    .append(&quot;|u[agkmsyz]&quot;)                         \r\n    .append(&quot;|v[aceginu]&quot;)                         \r\n    .append(&quot;|w[fs]&quot;)                         \r\n    .append(&quot;|y[etu]&quot;)                         \r\n    .append(&quot;|z[amw]))&quot;)                         \r\n    .append(&quot;|(?:(?:25[0-5]|2[0-4]&quot;) // or ip address                                                 \r\n    .append(&quot;[0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\\\.(?:25[0-5]|2[0-4][0-9]&quot;)                             \r\n    .append(&quot;|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\\\.(?:25[0-5]|2[0-4][0-9]|[0-1]&quot;)                         \r\n    .append(&quot;[0-9]{2}|[1-9][0-9]|[1-9]|0)\\\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}&quot;)                         \r\n    .append(&quot;|[1-9][0-9]|[0-9])))&quot;)                         \r\n    .append(&quot;(?:\\\\:\\\\d{1,5})?)&quot;) // plus option port number                             \r\n    .append(&quot;(\\\\/(?:(?:[a-zA-Z0-9\\\\;\\\\/\\\\?\\\\:\\\\@\\\\&amp;\\\\=\\\\#\\\\~&quot;)  // plus option query params                         \r\n    .append(&quot;\\\\-\\\\.\\\\+\\\\!\\\\*\\\\&#39;\\\\(\\\\)\\\\,\\\\_])|(?:\\\\%[a-fA-F0-9]{2}))*)?&quot;)                         \r\n    .append(&quot;(?:\\\\b|$)&quot;).toString()                 \r\n    ).matcher(&quot;&quot;);"}, {"tags": [], "down_vote_count": 0, "creation_date": 1428327403, "answer_id": 29472385, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1428327403, "body_markdown": "This should work:\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function validateUrl(value){\r\n    \treturn /^(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*)$/gi.test(value);\r\n    }\r\n\r\n    console.log(validateUrl(&#39;google.com&#39;)); // true\r\n    console.log(validateUrl(&#39;www.google.com&#39;)); // true\r\n    console.log(validateUrl(&#39;http://www.google.com&#39;)); // true\r\n    console.log(validateUrl(&#39;http:/www.google.com&#39;)); // false\r\n    console.log(validateUrl(&#39;www.google.com/test&#39;)); // true\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1431609578, "answer_id": 30238449, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1431609578, "body_markdown": "You don&#39;t specify which language you&#39;re using.\r\nIf PHP is, there is a native function for that:\r\n\r\n    $url = &#39;http://www.yoururl.co.uk/sub1/sub2/?param=1&amp;param2/&#39;;\r\n\r\n    if ( ! filter_var( $url, FILTER_VALIDATE_URL ) ) {\r\n        // Wrong\r\n    }\r\n    else {\r\n        // Valid\r\n    }\r\n\r\nReturns the filtered data, or FALSE if the filter fails.\r\n\r\n[Check it here &gt;&gt;][1]\r\n\r\n\r\n  [1]: http://php.net/manual/en/function.filter-var.php\r\n\r\nHope it helps."}, {"tags": [], "down_vote_count": 0, "creation_date": 1444351848, "answer_id": 33028229, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1445004687, "last_edit_date": 1445004687, "body_markdown": "I found the following Regex for URLs, **tested successfully with 500+ URLs**:\r\n\r\n`/\\b(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\x{00a1}-\\x{ffff}0-9]+-?)*[a-z\\x{00a1}-\\x{ffff}0-9]+)(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}0-9]+-?)*[a-z\\x{00a1}-\\x{ffff}0-9]+)*(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?\\b/gi`\r\n\r\n*I know it looks ugly, but the good thing is that it works. :)*\r\n\r\n[Explanation and demo with **581 random URLs** on regex101.][1]\r\n\r\nSource: [In search of the perfect URL validation regex][2]\r\n\r\n\r\n  [1]: https://regex101.com/r/hU9aV3/5\r\n  [2]: https://mathiasbynens.be/demo/url-regex"}, {"tags": [], "down_vote_count": 0, "creation_date": 1472444271, "answer_id": 39198430, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1472444271, "body_markdown": "I think I found a more general regexp to validate urls, particularly websites\r\n\r\n    \u200b(https?:\\/\\/)?(www\\.)[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,4}\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*)|(https?:\\/\\/)?(www\\.)?(?!ww)[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,4}\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*)\r\n\r\nit does not allow for instance www.something or http://www or http://www.something\r\n\r\nCheck it here: http://regexr.com/3e4a2\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1473798877, "answer_id": 39478555, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1473875601, "last_edit_date": 1473875601, "body_markdown": "I created a similar regex (**PCRE**) to the one @eyelidlessness provided following RFC3987 along with other RFC documents. The major difference between @eyelidlessness and my regex are mainly readability and also URN support.\r\n\r\n\r\nThe regex below is all one piece (instead of being mixed with PHP) so it can be used in different languages very easily (so long as they support PCRE)\r\n\r\n**The easiest way to test this regex is to use [regex101][1] and copy paste the code and test strings below with the appropriate modifiers (`gmx`).**\r\n\r\nTo use this regex in PHP, insert the regex below into the following code:\r\n\r\n    $regex = &lt;&lt;&lt;&#39;EOD&#39;\r\n    // Put the regex here\r\n    EOD;\r\n\r\n&lt;hr&gt;\r\nYou can match a link without a scheme by doing the following:&lt;br/&gt;\r\nTo match a link without a scheme (i.e. `john.doe@gmail.com` or `www.google.com/pathtofile.php?query`), replace this section:\r\n\r\n      (?:\r\n        (?&lt;scheme&gt;\r\n          (?&lt;urn&gt;urn)|\r\n          (?&amp;d_scheme)\r\n        )\r\n        :\r\n      )?\r\n\r\nwith this:\r\n\r\n      (?:\r\n        (?&lt;scheme&gt;\r\n          (?&lt;urn&gt;urn)|\r\n          (?&amp;d_scheme)\r\n        )\r\n        :\r\n      )?\r\n\r\nNote, however, that by replacing this, the regex does not become 100% reliable.\r\n&lt;hr&gt;\r\n**Regex (PCRE)** with `gmx` modifiers for the multi-line test string below\r\n\r\n    (?(DEFINE)\r\n      # Definitions\r\n      (?&lt;ALPHA&gt;[\\p{L}])\r\n      (?&lt;DIGIT&gt;[0-9])\r\n      (?&lt;HEX&gt;[0-9a-fA-F])\r\n      (?&lt;NCCHAR&gt;\r\n        (?&amp;UNRESERVED)|\r\n        (?&amp;PCT_ENCODED)|\r\n        (?&amp;SUB_DELIMS)|\r\n        @\r\n      )\r\n      (?&lt;PCHAR&gt;\r\n        (?&amp;UNRESERVED)|\r\n        (?&amp;PCT_ENCODED)|\r\n        (?&amp;SUB_DELIMS)|\r\n        :|\r\n        @|\r\n        \\/\r\n      )\r\n      (?&lt;UCHAR&gt;\r\n        (?&amp;UNRESERVED)|\r\n        (?&amp;PCT_ENCODED)|\r\n        (?&amp;SUB_DELIMS)|\r\n        :\r\n      )\r\n      (?&lt;RCHAR&gt;\r\n        (?&amp;UNRESERVED)|\r\n        (?&amp;PCT_ENCODED)|\r\n        (?&amp;SUB_DELIMS)\r\n      )\r\n      (?&lt;PCT_ENCODED&gt;%(?&amp;HEX){2})\r\n      (?&lt;UNRESERVED&gt;\r\n        ((?&amp;ALPHA)|(?&amp;DIGIT)|[-._~])\r\n      )\r\n      (?&lt;RESERVED&gt;(?&amp;GEN_DELIMS)|(?&amp;SUB_DELIMS))\r\n      (?&lt;GEN_DELIMS&gt;[:\\/?#\\[\\]@])\r\n      (?&lt;SUB_DELIMS&gt;[!$&amp;&#39;()*+,;=])\r\n      # URI Parts\r\n      (?&lt;d_scheme&gt;\r\n        (?!urn)\r\n        (?:\r\n          (?&amp;ALPHA)\r\n          ((?&amp;ALPHA)|(?&amp;DIGIT)|[+-.])*\r\n          (?=:)\r\n        )\r\n      )\r\n      (?&lt;d_hier_part_slashes&gt;\r\n        (\\/{2})?\r\n      )\r\n      (?&lt;d_authority&gt;(?&amp;d_userinfo)?)\r\n      (?&lt;d_userinfo&gt;(?&amp;UCHAR)*)\r\n      (?&lt;d_ipv6&gt;\r\n        (?![^:]*::[^:]*::[^:]*)\r\n        (\r\n          (\r\n            ((?&amp;HEX){0,4})\r\n            :\r\n          ){1,7}\r\n          ((?&amp;d_ipv4)|:|(?&amp;HEX){1,4})\r\n        )\r\n      )\r\n      (?&lt;d_ipv4&gt;\r\n        ((?&amp;octet)\\.){3}\r\n        (?&amp;octet)\r\n      )\r\n      (?&lt;octet&gt;\r\n        (\r\n          25[]0-5]|\r\n          2[0-4](?&amp;DIGIT)|\r\n          1(?&amp;DIGIT){2}|\r\n          [1-9](?&amp;DIGIT)|\r\n          (?&amp;DIGIT)\r\n        )\r\n      )\r\n      (?&lt;d_reg_name&gt;(?&amp;RCHAR)*)\r\n      (?&lt;d_urn_name&gt;(?&amp;UCHAR)*)\r\n      (?&lt;d_port&gt;(?&amp;DIGIT)*)\r\n      (?&lt;d_path&gt;\r\n        (\r\n          \\/\r\n          ((?&amp;PCHAR)*)*\r\n          (?=\\?|\\#|$)\r\n        )\r\n      )\r\n      (?&lt;d_query&gt;\r\n        (\r\n          ((?&amp;PCHAR)|\\/|\\?)*\r\n        )?\r\n      )\r\n      (?&lt;d_fragment&gt;\r\n        (\r\n          ((?&amp;PCHAR)|\\/|\\?)*\r\n        )?\r\n      )\r\n    )\r\n    ^\r\n    (?&lt;link&gt;\r\n      (?:\r\n        (?&lt;scheme&gt;\r\n          (?&lt;urn&gt;urn)|\r\n          (?&amp;d_scheme)\r\n        )\r\n        :\r\n      )\r\n      (?(urn)\r\n        (?:\r\n          (?&lt;namespace_identifier&gt;[0-9a-zA-Z\\-]+)\r\n          :\r\n          (?&lt;namespace_specific_string&gt;(?&amp;d_urn_name)+)\r\n        )\r\n        |\r\n        (?&lt;hier_part&gt;\r\n          (?&lt;slashes&gt;(?&amp;d_hier_part_slashes))\r\n          (?&lt;authority&gt;\r\n            (?:\r\n              (?&lt;userinfo&gt;(?&amp;d_authority))\r\n              @\r\n            )?\r\n            (?&lt;host&gt;\r\n              (?&lt;ipv4&gt;\\[?(?&amp;d_ipv4)\\]?)|\r\n              (?&lt;ipv6&gt;\\[(?&amp;d_ipv6)\\])|\r\n              (?&lt;domain&gt;(?&amp;d_reg_name))\r\n            )\r\n            (?:\r\n              :\r\n              (?&lt;port&gt;(?&amp;d_port))\r\n            )?\r\n          )\r\n          (?&lt;path&gt;(?&amp;d_path))?\r\n        )\r\n        (?:\r\n          \\?\r\n          (?&lt;query&gt;(?&amp;d_query))\r\n        )?\r\n        (?:\r\n          \\#\r\n          (?&lt;fragment&gt;(?&amp;d_fragment))\r\n        )?\r\n      )\r\n    )\r\n    $\r\n\r\n**Test Strings**\r\n\r\n    # Valid URIs\r\n    ftp://cnn.example.com&amp;story=breaking_news@10.0.0.1/top_story.htm\r\n    ftp://ftp.is.co.za/rfc/rfc1808.txt\r\n    http://www.ietf.org/rfc/rfc2396.txt\r\n    ldap://[2001:db8::7]/c=GB?objectClass?one\r\n    mailto:John.Doe@example.com\r\n    news:comp.infosystems.www.servers.unix\r\n    tel:+1-816-555-1212\r\n    telnet://192.0.2.16:80/\r\n    urn:isbn:0451450523\r\n    urn:oid:2.16.840\r\n    urn:isan:0000-0000-9E59-0000-O-0000-0000-2\r\n    urn:oasis:names:specification:docbook:dtd:xml:4.1.2\r\n    http://localhost/test/somefile.php?query=someval&amp;variable=value#fragment\r\n    http://[2001:db8:a0b:12f0::1]/test\r\n    ftp://username:password@domain.com/path/to/file/somefile.html?queryVariable=value#fragment\r\n    https://subdomain.domain.com/path/to/file.php?query=value#fragment\r\n    https://subdomain.example.com/path/to/file.php?query=value#fragment\r\n    mailto:john.smith(comment)@example.com\r\n    mailto:user@[2001:DB8::1]\r\n    mailto:user@[255:192:168:1]\r\n    mailto:M.Handley@cs.ucl.ac.uk\r\n    http://localhost:4433/path/to/file?query#fragment\r\n    # Note that the example below IS a valid as it does follow RFC standards\r\n    localhost:4433/path/to/file\r\n    \r\n    # These work with the optional scheme group although I&#39;d suggest making the scheme mandatory as misinterpretations can occur\r\n    john.doe@gmail.com\r\n    www.google.com/pathtofile.php?query\r\n    [192a:123::192.168.1.1]:80/path/to/file.html?query#fragment\r\n\r\n\r\n  [1]: http://regex101.com"}, {"tags": [], "down_vote_count": 0, "creation_date": 1475805366, "answer_id": 39908190, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1475805366, "body_markdown": "To Match a URL there are various option and it depend on you requirement.\r\nbelow are few.\r\n\r\n    _(^|[\\s.:;?\\-\\]&lt;\\(])(https?://[-\\w;/?:@&amp;=+$\\|\\_.!~*\\|&#39;()\\[\\]%#,\u263a]+[\\w/#](\\(\\))?)(?=$|[\\s&#39;,\\|\\(\\).:;?\\-\\[\\]&gt;\\)])_i\r\n\r\n    #\\b(([\\w-]+://?|www[.])[^\\s()&lt;&gt;]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|/)))#iS\r\n\r\nAnd there is a link which gives you more than 10 different variations of validation for URL.\r\n\r\nhttps://mathiasbynens.be/demo/url-regex"}, {"tags": [], "down_vote_count": 1, "creation_date": 1502952182, "answer_id": 45728224, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1502952182, "body_markdown": "This is not a regular expression but accomplishes the same thing (Javascript only):\r\n\r\n    function isAValidUrl(url) {\r\n      try {\r\n        new URL(url);\r\n        return true;\r\n      } catch(e) {\r\n        return false;\r\n      }\r\n    }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1504113608, "answer_id": 45966320, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1516739159, "last_edit_date": 1516739159, "body_markdown": "I hope it&#39;s helpful for you...\r\n\r\n    ^(http|https):\\/\\/+[\\www\\d]+\\.[\\w]+(\\/[\\w\\d]+)?"}, {"tags": [], "down_vote_count": 0, "creation_date": 1504764039, "answer_id": 46088854, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1504764039, "body_markdown": "How about this: \r\n\r\n    ^(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})$\r\n\r\nThese are the test cases:\r\n\r\n[![Test cases][1]][1]\r\n\r\nYou can try it out in [here : https://regex101.com/r/mS9gD7/41][2]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/Mm9y0.png\r\n  [2]: https://regex101.com/r/mS9gD7/41"}, {"tags": [], "down_vote_count": 0, "creation_date": 1514797732, "answer_id": 48048416, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1514798082, "last_edit_date": 1514798082, "body_markdown": "As far as I have found, this expression is good for me-\r\n\r\n    (https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})\r\n\r\nWorking example-\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function RegExForUrlMatch()\r\n    {\r\n      var expression = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})/g;\r\n\r\n      var regex = new RegExp(expression);\r\n      var t = document.getElementById(&quot;url&quot;).value;\r\n\r\n      if (t.match(regex)) {\r\n        document.getElementById(&quot;demo&quot;).innerHTML = &quot;Successful match&quot;;\r\n      } else {\r\n        document.getElementById(&quot;demo&quot;).innerHTML = &quot;No match&quot;;\r\n      }\r\n    }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;input type=&quot;text&quot; id=&quot;url&quot; placeholder=&quot;url&quot; onkeyup=&quot;RegExForUrlMatch()&quot;&gt;\r\n\r\n    &lt;p id=&quot;demo&quot;&gt;Please enter a URL to test&lt;/p&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1516732547, "answer_id": 48408597, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1516732547, "body_markdown": "Below expression will work for all popular domains. It will accept following urls:&lt;br/&gt;\r\n`www.yourwebsite.com`&lt;br/&gt;\r\n`http://www.yourwebsite.com`&lt;br/&gt;\r\n`www.yourwebsite.com`&lt;br/&gt;\r\n`yourwebsite.com`&lt;br/&gt;\r\n`yourwebsite.co.in`&lt;br/&gt;\r\nIn addition it will make message with url as link also&lt;br/&gt;\r\ne.g. `please visit yourwebsite.com`&lt;br/&gt;\r\nIn above example it will make `yourwebsite.com` as hyperlink\r\n\r\n\r\n    if (new RegExp(&quot;([-a-z0-9]{1,63}\\\\.)*?[a-z0-9][-a-z0-9]{0,61}[a-z0-9]\\\\.(com|com/|org|gov|cm|net|online|live|biz|us|uk|co.us|co.uk|in|co.in|int|info|edu|mil|ca|co|co.au|org/|gov/|cm/|net/|online/|live/|biz/|us/|uk/|co.us/|co.uk/|in/|co.in/|int/|info/|edu/|mil/|ca/|co/|co.au/)(/[-\\\\w@\\\\+\\\\.~#\\\\?*&amp;/=% ]*)?$&quot;).test(strMessage) || (new RegExp(&quot;^[a-z ]+[\\.]?[a-z ]+?[\\.]+[a-z ]+?[\\.]+[a-z ]+?[-\\\\w@\\\\+\\\\.~#\\\\?*&amp;/=% ]*&quot;).test(strMessage) &amp;&amp; new RegExp(&quot;([a-zA-Z0-9]+://)?([a-zA-Z0-9_]+:[a-zA-Z0-9_]+@)?([a-zA-Z0-9.-]+\\\\.[A-Za-z]{2,4})(:[0-9]+)?(/.*)?&quot;).test(strMessage)) || (new RegExp(&quot;^[a-z ]+[\\.]?[a-z ]+?[-\\\\w@\\\\+\\\\.~#\\\\?*&amp;/=% ]*&quot;).test(strMessage) &amp;&amp; new RegExp(&quot;([a-zA-Z0-9]+://)?([a-zA-Z0-9_]+:[a-zA-Z0-9_]+@)?([a-zA-Z0-9.-]+\\\\.[A-Za-z]{2,4})(:[0-9]+)?(/.*)?&quot;).test(strMessage))) {\r\n    \r\n            if (new RegExp(&quot;^[a-z ]+[\\.]?[a-z ]+?[\\.]+[a-z ]+?[\\.]+[a-z ]+?$&quot;).test(strMessage) &amp;&amp; new RegExp(&quot;([a-zA-Z0-9]+://)?([a-zA-Z0-9_]+:[a-zA-Z0-9_]+@)?([a-zA-Z0-9.-]+\\\\.[A-Za-z]{2,4})(:[0-9]+)?(/.*)?&quot;).test(strMessage)) {\r\n    \r\n                var url1 = /(^|&amp;lt;|\\s)([\\w\\.]+\\.(?:com|org|gov|cm|net|online|live|biz|us|uk|co.us|co.uk|in|co.in|int|info|edu|mil|ca|co|co.au))(\\s|&amp;gt;|$)/g;\r\n                var html = $.trim(strMessage);\r\n                if (html) {\r\n                    html = html\r\n                          .replace(url1, &#39;$1&lt;a style=&quot;color:blue; text-decoration:underline;&quot; target=&quot;_blank&quot;  href=&quot;http://$2&quot;&gt;$2&lt;/a&gt;$3&#39;);\r\n                }\r\n                returnString = html;\r\n                return returnString;   \r\n            }\r\n            else {\r\n    \r\n                var url1 = /(^|&amp;lt;|\\s)(www\\..+?\\.(?:com|org|gov|cm|net|online|live|biz|us|uk|co.us|co.uk|in|co.in|int|info|edu|mil|ca|co|co.au)[^,\\s]*)(\\s|&amp;gt;|$)/g,\r\n                    url2 = /(^|&amp;lt;|\\s)(((https?|ftp):\\/\\/|mailto:).+?\\.(?:com|org|gov|cm|net|online|live|biz|us|uk|co.us|co.uk|in|co.in|int|info|edu|mil|ca|co|co.au)[^,\\s]*)(\\s|&amp;gt;|$)/g,\r\n                    url3 = /(^|&amp;lt;|\\s)([\\w\\.]+\\.(?:com|org|gov|cm|net|online|live|biz|us|uk|co.us|co.uk|in|co.in|int|info|edu|mil|ca|co|co.au)[^,\\s]*)(\\s|&amp;gt;|$)/g;\r\n             \r\n                var html = $.trim(strMessage);\r\n                if (html) {\r\n                    html = html\r\n                        .replace(url1, &#39;$1&lt;a style=&quot;color:blue; text-decoration:underline;&quot; target=&quot;_blank&quot;  href=&quot;http://$2&quot;&gt;$2&lt;/a&gt;$3&#39;)\r\n                        .replace(url2, &#39;$1&lt;a style=&quot;color:blue; text-decoration:underline;&quot; target=&quot;_blank&quot;  href=&quot;$2&quot;&gt;$2&lt;/a&gt;$5&#39;)\r\n                        .replace(url3, &#39;$1&lt;a style=&quot;color:blue; text-decoration:underline;&quot; target=&quot;_blank&quot;  href=&quot;http://$2&quot;&gt;$2&lt;/a&gt;$3&#39;);\r\n                }\r\n                returnString = html;\r\n                \r\n                return returnString;\r\n            }\r\n        }"}], "title": "What is the best regular expression to check if a string is a valid URL?", "view_count": 302496, "answer_count": 42, "code_snippet": ["<code>/^[a-z](?:[-a-z0-9\\+\\.])*:(?:\\/\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:])*@)?(?:\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4}:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+[-a-z0-9\\._~!\\$&amp;'\\(\\)\\*\\+,;=:]+)\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=@])*)(?::[0-9]*)?(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*|\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*)?|(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])))(?:\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])|[\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}\\/\\?])*)?(?:\\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])|[\\/\\?])*)?$/i\n</code>", "<code>/^(?:[a-z](?:[-a-z0-9\\+\\.])*:(?:\\/\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:])*@)?(?:\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4}:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+[-a-z0-9\\._~!\\$&amp;'\\(\\)\\*\\+,;=:]+)\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=@])*)(?::[0-9]*)?(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*|\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*)?|(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])))(?:\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])|[\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}\\/\\?])*)?(?:\\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])|[\\/\\?])*)?|(?:\\/\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:])*@)?(?:\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4}:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+[-a-z0-9\\._~!\\$&amp;'\\(\\)\\*\\+,;=:]+)\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=@])*)(?::[0-9]*)?(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*|\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*)?|(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=@])+)(?:\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])))(?:\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])|[\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}\\/\\?])*)?(?:\\#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\._~\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}!\\$&amp;'\\(\\)\\*\\+,;=:@])|[\\/\\?])*)?)$/i\n</code>", "<code>&lt;?php\n\n/* Regex convenience functions (character class, non-capturing group) */\nfunction cc($str, $suffix = '', $negate = false) {\n    return '[' . ($negate ? '^' : '') . $str . ']' . $suffix;\n}\nfunction ncg($str, $suffix = '') {\n    return '(?:' . $str . ')' . $suffix;\n}\n\n/* Preserved from RFC3986 */\n\n$ALPHA = 'a-z';\n$DIGIT = '0-9';\n$HEXDIG = $DIGIT . 'a-f';\n\n$sub_delims = '!\\\\$&amp;\\'\\\\(\\\\)\\\\*\\\\+,;=';\n$gen_delims = ':\\\\/\\\\?\\\\#\\\\[\\\\]@';\n$reserved = $gen_delims . $sub_delims;\n$unreserved = '-' . $ALPHA . $DIGIT . '\\\\._~';\n\n$pct_encoded = '%' . cc($HEXDIG) . cc($HEXDIG);\n\n$dec_octet = ncg(implode('|', array(\n    cc($DIGIT),\n    cc('1-9') . cc($DIGIT),\n    '1' . cc($DIGIT) . cc($DIGIT),\n    '2' . cc('0-4') . cc($DIGIT),\n    '25' . cc('0-5')\n)));\n\n$IPv4address = $dec_octet . ncg('\\\\.' . $dec_octet, '{3}');\n\n$h16 = cc($HEXDIG, '{1,4}');\n$ls32 = ncg($h16 . ':' . $h16 . '|' . $IPv4address);\n\n$IPv6address = ncg(implode('|', array(\n    ncg($h16 . ':', '{6}') . $ls32,\n    '::' . ncg($h16 . ':', '{5}') . $ls32,\n    ncg($h16, '?') . '::' . ncg($h16 . ':', '{4}') . $ls32,\n    ncg($h16 . ':' . $h16, '?') . '::' . ncg($h16 . ':', '{3}') . $ls32,\n    ncg(ncg($h16 . ':', '{0,2}') . $h16, '?') . '::' . ncg($h16 . ':', '{2}') . $ls32,\n    ncg(ncg($h16 . ':', '{0,3}') . $h16, '?') . '::' . $h16 . ':' . $ls32,\n    ncg(ncg($h16 . ':', '{0,4}') . $h16, '?') . '::' . $ls32,\n    ncg(ncg($h16 . ':', '{0,5}') . $h16, '?') . '::' . $h16,\n    ncg(ncg($h16 . ':', '{0,6}') . $h16, '?') . '::',\n)));\n\n$IPvFuture = 'v' . cc($HEXDIG, '+') . cc($unreserved . $sub_delims . ':', '+');\n\n$IP_literal = '\\\\[' . ncg(implode('|', array($IPv6address, $IPvFuture))) . '\\\\]';\n\n$port = cc($DIGIT, '*');\n\n$scheme = cc($ALPHA) . ncg(cc('-' . $ALPHA . $DIGIT . '\\\\+\\\\.'), '*');\n\n/* New or changed in RFC3987 */\n\n$iprivate = '\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}';\n\n$ucschar = '\\x{A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}' .\n    '\\x{10000}-\\x{1FFFD}\\x{20000}-\\x{2FFFD}\\x{30000}-\\x{3FFFD}' .\n    '\\x{40000}-\\x{4FFFD}\\x{50000}-\\x{5FFFD}\\x{60000}-\\x{6FFFD}' .\n    '\\x{70000}-\\x{7FFFD}\\x{80000}-\\x{8FFFD}\\x{90000}-\\x{9FFFD}' .\n    '\\x{A0000}-\\x{AFFFD}\\x{B0000}-\\x{BFFFD}\\x{C0000}-\\x{CFFFD}' .\n    '\\x{D0000}-\\x{DFFFD}\\x{E1000}-\\x{EFFFD}';\n\n$iunreserved = '-' . $ALPHA . $DIGIT . '\\\\._~' . $ucschar;\n\n$ipchar = ncg($pct_encoded . '|' . cc($iunreserved . $sub_delims . ':@'));\n\n$ifragment = ncg($ipchar . '|' . cc('\\\\/\\\\?'), '*');\n\n$iquery = ncg($ipchar . '|' . cc($iprivate . '\\\\/\\\\?'), '*');\n\n$isegment_nz_nc = ncg($pct_encoded . '|' . cc($iunreserved . $sub_delims . '@'), '+');\n$isegment_nz = ncg($ipchar, '+');\n$isegment = ncg($ipchar, '*');\n\n$ipath_empty = '(?!' . $ipchar . ')';\n$ipath_rootless = ncg($isegment_nz) . ncg('\\\\/' . $isegment, '*');\n$ipath_noscheme = ncg($isegment_nz_nc) . ncg('\\\\/' . $isegment, '*');\n$ipath_absolute = '\\\\/' . ncg($ipath_rootless, '?'); // Spec says isegment-nz *( \"/\" isegment )\n$ipath_abempty = ncg('\\\\/' . $isegment, '*');\n\n$ipath = ncg(implode('|', array(\n    $ipath_abempty,\n    $ipath_absolute,\n    $ipath_noscheme,\n    $ipath_rootless,\n    $ipath_empty\n))) . ')';\n\n$ireg_name = ncg($pct_encoded . '|' . cc($iunreserved . $sub_delims . '@'), '*');\n\n$ihost = ncg(implode('|', array($IP_literal, $IPv4address, $ireg_name)));\n$iuserinfo = ncg($pct_encoded . '|' . cc($iunreserved . $sub_delims . ':'), '*');\n$iauthority = ncg($iuserinfo . '@', '?') . $ihost . ncg(':' . $port, '?');\n\n$irelative_part = ncg(implode('|', array(\n    '\\\\/\\\\/' . $iauthority . $ipath_abempty . '',\n    '' . $ipath_absolute . '',\n    '' . $ipath_noscheme . '',\n    '' . $ipath_empty . ''\n)));\n\n$irelative_ref = $irelative_part . ncg('\\\\?' . $iquery, '?') . ncg('\\\\#' . $ifragment, '?');\n\n$ihier_part = ncg(implode('|', array(\n    '\\\\/\\\\/' . $iauthority . $ipath_abempty . '',\n    '' . $ipath_absolute . '',\n    '' . $ipath_rootless . '',\n    '' . $ipath_empty . ''\n)));\n\n$absolute_IRI = $scheme . ':' . $ihier_part . ncg('\\\\?' . $iquery, '?');\n\n$IRI = $scheme . ':' . $ihier_part . ncg('\\\\?' . $iquery, '?') . ncg('\\\\#' . $ifragment, '?');\n\n$IRI_reference = ncg($IRI . '|' . $irelative_ref);\n</code>", "<code>$escape_backslash = '/(?&lt;!\\\\)\\\\(?![\\[\\]\\\\\\^\\$\\.\\|\\*\\+\\(\\)QEnrtaefvdwsDWSbAZzB1-9GX]|x\\{[0-9a-f]{1,4}\\}|\\c[A-Z]|)/';\n$absolute_IRI = preg_replace($escape_backslash, '\\\\\\\\', $absolute_IRI);\n$IRI = preg_replace($escape_backslash, '\\\\\\\\', $IRI);\n$IRI_reference = preg_replace($escape_backslash, '\\\\\\\\', $IRI_reference);\n</code>", "<code>www.google.com</code>", "<code>http://www.google.com</code>", "<code>mailto:somebody@google.com</code>", "<code>somebody@google.com</code>", "<code>www.url-with-querystring.com/?url=has-querystring</code>", "<code>/((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&amp;=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&amp;=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&amp;;%@.\\w_]*)#?(?:[\\w]*))?)/\n</code>", "<code>/((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&amp;=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+(:[0-9]+)?|(?:www.|[-;:&amp;=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&amp;;%@.\\w_]*)#?(?:[\\w]*))?)/</code>", "<code>width:210px;</code>", "<code>margin:3px</code>", "<code>System.Uri.TryCreate</code>", "<code>static bool IsValidUrl(string urlString)\n{\n    Uri uri;\n    return Uri.TryCreate(urlString, UriKind.Absolute, out uri)\n        &amp;&amp; (uri.Scheme == Uri.UriSchemeHttp\n         || uri.Scheme == Uri.UriSchemeHttps\n         || uri.Scheme == Uri.UriSchemeFtp\n         || uri.Scheme == Uri.UriSchemeMailto\n            /*...*/);\n}\n\n// In test fixture...\n\n[Test]\nvoid IsValidUrl_Test()\n{\n    Assert.True(IsValidUrl(\"http://www.example.com\"));\n    Assert.False(IsValidUrl(\"javascript:alert('xss')\"));\n    Assert.False(IsValidUrl(\"\"));\n    Assert.False(IsValidUrl(null));\n}\n</code>", "<code>javascript:</code>", "<code>javascript: alert('blah')</code>", "<code>Uri.IsWellFormedUriString()</code>", "<code>(\\b(https?|ftp|file)://)?[-A-Za-z0-9+&amp;@#/%?=~_|!:,.;]+[-A-Za-z0-9+&amp;@#/%=~_|]\n</code>", "<code>** **</code>", "<code>**http://www.regexbuddy.com**  \n**http://www.regexbuddy.com/**  \n**http://www.regexbuddy.com/index.html**  \n**http://www.regexbuddy.com/index.html?source=library**  \n</code>", "<code>/\\b(https?|ftp|file):\\/\\/[\\-A-Za-z0-9+&amp;@#\\/%?=~_|!:,.;]*[\\-A-Za-z0-9+&amp;@#\\/%=~_|]/</code>", "<code>)|((\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])\\.){3}(?#\n</code>", "<code>/^(https?|ftp):\\/\\/(?#                                      protocol\n)(([a-z0-9$_\\.\\+!\\*\\'\\(\\),;\\?&amp;=-]|%[0-9a-f]{2})+(?#         username\n)(:([a-z0-9$_\\.\\+!\\*\\'\\(\\),;\\?&amp;=-]|%[0-9a-f]{2})+)?(?#      password\n)@)?(?#                                                     auth requires @\n)((([a-z0-9]\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\.)*(?#             domain segments AND\n)[a-z][a-z0-9-]*[a-z0-9](?#                                 top level domain  OR\n)|((\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])\\.){3}(?#\n    )(\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])(?#             IP address\n))(:\\d+)?(?#                                                port\n))(((\\/+([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)*(?# path\n)(\\?([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)(?#      query string\n)?)?)?(?#                                                   path and query string optional\n)(#([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)?(?#      fragment\n)$/i\n</code>", "<code>define('URL_FORMAT', \n'/^(https?):\\/\\/'.                                         // protocol\n'(([a-z0-9$_\\.\\+!\\*\\'\\(\\),;\\?&amp;=-]|%[0-9a-f]{2})+'.         // username\n'(:([a-z0-9$_\\.\\+!\\*\\'\\(\\),;\\?&amp;=-]|%[0-9a-f]{2})+)?'.      // password\n'@)?(?#'.                                                  // auth requires @\n')((([a-z0-9]\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\.)*'.                      // domain segments AND\n'[a-z][a-z0-9-]*[a-z0-9]'.                                 // top level domain  OR\n'|((\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])\\.){3}'.\n'(\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])'.                 // IP address\n')(:\\d+)?'.                                                // port\n')(((\\/+([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)*'. // path\n'(\\?([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)'.      // query string\n'?)?)?'.                                                   // path and query string optional\n'(#([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)?'.      // fragment\n'$/i');\n</code>", "<code>&lt;?php\n\ndefine('URL_FORMAT',\n'/^(https?):\\/\\/'.                                         // protocol\n'(([a-z0-9$_\\.\\+!\\*\\'\\(\\),;\\?&amp;=-]|%[0-9a-f]{2})+'.         // username\n'(:([a-z0-9$_\\.\\+!\\*\\'\\(\\),;\\?&amp;=-]|%[0-9a-f]{2})+)?'.      // password\n'@)?(?#'.                                                  // auth requires @\n')((([a-z0-9]\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\.)*'.                      // domain segments AND\n'[a-z][a-z0-9-]*[a-z0-9]'.                                 // top level domain  OR\n'|((\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])\\.){3}'.\n'(\\d|[1-9]\\d|1\\d{2}|2[0-4][0-9]|25[0-5])'.                 // IP address\n')(:\\d+)?'.                                                // port\n')(((\\/+([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)*'. // path\n'(\\?([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)'.      // query string\n'?)?)?'.                                                   // path and query string optional\n'(#([a-z0-9$_\\.\\+!\\*\\'\\(\\),;:@&amp;=-]|%[0-9a-f]{2})*)?'.      // fragment\n'$/i');\n\n/**\n * Verify the syntax of the given URL. \n * \n * @access public\n * @param $url The URL to verify.\n * @return boolean\n */\nfunction is_valid_url($url) {\n  if (str_starts_with(strtolower($url), 'http://localhost')) {\n    return true;\n  }\n  return preg_match(URL_FORMAT, $url);\n}\n\n\n/**\n * String starts with something\n * \n * This function will return true only if input string starts with\n * niddle\n * \n * @param string $string Input string\n * @param string $niddle Needle string\n * @return boolean\n */\nfunction str_starts_with($string, $niddle) {\n      return substr($string, 0, strlen($niddle)) == $niddle;\n}\n\n\n/**\n * Test a URL for validity and count results.\n * @param url url\n * @param expected expected result (true or false)\n */\n\n$numtests = 0;\n$passed = 0;\n\nfunction test_url($url, $expected) {\n  global $numtests, $passed;\n  $numtests++;\n  $valid = is_valid_url($url);\n  echo \"URL Valid?: \" . ($valid?\"yes\":\"no\") . \" for URL: $url. Expected: \".($expected?\"yes\":\"no\").\". \";\n  if($valid == $expected) {\n    echo \"PASS\\n\"; $passed++;\n  } else {\n    echo \"FAIL\\n\";\n  }\n}\n\necho \"URL Tests:\\n\\n\";\n\ntest_url(\"http://localserver/projects/public/assets/javascript/widgets/UserBoxMenu/widget.css\", true);\ntest_url(\"http://www.google.com\", true);\ntest_url(\"http://www.google.co.uk/projects/my%20folder/test.php\", true);\ntest_url(\"https://myserver.localdomain\", true);\ntest_url(\"http://192.168.1.120/projects/index.php\", true);\ntest_url(\"http://192.168.1.1/projects/index.php\", true);\ntest_url(\"http://projectpier-server.localdomain/projects/public/assets/javascript/widgets/UserBoxMenu/widget.css\", true);\ntest_url(\"https://2.4.168.19/project-pier?c=test&amp;a=b\", true);\ntest_url(\"https://localhost/a/b/c/test.php?c=controller&amp;arg1=20&amp;arg2=20\", true);\ntest_url(\"http://user:password@localhost/a/b/c/test.php?c=controller&amp;arg1=20&amp;arg2=20\", true);\n\necho \"\\n$passed out of $numtests tests passed.\\n\\n\";\n\n?&gt;\n</code>", "<code>')((([a-z0-9][a-z0-9-]*[a-z0-9]\\.)*'.</code>", "<code>')((([a-z0-9]\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\.)*'.</code>", "<code>/^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i\n</code>", "<code>_^(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\x{00a1}-\\x{ffff}0-9]-*)*[a-z\\x{00a1}-\\x{ffff}0-9]+)(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}0-9]-*)*[a-z\\x{00a1}-\\x{ffff}0-9]+)*(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$_iuS\n</code>", "<code>%^(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@|\\d{1,3}(?:\\.\\d{1,3}){3}|(?:(?:[a-z\\d\\x{00a1}-\\x{ffff}]+-?)*[a-z\\d\\x{00a1}-\\x{ffff}]+)(?:\\.(?:[a-z\\d\\x{00a1}-\\x{ffff}]+-?)*[a-z\\d\\x{00a1}-\\x{ffff}]+)*(?:\\.[a-z\\x{00a1}-\\x{ffff}]{2,6}))(?::\\d+)?(?:[^\\s]*)?$%iu</code>", "<code>parse_url</code>", "<code>URI</code>", "<code>URI</code>", "<code>java.net.URL</code>", "<code>Appendix B. Parsing a URI Reference with a Regular Expression</code>", "<code> ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n</code>", "<code>(([\\w]+:)?//)?(([\\d\\w]|%[a-fA-f\\d]{2,2})+(:([\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,63}(:[\\d]+)?(/([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(&amp;?([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?\n</code>", "<code>var urlreg=/(([\\w]+:)?\\/\\/)?(([\\d\\w]|%[a-fA-f\\d]{2,2})+(:([\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,63}(:[\\d]+)?(\\/([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(&amp;?([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?/;\r\n\r\n$('textarea').on('input',function(){\r\n  var url = $(this).val();\r\n  $(this).toggleClass('invalid', urlreg.test(url) == false)\r\n});\r\n\r\n$('textarea').trigger('input');</code>", "<code>textarea{color:green;}\r\n.invalid{color:red;}</code>", "<code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;textarea&gt;http://www.google.com&lt;/textarea&gt;\r\n&lt;textarea&gt;http//www.google.com&lt;/textarea&gt;\r\n&lt;textarea&gt;googlecom&lt;/textarea&gt;\r\n&lt;textarea&gt;https://www.google.com&lt;/textarea&gt;</code>", "<code>t.co</code>", "<code>        function validateURL(textval) {\n            var urlregex = new RegExp(\n            \"^(http|https|ftp)\\://([a-zA-Z0-9\\.\\-]+(\\:[a-zA-Z0-9\\.&amp;amp;%\\$\\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\\-]+\\.)*[a-zA-Z0-9\\-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\\:[0-9]+)*(/($|[a-zA-Z0-9\\.\\,\\?\\'\\\\\\+&amp;amp;%\\$#\\=~_\\-]+))*$\");\n            return urlregex.test(textval);\n        }\n</code>", "<code>http://www.goo gle.com</code>", "<code>validateURL(\"http://\u4e9e\u6d32\u5927\u5b78.\u53f0\u7063/\"); //false</code>", "<code>\"(([\\w]+:)?//)?(([\\d\\w]|%[a-fA-F\\d]{2,2})+(:([\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,4}(:[\\d]+)?(/([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(&amp;?([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?\"\n</code>", "<code>(([\\\\w]+:)?//)?(([\\\\d\\\\w]|%[a-fA-f\\\\d]{2,2})+(:([\\\\d\\\\w]|%[a-fA-f\\\\d]{2,2})+)?@)?([\\\\d\\\\w][-\\\\d\\\\w]{0,253}[\\\\d\\\\w]\\\\.)+[\\\\w]{2,4}(:[\\\\d]+)?(/([-+_~.\\\\d\\\\w]|%[a-fA-f\\\\d]{2,2})*)*(\\\\?(&amp;?([-+_~.\\\\d\\\\w]|%[a-fA-f\\\\d]{2,2})=?)*)?(#([-+_~.\\\\d\\\\w]|%[a-fA-f\\\\d]{2,2})*)?</code>", "<code>\\w</code>", "<code>\\p{L}</code>", "<code>([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+</code>", "<code>([\\d\\w][-\\d\\w]{0,253}[\\d\\w]?\\.)+</code>", "<code>function validateURL(textval) {\n            var urlregex = new RegExp(\n            \"^(http|https|ftp)\\://[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\\-\\._\\?\\,\\'/\\\\\\+&amp;amp;%\\$#\\=~])*$\");\n            return urlregex.test(textval);\n        }\n</code>", "<code>@Test\n    public void testWebsiteUrl(){\n        String regularExpression = \"((http|ftp|https):\\\\/\\\\/)?[\\\\w\\\\-_]+(\\\\.[\\\\w\\\\-_]+)+([\\\\w\\\\-\\\\.,@?^=%&amp;amp;:/~\\\\+#]*[\\\\w\\\\-\\\\@?^=%&amp;amp;/~\\\\+#])?\";\n\n        assertTrue(\"www.google.com\".matches(regularExpression));\n        assertTrue(\"www.google.co.uk\".matches(regularExpression));\n        assertTrue(\"http://www.google.com\".matches(regularExpression));\n        assertTrue(\"http://www.google.co.uk\".matches(regularExpression));\n        assertTrue(\"https://www.google.com\".matches(regularExpression));\n        assertTrue(\"https://www.google.co.uk\".matches(regularExpression));\n        assertTrue(\"google.com\".matches(regularExpression));\n        assertTrue(\"google.co.uk\".matches(regularExpression));\n        assertTrue(\"google.mu\".matches(regularExpression));\n        assertTrue(\"mes.intnet.mu\".matches(regularExpression));\n        assertTrue(\"cse.uom.ac.mu\".matches(regularExpression));\n\n        assertTrue(\"http://www.google.com/path\".matches(regularExpression));\n        assertTrue(\"http://subdomain.web-site.com/cgi-bin/perl.cgi?key1=value1&amp;key2=value2e\".matches(regularExpression));\n        assertTrue(\"http://www.google.com/?queryparam=123\".matches(regularExpression));\n        assertTrue(\"http://www.google.com/path?queryparam=123\".matches(regularExpression));\n\n        assertFalse(\"www..dr.google\".matches(regularExpression));\n\n        assertFalse(\"www:google.com\".matches(regularExpression));\n\n        assertFalse(\"https://www@.google.com\".matches(regularExpression));\n\n        assertFalse(\"https://www.google.com\\\"\".matches(regularExpression));\n        assertFalse(\"https://www.google.com'\".matches(regularExpression));\n\n        assertFalse(\"http://www.google.com/path'\".matches(regularExpression));\n        assertFalse(\"http://subdomain.web-site.com/cgi-bin/perl.cgi?key1=value1&amp;key2=value2e'\".matches(regularExpression));\n        assertFalse(\"http://www.google.com/?queryparam=123'\".matches(regularExpression));\n        assertFalse(\"http://www.google.com/path?queryparam=12'3\".matches(regularExpression));\n\n    }\n</code>", "<code>public static void main(args){\n        String url = \"go to http://www.m.abut.ly/abc its awesome\"\n        url = url.replaceAll(/https?:\\/\\/w{0,3}\\w*?\\.(\\w*?\\.)?\\w{2,3}\\S*|www\\.(\\w*?\\.)?\\w*?\\.\\w{2,3}\\S*|(\\w*?\\.)?\\w*?\\.\\w{2,3}[\\/\\?]\\S*/ , { it -&gt;\n            \"woof${it}woof\"\n        })\n        println url\n\n    }\n</code>", "<code>-</code>", "<code>((https?:)?//)?(([\\d\\w]|%[a-fA-f\\d]{2,2})+(:([\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,63}(:[\\d]+)?(/([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(&amp;?([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?\n</code>", "<code>http://stackoverflow.com\nhttps://stackoverflow.com\n</code>", "<code>//stackoverflow.com\n</code>", "<code>((https?:)?(\\/?\\/))(([\\d\\w]|%[a-fA-f\\d]{2,2})+(:([\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?([\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,63}(:[\\d]+)?(/([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(&amp;?([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#([-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?</code>", "<code>((?:https?:)?(?:\\/?\\/))((?:[\\d\\w]|%[a-fA-f\\d]{2,2})+(?::(?:[\\d\\w]|%[a-fA-f\\d]{2,2})+)?@)?((?:[\\d\\w][-\\d\\w]{0,253}[\\d\\w]\\.)+[\\w]{2,63})(:[\\d]+)?(\\/(?:[-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)*(\\?(?:&amp;?(?:[-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})=?)*)?(#(?:[-+_~.\\d\\w]|%[a-fA-f\\d]{2,2})*)?</code>", "<code>// function url_valid($url) { Rev:20110423_2000\n//\n// Return associative array of valid URI components, or FALSE if $url is not\n// RFC-3986 compliant. If the passed URL begins with: \"www.\" or \"ftp.\", then\n// \"http://\" or \"ftp://\" is prepended and the corrected full-url is stored in\n// the return array with a key name \"url\". This value should be used by the caller.\n//\n// Return value: FALSE if $url is not valid, otherwise array of URI components:\n// e.g.\n// Given: \"http://www.jmrware.com:80/articles?height=10&amp;width=75#fragone\"\n// Array(\n//    [scheme] =&gt; http\n//    [authority] =&gt; www.jmrware.com:80\n//    [userinfo] =&gt;\n//    [host] =&gt; www.jmrware.com\n//    [IP_literal] =&gt;\n//    [IPV6address] =&gt;\n//    [ls32] =&gt;\n//    [IPvFuture] =&gt;\n//    [IPv4address] =&gt;\n//    [regname] =&gt; www.jmrware.com\n//    [port] =&gt; 80\n//    [path_abempty] =&gt; /articles\n//    [query] =&gt; height=10&amp;width=75\n//    [fragment] =&gt; fragone\n//    [url] =&gt; http://www.jmrware.com:80/articles?height=10&amp;width=75#fragone\n// )\nfunction url_valid($url) {\n    if (strpos($url, 'www.') === 0) $url = 'http://'. $url;\n    if (strpos($url, 'ftp.') === 0) $url = 'ftp://'. $url;\n    if (!preg_match('/# Valid absolute URI having a non-empty, valid DNS host.\n        ^\n        (?P&lt;scheme&gt;[A-Za-z][A-Za-z0-9+\\-.]*):\\/\\/\n        (?P&lt;authority&gt;\n          (?:(?P&lt;userinfo&gt;(?:[A-Za-z0-9\\-._~!$&amp;\\'()*+,;=:]|%[0-9A-Fa-f]{2})*)@)?\n          (?P&lt;host&gt;\n            (?P&lt;IP_literal&gt;\n              \\[\n              (?:\n                (?P&lt;IPV6address&gt;\n                  (?:                                                (?:[0-9A-Fa-f]{1,4}:){6}\n                  |                                                ::(?:[0-9A-Fa-f]{1,4}:){5}\n                  | (?:                          [0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){4}\n                  | (?:(?:[0-9A-Fa-f]{1,4}:){0,1}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){3}\n                  | (?:(?:[0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){2}\n                  | (?:(?:[0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})?::   [0-9A-Fa-f]{1,4}:\n                  | (?:(?:[0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})?::\n                  )\n                  (?P&lt;ls32&gt;[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}\n                  | (?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}\n                       (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\n                  )\n                |   (?:(?:[0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})?::   [0-9A-Fa-f]{1,4}\n                |   (?:(?:[0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})?::\n                )\n              | (?P&lt;IPvFuture&gt;[Vv][0-9A-Fa-f]+\\.[A-Za-z0-9\\-._~!$&amp;\\'()*+,;=:]+)\n              )\n              \\]\n            )\n          | (?P&lt;IPv4address&gt;(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}\n                               (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\n          | (?P&lt;regname&gt;(?:[A-Za-z0-9\\-._~!$&amp;\\'()*+,;=]|%[0-9A-Fa-f]{2})+)\n          )\n          (?::(?P&lt;port&gt;[0-9]*))?\n        )\n        (?P&lt;path_abempty&gt;(?:\\/(?:[A-Za-z0-9\\-._~!$&amp;\\'()*+,;=:@]|%[0-9A-Fa-f]{2})*)*)\n        (?:\\?(?P&lt;query&gt;       (?:[A-Za-z0-9\\-._~!$&amp;\\'()*+,;=:@\\\\/?]|%[0-9A-Fa-f]{2})*))?\n        (?:\\#(?P&lt;fragment&gt;    (?:[A-Za-z0-9\\-._~!$&amp;\\'()*+,;=:@\\\\/?]|%[0-9A-Fa-f]{2})*))?\n        $\n        /mx', $url, $m)) return FALSE;\n    switch ($m['scheme']) {\n    case 'https':\n    case 'http':\n        if ($m['userinfo']) return FALSE; // HTTP scheme does not allow userinfo.\n        break;\n    case 'ftps':\n    case 'ftp':\n        break;\n    default:\n        return FALSE;   // Unrecognized URI scheme. Default to FALSE.\n    }\n    // Validate host name conforms to DNS \"dot-separated-parts\".\n    if ($m['regname']) { // If host regname specified, check for DNS conformance.\n        if (!preg_match('/# HTTP DNS host name.\n            ^                      # Anchor to beginning of string.\n            (?!.{256})             # Overall host length is less than 256 chars.\n            (?:                    # Group dot separated host part alternatives.\n              [A-Za-z0-9]\\.        # Either a single alphanum followed by dot\n            |                      # or... part has more than one char (63 chars max).\n              [A-Za-z0-9]          # Part first char is alphanum (no dash).\n              [A-Za-z0-9\\-]{0,61}  # Internal chars are alphanum plus dash.\n              [A-Za-z0-9]          # Part last char is alphanum (no dash).\n              \\.                   # Each part followed by literal dot.\n            )*                     # Zero or more parts before top level domain.\n            (?:                    # Explicitly specify top level domains.\n              com|edu|gov|int|mil|net|org|biz|\n              info|name|pro|aero|coop|museum|\n              asia|cat|jobs|mobi|tel|travel|\n              [A-Za-z]{2})         # Country codes are exactly two alpha chars.\n              \\.?                  # Top level domain can end in a dot.\n            $                      # Anchor to end of string.\n            /ix', $m['host'])) return FALSE;\n    }\n    $m['url'] = $url;\n    for ($i = 0; isset($m[$i]); ++$i) unset($m[$i]);\n    return $m; // return TRUE == array of useful named $matches plus the valid $url.\n}\n</code>", "<code>(https?|ftp)://(www\\d?|[a-zA-Z0-9]+)?\\.[a-zA-Z0-9-]+(\\:|\\.)([a-zA-Z0-9.]+|(\\d+)?)([/?:].*)?</code>", "<code>public static final Matcher WEB  = Pattern.compile(new StringBuilder()                 \n.append(\"((?:(http|https|Http|Https|rtsp|Rtsp):\")                      \n.append(\"\\\\/\\\\/(?:(?:[a-zA-Z0-9\\\\$\\\\-\\\\_\\\\.\\\\+\\\\!\\\\*\\\\'\\\\(\\\\)\")                         \n.append(\"\\\\,\\\\;\\\\?\\\\&amp;\\\\=]|(?:\\\\%[a-fA-F0-9]{2})){1,64}(?:\\\\:(?:[a-zA-Z0-9\\\\$\\\\-\\\\_\")                         \n.append(\"\\\\.\\\\+\\\\!\\\\*\\\\'\\\\(\\\\)\\\\,\\\\;\\\\?\\\\&amp;\\\\=]|(?:\\\\%[a-fA-F0-9]{2})){1,25})?\\\\@)?)?\")                         \n.append(\"((?:(?:[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,64}\\\\.)+\")   // named host                            \n.append(\"(?:\")   // plus top level domain                         \n.append(\"(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])\")                         \n.append(\"|(?:biz|b[abdefghijmnorstvwyz])\")                         \n.append(\"|(?:cat|com|coop|c[acdfghiklmnoruvxyz])\")                         \n.append(\"|d[ejkmoz]\")                         \n.append(\"|(?:edu|e[cegrstu])\")                         \n.append(\"|f[ijkmor]\")                         \n.append(\"|(?:gov|g[abdefghilmnpqrstuwy])\")                         \n.append(\"|h[kmnrtu]\")                         \n.append(\"|(?:info|int|i[delmnoqrst])\")                         \n.append(\"|(?:jobs|j[emop])\")                         \n.append(\"|k[eghimnrwyz]\")                         \n.append(\"|l[abcikrstuvy]\")                         \n.append(\"|(?:mil|mobi|museum|m[acdghklmnopqrstuvwxyz])\")                         \n.append(\"|(?:name|net|n[acefgilopruz])\")                         \n.append(\"|(?:org|om)\")                         \n.append(\"|(?:pro|p[aefghklmnrstwy])\")                         \n.append(\"|qa\")                         \n.append(\"|r[eouw]\")                         \n.append(\"|s[abcdeghijklmnortuvyz]\")                         \n.append(\"|(?:tel|travel|t[cdfghjklmnoprtvwz])\")                         \n.append(\"|u[agkmsyz]\")                         \n.append(\"|v[aceginu]\")                         \n.append(\"|w[fs]\")                         \n.append(\"|y[etu]\")                         \n.append(\"|z[amw]))\")                         \n.append(\"|(?:(?:25[0-5]|2[0-4]\") // or ip address                                                 \n.append(\"[0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\\\.(?:25[0-5]|2[0-4][0-9]\")                             \n.append(\"|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\\\.(?:25[0-5]|2[0-4][0-9]|[0-1]\")                         \n.append(\"[0-9]{2}|[1-9][0-9]|[1-9]|0)\\\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}\")                         \n.append(\"|[1-9][0-9]|[0-9])))\")                         \n.append(\"(?:\\\\:\\\\d{1,5})?)\") // plus option port number                             \n.append(\"(\\\\/(?:(?:[a-zA-Z0-9\\\\;\\\\/\\\\?\\\\:\\\\@\\\\&amp;\\\\=\\\\#\\\\~\")  // plus option query params                         \n.append(\"\\\\-\\\\.\\\\+\\\\!\\\\*\\\\'\\\\(\\\\)\\\\,\\\\_])|(?:\\\\%[a-fA-F0-9]{2}))*)?\")                         \n.append(\"(?:\\\\b|$)\").toString()                 \n).matcher(\"\");\n</code>", "<code>/\\b(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\x{00a1}-\\x{ffff}0-9]+-?)*[a-z\\x{00a1}-\\x{ffff}0-9]+)(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}0-9]+-?)*[a-z\\x{00a1}-\\x{ffff}0-9]+)*(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?\\b/gi</code>", "<code>/(https?):\\/\\/([\\w-]+(\\.[\\\\w-]+)*\\.([a-z]+))(([\\w.,@?^=%&amp;amp;:\\/~+#()!-]*)([\\w@?^=%&amp;amp;\\/~+#()!-]))?/gi</code>", "<code>String regularExpression = \"((((ht{2}ps?://)?)((w{3}\\\\.)?))?)[^.&amp;&amp;[a-zA-Z0-9]][a-zA-Z0-9.-]+[^.&amp;&amp;[a-zA-Z0-9]](\\\\.[a-zA-Z]{2,3})\";\n\nassertTrue(\"www.google.com\".matches(regularExpression));\nassertTrue(\"www.google.co.uk\".matches(regularExpression));\nassertTrue(\"http://www.google.com\".matches(regularExpression));\nassertTrue(\"http://www.google.co.uk\".matches(regularExpression));\nassertTrue(\"https://www.google.com\".matches(regularExpression));\nassertTrue(\"https://www.google.co.uk\".matches(regularExpression));\nassertTrue(\"google.com\".matches(regularExpression));\nassertTrue(\"google.co.uk\".matches(regularExpression));\nassertTrue(\"google.mu\".matches(regularExpression));\nassertTrue(\"mes.intnet.mu\".matches(regularExpression));\nassertTrue(\"cse.uom.ac.mu\".matches(regularExpression));\n\n//cannot contain 2 '.' after www\nassertFalse(\"www..dr.google\".matches(regularExpression));\n\n//cannot contain 2 '.' just before com\nassertFalse(\"www.dr.google..com\".matches(regularExpression));\n\n// to test case where url www must be followed with a '.'\nassertFalse(\"www:google.com\".matches(regularExpression));\n\n// to test case where url www must be followed with a '.'\n//assertFalse(\"http://wwwe.google.com\".matches(regularExpression));\n\n// to test case where www must be preceded with a '.'\nassertFalse(\"https://www@.google.com\".matches(regularExpression));\n</code>", "<code>ht{2}ps?</code>", "<code>https?</code>", "<code>import re\nregex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|'  # ...or ipv4\n        r'\\[?[A-F0-9]*:[A-F0-9:]+\\]?)'  # ...or ipv6\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n</code>", "<code> $url = \"http://www.example.com\";\n\nif(!filter_var($url, FILTER_VALIDATE_URL))\n  {\n  echo \"URL is not valid\";\n  }\nelse\n  {\n  echo \"URL is valid\";\n  }\n</code>", "<code>\"@((((ht)|(f))tp[s]?://)|(www\\.))([a-z][-a-z0-9]+\\.)?([a-z][-a-z0-9]+\\.)?[a-z][-a-z0-9]+\\.[a-z]+[/]?[a-z0-9._\\/~#&amp;=;%+?-]*@si\"\n</code>", "<code>.com</code>", "<code>(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}(\\.[a-z]{2,6}|:[0-9]{3,4})\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;\\/\\/=]*)\n</code>", "<code>$url = 'http://www.yoururl.co.uk/sub1/sub2/?param=1&amp;param2/';\n\nif ( ! filter_var( $url, FILTER_VALIDATE_URL ) ) {\n    // Wrong\n}\nelse {\n    // Valid\n}\n</code>", "<code>^(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})$\n</code>", "<code>^http(s{0,1})://[a-zA-Z0-9_/\\\\-\\\\.]+\\\\.([A-Za-z/]{2,5})[a-zA-Z0-9_/\\\\&amp;\\\\?\\\\=\\\\-\\\\.\\\\~\\\\%]*\n</code>"], "path": "stack.django"}, {"tags": ["python", "datetime", "iso8601", "datetime-parsing", "rfc3339"], "creation_date": 1222269420, "body_markdown": "I need to parse [RFC 3339](https://tools.ietf.org/html/rfc3339) strings like `&quot;2008-09-03T20:56:35.450686Z&quot;` into Python&#39;s `datetime` type.\r\n\r\nI have found [`strptime`](https://docs.python.org/library/datetime.html#datetime.datetime.strptime) in the Python standard library, but it is not very convenient.\r\n\r\nWhat is the best way to do this?\r\n\r\n", "last_edit_date": 1517074430, "up_vote_count": 431, "link": "https://stackoverflow.com/questions/127803/how-to-parse-an-iso-8601-formatted-date", "_childDocuments_": [{"tags": [], "down_vote_count": 4, "creation_date": 1222269567, "answer_id": 127825, "path": "stack.django.answer", "score": 22, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1361720332, "last_edit_date": 1361720332, "body_markdown": "What is the exact error you get? Is it like the following:\r\n\r\n    &gt;&gt;&gt; datetime.datetime.strptime(&quot;2008-08-12T12:20:30.656234Z&quot;, &quot;%Y-%m-%dT%H:%M:%S.Z&quot;)\r\n    ValueError: time data did not match format:  data=2008-08-12T12:20:30.656234Z  fmt=%Y-%m-%dT%H:%M:%S.Z\r\n\r\nIf yes, you can split your input string on &quot;.&quot;, and then add the microseconds to the datetime you got.\r\n\r\nTry this:\r\n\r\n    &gt;&gt;&gt; def gt(dt_str):\r\n            dt, _, us= dt_str.partition(&quot;.&quot;)\r\n            dt= datetime.datetime.strptime(dt, &quot;%Y-%m-%dT%H:%M:%S&quot;)\r\n            us= int(us.rstrip(&quot;Z&quot;), 10)\r\n            return dt + datetime.timedelta(microseconds=us)\r\n\r\n    &gt;&gt;&gt; gt(&quot;2008-08-12T12:20:30.656234Z&quot;)\r\n    datetime.datetime(2008, 8, 12, 12, 20, 30, 656234)\r\n    &gt;&gt;&gt; \r\n"}, {"tags": [], "down_vote_count": 18, "creation_date": 1222270044, "answer_id": 127872, "path": "stack.django.answer", "score": 36, "up_vote_count": 54, "is_accepted": false, "last_activity_date": 1222270044, "body_markdown": "&lt;pre&gt;\r\nimport re,datetime\r\ns=&quot;2008-09-03T20:56:35.450686Z&quot;\r\nd=datetime.datetime(*map(int, re.split(&#39;[^\\d]&#39;, s)[:-1]))\r\n&lt;/pre&gt;"}, {"tags": [], "down_vote_count": 14, "creation_date": 1222270697, "answer_id": 127934, "path": "stack.django.answer", "score": 55, "up_vote_count": 69, "is_accepted": false, "last_activity_date": 1383133660, "last_edit_date": 1383133660, "body_markdown": "Try the [iso8601][1] module; it does exactly this.\r\n\r\nThere are several other options mentioned on the [WorkingWithTime][2] page on the python.org wiki.\r\n\r\n\r\n  [1]: https://bitbucket.org/micktwomey/pyiso8601\r\n  [2]: http://wiki.python.org/moin/WorkingWithTime"}, {"tags": [], "down_vote_count": 7, "creation_date": 1222271102, "answer_id": 127972, "path": "stack.django.answer", "score": 114, "up_vote_count": 121, "is_accepted": false, "last_activity_date": 1452880925, "last_edit_date": 1452880925, "body_markdown": "Note in Python 2.6+ and Py3K, the %f character catches microseconds.\r\n\r\n    &gt;&gt;&gt; datetime.datetime.strptime(&quot;2008-09-03T20:56:35.450686Z&quot;, &quot;%Y-%m-%dT%H:%M:%S.%fZ&quot;)\r\n\r\nSee issue [here][1]\r\n\r\n  [1]: http://bugs.python.org/issue1158"}, {"tags": [], "down_vote_count": 2, "creation_date": 1311230839, "answer_id": 6772287, "path": "stack.django.answer", "score": 2, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1311230839, "body_markdown": "For something that works with the 2.X standard library try:\r\n\r\n    calendar.timegm(time.strptime(date.split(&quot;.&quot;)[0]+&quot;UTC&quot;, &quot;%Y-%m-%dT%H:%M:%S%Z&quot;))\r\n\r\ncalendar.timegm is the missing gm version of time.mktime."}, {"tags": [], "down_vote_count": 0, "creation_date": 1362231109, "answer_id": 15175034, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1362231109, "body_markdown": "I&#39;ve coded up a parser for the ISO 8601 standard and put it on github: https://github.com/boxed/iso8601 This implementation supports everything in the spec except for durations, intervals and periodic intervals and dates outside the supported date range of pythons datetime module.\r\n\r\nTests included! :P"}, {"tags": [], "down_vote_count": 4, "creation_date": 1362498256, "answer_id": 15228038, "path": "stack.django.answer", "score": 279, "up_vote_count": 283, "is_accepted": false, "last_activity_date": 1492678936, "last_edit_date": 1495540500, "body_markdown": "The *python-dateutil* package can parse not only RFC 3339 datetime strings like the one in the question, but also other [ISO 8601][1] date and time strings  that don&#39;t comply with RFC 3339 (such as ones with no UTC offset, or ones that represent only a date).\r\n\r\n    &gt;&gt;&gt; import dateutil.parser\r\n    &gt;&gt;&gt; dateutil.parser.parse(&#39;2008-09-03T20:56:35.450686Z&#39;) # RFC 3339 format\r\n    datetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=tzutc())\r\n    &gt;&gt;&gt; dateutil.parser.parse(&#39;2008-09-03T20:56:35.450686&#39;) # ISO 8601 extended format\r\n    datetime.datetime(2008, 9, 3, 20, 56, 35, 450686)\r\n    &gt;&gt;&gt; dateutil.parser.parse(&#39;20080903T205635.450686&#39;) # ISO 8601 basic format\r\n    datetime.datetime(2008, 9, 3, 20, 56, 35, 450686)\r\n    &gt;&gt;&gt; dateutil.parser.parse(&#39;20080903&#39;) # ISO 8601 basic format, date only\r\n    datetime.datetime(2008, 9, 3, 0, 0)\r\n\r\n---\r\n\r\nBe warned that the `dateutil.parser` is intentionally hacky: it tries to guess the format and makes inevitable assumptions (customizable by hand only) in ambiguous cases. So ONLY use it if you need to parse input of unknown format and are okay to tolerate occasional misreads. (thanks [ivan_pozdeev][2])\r\n\r\nThe Pypi name is [`python-dateutil`][3], not `dateutil` (thanks [code3monk3y][4]):\r\n\r\n    pip install python-dateutil\r\n\r\n\r\n  [1]: https://en.wikipedia.org/wiki/ISO_8601\r\n  [2]: https://stackoverflow.com/users/648265/ivan-pozdeev\r\n  [3]: https://pypi.python.org/pypi/python-dateutil\r\n  [4]: https://stackoverflow.com/users/1174169/cod3monk3y"}, {"tags": [], "down_vote_count": 1, "creation_date": 1376063602, "answer_id": 18150817, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1376063602, "body_markdown": "The python-dateutil will throw an exception if parsing invalid date strings, so you may want to catch the exception.\r\n\r\n    from dateutil import parser\r\n    ds = &#39;2012-60-31&#39;\r\n    try:\r\n      dt = parser.parse(ds)\r\n    except ValueError, e:\r\n      print &#39;&quot;%s&quot; is an invalid date&#39; % ds\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1395960616, "answer_id": 22700869, "path": "stack.django.answer", "score": 10, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1395960616, "body_markdown": "If you don&#39;t want to use dateutil, you can try this function:\r\n\r\n    def from_utc(utcTime,fmt=&quot;%Y-%m-%dT%H:%M:%S.%fZ&quot;):\r\n        &quot;&quot;&quot;\r\n        Convert UTC time string to time.struct_time\r\n        &quot;&quot;&quot;\r\n        # change datetime.datetime to time, return time.struct_time type\r\n        return datetime.datetime.strptime(utcTime, fmt)\r\n\r\nTest:\r\n\r\n    from_utc(&quot;2007-03-04T21:08:12.123Z&quot;)\r\n\r\nResult:\r\n\r\n    datetime.datetime(2007, 3, 4, 21, 8, 12, 123000)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1424018864, "answer_id": 28528461, "path": "stack.django.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1428361917, "last_edit_date": 1428361917, "body_markdown": "Nobody has mentioned it yet. In these days, [Arrow][1] also can be used as a third party solution.\r\n\r\n    &gt;&gt;&gt; import arrow\r\n    &gt;&gt;&gt; date = arrow.get(&quot;2008-09-03T20:56:35.450686Z&quot;)\r\n    &gt;&gt;&gt; date.datetime\r\n    datetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=tzutc())\r\n\r\n  [1]: http://arrow.readthedocs.org/"}, {"tags": [], "down_vote_count": 2, "creation_date": 1426053815, "answer_id": 28979667, "path": "stack.django.answer", "score": 1, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1451424688, "last_edit_date": 1451424688, "body_markdown": "This works for stdlib on Python 3.2 onwards (edit: assuming all the timestamps are UTC):\r\n\r\n    from datetime import datetime, timezone, timedelta\r\n    datetime.strptime(timestamp, &quot;%Y-%m-%dT%H:%M:%S.%fZ&quot;).replace(\r\n        tzinfo=timezone(timedelta(0)))\r\n\r\ne.g.\r\n\r\n    &gt;&gt;&gt; datetime.utcnow().replace(tzinfo=timezone(timedelta(0)))\r\n    ... datetime.datetime(2015, 3, 11, 6, 2, 47, 879129, tzinfo=datetime.timezone.utc)\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1433699605, "answer_id": 30696682, "path": "stack.django.answer", "score": 92, "up_vote_count": 94, "is_accepted": false, "last_activity_date": 1433699605, "last_edit_date": 1495541907, "body_markdown": "[Several](https://stackoverflow.com/a/127972/1709587) [answers](https://stackoverflow.com/a/127825/1709587) [here](https://stackoverflow.com/a/22700869/1709587) [suggest](https://stackoverflow.com/a/28979667/1709587) using [`datetime.datetime.strptime`](https://docs.python.org/library/datetime.html#datetime.datetime.strptime) to parse RFC 3339 or ISO 8601 datetimes with timezones, like the one exhibited in the question:\r\n\r\n    2008-09-03T20:56:35.450686Z\r\n\r\nThis is a bad idea.\r\n\r\nAssuming that you want to support the full RFC 3339 format, including support for UTC offsets other than zero, then the code these answers suggest does not work. Indeed, it *cannot* work, because parsing RFC 3339 syntax using `strptime` is impossible. The format strings used by Python&#39;s datetime module are incapable of describing RFC 3339 syntax.\r\n\r\nThe problem is UTC offsets. The [RFC 3339 Internet Date/Time Format][1] requires that every date-time includes a UTC offset, and that those offsets can either be `Z` (short for &quot;Zulu time&quot;) or in `+HH:MM` or `-HH:MM` format, like `+05:00` or `-10:30`.\r\n\r\nConsequently, these are all valid RFC 3339 datetimes:\r\n\r\n* `2008-09-03T20:56:35.450686Z`\r\n* `2008-09-03T20:56:35.450686+05:00`\r\n* `2008-09-03T20:56:35.450686-10:30`\r\n\r\nAlas, the format strings used by `strptime` and `strftime` have no directive that corresponds to UTC offsets in RFC 3339 format. A complete list of the directives they support can be found at https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior, and the only UTC offset directive included in the list is `%z`:\r\n\r\n&lt;!-- language-all: lang-none --&gt;\r\n\r\n&gt; ### %z\r\n&gt;\r\n&gt; UTC offset in the form +HHMM or -HHMM (empty string if the the object is naive).\r\n&gt;\r\n&gt; Example: (empty), +0000, -0400, +1030\r\n\r\nThis doesn&#39;t match the format of an RFC 3339 offset, and indeed if we try to use `%z` in the format string and parse an RFC 3339 date, we&#39;ll fail:\r\n\r\n&lt;pre&gt;&lt;code&gt;&gt;&gt;&gt; &lt;b&gt;&lt;i&gt;from datetime import datetime&lt;/i&gt;&lt;/b&gt;\r\n&gt;&gt;&gt; &lt;b&gt;&lt;i&gt;datetime.strptime(&quot;2008-09-03T20:56:35.450686Z&quot;, &quot;%Y-%m-%dT%H:%M:%S.%f%z&quot;)&lt;/b&gt;&lt;/i&gt;\r\nTraceback (most recent call last):\r\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n  File &quot;/usr/lib/python3.4/_strptime.py&quot;, line 500, in _strptime_datetime\r\n    tt, fraction = _strptime(data_string, format)\r\n  File &quot;/usr/lib/python3.4/_strptime.py&quot;, line 337, in _strptime\r\n    (data_string, format))\r\nValueError: time data &#39;2008-09-03T20:56:35.450686Z&#39; does not match format &#39;%Y-%m-%dT%H:%M:%S.%f%z&#39;\r\n&gt;&gt;&gt; &lt;b&gt;&lt;i&gt;datetime.strptime(&quot;2008-09-03T20:56:35.450686+05:00&quot;, &quot;%Y-%m-%dT%H:%M:%S.%f%z&quot;)&lt;/i&gt;&lt;/b&gt;\r\nTraceback (most recent call last):\r\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n  File &quot;/usr/lib/python3.4/_strptime.py&quot;, line 500, in _strptime_datetime\r\n    tt, fraction = _strptime(data_string, format)\r\n  File &quot;/usr/lib/python3.4/_strptime.py&quot;, line 337, in _strptime\r\n    (data_string, format))\r\nValueError: time data &#39;2008-09-03T20:56:35.450686+05:00&#39; does not match format &#39;%Y-%m-%dT%H:%M:%S.%f%z&#39;&lt;/code&gt;&lt;/pre&gt;\r\n\r\n(Actually, the above is just what you&#39;ll see in Python 3. In Python 2 we&#39;ll fail for an even simpler reason, which is that [`strptime` does not implement the `%z` directive at all in Python 2][2].)\r\n\r\nThe multiple answers here that recommend `strptime` all work around this by including a literal `Z` in their format string, which matches the `Z` from the question asker&#39;s example datetime string (and discards it, producing a `datetime` object without a timezone):\r\n\r\n&lt;pre&gt;&lt;code&gt;&gt;&gt;&gt; &lt;b&gt;&lt;i&gt;datetime.strptime(&quot;2008-09-03T20:56:35.450686Z&quot;, &quot;%Y-%m-%dT%H:%M:%S.%fZ&quot;)&lt;/i&gt;&lt;/b&gt;\r\ndatetime.datetime(2008, 9, 3, 20, 56, 35, 450686)&lt;/code&gt;&lt;/pre&gt;\r\n\r\nSince this discards timezone information that was included in the original datetime string, it&#39;s questionable whether we should regard even this result as correct. But more importantly, because this approach involves *hard-coding a particular UTC offset into the format string*, it will choke the moment it tries to parse any RFC 3339 datetime with a different UTC offset:\r\n\r\n&lt;pre&gt;&lt;code&gt;&gt;&gt;&gt; &lt;b&gt;&lt;i&gt;datetime.strptime(&quot;2008-09-03T20:56:35.450686+05:00&quot;, &quot;%Y-%m-%dT%H:%M:%S.%fZ&quot;)&lt;/i&gt;&lt;/b&gt;\r\nTraceback (most recent call last):\r\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n  File &quot;/usr/lib/python3.4/_strptime.py&quot;, line 500, in _strptime_datetime\r\n    tt, fraction = _strptime(data_string, format)\r\n  File &quot;/usr/lib/python3.4/_strptime.py&quot;, line 337, in _strptime\r\n    (data_string, format))\r\nValueError: time data &#39;2008-09-03T20:56:35.450686+05:00&#39; does not match format &#39;%Y-%m-%dT%H:%M:%S.%fZ&#39;&lt;/code&gt;&lt;/pre&gt;\r\n\r\nUnless you&#39;re *certain* that you only need to support RFC 3339 datetimes in Zulu time, and not ones with other timezone offsets, don&#39;t use `strptime`. Use one of the many other approaches described in answers here instead.\r\n\r\n\r\n  [1]: https://tools.ietf.org/html/rfc3339#section-5.6\r\n  [2]: https://bugs.python.org/issue17342"}, {"tags": [], "down_vote_count": 0, "creation_date": 1443649342, "answer_id": 32876091, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1443649342, "body_markdown": "If you are working with Django, it provides the [dateparse module][1] that accepts a bunch of formats similar to ISO format, including the time zone.\r\n\r\nIf you are not using Django and you don&#39;t want to use one of the other libraries mentioned here, you could probably adapt [the Django source code for dateparse][2] to your project.\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.8/ref/utils/#module-django.utils.dateparse\r\n  [2]: https://github.com/django/django/blob/262d4db8c4c849b0fdd84550fb96472446cf90df/django/utils/dateparse.py#L84-L109"}, {"tags": [], "down_vote_count": 1, "creation_date": 1457967953, "answer_id": 35991099, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1465219312, "last_edit_date": 1495540500, "body_markdown": "Thanks to great [Mark Amery&#39;s answer][1] I devised function to account for all possible ISO formats of datetime:\r\n\r\n    class FixedOffset(tzinfo):\r\n        &quot;&quot;&quot;Fixed offset in minutes: `time = utc_time + utc_offset`.&quot;&quot;&quot;\r\n        def __init__(self, offset):\r\n            self.__offset = timedelta(minutes=offset)\r\n            hours, minutes = divmod(offset, 60)\r\n            #NOTE: the last part is to remind about deprecated POSIX GMT+h timezones\r\n            #  that have the opposite sign in the name;\r\n            #  the corresponding numeric value is not used e.g., no minutes\r\n            self.__name = &#39;&lt;%+03d%02d&gt;%+d&#39; % (hours, minutes, -hours)\r\n        def utcoffset(self, dt=None):\r\n            return self.__offset\r\n        def tzname(self, dt=None):\r\n            return self.__name\r\n        def dst(self, dt=None):\r\n            return timedelta(0)\r\n        def __repr__(self):\r\n            return &#39;FixedOffset(%d)&#39; % (self.utcoffset().total_seconds() / 60)\r\n        def __getinitargs__(self):\r\n            return (self.__offset.total_seconds()/60,)\r\n\r\n    def parse_isoformat_datetime(isodatetime):\r\n        try:\r\n            return datetime.strptime(isodatetime, &#39;%Y-%m-%dT%H:%M:%S.%f&#39;)\r\n        except ValueError:\r\n            pass\r\n        try:\r\n            return datetime.strptime(isodatetime, &#39;%Y-%m-%dT%H:%M:%S&#39;)\r\n        except ValueError:\r\n            pass\r\n        pat = r&#39;(.*?[+-]\\d{2}):(\\d{2})&#39;\r\n        temp = re.sub(pat, r&#39;\\1\\2&#39;, isodatetime)\r\n        naive_date_str = temp[:-5]\r\n        offset_str = temp[-5:]\r\n        naive_dt = datetime.strptime(naive_date_str, &#39;%Y-%m-%dT%H:%M:%S.%f&#39;)\r\n        offset = int(offset_str[-4:-2])*60 + int(offset_str[-2:])\r\n        if offset_str[0] == &quot;-&quot;:\r\n            offset = -offset\r\n        return naive_dt.replace(tzinfo=FixedOffset(offset))\r\n\r\n  [1]: https://stackoverflow.com/a/30696682/719457"}, {"tags": [], "down_vote_count": 0, "creation_date": 1467143658, "answer_id": 38085175, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1490129242, "last_edit_date": 1490129242, "body_markdown": "Because RFC 3339 allows many variations of optional colons and dashes being present, basically `CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm]`. If you want to use strptime, you need to strip out those variations first.  \r\n&lt;br&gt;\r\n**The goal is to generate a utc datetime object.**\r\n&lt;hr&gt;\r\nIf you just want a basic case that work for UTC with the Z suffix like `2016-06-29T19:36:29.3453Z`:\r\n\r\n    datetime.datetime.strptime(timestamp.translate(None, &#39;:-&#39;), &quot;%Y%m%dT%H%M%S.%fZ&quot;)\r\n&lt;hr&gt;\r\nIf you want to handle timezone offsets like `2016-06-29T19:36:29.3453-0400` or `2008-09-03T20:56:35.450686+05:00` use the following. These will convert all variations into something without variable delimiters like  `20080903T205635.450686+0500` making it more consistent/easier to parse.\r\n\r\n    import re\r\n    # this regex removes all colons and all \r\n    # dashes EXCEPT for the dash indicating + or - utc offset for the timezone\r\n    conformed_timestamp = re.sub(r&quot;[:]|([-](?!((\\d{2}[:]\\d{2})|(\\d{4}))$))&quot;, &#39;&#39;, timestamp)\r\n    datetime.datetime.strptime(conformed_timestamp, &quot;%Y%m%dT%H%M%S.%f%z&quot; )\r\n\r\n&lt;hr&gt;\r\nIf your system does not support the `%z` strptime directive (you see something like `ValueError: &#39;z&#39; is a bad directive in format &#39;%Y%m%dT%H%M%S.%f%z&#39;`) then you need to manually offset the time from `Z` (UTC). Note `%z` may not work on your system in python versions &lt; 3 as it depended on the c library support which varies across system/python build type (i.e. Jython, Cython, etc.).\r\n\r\n    import re\r\n    import datetime\r\n    \r\n    # this regex removes all colons and all \r\n    # dashes EXCEPT for the dash indicating + or - utc offset for the timezone\r\n    conformed_timestamp = re.sub(r&quot;[:]|([-](?!((\\d{2}[:]\\d{2})|(\\d{4}))$))&quot;, &#39;&#39;, timestamp)\r\n    \r\n    # split on the offset to remove it. use a capture group to keep the delimiter\r\n    split_timestamp = re.split(r&quot;[+|-]&quot;,conformed_timestamp)\r\n    main_timestamp = split_timestamp[0]\r\n    if len(split_timestamp) == 3:\r\n        sign = split_timestamp[1]\r\n        offset = split_timestamp[2]\r\n    else:\r\n        sign = None\r\n        offset = None\r\n\r\n    # generate the datetime object without the offset at UTC time\r\n    output_datetime = datetime.datetime.strptime(main_timestamp +&quot;Z&quot;, &quot;%Y%m%dT%H%M%S.%fZ&quot; )\r\n    if offset:\r\n        # create timedelta based on offset\r\n        offset_delta = datetime.timedelta(hours=int(sign+offset[:-2]), minutes=int(sign+offset[-2:]))\r\n        # offset datetime with timedelta\r\n        output_datetime = output_datetime + offset_delta"}, {"tags": [], "down_vote_count": 0, "creation_date": 1470737842, "answer_id": 38848051, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1470737842, "body_markdown": "    def parseISO8601DateTime(datetimeStr):\r\n        import time\r\n        from datetime import datetime, timedelta\r\n    \r\n        def log_date_string(when):\r\n            gmt = time.gmtime(when)\r\n            if time.daylight and gmt[8]:\r\n                tz = time.altzone\r\n            else:\r\n                tz = time.timezone\r\n            if tz &gt; 0:\r\n                neg = 1\r\n            else:\r\n                neg = 0\r\n                tz = -tz\r\n            h, rem = divmod(tz, 3600)\r\n            m, rem = divmod(rem, 60)\r\n            if neg:\r\n                offset = &#39;-%02d%02d&#39; % (h, m)\r\n            else:\r\n                offset = &#39;+%02d%02d&#39; % (h, m)\r\n    \r\n            return time.strftime(&#39;%d/%b/%Y:%H:%M:%S &#39;, gmt) + offset\r\n    \r\n        dt = datetime.strptime(datetimeStr, &#39;%Y-%m-%dT%H:%M:%S.%fZ&#39;)\r\n        timestamp = dt.timestamp()\r\n        return dt + timedelta(hours=dt.hour-time.gmtime(timestamp).tm_hour)\r\n\r\nNote that we should look if the string doesn&#39;t ends with `Z`, we could parse using `%z`."}, {"tags": [], "down_vote_count": 0, "creation_date": 1472141786, "answer_id": 39150189, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1472141786, "body_markdown": "One straightforward way to convert an ISO 8601-like date string to a UNIX timestamp or `datetime.datetime` object in all supported Python versions without installing third-party modules is to use the [date parser of SQLite](https://www.sqlite.org/lang_datefunc.html).\r\n\r\n    #!/usr/bin/env python\r\n    from __future__ import with_statement, division, print_function\r\n    import sqlite3\r\n    import datetime\r\n    \r\n    testtimes = [\r\n        &quot;2016-08-25T16:01:26.123456Z&quot;,\r\n        &quot;2016-08-25T16:01:29&quot;,\r\n    ]\r\n    db = sqlite3.connect(&quot;:memory:&quot;)\r\n    c = db.cursor()\r\n    for timestring in testtimes:\r\n        c.execute(&quot;SELECT strftime(&#39;%s&#39;, ?)&quot;, (timestring,))\r\n        converted = c.fetchone()[0]\r\n        print(&quot;%s is %s after epoch&quot; % (timestring, converted))\r\n        dt = datetime.datetime.fromtimestamp(int(converted))\r\n        print(&quot;datetime is %s&quot; % dt)\r\n\r\nOutput:\r\n\r\n    2016-08-25T16:01:26.123456Z is 1472140886 after epoch\r\n    datetime is 2016-08-25 12:01:26\r\n    2016-08-25T16:01:29 is 1472140889 after epoch\r\n    datetime is 2016-08-25 12:01:29\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1473327738, "answer_id": 39387583, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1473327738, "body_markdown": "Django&#39;s **parse_datetime**() function supports dates with UTC offsets:\r\n\r\n    parse_datetime(&#39;2016-08-09T15:12:03.65478Z&#39;) =\r\n    datetime.datetime(2016, 8, 9, 15, 12, 3, 654780, tzinfo=&lt;UTC&gt;)\r\n\r\nSo it could be used for parsing iso-8601 dates in fields within entire project:\r\n\r\n    from django.utils import formats\r\n    from django.forms.fields import DateTimeField\r\n    from django.utils.dateparse import parse_datetime\r\n\r\n\r\n    class DateTimeFieldFixed(DateTimeField):\r\n\tdef strptime(self, value, format):\r\n\t    if format == &#39;iso-8601&#39;:\r\n\t\treturn parse_datetime(value)\r\n\t    return super().strptime(value, format)\r\n\r\n    DateTimeField.strptime = DateTimeFieldFixed.strptime\r\n    formats.ISO_INPUT_FORMATS[&#39;DATETIME_INPUT_FORMATS&#39;].insert(0, &#39;iso-8601&#39;)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1477459218, "answer_id": 40254277, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1477459218, "body_markdown": "I&#39;m the author of iso8601utils. It can be found on [github][1] or on [PyPI][2]. Here&#39;s how you can parse your example:\r\n\r\n    &gt;&gt;&gt; from iso8601utils import parsers\r\n    &gt;&gt;&gt; parsers.datetime(&#39;2008-09-03T20:56:35.450686Z&#39;)\r\n    datetime.datetime(2008, 9, 3, 20, 56, 35, 450686)\r\n\r\nHope this helps!\r\n\r\n[1]: https://github.com/silverfernsys/iso8601utils\r\n[2]: https://pypi.python.org/pypi/iso8601utils"}, {"tags": [], "down_vote_count": 0, "creation_date": 1488305657, "answer_id": 42515962, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1488305657, "last_edit_date": 1495542891, "body_markdown": "**So much simpler than you all are making it.**\r\n\r\nIf you want to get the seconds since epoch, you can use python-dateutil to convert it to a datetime object and then convert it so seconds using the strftime method. Like so:\r\n\r\n    &gt;&gt;&gt; import dateutil.parser as dp\r\n    &gt;&gt;&gt; t = &#39;1984-06-02T19:05:00.000Z&#39;\r\n    &gt;&gt;&gt; parsed_t = dp.parse(t)\r\n    &gt;&gt;&gt; t_in_seconds = parsed_t.strftime(&#39;%s&#39;)\r\n    &gt;&gt;&gt; t_in_seconds\r\n    &#39;455047500&#39;\r\n\r\n[Source][1]\r\n\r\n\r\n**Note:** This will convert the given `datetime` into epoch time. But you can use the `strftime()` function to convert that `datetime` into any format. The `parsed_t` object here is of type `datetime` at this point.\r\n\r\n  [1]: https://stackoverflow.com/a/27246418/1224827"}, {"tags": [], "down_vote_count": 0, "creation_date": 1490640115, "answer_id": 43054101, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1490640115, "body_markdown": "I have found [ciso8601](https://github.com/closeio/ciso8601) to be the fastest way to parse ISO 8601 timestamps. As the name suggests, it is implemented in C.\r\n\r\n    import ciso8601\r\n    ciso8601.parse_datetime(&#39;2014-01-09T21:48:00.921000+05:30&#39;)\r\n\r\nThe [GitHub Repo README](https://github.com/closeio/ciso8601/blob/f9f75de38450996e1ad699d966508a739e2bdfdc/README.rst) shows their &gt;10x speedup versus all of the other libraries listed in the other answers.\r\n\r\nMy personal project involved a lot of ISO 8601 parsing. It was nice to be able to just switch the call and go 10x faster. :)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1517392375, "answer_id": 48539157, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1517392375, "body_markdown": "Starting from Python 3.7, strptime supports colon delimiters in UTC offsets ([source][1]). So you can then use:\r\n\r\n    import datetime\r\n    datetime.datetime.strptime(&#39;2018-01-31T09:24:31.488670+00:00&#39;, &#39;%Y-%m-%dT%H:%M:%S.%f%z&#39;)\r\n\r\n\r\n  [1]: https://github.com/python/cpython/commit/32318930da70ff03320ec50813b843e7db6fbc2e"}], "title": "How to parse an ISO 8601-formatted date?", "view_count": 234936, "answer_count": 22, "code_snippet": ["<code>\"2008-09-03T20:56:35.450686Z\"</code>", "<code>datetime</code>", "<code>strptime</code>", "<code>&gt;&gt;&gt; import dateutil.parser\n&gt;&gt;&gt; dateutil.parser.parse('2008-09-03T20:56:35.450686Z') # RFC 3339 format\ndatetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=tzutc())\n&gt;&gt;&gt; dateutil.parser.parse('2008-09-03T20:56:35.450686') # ISO 8601 extended format\ndatetime.datetime(2008, 9, 3, 20, 56, 35, 450686)\n&gt;&gt;&gt; dateutil.parser.parse('20080903T205635.450686') # ISO 8601 basic format\ndatetime.datetime(2008, 9, 3, 20, 56, 35, 450686)\n&gt;&gt;&gt; dateutil.parser.parse('20080903') # ISO 8601 basic format, date only\ndatetime.datetime(2008, 9, 3, 0, 0)\n</code>", "<code>dateutil.parser</code>", "<code>python-dateutil</code>", "<code>dateutil</code>", "<code>pip install python-dateutil\n</code>", "<code>python-dateutil</code>", "<code>dateutil</code>", "<code>pip install python-dateutil</code>", "<code>dateutil.parser</code>", "<code>iso8601</code>", "<code>&gt;&gt;&gt; datetime.datetime.strptime(\"2008-09-03T20:56:35.450686Z\", \"%Y-%m-%dT%H:%M:%S.%fZ\")\n</code>", "<code>strptime</code>", "<code>datetime.datetime.strptime(timestamp, '%Y-%m-%dT%H:%M:%S.%f')</code>", "<code>datetime.datetime.strptime</code>", "<code>2008-09-03T20:56:35.450686Z\n</code>", "<code>strptime</code>", "<code>Z</code>", "<code>+HH:MM</code>", "<code>-HH:MM</code>", "<code>+05:00</code>", "<code>-10:30</code>", "<code>2008-09-03T20:56:35.450686Z</code>", "<code>2008-09-03T20:56:35.450686+05:00</code>", "<code>2008-09-03T20:56:35.450686-10:30</code>", "<code>strptime</code>", "<code>strftime</code>", "<code>%z</code>", "<code>%z</code>", "<code>&gt;&gt;&gt; <b><i>from datetime import datetime</i></b>\n&gt;&gt;&gt; <b><i>datetime.strptime(\"2008-09-03T20:56:35.450686Z\", \"%Y-%m-%dT%H:%M:%S.%f%z\")</i></b>\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"/usr/lib/python3.4/_strptime.py\", line 500, in _strptime_datetime\n    tt, fraction = _strptime(data_string, format)\n  File \"/usr/lib/python3.4/_strptime.py\", line 337, in _strptime\n    (data_string, format))\nValueError: time data '2008-09-03T20:56:35.450686Z' does not match format '%Y-%m-%dT%H:%M:%S.%f%z'\n&gt;&gt;&gt; <b><i>datetime.strptime(\"2008-09-03T20:56:35.450686+05:00\", \"%Y-%m-%dT%H:%M:%S.%f%z\")</i></b>\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"/usr/lib/python3.4/_strptime.py\", line 500, in _strptime_datetime\n    tt, fraction = _strptime(data_string, format)\n  File \"/usr/lib/python3.4/_strptime.py\", line 337, in _strptime\n    (data_string, format))\nValueError: time data '2008-09-03T20:56:35.450686+05:00' does not match format '%Y-%m-%dT%H:%M:%S.%f%z'</code>", "<code>strptime</code>", "<code>%z</code>", "<code>strptime</code>", "<code>Z</code>", "<code>Z</code>", "<code>datetime</code>", "<code>&gt;&gt;&gt; <b><i>datetime.strptime(\"2008-09-03T20:56:35.450686Z\", \"%Y-%m-%dT%H:%M:%S.%fZ\")</i></b>\ndatetime.datetime(2008, 9, 3, 20, 56, 35, 450686)</code>", "<code>&gt;&gt;&gt; <b><i>datetime.strptime(\"2008-09-03T20:56:35.450686+05:00\", \"%Y-%m-%dT%H:%M:%S.%fZ\")</i></b>\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"/usr/lib/python3.4/_strptime.py\", line 500, in _strptime_datetime\n    tt, fraction = _strptime(data_string, format)\n  File \"/usr/lib/python3.4/_strptime.py\", line 337, in _strptime\n    (data_string, format))\nValueError: time data '2008-09-03T20:56:35.450686+05:00' does not match format '%Y-%m-%dT%H:%M:%S.%fZ'</code>", "<code>strptime</code>", "<code>datetime.datetime(*map(int, re.findall('\\d+', s))</code>", "<code>&gt;&gt;&gt; datetime.datetime.strptime(\"2008-08-12T12:20:30.656234Z\", \"%Y-%m-%dT%H:%M:%S.Z\")\nValueError: time data did not match format:  data=2008-08-12T12:20:30.656234Z  fmt=%Y-%m-%dT%H:%M:%S.Z\n</code>", "<code>&gt;&gt;&gt; def gt(dt_str):\n        dt, _, us= dt_str.partition(\".\")\n        dt= datetime.datetime.strptime(dt, \"%Y-%m-%dT%H:%M:%S\")\n        us= int(us.rstrip(\"Z\"), 10)\n        return dt + datetime.timedelta(microseconds=us)\n\n&gt;&gt;&gt; gt(\"2008-08-12T12:20:30.656234Z\")\ndatetime.datetime(2008, 8, 12, 12, 20, 30, 656234)\n&gt;&gt;&gt; \n</code>", "<code>\"\"</code>", "<code>\"Z\"</code>", "<code>&gt;&gt;&gt; import arrow\n&gt;&gt;&gt; date = arrow.get(\"2008-09-03T20:56:35.450686Z\")\n&gt;&gt;&gt; date.datetime\ndatetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=tzutc())\n</code>", "<code>def from_utc(utcTime,fmt=\"%Y-%m-%dT%H:%M:%S.%fZ\"):\n    \"\"\"\n    Convert UTC time string to time.struct_time\n    \"\"\"\n    # change datetime.datetime to time, return time.struct_time type\n    return datetime.datetime.strptime(utcTime, fmt)\n</code>", "<code>from_utc(\"2007-03-04T21:08:12.123Z\")\n</code>", "<code>datetime.datetime(2007, 3, 4, 21, 8, 12, 123000)\n</code>", "<code>strptime</code>", "<code>toISOString</code>", "<code>dateutil</code>", "<code>&gt;&gt;&gt; import dateutil.parser as dp\n&gt;&gt;&gt; t = '1984-06-02T19:05:00.000Z'\n&gt;&gt;&gt; parsed_t = dp.parse(t)\n&gt;&gt;&gt; t_in_seconds = parsed_t.strftime('%s')\n&gt;&gt;&gt; t_in_seconds\n'455047500'\n</code>", "<code>datetime</code>", "<code>strftime()</code>", "<code>datetime</code>", "<code>parsed_t</code>", "<code>datetime</code>", "<code>&gt;&gt;&gt; from iso8601utils import parsers\n&gt;&gt;&gt; parsers.datetime('2008-09-03T20:56:35.450686Z')\ndatetime.datetime(2008, 9, 3, 20, 56, 35, 450686)\n</code>", "<code>parse_datetime('2016-08-09T15:12:03.65478Z') =\ndatetime.datetime(2016, 8, 9, 15, 12, 3, 654780, tzinfo=&lt;UTC&gt;)\n</code>", "<code>from django.utils import formats\nfrom django.forms.fields import DateTimeField\nfrom django.utils.dateparse import parse_datetime\n\n\nclass DateTimeFieldFixed(DateTimeField):\ndef strptime(self, value, format):\n    if format == 'iso-8601':\n    return parse_datetime(value)\n    return super().strptime(value, format)\n\nDateTimeField.strptime = DateTimeFieldFixed.strptime\nformats.ISO_INPUT_FORMATS['DATETIME_INPUT_FORMATS'].insert(0, 'iso-8601')\n</code>", "<code>import datetime\ndatetime.datetime.strptime('2018-01-31T09:24:31.488670+00:00', '%Y-%m-%dT%H:%M:%S.%f%z')\n</code>", "<code>calendar.timegm(time.strptime(date.split(\".\")[0]+\"UTC\", \"%Y-%m-%dT%H:%M:%S%Z\"))\n</code>", "<code>datetime.datetime</code>", "<code>#!/usr/bin/env python\nfrom __future__ import with_statement, division, print_function\nimport sqlite3\nimport datetime\n\ntesttimes = [\n    \"2016-08-25T16:01:26.123456Z\",\n    \"2016-08-25T16:01:29\",\n]\ndb = sqlite3.connect(\":memory:\")\nc = db.cursor()\nfor timestring in testtimes:\n    c.execute(\"SELECT strftime('%s', ?)\", (timestring,))\n    converted = c.fetchone()[0]\n    print(\"%s is %s after epoch\" % (timestring, converted))\n    dt = datetime.datetime.fromtimestamp(int(converted))\n    print(\"datetime is %s\" % dt)\n</code>", "<code>2016-08-25T16:01:26.123456Z is 1472140886 after epoch\ndatetime is 2016-08-25 12:01:26\n2016-08-25T16:01:29 is 1472140889 after epoch\ndatetime is 2016-08-25 12:01:29\n</code>", "<code>CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm]</code>", "<code>2016-06-29T19:36:29.3453Z</code>", "<code>datetime.datetime.strptime(timestamp.translate(None, ':-'), \"%Y%m%dT%H%M%S.%fZ\")\n</code>", "<code>2016-06-29T19:36:29.3453-0400</code>", "<code>2008-09-03T20:56:35.450686+05:00</code>", "<code>20080903T205635.450686+0500</code>", "<code>import re\n# this regex removes all colons and all \n# dashes EXCEPT for the dash indicating + or - utc offset for the timezone\nconformed_timestamp = re.sub(r\"[:]|([-](?!((\\d{2}[:]\\d{2})|(\\d{4}))$))\", '', timestamp)\ndatetime.datetime.strptime(conformed_timestamp, \"%Y%m%dT%H%M%S.%f%z\" )\n</code>", "<code>%z</code>", "<code>ValueError: 'z' is a bad directive in format '%Y%m%dT%H%M%S.%f%z'</code>", "<code>Z</code>", "<code>%z</code>", "<code>import re\nimport datetime\n\n# this regex removes all colons and all \n# dashes EXCEPT for the dash indicating + or - utc offset for the timezone\nconformed_timestamp = re.sub(r\"[:]|([-](?!((\\d{2}[:]\\d{2})|(\\d{4}))$))\", '', timestamp)\n\n# split on the offset to remove it. use a capture group to keep the delimiter\nsplit_timestamp = re.split(r\"[+|-]\",conformed_timestamp)\nmain_timestamp = split_timestamp[0]\nif len(split_timestamp) == 3:\n    sign = split_timestamp[1]\n    offset = split_timestamp[2]\nelse:\n    sign = None\n    offset = None\n\n# generate the datetime object without the offset at UTC time\noutput_datetime = datetime.datetime.strptime(main_timestamp +\"Z\", \"%Y%m%dT%H%M%S.%fZ\" )\nif offset:\n    # create timedelta based on offset\n    offset_delta = datetime.timedelta(hours=int(sign+offset[:-2]), minutes=int(sign+offset[-2:]))\n    # offset datetime with timedelta\n    output_datetime = output_datetime + offset_delta\n</code>", "<code>from dateutil import parser\nds = '2012-60-31'\ntry:\n  dt = parser.parse(ds)\nexcept ValueError, e:\n  print '\"%s\" is an invalid date' % ds\n</code>", "<code>from datetime import datetime, timezone, timedelta\ndatetime.strptime(timestamp, \"%Y-%m-%dT%H:%M:%S.%fZ\").replace(\n    tzinfo=timezone(timedelta(0)))\n</code>", "<code>&gt;&gt;&gt; datetime.utcnow().replace(tzinfo=timezone(timedelta(0)))\n... datetime.datetime(2015, 3, 11, 6, 2, 47, 879129, tzinfo=datetime.timezone.utc)\n</code>", "<code>strptime</code>", "<code>timezone.utc</code>", "<code>timezone(timedelta(0))</code>", "<code>utc</code>", "<code>class FixedOffset(tzinfo):\n    \"\"\"Fixed offset in minutes: `time = utc_time + utc_offset`.\"\"\"\n    def __init__(self, offset):\n        self.__offset = timedelta(minutes=offset)\n        hours, minutes = divmod(offset, 60)\n        #NOTE: the last part is to remind about deprecated POSIX GMT+h timezones\n        #  that have the opposite sign in the name;\n        #  the corresponding numeric value is not used e.g., no minutes\n        self.__name = '&lt;%+03d%02d&gt;%+d' % (hours, minutes, -hours)\n    def utcoffset(self, dt=None):\n        return self.__offset\n    def tzname(self, dt=None):\n        return self.__name\n    def dst(self, dt=None):\n        return timedelta(0)\n    def __repr__(self):\n        return 'FixedOffset(%d)' % (self.utcoffset().total_seconds() / 60)\n    def __getinitargs__(self):\n        return (self.__offset.total_seconds()/60,)\n\ndef parse_isoformat_datetime(isodatetime):\n    try:\n        return datetime.strptime(isodatetime, '%Y-%m-%dT%H:%M:%S.%f')\n    except ValueError:\n        pass\n    try:\n        return datetime.strptime(isodatetime, '%Y-%m-%dT%H:%M:%S')\n    except ValueError:\n        pass\n    pat = r'(.*?[+-]\\d{2}):(\\d{2})'\n    temp = re.sub(pat, r'\\1\\2', isodatetime)\n    naive_date_str = temp[:-5]\n    offset_str = temp[-5:]\n    naive_dt = datetime.strptime(naive_date_str, '%Y-%m-%dT%H:%M:%S.%f')\n    offset = int(offset_str[-4:-2])*60 + int(offset_str[-2:])\n    if offset_str[0] == \"-\":\n        offset = -offset\n    return naive_dt.replace(tzinfo=FixedOffset(offset))\n</code>", "<code>import ciso8601\nciso8601.parse_datetime('2014-01-09T21:48:00.921000+05:30')\n</code>", "<code>def parseISO8601DateTime(datetimeStr):\n    import time\n    from datetime import datetime, timedelta\n\n    def log_date_string(when):\n        gmt = time.gmtime(when)\n        if time.daylight and gmt[8]:\n            tz = time.altzone\n        else:\n            tz = time.timezone\n        if tz &gt; 0:\n            neg = 1\n        else:\n            neg = 0\n            tz = -tz\n        h, rem = divmod(tz, 3600)\n        m, rem = divmod(rem, 60)\n        if neg:\n            offset = '-%02d%02d' % (h, m)\n        else:\n            offset = '+%02d%02d' % (h, m)\n\n        return time.strftime('%d/%b/%Y:%H:%M:%S ', gmt) + offset\n\n    dt = datetime.strptime(datetimeStr, '%Y-%m-%dT%H:%M:%S.%fZ')\n    timestamp = dt.timestamp()\n    return dt + timedelta(hours=dt.hour-time.gmtime(timestamp).tm_hour)\n</code>", "<code>Z</code>", "<code>%z</code>"], "path": "stack.django"}, {"tags": ["python", "pip"], "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1334771631, "answer_id": 10215100, "path": "stack.django.answer", "score": 526, "up_vote_count": 528, "is_accepted": true, "last_activity_date": 1408590403, "last_edit_date": 1408590403, "body_markdown": "As of [pip 1.3](https://github.com/pypa/pip/blob/1.3/CHANGES.txt#L54), there is a `pip show` command.\r\n\r\n    $ pip show Jinja2\r\n    ---\r\n    Name: Jinja2\r\n    Version: 2.7.3\r\n    Location: /path/to/virtualenv/lib/python2.7/site-packages\r\n    Requires: markupsafe\r\n\r\nIn older versions, `pip freeze` and `grep` should do the job nicely.\r\n\r\n    $ pip freeze | grep Jinja2\r\n    Jinja2==2.7.3"}, {"tags": [], "down_vote_count": 0, "creation_date": 1334773837, "answer_id": 10215664, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1334773837, "body_markdown": "You can also install `yolk` and then run `yolk -l` which also gives some nice output.  Here is what I get for my little virtualenv:\r\n\r\n    (venv)CWD&gt; /space/vhosts/pyramid.xcode.com/venv/build/unittest \r\n    project@pyramid 43&gt; yolk -l\r\n    Chameleon       - 2.8.2        - active \r\n    Jinja2          - 2.6          - active \r\n    Mako            - 0.7.0        - active \r\n    MarkupSafe      - 0.15         - active \r\n    PasteDeploy     - 1.5.0        - active \r\n    Pygments        - 1.5          - active \r\n    Python          - 2.7.3        - active development (/usr/lib/python2.7/lib-dynload)\r\n    SQLAlchemy      - 0.7.6        - active \r\n    WebOb           - 1.2b3        - active \r\n    account         - 0.0          - active development (/space/vhosts/pyramid.xcode.com/project/account)\r\n    distribute      - 0.6.19       - active \r\n    egenix-mx-base  - 3.2.3        - active \r\n    ipython         - 0.12         - active \r\n    logilab-astng   - 0.23.1       - active \r\n    logilab-common  - 0.57.1       - active \r\n    nose            - 1.1.2        - active \r\n    pbkdf2          - 1.3          - active \r\n    pip             - 1.0.2        - active \r\n    pyScss          - 1.1.3        - active \r\n    pycrypto        - 2.5          - active \r\n    pylint          - 0.25.1       - active \r\n    pyramid-debugtoolbar - 1.0.1        - active \r\n    pyramid-tm      - 0.4          - active \r\n    pyramid         - 1.3          - active \r\n    repoze.lru      - 0.5          - active \r\n    simplejson      - 2.5.0        - active \r\n    transaction     - 1.2.0        - active \r\n    translationstring - 1.1          - active \r\n    venusian        - 1.0a3        - active \r\n    waitress        - 0.8.1        - active \r\n    wsgiref         - 0.1.2        - active development (/usr/lib/python2.7)\r\n    yolk            - 0.4.3        - active \r\n    zope.deprecation - 3.5.1        - active \r\n    zope.interface  - 3.8.0        - active \r\n    zope.sqlalchemy - 0.7          - active "}, {"tags": [], "down_vote_count": 0, "creation_date": 1335277723, "answer_id": 10300036, "path": "stack.django.answer", "score": 51, "up_vote_count": 51, "is_accepted": false, "last_activity_date": 1335277723, "body_markdown": "I just sent a pull request in pip with the enhancement Hugo Tavares said:\r\n\r\n(specloud as example)\r\n\r\n    $ pip show specloud\r\n\r\n    Package: specloud\r\n    Version: 0.4.4\r\n    Requires:\r\n    nose\r\n    figleaf\r\n    pinocchio"}, {"tags": [], "down_vote_count": 0, "creation_date": 1390473382, "answer_id": 21305641, "path": "stack.django.answer", "score": 26, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1413464680, "last_edit_date": 1413464680, "body_markdown": "Pip 1.3 now also has a [list][1] command:\r\n\r\n    $ pip list\r\n    argparse (1.2.1)\r\n    pip (1.5.1)\r\n    setuptools (2.1)\r\n    wsgiref (0.1.2)\r\n\r\n\r\n  [1]: https://pip.pypa.io/en/latest/reference/pip_list.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1398855648, "answer_id": 23386328, "path": "stack.django.answer", "score": 21, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1398855648, "body_markdown": "and with --outdated as an extra argument, you will get the Current and Latest versions of the packages you are using :\r\n\r\n    $ pip list --outdated\r\n    distribute (Current: 0.6.34 Latest: 0.7.3)\r\n    django-bootstrap3 (Current: 1.1.0 Latest: 4.3.0)\r\n    Django (Current: 1.5.4 Latest: 1.6.4)\r\n    Jinja2 (Current: 2.6 Latest: 2.8)\r\n\r\nSo combining with AdamKG &#39;s answer :\r\n\r\n    $ pip list --outdated | grep Jinja2\r\n    Jinja2 (Current: 2.6 Latest: 2.8)\r\n\r\nCheck **pip-tools** too : https://github.com/nvie/pip-tools"}, {"tags": [], "down_vote_count": 1, "creation_date": 1451467651, "answer_id": 34526609, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1471774565, "last_edit_date": 1471774565, "body_markdown": "The easiest way is this:\r\n\r\n    import jinja2\r\n    print jinja2.__version__"}, {"tags": [], "down_vote_count": 0, "creation_date": 1452106366, "answer_id": 34640581, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1452106366, "body_markdown": "You can use the grep command to find out.\r\n\r\n    pip show &lt;package_name&gt;|grep Version\r\n\r\nExample:\r\n\r\n    pip show urllib3|grep Version\r\n\r\nwill show only the versions.\r\n\r\n&gt; Metadata-Version: 2.0  \r\nVersion: 1.12\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1502019622, "answer_id": 45531653, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1502019622, "body_markdown": "You can get a list of packages and their versions, e.g.:\r\n\r\n    pip list\r\n\r\n**Output :**\r\n\r\n    appdirs (1.4.3)\r\n    BeautifulSoup (3.2.\r\n    beautifulsoup4 (4.6\r\n    certifi (2017.4.17)\r\n    chardet (3.0.4)\r\n    cookies (2.2.1)\r\n    dj-database-url (0.\r\n    Django (1.10.4)\r\n    django-allauth (0.3\r\n    django-filter (1.0.\r\n    django-haystack (2.\r\n    django-oauth-toolki\r\n    django-recaptcha (1\r\n    djangorestframework\r\n    djangorestframework\r\n    funcsigs (1.0.2)\r\n    gunicorn (19.7.1)\r\n    idna (2.5)\r\n    Jinja2 (2.9.6)\r\n    Markdown (2.6.8)\r\n    MarkupSafe (1.0)\r\n    mock (2.0.0)\r\n    MySQL-python (1.2.5\r\n    numpy (1.13.1)\r\n    oauthlib (2.0.2)\r\n    packaging (16.8)\r\n    pandas (0.20.3)\r\n    pbr (3.1.1)\r\n    pep8 (1.7.0)\r\n    pip (9.0.1)\r\n    psycopg2 (2.7.1)\r\n    PyJWT (1.5.2)\r\n    pyparsing (2.2.0)\r\n    python-dateutil (2.\r\n    python-decouple (3.\r\n    python-openid (2.2.\r\n    pytz (2017.2)\r\n    requests (2.18.1)\r\n    requests-oauthlib (\r\n    responses (0.5.1)\r\n    setuptools (35.0.1)\r\n    six (1.10.0)\r\n    social-auth-app-dja\r\n    social-auth-core (1\r\n    urllib3 (1.21.1)\r\n    virtualenv (15.1.0)\r\n    wheel (0.29.0)\r\n    whitenoise (3.3.0)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1519451555, "answer_id": 48959839, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1519451555, "body_markdown": "On windows, you can issue command such as:\r\n\r\n    pip show setuptools | findstr &quot;Version&quot;\r\n\r\nOutput:\r\n \r\n    Version: 34.1.1"}], "creation_date": 1334770640, "body_markdown": "Using pip, is it possible to figure out which version of a package is currently installed?\r\n\r\nI know about `pip install XYZ --upgrade` but I am wondering if there is anything like `pip info XYZ`.  If not what would be the best way to tell what version I am currently using.", "title": "Find which version of package is installed with pip", "view_count": 253433, "up_vote_count": 407, "answer_count": 9, "link": "https://stackoverflow.com/questions/10214827/find-which-version-of-package-is-installed-with-pip", "code_snippet": ["<code>pip install XYZ --upgrade</code>", "<code>pip info XYZ</code>", "<code>show</code>", "<code>pip show</code>", "<code>$ pip show Jinja2\n---\nName: Jinja2\nVersion: 2.7.3\nLocation: /path/to/virtualenv/lib/python2.7/site-packages\nRequires: markupsafe\n</code>", "<code>pip freeze</code>", "<code>grep</code>", "<code>$ pip freeze | grep Jinja2\nJinja2==2.7.3\n</code>", "<code>pip freeze</code>", "<code>save</code>", "<code>pip show pip</code>", "<code>pip --version</code>", "<code>$ pip show specloud\n\nPackage: specloud\nVersion: 0.4.4\nRequires:\nnose\nfigleaf\npinocchio\n</code>", "<code>$ pip list\nargparse (1.2.1)\npip (1.5.1)\nsetuptools (2.1)\nwsgiref (0.1.2)\n</code>", "<code>$ pip list --outdated\ndistribute (Current: 0.6.34 Latest: 0.7.3)\ndjango-bootstrap3 (Current: 1.1.0 Latest: 4.3.0)\nDjango (Current: 1.5.4 Latest: 1.6.4)\nJinja2 (Current: 2.6 Latest: 2.8)\n</code>", "<code>$ pip list --outdated | grep Jinja2\nJinja2 (Current: 2.6 Latest: 2.8)\n</code>", "<code>yolk</code>", "<code>yolk -l</code>", "<code>(venv)CWD&gt; /space/vhosts/pyramid.xcode.com/venv/build/unittest \nproject@pyramid 43&gt; yolk -l\nChameleon       - 2.8.2        - active \nJinja2          - 2.6          - active \nMako            - 0.7.0        - active \nMarkupSafe      - 0.15         - active \nPasteDeploy     - 1.5.0        - active \nPygments        - 1.5          - active \nPython          - 2.7.3        - active development (/usr/lib/python2.7/lib-dynload)\nSQLAlchemy      - 0.7.6        - active \nWebOb           - 1.2b3        - active \naccount         - 0.0          - active development (/space/vhosts/pyramid.xcode.com/project/account)\ndistribute      - 0.6.19       - active \negenix-mx-base  - 3.2.3        - active \nipython         - 0.12         - active \nlogilab-astng   - 0.23.1       - active \nlogilab-common  - 0.57.1       - active \nnose            - 1.1.2        - active \npbkdf2          - 1.3          - active \npip             - 1.0.2        - active \npyScss          - 1.1.3        - active \npycrypto        - 2.5          - active \npylint          - 0.25.1       - active \npyramid-debugtoolbar - 1.0.1        - active \npyramid-tm      - 0.4          - active \npyramid         - 1.3          - active \nrepoze.lru      - 0.5          - active \nsimplejson      - 2.5.0        - active \ntransaction     - 1.2.0        - active \ntranslationstring - 1.1          - active \nvenusian        - 1.0a3        - active \nwaitress        - 0.8.1        - active \nwsgiref         - 0.1.2        - active development (/usr/lib/python2.7)\nyolk            - 0.4.3        - active \nzope.deprecation - 3.5.1        - active \nzope.interface  - 3.8.0        - active \nzope.sqlalchemy - 0.7          - active \n</code>", "<code>pip show &lt;package_name&gt;|grep Version\n</code>", "<code>pip show urllib3|grep Version\n</code>", "<code>pip list\n</code>", "<code>appdirs (1.4.3)\nBeautifulSoup (3.2.\nbeautifulsoup4 (4.6\ncertifi (2017.4.17)\nchardet (3.0.4)\ncookies (2.2.1)\ndj-database-url (0.\nDjango (1.10.4)\ndjango-allauth (0.3\ndjango-filter (1.0.\ndjango-haystack (2.\ndjango-oauth-toolki\ndjango-recaptcha (1\ndjangorestframework\ndjangorestframework\nfuncsigs (1.0.2)\ngunicorn (19.7.1)\nidna (2.5)\nJinja2 (2.9.6)\nMarkdown (2.6.8)\nMarkupSafe (1.0)\nmock (2.0.0)\nMySQL-python (1.2.5\nnumpy (1.13.1)\noauthlib (2.0.2)\npackaging (16.8)\npandas (0.20.3)\npbr (3.1.1)\npep8 (1.7.0)\npip (9.0.1)\npsycopg2 (2.7.1)\nPyJWT (1.5.2)\npyparsing (2.2.0)\npython-dateutil (2.\npython-decouple (3.\npython-openid (2.2.\npytz (2017.2)\nrequests (2.18.1)\nrequests-oauthlib (\nresponses (0.5.1)\nsetuptools (35.0.1)\nsix (1.10.0)\nsocial-auth-app-dja\nsocial-auth-core (1\nurllib3 (1.21.1)\nvirtualenv (15.1.0)\nwheel (0.29.0)\nwhitenoise (3.3.0)\n</code>", "<code>import jinja2\nprint jinja2.__version__\n</code>", "<code>__version__</code>", "<code>pip show setuptools | findstr \"Version\"\n</code>", "<code>Version: 34.1.1\n</code>"], "path": "stack.django"}, {"tags": ["python", "ajax", "django"], "creation_date": 1385854860, "body_markdown": "I am new to Django and pretty new to Ajax. I am working on a project where I need to integrate the two. I believe that I understand the principles behind them both, but have not found a good explanation of the two together. \r\n\r\nCould someone give me a quick explanation of how the codebase must change with the two of them integrating together?\r\n\r\nFor example, can I still use the `HttpResponse` with Ajax, or do my responses have to change with the use of Ajax? If so, could you please provide an example of how the responses to the requests must change? If it makes any difference, the data I am returning is JSON. \r\n\r\n", "last_edit_date": 1385868411, "up_vote_count": 186, "link": "https://stackoverflow.com/questions/20306981/how-do-i-integrate-ajax-with-django-applications", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1385859775, "answer_id": 20307569, "path": "stack.django.answer", "score": 506, "up_vote_count": 507, "is_accepted": true, "last_activity_date": 1451093740, "last_edit_date": 1451093740, "body_markdown": "Even though this isn&#39;t entirely in the SO spirit, I love this question, because I had the same trouble when I started so I&#39;ll give you a quick guide. Obviously you don&#39;t understand the principles behind them (don&#39;t take it as an offense, but if you did you wouldn&#39;t be asking). \r\n\r\nDjango is server-side. It means, say a client goes to url you have a function inside views that renders what he sees and returns a response in html. let&#39;s break it up into examples:\r\n\r\nviews.py\r\n\r\n    def hello(request):\r\n        return HttpResponse(&#39;Hello World!&#39;)\r\n\r\n    def home(request):\r\n        return render_to_response(&#39;index.html&#39;, {&#39;variable&#39;: &#39;world&#39;})\r\n\r\nindex.html:\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;h1&gt;Hello {{ variable }}, welcome to my awesome site&lt;/h1&gt;\r\n\r\nurls.py\r\n\r\n    url(r&#39;^hello/&#39;, &#39;myapp.views.hello&#39;),\r\n    url(r&#39;^home/&#39;, &#39;myapp.views.home&#39;),\r\n\r\n\r\nThat&#39;s an example of the simplest of usages. Going to `127.0.0.1:8000/hello` means a request to the hello function, going to `127.0.0.1:8000/home` will return the `index.html` and replace all the variables as asked (you probably know all this by now).\r\n\r\nNow let&#39;s talk about AJAX. AJAX calls are client-side code that does asynchronous requests. That sounds complicated, but it simply means it does a request for you in the background and then handles the response. So when you do an AJAX call for some url, you get the same data you would get as a user going to that place. \r\n\r\nFor example, an ajax call to `127.0.0.1:8000/hello` will return the same thing it would as if you visited it. Only this time, you have it inside a js function and you can deal with it however you&#39;d like. Let&#39;s look at a simple use case:\r\n\r\n&lt;!-- language: lang-javascript --&gt;\r\n\r\n    $.ajax({\r\n        url: &#39;127.0.0.1:8000/hello&#39;,\r\n        type: &#39;get&#39;, // This is the default though, you don&#39;t actually need to always mention it\r\n        success: function(data) {\r\n            alert(data);\r\n        },\r\n        failure: function(data) { \r\n            alert(&#39;Got an error dude&#39;);\r\n        }\r\n    }); \r\n\r\n\r\nThe general process is this:\r\n\r\n1. The call goes to the url `127.0.0.1:8000/hello` as if you opened a new tab and did it yourself.\r\n2. If it succeeds (status code 200), do the function for success, which will alert the data recieved.\r\n3. If fails, do a different function.\r\n\r\n\r\nNow what would happen here? You would get an alert with &#39;hello world&#39; in it. What happens if you do an ajax call to home? Same thing, you&#39;ll get an alert stating `&lt;h1&gt;Hello world, welcome to my awesome site&lt;/h1&gt;`.\r\n\r\nIn other words - there&#39;s nothing new about AJAX calls. They are just a way for you to let the user get data and information without leaving the page, and it makes for a smooth and very neat design of your website. A few guidelines you should take note of:\r\n\r\n1. **Learn jQuery**. I cannot stress this enough. You&#39;re gonna have to understand it a little to know how to handle the data you receive. You&#39;ll also need to understand some basic javascript syntax (not far from python, you&#39;ll get used to it). I strongly recommend [Envato&#39;s video tutorials for jQuery][1], they are great and will put you on the right path.\r\n2. **When to use JSON?**. You&#39;re going to see a lot of examples where the data sent by the Django views is in JSON. I didn&#39;t go into detail on that, because it isn&#39;t important *how* to do it (there are plenty of explanations abound) and a lot more important *when*. And the answer to that is - JSON data is serialized data. That is, data you can manipulate. Like I mentioned, an AJAX call will fetch the response as if the user did it himself. Now say you don&#39;t want to mess with all the html, and instead want to send data (a list of objects perhaps). JSON is good for this, because it sends it as an object (JSON data looks like a python dictionary), and then you can iterate over it or do something else that removes the need to sift through useless html.\r\n3. **Add it last**. When you build a web app and want to implement AJAX - do yourself a favor. First, build the entire app completely devoid of any AJAX. See that everything is working. Then, and only then, start writing the AJAX calls. That&#39;s a good process that helps you learn a lot as well.\r\n4. **Use chrome&#39;s developer tools**. Since AJAX calls are done in the background it&#39;s sometimes very hard to debug them. You should use the chrome developer tools (or similar tools such as firebug) and `console.log` things to debug. I won&#39;t explain in detail, just google around and find out about it. It would be very helpful to you.\r\n5. **CSRF awareness**. Finally, remember that post requests in Django require the `csrf_token`. With AJAX calls, a lot of times you&#39;d like to send data without refreshing the page. You&#39;ll probably face some trouble before you&#39;d finally remember that - wait, you forgot to send the `csrf_token`. This is a known beginner roadblock in AJAX-Django integration, but after you learn how to make it play nice, it&#39;s easy as pie.\r\n\r\nThat&#39;s everything that comes to my head. It&#39;s a vast subject, but yeah, there&#39;s probably not enough examples out there. Just work your way there, slowly, you&#39;ll get it eventually.\r\n\r\n  [1]: https://tutsplus.com/course/30-days-to-learn-jquery/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1423131477, "answer_id": 28341345, "path": "stack.django.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1517683932, "last_edit_date": 1517683932, "body_markdown": "Further from yuvi&#39;s excellent answer, I would like to add a small specific example on how to deal with this within Django (beyond any js that will be used). The example uses `AjaxableResponseMixin` and assumes an Author model.\r\n\r\n    import json\r\n    \r\n    from django.http import HttpResponse\r\n    from django.views.generic.edit import CreateView\r\n    from myapp.models import Author\r\n    \r\n    class AjaxableResponseMixin(object):\r\n        &quot;&quot;&quot;\r\n        Mixin to add AJAX support to a form.\r\n        Must be used with an object-based FormView (e.g. CreateView)\r\n        &quot;&quot;&quot;\r\n        def render_to_json_response(self, context, **response_kwargs):\r\n            data = json.dumps(context)\r\n            response_kwargs[&#39;content_type&#39;] = &#39;application/json&#39;\r\n            return HttpResponse(data, **response_kwargs)\r\n    \r\n        def form_invalid(self, form):\r\n            response = super(AjaxableResponseMixin, self).form_invalid(form)\r\n            if self.request.is_ajax():\r\n                return self.render_to_json_response(form.errors, status=400)\r\n            else:\r\n                return response\r\n    \r\n        def form_valid(self, form):\r\n            # We make sure to call the parent&#39;s form_valid() method because\r\n            # it might do some processing (in the case of CreateView, it will\r\n            # call form.save() for example).\r\n            response = super(AjaxableResponseMixin, self).form_valid(form)\r\n            if self.request.is_ajax():\r\n                data = {\r\n                    &#39;pk&#39;: self.object.pk,\r\n                }\r\n                return self.render_to_json_response(data)\r\n            else:\r\n                return response\r\n    \r\n    class AuthorCreate(AjaxableResponseMixin, CreateView):\r\n        model = Author\r\n        fields = [&#39;name&#39;]\r\n\r\nSource: [Django documentation, Form handling with class-based views][1]\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.11/topics/class-based-views/generic-editing/#ajax-example\r\n\r\nThe link to version 1.6 of Django is no longer available updated to version 1.11\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1448329030, "answer_id": 33883993, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1448329030, "body_markdown": "Simple and Nice. You don&#39;t have to change your views. Bjax handles all your links. Check this out:\r\n[Bjax][1]\r\n\r\n\r\nUsage:\r\n\r\n\r\n\r\n    &lt;script src=&quot;bjax.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;\r\n    &lt;link href=&quot;bjax.min.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;\r\n\r\nFinally, include this in the HEAD of your html:\r\n\r\n\r\n\r\n    $(&#39;a&#39;).bjax();\r\n\r\nFor more settings, checkout demo here: \r\n[Bjax Demo][2]\r\n\r\n\r\n  [1]: https://github.com/KiraLT/Bjax\r\n  [2]: http://bjax.6te.net/demo/index.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1473263050, "answer_id": 39374248, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1510709358, "last_edit_date": 1510709358, "body_markdown": "I have tried to use [AjaxableResponseMixin][1] in my project, but had ended up with the following error message:\r\n\r\n&gt; ImproperlyConfigured: No URL to redirect to.  Either provide a url or define a get_absolute_url method on the Model.\r\n\r\nThat is because the CreateView will return a **redirect response** instead of returning a HttpResponse when you to send JSON request to the browser. So I have made some changes to the `AjaxableResponseMixin`. If the request is an ajax request, it will not call the `super.form_valid` method, just call the `form.save()` directly.\r\n\r\n    from django.http import JsonResponse\r\n    from django import forms\r\n    from django.db import models\r\n    \r\n    class AjaxableResponseMixin(object):\r\n        success_return_code = 1\r\n        error_return_code = 0\r\n        &quot;&quot;&quot;\r\n        Mixin to add AJAX support to a form.\r\n        Must be used with an object-based FormView (e.g. CreateView)\r\n        &quot;&quot;&quot;\r\n        def form_invalid(self, form):\r\n            response = super(AjaxableResponseMixin, self).form_invalid(form)\r\n            if self.request.is_ajax():\r\n                form.errors.update({&#39;result&#39;: self.error_return_code})\r\n                return JsonResponse(form.errors, status=400)\r\n            else:\r\n                return response\r\n    \r\n        def form_valid(self, form):\r\n            # We make sure to call the parent&#39;s form_valid() method because\r\n            # it might do some processing (in the case of CreateView, it will\r\n            # call form.save() for example).\r\n            if self.request.is_ajax():\r\n                self.object = form.save()\r\n                data = {\r\n                    &#39;result&#39;: self.success_return_code\r\n                }\r\n                return JsonResponse(data)\r\n            else:\r\n                response = super(AjaxableResponseMixin, self).form_valid(form)\r\n                return response\r\n\r\n    class Product(models.Model):\r\n        name = models.CharField(&#39;product name&#39;, max_length=255)\r\n    \r\n    class ProductAddForm(forms.ModelForm):\r\n        &#39;&#39;&#39;\r\n        Product add form\r\n        &#39;&#39;&#39;\r\n        class Meta:\r\n            model = Product\r\n            exclude = [&#39;id&#39;]\r\n    \r\n    \r\n    class PriceUnitAddView(AjaxableResponseMixin, CreateView):\r\n        &#39;&#39;&#39;\r\n        Product add view\r\n        &#39;&#39;&#39;\r\n        model = Product\r\n        form_class = ProductAddForm\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.10/topics/class-based-views/generic-editing/#ajax-example"}], "title": "How do I integrate Ajax with Django applications?", "view_count": 62295, "answer_count": 4, "code_snippet": ["<code>HttpResponse</code>", "<code>def hello(request):\n    return HttpResponse('Hello World!')\n\ndef home(request):\n    return render_to_response('index.html', {'variable': 'world'})\n</code>", "<code>&lt;h1&gt;Hello {{ variable }}, welcome to my awesome site&lt;/h1&gt;\n</code>", "<code>url(r'^hello/', 'myapp.views.hello'),\nurl(r'^home/', 'myapp.views.home'),\n</code>", "<code>127.0.0.1:8000/hello</code>", "<code>127.0.0.1:8000/home</code>", "<code>index.html</code>", "<code>127.0.0.1:8000/hello</code>", "<code>$.ajax({\n    url: '127.0.0.1:8000/hello',\n    type: 'get', // This is the default though, you don't actually need to always mention it\n    success: function(data) {\n        alert(data);\n    },\n    failure: function(data) { \n        alert('Got an error dude');\n    }\n}); \n</code>", "<code>127.0.0.1:8000/hello</code>", "<code>&lt;h1&gt;Hello world, welcome to my awesome site&lt;/h1&gt;</code>", "<code>console.log</code>", "<code>csrf_token</code>", "<code>csrf_token</code>", "<code>AjaxableResponseMixin</code>", "<code>import json\n\nfrom django.http import HttpResponse\nfrom django.views.generic.edit import CreateView\nfrom myapp.models import Author\n\nclass AjaxableResponseMixin(object):\n    \"\"\"\n    Mixin to add AJAX support to a form.\n    Must be used with an object-based FormView (e.g. CreateView)\n    \"\"\"\n    def render_to_json_response(self, context, **response_kwargs):\n        data = json.dumps(context)\n        response_kwargs['content_type'] = 'application/json'\n        return HttpResponse(data, **response_kwargs)\n\n    def form_invalid(self, form):\n        response = super(AjaxableResponseMixin, self).form_invalid(form)\n        if self.request.is_ajax():\n            return self.render_to_json_response(form.errors, status=400)\n        else:\n            return response\n\n    def form_valid(self, form):\n        # We make sure to call the parent's form_valid() method because\n        # it might do some processing (in the case of CreateView, it will\n        # call form.save() for example).\n        response = super(AjaxableResponseMixin, self).form_valid(form)\n        if self.request.is_ajax():\n            data = {\n                'pk': self.object.pk,\n            }\n            return self.render_to_json_response(data)\n        else:\n            return response\n\nclass AuthorCreate(AjaxableResponseMixin, CreateView):\n    model = Author\n    fields = ['name']\n</code>", "<code>&lt;script src=\"bjax.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;link href=\"bjax.min.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n</code>", "<code>$('a').bjax();\n</code>", "<code>AjaxableResponseMixin</code>", "<code>super.form_valid</code>", "<code>form.save()</code>", "<code>from django.http import JsonResponse\nfrom django import forms\nfrom django.db import models\n\nclass AjaxableResponseMixin(object):\n    success_return_code = 1\n    error_return_code = 0\n    \"\"\"\n    Mixin to add AJAX support to a form.\n    Must be used with an object-based FormView (e.g. CreateView)\n    \"\"\"\n    def form_invalid(self, form):\n        response = super(AjaxableResponseMixin, self).form_invalid(form)\n        if self.request.is_ajax():\n            form.errors.update({'result': self.error_return_code})\n            return JsonResponse(form.errors, status=400)\n        else:\n            return response\n\n    def form_valid(self, form):\n        # We make sure to call the parent's form_valid() method because\n        # it might do some processing (in the case of CreateView, it will\n        # call form.save() for example).\n        if self.request.is_ajax():\n            self.object = form.save()\n            data = {\n                'result': self.success_return_code\n            }\n            return JsonResponse(data)\n        else:\n            response = super(AjaxableResponseMixin, self).form_valid(form)\n            return response\n\nclass Product(models.Model):\n    name = models.CharField('product name', max_length=255)\n\nclass ProductAddForm(forms.ModelForm):\n    '''\n    Product add form\n    '''\n    class Meta:\n        model = Product\n        exclude = ['id']\n\n\nclass PriceUnitAddView(AjaxableResponseMixin, CreateView):\n    '''\n    Product add view\n    '''\n    model = Product\n    form_class = ProductAddForm\n</code>"], "path": "stack.django"}, {"tags": ["django", "media"], "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1301686826, "answer_id": 5518050, "path": "stack.django.answer", "score": 21, "up_vote_count": 22, "is_accepted": false, "last_activity_date": 1301686826, "body_markdown": "&gt; Do I need to setup specific URLconf patters for uploaded media?\r\n\r\nYes. For development, it&#39;s as easy as adding this to your URLconf:\r\n\r\n    if settings.DEBUG:\r\n        urlpatterns += patterns(&#39;django.views.static&#39;,\r\n            (r&#39;media/(?P&lt;path&gt;.*)&#39;, &#39;serve&#39;, {&#39;document_root&#39;: settings.MEDIA_ROOT}),\r\n        )\r\n\r\nHowever, for production, you&#39;ll want to serve the media using Apache, lighttpd, nginx, or your preferred web server."}, {"tags": [], "down_vote_count": 0, "creation_date": 1301686967, "answer_id": 5518073, "path": "stack.django.answer", "score": 224, "up_vote_count": 224, "is_accepted": true, "last_activity_date": 1455649088, "last_edit_date": 1455649088, "body_markdown": "Try putting this into your _urls.py_\r\n\r\n    from django.conf import settings\r\n\r\n    # ... your normal urlpatterns here\r\n\r\n    if settings.DEBUG:\r\n        # static files (images, css, javascript, etc.)\r\n        urlpatterns += patterns(&#39;&#39;,\r\n            (r&#39;^media/(?P&lt;path&gt;.*)$&#39;, &#39;django.views.static.serve&#39;, {\r\n            &#39;document_root&#39;: settings.MEDIA_ROOT}))\r\n\r\nWith this you can serve the static media from Django when `DEBUG = True` (when you run on local computer) but you can let your web server configuration serve static media when you go to production and `DEBUG = False`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1367333507, "answer_id": 16302860, "path": "stack.django.answer", "score": 77, "up_vote_count": 77, "is_accepted": false, "last_activity_date": 1518748549, "last_edit_date": 1518748549, "body_markdown": "Please read the official Django DOC carefully and you will find the most fit answer.\r\n\r\nThe best and easist way to solve this is like below.\r\n\r\n    from django.conf import settings\r\n    from django.conf.urls.static import static\r\n\r\n    urlpatterns = patterns(&#39;&#39;,\r\n        # ... the rest of your URLconf goes here ...\r\n    ) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1437607004, "answer_id": 31575618, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1455650276, "last_edit_date": 1455650276, "body_markdown": "Another problem you are likely to face after setting up all your URLconf patterns is that the variable `{{ MEDIA_URL }}` won&#39;t work in your templates. To fix this,in your **settings.py**, make sure you add \r\n\r\n&gt; django.core.context_processors.media\r\n\r\n in your `TEMPLATE_CONTEXT_PROCESSORS`."}, {"tags": [], "down_vote_count": 1, "creation_date": 1444854677, "answer_id": 33135032, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1444854677, "body_markdown": "Adding to  Micah Carrick answer for django 1.8:\r\n\r\n    if settings.DEBUG:\r\n      urlpatterns.append(url(r&#39;^media/(?P&lt;path&gt;.*)$&#39;, &#39;django.views.static.serve&#39;, {&#39;document_root&#39;: settings.MEDIA_ROOT}))\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1450854278, "answer_id": 34430349, "path": "stack.django.answer", "score": 56, "up_vote_count": 56, "is_accepted": false, "last_activity_date": 1450854278, "body_markdown": "For Django 1.9, you need to add the following code as per the documentation : \r\n\r\n    from django.conf import settings\r\n    from django.conf.urls.static import static\r\n\r\n    urlpatterns = [\r\n        # ... the rest of your URLconf goes here ...\r\n    ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\r\n\r\nFor more info, you can refer here : https://docs.djangoproject.com/en/1.9/howto/static-files/#serving-files-uploaded-by-a-user-during-development"}, {"tags": [], "down_vote_count": 0, "creation_date": 1456181862, "answer_id": 35565604, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1456181862, "body_markdown": "(at least) for Django 1.8:\r\n\r\nIf you use\r\n\r\n    if settings.DEBUG:\r\n      urlpatterns.append(url(r&#39;^media/(?P&lt;path&gt;.*)$&#39;, &#39;django.views.static.serve&#39;, {&#39;document_root&#39;: settings.MEDIA_ROOT}))\r\n\r\nas described above, make sure that no &quot;catch all&quot; url pattern, directing to a default view, comes before that in urlpatterns = []. As .append will put the added scheme to the end of the list, it will of course only be tested if no previous url pattern matches. You can avoid that by using something like this where the &quot;catch all&quot; url pattern is added at the very end, independent from the if statement:\r\n\r\n    if settings.DEBUG:\r\n        urlpatterns.append(url(r&#39;^media/(?P&lt;path&gt;.*)$&#39;, &#39;django.views.static.serve&#39;, {&#39;document_root&#39;: settings.MEDIA_ROOT}))\r\n    \r\n    urlpatterns.append(url(r&#39;$&#39;, &#39;views.home&#39;, name=&#39;home&#39;)),"}, {"tags": [], "down_vote_count": 0, "creation_date": 1490755061, "answer_id": 43083307, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1490755061, "body_markdown": " This if for Django 1.10:  \r\n\r\n     if settings.DEBUG:\r\n        urlpatterns += staticfiles_urlpatterns()\r\n        urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1492787900, "answer_id": 43546364, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1492788804, "last_edit_date": 1492788804, "body_markdown": "Here are the changes I had to make to deliver PDFs for the [django-publications][1] app, using Django 1.10.6:\r\n\r\nUsed the same definitions for media directories as you, in `settings.py`:\r\n\r\n    MEDIA_ROOT = &#39;/home/user/mysite/media/&#39;\r\n\r\n    MEDIA_URL = &#39;/media/&#39;\r\n\r\nAs provided by @thisisashwanipandey, in the project&#39;s main `urls.py`:\r\n\r\n    from django.conf import settings\r\n    from django.conf.urls.static import static\r\n\r\n    urlpatterns = [\r\n        # ... the rest of your URLconf goes here ...\r\n    ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\r\n\r\nand a modification of the answer provided by @r-allela, in `settings.py`:\r\n\r\n    TEMPLATES = [\r\n        {\r\n            &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,\r\n            &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],\r\n            &#39;APP_DIRS&#39;: True,\r\n            &#39;OPTIONS&#39;: {\r\n                &#39;context_processors&#39;: [\r\n                    # ... the rest of your context_processors goes here ...\r\n                    &#39;django.template.context_processors.media&#39;,\r\n                ],\r\n             },\r\n        },\r\n    ]\r\n\r\n  [1]: https://github.com/lucastheis/django-publications"}, {"tags": [], "down_vote_count": 0, "creation_date": 1518602634, "answer_id": 48784366, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1518602634, "body_markdown": "Here What i did in Django 2.0. Set  First MEDIA_ROOT an MEDIA_URL in `setting.py`\r\n\r\n    MEDIA_ROOT = os.path.join(BASE_DIR, &#39;data/&#39;) # &#39;data&#39; is my media folder\r\n    MEDIA_URL = &#39;/media/&#39;\r\nThen Enable the `media` `context_processors`  in `TEMPLATE_CONTEXT_PROCESSORS` by adding \r\n\r\n    TEMPLATES = [\r\n    {\r\n        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,\r\n        &#39;DIRS&#39;: [],\r\n        &#39;APP_DIRS&#39;: True,\r\n        &#39;OPTIONS&#39;: {\r\n            &#39;context_processors&#39;: [\r\n                #here add your context Processors\r\n                &#39;django.template.context_processors.media&#39;,\r\n            ],\r\n        },\r\n    },\r\n    ]\r\n\r\n\r\n\r\nYour  `media context processor` is enabled, Now every `RequestContext` will contain a variable `MEDIA_URL`.\r\n\r\nNow  you can access  this in your `template_name.html`\r\n\r\n    &lt;p&gt;&lt;img src=&quot;{{ MEDIA_URL }}/image_001.jpeg&quot;/&gt;&lt;/p&gt;"}], "creation_date": 1301686262, "body_markdown": "I&#39;m trying to upload an image via the Django admin and then view that image either in a page on the frontend or just via a URL.\r\n\r\nNote this is all on my local machine.\r\n\r\nMy settings are as follows:\r\n\r\n    MEDIA_ROOT = &#39;/home/dan/mysite/media/&#39;\r\n    \r\n    MEDIA_URL = &#39;/media/&#39;\r\n\r\nI have set the upload_to parameter to &#39;images&#39; and the file has been correctly uploaded to the directory:\r\n\r\n    &#39;/home/dan/mysite/media/images/myimage.png&#39;\r\n\r\nHowever, when I try to access the image at the following URL:\r\n\r\n    http://127.0.0.1:8000/media/images/myimage.png\r\n\r\nI get a 404 error.\r\n\r\nDo I need to setup specific URLconf patters for uploaded media?\r\n\r\nAny advice appreciated.\r\n\r\nThanks.\r\n\r\n\r\n\r\n", "title": "Django MEDIA_URL and MEDIA_ROOT", "view_count": 122749, "up_vote_count": 173, "answer_count": 10, "link": "https://stackoverflow.com/questions/5517950/django-media-url-and-media-root", "code_snippet": ["<code>MEDIA_ROOT = '/home/dan/mysite/media/'\n\nMEDIA_URL = '/media/'\n</code>", "<code>'/home/dan/mysite/media/images/myimage.png'\n</code>", "<code>http://127.0.0.1:8000/media/images/myimage.png\n</code>", "<code>from django.conf import settings\n\n# ... your normal urlpatterns here\n\nif settings.DEBUG:\n    # static files (images, css, javascript, etc.)\n    urlpatterns += patterns('',\n        (r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {\n        'document_root': settings.MEDIA_ROOT}))\n</code>", "<code>DEBUG = True</code>", "<code>DEBUG = False</code>", "<code>^</code>", "<code>media//(?P&lt;path&gt;.*)$</code>", "<code>http://127.0.0.1:8000/myapp/media/img/logo.png</code>", "<code>from django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = patterns('',\n    # ... the rest of your URLconf goes here ...\n) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</code>", "<code>if settings.DEV</code>", "<code>from django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    # ... the rest of your URLconf goes here ...\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</code>", "<code>if settings.DEBUG:\n    urlpatterns += patterns('django.views.static',\n        (r'media/(?P&lt;path&gt;.*)', 'serve', {'document_root': settings.MEDIA_ROOT}),\n    )\n</code>", "<code>if settings.DEBUG:\n  urlpatterns.append(url(r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT}))\n</code>", "<code>if settings.DEBUG:\n    urlpatterns.append(url(r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT}))\n\nurlpatterns.append(url(r'$', 'views.home', name='home')),\n</code>", "<code>{{ MEDIA_URL }}</code>", "<code>TEMPLATE_CONTEXT_PROCESSORS</code>", "<code>settings.py</code>", "<code>MEDIA_ROOT = '/home/user/mysite/media/'\n\nMEDIA_URL = '/media/'\n</code>", "<code>urls.py</code>", "<code>from django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    # ... the rest of your URLconf goes here ...\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</code>", "<code>settings.py</code>", "<code>TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                # ... the rest of your context_processors goes here ...\n                'django.template.context_processors.media',\n            ],\n         },\n    },\n]\n</code>", "<code>if settings.DEBUG:\n  urlpatterns.append(url(r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT}))\n</code>", "<code>TypeError: view must be a callable or a list/tuple in the case of include().</code>", "<code>setting.py</code>", "<code>MEDIA_ROOT = os.path.join(BASE_DIR, 'data/') # 'data' is my media folder\nMEDIA_URL = '/media/'\n</code>", "<code>media</code>", "<code>context_processors</code>", "<code>TEMPLATE_CONTEXT_PROCESSORS</code>", "<code>TEMPLATES = [\n{\n    'BACKEND': 'django.template.backends.django.DjangoTemplates',\n    'DIRS': [],\n    'APP_DIRS': True,\n    'OPTIONS': {\n        'context_processors': [\n            #here add your context Processors\n            'django.template.context_processors.media',\n        ],\n    },\n},\n]\n</code>", "<code>media context processor</code>", "<code>RequestContext</code>", "<code>MEDIA_URL</code>", "<code>template_name.html</code>", "<code>&lt;p&gt;&lt;img src=\"{{ MEDIA_URL }}/image_001.jpeg\"/&gt;&lt;/p&gt;\n</code>", "<code> if settings.DEBUG:\n    urlpatterns += staticfiles_urlpatterns()\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</code>"], "path": "stack.django"}, {"tags": ["python", "decorator"], "creation_date": 1233182102, "body_markdown": "While I like to think of myself as a reasonably competent Python coder, one aspect of the language I&#39;ve never been able to grok is decorators.\r\n\r\nI know what they are (superficially), I&#39;ve read tutorials, examples, questions on Stack Overflow, and I understand the syntax, can write my own, occasionally use @classmethod and @staticmethod, but it never occurs to me to use a decorator to solve a problem in my own Python code.  I never encounter a problem where I think, &quot;Hmm...this looks like a job for a decorator!&quot;\r\n\r\nSo, I&#39;m wondering if you guys might offer some examples of where you&#39;ve used decorators in your own programs, and hopefully I&#39;ll have an &quot;A-ha!&quot; moment and *get* them.", "last_edit_date": 1404729135, "up_vote_count": 287, "link": "https://stackoverflow.com/questions/489720/what-are-some-common-uses-for-python-decorators", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1233182294, "answer_id": 489735, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1233182294, "body_markdown": "I use them mainly for debugging (wrapper around a function that prints its arguments and result) and verification (e.g. to check if an argument is of correct type or, in the case of web application, if the user has sufficient privileges to call a particular method)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1233182509, "answer_id": 489754, "path": "stack.django.answer", "score": 43, "up_vote_count": 43, "is_accepted": false, "last_activity_date": 1233182846, "last_edit_date": 1495542367, "body_markdown": "Decorators are used for anything that you want to transparently &quot;wrap&quot; with additional functionality.\r\n\r\nDjango uses them for wrapping [&quot;login required&quot; functionality on view functions][1], as well as for [registering filter functions][2].\r\n\r\nYou can use class decorators for [adding named logs to classes][3].\r\n\r\nAny sufficiently generic functionality that you can &quot;tack on&quot; to an existing class or function&#39;s behavior is fair game for decoration.\r\n\r\nThere&#39;s also a [discussion of use cases on the Python-Dev newsgroup][4] pointed to by [PEP 318 -- Decorators for Functions and Methods][5].\r\n\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/topics/auth/?from=olddocs#the-login-required-decorator\r\n  [2]: http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#registering-custom-filters\r\n  [3]: https://stackoverflow.com/questions/401277/naming-python-loggers#402471\r\n  [4]: http://mail.python.org/pipermail/python-dev/2004-April/044132.html\r\n  [5]: http://www.python.org/dev/peps/pep-0318/#background"}, {"tags": [], "down_vote_count": 0, "creation_date": 1233183144, "answer_id": 489786, "path": "stack.django.answer", "score": 21, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1233183144, "body_markdown": "The Twisted library uses decorators combined with generators to give the illusion that an asynchronous function is synchronous.  For example:\r\n\r\n    @inlineCallbacks\r\n    def asyncf():\r\n        doStuff()\r\n        yield someAsynchronousCall()\r\n        doStuff()\r\n        yield someAsynchronousCall()\r\n        doStuff()\r\n\r\nUsing this, code that would have been broken up into a ton of little callback functions can be written quite naturally as a single block, making it a lot easier to understand and maintain.\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1233185389, "answer_id": 489888, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1233185389, "body_markdown": "I&#39;ve actually recently had one of those &quot;A-ha!&quot; moments, as you call them, and used a decorator to enable me to profile decorated functions/methods only. It&#39;s the profile_func decorator in [this file][1], the output of which can be viewed in [KCacheGrind][2]. Very useful indeed.\r\n\r\n\r\n  [1]: https://translate.svn.sourceforge.net/svnroot/translate/src/trunk/virtaal/devsupport/profiling.py\r\n  [2]: http://kcachegrind.sourceforge.net/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1233186001, "answer_id": 489911, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1233207277, "last_edit_date": 1233207277, "body_markdown": "Decorators are used either to define a function&#39;s properties or as boilerplate that alters it; it&#39;s possible but counter-intuitive for them to return completely different functions.  Looking at the other responses here, it seems like one of the most common uses is to limit the scope of some other process - be it logging, profiling, security checks, etc.\r\n\r\nCherryPy uses object-dispatching to match URLs to objects and, eventually, methods.  Decorators on those methods signal whether or not CherryPy is even *allowed* to use those methods.  For example, adapted from [the tutorial](http://www.cherrypy.org/wiki/CherryPyTutorial):\r\n\r\n    class HelloWorld:\r\n        \r\n        ...\r\n        \r\n        def secret(self):\r\n            return &quot;You shouldn&#39;t be here.&quot;\r\n        \r\n        @cherrypy.expose\r\n        def index(self):\r\n            return &quot;Hello world!&quot;\r\n    \r\n    cherrypy.quickstart(HelloWorld())\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1233186571, "answer_id": 489938, "path": "stack.django.answer", "score": 62, "up_vote_count": 62, "is_accepted": false, "last_activity_date": 1445689324, "last_edit_date": 1445689324, "body_markdown": "I use decorators for type checking parameters which are passed to my Python methods via some RMI. So instead of repeating the same parameter counting, exception-raising mumbo-jumbo again and again\r\n\r\n    def myMethod(ID, name):\r\n        if not (myIsType(ID, &#39;uint&#39;) and myIsType(name, &#39;utf8string&#39;)):\r\n            raise BlaBlaException() ...\r\n\r\nI just declare\r\n\r\n    @accepts(uint, utf8string)\r\n    def myMethod(ID, name):\r\n        ...\r\n\r\nand accepts() does all the work for me."}, {"tags": [], "down_vote_count": 0, "creation_date": 1233187596, "answer_id": 489983, "path": "stack.django.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1233187596, "body_markdown": "For nosetests, you can write a decorator that supplies a unit test function or method with several sets of parameters:\r\n\r\n    @parameters(\r\n       (2, 4, 6),\r\n       (5, 6, 11),\r\n    )\r\n    def test_add(a, b, expected):\r\n        assert a + b == expected\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1233190520, "answer_id": 490090, "path": "stack.django.answer", "score": 91, "up_vote_count": 91, "is_accepted": false, "last_activity_date": 1356222716, "last_edit_date": 1356222716, "body_markdown": "I&#39;ve used them for synchronization.\r\n\r\n    def synchronized(lock):\r\n        &quot;&quot;&quot; Synchronization decorator &quot;&quot;&quot;\r\n        def wrap(f):\r\n            def newFunction(*args, **kw):\r\n                lock.acquire()\r\n                try:\r\n                    return f(*args, **kw)\r\n                finally:\r\n                    lock.release()\r\n            return newFunction\r\n        return wrap\r\n\r\nAs pointed out in the comments, since Python 2.5 you can use a [`with`](http://docs.python.org/2/reference/compound_stmts.html#with) statement in conjunction with a  [`threading.Lock`](http://docs.python.org/2/library/threading.html#threading.Lock) (or [`multiprocessing.Lock`](http://docs.python.org/2/library/multiprocessing.html#multiprocessing.Lock) since version 2.6) object to simplify the decorator&#39;s implementation to just:\r\n\r\n    def synchronized(lock):\r\n        &quot;&quot;&quot; Synchronization decorator &quot;&quot;&quot;\r\n        def wrap(f):\r\n            def newFunction(*args, **kw):\r\n                with lock:\r\n                    return f(*args, **kw)\r\n            return newFunction\r\n        return wrap\r\n\r\nRegardless, you then use it like this:\r\n\r\n    import threading\r\n    lock = threading.Lock()\r\n    \r\n    @synchronized(lock)\r\n    def do_something():\r\n      # etc\r\n    \r\n    @synchronzied(lock)\r\n    def do_something_else():\r\n      # etc\r\n\r\nBasically it just puts `lock.acquire()` / `lock.release()` on either side of the function call.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1233194051, "answer_id": 490228, "path": "stack.django.answer", "score": 107, "up_vote_count": 107, "is_accepted": false, "last_activity_date": 1233194051, "body_markdown": "I use decorators mainly for timing purposes\r\n\r\n    def time_dec(func):\r\n\r\n      def wrapper(*arg):\r\n          t = time.clock()\r\n          res = func(*arg)\r\n          print func.func_name, time.clock()-t\r\n          return res\r\n\r\n      return wrapper\r\n\r\n\r\n    @time_dec\r\n    def myFunction(n):\r\n        ..."}, {"tags": [], "down_vote_count": 0, "creation_date": 1233213327, "answer_id": 490745, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1404729337, "last_edit_date": 1404729337, "body_markdown": "I used them recently, while working on social networking web application. For Community/Groups, I was supposed to give membership authorization to create new discussion and reply to a message you have to be the member of that particular group. So, I wrote a decorator `@membership_required` and put that where I required in my view."}, {"tags": [], "down_vote_count": 0, "creation_date": 1252369178, "answer_id": 1391392, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1252369178, "body_markdown": "There are a number of suggested usages and snippets at the [Python wiki][1].\r\n\r\n\r\n  [1]: http://wiki.python.org/moin/PythonDecoratorLibrary &quot;PythonDecoratorLibrary&quot;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1256542190, "answer_id": 1623489, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1256542190, "body_markdown": "I am using the following decorator for making a function threadsafe. It makes the code more readable. It is almost similar to the one proposed by John Fouhy but the difference is that one work on a single function and that there is no need to create a lock object explicitely. \r\n\r\n    def threadsafe_function(fn):\r\n        &quot;&quot;&quot;decorator making sure that the decorated function is thread safe&quot;&quot;&quot;\r\n        lock = threading.Lock()\r\n        def new(*args, **kwargs):\r\n            lock.acquire()\r\n            try:\r\n                r = fn(*args, **kwargs)\r\n            except Exception as e:\r\n                raise e\r\n            finally:\r\n                lock.release()\r\n            return r\r\n        return new\r\n\r\n    class X:\r\n        var = 0\r\n\r\n        @threadsafe_function     \r\n        def inc_var(self):\r\n            X.var += 1    \r\n            return X.var\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1344591969, "answer_id": 11899130, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1344591969, "body_markdown": "I use this decorator to fix parameter\r\n\r\n    def fill_it(arg):\r\n        if isinstance(arg, int):\r\n            return &quot;wan&quot; + str(arg)\r\n        else:\r\n            try:\r\n                # number present as string\r\n                if str(int(arg)) == arg:\r\n                    return &quot;wan&quot; + arg\r\n                else:\r\n                    # This should never happened\r\n                    raise Exception(&quot;I dont know this &quot; + arg)\r\n                    print &quot;What arg?&quot;\r\n            except ValueError, e:\r\n                return arg\r\n    \r\n    def fill_wanname(func):\r\n        def wrapper(arg):\r\n            filled = fill_it(arg)\r\n            return func(filled)\r\n        return wrapper\r\n    \r\n    @fill_wanname\r\n    def get_iface_of(wanname):\r\n        global __iface_config__\r\n        return __iface_config__[wanname][&#39;iface&#39;]\r\n\r\n\r\nthis written when I refactor some functions need to passed argument &quot;wanN&quot; but in my old codes, I passed N or &#39;N&#39; only"}, {"tags": [], "down_vote_count": 2, "creation_date": 1345675628, "answer_id": 12082434, "path": "stack.django.answer", "score": 0, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1345675628, "body_markdown": "Decorator can be used to easily create function method variables.\r\n\r\n\r\n    def static_var(varname, value):\r\n        &#39;&#39;&#39;\r\n        Decorator to create a static variable for the specified function\r\n        @param varname: static variable name\r\n        @param value: initial value for the variable\r\n        &#39;&#39;&#39;\r\n        def decorate(func):\r\n            setattr(func, varname, value)\r\n            return func\r\n        return decorate\r\n\r\n    @static_var(&quot;count&quot;, 0)\r\n    def mainCallCount():\r\n        mainCallCount.count += 1\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1377183915, "answer_id": 18384228, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1377266145, "last_edit_date": 1377266145, "body_markdown": "One obvious use is for logging, of course:\r\n\r\n    import functools\r\n\r\n    def log(logger, level=&#39;info&#39;):\r\n        def log_decorator(fn):\r\n            @functools.wraps(fn)\r\n            def wrapper(*a, **kwa):\r\n                getattr(logger, level)(fn.__name__)\r\n                return fn(*a, **kwa)\r\n            return wrapper\r\n        return log_decorator\r\n\r\n    # later that day ...\r\n    @log(logging.getLogger(&#39;main&#39;), level=&#39;warning&#39;)\r\n    def potentially_dangerous_function(times):\r\n        for _ in xrange(times): rockets.get_rocket(NUCLEAR=True).fire()\r\n"}], "title": "What are some common uses for Python decorators?", "view_count": 54300, "answer_count": 15, "code_snippet": ["<code>def time_dec(func):\n\n  def wrapper(*arg):\n      t = time.clock()\n      res = func(*arg)\n      print func.func_name, time.clock()-t\n      return res\n\n  return wrapper\n\n\n@time_dec\ndef myFunction(n):\n    ...\n</code>", "<code>time.clock()</code>", "<code>time.time()</code>", "<code>myFunction</code>", "<code>def synchronized(lock):\n    \"\"\" Synchronization decorator \"\"\"\n    def wrap(f):\n        def newFunction(*args, **kw):\n            lock.acquire()\n            try:\n                return f(*args, **kw)\n            finally:\n                lock.release()\n        return newFunction\n    return wrap\n</code>", "<code>with</code>", "<code>threading.Lock</code>", "<code>multiprocessing.Lock</code>", "<code>def synchronized(lock):\n    \"\"\" Synchronization decorator \"\"\"\n    def wrap(f):\n        def newFunction(*args, **kw):\n            with lock:\n                return f(*args, **kw)\n        return newFunction\n    return wrap\n</code>", "<code>import threading\nlock = threading.Lock()\n\n@synchronized(lock)\ndef do_something():\n  # etc\n\n@synchronzied(lock)\ndef do_something_else():\n  # etc\n</code>", "<code>lock.acquire()</code>", "<code>lock.release()</code>", "<code>def myMethod(ID, name):\n    if not (myIsType(ID, 'uint') and myIsType(name, 'utf8string')):\n        raise BlaBlaException() ...\n</code>", "<code>@accepts(uint, utf8string)\ndef myMethod(ID, name):\n    ...\n</code>", "<code>@accepts</code>", "<code>@inlineCallbacks\ndef asyncf():\n    doStuff()\n    yield someAsynchronousCall()\n    doStuff()\n    yield someAsynchronousCall()\n    doStuff()\n</code>", "<code>@parameters(\n   (2, 4, 6),\n   (5, 6, 11),\n)\ndef test_add(a, b, expected):\n    assert a + b == expected\n</code>", "<code>import functools\n\ndef log(logger, level='info'):\n    def log_decorator(fn):\n        @functools.wraps(fn)\n        def wrapper(*a, **kwa):\n            getattr(logger, level)(fn.__name__)\n            return fn(*a, **kwa)\n        return wrapper\n    return log_decorator\n\n# later that day ...\n@log(logging.getLogger('main'), level='warning')\ndef potentially_dangerous_function(times):\n    for _ in xrange(times): rockets.get_rocket(NUCLEAR=True).fire()\n</code>", "<code>def threadsafe_function(fn):\n    \"\"\"decorator making sure that the decorated function is thread safe\"\"\"\n    lock = threading.Lock()\n    def new(*args, **kwargs):\n        lock.acquire()\n        try:\n            r = fn(*args, **kwargs)\n        except Exception as e:\n            raise e\n        finally:\n            lock.release()\n        return r\n    return new\n\nclass X:\n    var = 0\n\n    @threadsafe_function     \n    def inc_var(self):\n        X.var += 1    \n        return X.var\n</code>", "<code>class HelloWorld:\n\n    ...\n\n    def secret(self):\n        return \"You shouldn't be here.\"\n\n    @cherrypy.expose\n    def index(self):\n        return \"Hello world!\"\n\ncherrypy.quickstart(HelloWorld())\n</code>", "<code>@membership_required</code>", "<code>def fill_it(arg):\n    if isinstance(arg, int):\n        return \"wan\" + str(arg)\n    else:\n        try:\n            # number present as string\n            if str(int(arg)) == arg:\n                return \"wan\" + arg\n            else:\n                # This should never happened\n                raise Exception(\"I dont know this \" + arg)\n                print \"What arg?\"\n        except ValueError, e:\n            return arg\n\ndef fill_wanname(func):\n    def wrapper(arg):\n        filled = fill_it(arg)\n        return func(filled)\n    return wrapper\n\n@fill_wanname\ndef get_iface_of(wanname):\n    global __iface_config__\n    return __iface_config__[wanname]['iface']\n</code>", "<code>def static_var(varname, value):\n    '''\n    Decorator to create a static variable for the specified function\n    @param varname: static variable name\n    @param value: initial value for the variable\n    '''\n    def decorate(func):\n        setattr(func, varname, value)\n        return func\n    return decorate\n\n@static_var(\"count\", 0)\ndef mainCallCount():\n    mainCallCount.count += 1\n</code>"], "path": "stack.django"}, {"tags": ["javascript", "django", "django-templates", "angularjs"], "creation_date": 1322517348, "body_markdown": "I want to use AngularJS with Django however they both use `{{ }}` as their template tags.  Is there an easy way to change one of the two to use some other custom templating tag?", "last_edit_date": 1331027604, "up_vote_count": 285, "link": "https://stackoverflow.com/questions/8302928/angularjs-with-django-conflicting-template-tags", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1322533618, "answer_id": 8305104, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1382515972, "last_edit_date": 1382515972, "body_markdown": "You can tell Django to output `{{` and `}}`, as well as other reserved template strings by using the [`{% templatetag %}`](https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#templatetag) tag.\r\n\r\nFor instance, using `{% templatetag openvariable %}` would output `{{`."}, {"tags": [], "down_vote_count": 0, "creation_date": 1323481903, "answer_id": 8453771, "path": "stack.django.answer", "score": 26, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1323481903, "body_markdown": "So I got some great help in the Angular IRC channel today.  It turns out you can change Angular&#39;s template tags very easily.  The necessary snippets below should be included after your angular include (the given example appears on their [mailing lists][1] and would use `(())` as the new template tags, substitute for your own):\r\n\r\n    angular.markup(&#39;(())&#39;, function(text, textNode, parentElement){\r\n      if (parentElement[0].nodeName.toLowerCase() == &#39;script&#39;) return;\r\n      text = text.replace(/\\(\\(/g,&#39;{{&#39;).replace(/\\)\\)/g, &#39;}}&#39;);\r\n      textNode.text(text);\r\n      return angular.markup(&#39;{{}}&#39;).call(this, text, textNode, parentElement);\r\n    });\r\n    \r\n    angular.attrMarkup(&#39;(())&#39;, function(value, name, element){\r\n        value = value.replace(/\\(\\(/g,&#39;{{&#39;).replace(/\\)\\)/, &#39;}}&#39;);\r\n        element[0].setAttribute(name, value);\r\n        return angular.attrMarkup(&#39;{{}}&#39;).call(this, value, name, element);\r\n    });\r\n\r\nAlso, I was pointed to an upcoming enhancement that will expose `startSymbol` and `endSymbol` properties that can be set to whatever tags you desire.\r\n\r\n  [1]: https://groups.google.com/forum/?hl=en&amp;pli=1#!searchin/angular/markup/angular/48wXpKVYwII/kOTkDhok4bcJ"}, {"tags": [], "down_vote_count": 0, "creation_date": 1331151987, "answer_id": 9608539, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1366882198, "last_edit_date": 1366882198, "body_markdown": "I vote against using double parentheses (()) as template tag. It may work well as long as no function call is involved but when tried the following\r\n\r\n    ng:disabled=(($invalidWidgets.visible()))\r\n\r\nwith Firefox (10.0.2) on Mac I got a terribly long error instead of the intended logic. &lt;[]&gt; went well for me, at least up until now.\r\n\r\n**Edit 2012-03-29:**\r\nPlease note that $invalidWidgets is deprecated. However I&#39;d still use another wrapper than double braces. For any angular version higher than 0.10.7 (I guess) you could change the wrapper a lot easier in your app / module definition:\r\n\r\n    angular.module(&#39;YourAppName&#39;, [], function ($interpolateProvider) {\r\n        $interpolateProvider.startSymbol(&#39;&lt;[&#39;);\r\n        $interpolateProvider.endSymbol(&#39;]&gt;&#39;);\r\n    }); \r\n\r\n[API docs](http://docs.angularjs.org/api/ng.$interpolateProvider)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1338366607, "answer_id": 10812653, "path": "stack.django.answer", "score": 110, "up_vote_count": 110, "is_accepted": false, "last_activity_date": 1505601554, "last_edit_date": 1505601554, "body_markdown": "you can maybe try [verbatim](https://docs.djangoproject.com/en/1.11/ref/templates/builtins/#verbatim) Django template tag \r\nand use it like this :\r\n\r\n    \r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n    {% verbatim %}\r\n    &lt;div ng-app=&quot;&quot;&gt;\r\n        &lt;p&gt;10 is {{ 5 + 5 }}&lt;/p&gt;\r\n    &lt;/div&gt;\r\n    {% endverbatim %}\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1340135754, "answer_id": 11108407, "path": "stack.django.answer", "score": 290, "up_vote_count": 291, "is_accepted": true, "last_activity_date": 1354247256, "last_edit_date": 1354247256, "body_markdown": "For Angular 1.0 you should use the $interpolateProvider apis to configure the interpolation symbols: [http://docs.angularjs.org/api/ng.$interpolateProvider](http://docs.angularjs.org/api/ng.$interpolateProvider).\r\n\r\nSomething like this should do the trick:\r\n\r\n    myModule.config(function($interpolateProvider) {\r\n      $interpolateProvider.startSymbol(&#39;{[{&#39;);\r\n      $interpolateProvider.endSymbol(&#39;}]}&#39;);\r\n    });\r\n\r\nKeep in mind two things:\r\n\r\n- mixing server-side and client-side templates is rarely a good idea and should be used with caution. The main issues are: maintainability  (hard to read) and security (double interpolation could expose a new security vector - e.g. while escaping of serverside and clientside templating by themselves might be secure, their combination might not be).\r\n- if you start using third-party directives (components) that use `{{ }}` in their templates then your configuration will break them. ([fix pending][1])\r\n\r\nWhile there is nothing we can do about the first issue, except for warning people, we do need to address the second issue.\r\n\r\n\r\n  [1]: https://github.com/angular/angular.js/pull/1256"}, {"tags": [], "down_vote_count": 1, "creation_date": 1345770091, "answer_id": 12101990, "path": "stack.django.answer", "score": 29, "up_vote_count": 30, "is_accepted": false, "last_activity_date": 1432103122, "last_edit_date": 1432103122, "body_markdown": "We created a *very* simple filter in Django &#39;ng&#39; that makes it easy to mix the two:\r\n\r\nfoo.html:\r\n\r\n    ...\r\n    &lt;div&gt;\r\n      {{ django_context_var }}\r\n      {{ &#39;angularScopeVar&#39; | ng }}\r\n      {{ &#39;angularScopeFunction()&#39; | ng }}\r\n    &lt;/div&gt;\r\n    ...\r\n\r\nThe `ng` filter looks like this:\r\n\r\n    from django import template\r\n    from django.utils import safestring\r\n\r\n    register = template.Library()\r\n\r\n\r\n    @register.filter(name=&#39;ng&#39;)\r\n    def Angularify(value):\r\n      return safestring.mark_safe(&#39;{{%s}}&#39; % value)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1352637294, "answer_id": 13331170, "path": "stack.django.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1389549285, "last_edit_date": 1389549285, "body_markdown": "I found the code below helpful. I found the code here: http://djangosnippets.org/snippets/2787/\r\n\r\n    &quot;&quot;&quot;\r\n    filename: angularjs.py\r\n\r\n    Usage:\r\n        {% ng Some.angular.scope.content %}\r\n\t\r\n    e.g.\r\n        {% load angularjs %}\r\n        &lt;div ng-init=&quot;yourName = &#39;foobar&#39;&quot;&gt;\r\n            &lt;p&gt;{% ng yourName %}&lt;/p&gt;\r\n        &lt;/div&gt;\r\n    &quot;&quot;&quot;\r\n\r\n    from django import template\r\n\r\n    register = template.Library()\r\n\r\n    class AngularJS(template.Node):\r\n        def __init__(self, bits):\r\n            self.ng = bits\r\n\r\n        def render(self, ctx):\r\n            return &quot;{{%s}}&quot; % &quot; &quot;.join(self.ng[1:])\r\n\r\n    def do_angular(parser, token):\r\n        bits = token.split_contents()\r\n        return AngularJS(bits)\r\n\r\n    register.tag(&#39;ng&#39;, do_angular)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1359987360, "answer_id": 14688581, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1359987360, "body_markdown": "If you use django 1.5 and newer use:\r\n\r\n      {% verbatim %}\r\n        {{if dying}}Still alive.{{/if}}\r\n      {% endverbatim %}\r\n\r\nIf you are stuck with django 1.2 on appengine extend the django syntax with the verbatim template command like this ...\r\n\r\n    from django import template\r\n    \r\n    register = template.Library()\r\n    \r\n    class VerbatimNode(template.Node):\r\n    \r\n        def __init__(self, text):\r\n            self.text = text\r\n    \r\n        def render(self, context):\r\n            return self.text\r\n    \r\n    @register.tag\r\n    def verbatim(parser, token):\r\n        text = []\r\n        while 1:\r\n            token = parser.tokens.pop(0)\r\n            if token.contents == &#39;endverbatim&#39;:\r\n                break\r\n            if token.token_type == template.TOKEN_VAR:\r\n                text.append(&#39;{{&#39;)\r\n            elif token.token_type == template.TOKEN_BLOCK:\r\n                text.append(&#39;{%&#39;)\r\n            text.append(token.contents)\r\n            if token.token_type == template.TOKEN_VAR:\r\n                text.append(&#39;}}&#39;)\r\n            elif token.token_type == template.TOKEN_BLOCK:\r\n                text.append(&#39;%}&#39;)\r\n        return VerbatimNode(&#39;&#39;.join(text))\r\n\r\nIn your file use:\r\n\r\n    from google.appengine.ext.webapp import template\r\n    template.register_template_library(&#39;utilities.verbatim_template_tag&#39;)\r\n\r\nSource:\r\nhttp://bamboobig.blogspot.co.at/2011/09/notebook-using-jquery-templates-in.html\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1369967973, "answer_id": 16848954, "path": "stack.django.answer", "score": 42, "up_vote_count": 42, "is_accepted": false, "last_activity_date": 1398271301, "last_edit_date": 1398271301, "body_markdown": "If you did separate sections of page properly then you can easily use angularjs tags in &quot;raw&quot; tag scope.\r\n\r\nIn jinja2\r\n\r\n    {% raw %}\r\n        // here you can write angularjs template tags.\r\n    {% endraw %}\r\n\r\nIn Django template (above 1.5)\r\n\r\n    {% verbatim %}    \r\n        // here you can write angularjs template tags.\r\n    {% endverbatim %}"}, {"tags": [], "down_vote_count": 0, "creation_date": 1372538535, "answer_id": 17384482, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1372538535, "body_markdown": "I would stick with a solution that uses both django tags {{}} as well angularjs {{}} with a either a verbatim section or templatetag. \r\n\r\nThat is simply because you can change the way angularjs works (as mentioned) via the $interpolateProvider.startSymbol $interpolateProvider.endSymbol but if you start to use other angularjs components like the ui-bootstrap you will find that some of the templates are ALREADY built with standard angularjs tags {{ }}. \r\n\r\nFor example look at https://github.com/angular-ui/bootstrap/blob/master/template/dialog/message.html. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1393512350, "answer_id": 22071872, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1393512350, "body_markdown": "You could always use ng-bind instead of {{ }} \r\nhttp://docs.angularjs.org/api/ng/directive/ngBind\r\n\r\n    &lt;span ng-bind=&quot;name&quot;&gt;&lt;/span&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1419786512, "answer_id": 27678653, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1419786512, "body_markdown": "For AngularJS v1.3.3 you should define your own template tags like this\r\n\r\n**AngularJS module**\r\n\r\n    angular.module(&#39;myapp&#39;, []).config(function($interpolateProvider) {\r\n        $interpolateProvider.startSymbol(&#39;{$&#39;);\r\n        $interpolateProvider.endSymbol(&#39;$}&#39;);\r\n    });\r\n\r\n**Webpage**\r\n\r\n    &lt;a&gt;{$ variable $}&lt;/a&gt; \r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1456076980, "answer_id": 35539651, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1456081504, "last_edit_date": 1456081504, "body_markdown": "If you do any server-side interpolation, the **only** correct way to do this is with `&lt;&gt;`\r\n\r\n    $interpolateProvider.startSymbol(&#39;&lt;{&#39;).endSymbol(&#39;}&gt;&#39;);\r\n\r\nAnything else is an XSS vector.\r\n\r\nThis is because any Angular delimiters which are not escaped by Django can be entered by the user into the interpolated string; if someone sets their username as &quot;{{evil_code}}&quot;, [Angular will happily run it](https://docs.angularjs.org/guide/security). If you use a [character than Django escapes](https://docs.djangoproject.com/es/1.9/ref/templates/builtins/#std:templatefilter-escape), however, this won&#39;t happen."}], "title": "AngularJS with Django - Conflicting template tags", "view_count": 69792, "answer_count": 13, "code_snippet": ["<code>{{ }}</code>", "<code>templates</code>", "<code>static</code>", "<code>myModule.config(function($interpolateProvider) {\n  $interpolateProvider.startSymbol('{[{');\n  $interpolateProvider.endSymbol('}]}');\n});\n</code>", "<code>{{ }}</code>", "<code>$interpolateProvider.startSymbol('{[{').endSymbol('}]}');</code>", "<code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js\"&gt;&lt;/script&gt;\r\n\r\n{% verbatim %}\r\n&lt;div ng-app=\"\"&gt;\r\n    &lt;p&gt;10 is {{ 5 + 5 }}&lt;/p&gt;\r\n&lt;/div&gt;\r\n{% endverbatim %}</code>", "<code>{% raw %}\n    // here you can write angularjs template tags.\n{% endraw %}\n</code>", "<code>{% verbatim %}    \n    // here you can write angularjs template tags.\n{% endverbatim %}\n</code>", "<code>...\n&lt;div&gt;\n  {{ django_context_var }}\n  {{ 'angularScopeVar' | ng }}\n  {{ 'angularScopeFunction()' | ng }}\n&lt;/div&gt;\n...\n</code>", "<code>ng</code>", "<code>from django import template\nfrom django.utils import safestring\n\nregister = template.Library()\n\n\n@register.filter(name='ng')\ndef Angularify(value):\n  return safestring.mark_safe('{{%s}}' % value)\n</code>", "<code>(())</code>", "<code>angular.markup('(())', function(text, textNode, parentElement){\n  if (parentElement[0].nodeName.toLowerCase() == 'script') return;\n  text = text.replace(/\\(\\(/g,'{{').replace(/\\)\\)/g, '}}');\n  textNode.text(text);\n  return angular.markup('{{}}').call(this, text, textNode, parentElement);\n});\n\nangular.attrMarkup('(())', function(value, name, element){\n    value = value.replace(/\\(\\(/g,'{{').replace(/\\)\\)/, '}}');\n    element[0].setAttribute(name, value);\n    return angular.attrMarkup('{{}}').call(this, value, name, element);\n});\n</code>", "<code>startSymbol</code>", "<code>endSymbol</code>", "<code>ng:disabled=(($invalidWidgets.visible()))\n</code>", "<code>angular.module('YourAppName', [], function ($interpolateProvider) {\n    $interpolateProvider.startSymbol('&lt;[');\n    $interpolateProvider.endSymbol(']&gt;');\n}); \n</code>", "<code>(())</code>", "<code>\"\"\"\nfilename: angularjs.py\n\nUsage:\n    {% ng Some.angular.scope.content %}\n\ne.g.\n    {% load angularjs %}\n    &lt;div ng-init=\"yourName = 'foobar'\"&gt;\n        &lt;p&gt;{% ng yourName %}&lt;/p&gt;\n    &lt;/div&gt;\n\"\"\"\n\nfrom django import template\n\nregister = template.Library()\n\nclass AngularJS(template.Node):\n    def __init__(self, bits):\n        self.ng = bits\n\n    def render(self, ctx):\n        return \"{{%s}}\" % \" \".join(self.ng[1:])\n\ndef do_angular(parser, token):\n    bits = token.split_contents()\n    return AngularJS(bits)\n\nregister.tag('ng', do_angular)\n</code>", "<code>&lt;p&gt;{% ng location %}&lt;/p&gt;</code>", "<code>{{location}}</code>", "<code>&lt;span ng-bind=\"name\"&gt;&lt;/span&gt;\n</code>", "<code>  {% verbatim %}\n    {{if dying}}Still alive.{{/if}}\n  {% endverbatim %}\n</code>", "<code>from django import template\n\nregister = template.Library()\n\nclass VerbatimNode(template.Node):\n\n    def __init__(self, text):\n        self.text = text\n\n    def render(self, context):\n        return self.text\n\n@register.tag\ndef verbatim(parser, token):\n    text = []\n    while 1:\n        token = parser.tokens.pop(0)\n        if token.contents == 'endverbatim':\n            break\n        if token.token_type == template.TOKEN_VAR:\n            text.append('{{')\n        elif token.token_type == template.TOKEN_BLOCK:\n            text.append('{%')\n        text.append(token.contents)\n        if token.token_type == template.TOKEN_VAR:\n            text.append('}}')\n        elif token.token_type == template.TOKEN_BLOCK:\n            text.append('%}')\n    return VerbatimNode(''.join(text))\n</code>", "<code>from google.appengine.ext.webapp import template\ntemplate.register_template_library('utilities.verbatim_template_tag')\n</code>", "<code>from django import template</code>", "<code>from google.appengine._internal.django import template</code>", "<code>template.register_template_library('utilities.verbatim_template_tag')</code>", "<code>angular.module('myapp', []).config(function($interpolateProvider) {\n    $interpolateProvider.startSymbol('{$');\n    $interpolateProvider.endSymbol('$}');\n});\n</code>", "<code>&lt;a&gt;{$ variable $}&lt;/a&gt; \n</code>", "<code>{{</code>", "<code>}}</code>", "<code>{% templatetag %}</code>", "<code>{% templatetag openvariable %}</code>", "<code>{{</code>", "<code>&lt;&gt;</code>", "<code>$interpolateProvider.startSymbol('&lt;{').endSymbol('}&gt;');\n</code>"], "path": "stack.django"}, {"tags": ["django", "migration", "django-south"], "creation_date": 1303969787, "body_markdown": "Ok, so this seems like a really silly thing to ask, and I&#39;m sure I&#39;m missing something somewhere.\r\n\r\nHow do you perform a backwards migration using South on Django?\r\n\r\nSo I&#39;ve tweaked my models, created a migration with `schemamigration`, run the migration with `migrate`, and now I realise that&#39;s not quite what I wanted and I want it back the way before.\r\n\r\nShort of manually editing db tables and removing migration files, how should I go about rolling the migration back? I find references to backward migrations using South via Google, but have yet to find a solid code example for it.\r\n\r\nCan anyone help?", "last_edit_date": 1314371440, "up_vote_count": 209, "link": "https://stackoverflow.com/questions/5814190/backwards-migration-with-django-south", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1303971053, "answer_id": 5814364, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1303971053, "body_markdown": "Add a migration name at the end of the parameters:\r\n\r\n    ./manage.py migrate app-name 00xx-migration-name\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1303972551, "answer_id": 5814593, "path": "stack.django.answer", "score": 328, "up_vote_count": 328, "is_accepted": true, "last_activity_date": 1303972551, "body_markdown": "You need to figure out the number of the migration _just before_ the one you want to roll back.\r\n\r\nYour app should have a migrations directory, with files in it named like\r\n\r\n    0000_initial.py\r\n    0001_added_some_fields.py\r\n    0002_added_some_more_fields.py\r\n    0003_deleted_some_stuff.py\r\n\r\nNormally, when you run &lt;code&gt;./manage.py migrate your_app&lt;/code&gt;, South runs all new migrations, in order. (It looks at the database tables to decide which ones are &#39;new&#39;).\r\n\r\nHowever, you can also specify any migration by number, and South will migrate your database, *either forward or backward*, to take it to that point. So, with the example files above, if you have already migrated up to 0003, and you wanted to run 0003 in reverse (undoing it, effectively), you would run\r\n\r\n    ./manage.py migrate your_app 0002\r\n\r\nSouth would look at the database, realise that it has run 0003 already, and determine that it has to run the reverse migration for 0003 in order to get back to 0002."}, {"tags": [], "down_vote_count": 0, "creation_date": 1333738827, "answer_id": 10047989, "path": "stack.django.answer", "score": 217, "up_vote_count": 217, "is_accepted": false, "last_activity_date": 1333738827, "body_markdown": "Just in case someone (like me) wondered how to **migrate back from initial (0001)**:\r\n\r\n    django-admin.py migrate some_app zero\r\n\r\noutput:\r\n\r\n    Running migrations for some_app:\r\n     - Migrating backwards to zero state.\r\n     &lt; some_app:0001_initial\r\n\r\n&quot;zero&quot; is a special state before any migration.\r\n\r\nReference: http://south.aeracode.org/docs/commands.html"}], "title": "Backwards migration with Django South", "view_count": 65940, "answer_count": 3, "code_snippet": ["<code>schemamigration</code>", "<code>migrate</code>", "<code>0000_initial.py\n0001_added_some_fields.py\n0002_added_some_more_fields.py\n0003_deleted_some_stuff.py\n</code>", "<code>./manage.py migrate your_app</code>", "<code>./manage.py migrate your_app 0002\n</code>", "<code>django-admin.py migrate some_app zero\n</code>", "<code>Running migrations for some_app:\n - Migrating backwards to zero state.\n &lt; some_app:0001_initial\n</code>", "<code>migrate 0000</code>", "<code>migrate 0000</code>", "<code>0000</code>", "<code>./manage.py migrate app-name 00xx-migration-name\n</code>", "<code>00xx</code>"], "path": "stack.django"}, {"tags": ["python", "mysql", "pip"], "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1410859917, "answer_id": 25865271, "path": "stack.django.answer", "score": 368, "up_vote_count": 369, "is_accepted": true, "last_activity_date": 1508187020, "last_edit_date": 1508187020, "body_markdown": "It&#39;s easy to do, but hard to remember the correct spelling:\r\n\r\n    pip install mysqlclient\r\n\r\nIf you need 1.2.x versions (legacy Python only), use `pip install MySQL-python`\r\n\r\nNote: Some dependencies might have to be in place when running the above command. Some hints on how to install these on various platforms:\r\n\r\n## Ubuntu 14, Ubuntu 16, Debian 8.6 (jessie)\r\n\r\n    sudo apt-get install python-pip python-dev libmysqlclient-dev\r\n\r\n## Fedora 24:\r\n\r\n    sudo dnf install python python-devel mysql-devel redhat-rpm-config gcc\r\n\r\n## Mac OS\r\n\r\n    brew install mysql-connector-c\r\n\r\nif that fails, try\r\n\r\n    brew install mysql\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1410861681, "answer_id": 25865821, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1425523831, "last_edit_date": 1495540509, "body_markdown": "I had the same problem too.Follow these steps if you are on Windows.\r\nGo to:\r\n1.My Computer\r\n2.System Properties\r\n3.Advance System Settings\r\n4. Under the &quot;Advanced&quot; tab click the button that says &quot;Environment Variables&quot;\r\n5. Then under System Variables you have to add / change the following variables: PYTHONPATH and Path. Here is a paste of what my variables look like:\r\npython path: \r\n   \r\n\r\n    C:\\Python27;C:\\Python27\\Lib\\site-packages;C:\\Python27\\Lib;C:\\Python27\\DLLs;C:\\Python27\\Lib\\lib-tk;C:\\Python27\\Scripts\r\n\r\n\r\npath:\r\n\r\n    C:\\Program Files\\MySQL\\MySQL Utilities 1.3.5\\;C:\\Python27;C:\\Python27\\Lib\\site-packages;C:\\Python27\\Lib;C:\\Python27\\DLLs;C:\\Python27\\Lib\\lib-tk;C:\\Python27\\Scripts\r\n\r\n\r\n\r\nSee this [ link ][1] for reference\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/21440230/install-mysql-python-windows"}, {"tags": [], "down_vote_count": 0, "creation_date": 1426784722, "answer_id": 29150749, "path": "stack.django.answer", "score": 124, "up_vote_count": 124, "is_accepted": false, "last_activity_date": 1426784722, "body_markdown": "Starting from a fresh Ubuntu 14.04.2 system, these two commands were needed:\r\n\r\n     apt-get install python-dev libmysqlclient-dev\r\n     pip install MySQL-python\r\n\r\nJust doing the &quot;pip install&quot; by itself did not work.\r\n\r\nFrom http://codeinthehole.com/writing/how-to-set-up-mysql-for-python-on-ubuntu/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1447797323, "answer_id": 33767775, "path": "stack.django.answer", "score": 18, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1478491277, "last_edit_date": 1478491277, "body_markdown": "I had problems installing the 64-bit version of MySQLdb on Windows via Pip (problem compiling sources)  [32bit version installed ok]. Managed to install the compiled MySQLdb from the .whl file available from http://www.lfd.uci.edu/~gohlke/pythonlibs/  \r\n\r\nThe .whl file can then be installed via pip as document in https://pip.pypa.io/en/latest/user_guide/#installing-from-wheels\r\n\r\nFor example if you save in `C:/` the you can install via\r\n\r\n`pip install c:/MySQL_python-1.2.5-cp27-none-win_amd64.whl`\r\n\r\nFollow-up: if you have a 64bit version of Python installed, then you want to install the 64-bit AMD version of MySQLdb from the link above [i.e. even if you have a Intel processor]. If you instead try and install the 32-bit version, I think you get the unsupported wheel error in comments below. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1460973812, "answer_id": 36690867, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1460975903, "last_edit_date": 1460975903, "body_markdown": "If you are use Raspberry Pi [Raspbian OS]\r\n\r\nThere are need to be install pip command at first \r\n\r\n    apt-get install python-pip\r\n\r\nSo that just install Sequently\r\n\r\n    apt-get install python-dev libmysqlclient-dev\r\n\r\n    apt-get install python-pip\r\n\r\n    pip install MySQL-python"}, {"tags": [], "down_vote_count": 0, "creation_date": 1474880488, "answer_id": 39698621, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1474880488, "body_markdown": "I tried all the option but was not able to get it working on Redhat platform.\r\nI did the following to make it work:- \r\n\r\n    yum install MySQL-python -y\r\n\r\nOnce the package was installed was able to import module as follows in the interpreter:-\r\n\r\n    &gt;&gt;&gt; import MySQLdb\r\n    &gt;&gt;&gt; "}, {"tags": [], "down_vote_count": 1, "creation_date": 1475117653, "answer_id": 39760641, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1506689870, "last_edit_date": 1506689870, "body_markdown": "[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/RpwGZ.jpg\r\n\r\n\r\nYou can go to this [website](http://www.lfd.uci.edu/~gohlke/pythonlibs/#mysqlclient) to download the package."}, {"tags": [], "down_vote_count": 0, "creation_date": 1476888113, "answer_id": 40134634, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1476888449, "last_edit_date": 1476888449, "body_markdown": "The above answer is great, but there may be some problems when we using pip to install MySQL-python in **Windows**  \r\n\r\n  for example,It needs some files that are associated with **Visual Stdio** .One solution is  installing VS2008 or 2010\u2026\u2026Obviously,it cost too much.\r\n\r\n  Another way is the answer of  @bob90937 . I am here to do something to add.  \r\n\r\nwith http://www.lfd.uci.edu/~gohlke/pythonlibs, u can download many  Windows binaries of many scientific open-source extension packages for the official CPython distribution of the Python programming language.\r\n\r\n  Back to topic,we can choose the **MySQL-python(py2)** or **Mysqlclient(py3)**   and use *pip install &lt;filename&gt;*  to install. it gives us Great convenience! "}, {"tags": [], "down_vote_count": 0, "creation_date": 1489827732, "answer_id": 42872376, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1489827732, "body_markdown": "well this worked for me:\r\n\r\n    pip install mysqlclient\r\n\r\nthis is for python 3.x"}, {"tags": [], "down_vote_count": 0, "creation_date": 1494829394, "answer_id": 43972692, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1494829394, "body_markdown": "For Python3 I needed to do this:\r\n\r\n    python3 -m pip install MySQL"}, {"tags": [], "down_vote_count": 1, "creation_date": 1499011198, "answer_id": 44872688, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1499011198, "body_markdown": "First    \r\n\r\n    pip install pymysql\r\n\r\nThen put the code below into ___init___.py(projectname/__init__.py)\r\n\r\n    import pymysql\r\n    pymysql.install_as_MySQLdb()\r\n\r\nMy environment (python3.5,django1.10) and it work for me!\r\n\r\nHope help!!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1499872335, "answer_id": 45061569, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1499876879, "last_edit_date": 1499876879, "body_markdown": "If pip3 isn&#39;t working, you can try:\r\n\r\n    sudo apt install python3-mysqldb"}], "creation_date": 1410859917, "body_markdown": "How can I install the [MySQLdb][1] module for Python using pip?\r\n\r\n\r\n  [1]: http://mysql-python.sourceforge.net/MySQLdb.html", "title": "How to install Python MySQLdb module using pip?", "view_count": 318725, "up_vote_count": 216, "answer_count": 12, "link": "https://stackoverflow.com/questions/25865270/how-to-install-python-mysqldb-module-using-pip", "code_snippet": ["<code>pip install mysqlclient\n</code>", "<code>pip install MySQL-python</code>", "<code>sudo apt-get install python-pip python-dev libmysqlclient-dev\n</code>", "<code>sudo dnf install python python-devel mysql-devel redhat-rpm-config gcc\n</code>", "<code>brew install mysql-connector-c\n</code>", "<code>brew install mysql\n</code>", "<code>pip search mysql</code>", "<code>pip search mysqldb</code>", "<code> apt-get install python-dev libmysqlclient-dev\n pip install MySQL-python\n</code>", "<code>error: command 'x86_64-linux-gnu-gcc' failed with exit status 1</code>", "<code>sudo apt-get install build-essential</code>", "<code>C:/</code>", "<code>pip install c:/MySQL_python-1.2.5-cp27-none-win_amd64.whl</code>", "<code>pip install mysqlclient-1.3.7-cp27-none-win_amd64.whl</code>", "<code>whl</code>", "<code>c:/</code>", "<code>pip install c:/MySQL_python-1.2.5-cp27-none-win_amd64.whl</code>", "<code>pip install mysqlclient\n</code>", "<code>yum install MySQL-python -y\n</code>", "<code>&gt;&gt;&gt; import MySQLdb\n&gt;&gt;&gt; \n</code>", "<code>pip</code>", "<code>sudo dnf install python python-devel mysql-devel redhat-rpm-config gcc</code>", "<code>sudo pip install MySQL-python</code>", "<code>pip install pymysql\n</code>", "<code>import pymysql\npymysql.install_as_MySQLdb()\n</code>", "<code>C:\\Python27;C:\\Python27\\Lib\\site-packages;C:\\Python27\\Lib;C:\\Python27\\DLLs;C:\\Python27\\Lib\\lib-tk;C:\\Python27\\Scripts\n</code>", "<code>C:\\Program Files\\MySQL\\MySQL Utilities 1.3.5\\;C:\\Python27;C:\\Python27\\Lib\\site-packages;C:\\Python27\\Lib;C:\\Python27\\DLLs;C:\\Python27\\Lib\\lib-tk;C:\\Python27\\Scripts\n</code>", "<code>apt-get install python-pip\n</code>", "<code>apt-get install python-dev libmysqlclient-dev\n\napt-get install python-pip\n\npip install MySQL-python\n</code>", "<code>python3 -m pip install MySQL\n</code>", "<code>sudo apt install python3-mysqldb\n</code>"], "path": "stack.django"}, {"tags": ["mysql", "foreign-keys", "innodb"], "creation_date": 1223997529, "body_markdown": "In MySQL, how do I get a list of all foreign key constraints pointing to a particular table? a particular column? This is the same thing as [this Oracle question][1], but for MySQL.\r\n\r\n  [1]: https://stackoverflow.com/questions/85978/query-a-tables-foreign-key-relationships", "last_edit_date": 1495542891, "up_vote_count": 383, "link": "https://stackoverflow.com/questions/201621/how-do-i-see-all-foreign-keys-to-a-table-or-column", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1223997968, "answer_id": 201647, "path": "stack.django.answer", "score": 56, "up_vote_count": 57, "is_accepted": false, "last_activity_date": 1223997968, "body_markdown": "If you use InnoDB and defined FK&#39;s you could query the information_schema database e.g.:\r\n\r\n    SELECT * FROM information_schema.TABLE_CONSTRAINTS \r\n    WHERE information_schema.TABLE_CONSTRAINTS.CONSTRAINT_TYPE = &#39;FOREIGN KEY&#39; \r\n    AND information_schema.TABLE_CONSTRAINTS.TABLE_SCHEMA = &#39;myschema&#39;\r\n    AND information_schema.TABLE_CONSTRAINTS.TABLE_NAME = &#39;mytable&#39;;\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1223998508, "answer_id": 201676, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1223998508, "body_markdown": "The solution I came up with is fragile; it relies on django&#39;s naming convention for foreign keys.\r\n\r\n    USE information_schema;\r\n    tee mysql_output\r\n    SELECT * FROM TABLE_CONSTRAINTS WHERE CONSTRAINT_TYPE = &#39;FOREIGN KEY&#39; AND TABLE_SCHEMA = &#39;database_name&#39;;\r\n    notee\r\n\r\nThen, in the shell,\r\n\r\n    grep &#39;refs_tablename_id&#39; mysql_output\r\n"}, {"tags": [], "down_vote_count": 4, "creation_date": 1223998513, "answer_id": 201678, "path": "stack.django.answer", "score": 527, "up_vote_count": 531, "is_accepted": true, "last_activity_date": 1461771983, "last_edit_date": 1461771983, "body_markdown": "   \r\n**For a Table:**\r\n\r\n    SELECT \r\n      TABLE_NAME,COLUMN_NAME,CONSTRAINT_NAME, REFERENCED_TABLE_NAME,REFERENCED_COLUMN_NAME\r\n    FROM\r\n      INFORMATION_SCHEMA.KEY_COLUMN_USAGE\r\n    WHERE\r\n      REFERENCED_TABLE_SCHEMA = &#39;&lt;database&gt;&#39; AND\r\n      REFERENCED_TABLE_NAME = &#39;&lt;table&gt;&#39;;\r\n\r\n**For a Column:**\r\n\r\n    SELECT \r\n      TABLE_NAME,COLUMN_NAME,CONSTRAINT_NAME, REFERENCED_TABLE_NAME,REFERENCED_COLUMN_NAME\r\n    FROM\r\n      INFORMATION_SCHEMA.KEY_COLUMN_USAGE\r\n    WHERE\r\n      REFERENCED_TABLE_SCHEMA = &#39;&lt;database&gt;&#39; AND\r\n      REFERENCED_COLUMN_NAME = &#39;&lt;column&gt;&#39;;\r\n\r\nBasically, we changed REFERENCED_TABLE_NAME with REFERENCED_COLUMN_NAME in the where clause."}, {"tags": [], "down_vote_count": 0, "creation_date": 1341273581, "answer_id": 11302791, "path": "stack.django.answer", "score": 28, "up_vote_count": 28, "is_accepted": false, "last_activity_date": 1341273883, "last_edit_date": 1341273883, "body_markdown": "\r\nPosting on an old answer to add some useful information.\r\n\r\nI had a similar problem, but I also wanted to see the CONSTRAINT_TYPE along with the REFERENCED table and column names. So,\r\n\r\n1. To see all FKs in your table:\r\n\r\n        USE &#39;&lt;yourschema&gt;&#39;;\r\n\r\n        SELECT i.TABLE_NAME, i.CONSTRAINT_TYPE, i.CONSTRAINT_NAME, k.REFERENCED_TABLE_NAME, k.REFERENCED_COLUMN_NAME \r\n        FROM information_schema.TABLE_CONSTRAINTS i \r\n        LEFT JOIN information_schema.KEY_COLUMN_USAGE k ON i.CONSTRAINT_NAME = k.CONSTRAINT_NAME \r\n        WHERE i.CONSTRAINT_TYPE = &#39;FOREIGN KEY&#39; \r\n        AND i.TABLE_SCHEMA = DATABASE()\r\n        AND i.TABLE_NAME = &#39;&lt;yourtable&gt;&#39;;\r\n\r\n2. To see all the tables and FKs in your schema:\r\n\r\n        USE &#39;&lt;yourschema&gt;&#39;;\r\n\r\n        SELECT i.TABLE_NAME, i.CONSTRAINT_TYPE, i.CONSTRAINT_NAME, k.REFERENCED_TABLE_NAME, k.REFERENCED_COLUMN_NAME \r\n        FROM information_schema.TABLE_CONSTRAINTS i \r\n        LEFT JOIN information_schema.KEY_COLUMN_USAGE k ON i.CONSTRAINT_NAME = k.CONSTRAINT_NAME \r\n        WHERE i.CONSTRAINT_TYPE = &#39;FOREIGN KEY&#39; \r\n        AND i.TABLE_SCHEMA = DATABASE();\r\n\r\n3. To see all the FKs in your database:\r\n\r\n        SELECT i.TABLE_SCHEMA, i.TABLE_NAME, i.CONSTRAINT_TYPE, i.CONSTRAINT_NAME, k.REFERENCED_TABLE_NAME, k.REFERENCED_COLUMN_NAME \r\n        FROM information_schema.TABLE_CONSTRAINTS i \r\n        LEFT JOIN information_schema.KEY_COLUMN_USAGE k ON i.CONSTRAINT_NAME = k.CONSTRAINT_NAME \r\n        WHERE i.CONSTRAINT_TYPE = &#39;FOREIGN KEY&#39;;\r\n\r\n**Remember!**\r\n\r\nThis is using the InnoDB storage engine. If you can&#39;t seem to get any foreign keys to show up after adding them it&#39;s probably because your tables are using MyISAM. \r\n\r\nTo check:\r\n\r\n    SELECT * TABLE_NAME, ENGINE FROM information_schema.TABLES WHERE TABLE_SCHEMA = &#39;&lt;yourschema&gt;&#39;;\r\n\r\nTo fix, use this:\r\n\r\n    ALTER TABLE `&lt;yourtable&gt;` ENGINE=InnoDB;"}, {"tags": [], "down_vote_count": 15, "creation_date": 1370968052, "answer_id": 17049173, "path": "stack.django.answer", "score": 181, "up_vote_count": 196, "is_accepted": false, "last_activity_date": 1434309929, "last_edit_date": 1495540974, "body_markdown": "EDIT: As pointed out in the comments, this is not the correct answer to the OPs question, but it is useful to know this command. This question showed up in Google for what I was looking for, and figured I&#39;d leave this answer for the others to find.\r\n\r\n\r\n    SHOW CREATE TABLE `&lt;yourtable&gt;`;\r\n\r\nI found this answer here:\r\nhttps://stackoverflow.com/questions/4004205/mysql-show-constraints-on-tables-command\r\n\r\nI needed this way because I wanted to see how the FK functioned, rather than just see if it existed or not."}, {"tags": [], "down_vote_count": 0, "creation_date": 1371091039, "answer_id": 17078317, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1416573569, "last_edit_date": 1416573569, "body_markdown": "A quick way to list your FKs (Foreign Key references) using the  \r\n\r\n    KEY_COLUMN_USAGE view:\r\n    \r\n    SELECT CONCAT( table_name, &#39;.&#39;,\r\n    column_name, &#39; -&gt; &#39;,\r\n    referenced_table_name, &#39;.&#39;,\r\n    referenced_column_name ) AS list_of_fks\r\n    FROM information_schema.KEY_COLUMN_USAGE\r\n    WHERE REFERENCED_TABLE_SCHEMA = (your schema name here)\r\n    AND REFERENCED_TABLE_NAME is not null\r\n    ORDER BY TABLE_NAME, COLUMN_NAME;\r\n\r\nThis query does assume that the constraints and all referenced and referencing tables are in the same schema.\r\n\r\nAdd your own comment.\r\n\r\nSource: the official mysql manual.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1379327801, "answer_id": 18825955, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1379328297, "last_edit_date": 1379328297, "body_markdown": "This solution will not only display all relations but also the constraint name, which is required in some cases (e.g. drop contraint):\r\n\r\n    select\r\n        concat(table_name, &#39;.&#39;, column_name) as &#39;foreign key&#39;,\r\n        concat(referenced_table_name, &#39;.&#39;, referenced_column_name) as &#39;references&#39;,\r\n        constraint_name as &#39;constraint name&#39;\r\n    from\r\n        information_schema.key_column_usage\r\n    where\r\n        referenced_table_name is not null;\r\n     \r\n\r\nIf you want to check tables in a specific database, at the end of the query add the table name:\r\n\r\n    select\r\n        concat(table_name, &#39;.&#39;, column_name) as &#39;foreign key&#39;,\r\n        concat(referenced_table_name, &#39;.&#39;, referenced_column_name) as &#39;references&#39;,\r\n        constraint_name as &#39;constraint name&#39;\r\n    from\r\n        information_schema.key_column_usage\r\n    where\r\n        referenced_table_name is not null\r\n        and table_schema = &#39;database_name&#39;;\r\n\r\n\r\nLikewise, for a specific column name, add\r\n\r\n&gt; and table_name = &#39;table_name\r\n\r\nat the end of the query.\r\n\r\nInspired by this post [here][1]\r\n\r\n\r\n  [1]: http://www.binarytides.com/list-foreign-keys-in-mysql/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1386849744, "answer_id": 20543002, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1386849744, "body_markdown": "As an alternative to Node\u2019s answer, if you use InnoDB and defined FK\u2019s you could query the information_schema database e.g.:\r\n\r\n    SELECT CONSTRAINT_NAME, TABLE_NAME, REFERENCED_TABLE_NAME\r\n    FROM information_schema.REFERENTIAL_CONSTRAINTS\r\n    WHERE CONSTRAINT_SCHEMA = &#39;&lt;schema&gt;&#39;\r\n    AND TABLE_NAME = &#39;&lt;table&gt;&#39;\r\n \r\nfor foreign keys from &amp;lt;table&amp;gt;, or\r\n\r\n    SELECT CONSTRAINT_NAME, TABLE_NAME, REFERENCED_TABLE_NAME\r\n    FROM information_schema.REFERENTIAL_CONSTRAINTS\r\n    WHERE CONSTRAINT_SCHEMA = &#39;&lt;schema&gt;&#39;\r\n    AND REFERENCED_TABLE_NAME = &#39;&lt;table&gt;&#39;\r\n \r\nfor foreign keys to &amp;lt;table&amp;gt;\r\n\r\nYou can also get the UPDATE_RULE and DELETE_RULE if you want them."}, {"tags": [], "down_vote_count": 0, "creation_date": 1418614697, "answer_id": 27476989, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1418614697, "body_markdown": "To find all tables **containing a particular foreign key** such as `employee_id`\r\n\r\n    SELECT DISTINCT TABLE_NAME \r\n    FROM INFORMATION_SCHEMA.COLUMNS\r\n    WHERE COLUMN_NAME IN (&#39;employee_id&#39;)\r\n    AND TABLE_SCHEMA=&#39;table_name&#39;;\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1423180286, "answer_id": 28356242, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1423180286, "body_markdown": "Using REFERENCED_TABLE_NAME does not always work and can be a NULL value. The following query can work instead:\r\n\r\n    select * from INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = &#39;&lt;table&gt;&#39;;\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1502304002, "answer_id": 45598345, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1507674738, "last_edit_date": 1507674738, "body_markdown": "If you also want to get the name of the foreign key column:\r\n\r\n    SELECT i.TABLE_SCHEMA, i.TABLE_NAME, \r\n           i.CONSTRAINT_TYPE, i.CONSTRAINT_NAME, \r\n           k.COLUMN_NAME, k.REFERENCED_TABLE_NAME, k.REFERENCED_COLUMN_NAME \r\n      FROM information_schema.TABLE_CONSTRAINTS i \r\n      LEFT JOIN information_schema.KEY_COLUMN_USAGE k \r\n           ON i.CONSTRAINT_NAME = k.CONSTRAINT_NAME \r\n     WHERE i.TABLE_SCHEMA = &#39;&lt;TABLE_NAME&gt;&#39; AND i.CONSTRAINT_TYPE = &#39;FOREIGN KEY&#39; \r\n     ORDER BY i.TABLE_NAME;"}], "title": "How do I see all foreign keys to a table or column?", "view_count": 294400, "answer_count": 11, "code_snippet": ["<code>SELECT \n  TABLE_NAME,COLUMN_NAME,CONSTRAINT_NAME, REFERENCED_TABLE_NAME,REFERENCED_COLUMN_NAME\nFROM\n  INFORMATION_SCHEMA.KEY_COLUMN_USAGE\nWHERE\n  REFERENCED_TABLE_SCHEMA = '&lt;database&gt;' AND\n  REFERENCED_TABLE_NAME = '&lt;table&gt;';\n</code>", "<code>SELECT \n  TABLE_NAME,COLUMN_NAME,CONSTRAINT_NAME, REFERENCED_TABLE_NAME,REFERENCED_COLUMN_NAME\nFROM\n  INFORMATION_SCHEMA.KEY_COLUMN_USAGE\nWHERE\n  REFERENCED_TABLE_SCHEMA = '&lt;database&gt;' AND\n  REFERENCED_COLUMN_NAME = '&lt;column&gt;';\n</code>", "<code>where REFERENCED_TABLE_SCHEMA = 'mydatabase' and REFERENCED_TABLE_NAME = 'mytable'</code>", "<code>SHOW CREATE TABLE `&lt;yourtable&gt;`;\n</code>", "<code>&lt;yourtable&gt;</code>", "<code>&lt;yourtable&gt;</code>", "<code>display foreign keys mysql</code>", "<code>SELECT * FROM information_schema.TABLE_CONSTRAINTS \nWHERE information_schema.TABLE_CONSTRAINTS.CONSTRAINT_TYPE = 'FOREIGN KEY' \nAND information_schema.TABLE_CONSTRAINTS.TABLE_SCHEMA = 'myschema'\nAND information_schema.TABLE_CONSTRAINTS.TABLE_NAME = 'mytable';\n</code>", "<code>USE '&lt;yourschema&gt;';\n\nSELECT i.TABLE_NAME, i.CONSTRAINT_TYPE, i.CONSTRAINT_NAME, k.REFERENCED_TABLE_NAME, k.REFERENCED_COLUMN_NAME \nFROM information_schema.TABLE_CONSTRAINTS i \nLEFT JOIN information_schema.KEY_COLUMN_USAGE k ON i.CONSTRAINT_NAME = k.CONSTRAINT_NAME \nWHERE i.CONSTRAINT_TYPE = 'FOREIGN KEY' \nAND i.TABLE_SCHEMA = DATABASE()\nAND i.TABLE_NAME = '&lt;yourtable&gt;';\n</code>", "<code>USE '&lt;yourschema&gt;';\n\nSELECT i.TABLE_NAME, i.CONSTRAINT_TYPE, i.CONSTRAINT_NAME, k.REFERENCED_TABLE_NAME, k.REFERENCED_COLUMN_NAME \nFROM information_schema.TABLE_CONSTRAINTS i \nLEFT JOIN information_schema.KEY_COLUMN_USAGE k ON i.CONSTRAINT_NAME = k.CONSTRAINT_NAME \nWHERE i.CONSTRAINT_TYPE = 'FOREIGN KEY' \nAND i.TABLE_SCHEMA = DATABASE();\n</code>", "<code>SELECT i.TABLE_SCHEMA, i.TABLE_NAME, i.CONSTRAINT_TYPE, i.CONSTRAINT_NAME, k.REFERENCED_TABLE_NAME, k.REFERENCED_COLUMN_NAME \nFROM information_schema.TABLE_CONSTRAINTS i \nLEFT JOIN information_schema.KEY_COLUMN_USAGE k ON i.CONSTRAINT_NAME = k.CONSTRAINT_NAME \nWHERE i.CONSTRAINT_TYPE = 'FOREIGN KEY';\n</code>", "<code>SELECT * TABLE_NAME, ENGINE FROM information_schema.TABLES WHERE TABLE_SCHEMA = '&lt;yourschema&gt;';\n</code>", "<code>ALTER TABLE `&lt;yourtable&gt;` ENGINE=InnoDB;\n</code>", "<code>SELECT CONSTRAINT_NAME, TABLE_NAME, REFERENCED_TABLE_NAME\nFROM information_schema.REFERENTIAL_CONSTRAINTS\nWHERE CONSTRAINT_SCHEMA = '&lt;schema&gt;'\nAND TABLE_NAME = '&lt;table&gt;'\n</code>", "<code>SELECT CONSTRAINT_NAME, TABLE_NAME, REFERENCED_TABLE_NAME\nFROM information_schema.REFERENTIAL_CONSTRAINTS\nWHERE CONSTRAINT_SCHEMA = '&lt;schema&gt;'\nAND REFERENCED_TABLE_NAME = '&lt;table&gt;'\n</code>", "<code>select\n    concat(table_name, '.', column_name) as 'foreign key',\n    concat(referenced_table_name, '.', referenced_column_name) as 'references',\n    constraint_name as 'constraint name'\nfrom\n    information_schema.key_column_usage\nwhere\n    referenced_table_name is not null;\n</code>", "<code>select\n    concat(table_name, '.', column_name) as 'foreign key',\n    concat(referenced_table_name, '.', referenced_column_name) as 'references',\n    constraint_name as 'constraint name'\nfrom\n    information_schema.key_column_usage\nwhere\n    referenced_table_name is not null\n    and table_schema = 'database_name';\n</code>", "<code>KEY_COLUMN_USAGE view:\n\nSELECT CONCAT( table_name, '.',\ncolumn_name, ' -&gt; ',\nreferenced_table_name, '.',\nreferenced_column_name ) AS list_of_fks\nFROM information_schema.KEY_COLUMN_USAGE\nWHERE REFERENCED_TABLE_SCHEMA = (your schema name here)\nAND REFERENCED_TABLE_NAME is not null\nORDER BY TABLE_NAME, COLUMN_NAME;\n</code>", "<code>employee_id</code>", "<code>SELECT DISTINCT TABLE_NAME \nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE COLUMN_NAME IN ('employee_id')\nAND TABLE_SCHEMA='table_name';\n</code>", "<code>USE information_schema;\ntee mysql_output\nSELECT * FROM TABLE_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'FOREIGN KEY' AND TABLE_SCHEMA = 'database_name';\nnotee\n</code>", "<code>grep 'refs_tablename_id' mysql_output\n</code>", "<code>select * from INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '&lt;table&gt;';\n</code>", "<code>SELECT i.TABLE_SCHEMA, i.TABLE_NAME, \n       i.CONSTRAINT_TYPE, i.CONSTRAINT_NAME, \n       k.COLUMN_NAME, k.REFERENCED_TABLE_NAME, k.REFERENCED_COLUMN_NAME \n  FROM information_schema.TABLE_CONSTRAINTS i \n  LEFT JOIN information_schema.KEY_COLUMN_USAGE k \n       ON i.CONSTRAINT_NAME = k.CONSTRAINT_NAME \n WHERE i.TABLE_SCHEMA = '&lt;TABLE_NAME&gt;' AND i.CONSTRAINT_TYPE = 'FOREIGN KEY' \n ORDER BY i.TABLE_NAME;\n</code>"], "path": "stack.django"}, {"tags": ["mysql", "sql", "innodb"], "creation_date": 1286204365, "body_markdown": "I know I can issue an alter table individually to change the table storage from MyISAM to InnoDB.\r\n\r\nI am wondering if there is a way to quickly change all of them to InnoDB?", "last_edit_date": 1515998109, "up_vote_count": 200, "link": "https://stackoverflow.com/questions/3856435/how-to-convert-all-tables-from-myisam-into-innodb", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1286205217, "answer_id": 3856543, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1286205217, "body_markdown": "You could write a script to do it in your favourite scripting language. The script would do the following:\r\n\r\n&lt;ol&gt;&lt;li&gt;Issue &lt;code&gt;SHOW FULL TABLES&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;For each row returned, check that the second column says &lt;code&gt;&#39;BASE TABLE&#39;&lt;/code&gt; and not &lt;code&gt;&#39;VIEW&#39;&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;If it is not &lt;code&gt;&#39;VIEW&#39;&lt;/code&gt;, issue the appropriate &lt;code&gt;ALTER TABLE&lt;/code&gt; command.&lt;/li&gt;&lt;/ol&gt;"}, {"tags": [], "down_vote_count": 6, "creation_date": 1286211056, "answer_id": 3857366, "path": "stack.django.answer", "score": 135, "up_vote_count": 141, "is_accepted": true, "last_activity_date": 1419372486, "last_edit_date": 1419372486, "body_markdown": "    &lt;?php\r\n        // connect your database here first \r\n        // \r\n\r\n        // Actual code starts here \r\n\r\n        $sql = &quot;SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES\r\n            WHERE TABLE_SCHEMA = &#39;your_database_name&#39; \r\n            AND ENGINE = &#39;MyISAM&#39;&quot;;\r\n\r\n        $rs = mysql_query($sql);\r\n        \r\n        while($row = mysql_fetch_array($rs))\r\n        {\r\n        \t$tbl = $row[0];\r\n        \t$sql = &quot;ALTER TABLE `$tbl` ENGINE=INNODB&quot;;\r\n        \tmysql_query($sql);\r\n        }\r\n    ?&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1286213124, "answer_id": 3857604, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1332922705, "last_edit_date": 1332922705, "body_markdown": "You can execute this statement in the mysql command line tool:\r\n\r\n    echo &quot;SELECT concat(&#39;ALTER TABLE `&#39;,TABLE_NAME,&#39;` ENGINE=InnoDB;&#39;)\r\n    FROM Information_schema.TABLES \r\n    WHERE ENGINE != &#39;InnoDB&#39; AND TABLE_TYPE=&#39;BASE TABLE&#39; \r\n    AND TABLE_SCHEMA=&#39;name-of-database&#39;&quot; | mysql &gt; convert.sql\r\n\r\n\r\nYou may need to specify username and password using: mysql -u username -p\r\nThe result is an sql script that you can pipe back into mysql:\r\n\r\n    mysql name-of-database &lt; convert.sql\r\n\r\n\r\nReplace &quot;name-of-database&quot; in the above statement and command line."}, {"tags": [], "down_vote_count": 0, "creation_date": 1293824142, "answer_id": 4571967, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1293824142, "body_markdown": "    &lt;?php\r\n    \r\n      // connect your database here first\r\n    \r\n      mysql_connect(&#39;host&#39;, &#39;user&#39;, &#39;pass&#39;);\r\n    \r\n      $databases = mysql_query(&#39;SHOW databases&#39;);\r\n    \r\n      while($db = mysql_fetch_array($databases)) {\r\n        echo &quot;database =&gt; {$db[0]}\\n&quot;;\r\n        mysql_select_db($db[0]);\r\n    \r\n        $tables = mysql_query(&#39;SHOW tables&#39;);\r\n    \r\n        while($tbl = mysql_fetch_array($tables)) {\r\n          echo &quot;table =&gt; {$tbl[0]}\\n&quot;;\r\n          mysql_query(&quot;ALTER TABLE {$tbl[0]} ENGINE=MyISAM&quot;);\r\n        }\r\n      }\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1300233266, "answer_id": 5319446, "path": "stack.django.answer", "score": 17, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1330116354, "last_edit_date": 1330116354, "body_markdown": "Use this as a sql query in your phpMyAdmin\r\n\r\n    SELECT CONCAT(&#39;ALTER TABLE &#39;,table_schema,&#39;.&#39;,table_name,&#39; engine=InnoDB;&#39;) \r\n    FROM information_schema.tables \r\n    WHERE engine = &#39;MyISAM&#39;;\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1314450446, "answer_id": 7214751, "path": "stack.django.answer", "score": 20, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1314450446, "body_markdown": "In the scripts below, replace &amp;lt;username&amp;gt;, &amp;lt;password&amp;gt; and &amp;lt;schema&amp;gt; with your specific data.\r\n\r\nTo show the statements that you can copy-paste into a mysql client session type the following:\r\n\r\n    echo &#39;SHOW TABLES;&#39; \\\r\n     | mysql -u &lt;username&gt; --password=&lt;password&gt; -D &lt;schema&gt; \\\r\n     | awk &#39;!/^Tables_in_/ {print &quot;ALTER TABLE `&quot;$0&quot;` ENGINE = InnoDB;&quot;}&#39; \\\r\n     | column -t \\\r\n\r\nTo simply execute the change, use this:\r\n\r\n    echo &#39;SHOW TABLES;&#39; \\\r\n     | mysql -u &lt;username&gt; --password=&lt;password&gt; -D &lt;schema&gt; \\\r\n     | awk &#39;!/^Tables_in_/ {print &quot;ALTER TABLE `&quot;$0&quot;` ENGINE = InnoDB;&quot;}&#39; \\\r\n     | column -t \\\r\n     | mysql -u &lt;username&gt; --password=&lt;password&gt; -D &lt;schema&gt;\r\n\r\nCREDIT: This is a variation of what was outlined in [this article][1].\r\n\r\n\r\n  [1]: http://kevin.vanzonneveld.net/techblog/article/convert_all_tables_to_innodb_in_one_go/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1330477245, "answer_id": 9492183, "path": "stack.django.answer", "score": 451, "up_vote_count": 451, "is_accepted": false, "last_activity_date": 1471930366, "last_edit_date": 1471930366, "body_markdown": "Run this SQL statement (in the MySQL client, phpMyAdmin, or wherever) to retrieve all the MyISAM tables in your database.\r\n\r\nReplace value of the `name_of_your_db` variable with your database name.\r\n\r\n    SET @DATABASE_NAME = &#39;name_of_your_db&#39;;\r\n    \r\n    SELECT\tCONCAT(&#39;ALTER TABLE `&#39;, table_name, &#39;` ENGINE=InnoDB;&#39;) AS sql_statements\r\n    FROM\tinformation_schema.tables AS tb\r\n    WHERE\ttable_schema = @DATABASE_NAME\r\n    AND\t\t`ENGINE` = &#39;MyISAM&#39;\r\n    AND\t\t`TABLE_TYPE` = &#39;BASE TABLE&#39;\r\n    ORDER BY table_name DESC;\r\n\r\nThen, copy the output and run as a new SQL query."}, {"tags": [], "down_vote_count": 0, "creation_date": 1347344174, "answer_id": 12363766, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1347389449, "last_edit_date": 1347389449, "body_markdown": "From inside mysql, you could use search/replace using a text editor:\r\n\r\n    SELECT table_schema, table_name FROM INFORMATION_SCHEMA.TABLES WHERE engine = &#39;myisam&#39;;\r\n\r\nNote: You should probably ignore information_schema and mysql because &quot;The mysql and information_schema databases, that implement some of the MySQL internals, still use MyISAM. In particular, you cannot switch the grant tables to use InnoDB.&quot; ( http://dev.mysql.com/doc/refman/5.5/en/innodb-default-se.html )\r\n\r\nIn any case, note the tables to ignore and run:\r\n\r\n    SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE engine = &#39;myisam&#39;;\r\n\r\nNow just copy/paste that list into your text editor and search/replace &quot;|&quot; with &quot;ALTER TABLE&quot; etc.\r\n\r\nYou&#39;ll then have a list like this you can simply paste into your mysql terminal:\r\n\r\n    ALTER TABLE arth_commentmeta           ENGINE=Innodb;\r\n    ALTER TABLE arth_comments              ENGINE=Innodb;\r\n    ALTER TABLE arth_links                 ENGINE=Innodb;\r\n    ALTER TABLE arth_options               ENGINE=Innodb;\r\n    ALTER TABLE arth_postmeta              ENGINE=Innodb;\r\n    ALTER TABLE arth_posts                 ENGINE=Innodb;\r\n    ALTER TABLE arth_term_relationships    ENGINE=Innodb;\r\n    ALTER TABLE arth_term_taxonomy         ENGINE=Innodb;\r\n    ALTER TABLE arth_terms                 ENGINE=Innodb;\r\n    ALTER TABLE arth_usermeta              ENGINE=Innodb;\r\n\r\nIf your text editor can&#39;t do this easily, here&#39;s another solution for getting a similar list (that you can paste into mysql) for just one prefix of your database, from linux terminal:\r\n\r\n    mysql -u [username] -p[password] -B -N -e &#39;show tables like &quot;arth_%&quot;&#39; [database name] | xargs -I &#39;{}&#39; echo &quot;ALTER TABLE {} ENGINE=INNODB;&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1363189637, "answer_id": 15390001, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1363189637, "body_markdown": "Here is a way to do it for Django users:\r\n\r\n    from django.core.management.base import BaseCommand\r\n    from django.db import connections\r\n    \r\n    \r\n    class Command(BaseCommand):\r\n    \r\n        def handle(self, database=&quot;default&quot;, *args, **options):\r\n    \r\n            cursor = connections[database].cursor()\r\n    \r\n            cursor.execute(&quot;SHOW TABLE STATUS&quot;);\r\n    \r\n            for row in cursor.fetchall():\r\n                if row[1] != &quot;InnoDB&quot;:\r\n                    print &quot;Converting %s&quot; % row[0],\r\n                    result = cursor.execute(&quot;ALTER TABLE %s ENGINE=INNODB&quot; % row[0])\r\n                    print result\r\n\r\nAdd that to your app under the folders management/commands/ Then you can convert all your tables with a manage.py command:\r\n\r\n    python manage.py convert_to_innodb"}, {"tags": [], "down_vote_count": 1, "creation_date": 1381238321, "answer_id": 19248800, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1381238321, "body_markdown": "  use this line to alter the database engine for single table.\r\n\r\n      ALTER TABLE table_name ENGINE = INNODB;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1387586374, "answer_id": 20714134, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1387586374, "body_markdown": "Try this shell script\r\n\r\n    DBENGINE=&#39;InnoDB&#39; ;\r\n    DBUSER=&#39;your_db_user&#39; ;\r\n    DBNAME=&#39;your_db_name&#39; ;\r\n    DBHOST=&#39;your_db_host&#39;\r\n    DBPASS=&#39;your_db_pass&#39; ;\r\n    mysqldump --add-drop-table -h$DBHOST -u$DBUSER -p$DBPASS $DBNAME &gt; mtest.sql; mysql -h$DBHOST -u$DBUSER -p$DBPASS $DBNAME -Nse &quot;SHOW TABLES;&quot; | while read TABLE ; do mysql -h$DBHOST -u$DBUSER -p$DBPASS $DBNAME -Nse &quot;ALTER TABLE $TABLE ENGINE=$DBENGINE;&quot; ; done"}, {"tags": [], "down_vote_count": 0, "creation_date": 1388741871, "answer_id": 20900558, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1396355672, "last_edit_date": 1396355672, "body_markdown": "I&#39;m a newbie and had to find my own solution because mysql commands on the web are usually riddled with misspellings create a real life nightmare for people just starting out.  Here is my solution....\r\n\r\nInstead of in 1 command per table, I prepared dozens of commands (ready to copy and paste) at once using excel.\r\n\r\nHow?\r\nexpand your putty window and enter mysql and then run the command &quot;SHOW TABLE STATUS;&quot; and the copy/paste the output to microsoft excel.  Go to the Data tab and use the &quot;text to columns&quot; feature an delimit the columns by a space key.  Then Sort the columns by whichever column shows your table types and delete all rows which the tables are already in InnoDb format (because we don&#39;t need to run commands against them, they are already done).  Then add 2 columns to the left of the tables column, and 2 columns to the right.  Then paste in the first part of the command in column-1 (see below).  Column 2 should contain only a space.  Column 3 is your tables column.  Column 4 should contain only a space.  Column 5 is the last part of your command.  It should look like this:\r\n\r\n\r\n    column-1        column-2            column-3         column-4     column-5\r\n    ALTER TABLE\t \tt_lade_tr      \t \tENGINE=InnoDB;\r\n    ALTER TABLE\t \tt_foro_detail_ms\tENGINE=InnoDB;\r\n    ALTER TABLE\t \tt_ljk_ms\t    \tENGINE=InnoDB;\r\n\r\n\r\nThen copy and paste about 5 rows at a time into mysql.  This will convert about 5 at once.  I noticed if I did more than that at once then the commands would fail."}, {"tags": [], "down_vote_count": 1, "creation_date": 1392369080, "answer_id": 21775099, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1392369080, "body_markdown": "This is a simple php script.\r\n\r\n\r\n    &lt;?php\r\n        @error_reporting(E_ALL | E_STRICT);\r\n        @ini_set(&#39;display_errors&#39;, &#39;1&#39;);\r\n\r\n\r\n        $con = mysql_connect(&#39;server&#39;, &#39;user&#39;, &#39;pass&#39;);\r\n        $dbName = &#39;moodle2014&#39;;\r\n\r\n        $sql = &quot;SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = &#39;&quot;.$dbName.&quot;&#39;;&quot;;\r\n        $rs = mysql_query($sql, $con);\r\n\r\n        $count = 0;\r\n        $ok = 0;\r\n        while($row = mysql_fetch_array($rs)){\r\n                $count ++;\r\n                $tbl = $row[0];\r\n                $sql = &quot;ALTER TABLE &quot;.$dbName.&quot;.&quot;.$tbl.&quot; ENGINE=INNODB;&quot;;\r\n                $resultado = mysql_query($sql);\r\n                if ($resultado){\r\n                        $ok ++;\r\n                        echo $sql.&quot;&lt;hr/&gt;&quot;;\r\n                }\r\n        }\r\n        if ($count == $ok){\r\n                echo &#39;&lt;div style=&quot;color: green&quot;&gt;&lt;b&gt;ALL OK&lt;/b&gt;&lt;/div&gt;&#39;;\r\n        }else{\r\n                echo &#39;&lt;div style=&quot;color: red&quot;&gt;&lt;b&gt;ERRORS&lt;/b&gt;Total tables: &#39;.$count.&#39;, updated tables:&#39;.$ok.&#39;&lt;/div&gt;&#39;;\r\n        }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1396354041, "answer_id": 22785406, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1396355319, "last_edit_date": 1396355319, "body_markdown": "One line:\r\n\r\n     mysql -u root -p dbName -e \r\n     &quot;show table status where Engine=&#39;MyISAM&#39;;&quot; | awk \r\n     &#39;NR&gt;1 {print &quot;ALTER TABLE &quot;$1&quot; ENGINE = InnoDB;&quot;}&#39;  | \r\n      mysql -u root -p dbName"}, {"tags": [], "down_vote_count": 0, "creation_date": 1398874448, "answer_id": 23393131, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1398874448, "body_markdown": "It hasn&#39;t been mentioned yet, so I&#39;ll write it for posterity:\r\n\r\nIf you&#39;re migrating between DB servers (or have another reason you&#39;d dump and reload your dta), you can just modify the output from `mysqldump`:\r\n\r\n    mysqldump --no-data DBNAME | sed &#39;s/ENGINE=MyISAM/ENGINE=InnoDB/&#39; &gt; my_schema.sql;\r\n    mysqldump --no-create-info DBNAME &gt; my_data.sql;\r\n\r\nThen load it again:\r\n\r\n    mysql DBNAME &lt; my_schema.sql &amp;&amp; mysql DBNAME &lt; my_data.sql\r\n\r\n(Also, in my limited experience, this can be a much faster process than altering the tables \u2018live\u2019. It probably depends on the type of data and indexes.)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1407850530, "answer_id": 25265720, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1407851823, "last_edit_date": 1407851823, "body_markdown": "Some fixes to this util script\r\n\r\n    SET @DATABASE_NAME = &#39;Integradb&#39;;\r\n    \r\n    SELECT  CONCAT(&#39;ALTER TABLE &#39;, table_schema, &#39;.&#39;, table_name, &#39; ENGINE=InnoDB;&#39;) AS sql_statements\r\n    FROM    information_schema.tables AS tb\r\n    WHERE   table_schema = @DATABASE_NAME\r\n    AND     `ENGINE` = &#39;MyISAM&#39;\r\n    AND     `TABLE_TYPE` = &#39;BASE TABLE&#39;\r\n    ORDER BY table_name DESC;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1430241933, "answer_id": 29926020, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1430241933, "body_markdown": "A plain MySQL Version.\r\n\r\nYou can simply start mysql executable, use database and copy-paste the query.\r\n\r\nThis will convert all MyISAM tables in the current Database into INNODB tables.\r\n\r\n&lt;!-- language: lang-mysql --&gt;\r\n\r\n    DROP PROCEDURE IF EXISTS convertToInnodb;\r\n    DELIMITER //\r\n    CREATE PROCEDURE convertToInnodb()\r\n    BEGIN\r\n    mainloop: LOOP\r\n      SELECT TABLE_NAME INTO @convertTable FROM information_schema.TABLES\r\n      WHERE `TABLE_SCHEMA` LIKE DATABASE()\r\n      AND `ENGINE` LIKE &#39;MyISAM&#39; ORDER BY TABLE_NAME LIMIT 1;\r\n      IF @convertTable IS NULL THEN \r\n        LEAVE mainloop;\r\n      END IF;\r\n      SET @sqltext := CONCAT(&#39;ALTER TABLE `&#39;, DATABASE(), &#39;`.`&#39;, @convertTable, &#39;` ENGINE = INNODB&#39;);\r\n      PREPARE convertTables FROM @sqltext;\r\n      EXECUTE convertTables;\r\n      DEALLOCATE PREPARE convertTables;\r\n      SET @convertTable = NULL;\r\n    END LOOP mainloop;\r\n\r\n    END//\r\n    DELIMITER ;\r\n\r\n    CALL convertToInnodb();\r\n    DROP PROCEDURE IF EXISTS convertToInnodb;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1433432817, "answer_id": 30648414, "path": "stack.django.answer", "score": 37, "up_vote_count": 37, "is_accepted": false, "last_activity_date": 1433433556, "last_edit_date": 1433433556, "body_markdown": "    SELECT CONCAT(&#39;ALTER TABLE &#39;,TABLE_NAME,&#39; ENGINE=InnoDB;&#39;) \r\n    FROM INFORMATION_SCHEMA.TABLES\r\n    WHERE ENGINE=&#39;MyISAM&#39;\r\n    AND table_schema = &#39;mydatabase&#39;;\r\n\r\nWorks like a charm.\r\n\r\nThis will give you list of all tables with the alter queries that you can run in a batch"}, {"tags": [], "down_vote_count": 0, "creation_date": 1442680085, "answer_id": 32670571, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1442680085, "body_markdown": "    &lt;?php\r\n    \r\n    // Convert all MyISAM tables to INNODB tables in all non-special databases.\r\n    // Note: With MySQL less than 5.6, tables with a fulltext search index cannot be converted to INNODB and will be skipped.\r\n    \r\n    if($argc &lt; 4)\r\n    \texit(&quot;Usage: {$argv[0]} &lt;host&gt; &lt;username&gt; &lt;password&gt;\\n&quot;);\r\n    $host = $argv[1];\r\n    $username = $argv[2];\r\n    $password = $argv[3];\r\n    \r\n    // Connect to the database.\r\n    if(!mysql_connect($host, $username, $password))\r\n    \texit(&quot;Error opening database. &quot; . mysql_error() . &quot;\\n&quot;);\r\n    \r\n    // Get all databases except special ones that shouldn&#39;t be converted.\r\n    $databases = mysql_query(&quot;SHOW databases WHERE `Database` NOT IN (&#39;mysql&#39;, &#39;information_schema&#39;, &#39;performance_schema&#39;)&quot;);\r\n    if($databases === false)\r\n    \texit(&quot;Error showing databases. &quot; . mysql_error() . &quot;\\n&quot;);\r\n    \r\n    while($db = mysql_fetch_array($databases))\r\n    {\r\n    \t// Select the database.\r\n    \tif(!mysql_select_db($db[0]))\r\n    \t\texit(&quot;Error selecting database: {$db[0]}. &quot; . mysql_error() . &quot;\\n&quot;);\r\n    \tprintf(&quot;Database: %s\\n&quot;, $db[0]);\r\n    \r\n    \t// Get all MyISAM tables in the database.\r\n    \t$tables = mysql_query(&quot;SHOW table status WHERE Engine = &#39;MyISAM&#39;&quot;);\r\n    \tif($tables === false)\r\n    \t\texit(&quot;Error showing tables. &quot; . mysql_error() . &quot;\\n&quot;);\r\n    \r\n    \twhile($tbl = mysql_fetch_array($tables))\r\n    \t{\r\n    \t\t// Convert the table to INNODB.\r\n    \t\tprintf(&quot;--- Converting %s\\n&quot;, $tbl[0]);\r\n    \t\tif(mysql_query(&quot;ALTER TABLE `{$tbl[0]}` ENGINE = INNODB&quot;) === false)\r\n    \t\t\tprintf(&quot;--- --- Error altering table: {$tbl[0]}. &quot; . mysql_error() . &quot;\\n&quot;);\r\n    \t}\r\n    }\r\n    \r\n    mysql_close();\r\n    \r\n    ?&gt;\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1445030548, "answer_id": 33179755, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1445030548, "body_markdown": "cd /var/lib/mysql/DBNAME\r\n\r\nls | grep &quot;.frm&quot; | cut -d&quot;.&quot; -f1 | xargs -I{} -n1 mysql -D DBNAME -e &quot;alter table {} ENGINE=INNODB;&quot; -uroot -pXXXXX"}, {"tags": [], "down_vote_count": 0, "creation_date": 1467414971, "answer_id": 38154924, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1467414971, "body_markdown": "In my case, I was migrating from a MySQL instance with a default of MyISAM, to a MariaDB instance with a DEFAULT of InnoDB.\r\n\r\n[Per MariaDB Migration Doc&#39;s.][1]\r\n\r\nOn old Server Run :\r\n\r\n    mysqldump -u root -p --skip-create-options --all-databases &gt; migration.sql\r\n\r\nThe --skip-create-options ensures that the database server uses the default storage engine when loading the data, instead of MyISAM.\r\n\r\n    mysql -u root -p &lt; migration.sql\r\n\r\nThis threw an error regarding creating mysql.db, but everything works great now :)\r\n\r\n\r\n\r\n\r\n  [1]: http://galeracluster.com/documentation-webpages/migration.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1484567827, "answer_id": 41675913, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1484568282, "last_edit_date": 1484568282, "body_markdown": "It&#39;s Very simple there are only TWO step just copy and paste :\r\n\r\n\r\n\r\nstep 1.\r\n\r\n\r\n      SET @DATABASE_NAME = &#39;name_of_your_db&#39;;\r\n      SELECT  CONCAT(&#39;ALTER TABLE `&#39;, table_name, &#39;` ENGINE=InnoDB;&#39;) AS  sql_statements FROM information_schema.tables AS tb WHERE   table_schema = @DATABASE_NAME AND `ENGINE` = &#39;MyISAM&#39; AND `TABLE_TYPE` = &#39;BASE TABLE&#39; ORDER BY table_name DESC;\r\n\r\n(copy and paste all result in in sql tab)\r\n\r\n\r\nstep 2:\r\n(copy all result in in sql tab)\r\nand paste below in the line\r\n\r\n\r\nSTART TRANSACTION;\r\n\r\nCOMMIT;\r\n\r\neg.\r\nSTART TRANSACTION;\r\n\r\nALTER TABLE `admin_files` ENGINE=InnoDB;\r\n\r\nCOMMIT;\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1511385213, "answer_id": 47443972, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1511385213, "body_markdown": "To generate ALTER statements for all tables in all the non-system schemas, ordered by those schemas/tables run the following:\r\n\r\n    SELECT  CONCAT(&#39;ALTER TABLE &#39;,TABLE_SCHEMA,&#39;.&#39;, table_name, &#39; ENGINE=InnoDB;&#39;) AS sql_statements\r\n    FROM    information_schema.tables\r\n    WHERE   TABLE_SCHEMA NOT IN (&#39;mysql&#39;, &#39;information_schema&#39;, &#39;performance_schema&#39;, &#39;innodb&#39;, &#39;sys&#39;, &#39;tmp&#39;)\r\n    AND\t\t`ENGINE` = &#39;MyISAM&#39;\r\n    AND     `TABLE_TYPE` = &#39;BASE TABLE&#39;\r\n    ORDER BY TABLE_SCHEMA, table_name DESC;\r\n\r\nAfter that, run those queries via a client to perform the alteration.\r\n\r\n* Answer is based on above answers, but improves schema handling."}, {"tags": [], "down_vote_count": 0, "creation_date": 1518001602, "answer_id": 48662279, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1518001602, "body_markdown": "Yet another option... Here&#39;s how to do it in ansible. It assumes that the name of your database is in `dbname` and that you have already configured access.\r\n\r\n    - name: Get list of DB tables that need converting to InnoDB\r\n      command: &gt;\r\n        mysql --batch --skip-column-names --execute=&quot;SELECT TABLE_NAME\r\n        FROM information_schema.TABLES\r\n        WHERE TABLE_SCHEMA = &#39;{{ dbname }}&#39; AND ENGINE = &#39;MyISAM&#39;;&quot;\r\n      register: converttables\r\n      check_mode: no\r\n      changed_when: False\r\n    \r\n    - name: Convert any unconverted tables\r\n      command: &gt;\r\n        mysql --batch --skip-column-names --execute=&quot;ALTER TABLE `{{ dbname }}`.`{{ item }}` ENGINE = InnoDB;&quot;\r\n      with_items: &quot;{{ converttables.stdout_lines }}&quot;\r\n\r\n"}], "title": "How to convert all tables from MyISAM into InnoDB?", "view_count": 184507, "answer_count": 24, "code_snippet": ["<code>&lt;?php\n    // connect your database here first \n    // \n\n    // Actual code starts here \n\n    $sql = \"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES\n        WHERE TABLE_SCHEMA = 'your_database_name' \n        AND ENGINE = 'MyISAM'\";\n\n    $rs = mysql_query($sql);\n\n    while($row = mysql_fetch_array($rs))\n    {\n        $tbl = $row[0];\n        $sql = \"ALTER TABLE `$tbl` ENGINE=INNODB\";\n        mysql_query($sql);\n    }\n?&gt;\n</code>", "<code>mysql_*</code>", "<code>name_of_your_db</code>", "<code>SET @DATABASE_NAME = 'name_of_your_db';\n\nSELECT  CONCAT('ALTER TABLE `', table_name, '` ENGINE=InnoDB;') AS sql_statements\nFROM    information_schema.tables AS tb\nWHERE   table_schema = @DATABASE_NAME\nAND     `ENGINE` = 'MyISAM'\nAND     `TABLE_TYPE` = 'BASE TABLE'\nORDER BY table_name DESC;\n</code>", "<code>CONCAT('ALTER TABLE ', table_name, ' ENGINE=InnoDB;')</code>", "<code>CONCAT('ALTER TABLE ',@DATABASE_NAME,'.', table_name, ' ENGINE=InnoDB;')</code>", "<code>SELECT CONCAT('ALTER TABLE ',TABLE_NAME,' ENGINE=InnoDB;') \nFROM INFORMATION_SCHEMA.TABLES\nWHERE ENGINE='MyISAM'\nAND table_schema = 'mydatabase';\n</code>", "<code>echo 'SHOW TABLES;' \\\n | mysql -u &lt;username&gt; --password=&lt;password&gt; -D &lt;schema&gt; \\\n | awk '!/^Tables_in_/ {print \"ALTER TABLE `\"$0\"` ENGINE = InnoDB;\"}' \\\n | column -t \\\n</code>", "<code>echo 'SHOW TABLES;' \\\n | mysql -u &lt;username&gt; --password=&lt;password&gt; -D &lt;schema&gt; \\\n | awk '!/^Tables_in_/ {print \"ALTER TABLE `\"$0\"` ENGINE = InnoDB;\"}' \\\n | column -t \\\n | mysql -u &lt;username&gt; --password=&lt;password&gt; -D &lt;schema&gt;\n</code>", "<code>SELECT CONCAT('ALTER TABLE ',table_schema,'.',table_name,' engine=InnoDB;') \nFROM information_schema.tables \nWHERE engine = 'MyISAM';\n</code>", "<code> mysql -u root -p dbName -e \n \"show table status where Engine='MyISAM';\" | awk \n 'NR&gt;1 {print \"ALTER TABLE \"$1\" ENGINE = InnoDB;\"}'  | \n  mysql -u root -p dbName\n</code>", "<code>echo \"SELECT concat('ALTER TABLE `',TABLE_NAME,'` ENGINE=InnoDB;')\nFROM Information_schema.TABLES \nWHERE ENGINE != 'InnoDB' AND TABLE_TYPE='BASE TABLE' \nAND TABLE_SCHEMA='name-of-database'\" | mysql &gt; convert.sql\n</code>", "<code>mysql name-of-database &lt; convert.sql\n</code>", "<code>-bash: ,TABLE_NAME,: command not found</code>", "<code>  SET @DATABASE_NAME = 'name_of_your_db';\n  SELECT  CONCAT('ALTER TABLE `', table_name, '` ENGINE=InnoDB;') AS  sql_statements FROM information_schema.tables AS tb WHERE   table_schema = @DATABASE_NAME AND `ENGINE` = 'MyISAM' AND `TABLE_TYPE` = 'BASE TABLE' ORDER BY table_name DESC;\n</code>", "<code>admin_files</code>", "<code>from django.core.management.base import BaseCommand\nfrom django.db import connections\n\n\nclass Command(BaseCommand):\n\n    def handle(self, database=\"default\", *args, **options):\n\n        cursor = connections[database].cursor()\n\n        cursor.execute(\"SHOW TABLE STATUS\");\n\n        for row in cursor.fetchall():\n            if row[1] != \"InnoDB\":\n                print \"Converting %s\" % row[0],\n                result = cursor.execute(\"ALTER TABLE %s ENGINE=INNODB\" % row[0])\n                print result\n</code>", "<code>python manage.py convert_to_innodb\n</code>", "<code>mysqldump</code>", "<code>mysqldump --no-data DBNAME | sed 's/ENGINE=MyISAM/ENGINE=InnoDB/' &gt; my_schema.sql;\nmysqldump --no-create-info DBNAME &gt; my_data.sql;\n</code>", "<code>mysql DBNAME &lt; my_schema.sql &amp;&amp; mysql DBNAME &lt; my_data.sql\n</code>", "<code>SELECT table_schema, table_name FROM INFORMATION_SCHEMA.TABLES WHERE engine = 'myisam';\n</code>", "<code>SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE engine = 'myisam';\n</code>", "<code>ALTER TABLE arth_commentmeta           ENGINE=Innodb;\nALTER TABLE arth_comments              ENGINE=Innodb;\nALTER TABLE arth_links                 ENGINE=Innodb;\nALTER TABLE arth_options               ENGINE=Innodb;\nALTER TABLE arth_postmeta              ENGINE=Innodb;\nALTER TABLE arth_posts                 ENGINE=Innodb;\nALTER TABLE arth_term_relationships    ENGINE=Innodb;\nALTER TABLE arth_term_taxonomy         ENGINE=Innodb;\nALTER TABLE arth_terms                 ENGINE=Innodb;\nALTER TABLE arth_usermeta              ENGINE=Innodb;\n</code>", "<code>mysql -u [username] -p[password] -B -N -e 'show tables like \"arth_%\"' [database name] | xargs -I '{}' echo \"ALTER TABLE {} ENGINE=INNODB;\"\n</code>", "<code>SELECT  CONCAT('ALTER TABLE ',TABLE_SCHEMA,'.', table_name, ' ENGINE=InnoDB;') AS sql_statements\nFROM    information_schema.tables\nWHERE   TABLE_SCHEMA NOT IN ('mysql', 'information_schema', 'performance_schema', 'innodb', 'sys', 'tmp')\nAND     `ENGINE` = 'MyISAM'\nAND     `TABLE_TYPE` = 'BASE TABLE'\nORDER BY TABLE_SCHEMA, table_name DESC;\n</code>", "<code>DROP PROCEDURE IF EXISTS convertToInnodb;\nDELIMITER //\nCREATE PROCEDURE convertToInnodb()\nBEGIN\nmainloop: LOOP\n  SELECT TABLE_NAME INTO @convertTable FROM information_schema.TABLES\n  WHERE `TABLE_SCHEMA` LIKE DATABASE()\n  AND `ENGINE` LIKE 'MyISAM' ORDER BY TABLE_NAME LIMIT 1;\n  IF @convertTable IS NULL THEN \n    LEAVE mainloop;\n  END IF;\n  SET @sqltext := CONCAT('ALTER TABLE `', DATABASE(), '`.`', @convertTable, '` ENGINE = INNODB');\n  PREPARE convertTables FROM @sqltext;\n  EXECUTE convertTables;\n  DEALLOCATE PREPARE convertTables;\n  SET @convertTable = NULL;\nEND LOOP mainloop;\n\nEND//\nDELIMITER ;\n\nCALL convertToInnodb();\nDROP PROCEDURE IF EXISTS convertToInnodb;\n</code>", "<code>SHOW FULL TABLES</code>", "<code>'BASE TABLE'</code>", "<code>'VIEW'</code>", "<code>'VIEW'</code>", "<code>ALTER TABLE</code>", "<code>DBENGINE='InnoDB' ;\nDBUSER='your_db_user' ;\nDBNAME='your_db_name' ;\nDBHOST='your_db_host'\nDBPASS='your_db_pass' ;\nmysqldump --add-drop-table -h$DBHOST -u$DBUSER -p$DBPASS $DBNAME &gt; mtest.sql; mysql -h$DBHOST -u$DBUSER -p$DBPASS $DBNAME -Nse \"SHOW TABLES;\" | while read TABLE ; do mysql -h$DBHOST -u$DBUSER -p$DBPASS $DBNAME -Nse \"ALTER TABLE $TABLE ENGINE=$DBENGINE;\" ; done\n</code>", "<code>column-1        column-2            column-3         column-4     column-5\nALTER TABLE     t_lade_tr           ENGINE=InnoDB;\nALTER TABLE     t_foro_detail_ms    ENGINE=InnoDB;\nALTER TABLE     t_ljk_ms            ENGINE=InnoDB;\n</code>", "<code>SET @DATABASE_NAME = 'Integradb';\n\nSELECT  CONCAT('ALTER TABLE ', table_schema, '.', table_name, ' ENGINE=InnoDB;') AS sql_statements\nFROM    information_schema.tables AS tb\nWHERE   table_schema = @DATABASE_NAME\nAND     `ENGINE` = 'MyISAM'\nAND     `TABLE_TYPE` = 'BASE TABLE'\nORDER BY table_name DESC;\n</code>", "<code>&lt;?php\n\n// Convert all MyISAM tables to INNODB tables in all non-special databases.\n// Note: With MySQL less than 5.6, tables with a fulltext search index cannot be converted to INNODB and will be skipped.\n\nif($argc &lt; 4)\n    exit(\"Usage: {$argv[0]} &lt;host&gt; &lt;username&gt; &lt;password&gt;\\n\");\n$host = $argv[1];\n$username = $argv[2];\n$password = $argv[3];\n\n// Connect to the database.\nif(!mysql_connect($host, $username, $password))\n    exit(\"Error opening database. \" . mysql_error() . \"\\n\");\n\n// Get all databases except special ones that shouldn't be converted.\n$databases = mysql_query(\"SHOW databases WHERE `Database` NOT IN ('mysql', 'information_schema', 'performance_schema')\");\nif($databases === false)\n    exit(\"Error showing databases. \" . mysql_error() . \"\\n\");\n\nwhile($db = mysql_fetch_array($databases))\n{\n    // Select the database.\n    if(!mysql_select_db($db[0]))\n        exit(\"Error selecting database: {$db[0]}. \" . mysql_error() . \"\\n\");\n    printf(\"Database: %s\\n\", $db[0]);\n\n    // Get all MyISAM tables in the database.\n    $tables = mysql_query(\"SHOW table status WHERE Engine = 'MyISAM'\");\n    if($tables === false)\n        exit(\"Error showing tables. \" . mysql_error() . \"\\n\");\n\n    while($tbl = mysql_fetch_array($tables))\n    {\n        // Convert the table to INNODB.\n        printf(\"--- Converting %s\\n\", $tbl[0]);\n        if(mysql_query(\"ALTER TABLE `{$tbl[0]}` ENGINE = INNODB\") === false)\n            printf(\"--- --- Error altering table: {$tbl[0]}. \" . mysql_error() . \"\\n\");\n    }\n}\n\nmysql_close();\n\n?&gt;\n</code>", "<code>mysqldump -u root -p --skip-create-options --all-databases &gt; migration.sql\n</code>", "<code>mysql -u root -p &lt; migration.sql\n</code>", "<code>&lt;?php\n\n  // connect your database here first\n\n  mysql_connect('host', 'user', 'pass');\n\n  $databases = mysql_query('SHOW databases');\n\n  while($db = mysql_fetch_array($databases)) {\n    echo \"database =&gt; {$db[0]}\\n\";\n    mysql_select_db($db[0]);\n\n    $tables = mysql_query('SHOW tables');\n\n    while($tbl = mysql_fetch_array($tables)) {\n      echo \"table =&gt; {$tbl[0]}\\n\";\n      mysql_query(\"ALTER TABLE {$tbl[0]} ENGINE=MyISAM\");\n    }\n  }\n</code>", "<code>  ALTER TABLE table_name ENGINE = INNODB;\n</code>", "<code>&lt;?php\n    @error_reporting(E_ALL | E_STRICT);\n    @ini_set('display_errors', '1');\n\n\n    $con = mysql_connect('server', 'user', 'pass');\n    $dbName = 'moodle2014';\n\n    $sql = \"SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '\".$dbName.\"';\";\n    $rs = mysql_query($sql, $con);\n\n    $count = 0;\n    $ok = 0;\n    while($row = mysql_fetch_array($rs)){\n            $count ++;\n            $tbl = $row[0];\n            $sql = \"ALTER TABLE \".$dbName.\".\".$tbl.\" ENGINE=INNODB;\";\n            $resultado = mysql_query($sql);\n            if ($resultado){\n                    $ok ++;\n                    echo $sql.\"&lt;hr/&gt;\";\n            }\n    }\n    if ($count == $ok){\n            echo '&lt;div style=\"color: green\"&gt;&lt;b&gt;ALL OK&lt;/b&gt;&lt;/div&gt;';\n    }else{\n            echo '&lt;div style=\"color: red\"&gt;&lt;b&gt;ERRORS&lt;/b&gt;Total tables: '.$count.', updated tables:'.$ok.'&lt;/div&gt;';\n    }\n</code>", "<code>dbname</code>", "<code>- name: Get list of DB tables that need converting to InnoDB\n  command: &gt;\n    mysql --batch --skip-column-names --execute=\"SELECT TABLE_NAME\n    FROM information_schema.TABLES\n    WHERE TABLE_SCHEMA = '{{ dbname }}' AND ENGINE = 'MyISAM';\"\n  register: converttables\n  check_mode: no\n  changed_when: False\n\n- name: Convert any unconverted tables\n  command: &gt;\n    mysql --batch --skip-column-names --execute=\"ALTER TABLE `{{ dbname }}`.`{{ item }}` ENGINE = InnoDB;\"\n  with_items: \"{{ converttables.stdout_lines }}\"\n</code>"], "path": "stack.django"}, {"tags": ["python", "sql", "django", "django-queryset"], "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1284949072, "answer_id": 3748307, "path": "stack.django.answer", "score": 329, "up_vote_count": 330, "is_accepted": true, "last_activity_date": 1284949072, "body_markdown": "You print the queryset&#39;s `query` attribute.\r\n\r\n    &gt;&gt;&gt; queryset = MyModel.objects.all()\r\n    &gt;&gt;&gt; print queryset.query\r\n    SELECT &quot;myapp_mymodel&quot;.&quot;id&quot;, ... FROM &quot;myapp_mymodel&quot;\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1284949081, "answer_id": 3748308, "path": "stack.django.answer", "score": 48, "up_vote_count": 48, "is_accepted": false, "last_activity_date": 1284951266, "last_edit_date": 1284951266, "body_markdown": "Easy:\r\n\r\n    print my_queryset.query\r\n\r\nFor example:\r\n\r\n    from django.contrib.auth.models import User\r\n    print User.objects.filter(last_name__icontains = &#39;ax&#39;).query\r\n\r\nIt should also be mentioned that if you have DEBUG = True, then all of your queries are logged, and you can get them by accessing connection.queries:\r\n\r\n    from django.db import connections\r\n    connections[&#39;default&#39;].queries\r\n\r\nThe [django debug toolbar][1] project uses this to present the queries on a page in a neat manner.\r\n\r\n\r\n  [1]: http://github.com/robhudson/django-debug-toolbar"}, {"tags": [], "down_vote_count": 0, "creation_date": 1284978280, "answer_id": 3750505, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1284978280, "body_markdown": "This middleware will output every SQL query to your console, with color highlighting and execution time, it&#39;s been invaluable for me in optimizing some tricky requests\r\n\r\nhttp://djangosnippets.org/snippets/290/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1313188016, "answer_id": 7046972, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1357230203, "last_edit_date": 1357230203, "body_markdown": "As an alternative to the other answers, [django-devserver](https://github.com/dcramer/django-devserver) outputs SQL to the console."}, {"tags": [], "down_vote_count": 3, "creation_date": 1362188589, "answer_id": 15169718, "path": "stack.django.answer", "score": 26, "up_vote_count": 29, "is_accepted": false, "last_activity_date": 1461660679, "last_edit_date": 1495540957, "body_markdown": "[The accepted answer][1] did not work for me when using Django 1.4.4.  Instead of the raw query, a reference to the Query object was returned: ``&lt;django.db.models.sql.query.Query object at 0x10a4acd90&gt;``. \r\n\r\nThe following returned the query:\r\n\r\n    &gt;&gt;&gt; queryset = MyModel.objects.all()\r\n    &gt;&gt;&gt; queryset.query.__str__()\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/3748307/"}], "creation_date": 1284948714, "body_markdown": "How do I get the SQL that Django will use on the database from a QuerySet object? I&#39;m trying to debug some strange behavior, but I&#39;m not sure what queries are going to the database. Thanks for your help.", "title": "Getting the SQL from a Django QuerySet", "view_count": 100497, "up_vote_count": 218, "answer_count": 5, "link": "https://stackoverflow.com/questions/3748295/getting-the-sql-from-a-django-queryset", "code_snippet": ["<code>query</code>", "<code>&gt;&gt;&gt; queryset = MyModel.objects.all()\n&gt;&gt;&gt; print queryset.query\nSELECT \"myapp_mymodel\".\"id\", ... FROM \"myapp_mymodel\"\n</code>", "<code>query</code>", "<code>print my_queryset.query\n</code>", "<code>from django.contrib.auth.models import User\nprint User.objects.filter(last_name__icontains = 'ax').query\n</code>", "<code>from django.db import connections\nconnections['default'].queries\n</code>", "<code>&lt;django.db.models.sql.query.Query object at 0x10a4acd90&gt;</code>", "<code>&gt;&gt;&gt; queryset = MyModel.objects.all()\n&gt;&gt;&gt; queryset.query.__str__()\n</code>", "<code>queryset.query</code>", "<code>print queryset.query</code>", "<code>__str__()</code>", "<code>__str__()</code>", "<code>str(queryset.query)</code>", "<code>p queryset</code>", "<code>p queryset.__str__()</code>", "<code>manage.py shell</code>"], "path": "stack.django"}, {"tags": ["python", "virtualenv", "virtualenvwrapper"], "creation_date": 1254949882, "body_markdown": "I have a Debian system currently running with python 2.5.4. I got virtualenv properly installed, everything is working fine. Is there a possibility that I can use a virtualenv with a different version of Python?\r\n\r\nI compiled Python 2.6.2 and would like to use it with some virtualenv. Is it enough to overwrite the binary file? Or do I have to change something in respect to the libraries?", "last_edit_date": 1275017080, "up_vote_count": 712, "link": "https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1254951192, "answer_id": 1534343, "path": "stack.django.answer", "score": 1063, "up_vote_count": 1064, "is_accepted": true, "last_activity_date": 1505596331, "last_edit_date": 1505596331, "body_markdown": "Just use the `--python` (or short `-p`) option when creating your virtualenv instance to specify the Python executable you want to use, e.g.:\r\n\r\n    virtualenv --python=/usr/bin/python2.6 &lt;path/to/new/virtualenv/&gt;\r\n\r\nN.B. For **Python 3.3** or later, refer to The Aelfinn&#39;s [answer][1] below. _\\[Editor&#39;s note: I know this should normally be a comment, not an edit, but a new comment would be hidden, and I just spent 45 minutes untangling errors because this important answer was buried under three or four parrot answers. I&#39;m just trying to save everyone time here.\\]_\r\n\r\n  [1]: https://stackoverflow.com/a/39713544/1450294"}, {"tags": [], "down_vote_count": 1, "creation_date": 1257347715, "answer_id": 1674444, "path": "stack.django.answer", "score": 87, "up_vote_count": 88, "is_accepted": false, "last_activity_date": 1412812433, "last_edit_date": 1412812433, "body_markdown": "    virtualenv --python=/usr/bin/python2.6 &lt;path/to/myvirtualenv&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1312146272, "answer_id": 6892302, "path": "stack.django.answer", "score": 60, "up_vote_count": 60, "is_accepted": false, "last_activity_date": 1312146272, "body_markdown": "Under Windows for me this works:\r\n\r\n    virtualenv --python=c:\\Python25\\python.exe envname\r\n\r\nwithout the `python.exe` I got `WindowsError: [Error 5] Access is denied` \r\nI have Python2.7.1 installed with virtualenv 1.6.1, and I wanted python 2.5.2.\r\n "}, {"tags": [], "down_vote_count": 0, "creation_date": 1341267434, "answer_id": 11301911, "path": "stack.django.answer", "score": 154, "up_vote_count": 154, "is_accepted": false, "last_activity_date": 1467368705, "last_edit_date": 1467368705, "body_markdown": "These are steps when you are on shared hosting environment and need to install &amp; complie Python from source and then create venv from your Python version. For Python 2.7.9 you would do something along these lines:\r\n\r\n    mkdir ~/src\r\n    wget http://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz\r\n    tar -zxvf Python-2.7.9.tgz\r\n    cd Python-2.7.9\r\n    mkdir ~/.localpython\r\n    ./configure --prefix=$HOME/.localpython\r\n    make\r\n    make install\r\n    \r\n**virtual env**\r\n    \r\n    cd ~/src\r\n    wget https://pypi.python.org/packages/5c/79/5dae7494b9f5ed061cff9a8ab8d6e1f02db352f3facf907d9eb614fb80e9/virtualenv-15.0.2.tar.gz#md5=0ed59863994daf1292827ffdbba80a63\r\n    tar -zxvf virtualenv-15.0.2.tar.gz\r\n    cd virtualenv-15.0.2/\r\n    ~/.localpython/bin/python setup.py install\r\n    virtualenv ve -p $HOME/.localpython/bin/python2.7\r\n    source ve/bin/activate   \r\n\r\nNaturally this can be applicable to any situation where you want to replicate the exact environment you work and deploy on. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1388382709, "answer_id": 20834097, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1423678112, "last_edit_date": 1423678112, "body_markdown": "Suppose you currently have python 2.7 installed in your virtualenv. But want to make use of python3.2. You would have to update this with:\r\n\r\n    virtualenv --python=/usr/bin/python3.2 name_of_your_virtualenv\r\n\r\nThen activate your virtualenv and type `python --version` in shell to check whether your version is now updated.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1421354605, "answer_id": 27972633, "path": "stack.django.answer", "score": 23, "up_vote_count": 23, "is_accepted": false, "last_activity_date": 1444160827, "last_edit_date": 1444160827, "body_markdown": "Mac OSX 10.6.8 (Snow Leopard):\r\n\r\n1) When you do `pip install virtualenv`, the pip command is associated with one of your python versions, and `virtualenv` gets installed into that version of python (you can do\r\n\r\n     $ which pip   \r\n\r\nto see what version of python that is). By default, that will be the version of python that is used for any new environment you create. However, you can specify any version of python installed on your computer to use inside a new environment with the `-p flag`:  \r\n\r\n    $ virtualenv -p python3.2 my_env  \r\n    Running virtualenv with interpreter /usr/local/bin/python3.2  \r\n    New python executable in my_env/bin/python  \r\n    Installing setuptools, pip...done.  \r\n\r\n&gt; `virtualenv my_env` will create a folder in the current directory which\r\n&gt; will contain the Python executable files, and a copy of the pip\r\n&gt; [command] which you can use to install other packages.\r\n\r\nhttp://docs.python-guide.org/en/latest/dev/virtualenvs/\r\n\r\n`virtualenv` just copies python from a location on your computer into the newly created my_env/bin/ directory. \r\n\r\n2) The system python is in `/usr/bin`, while the various python versions I installed were, by default, installed into:\r\n\r\n     /usr/local/bin\r\n\r\n\r\n3) The various pythons I installed have names like `python2.7` or `python3.2`, and I can use those names rather than full paths. \r\n\r\n\r\n\r\n&lt;h3&gt;========VIRTUALENVWRAPPER=========&lt;/h3&gt;\r\n\r\n\r\n1) I had some problems getting virtualenvwrapper to work.  This is what I ended up putting in `~/.bash_profile`:  \r\n\r\n\r\n    export WORKON_HOME=$HOME/.virtualenvs\r\n    export PROJECT_HOME=$HOME/django_projects  #Not very important -- mkproject command uses this\r\n    #Added the following based on: \r\n    #http://stackoverflow.com/questions/19665327/virtualenvwrapper-installation-snow-leopard-python\r\n    export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python2.7 \r\n    #source /usr/local/bin/virtualenvwrapper.sh\r\n    source /Library/Frameworks/Python.framework/Versions/2.7/bin/virtualenvwrapper.sh\r\n\r\n2) The `-p option` works differently with virtualenvwrapper: I have to specify the full path to the python interpreter to be used in the new environment(when I do not want to use the default python version):  \r\n\r\n\r\n    $ mkvirtualenv -p /usr/local/bin/python3.2 my_env\r\n    Running virtualenv with interpreter /usr/local/bin/python3\r\n    New python executable in my_env/bin/python\r\n    Installing setuptools, pip...done.\r\n    Usage: source deactivate\r\n    \r\n    removes the &#39;bin&#39; directory of the environment activated with &#39;source\r\n    activate&#39; from PATH. \r\n\r\n\r\nUnlike virtualenv, virtualenvwrapper will create the environment at the location specified by the $WORKON_HOME environment variable.  That keeps all your environments in one place.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1441231450, "answer_id": 32363907, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1441400588, "last_edit_date": 1441400588, "body_markdown": "On the mac I use pyenv and virtualenvwrapper. I had to create a new virtualenv. You need homebrew which I&#39;ll assume you&#39;ve installed if you&#39;re on a mac, but just for fun:\r\n\r\n    ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;\r\n    \r\n    \r\n    brew install pyenv\r\n    pyenv install 2.7.10\r\n    pyenv global 2.7.10\r\n    export PATH=/Users/{USERNAME}/.pyenv/versions/2.7.10/bin:$PATH\r\n    mkvirtualenv -p ~/.pyenv/versions/2.7.10/bin/python  {virtual_env_name}\r\n\r\nI also froze my requirements first so i could simply reinstall in the new virtualenv with:\r\n\r\n    pip install -r requirements.txt"}, {"tags": [], "down_vote_count": 0, "creation_date": 1449961872, "answer_id": 34246092, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1474290183, "last_edit_date": 1474290183, "body_markdown": "You can call `virtualenv` with python version you want. For example:\r\n\r\n    python3 -m virtualenv venv\r\n\r\nOr alternatively directly point to your virtualenv path. e.g. for windows:\r\n\r\n    c:\\Python34\\Scripts\\virtualenv.exe venv\r\n\r\nAnd by running:\r\n\r\n    venv/bin/python\r\n\r\n    Python 3.5.1 (v3.5.1:37a07cee5969, Dec  5 2015, 21:12:44) \r\n    [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\r\n    Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\r\n    &gt;&gt;&gt;\r\n\r\n\r\nyou can see the python version installed in virtual environment\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1464936821, "answer_id": 37607811, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1464936821, "body_markdown": "**It worked for me**\r\n\r\n    sudo apt-get install python3-minimal\r\n    \r\n    virtualenv --no-site-packages --distribute -p /usr/bin/python3 ~/.virtualenvs/py3\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1470430664, "answer_id": 38797664, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1470430664, "body_markdown": "The `-p` approach works well, but you do have to remember to use it every time.  If your goal is to switch to a newer version of Python generally, that&#39;s a pain and can also lead to mistakes.\r\n\r\nYour other option is to set an environment variable that does the same thing as `-p`. Set this via your `~/.bashrc` file or wherever you manage environment variables for your login sessions:\r\n\r\n    export VIRTUALENV_PYTHON=/path/to/desired/version\r\n\r\nThen `virtualenv` will use that any time you don&#39;t specify `-p` on the command line."}, {"tags": [], "down_vote_count": 0, "creation_date": 1474291730, "answer_id": 39574443, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1474291730, "body_markdown": "Even easier, by using command substitution to find python2 for you:\r\n\r\n`virtualenv -p $(which python2) &lt;path/to/new/virtualenv/&gt;`\r\n\r\nOr when using virtualenvwrapper : \r\n\r\n`mkvirtualenv -p $(which python2) &lt;env_name&gt;`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1474929996, "answer_id": 39713544, "path": "stack.django.answer", "score": 89, "up_vote_count": 89, "is_accepted": false, "last_activity_date": 1517902783, "last_edit_date": 1517902783, "body_markdown": "**UPDATE:**  For Python3.6, the below ``pyvenv`` script is deprecated. Instead, [it is suggested][1] that you create the virtual environment with the following command:\r\n\r\n    python3.6 -m venv &lt;myenvname&gt;\r\n\r\nFor python3 (3.3+), use either the above method or the [script][2] ```pyvenv``` command.\r\n\r\n    pyvenv /path/to/new/virtual/environment\r\n\r\nPlease note that `venv` does not permit to create virtual env with other versions of Python. For that install and use the `virtualenv` [package][3].\r\n\r\n\r\n  [1]: https://docs.python.org/3/library/venv.html &quot;Python 3.6.4 documentation - Creation of virtual environments&quot;\r\n  [2]: https://docs.python.org/3/library/venv.html\r\n  [3]: https://pypi.python.org/pypi/virtualenv"}, {"tags": [], "down_vote_count": 0, "creation_date": 1478001571, "answer_id": 40359624, "path": "stack.django.answer", "score": 44, "up_vote_count": 44, "is_accepted": false, "last_activity_date": 1495610916, "last_edit_date": 1495610916, "body_markdown": "There is an easier way, \r\n\r\n    virtualenv venv --python=python2.7\r\n\r\nThanks to  a comment, this only works if you have python2.7 installed at the system level (e.g. /usr/bin/python2.7).\r\n\r\nOtherwise, if you are using homebrew you can use the path to give you what you want.\r\n\r\n    virtualenv venv --python=/usr/local/bin/python\r\n\r\nYou can find the path to your python installation with \r\n\r\n    which python\r\n\r\nThis will also work with python 3. \r\n\r\n    which python3\r\n    &gt;&gt; /usr/local/bin/python3\r\n    virtualenv venv --python=/usr/local/bin/python3\r\n\r\nUltimately condensing to:\r\n\r\n    virtualenv venv -p `which python`\r\n    virtualenv venv -p `which python3`\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1495799141, "answer_id": 44200822, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1495799141, "body_markdown": "**In windows subsystem for linux:**\r\n-----------------------------------\r\n\r\n1. Create environment for python3:\r\n\r\n        virtualenv --python=/usr/bin/python3 env\r\n\r\n1. Activate it:\r\n\r\n        source env/bin/activate\r\n\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1513412232, "answer_id": 47843832, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1517739371, "last_edit_date": 1517739371, "body_markdown": "**Yes**, the above answers are correct and works fine on Unix based systems like **Linux** &amp; **MAC OS X**.\r\n\r\nI tried to create **virtualenv** for **Python2** &amp; **Python3** with the following commands.\r\n\r\nHere I have used **venv2** &amp; **venv3** as their names for **Python2** &amp; **Python3** respectively.\r\n\t\r\n    MacBook-Pro-2:~ admin$ virtualenv venv2 --python=`which python2`\r\n\tRunning virtualenv with interpreter /usr/local/bin/python2\r\n\tNew python executable in /Users/admin/venv2/bin/python\r\n\tInstalling setuptools, pip, wheel...done.\r\n\tMacBook-Pro-2:~ admin$ \r\n\tMacBook-Pro-2:~ admin$ ls venv2/bin/\r\n\tactivate\t\teasy_install\t\tpip2.7\t\t\tpython2.7\r\n\tactivate.csh\t\teasy_install-2.7\tpython\t\t\twheel\r\n\tactivate.fish\t\tpip\t\t\tpython-config\r\n\tactivate_this.py\tpip2\t\t\tpython2\r\n\tMacBook-Pro-2:~ admin$ \r\n\tMacBook-Pro-2:~ admin$ \r\n\tMacBook-Pro-2:~ admin$ virtualenv venv3 --python=`which python3`\r\n\tRunning virtualenv with interpreter /usr/local/bin/python3\r\n\tUsing base prefix &#39;/Library/Frameworks/Python.framework/Versions/3.6&#39;\r\n\tNew python executable in /Users/admin/venv3/bin/python3\r\n\tAlso creating executable in /Users/admin/venv3/bin/python\r\n\tInstalling setuptools, pip, wheel...done.\r\n\tMacBook-Pro-2:~ admin$ \r\n\tMacBook-Pro-2:~ admin$ ls venv3/bin/\r\n\tactivate\t\teasy_install\t\tpip3.6\t\t\tpython3.6\r\n\tactivate.csh\t\teasy_install-3.6\tpython\t\t\twheel\r\n\tactivate.fish\t\tpip\t\t\tpython-config\r\n\tactivate_this.py\tpip3\t\t\tpython3\r\n\tMacBook-Pro-2:~ admin$ \r\n\tMacBook-Pro-2:~ admin$ which python2\r\n\t/usr/local/bin/python2\r\n\tMacBook-Pro-2:~ admin$ \r\n\tMacBook-Pro-2:~ admin$ which python3\r\n\t/usr/local/bin/python3\r\n\tMacBook-Pro-2:~ admin$ "}], "title": "Use different Python version with virtualenv", "view_count": 367374, "answer_count": 15, "code_snippet": ["<code>--python</code>", "<code>-p</code>", "<code>virtualenv --python=/usr/bin/python2.6 &lt;path/to/new/virtualenv/&gt;\n</code>", "<code>virtualenv -p `which python2.6` &lt;path/to/new/virtualenv&gt;</code>", "<code>mkdir ~/src\nwget http://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz\ntar -zxvf Python-2.7.9.tgz\ncd Python-2.7.9\nmkdir ~/.localpython\n./configure --prefix=$HOME/.localpython\nmake\nmake install\n</code>", "<code>cd ~/src\nwget https://pypi.python.org/packages/5c/79/5dae7494b9f5ed061cff9a8ab8d6e1f02db352f3facf907d9eb614fb80e9/virtualenv-15.0.2.tar.gz#md5=0ed59863994daf1292827ffdbba80a63\ntar -zxvf virtualenv-15.0.2.tar.gz\ncd virtualenv-15.0.2/\n~/.localpython/bin/python setup.py install\nvirtualenv ve -p $HOME/.localpython/bin/python2.7\nsource ve/bin/activate   \n</code>", "<code>~/.localpython/bin/virtualenv</code>", "<code>virtualenv</code>", "<code>source ve/bin/activate</code>", "<code>source activate</code>", "<code>pyvenv</code>", "<code>python3.6 -m venv &lt;myenvname&gt;\n</code>", "<code>pyvenv</code>", "<code>pyvenv /path/to/new/virtual/environment\n</code>", "<code>venv</code>", "<code>virtualenv</code>", "<code>python3 -m venv &lt;envname&gt;</code>", "<code>pyvenv</code>", "<code>venv</code>", "<code>python 3 -m venv &lt;myenvname&gt;</code>", "<code>pyvenv</code>", "<code>python3 -m venv ...</code>", "<code>python-config</code>", "<code>python-config</code>", "<code>virtualenv --python=/usr/bin/python2.6 &lt;path/to/myvirtualenv&gt;\n</code>", "<code>-p</code>", "<code>virtualenv --python=c:\\Python25\\python.exe envname\n</code>", "<code>python.exe</code>", "<code>WindowsError: [Error 5] Access is denied</code>", "<code>virtualenv venv --python=python2.7\n</code>", "<code>virtualenv venv --python=/usr/local/bin/python\n</code>", "<code>which python\n</code>", "<code>which python3\n&gt;&gt; /usr/local/bin/python3\nvirtualenv venv --python=/usr/local/bin/python3\n</code>", "<code>virtualenv venv -p `which python`\nvirtualenv venv -p `which python3`\n</code>", "<code>virtualenv venv --python=python3.6</code>", "<code>virtualenv env --python=python2</code>", "<code>pip install virtualenv</code>", "<code>virtualenv</code>", "<code> $ which pip   \n</code>", "<code>-p flag</code>", "<code>$ virtualenv -p python3.2 my_env  \nRunning virtualenv with interpreter /usr/local/bin/python3.2  \nNew python executable in my_env/bin/python  \nInstalling setuptools, pip...done.  \n</code>", "<code>virtualenv my_env</code>", "<code>virtualenv</code>", "<code>/usr/bin</code>", "<code> /usr/local/bin\n</code>", "<code>python2.7</code>", "<code>python3.2</code>", "<code>~/.bash_profile</code>", "<code>export WORKON_HOME=$HOME/.virtualenvs\nexport PROJECT_HOME=$HOME/django_projects  #Not very important -- mkproject command uses this\n#Added the following based on: \n#http://stackoverflow.com/questions/19665327/virtualenvwrapper-installation-snow-leopard-python\nexport VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python2.7 \n#source /usr/local/bin/virtualenvwrapper.sh\nsource /Library/Frameworks/Python.framework/Versions/2.7/bin/virtualenvwrapper.sh\n</code>", "<code>-p option</code>", "<code>$ mkvirtualenv -p /usr/local/bin/python3.2 my_env\nRunning virtualenv with interpreter /usr/local/bin/python3\nNew python executable in my_env/bin/python\nInstalling setuptools, pip...done.\nUsage: source deactivate\n\nremoves the 'bin' directory of the environment activated with 'source\nactivate' from PATH. \n</code>", "<code>virtualenv --python=/usr/bin/python3.2 name_of_your_virtualenv\n</code>", "<code>python --version</code>", "<code>-p</code>", "<code>virtualenv</code>", "<code>python3 -m virtualenv venv\n</code>", "<code>c:\\Python34\\Scripts\\virtualenv.exe venv\n</code>", "<code>venv/bin/python\n\nPython 3.5.1 (v3.5.1:37a07cee5969, Dec  5 2015, 21:12:44) \n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n</code>", "<code>pip3 install virtualenv</code>", "<code>-p</code>", "<code>-p</code>", "<code>~/.bashrc</code>", "<code>export VIRTUALENV_PYTHON=/path/to/desired/version\n</code>", "<code>virtualenv</code>", "<code>-p</code>", "<code>export VIRTUALENVWRAPPER_PYTHON=/path/to/desired/version</code>", "<code>virtualenvwrapper</code>", "<code>ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\nbrew install pyenv\npyenv install 2.7.10\npyenv global 2.7.10\nexport PATH=/Users/{USERNAME}/.pyenv/versions/2.7.10/bin:$PATH\nmkvirtualenv -p ~/.pyenv/versions/2.7.10/bin/python  {virtual_env_name}\n</code>", "<code>pip install -r requirements.txt\n</code>", "<code>mkvirtualenv -p ~/.pyenv/versions/2.7.10/bin/python  {virtual_env_name}</code>", "<code>pyenv</code>", "<code>pyenv-virtualenv</code>", "<code>virtualenv -p $(which python2) &lt;path/to/new/virtualenv/&gt;</code>", "<code>mkvirtualenv -p $(which python2) &lt;env_name&gt;</code>", "<code>virtualenv --python=/usr/bin/python3 env\n</code>", "<code>source env/bin/activate\n</code>", "<code>sudo apt-get install python3-minimal\n\nvirtualenv --no-site-packages --distribute -p /usr/bin/python3 ~/.virtualenvs/py3\n</code>", "<code>MacBook-Pro-2:~ admin$ virtualenv venv2 --python=`which python2`\nRunning virtualenv with interpreter /usr/local/bin/python2\nNew python executable in /Users/admin/venv2/bin/python\nInstalling setuptools, pip, wheel...done.\nMacBook-Pro-2:~ admin$ \nMacBook-Pro-2:~ admin$ ls venv2/bin/\nactivate        easy_install        pip2.7          python2.7\nactivate.csh        easy_install-2.7    python          wheel\nactivate.fish       pip         python-config\nactivate_this.py    pip2            python2\nMacBook-Pro-2:~ admin$ \nMacBook-Pro-2:~ admin$ \nMacBook-Pro-2:~ admin$ virtualenv venv3 --python=`which python3`\nRunning virtualenv with interpreter /usr/local/bin/python3\nUsing base prefix '/Library/Frameworks/Python.framework/Versions/3.6'\nNew python executable in /Users/admin/venv3/bin/python3\nAlso creating executable in /Users/admin/venv3/bin/python\nInstalling setuptools, pip, wheel...done.\nMacBook-Pro-2:~ admin$ \nMacBook-Pro-2:~ admin$ ls venv3/bin/\nactivate        easy_install        pip3.6          python3.6\nactivate.csh        easy_install-3.6    python          wheel\nactivate.fish       pip         python-config\nactivate_this.py    pip3            python3\nMacBook-Pro-2:~ admin$ \nMacBook-Pro-2:~ admin$ which python2\n/usr/local/bin/python2\nMacBook-Pro-2:~ admin$ \nMacBook-Pro-2:~ admin$ which python3\n/usr/local/bin/python3\nMacBook-Pro-2:~ admin$ \n</code>"], "path": "stack.django"}, {"tags": ["sql", "algorithm", "recursion", "tree", "hierarchical-data"], "creation_date": 1223657263, "body_markdown": "Assume you have a flat table that stores an ordered tree hierarchy:\r\n\r\n    Id   Name         ParentId   Order\r\n     1   &#39;Node 1&#39;            0      10\r\n     2   &#39;Node 1.1&#39;          1      10\r\n     3   &#39;Node 2&#39;            0      20\r\n     4   &#39;Node 1.1.1&#39;        2      10\r\n     5   &#39;Node 2.1&#39;          3      10\r\n     6   &#39;Node 1.2&#39;          1      20\r\n\r\nHere&#39;s a diagram, where we have `[id] Name`.  Root node 0 is fictional.\r\n&lt;pre&gt;\r\n                       [0] ROOT\r\n                          /    \\ \r\n              [1] Node 1          [3] Node 2\r\n              /       \\                   \\\r\n    [2] Node 1.1     [6] Node 1.2      [5] Node 2.1\r\n          /          \r\n [4] Node 1.1.1\r\n&lt;/pre&gt;\r\n\r\nWhat minimalistic approach would you use to output that to HTML (or text, for that matter) as a correctly ordered, correctly indented tree? \r\n\r\nAssume further you only have basic data structures (arrays and hashmaps), no fancy objects with parent/children references, no ORM, no framework, just your two hands. The table is represented as a result set, which can be accessed randomly. \r\n\r\nPseudo code or plain English is okay, this is purely a conceptional question.\r\n\r\nBonus question: Is there a fundamentally better way to store a tree structure like this in a RDBMS?\r\n\r\n----------\r\n**EDITS AND ADDITIONS**\r\n\r\nTo answer one commenter&#39;s ([Mark Bessey][1]&#39;s) question: A root node is not necessary, because it is never going to be displayed anyway. ParentId = 0 is the convention to express &quot;these are top level&quot;. The Order column defines how nodes with the same parent are going to be sorted.\r\n\r\nThe &quot;result set&quot; I spoke of can be pictured as an array of hashmaps (to stay in that terminology). For my example was meant to be already there. Some answers go the extra mile and construct it first, but thats okay.\r\n\r\nThe tree can be arbitrarily deep. Each node can have N children. I did not exactly have a &quot;millions of entries&quot; tree in mind, though.\r\n\r\nDon&#39;t mistake my choice of node naming (&#39;Node 1.1.1&#39;) for something to rely on. The nodes could equally well be called &#39;Frank&#39; or &#39;Bob&#39;, no naming structure is implied, this was merely to make it readable.\r\n\r\n*I have posted my own solution so you guys can pull it to pieces.*\r\n\r\n  [1]: https://stackoverflow.com/users/17826/mark-bessey", "last_edit_date": 1495541898, "up_vote_count": 448, "link": "https://stackoverflow.com/questions/192220/what-is-the-most-efficient-elegant-way-to-parse-a-flat-table-into-a-tree", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1223657977, "answer_id": 192252, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1223657977, "body_markdown": "Assuming that you know that the root elements are zero, here&#39;s the pseudocode to output to text:\r\n\r\n    function PrintLevel (int curr, int level)\r\n    \t//print the indents\r\n    \tfor (i=1; i&lt;=level; i++)\r\n    \t\tprint a tab\r\n    \tprint curr \\n;\r\n    \tfor each child in the table with a parent of curr\r\n    \t\tPrintLevel (child, level+1)\r\n    \r\n    \r\n    for each elementID where the parentid is zero\r\n    \tPrintLevel(elementID, 0)\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1223658160, "answer_id": 192263, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1223669794, "last_edit_date": 1223669794, "body_markdown": "If nested hash maps or arrays can be created, then I can simply go down the table from the beginning and add each item to the nested array. I must trace each line to the root node in order to know which level in the nested array to insert into. I can employ memoization so that I do not need to look up the same parent over and over again.\r\n\r\nEdit: I would read the entire table into an array first, so it will not query the DB repeatedly. Of course this won&#39;t be practical if your table is very large.\r\n\r\nAfter the structure is built, I must do a depth first traverse through it and print out the HTML.\r\n\r\nThere&#39;s no better fundamental way to store this information using one table (I could be wrong though ;), and would love to see a better solution ). However, if you create a scheme to employ dynamically created db tables, then you opened up a whole new world at the sacrifice of simplicity, and the risk of SQL hell ;)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1223659474, "answer_id": 192348, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1223659474, "body_markdown": "You can emulate any other data structure with a hashmap, so that&#39;s not a terrible limitation.  Scanning from the top to the bottom, you create a hashmap for each row of the database, with an entry for each column. Add each of these hashmaps to a &quot;master&quot; hashmap, keyed on the id. If any node has a &quot;parent&quot; that you haven&#39;t seen yet, create an placeholder entry for it in the master hashmap, and fill it in when you see the actual node.\r\n\r\nTo print it out, do a simple depth-first pass through the data, keeping track of indent level along the way. You can make this easier by keeping a &quot;children&quot; entry for each row, and populating it as you scan the data.\r\n\r\nAs for whether there&#39;s a &quot;better&quot; way to store a tree in a database, that depends on how you&#39;re going to use the data. I&#39;ve seen systems that had a known maximum depth that used a different table for each level in the hierarchy. That makes a lot of sense if the levels in the tree aren&#39;t quite equivalent after all (top level categories being different than the leaves).\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1223660181, "answer_id": 192394, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1223660181, "body_markdown": "Well given the choice, I&#39;d be using objects. I&#39;d create an object for each record where each object has a `children` collection and store them all in an assoc array (/hashtable) where the Id is the key. And blitz through the collection once, adding the children to the relevant children fields. **Simple.**\r\n\r\nBut because you&#39;re being no fun by restricting use of some good OOP, I&#39;d probably iterate based on:\r\n\r\n    function PrintLine(int pID, int level)\r\n        foreach record where ParentID == pID\r\n            print level*tabs + record-data\r\n            PrintLine(record.ID, level + 1)\r\n\r\n    PrintLine(0, 0)\r\n\r\nEdit: this is similar to a couple of other entries, but I think it&#39;s slightly cleaner. One thing I&#39;ll add: this is extremely SQL-intensive. It&#39;s *nasty*. **If you have the choice, go the OOP route.**"}, {"tags": [], "down_vote_count": 3, "creation_date": 1223661487, "answer_id": 192462, "path": "stack.django.answer", "score": 394, "up_vote_count": 397, "is_accepted": true, "last_activity_date": 1514075166, "last_edit_date": 1514075166, "body_markdown": "Now that MySQL 8.0 is nearing release, [all popular SQL databases will support recursive queries][1] in standard syntax.\r\n\r\n    WITH RECURSIVE MyTree AS (\r\n        SELECT * FROM MyTable WHERE ParentId IS NULL\r\n        UNION ALL\r\n        SELECT m.* FROM MyTABLE AS m JOIN MyTree AS t ON m.ParentId = t.Id\r\n    )\r\n    SELECT * FROM MyTree;\r\n\r\nBelow is my original answer from 2008:\r\n\r\n---\r\n\r\nThere are several ways to store tree-structured data in a relational database.  What you show in your example uses two methods:  \r\n\r\n - **Adjacency List** (the &quot;parent&quot; column) and \r\n - **Path Enumeration** (the dotted-numbers in your name column).  \r\n\r\nAnother solution is called **Nested Sets**, and it can be stored in the same table too.  Read &quot;[Trees and Hierarchies in SQL for Smarties][3]&quot; by Joe Celko for a lot more information on these designs.\r\n\r\nI usually prefer a design called **Closure Table** (aka &quot;Adjacency Relation&quot;) for storing tree-structured data.  It requires another table, but then querying trees is pretty easy.\r\n\r\nI cover Closure Table in my presentation [Models for Hierarchical Data with SQL and PHP][4] and in my book [SQL Antipatterns: Avoiding the Pitfalls of Database Programming][5].\r\n\r\n    CREATE TABLE ClosureTable (\r\n      ancestor_id   INT NOT NULL REFERENCES FlatTable(id),\r\n      descendant_id INT NOT NULL REFERENCES FlatTable(id),\r\n      PRIMARY KEY (ancestor_id, descendant_id)\r\n    );\r\n\r\nStore all paths in the Closure Table, where there is a direct ancestry from one node to another.  Include a row for each node to reference itself.  For example, using the data set you showed in your question:\r\n\r\n    INSERT INTO ClosureTable (ancestor_id, descendant_id) VALUES\r\n      (1,1), (1,2), (1,4), (1,6),\r\n      (2,2), (2,4),\r\n      (3,3), (3,5),\r\n      (4,4),\r\n      (5,5),\r\n      (6,6);\r\n\r\nNow you can get a tree starting at node 1 like this:\r\n\r\n    SELECT f.* \r\n    FROM FlatTable f \r\n      JOIN ClosureTable a ON (f.id = a.descendant_id)\r\n    WHERE a.ancestor_id = 1;\r\n\r\nThe output (in MySQL client) looks like the following:\r\n\r\n    +----+\r\n    | id |\r\n    +----+\r\n    |  1 | \r\n    |  2 | \r\n    |  4 | \r\n    |  6 | \r\n    +----+\r\n\r\nIn other words, nodes 3 and 5 are excluded, because they&#39;re part of a separate hierarchy, not descending from node 1.\r\n\r\n---\r\n\r\nRe: comment from e-satis about immediate children (or immediate parent).  You can add a &quot;`path_length`&quot; column to the `ClosureTable` to make it easier to query specifically for an immediate child or parent (or any other distance).\r\n\r\n    INSERT INTO ClosureTable (ancestor_id, descendant_id, path_length) VALUES\r\n      (1,1,0), (1,2,1), (1,4,2), (1,6,1),\r\n      (2,2,0), (2,4,1),\r\n      (3,3,0), (3,5,1),\r\n      (4,4,0),\r\n      (5,5,0),\r\n      (6,6,0);\r\n\r\nThen you can add a term in your search for querying the immediate children of a given node.  These are descendants whose `path_length` is 1.\r\n\r\n    SELECT f.* \r\n    FROM FlatTable f \r\n      JOIN ClosureTable a ON (f.id = a.descendant_id)\r\n    WHERE a.ancestor_id = 1\r\n      AND path_length = 1;\r\n\r\n    +----+\r\n    | id |\r\n    +----+\r\n    |  2 | \r\n    |  6 | \r\n    +----+\r\n\r\n---\r\n\r\nRe comment from @ashraf: &quot;How about sorting the whole tree [by name]?&quot;\r\n\r\nHere&#39;s an example query to return all nodes that are descendants of node 1, join them to the FlatTable that contains other node attributes such as `name`, and sort by the name.\r\n\r\n    SELECT f.name\r\n    FROM FlatTable f \r\n    JOIN ClosureTable a ON (f.id = a.descendant_id)\r\n    WHERE a.ancestor_id = 1\r\n    ORDER BY f.name;\r\n\r\n---\r\n\r\nRe comment from @Nate:\r\n\r\n    SELECT f.name, GROUP_CONCAT(b.ancestor_id order by b.path_length desc) AS breadcrumbs\r\n    FROM FlatTable f \r\n    JOIN ClosureTable a ON (f.id = a.descendant_id) \r\n    JOIN ClosureTable b ON (b.descendant_id = a.descendant_id) \r\n    WHERE a.ancestor_id = 1 \r\n    GROUP BY a.descendant_id \r\n    ORDER BY f.name\r\n\r\n    +------------+-------------+\r\n    | name       | breadcrumbs |\r\n    +------------+-------------+\r\n    | Node 1     | 1           |\r\n    | Node 1.1   | 1,2         |\r\n    | Node 1.1.1 | 1,2,4       |\r\n    | Node 1.2   | 1,6         |\r\n    +------------+-------------+\r\n\r\n---\r\n\r\nA user suggested an edit today. SO moderators approved the edit, but I am reversing it.\r\n\r\nThe edit suggested that the ORDER BY in the last query above should be `ORDER BY b.path_length, f.name`, presumably to make sure the ordering matches the hierarchy. But this doesn&#39;t work, because it would order &quot;Node 1.1.1&quot; after &quot;Node 1.2&quot;.\r\n\r\nIf you want the ordering to match the hierarchy in a sensible way, that is possible, but not simply by ordering by the path length. For example, see my answer to [MySQL Closure Table hierarchical database - How to pull information out in the correct order][6].\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/324935/mysql-with-clause/325243#325243\r\n  [2]: https://en.wikipedia.org/wiki/Hierarchical_and_recursive_queries_in_SQL\r\n  [3]: http://www.amazon.com/Hierarchies-Smarties-Kaufmann-Management-Systems/dp/1558609202/\r\n  [4]: http://www.slideshare.net/billkarwin/models-for-hierarchical-data\r\n  [5]: http://pragprog.com/book/bksqla/sql-antipatterns\r\n  [6]: https://stackoverflow.com/questions/8252323/mysql-closure-table-hierarchical-database-how-to-pull-information-out-in-the-c"}, {"tags": [], "down_vote_count": 0, "creation_date": 1223663129, "answer_id": 192550, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1223663129, "body_markdown": "This was written quickly, and is neither pretty nor efficient (plus it autoboxes alot, converting between `int` and `Integer` is annoying!), but it works.\r\n\r\nIt probably breaks the rules since I&#39;m creating my own objects but hey I&#39;m doing this as a diversion from real work :)\r\n\r\nThis also assumes that the resultSet/table is completely read into some sort of structure before you start building Nodes, which wouldn&#39;t be the best solution if you have hundreds of thousands of rows.\r\n\r\n    public class Node {\r\n    \r\n    \tprivate Node parent = null;\r\n    \r\n    \tprivate List&lt;Node&gt; children;\r\n    \r\n    \tprivate String name;\r\n    \r\n    \tprivate int id = -1;\r\n    \r\n    \tpublic Node(Node parent, int id, String name) {\r\n    \t\tthis.parent = parent;\r\n    \t\tthis.children = new ArrayList&lt;Node&gt;();\r\n    \t\tthis.name = name;\r\n    \t\tthis.id = id;\r\n    \t}\r\n    \r\n    \tpublic int getId() {\r\n    \t\treturn this.id;\r\n    \t}\r\n    \r\n    \tpublic String getName() {\r\n    \t\treturn this.name;\r\n    \t}\r\n    \r\n    \tpublic void addChild(Node child) {\r\n    \t\tchildren.add(child);\r\n    \t}\r\n    \r\n    \tpublic List&lt;Node&gt; getChildren() {\r\n    \t\treturn children;\r\n    \t}\r\n    \r\n    \tpublic boolean isRoot() {\r\n    \t\treturn (this.parent == null);\r\n    \t}\r\n    \r\n    \t@Override\r\n    \tpublic String toString() {\r\n    \t\treturn &quot;id=&quot; + id + &quot;, name=&quot; + name + &quot;, parent=&quot; + parent;\r\n    \t}\r\n    }\r\n    \r\n    public class NodeBuilder {\r\n    \r\n    \tpublic static Node build(List&lt;Map&lt;String, String&gt;&gt; input) {\r\n    \r\n    \t\t// maps id of a node to it&#39;s Node object\r\n    \t\tMap&lt;Integer, Node&gt; nodeMap = new HashMap&lt;Integer, Node&gt;();\r\n    \r\n    \t\t// maps id of a node to the id of it&#39;s parent\r\n    \t\tMap&lt;Integer, Integer&gt; childParentMap = new HashMap&lt;Integer, Integer&gt;();\r\n    \r\n    \t\t// create special &#39;root&#39; Node with id=0\r\n    \t\tNode root = new Node(null, 0, &quot;root&quot;);\r\n    \t\tnodeMap.put(root.getId(), root);\r\n    \r\n    \t\t// iterate thru the input\r\n    \t\tfor (Map&lt;String, String&gt; map : input) {\r\n    \r\n    \t\t\t// expect each Map to have keys for &quot;id&quot;, &quot;name&quot;, &quot;parent&quot; ... a\r\n    \t\t\t// real implementation would read from a SQL object or resultset\r\n    \t\t\tint id = Integer.parseInt(map.get(&quot;id&quot;));\r\n    \t\t\tString name = map.get(&quot;name&quot;);\r\n    \t\t\tint parent = Integer.parseInt(map.get(&quot;parent&quot;));\r\n    \r\n    \t\t\tNode node = new Node(null, id, name);\r\n    \t\t\tnodeMap.put(id, node);\r\n    \r\n    \t\t\tchildParentMap.put(id, parent);\r\n    \t\t}\r\n    \r\n    \t\t// now that each Node is created, setup the child-parent relationships\r\n    \t\tfor (Map.Entry&lt;Integer, Integer&gt; entry : childParentMap.entrySet()) {\r\n    \t\t\tint nodeId = entry.getKey();\r\n    \t\t\tint parentId = entry.getValue();\r\n    \r\n    \t\t\tNode child = nodeMap.get(nodeId);\r\n    \t\t\tNode parent = nodeMap.get(parentId);\r\n    \t\t\tparent.addChild(child);\r\n    \t\t}\r\n    \r\n    \t\treturn root;\r\n    \t}\r\n    }\r\n    \r\n    public class NodePrinter {\r\n    \r\n    \tstatic void printRootNode(Node root) {\r\n    \t\tprintNodes(root, 0);\r\n    \t}\r\n    \r\n    \tstatic void printNodes(Node node, int indentLevel) {\r\n    \r\n    \t\tprintNode(node, indentLevel);\r\n    \t\t// recurse\r\n    \t\tfor (Node child : node.getChildren()) {\r\n    \t\t\tprintNodes(child, indentLevel + 1);\r\n    \t\t}\r\n    \t}\r\n    \r\n    \tstatic void printNode(Node node, int indentLevel) {\r\n    \t\tStringBuilder sb = new StringBuilder();\r\n    \t\tfor (int i = 0; i &lt; indentLevel; i++) {\r\n    \t\t\tsb.append(&quot;\\t&quot;);\r\n    \t\t}\r\n    \t\tsb.append(node);\r\n    \r\n    \t\tSystem.out.println(sb.toString());\r\n    \t}\r\n    \r\n    \tpublic static void main(String[] args) {\r\n    \r\n    \t\t// setup dummy data\r\n    \t\tList&lt;Map&lt;String, String&gt;&gt; resultSet = new ArrayList&lt;Map&lt;String, String&gt;&gt;();\r\n    \t\tresultSet.add(newMap(&quot;1&quot;, &quot;Node 1&quot;, &quot;0&quot;));\r\n    \t\tresultSet.add(newMap(&quot;2&quot;, &quot;Node 1.1&quot;, &quot;1&quot;));\r\n    \t\tresultSet.add(newMap(&quot;3&quot;, &quot;Node 2&quot;, &quot;0&quot;));\r\n    \t\tresultSet.add(newMap(&quot;4&quot;, &quot;Node 1.1.1&quot;, &quot;2&quot;));\r\n    \t\tresultSet.add(newMap(&quot;5&quot;, &quot;Node 2.1&quot;, &quot;3&quot;));\r\n    \t\tresultSet.add(newMap(&quot;6&quot;, &quot;Node 1.2&quot;, &quot;1&quot;));\r\n    \r\n    \t\tNode root = NodeBuilder.build(resultSet);\r\n    \t\tprintRootNode(root);\r\n    \r\n    \t}\r\n    \r\n    \t//convenience method for creating our dummy data\r\n    \tprivate static Map&lt;String, String&gt; newMap(String id, String name, String parentId) {\r\n    \t\tMap&lt;String, String&gt; row = new HashMap&lt;String, String&gt;();\r\n    \t\trow.put(&quot;id&quot;, id);\r\n    \t\trow.put(&quot;name&quot;, name);\r\n    \t\trow.put(&quot;parent&quot;, parentId);\r\n    \t\treturn row;\r\n    \t}\r\n    }\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1223664156, "answer_id": 192603, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1349180001, "last_edit_date": 1349180001, "body_markdown": "To Extend Bill&#39;s SQL solution you can basically do the same using a flat array.  Further more if your strings all have the same lenght and your maximum number of children are known (say in a binary tree) you can do it using a single string (character array).  If you have arbitrary number of children this complicates things a bit...  I would have to check my old notes to see what can be done.\r\n\r\nThen, sacrificing a bit of memory, especially if your tree is sparse and/or unballanced, you can, with a bit of index math, access all the strings randomly by storing your tree, width first in the array like so (for a binary tree):\r\n\r\n    String[] nodeArray = [L0root, L1child1, L1child2, L2Child1, L2Child2, L2Child3, L2Child4] ...\r\n\r\nyo know your string length, you know it&lt;s a binary tree and hence you know how many children can be stored in any given level so with a bit of index math you can always locate randomly the children of a node, or store a node knowing at what level and child umber to put it.\r\n\r\nI&#39;m at work now so cannot spend much time on it but with interest I can fetch a bit of code to do this.  \r\n\r\nWe use to do it to search in binary trees made of DNA codons, a process built the tree, then we flattened it to search text patterns and when found, though index math (revers from above) we get the node back...  very fast and efficient, tough our tree rarely had empty nodes, but we could searh gigabytes of data in a jiffy."}, {"tags": [], "down_vote_count": 0, "creation_date": 1223669181, "answer_id": 192874, "path": "stack.django.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1321369243, "last_edit_date": 1321369243, "body_markdown": "As of Oracle 9i, you can use CONNECT BY.\r\n\r\n    SELECT LPAD(&#39; &#39;, (LEVEL - 1) * 4) || &quot;Name&quot; AS &quot;Name&quot;\r\n    FROM (SELECT * FROM TMP_NODE ORDER BY &quot;Order&quot;)\r\n    CONNECT BY PRIOR &quot;Id&quot; = &quot;ParentId&quot;\r\n    START WITH &quot;Id&quot; IN (SELECT &quot;Id&quot; FROM TMP_NODE WHERE &quot;ParentId&quot; = 0)\r\n\r\nAs of SQL Server 2005, you can use a recursive common table expression (CTE).\r\n\r\n    WITH [NodeList] (\r\n      [Id]\r\n      , [ParentId]\r\n      , [Level]\r\n      , [Order]\r\n    ) AS (\r\n      SELECT [Node].[Id]\r\n        , [Node].[ParentId]\r\n        , 0 AS [Level]\r\n        , CONVERT([varchar](MAX), [Node].[Order]) AS [Order]\r\n      FROM [Node]\r\n      WHERE [Node].[ParentId] = 0\r\n      UNION ALL\r\n      SELECT [Node].[Id]\r\n        , [Node].[ParentId]\r\n        , [NodeList].[Level] + 1 AS [Level]\r\n        , [NodeList].[Order] + &#39;|&#39;\r\n          + CONVERT([varchar](MAX), [Node].[Order]) AS [Order]\r\n      FROM [Node]\r\n        INNER JOIN [NodeList] ON [NodeList].[Id] = [Node].[ParentId]\r\n    ) SELECT REPLICATE(&#39; &#39;, [NodeList].[Level] * 4) + [Node].[Name] AS [Name]\r\n    FROM [Node]\r\n      INNER JOIN [NodeList] ON [NodeList].[Id] = [Node].[Id]\r\n    ORDER BY [NodeList].[Order]\r\n\r\nBoth will output the following results.\r\n\r\n&lt;pre&gt;\r\nName\r\n&#39;Node 1&#39;\r\n&#39;    Node 1.1&#39;\r\n&#39;        Node 1.1.1&#39;\r\n&#39;    Node 1.2&#39;\r\n&#39;Node 2&#39;\r\n&#39;    Node 2.1&#39;\r\n&lt;/pre&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1223675105, "answer_id": 193140, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1223985926, "last_edit_date": 1223985926, "body_markdown": "If elements are in tree order, as shown in your example, you can use something like the following Python example:\r\n\r\n    delimiter = &#39;.&#39;\r\n    stack = []\r\n    for item in items:\r\n      while stack and not item.startswith(stack[-1]+delimiter):\r\n        print &quot;&lt;/div&gt;&quot;\r\n        stack.pop()\r\n      print &quot;&lt;div&gt;&quot;\r\n      print item\r\n      stack.append(item)\r\n\r\nWhat this does is maintain a stack representing the current position in the tree. For each element in the table, it pops stack elements (closing the matching divs) until it finds the parent of the current item. Then it outputs the start of that node and pushes it to the stack.\r\n\r\nIf you want to output the tree using indenting rather than nested elements, you can simply skip the print statements to print the divs, and print a number of spaces equal to some multiple of the size of the stack before each item. For example, in Python:\r\n\r\n    print &quot;  &quot; * len(stack)\r\n\r\nYou could also easily use this method to construct a set of nested lists or dictionaries.\r\n\r\nEdit: I see from your clarification that the names were not intended to be node paths. That suggests an alternate approach:\r\n\r\n    idx = {}\r\n    idx[0] = []\r\n    for node in results:\r\n      child_list = []\r\n      idx[node.Id] = child_list\r\n      idx[node.ParentId].append((node, child_list))\r\n\r\nThis constructs a tree of arrays of tuples(!). idx[0] represents the root(s) of the tree. Each element in an array is a 2-tuple consisting of the node itself and a list of all its children. Once constructed, you can hold on to idx[0] and discard idx, unless you want to access nodes by their ID."}, {"tags": [], "down_vote_count": 1, "creation_date": 1223728282, "answer_id": 194031, "path": "stack.django.answer", "score": 53, "up_vote_count": 54, "is_accepted": false, "last_activity_date": 1321369210, "last_edit_date": 1321369210, "body_markdown": "If you use nested sets (sometimes referred to as Modified Pre-order Tree Traversal) you can extract the entire tree structure or any subtree within it in tree order with a single query, at the cost of inserts being more expensive, as you need to manage columns which describe an in-order path through thee tree structure.\r\n\r\nFor [django-mptt][1], I used a structure like this:\r\n\r\n&lt;pre&gt;\r\nid  parent_id  tree_id  level  lft  rght\r\n--  ---------  -------  -----  ---  ----\r\n 1       null        1      0    1    14\r\n 2          1        1      1    2     7\r\n 3          2        1      2    3     4\r\n 4          2        1      2    5     6\r\n 5          1        1      1    8    13\r\n 6          5        1      2    9    10\r\n 7          5        1      2    11   12\r\n&lt;/pre&gt;\r\n\r\nWhich describes a tree which looks like this (with `id` representing each item):\r\n\r\n&lt;pre&gt;\r\n 1\r\n +-- 2\r\n |   +-- 3\r\n |   +-- 4\r\n |\r\n +-- 5\r\n     +-- 6\r\n     +-- 7\r\n&lt;/pre&gt;\r\n\r\nOr, as a nested set diagram which makes it more obvious how the `lft` and `rght` values work:\r\n\r\n&lt;pre&gt;\r\n __________________________________________________________________________\r\n|  Root 1                                                                  |\r\n|   ________________________________    ________________________________   |\r\n|  |  Child 1.1                     |  |  Child 1.2                     |  |\r\n|  |   ___________    ___________   |  |   ___________    ___________   |  |\r\n|  |  |  C 1.1.1  |  |  C 1.1.2  |  |  |  |  C 1.2.1  |  |  C 1.2.2  |  |  |\r\n1  2  3___________4  5___________6  7  8  9___________10 11__________12 13 14\r\n|  |________________________________|  |________________________________|  |\r\n|__________________________________________________________________________|\r\n&lt;/pre&gt;\r\n\r\nAs you can see, to get the entire subtree for a given node, in tree order, you simply have to select all rows which have `lft` and `rght` values between its `lft` and `rght` values. It&#39;s also simple to retrieve the tree of ancestors for a given node.\r\n\r\nThe `level` column is a bit of denormalisation for convenience more than anything and the `tree_id` column allows you to restart the `lft` and `rght` numbering for each top-level node, which reduces the number of columns affected by inserts, moves and deletions, as the `lft` and `rght` columns have to be adjusted accordingly when these operations take place in order to create or close gaps. I made some [development notes][2] at the time when I was trying to wrap my head around the queries required for each operation.\r\n\r\nIn terms of actually working with this data to display a tree, I created a [`tree_item_iterator`][3] utility function which, for each node, should give you sufficient information to generate whatever kind of display you want.\r\n\r\nMore info about MPTT:\r\n\r\n- [Trees in SQL][4]\r\n- [Storing Hierarchical Data in a Database][5]\r\n- [Managing Hierarchical Data in MySQL][6]\r\n\r\n  [1]: http://code.google.com/p/django-mptt/\r\n  [2]: http://code.google.com/p/django-mptt/source/browse/trunk/NOTES\r\n  [3]: http://code.google.com/p/django-mptt/source/browse/trunk/mptt/utils.py#29\r\n  [4]: http://www.intelligententerprise.com/001020/celko.jhtml\r\n  [5]: http://www.sitepoint.com/print/hierarchical-data-database\r\n  [6]: http://mikehillyer.com/articles/managing-hierarchical-data-in-mysql/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1292992300, "answer_id": 4506178, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1340890033, "last_edit_date": 1340890033, "body_markdown": "Bill&#39;s answer is pretty gosh-darned good, this answer adds some things to it which makes me wish SO supported threaded answers.\r\n\r\nAnyway I wanted to support the tree structure and the Order property.  I included a single property in each Node called `leftSibling` that does the same thing `Order` is meant to do in the original question (maintain left-to-right order).\r\n\r\n&lt;pre&gt;\r\nmysql&gt; desc nodes ;\r\n+-------------+--------------+------+-----+---------+----------------+\r\n| Field       | Type         | Null | Key | Default | Extra          |\r\n+-------------+--------------+------+-----+---------+----------------+\r\n| id          | int(11)      | NO   | PRI | NULL    | auto_increment |\r\n| name        | varchar(255) | YES  |     | NULL    |                |\r\n| leftSibling | int(11)      | NO   |     | 0       |                |\r\n+-------------+--------------+------+-----+---------+----------------+\r\n3 rows in set (0.00 sec)\r\n\r\nmysql&gt; desc adjacencies;\r\n+------------+---------+------+-----+---------+----------------+\r\n| Field      | Type    | Null | Key | Default | Extra          |\r\n+------------+---------+------+-----+---------+----------------+\r\n| relationId | int(11) | NO   | PRI | NULL    | auto_increment |\r\n| parent     | int(11) | NO   |     | NULL    |                |\r\n| child      | int(11) | NO   |     | NULL    |                |\r\n| pathLen    | int(11) | NO   |     | NULL    |                |\r\n+------------+---------+------+-----+---------+----------------+\r\n4 rows in set (0.00 sec)\r\n&lt;/pre&gt;\r\n\r\n&lt;a href=&quot;http://bobobobo.wordpress.com/2010/12/22/closure-table-part-deux-nodes-and-adjacencies-a-tree-in-mysql/&quot;&gt;More detail and SQL code on my blog&lt;/a&gt;.\r\n\r\nThanks Bill your answer was helpful in getting started!\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1353944952, "answer_id": 13568284, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1353954552, "last_edit_date": 1353954552, "body_markdown": "Think about using nosql tools like neo4j for hierarchial structures. \r\ne.g a networked application like linkedin uses couchbase (another nosql solution)\r\n\r\nBut use nosql only for data-mart level queries and not to store / maintain transactions\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1394709561, "answer_id": 22376973, "path": "stack.django.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1394709561, "body_markdown": "It&#39;s a quite old question, but as it&#39;s got many views I think it&#39;s worth to present an alternative, and in my opinion very elegant, solution.\r\n\r\nIn order to read a tree structure you can use **recursive Common Table Expressions** (CTEs). It gives a possibility to fetch whole tree structure at once, have the information about the level of the node, its parent node and order within children of the parent node.\r\n\r\nLet me show you how this would work in PostgreSQL 9.1.\r\n\r\n 1. Create a structure\r\n\r\n        CREATE TABLE tree (\r\n            id int  NOT NULL,\r\n            name varchar(32)  NOT NULL,\r\n            parent_id int  NULL,\r\n            node_order int  NOT NULL,\r\n            CONSTRAINT tree_pk PRIMARY KEY (id),\r\n            CONSTRAINT tree_tree_fk FOREIGN KEY (parent_id) \r\n              REFERENCES tree (id) NOT DEFERRABLE\r\n        );\r\n\r\n\r\n        insert into tree values\r\n          (0, &#39;ROOT&#39;, NULL, 0),\r\n          (1, &#39;Node 1&#39;, 0, 10),\r\n          (2, &#39;Node 1.1&#39;, 1, 10),\r\n          (3, &#39;Node 2&#39;, 0, 20),\r\n          (4, &#39;Node 1.1.1&#39;, 2, 10),\r\n          (5, &#39;Node 2.1&#39;, 3, 10),\r\n          (6, &#39;Node 1.2&#39;, 1, 20);\r\n\r\n 2. Write a query\r\n\r\n\r\n        WITH RECURSIVE \r\n        tree_search (id, name, level, parent_id, node_order) AS (\r\n          SELECT \r\n            id, \r\n            name,\r\n            0,\r\n            parent_id, \r\n            1 \r\n          FROM tree\r\n          WHERE parent_id is NULL\r\n          \r\n          UNION ALL \r\n          SELECT \r\n            t.id, \r\n            t.name,\r\n            ts.level + 1, \r\n            ts.id, \r\n            t.node_order \r\n          FROM tree t, tree_search ts \r\n          WHERE t.parent_id = ts.id \r\n        ) \r\n        SELECT * FROM tree_search \r\n        WHERE level &gt; 0 \r\n        ORDER BY level, parent_id, node_order;\r\n\r\n  Here are the results:\r\n\r\n         id |    name    | level | parent_id | node_order \r\n        ----+------------+-------+-----------+------------\r\n          1 | Node 1     |     1 |         0 |         10\r\n          3 | Node 2     |     1 |         0 |         20\r\n          2 | Node 1.1   |     2 |         1 |         10\r\n          6 | Node 1.2   |     2 |         1 |         20\r\n          5 | Node 2.1   |     2 |         3 |         10\r\n          4 | Node 1.1.1 |     3 |         2 |         10\r\n        (6 rows)\r\n\r\n  The tree nodes are ordered by a level of depth. In the final output we would present them in the subsequent lines.\r\n\r\n  For each level, they are ordered by parent_id and node_order within the parent. This tells us how to present them in the output - link node to the parent in this order.\r\n\r\n  Having such a structure it wouldn&#39;t be difficult to make a really nice presentation in HTML.\r\n  \r\n  Recursive CTEs are available in **PostgreSQL, IBM DB2, MS SQL Server and Oracle**.\r\n  \r\n  If you&#39;d like to read more on recursive SQL queries, you can either check the documentation of your favourite DBMS or read my two articles covering this topic:\r\n  * [Do It In SQL: Recursive Tree Traversal ][1] \r\n  * [Get to know the power of SQL recursive queries][2]\r\n\r\n\r\n  [1]: http://www.vertabelo.com/blog/do-it-in-sql-recursive-tree-traversal\r\n  [2]: http://www.vertabelo.com/blog/sql-recursive-queries"}, {"tags": [], "down_vote_count": 0, "creation_date": 1489481031, "answer_id": 42781302, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1489481031, "body_markdown": "There are really good solutions which exploit the internal btree representation of sql indices. This is based on some great research done back around 1998.\r\n\r\nHere is an example table (in mysql). \r\n\r\n    CREATE TABLE `node` (\r\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n\t  `name` varchar(255) NOT NULL,\r\n\t  `tw` int(10) unsigned NOT NULL,\r\n\t  `pa` int(10) unsigned DEFAULT NULL,\r\n\t  `sz` int(10) unsigned DEFAULT NULL,\r\n\t  `nc` int(11) GENERATED ALWAYS AS (tw+sz) STORED,\r\n\t  PRIMARY KEY (`id`),\r\n\t  KEY `node_tw_index` (`tw`),\r\n\t  KEY `node_pa_index` (`pa`),\r\n\t  KEY `node_nc_index` (`nc`),\r\n\t  CONSTRAINT `node_pa_fk` FOREIGN KEY (`pa`) REFERENCES `node` (`tw`) ON DELETE CASCADE\r\n\t)\r\n\r\nThe only fields necessary for the tree representation are:\r\n\r\n - tw: The Left to Right DFS Pre-order index, where root = 1.\r\n - pa: The reference (using tw) to the parent node, root has null.\r\n - sz: The size of the node&#39;s branch including itself. \r\n - nc: is used as syntactic sugar. it is tw+nc and represents the tw of the node&#39;s &quot;next child&quot;.\r\n\r\nHere is an example 24 node population, ordered by tw:\r\n\r\n    +-----+---------+----+------+------+------+\r\n    | id  | name    | tw | pa   | sz   | nc   |\r\n    +-----+---------+----+------+------+------+\r\n    |   1 | Root    |  1 | NULL |   24 |   25 |\r\n    |   2 | A       |  2 |    1 |   14 |   16 |\r\n    |   3 | AA      |  3 |    2 |    1 |    4 |\r\n    |   4 | AB      |  4 |    2 |    7 |   11 |\r\n    |   5 | ABA     |  5 |    4 |    1 |    6 |\r\n    |   6 | ABB     |  6 |    4 |    3 |    9 |\r\n    |   7 | ABBA    |  7 |    6 |    1 |    8 |\r\n    |   8 | ABBB    |  8 |    6 |    1 |    9 |\r\n    |   9 | ABC     |  9 |    4 |    2 |   11 |\r\n    |  10 | ABCD    | 10 |    9 |    1 |   11 |\r\n    |  11 | AC      | 11 |    2 |    4 |   15 |\r\n    |  12 | ACA     | 12 |   11 |    2 |   14 |\r\n    |  13 | ACAA    | 13 |   12 |    1 |   14 |\r\n    |  14 | ACB     | 14 |   11 |    1 |   15 |\r\n    |  15 | AD      | 15 |    2 |    1 |   16 |\r\n    |  16 | B       | 16 |    1 |    1 |   17 |\r\n    |  17 | C       | 17 |    1 |    6 |   23 |\r\n    | 359 | C0      | 18 |   17 |    5 |   23 |\r\n    | 360 | C1      | 19 |   18 |    4 |   23 |\r\n    | 361 | C2(res) | 20 |   19 |    3 |   23 |\r\n    | 362 | C3      | 21 |   20 |    2 |   23 |\r\n    | 363 | C4      | 22 |   21 |    1 |   23 |\r\n    |  18 | D       | 23 |    1 |    1 |   24 |\r\n    |  19 | E       | 24 |    1 |    1 |   25 |\r\n    +-----+---------+----+------+------+------+\r\n\r\n\r\nEvery tree result can be done non-recursively.\r\nFor instance, to get a list of ancestors of node at tw=&#39;22&#39;\r\n\r\n**Ancestors**\r\n\r\n    select anc.* from node me,node anc \r\n    where me.tw=22 and anc.nc &gt;= me.tw and anc.tw &lt;= me.tw \r\n    order by anc.tw;\r\n    +-----+---------+----+------+------+------+\r\n    | id  | name    | tw | pa   | sz   | nc   |\r\n    +-----+---------+----+------+------+------+\r\n    |   1 | Root    |  1 | NULL |   24 |   25 |\r\n    |  17 | C       | 17 |    1 |    6 |   23 |\r\n    | 359 | C0      | 18 |   17 |    5 |   23 |\r\n    | 360 | C1      | 19 |   18 |    4 |   23 |\r\n    | 361 | C2(res) | 20 |   19 |    3 |   23 |\r\n    | 362 | C3      | 21 |   20 |    2 |   23 |\r\n    | 363 | C4      | 22 |   21 |    1 |   23 |\r\n    +-----+---------+----+------+------+------+\r\n\r\nSiblings and children are trivial - just use pa field ordering by tw.\r\n\r\n**Descendants**\r\n\r\nFor example the set (branch) of nodes that are rooted at tw = 17.\r\n\r\n    select des.* from node me,node des \r\n    where me.tw=17 and des.tw &lt; me.nc and des.tw &gt;= me.tw \r\n    order by des.tw;\r\n    +-----+---------+----+------+------+------+\r\n    | id  | name    | tw | pa   | sz   | nc   |\r\n    +-----+---------+----+------+------+------+\r\n    |  17 | C       | 17 |    1 |    6 |   23 |\r\n    | 359 | C0      | 18 |   17 |    5 |   23 |\r\n    | 360 | C1      | 19 |   18 |    4 |   23 |\r\n    | 361 | C2(res) | 20 |   19 |    3 |   23 |\r\n    | 362 | C3      | 21 |   20 |    2 |   23 |\r\n    | 363 | C4      | 22 |   21 |    1 |   23 |\r\n    +-----+---------+----+------+------+------+\r\n\r\n**Additional Notes**\r\n\r\nThis methodology is extremely useful for when there are a far greater number of reads than there are inserts or updates.  \r\n\r\nBecause the insertion, movement, or updating of a node in the tree requires the tree to be adjusted, it is necessary to lock the table before commencing with the action.\r\n\r\nThe insertion/deletion cost is high because the tw index and sz (branch size) values will need to be updated on all the nodes after the insertion point, and for all ancestors respectively.\r\n\r\nBranch moving involves moving the tw value of the branch out of range, so it is also necessary to disable foreign key constraints when moving a branch.  There are, essentially four queries required to move a branch:\r\n\r\n - Move the branch out of range.\r\n - Close the gap that it left. (the remaining tree is now normalised).\r\n - Open the gap where it will go to.\r\n - Move the branch into it&#39;s new position.\r\n\r\n**Adjust Tree Queries**\r\n\r\nThe opening/closing of gaps in the tree is an important sub-function used by create/update/delete methods, so I include it here.\r\n\r\nWe need two parameters - a flag representing whether or not we are downsizing or upsizing, and the node&#39;s tw index. So, for example tw=18 (which has a branch size of 5). Let&#39;s assume that we are downsizing (removing tw) - this means that we are using &#39;-&#39; instead of &#39;+&#39; in the updates of the following example.\r\n\r\nWe first use a (slightly altered) ancestor function to update the sz value.\r\n\r\n    update node me, node anc set anc.sz = anc.sz - me.sz from \r\n    node me, node anc where me.tw=18 \r\n    and ((anc.nc &gt;= me.tw and anc.tw &lt; me.pa) or (anc.tw=me.pa));\r\n\r\nThen we need to adjust the tw for those whose tw is higher than the branch to be removed.\r\n\r\n    update node me, node anc set anc.tw = anc.tw - me.sz from \r\n    node me, node anc where me.tw=18 and anc.tw &gt;= me.tw;\r\n\r\nThen we need to adjust the parent for those whose pa&#39;s tw is higher than the branch to be removed.\r\n\r\n    update node me, node anc set anc.pa = anc.pa - me.sz from \r\n    node me, node anc where me.tw=18 and anc.pa &gt;= me.tw;\r\n\r\n\r\n\r\n\r\n"}], "title": "What is the most efficient/elegant way to parse a flat table into a tree?", "view_count": 90596, "answer_count": 14, "code_snippet": ["<code>Id   Name         ParentId   Order\n 1   'Node 1'            0      10\n 2   'Node 1.1'          1      10\n 3   'Node 2'            0      20\n 4   'Node 1.1.1'        2      10\n 5   'Node 2.1'          3      10\n 6   'Node 1.2'          1      20\n</code>", "<code>[id] Name</code>", "<code>WITH RECURSIVE MyTree AS (\n    SELECT * FROM MyTable WHERE ParentId IS NULL\n    UNION ALL\n    SELECT m.* FROM MyTABLE AS m JOIN MyTree AS t ON m.ParentId = t.Id\n)\nSELECT * FROM MyTree;\n</code>", "<code>CREATE TABLE ClosureTable (\n  ancestor_id   INT NOT NULL REFERENCES FlatTable(id),\n  descendant_id INT NOT NULL REFERENCES FlatTable(id),\n  PRIMARY KEY (ancestor_id, descendant_id)\n);\n</code>", "<code>INSERT INTO ClosureTable (ancestor_id, descendant_id) VALUES\n  (1,1), (1,2), (1,4), (1,6),\n  (2,2), (2,4),\n  (3,3), (3,5),\n  (4,4),\n  (5,5),\n  (6,6);\n</code>", "<code>SELECT f.* \nFROM FlatTable f \n  JOIN ClosureTable a ON (f.id = a.descendant_id)\nWHERE a.ancestor_id = 1;\n</code>", "<code>+----+\n| id |\n+----+\n|  1 | \n|  2 | \n|  4 | \n|  6 | \n+----+\n</code>", "<code>path_length</code>", "<code>ClosureTable</code>", "<code>INSERT INTO ClosureTable (ancestor_id, descendant_id, path_length) VALUES\n  (1,1,0), (1,2,1), (1,4,2), (1,6,1),\n  (2,2,0), (2,4,1),\n  (3,3,0), (3,5,1),\n  (4,4,0),\n  (5,5,0),\n  (6,6,0);\n</code>", "<code>path_length</code>", "<code>SELECT f.* \nFROM FlatTable f \n  JOIN ClosureTable a ON (f.id = a.descendant_id)\nWHERE a.ancestor_id = 1\n  AND path_length = 1;\n\n+----+\n| id |\n+----+\n|  2 | \n|  6 | \n+----+\n</code>", "<code>name</code>", "<code>SELECT f.name\nFROM FlatTable f \nJOIN ClosureTable a ON (f.id = a.descendant_id)\nWHERE a.ancestor_id = 1\nORDER BY f.name;\n</code>", "<code>SELECT f.name, GROUP_CONCAT(b.ancestor_id order by b.path_length desc) AS breadcrumbs\nFROM FlatTable f \nJOIN ClosureTable a ON (f.id = a.descendant_id) \nJOIN ClosureTable b ON (b.descendant_id = a.descendant_id) \nWHERE a.ancestor_id = 1 \nGROUP BY a.descendant_id \nORDER BY f.name\n\n+------------+-------------+\n| name       | breadcrumbs |\n+------------+-------------+\n| Node 1     | 1           |\n| Node 1.1   | 1,2         |\n| Node 1.1.1 | 1,2,4       |\n| Node 1.2   | 1,6         |\n+------------+-------------+\n</code>", "<code>ORDER BY b.path_length, f.name</code>", "<code>parent_id</code>", "<code>id</code>", "<code>lft</code>", "<code>rght</code>", "<code>lft</code>", "<code>rght</code>", "<code>lft</code>", "<code>rght</code>", "<code>level</code>", "<code>tree_id</code>", "<code>lft</code>", "<code>rght</code>", "<code>lft</code>", "<code>rght</code>", "<code>tree_item_iterator</code>", "<code>lft</code>", "<code>rght</code>", "<code>SELECT LPAD(' ', (LEVEL - 1) * 4) || \"Name\" AS \"Name\"\nFROM (SELECT * FROM TMP_NODE ORDER BY \"Order\")\nCONNECT BY PRIOR \"Id\" = \"ParentId\"\nSTART WITH \"Id\" IN (SELECT \"Id\" FROM TMP_NODE WHERE \"ParentId\" = 0)\n</code>", "<code>WITH [NodeList] (\n  [Id]\n  , [ParentId]\n  , [Level]\n  , [Order]\n) AS (\n  SELECT [Node].[Id]\n    , [Node].[ParentId]\n    , 0 AS [Level]\n    , CONVERT([varchar](MAX), [Node].[Order]) AS [Order]\n  FROM [Node]\n  WHERE [Node].[ParentId] = 0\n  UNION ALL\n  SELECT [Node].[Id]\n    , [Node].[ParentId]\n    , [NodeList].[Level] + 1 AS [Level]\n    , [NodeList].[Order] + '|'\n      + CONVERT([varchar](MAX), [Node].[Order]) AS [Order]\n  FROM [Node]\n    INNER JOIN [NodeList] ON [NodeList].[Id] = [Node].[ParentId]\n) SELECT REPLICATE(' ', [NodeList].[Level] * 4) + [Node].[Name] AS [Name]\nFROM [Node]\n  INNER JOIN [NodeList] ON [NodeList].[Id] = [Node].[Id]\nORDER BY [NodeList].[Order]\n</code>", "<code>CREATE TABLE tree (\n    id int  NOT NULL,\n    name varchar(32)  NOT NULL,\n    parent_id int  NULL,\n    node_order int  NOT NULL,\n    CONSTRAINT tree_pk PRIMARY KEY (id),\n    CONSTRAINT tree_tree_fk FOREIGN KEY (parent_id) \n      REFERENCES tree (id) NOT DEFERRABLE\n);\n\n\ninsert into tree values\n  (0, 'ROOT', NULL, 0),\n  (1, 'Node 1', 0, 10),\n  (2, 'Node 1.1', 1, 10),\n  (3, 'Node 2', 0, 20),\n  (4, 'Node 1.1.1', 2, 10),\n  (5, 'Node 2.1', 3, 10),\n  (6, 'Node 1.2', 1, 20);\n</code>", "<code>WITH RECURSIVE \ntree_search (id, name, level, parent_id, node_order) AS (\n  SELECT \n    id, \n    name,\n    0,\n    parent_id, \n    1 \n  FROM tree\n  WHERE parent_id is NULL\n\n  UNION ALL \n  SELECT \n    t.id, \n    t.name,\n    ts.level + 1, \n    ts.id, \n    t.node_order \n  FROM tree t, tree_search ts \n  WHERE t.parent_id = ts.id \n) \nSELECT * FROM tree_search \nWHERE level &gt; 0 \nORDER BY level, parent_id, node_order;\n</code>", "<code> id |    name    | level | parent_id | node_order \n----+------------+-------+-----------+------------\n  1 | Node 1     |     1 |         0 |         10\n  3 | Node 2     |     1 |         0 |         20\n  2 | Node 1.1   |     2 |         1 |         10\n  6 | Node 1.2   |     2 |         1 |         20\n  5 | Node 2.1   |     2 |         3 |         10\n  4 | Node 1.1.1 |     3 |         2 |         10\n(6 rows)\n</code>", "<code>leftSibling</code>", "<code>Order</code>", "<code>children</code>", "<code>function PrintLine(int pID, int level)\n    foreach record where ParentID == pID\n        print level*tabs + record-data\n        PrintLine(record.ID, level + 1)\n\nPrintLine(0, 0)\n</code>", "<code>int</code>", "<code>Integer</code>", "<code>public class Node {\n\n    private Node parent = null;\n\n    private List&lt;Node&gt; children;\n\n    private String name;\n\n    private int id = -1;\n\n    public Node(Node parent, int id, String name) {\n        this.parent = parent;\n        this.children = new ArrayList&lt;Node&gt;();\n        this.name = name;\n        this.id = id;\n    }\n\n    public int getId() {\n        return this.id;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public void addChild(Node child) {\n        children.add(child);\n    }\n\n    public List&lt;Node&gt; getChildren() {\n        return children;\n    }\n\n    public boolean isRoot() {\n        return (this.parent == null);\n    }\n\n    @Override\n    public String toString() {\n        return \"id=\" + id + \", name=\" + name + \", parent=\" + parent;\n    }\n}\n\npublic class NodeBuilder {\n\n    public static Node build(List&lt;Map&lt;String, String&gt;&gt; input) {\n\n        // maps id of a node to it's Node object\n        Map&lt;Integer, Node&gt; nodeMap = new HashMap&lt;Integer, Node&gt;();\n\n        // maps id of a node to the id of it's parent\n        Map&lt;Integer, Integer&gt; childParentMap = new HashMap&lt;Integer, Integer&gt;();\n\n        // create special 'root' Node with id=0\n        Node root = new Node(null, 0, \"root\");\n        nodeMap.put(root.getId(), root);\n\n        // iterate thru the input\n        for (Map&lt;String, String&gt; map : input) {\n\n            // expect each Map to have keys for \"id\", \"name\", \"parent\" ... a\n            // real implementation would read from a SQL object or resultset\n            int id = Integer.parseInt(map.get(\"id\"));\n            String name = map.get(\"name\");\n            int parent = Integer.parseInt(map.get(\"parent\"));\n\n            Node node = new Node(null, id, name);\n            nodeMap.put(id, node);\n\n            childParentMap.put(id, parent);\n        }\n\n        // now that each Node is created, setup the child-parent relationships\n        for (Map.Entry&lt;Integer, Integer&gt; entry : childParentMap.entrySet()) {\n            int nodeId = entry.getKey();\n            int parentId = entry.getValue();\n\n            Node child = nodeMap.get(nodeId);\n            Node parent = nodeMap.get(parentId);\n            parent.addChild(child);\n        }\n\n        return root;\n    }\n}\n\npublic class NodePrinter {\n\n    static void printRootNode(Node root) {\n        printNodes(root, 0);\n    }\n\n    static void printNodes(Node node, int indentLevel) {\n\n        printNode(node, indentLevel);\n        // recurse\n        for (Node child : node.getChildren()) {\n            printNodes(child, indentLevel + 1);\n        }\n    }\n\n    static void printNode(Node node, int indentLevel) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i &lt; indentLevel; i++) {\n            sb.append(\"\\t\");\n        }\n        sb.append(node);\n\n        System.out.println(sb.toString());\n    }\n\n    public static void main(String[] args) {\n\n        // setup dummy data\n        List&lt;Map&lt;String, String&gt;&gt; resultSet = new ArrayList&lt;Map&lt;String, String&gt;&gt;();\n        resultSet.add(newMap(\"1\", \"Node 1\", \"0\"));\n        resultSet.add(newMap(\"2\", \"Node 1.1\", \"1\"));\n        resultSet.add(newMap(\"3\", \"Node 2\", \"0\"));\n        resultSet.add(newMap(\"4\", \"Node 1.1.1\", \"2\"));\n        resultSet.add(newMap(\"5\", \"Node 2.1\", \"3\"));\n        resultSet.add(newMap(\"6\", \"Node 1.2\", \"1\"));\n\n        Node root = NodeBuilder.build(resultSet);\n        printRootNode(root);\n\n    }\n\n    //convenience method for creating our dummy data\n    private static Map&lt;String, String&gt; newMap(String id, String name, String parentId) {\n        Map&lt;String, String&gt; row = new HashMap&lt;String, String&gt;();\n        row.put(\"id\", id);\n        row.put(\"name\", name);\n        row.put(\"parent\", parentId);\n        return row;\n    }\n}\n</code>", "<code>function PrintLevel (int curr, int level)\n    //print the indents\n    for (i=1; i&lt;=level; i++)\n        print a tab\n    print curr \\n;\n    for each child in the table with a parent of curr\n        PrintLevel (child, level+1)\n\n\nfor each elementID where the parentid is zero\n    PrintLevel(elementID, 0)\n</code>", "<code>CREATE TABLE `node` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) NOT NULL,\n  `tw` int(10) unsigned NOT NULL,\n  `pa` int(10) unsigned DEFAULT NULL,\n  `sz` int(10) unsigned DEFAULT NULL,\n  `nc` int(11) GENERATED ALWAYS AS (tw+sz) STORED,\n  PRIMARY KEY (`id`),\n  KEY `node_tw_index` (`tw`),\n  KEY `node_pa_index` (`pa`),\n  KEY `node_nc_index` (`nc`),\n  CONSTRAINT `node_pa_fk` FOREIGN KEY (`pa`) REFERENCES `node` (`tw`) ON DELETE CASCADE\n)\n</code>", "<code>+-----+---------+----+------+------+------+\n| id  | name    | tw | pa   | sz   | nc   |\n+-----+---------+----+------+------+------+\n|   1 | Root    |  1 | NULL |   24 |   25 |\n|   2 | A       |  2 |    1 |   14 |   16 |\n|   3 | AA      |  3 |    2 |    1 |    4 |\n|   4 | AB      |  4 |    2 |    7 |   11 |\n|   5 | ABA     |  5 |    4 |    1 |    6 |\n|   6 | ABB     |  6 |    4 |    3 |    9 |\n|   7 | ABBA    |  7 |    6 |    1 |    8 |\n|   8 | ABBB    |  8 |    6 |    1 |    9 |\n|   9 | ABC     |  9 |    4 |    2 |   11 |\n|  10 | ABCD    | 10 |    9 |    1 |   11 |\n|  11 | AC      | 11 |    2 |    4 |   15 |\n|  12 | ACA     | 12 |   11 |    2 |   14 |\n|  13 | ACAA    | 13 |   12 |    1 |   14 |\n|  14 | ACB     | 14 |   11 |    1 |   15 |\n|  15 | AD      | 15 |    2 |    1 |   16 |\n|  16 | B       | 16 |    1 |    1 |   17 |\n|  17 | C       | 17 |    1 |    6 |   23 |\n| 359 | C0      | 18 |   17 |    5 |   23 |\n| 360 | C1      | 19 |   18 |    4 |   23 |\n| 361 | C2(res) | 20 |   19 |    3 |   23 |\n| 362 | C3      | 21 |   20 |    2 |   23 |\n| 363 | C4      | 22 |   21 |    1 |   23 |\n|  18 | D       | 23 |    1 |    1 |   24 |\n|  19 | E       | 24 |    1 |    1 |   25 |\n+-----+---------+----+------+------+------+\n</code>", "<code>select anc.* from node me,node anc \nwhere me.tw=22 and anc.nc &gt;= me.tw and anc.tw &lt;= me.tw \norder by anc.tw;\n+-----+---------+----+------+------+------+\n| id  | name    | tw | pa   | sz   | nc   |\n+-----+---------+----+------+------+------+\n|   1 | Root    |  1 | NULL |   24 |   25 |\n|  17 | C       | 17 |    1 |    6 |   23 |\n| 359 | C0      | 18 |   17 |    5 |   23 |\n| 360 | C1      | 19 |   18 |    4 |   23 |\n| 361 | C2(res) | 20 |   19 |    3 |   23 |\n| 362 | C3      | 21 |   20 |    2 |   23 |\n| 363 | C4      | 22 |   21 |    1 |   23 |\n+-----+---------+----+------+------+------+\n</code>", "<code>select des.* from node me,node des \nwhere me.tw=17 and des.tw &lt; me.nc and des.tw &gt;= me.tw \norder by des.tw;\n+-----+---------+----+------+------+------+\n| id  | name    | tw | pa   | sz   | nc   |\n+-----+---------+----+------+------+------+\n|  17 | C       | 17 |    1 |    6 |   23 |\n| 359 | C0      | 18 |   17 |    5 |   23 |\n| 360 | C1      | 19 |   18 |    4 |   23 |\n| 361 | C2(res) | 20 |   19 |    3 |   23 |\n| 362 | C3      | 21 |   20 |    2 |   23 |\n| 363 | C4      | 22 |   21 |    1 |   23 |\n+-----+---------+----+------+------+------+\n</code>", "<code>update node me, node anc set anc.sz = anc.sz - me.sz from \nnode me, node anc where me.tw=18 \nand ((anc.nc &gt;= me.tw and anc.tw &lt; me.pa) or (anc.tw=me.pa));\n</code>", "<code>update node me, node anc set anc.tw = anc.tw - me.sz from \nnode me, node anc where me.tw=18 and anc.tw &gt;= me.tw;\n</code>", "<code>update node me, node anc set anc.pa = anc.pa - me.sz from \nnode me, node anc where me.tw=18 and anc.pa &gt;= me.tw;\n</code>", "<code>delimiter = '.'\nstack = []\nfor item in items:\n  while stack and not item.startswith(stack[-1]+delimiter):\n    print \"&lt;/div&gt;\"\n    stack.pop()\n  print \"&lt;div&gt;\"\n  print item\n  stack.append(item)\n</code>", "<code>print \"  \" * len(stack)\n</code>", "<code>idx = {}\nidx[0] = []\nfor node in results:\n  child_list = []\n  idx[node.Id] = child_list\n  idx[node.ParentId].append((node, child_list))\n</code>", "<code>String[] nodeArray = [L0root, L1child1, L1child2, L2Child1, L2Child2, L2Child3, L2Child4] ...\n</code>"], "path": "stack.django"}, {"tags": ["django", "django-views", "django-staticfiles"], "creation_date": 1304106377, "body_markdown": "Am building an app using Django as my workhorse. All has been well so far - specified db settings, configured static directories, urls, views etc. But trouble started sneaking in the moment I wanted to render my own beautiful and custom 404.html and 500.html pages.\r\n\r\nI read the docs on custom error handling, and set necessary configurations in UrlsConf, created corresponding views and added the 404.html and the 500.html to my app&#39;s template directory (specified in the settings.py too).\r\n\r\nBut the docs say `you can actually view custom error views until Debug is Off`, so I did turn it off to test my stuff, and that&#39;s when stuff goes berserk!\r\n\r\nNot only do I fail to view the custom 404.html (actually, it loads, but because my error pages each contain a graphic error message -as some nice image), the source of the erro page loads, but nothing else loads! Not even linked CSS or Javascript!\r\n\r\nGenerally, once I set `DEBUG = False`, all views will load, but any linked content (CSS, Javascript, Images, etc) wont load! What&#39;s happening? Is there something am missing about `Static files` and the `Debug setting`?", "last_edit_date": 1487560072, "up_vote_count": 217, "link": "https://stackoverflow.com/questions/5836674/why-does-debug-false-setting-make-my-django-static-files-access-fail", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1304106780, "answer_id": 5836722, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1304107099, "last_edit_date": 1304107099, "body_markdown": "If you are using the static serve view in development, you have to have DEBUG = True :\r\n\r\n&gt; Warning\r\n&gt; \r\n&gt; This will only work if DEBUG is True.\r\n&gt; \r\n&gt; That&#39;s because this view is grossly\r\n&gt; inefficient and probably insecure.\r\n&gt; This is only intended for local\r\n&gt; development, and should never be used\r\n&gt; in production.\r\n\r\n[Docs: serving static files in developent][1]\r\n\r\nEDIT: You could add some urls just to test your 404 and 500 templates, just use the generic view direct_to_template in your urls.\r\n\r\n    from django.views.generic.simple import direct_to_template\r\n    \r\n    urlpatterns = patterns(&#39;&#39;,\r\n        (&#39;^404testing/$&#39;, direct_to_template, {&#39;template&#39;: &#39;404.html&#39;})\r\n    )\r\n\r\n  [1]: http://docs.djangoproject.com/en/1.3/howto/static-files/#serving-static-files-in-development"}, {"tags": [], "down_vote_count": 1, "creation_date": 1304106829, "answer_id": 5836728, "path": "stack.django.answer", "score": 220, "up_vote_count": 221, "is_accepted": true, "last_activity_date": 1304106829, "body_markdown": "With debug turned off Django won&#39;t handle static files for you any more - your production web server (Apache or something) should take care of that."}, {"tags": [], "down_vote_count": 0, "creation_date": 1317668241, "answer_id": 7639376, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1517059753, "last_edit_date": 1517059753, "body_markdown": "You can debug this in many different ways. Here&#39;s my approach.\r\n\r\nlocalsettings.py:\r\n\r\n    DEBUG = False\r\n    DEBUG404 = True\r\n\r\nurls.py:\r\n\r\n    from django.conf import settings\r\n    import os\r\n    \r\n    if settings.DEBUG404:\r\n        urlpatterns += patterns(&#39;&#39;,\r\n            (r&#39;^static/(?P&lt;path&gt;.*)$&#39;, &#39;django.views.static.serve&#39;,\r\n             {&#39;document_root&#39;: os.path.join(os.path.dirname(__file__), &#39;static&#39;)} ),\r\n        )\r\n\r\nBe sure to read the docs ;)\r\n\r\nhttps://docs.djangoproject.com/en/1.2/howto/static-files/#limiting-use-to-debug-true\r\n\r\n**Update**\r\nLink for django 2.0 though\r\nhttps://docs.djangoproject.com/en/2.0/howto/static-files/#limiting-use-to-debug-true"}, {"tags": [], "down_vote_count": 0, "creation_date": 1317671715, "answer_id": 7639983, "path": "stack.django.answer", "score": 353, "up_vote_count": 353, "is_accepted": false, "last_activity_date": 1317671715, "body_markdown": "If you still need to server static locally (e.g. for testing without debug) you can run devserver in insecure mode:\r\n\r\n    manage.py runserver --insecure"}, {"tags": [], "down_vote_count": 0, "creation_date": 1410688806, "answer_id": 25832103, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1410688806, "body_markdown": "You actually can serve static files in a production Django app, securely and without `DEBUG=True`.\r\n\r\nRather than using Django itself, use [dj_static](http://www.kennethreitz.org/essays/introducing-dj-static) in your WSGI file ([github](https://github.com/kennethreitz/dj-static)):\r\n\r\n    # requirements.txt:\r\n\r\n    ...\r\n    dj-static==0.0.6\r\n\r\n\r\n    # YOURAPP/settings.py:\r\n\r\n    ...\r\n    STATIC_ROOT = &#39;staticdir&#39;\r\n    STATIC_URL = &#39;/staticpath/&#39;\r\n\r\n    # YOURAPP/wsgi.py:\r\n\r\n    ...\r\n    from django.core.wsgi import get_wsgi_application\r\n    from dj_static import Cling\r\n\r\n    application = Cling(get_wsgi_application())\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1453287042, "answer_id": 34897952, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1453287042, "body_markdown": "Support for string view arguments to url() is deprecated and will be removed in Django 1.10\r\n\r\nMy solution is just small correction to Conrado solution above.\r\n\r\n    from django.conf import settings\r\n    import os\r\n    from django.views.static import serve as staticserve\r\n\r\n    if settings.DEBUG404:\r\n        urlpatterns += patterns(&#39;&#39;,\r\n            (r&#39;^static/(?P&lt;path&gt;.*)$&#39;, staticserve,\r\n                {&#39;document_root&#39;: os.path.join(os.path.dirname(__file__), &#39;static&#39;)} ),\r\n            )"}, {"tags": [], "down_vote_count": 1, "creation_date": 1455537475, "answer_id": 35408791, "path": "stack.django.answer", "score": 15, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1455537992, "last_edit_date": 1455537992, "body_markdown": "You can use [WhiteNoise][1] to serve static files in production.\r\n\r\nInstall:\r\n\r\n    pip install WhiteNoise\r\n\r\nAnd change your **wsgi.py** file to this:\r\n\r\n    from django.core.wsgi import get_wsgi_application\r\n    from whitenoise.django import DjangoWhiteNoise\r\n\r\n    application = get_wsgi_application()\r\n    application = DjangoWhiteNoise(application)\r\n\r\nAnd you&#39;re good to go!\r\n\r\nCredit to [Handlebar Creative Blog][2].\r\n\r\n\r\n  [1]: http://whitenoise.evans.io/en/stable/\r\n  [2]: http://handlebarcreative.tumblr.com/post/104881545637/deploying-django-applications-in-docker"}, {"tags": [], "down_vote_count": 2, "creation_date": 1462745142, "answer_id": 37105325, "path": "stack.django.answer", "score": 4, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1470381406, "last_edit_date": 1470381406, "body_markdown": "Just open your project urls.py, then find this if statement.\r\n\r\n    if settings.DEBUG:\r\n        urlpatterns += patterns(\r\n            &#39;django.views.static&#39;,\r\n            (r&#39;^media/(?P&lt;path&gt;.*)&#39;,&#39;serve&#39;,{&#39;document_root&#39;: settings.MEDIA_ROOT}), )\r\n\r\nYou can change settings.DEBUG on True and it will work always. But if your project is a something serious then you should to think about other solutions mentioned above. \r\n\r\n    if True:\r\n        urlpatterns += patterns(\r\n            &#39;django.views.static&#39;,\r\n            (r&#39;^media/(?P&lt;path&gt;.*)&#39;,&#39;serve&#39;,{&#39;document_root&#39;: settings.MEDIA_ROOT}), )\r\n\r\nIn django 1.10 you can write so:\r\n\r\n    urlpatterns += [ url(r&#39;^media/(?P&lt;path&gt;.*)$&#39;, serve, { &#39;document_root&#39;: settings.MEDIA_ROOT, }), url(r&#39;^static/(?P&lt;path&gt;.*)$&#39;, serve, { &#39;document_root&#39;: settings.STATIC_ROOT }), ]"}, {"tags": [], "down_vote_count": 1, "creation_date": 1477754136, "answer_id": 40320540, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1477765900, "last_edit_date": 1477765900, "body_markdown": "Although it&#39;s not safest, but you can change in the source code. navigate to `Python/2.7/site-packages/django/conf/urls/static.py`\r\n\r\nThen edit like following:\r\n\r\n    if settings.DEBUG or (prefix and &#39;://&#39; in prefix):\r\n\r\nSo then if `settings.debug==False` it won&#39;t effect on the code, also after running try `python manage.py runserver --runserver` to run static files.\r\n\r\n**NOTE**: Information should only be used for testing only"}], "title": "Why does DEBUG=False setting make my django Static Files Access fail?", "view_count": 66932, "answer_count": 9, "code_snippet": ["<code>you can actually view custom error views until Debug is Off</code>", "<code>DEBUG = False</code>", "<code>Static files</code>", "<code>Debug setting</code>", "<code>manage.py runserver --insecure\n</code>", "<code>./manage.py: error: no such option: --insecure </code>", "<code>pip install WhiteNoise\n</code>", "<code>from django.core.wsgi import get_wsgi_application\nfrom whitenoise.django import DjangoWhiteNoise\n\napplication = get_wsgi_application()\napplication = DjangoWhiteNoise(application)\n</code>", "<code>from django.views.generic.simple import direct_to_template\n\nurlpatterns = patterns('',\n    ('^404testing/$', direct_to_template, {'template': '404.html'})\n)\n</code>", "<code>DEBUG=True</code>", "<code># requirements.txt:\n\n...\ndj-static==0.0.6\n\n\n# YOURAPP/settings.py:\n\n...\nSTATIC_ROOT = 'staticdir'\nSTATIC_URL = '/staticpath/'\n\n# YOURAPP/wsgi.py:\n\n...\nfrom django.core.wsgi import get_wsgi_application\nfrom dj_static import Cling\n\napplication = Cling(get_wsgi_application())\n</code>", "<code>if settings.DEBUG:\n    urlpatterns += patterns(\n        'django.views.static',\n        (r'^media/(?P&lt;path&gt;.*)','serve',{'document_root': settings.MEDIA_ROOT}), )\n</code>", "<code>if True:\n    urlpatterns += patterns(\n        'django.views.static',\n        (r'^media/(?P&lt;path&gt;.*)','serve',{'document_root': settings.MEDIA_ROOT}), )\n</code>", "<code>urlpatterns += [ url(r'^media/(?P&lt;path&gt;.*)$', serve, { 'document_root': settings.MEDIA_ROOT, }), url(r'^static/(?P&lt;path&gt;.*)$', serve, { 'document_root': settings.STATIC_ROOT }), ]\n</code>", "<code>DEBUG = False\nDEBUG404 = True\n</code>", "<code>from django.conf import settings\nimport os\n\nif settings.DEBUG404:\n    urlpatterns += patterns('',\n        (r'^static/(?P&lt;path&gt;.*)$', 'django.views.static.serve',\n         {'document_root': os.path.join(os.path.dirname(__file__), 'static')} ),\n    )\n</code>", "<code>from django.conf import settings\nimport os\nfrom django.views.static import serve as staticserve\n\nif settings.DEBUG404:\n    urlpatterns += patterns('',\n        (r'^static/(?P&lt;path&gt;.*)$', staticserve,\n            {'document_root': os.path.join(os.path.dirname(__file__), 'static')} ),\n        )\n</code>", "<code>Python/2.7/site-packages/django/conf/urls/static.py</code>", "<code>if settings.DEBUG or (prefix and '://' in prefix):\n</code>", "<code>settings.debug==False</code>", "<code>python manage.py runserver --runserver</code>"], "path": "stack.django"}, {"tags": ["python", "mysql", "django", "virtualenv", "virtualenvwrapper"], "creation_date": 1275416290, "body_markdown": "This is a much discussed issue for OSX 10.6 users, but I haven&#39;t been able to find a solution that works. Here&#39;s my setup:\r\n\r\nPython 2.6.1 64bit\r\nDjango 1.2.1\r\nMySQL 5.1.47 osx10.6 64bit\r\n\r\nI create a virtualenvwrapper with --no-site-packages, then installed Django. When I activate the virtualenv and run python manage.py syncdb, I get this error:\r\n\r\n    Traceback (most recent call last):\r\n    File &quot;manage.py&quot;, line 11, in &lt;module&gt;\r\n      execute_manager(settings)\r\n    File &quot;/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/core/management/__init__.py&quot;, line 438, in execute_manager\r\n      utility.execute()\r\n    File &quot;/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/core/management/__init__.py&quot;, line 379, in execute\r\n      self.fetch_command(subcommand).run_from_argv(self.argv)\r\n    File &quot;/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/core/management/__init__.py&quot;, line 257, in fetch_command\r\n      klass = load_command_class(app_name, subcommand)\r\n    File &quot;/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/core/management/__init__.py&quot;, line 67, in load_command_class\r\n      module = import_module(&#39;%s.management.commands.%s&#39; % (app_name, name))\r\n    File &quot;/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/utils/importlib.py&quot;, line 35, in import_module\r\n      __import__(name)\r\n    File &quot;/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/core/management/commands/syncdb.py&quot;, line 7, in &lt;module&gt;\r\n    from django.core.management.sql import custom_sql_for_model, emit_post_sync_signal\r\n    File &quot;/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/core/management/sql.py&quot;, line 5, in &lt;module&gt;\r\n    from django.contrib.contenttypes import generic\r\n    File &quot;/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/contrib/contenttypes/generic.py&quot;, line 6, in &lt;module&gt;\r\n      from django.db import connection\r\n    File &quot;/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/db/__init__.py&quot;, line 75, in &lt;module&gt;\r\n      connection = connections[DEFAULT_DB_ALIAS]\r\n    File &quot;/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/db/utils.py&quot;, line 91, in __getitem__\r\n      backend = load_backend(db[&#39;ENGINE&#39;])\r\n    File &quot;/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/db/utils.py&quot;, line 32, in load_backend\r\n      return import_module(&#39;.base&#39;, backend_name)\r\n    File &quot;/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/utils/importlib.py&quot;, line 35, in import_module\r\n      __import__(name)\r\n    File &quot;/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/db/backends/mysql/base.py&quot;, line 14, in &lt;module&gt;\r\n      raise ImproperlyConfigured(&quot;Error loading MySQLdb module: %s&quot; % e)\r\n    django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: No module named MySQLdb\r\n\r\nI&#39;ve also installed the [MySQL for Python][1] adapter, but to no avail (maybe I installed it improperly?). \r\n\r\nAnyone dealt with this before?\r\n\r\n\r\n  [1]: http://sourceforge.net/projects/mysql-python/files/", "last_edit_date": 1305742460, "up_vote_count": 242, "link": "https://stackoverflow.com/questions/2952187/getting-error-loading-mysqldb-module-no-module-named-mysqldb-have-tried-pre", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1285281303, "answer_id": 3782998, "path": "stack.django.answer", "score": 7, "up_vote_count": 8, "is_accepted": true, "last_activity_date": 1285281303, "body_markdown": "This issue was the result of an incomplete / incorrect installation of the MySQL for Python adapter. Specifically, I had to edit the path to the mysql_config file to point to /usr/local/mysql/bin/mysql_config - discussed in greater detail in this article: http://dakrauth.com/blog/entry/python-and-django-setup-mac-os-x-leopard/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1289602507, "answer_id": 4169790, "path": "stack.django.answer", "score": 321, "up_vote_count": 322, "is_accepted": false, "last_activity_date": 1354137394, "last_edit_date": 1354137394, "body_markdown": "I had the same error and `pip install MySQL-python` solved it for me.\r\n\r\nAlternate installs:\r\n\r\n - If you don&#39;t have pip, `easy_install MySQL-python` should work.\r\n - If your python is managed by a packaging system, you might have to use\r\n   that system (e.g. `sudo apt-get install ...`)\r\n\r\nBelow, Soli notes that if you receive the following error:\r\n\r\n&gt; `EnvironmentError: mysql_config not found`\r\n\r\n... then you have a further system dependency issue. Solving this will vary from system to system, but for Debian-derived systems:\r\n\r\n`sudo apt-get install python-mysqldb`"}, {"tags": [], "down_vote_count": 2, "creation_date": 1296691176, "answer_id": 4881380, "path": "stack.django.answer", "score": 59, "up_vote_count": 61, "is_accepted": false, "last_activity_date": 1341373343, "last_edit_date": 1341373343, "body_markdown": "Running Ubuntu, I had to do:\r\n\r\n    sudo apt-get install python-mysqldb"}, {"tags": [], "down_vote_count": 0, "creation_date": 1311743627, "answer_id": 6839704, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1311743627, "last_edit_date": 1495542395, "body_markdown": "I had the same problem on OSX 10.6.6. But just a simple `easy_install mysql-python` on terminal did not solve it as another hiccup followed:\r\n\r\n`error: command &#39;gcc-4.2&#39; failed with exit status 1`. \r\n\r\nApparently, this issue arises after upgrading from XCode3 (which is natively shipped with OSX 10.6) to XCode4. This newer ver removes support for building ppc arch. If its the same case, try doing as follows before `easy_install mysql-python`\r\n\r\n    sudo bash\r\n    export ARCHFLAGS=&#39;-arch i386 -arch x86_64&#39;\r\n    rm -r build\r\n    python setup.py build\r\n    python setup.py install\r\n\r\nMany thanks to Ned Deily for this solution. [Check here][1]\r\n\r\n[1]: https://stackoverflow.com/questions/5671480/trouble-setting-up-mysqldb-module"}, {"tags": [], "down_vote_count": 0, "creation_date": 1313089403, "answer_id": 7031378, "path": "stack.django.answer", "score": 53, "up_vote_count": 53, "is_accepted": false, "last_activity_date": 1332711991, "last_edit_date": 1495540510, "body_markdown": "Adding to other answers, the following helped me finish the installation mysql-python:\r\n\r\nhttps://stackoverflow.com/questions/1511661/virtualenv-mysql-python-pip-anyone-know-how\r\n\r\nOn Ubuntu...\r\n\r\n    apt-get install libmysqlclient-dev\r\n    apt-get install python-dev\r\n    pip install mysql-python\r\n\r\nDon&#39;t forget to add &#39;sudo&#39; to the beginning of commands if you don&#39;t have the proper permissions."}, {"tags": [], "down_vote_count": 0, "creation_date": 1322672725, "answer_id": 8329935, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1322672725, "body_markdown": "    pip install mysql-python\r\n\r\nraised an error:\r\n\r\n&gt; EnvironmentError: mysql_config not found\r\n\r\n    sudo apt-get install python-mysqldb\r\n\r\nfixed the problem."}, {"tags": [], "down_vote_count": 0, "creation_date": 1339704274, "answer_id": 11040568, "path": "stack.django.answer", "score": 19, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1339704274, "body_markdown": "`mysql_config` must be on the path. On Mac, do\r\n\r\n    export PATH=$PATH:/usr/local/mysql/bin/\r\n    pip install MySQL-python"}, {"tags": [], "down_vote_count": 0, "creation_date": 1385584434, "answer_id": 20252576, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1490102333, "last_edit_date": 1490102333, "body_markdown": "I made the upgrade to OSX Mavericks and Pycharm 3 and start to get this error, i used pip and easy install and got the error: \r\n\r\n&gt; command&#39;/usr/bin/clang&#39; failed with exit status 1.\r\n\r\nSo i need to update to Xcode 5 and tried again to install using pip.\r\n\r\n    pip install mysql-python\r\n\r\nThat fix all the problems."}, {"tags": [], "down_vote_count": 0, "creation_date": 1393098268, "answer_id": 21959537, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1393098636, "last_edit_date": 1495540510, "body_markdown": "The following worked perfectly for me, running Ubuntu 13.10 64-bit:\r\n\r\n    sudo apt-get install libmysqlclient-dev\r\n    sudo apt-get install python-dev\r\n\r\nNow, navigate to your virtualenv (such as env folder) and execute the following:\r\n\r\n    sudo ./bin/pip install mysql-python\r\n\r\n\r\nI actually found the [solution][1] in a separate question and I am quoting it below:\r\n\r\n&gt; If you have created the virtualenv with the --no-site-packages switch\r\n&gt; (the default), then system-wide installed additions such as MySQLdb\r\n&gt; are not included in the virtual environment packages.\r\n&gt; \r\n&gt; You need to install MySQLdb with the pip command installed with the\r\n&gt; virtualenv. Either activate the virtualenv with the bin/activate\r\n&gt; script, or use bin/pip from within the virtualenv to install the\r\n&gt; MySQLdb library locally as well.\r\n&gt; \r\n&gt; Alternatively, create a new virtualenv with system site-packages\r\n&gt; included by using the --system-site-package switch.\r\n\r\nI think this should also work with OSX. The only problem would be getting an equivalent command for installing `libmysqlclient-dev` and `python-dev` as they are needed to compile \r\n`mysql-python` I guess.\r\n\r\nHope this helps.\r\n\r\n  [1]: https://stackoverflow.com/a/13288095/569085"}, {"tags": [], "down_vote_count": 0, "creation_date": 1394084543, "answer_id": 22215991, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1394084543, "body_markdown": "Try this: This solved the issue for me .\r\n\r\n&gt; pip install MySQL-python\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1398534152, "answer_id": 23314477, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1398534152, "body_markdown": "This worked for Red Hat Enterprise Linux Server release 6.4\r\n\r\n    sudo yum install mysql-devel\r\n    sudo yum install python-devel\r\n    pip install mysql-python\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1415854865, "answer_id": 26901655, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1415854865, "body_markdown": "The error raised here is in importing the python module. This can be solved by adding the python site-packages folder to the environment variable $PYTHONPATH on OS X. So we can add the following command to the .bash_profile file:\r\n\r\n    export PYTHONPATH=&quot;$PYTHONPATH:/usr/local/lib/pythonx.x/site-packages/&quot;\r\n\r\n*replace x.x with the python version you are using"}, {"tags": [], "down_vote_count": 0, "creation_date": 1431332784, "answer_id": 30162838, "path": "stack.django.answer", "score": 21, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1431332784, "body_markdown": "Try this the commands below. They work for me:\r\n\r\n    brew install mysql-connector-c \r\n    pip install MySQL-python"}, {"tags": [], "down_vote_count": 0, "creation_date": 1435978646, "answer_id": 31216426, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1490102290, "last_edit_date": 1490102290, "body_markdown": "`pip` did not work for me on windows 8 64 bits system. \r\n`easy_install mysql-python` works for me.\r\nYou can use `easy_install` to avoid building binaries on windows if pip does not work. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1445548886, "answer_id": 33290980, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1490102259, "last_edit_date": 1490102259, "body_markdown": "`sudo apt-get install python-mysqldb` works perfectly in ubuntu\r\n\r\n`pip install mysql-python` raises an **Environment Error**"}, {"tags": [], "down_vote_count": 0, "creation_date": 1467135904, "answer_id": 38082934, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1474306642, "last_edit_date": 1474306642, "body_markdown": "How I got it working:\r\n\r\n    virtualenv -p python3.5 env/test\r\n\r\nAfter sourcing my env:\r\n\r\n    pip install pymysql\r\n    pip install django\r\n\r\nThen, I ran the startproject and inside the manage.py, I added this:\r\n\r\n    + try:\r\n    +     import pymysql\r\n    +     pymysql.install_as_MySQLdb()\r\n    + except:\r\n    +     pass\r\n\r\nAlso, updated this inside settings:\r\n\r\n    DATABASES = {\r\n        &#39;default&#39;: {\r\n            &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,\r\n            &#39;NAME&#39;: &#39;foobar_db&#39;,\r\n            &#39;USER&#39;: &#39;foobaruser&#39;,\r\n            &#39;PASSWORD&#39;: &#39;foobarpwd&#39;,\r\n        }\r\n    }\r\n\r\nI also have `configparser==3.5.0` installed in my virtualenv, not sure if that was required or not...\r\n\r\nHope it helps, "}, {"tags": [], "down_vote_count": 0, "creation_date": 1477417836, "answer_id": 40246494, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1490102213, "last_edit_date": 1490102213, "body_markdown": "You can install as  `pip install mysqlclient`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1483546045, "answer_id": 41468318, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1483546045, "body_markdown": "For me the problem got solved by simply reinstalling mysql-python\r\n\r\n\r\n    pip uninstall mysql-python\r\n    pip install mysql-python\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1488941202, "answer_id": 42662051, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1490102191, "last_edit_date": 1490102191, "body_markdown": "If you are using python3, then try this(My OS is Ubuntu 16.04):\r\n\r\n    sudo apt-get install python3-mysqldb"}, {"tags": [], "down_vote_count": 0, "creation_date": 1489261357, "answer_id": 42739766, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1489261357, "body_markdown": "Install Command Line Tools Works for me:\r\n\r\n    xcode-select --install"}, {"tags": [], "down_vote_count": 0, "creation_date": 1491026627, "answer_id": 43153408, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1491026627, "body_markdown": "I overcame the same problem by installing **`MySQL-python`** library using **pip**. You can see the message displayed on my console when I first changed my database settings in settings.py and executed makemigrations command(The solution is following the below message, just see that).\r\n\r\n      (vir_env) admins-MacBook-Pro-3:src admin$ python manage.py makemigrations\r\n    Traceback (most recent call last):\r\n      File &quot;manage.py&quot;, line 10, in &lt;module&gt;\r\n        execute_from_command_line(sys.argv)\r\n      File &quot;/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/core/management/__init__.py&quot;, line 338, in execute_from_command_line\r\n        utility.execute()\r\n      File &quot;/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/core/management/__init__.py&quot;, line 312, in execute\r\n        django.setup()\r\n      File &quot;/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/__init__.py&quot;, line 18, in setup\r\n        apps.populate(settings.INSTALLED_APPS)\r\n      File &quot;/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/apps/registry.py&quot;, line 108, in populate\r\n        app_config.import_models(all_models)\r\n      File &quot;/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/apps/config.py&quot;, line 198, in import_models\r\n        self.models_module = import_module(models_module_name)\r\n      File &quot;/usr/local/Cellar/python/2.7.12_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/importlib/__init__.py&quot;, line 37, in import_module\r\n        __import__(name)\r\n      File &quot;/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/contrib/auth/models.py&quot;, line 41, in &lt;module&gt;\r\n        class Permission(models.Model):\r\n      File &quot;/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/db/models/base.py&quot;, line 139, in __new__\r\n        new_class.add_to_class(&#39;_meta&#39;, Options(meta, **kwargs))\r\n      File &quot;/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/db/models/base.py&quot;, line 324, in add_to_class\r\n        value.contribute_to_class(cls, name)\r\n      File &quot;/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/db/models/options.py&quot;, line 250, in contribute_to_class\r\n        self.db_table = truncate_name(self.db_table, connection.ops.max_name_length())\r\n      File &quot;/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/db/__init__.py&quot;, line 36, in __getattr__\r\n        return getattr(connections[DEFAULT_DB_ALIAS], item)\r\n      File &quot;/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/db/utils.py&quot;, line 240, in __getitem__\r\n        backend = load_backend(db[&#39;ENGINE&#39;])\r\n      File &quot;/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/db/utils.py&quot;, line 111, in load_backend\r\n        return import_module(&#39;%s.base&#39; % backend_name)\r\n      File &quot;/usr/local/Cellar/python/2.7.12_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/importlib/__init__.py&quot;, line 37, in import_module\r\n        __import__(name)\r\n      File &quot;/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/db/backends/mysql/base.py&quot;, line 27, in &lt;module&gt;\r\n        raise ImproperlyConfigured(&quot;Error loading MySQLdb module: %s&quot; % e)\r\n    django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: No module named MySQLdb\r\n\r\n**Finally I overcame this problem as follows:**\r\n\r\n    \r\n    (vir_env) admins-MacBook-Pro-3:src admin$ pip install MySQLdb\r\n    Collecting MySQLdb\r\n      Could not find a version that satisfies the requirement MySQLdb (from versions: )\r\n    No matching distribution found for MySQLdb\r\n    (vir_env) admins-MacBook-Pro-3:src admin$ pip install MySQL-python\r\n    Collecting MySQL-python\r\n      Downloading MySQL-python-1.2.5.zip (108kB)\r\n        100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 112kB 364kB/s \r\n    Building wheels for collected packages: MySQL-python\r\n      Running setup.py bdist_wheel for MySQL-python ... done\r\n      Stored in directory: /Users/admin/Library/Caches/pip/wheels/38/a3/89/ec87e092cfb38450fc91a62562055231deb0049a029054dc62\r\n    Successfully built MySQL-python\r\n    Installing collected packages: MySQL-python\r\n    Successfully installed MySQL-python-1.2.5\r\n    (vir_env) admins-MacBook-Pro-3:src admin$ python manage.py makemigrations\r\n    No changes detected\r\n    (vir_env) admins-MacBook-Pro-3:src admin$ python manage.py migrate\r\n    Operations to perform:\r\n      Synchronize unmigrated apps: staticfiles, rest_framework, messages, crispy_forms\r\n      Apply all migrations: admin, contenttypes, sessions, auth, PyApp\r\n    Synchronizing apps without migrations:\r\n      Creating tables...\r\n        Running deferred SQL...\r\n      Installing custom SQL...\r\n    Running migrations:\r\n      Rendering model states... DONE\r\n      Applying PyApp.0001_initial... OK\r\n      Applying PyApp.0002_auto_20170310_0936... OK\r\n      Applying PyApp.0003_auto_20170310_0953... OK\r\n      Applying PyApp.0004_auto_20170310_0954... OK\r\n      Applying PyApp.0005_auto_20170311_0619... OK\r\n      Applying PyApp.0006_auto_20170311_0622... OK\r\n      Applying PyApp.0007_loraevksensor... OK\r\n      Applying PyApp.0008_auto_20170315_0752... OK\r\n      Applying PyApp.0009_auto_20170315_0753... OK\r\n      Applying PyApp.0010_auto_20170315_0806... OK\r\n      Applying PyApp.0011_auto_20170315_0814... OK\r\n      Applying PyApp.0012_auto_20170315_0820... OK\r\n      Applying PyApp.0013_auto_20170315_0822... OK\r\n      Applying PyApp.0014_auto_20170315_0907... OK\r\n      Applying PyApp.0015_auto_20170315_1041... OK\r\n      Applying PyApp.0016_auto_20170315_1355... OK\r\n      Applying PyApp.0017_auto_20170315_1401... OK\r\n      Applying PyApp.0018_auto_20170331_1348... OK\r\n      Applying PyApp.0019_auto_20170331_1349... OK\r\n      Applying PyApp.0020_auto_20170331_1350... OK\r\n      Applying PyApp.0021_auto_20170331_1458... OK\r\n      Applying PyApp.0022_delete_postoffice... OK\r\n      Applying PyApp.0023_posoffice... OK\r\n      Applying PyApp.0024_auto_20170331_1504... OK\r\n      Applying PyApp.0025_auto_20170331_1511... OK\r\n      Applying contenttypes.0001_initial... OK\r\n      Applying auth.0001_initial... OK\r\n      Applying admin.0001_initial... OK\r\n      Applying contenttypes.0002_remove_content_type_name... OK\r\n      Applying auth.0002_alter_permission_name_max_length... OK\r\n      Applying auth.0003_alter_user_email_max_length... OK\r\n      Applying auth.0004_alter_user_username_opts... OK\r\n      Applying auth.0005_alter_user_last_login_null... OK\r\n      Applying auth.0006_require_contenttypes_0002... OK\r\n      Applying sessions.0001_initial... OK\r\n    (vir_env) admins-MacBook-Pro-3:src admin$ \r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1511848871, "answer_id": 47524915, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1511848871, "body_markdown": "   **Run this command** \r\n\r\n    sudo pip install mysql-python;\r\n\r\n  **now you can run your command.**\r\n\r\n    python manage.py startapp filename;"}], "title": "Getting &quot;Error loading MySQLdb module: No module named MySQLdb&quot; - have tried previously posted solutions", "view_count": 247795, "answer_count": 22, "code_snippet": ["<code>Traceback (most recent call last):\nFile \"manage.py\", line 11, in &lt;module&gt;\n  execute_manager(settings)\nFile \"/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/core/management/__init__.py\", line 438, in execute_manager\n  utility.execute()\nFile \"/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/core/management/__init__.py\", line 379, in execute\n  self.fetch_command(subcommand).run_from_argv(self.argv)\nFile \"/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/core/management/__init__.py\", line 257, in fetch_command\n  klass = load_command_class(app_name, subcommand)\nFile \"/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/core/management/__init__.py\", line 67, in load_command_class\n  module = import_module('%s.management.commands.%s' % (app_name, name))\nFile \"/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/utils/importlib.py\", line 35, in import_module\n  __import__(name)\nFile \"/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/core/management/commands/syncdb.py\", line 7, in &lt;module&gt;\nfrom django.core.management.sql import custom_sql_for_model, emit_post_sync_signal\nFile \"/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/core/management/sql.py\", line 5, in &lt;module&gt;\nfrom django.contrib.contenttypes import generic\nFile \"/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/contrib/contenttypes/generic.py\", line 6, in &lt;module&gt;\n  from django.db import connection\nFile \"/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/db/__init__.py\", line 75, in &lt;module&gt;\n  connection = connections[DEFAULT_DB_ALIAS]\nFile \"/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/db/utils.py\", line 91, in __getitem__\n  backend = load_backend(db['ENGINE'])\nFile \"/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/db/utils.py\", line 32, in load_backend\n  return import_module('.base', backend_name)\nFile \"/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/utils/importlib.py\", line 35, in import_module\n  __import__(name)\nFile \"/Users/joerobinson/.virtualenvs/dj_tut/lib/python2.6/site-packages/django/db/backends/mysql/base.py\", line 14, in &lt;module&gt;\n  raise ImproperlyConfigured(\"Error loading MySQLdb module: %s\" % e)\ndjango.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: No module named MySQLdb\n</code>", "<code>pip install mysql</code>", "<code>pip install MySQL-python</code>", "<code>easy_install MySQL-python</code>", "<code>sudo apt-get install ...</code>", "<code>EnvironmentError: mysql_config not found</code>", "<code>sudo apt-get install python-mysqldb</code>", "<code>sudo yum install MySQL-python</code>", "<code>$ mysql_config</code>", "<code>sudo apt-get install libmysqlclient-dev</code>", "<code>sudo apt-get install python-mysqldb\n</code>", "<code>apt-get install libmysqlclient-dev\napt-get install python-dev\npip install mysql-python\n</code>", "<code>brew install mysql-connector-c \npip install MySQL-python\n</code>", "<code>Command \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/r8/c_tscq492sn641w5vtvqcvkw0000gp/T/pip-build-JYY1du/MySQL-python</code>", "<code>mysql_config</code>", "<code>export PATH=$PATH:/usr/local/mysql/bin/\npip install MySQL-python\n</code>", "<code>pip install mysql-python\n</code>", "<code>sudo apt-get install python-mysqldb\n</code>", "<code>virtualenv -p python3.5 env/test\n</code>", "<code>pip install pymysql\npip install django\n</code>", "<code>+ try:\n+     import pymysql\n+     pymysql.install_as_MySQLdb()\n+ except:\n+     pass\n</code>", "<code>DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'foobar_db',\n        'USER': 'foobaruser',\n        'PASSWORD': 'foobarpwd',\n    }\n}\n</code>", "<code>configparser==3.5.0</code>", "<code>sudo apt-get install libmysqlclient-dev\nsudo apt-get install python-dev\n</code>", "<code>sudo ./bin/pip install mysql-python\n</code>", "<code>libmysqlclient-dev</code>", "<code>python-dev</code>", "<code>mysql-python</code>", "<code>sudo ./bin/pip install mysql-python</code>", "<code>sudo yum install mysql-devel\nsudo yum install python-devel\npip install mysql-python\n</code>", "<code>yum install MySQL-python</code>", "<code>yum install mysql-devel; venv/bin/pip install MySQL-python</code>", "<code>sudo apt-get install python-mysqldb</code>", "<code>pip install mysql-python</code>", "<code>pip install mysqlclient</code>", "<code>pip install mysql-python\n</code>", "<code>pip</code>", "<code>easy_install mysql-python</code>", "<code>easy_install</code>", "<code>easy_install mysql-python</code>", "<code>error: command 'gcc-4.2' failed with exit status 1</code>", "<code>easy_install mysql-python</code>", "<code>sudo bash\nexport ARCHFLAGS='-arch i386 -arch x86_64'\nrm -r build\npython setup.py build\npython setup.py install\n</code>", "<code>export PYTHONPATH=\"$PYTHONPATH:/usr/local/lib/pythonx.x/site-packages/\"\n</code>", "<code>sudo apt-get install python3-mysqldb\n</code>", "<code>pip uninstall mysql-python\npip install mysql-python\n</code>", "<code>xcode-select --install\n</code>", "<code>MySQL-python</code>", "<code>  (vir_env) admins-MacBook-Pro-3:src admin$ python manage.py makemigrations\nTraceback (most recent call last):\n  File \"manage.py\", line 10, in &lt;module&gt;\n    execute_from_command_line(sys.argv)\n  File \"/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/core/management/__init__.py\", line 338, in execute_from_command_line\n    utility.execute()\n  File \"/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/core/management/__init__.py\", line 312, in execute\n    django.setup()\n  File \"/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/__init__.py\", line 18, in setup\n    apps.populate(settings.INSTALLED_APPS)\n  File \"/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/apps/registry.py\", line 108, in populate\n    app_config.import_models(all_models)\n  File \"/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/apps/config.py\", line 198, in import_models\n    self.models_module = import_module(models_module_name)\n  File \"/usr/local/Cellar/python/2.7.12_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/importlib/__init__.py\", line 37, in import_module\n    __import__(name)\n  File \"/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/contrib/auth/models.py\", line 41, in &lt;module&gt;\n    class Permission(models.Model):\n  File \"/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/db/models/base.py\", line 139, in __new__\n    new_class.add_to_class('_meta', Options(meta, **kwargs))\n  File \"/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/db/models/base.py\", line 324, in add_to_class\n    value.contribute_to_class(cls, name)\n  File \"/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/db/models/options.py\", line 250, in contribute_to_class\n    self.db_table = truncate_name(self.db_table, connection.ops.max_name_length())\n  File \"/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/db/__init__.py\", line 36, in __getattr__\n    return getattr(connections[DEFAULT_DB_ALIAS], item)\n  File \"/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/db/utils.py\", line 240, in __getitem__\n    backend = load_backend(db['ENGINE'])\n  File \"/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/db/utils.py\", line 111, in load_backend\n    return import_module('%s.base' % backend_name)\n  File \"/usr/local/Cellar/python/2.7.12_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/importlib/__init__.py\", line 37, in import_module\n    __import__(name)\n  File \"/Users/admin/Desktop/SetUp1/vir_env/lib/python2.7/site-packages/django/db/backends/mysql/base.py\", line 27, in &lt;module&gt;\n    raise ImproperlyConfigured(\"Error loading MySQLdb module: %s\" % e)\ndjango.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: No module named MySQLdb\n</code>", "<code>(vir_env) admins-MacBook-Pro-3:src admin$ pip install MySQLdb\nCollecting MySQLdb\n  Could not find a version that satisfies the requirement MySQLdb (from versions: )\nNo matching distribution found for MySQLdb\n(vir_env) admins-MacBook-Pro-3:src admin$ pip install MySQL-python\nCollecting MySQL-python\n  Downloading MySQL-python-1.2.5.zip (108kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 112kB 364kB/s \nBuilding wheels for collected packages: MySQL-python\n  Running setup.py bdist_wheel for MySQL-python ... done\n  Stored in directory: /Users/admin/Library/Caches/pip/wheels/38/a3/89/ec87e092cfb38450fc91a62562055231deb0049a029054dc62\nSuccessfully built MySQL-python\nInstalling collected packages: MySQL-python\nSuccessfully installed MySQL-python-1.2.5\n(vir_env) admins-MacBook-Pro-3:src admin$ python manage.py makemigrations\nNo changes detected\n(vir_env) admins-MacBook-Pro-3:src admin$ python manage.py migrate\nOperations to perform:\n  Synchronize unmigrated apps: staticfiles, rest_framework, messages, crispy_forms\n  Apply all migrations: admin, contenttypes, sessions, auth, PyApp\nSynchronizing apps without migrations:\n  Creating tables...\n    Running deferred SQL...\n  Installing custom SQL...\nRunning migrations:\n  Rendering model states... DONE\n  Applying PyApp.0001_initial... OK\n  Applying PyApp.0002_auto_20170310_0936... OK\n  Applying PyApp.0003_auto_20170310_0953... OK\n  Applying PyApp.0004_auto_20170310_0954... OK\n  Applying PyApp.0005_auto_20170311_0619... OK\n  Applying PyApp.0006_auto_20170311_0622... OK\n  Applying PyApp.0007_loraevksensor... OK\n  Applying PyApp.0008_auto_20170315_0752... OK\n  Applying PyApp.0009_auto_20170315_0753... OK\n  Applying PyApp.0010_auto_20170315_0806... OK\n  Applying PyApp.0011_auto_20170315_0814... OK\n  Applying PyApp.0012_auto_20170315_0820... OK\n  Applying PyApp.0013_auto_20170315_0822... OK\n  Applying PyApp.0014_auto_20170315_0907... OK\n  Applying PyApp.0015_auto_20170315_1041... OK\n  Applying PyApp.0016_auto_20170315_1355... OK\n  Applying PyApp.0017_auto_20170315_1401... OK\n  Applying PyApp.0018_auto_20170331_1348... OK\n  Applying PyApp.0019_auto_20170331_1349... OK\n  Applying PyApp.0020_auto_20170331_1350... OK\n  Applying PyApp.0021_auto_20170331_1458... OK\n  Applying PyApp.0022_delete_postoffice... OK\n  Applying PyApp.0023_posoffice... OK\n  Applying PyApp.0024_auto_20170331_1504... OK\n  Applying PyApp.0025_auto_20170331_1511... OK\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying sessions.0001_initial... OK\n(vir_env) admins-MacBook-Pro-3:src admin$ \n</code>", "<code>sudo pip install mysql-python;\n</code>", "<code>python manage.py startapp filename;\n</code>"], "path": "stack.django"}, {"tags": ["javascript", "jquery", "ajax", "redirect"], "creation_date": 1223933390, "body_markdown": "I&#39;m using `$.post()` to call a servlet using Ajax and then using the resulting HTML fragment to replace a `div` element in the user&#39;s current page. However, if the session times out, the server sends a redirect directive to send the user to the login page. In this case, jQuery is replacing the `div` element with the contents of the login page, forcing the user&#39;s eyes to witness a rare scene indeed. \r\n\r\nHow can I manage a redirect directive from an Ajax call with jQuery 1.2.6?", "last_edit_date": 1453494105, "up_vote_count": 1123, "link": "https://stackoverflow.com/questions/199099/how-to-manage-a-redirect-request-after-a-jquery-ajax-call", "_childDocuments_": [{"tags": [], "down_vote_count": 12, "creation_date": 1223934893, "answer_id": 199156, "path": "stack.django.answer", "score": 43, "up_vote_count": 55, "is_accepted": false, "last_activity_date": 1224204625, "last_edit_date": 1224204625, "body_markdown": "Use the low-level `$.ajax()` call:\r\n\r\n    $.ajax({\r\n      url: &quot;/yourservlet&quot;,\r\n      data: { },\r\n      complete: function(xmlHttp) {\r\n        // xmlHttp is a XMLHttpRquest object\r\n        alert(xmlHttp.status);\r\n      }\r\n    });\r\n\r\n\r\nTry this for a redirect:\r\n\r\n    if (xmlHttp.code != 200) {\r\n      top.location.href = &#39;/some/other/page&#39;;\r\n    }"}, {"tags": [], "down_vote_count": 9, "creation_date": 1224411286, "answer_id": 216245, "path": "stack.django.answer", "score": 1, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1224414813, "last_edit_date": 1224414813, "body_markdown": "Additionally you will probably want to redirect user to the given in headers URL. So finally it will looks like this:\r\n\r\n    $.ajax({\r\n        //.... other definition\r\n        complete:function(xmlHttp){\r\n            if(xmlHttp.status.toString()[0]==&#39;3&#39;){\r\n    \t    top.location.href = xmlHttp.getResponseHeader(&#39;Location&#39;);\r\n    \t}\r\n    });\r\n\r\nUPD: Opps. Have the same task, but it not works. Doing this stuff. I&#39;ll show you solution when I&#39;ll find it.\r\n"}, {"tags": [], "down_vote_count": 3, "creation_date": 1226696186, "answer_id": 291376, "path": "stack.django.answer", "score": 5, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1226696186, "body_markdown": "in the servlet you should put \r\n`response.setStatus(response.SC_MOVED_PERMANENTLY);`\r\nto send the &#39;301&#39; xmlHttp status you need for a redirection...\r\n\r\nand in the $.ajax function you should not use the `.toString()` function..., just\r\n\r\n`if (xmlHttp.status == 301) {\r\n    top.location.href = &#39;xxxx.jsp&#39;;\r\n}`\r\n\r\nthe problem is it is not very flexible, you can&#39;t decide where you want to redirect..\r\n\r\nredirecting through the servlets should be the best way. but i still can not find the right way to do it."}, {"tags": [], "down_vote_count": 3, "creation_date": 1227170382, "answer_id": 304654, "path": "stack.django.answer", "score": 104, "up_vote_count": 107, "is_accepted": false, "last_activity_date": 1439971436, "last_edit_date": 1439971436, "body_markdown": "No browsers handle 301 and 302 responses correctly. And in fact the standard even says they should handle them &quot;transparently&quot; which is a MASSIVE headache for Ajax Library vendors. In [Ra-Ajax][1] we were forced into using HTTP response status code 278 (just some &quot;unused&quot; success code) to handle transparently redirects from the server...\r\n\r\nThis really annoys me, and if someone here have some &quot;pull&quot; in W3C I would appreciate that you could let W3C *know* that we really need to handle 301 and 302 codes ourselves...! ;)\r\n\r\n\r\n  [1]: http://code.google.com/p/ra-ajax/"}, {"tags": [], "down_vote_count": 2, "creation_date": 1233079832, "answer_id": 484541, "path": "stack.django.answer", "score": 82, "up_vote_count": 84, "is_accepted": true, "last_activity_date": 1472624136, "last_edit_date": 1472624136, "body_markdown": "The solution that was eventually implemented was to use a wrapper for the callback function of the Ajax call and in this wrapper check for the existence of a specific element on the returned HTML chunk. If the element was found then the wrapper executed a redirection. If not, the wrapper forwarded the call to the actual callback function. \r\n\r\nFor example, our wrapper function was something like:\r\n\r\n    function cbWrapper(data, funct){\r\n\t\tif($(&quot;#myForm&quot;, data).length &gt; 0)\r\n\t\t\ttop.location.href=&quot;login.htm&quot;;//redirection\r\n\t\telse\r\n\t\t\tfunct(data);\r\n    }\r\n\t\r\nThen, when making the Ajax call we used something like:\r\n\r\n    $.post(&quot;myAjaxHandler&quot;, \r\n\t\t   {\r\n\t\t\tparam1: foo,\r\n\t\t\tparam2: bar\r\n\t\t   },\r\n\t\t   function(data){\r\n\t\t\t   cbWrapper(data, myActualCB);\r\n\t\t   }, \r\n\t\t   &quot;html&quot;\r\n    );\r\n\t\r\nThis worked for us because all Ajax calls always returned HTML inside a DIV element that we use to replace a piece of the page. Also, we only needed to redirect to the login page."}, {"tags": [], "down_vote_count": 2, "creation_date": 1235432951, "answer_id": 579895, "path": "stack.django.answer", "score": 199, "up_vote_count": 201, "is_accepted": false, "last_activity_date": 1510128921, "last_edit_date": 1510128921, "body_markdown": "I solved this issue by:\r\n\r\n 1. Adding a custom header to the response:\r\n\r\n        public ActionResult Index(){\r\n            if (!HttpContext.User.Identity.IsAuthenticated)\r\n            {\r\n                HttpContext.Response.AddHeader(&quot;REQUIRES_AUTH&quot;,&quot;1&quot;);\r\n            }\r\n            return View();\r\n        }\r\n\r\n\r\n 2. Binding a JavaScript function to the [`ajaxSuccess`][1] event and checking to see if the header exists:\r\n\r\n        $(document).ajaxSuccess(function(event, request, settings) {\r\n            if (request.getResponseHeader(&#39;REQUIRES_AUTH&#39;) === &#39;1&#39;) {\r\n               window.location = &#39;/&#39;;\r\n            }\r\n        });\r\n\r\n\r\n  [1]: http://api.jquery.com/ajaxsuccess/"}, {"tags": [], "down_vote_count": 2, "creation_date": 1249589827, "answer_id": 1241149, "path": "stack.django.answer", "score": 15, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1249589827, "body_markdown": "Putting together what Vladimir Prudnikov and Thomas Hansen said:\r\n\r\n- Change your server-side code to detect if it&#39;s an XHR. If it is, set the response code of the redirect to 278.\r\n In django:\r\n\r\n&gt;        if request.is_ajax():\r\n&gt;           response.status_code = 278\r\n\r\nThis makes the browser treat the response as a success, and hand it to your Javascript.\r\n\r\n- In your JS, make sure the form submission is via Ajax, check the response code and redirect if needed:\r\n\r\n&gt;     $(&#39;#my-form&#39;).submit(function(event){ \r\n&gt; \r\n&gt;       event.preventDefault();   \r\n&gt;       var options = {\r\n&gt;         url: $(this).attr(&#39;action&#39;),\r\n&gt;         type: &#39;POST&#39;,\r\n&gt;         complete: function(response, textStatus) {  \t\r\n&gt;           if (response.status == 278) { \r\n&gt;             window.location = response.getResponseHeader(&#39;Location&#39;)\r\n&gt;           }\r\n&gt;           else { ... your code here ... } \r\n&gt;         },\r\n&gt;         data: $(this).serialize(),   \r\n&gt;       };   \r\n&gt;       $.ajax(options); \r\n&gt;     });\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 8, "creation_date": 1254956066, "answer_id": 1534662, "path": "stack.django.answer", "score": 608, "up_vote_count": 616, "is_accepted": false, "last_activity_date": 1254956066, "body_markdown": "I read this question and implemented the approach that has been stated regarding setting the response status code to 278 in order to avoid the browser transparently handling the redirects. Even though this worked, I was a little dissatisfied as it is a bit of a hack.\r\n\r\nAfter more digging around, I ditched this approach and used [JSON][1]. In this case, all responses to ajax requests have the status code 200 and the body of the response contains a JSON object that is constructed on the server. The javascript on the client can then use the JSON object to decide what it needs to do.\r\n\r\nI had a similar problem to yours. I perform an ajax request that has 2 possible responses: one that redirects the browser to a new page and one that replaces an existing HTML form on the current page with a new one. The jquery code to do this looks something like:\r\n\r\n    $.ajax({\r\n        type: &quot;POST&quot;,\r\n        url: reqUrl,\r\n        data: reqBody,\r\n        dataType: &quot;json&quot;,\r\n        success: function(data, textStatus) {\r\n            if (data.redirect) {\r\n                // data.redirect contains the string URL to redirect to\r\n                window.location.href = data.redirect;\r\n            }\r\n            else {\r\n                // data.form contains the HTML for the replacement form\r\n                $(&quot;#myform&quot;).replaceWith(data.form);\r\n            }\r\n        }\r\n    });\r\n\r\nThe JSON object &quot;data&quot; is constructed on the server to have 2 members: data.redirect and data.form. I found this approach to be much better.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/JSON"}, {"tags": [], "down_vote_count": 2, "creation_date": 1280947649, "answer_id": 3408763, "path": "stack.django.answer", "score": 5, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1280947649, "body_markdown": "I just wanted to latch on to any ajax requests for the entire page. @SuperG got me started. Here is what I ended up with:\r\n\r\n    // redirect ajax requests that are redirected, not found (404), or forbidden (403.)\r\n    $(&#39;body&#39;).bind(&#39;ajaxComplete&#39;, function(event,request,settings){\r\n            switch(request.status) {\r\n                case 301: case 404: case 403:                    \r\n                    window.location.replace(&quot;http://mysite.tld/login&quot;);\r\n                    break;\r\n            }\r\n    });\r\n\r\nI wanted to specifically check for certain http status codes to base my decision on. However, you can just bind to ajaxError to get anything other than success (200 only perhaps?) I could have just written:\r\n\r\n    $(&#39;body&#39;).bind(&#39;ajaxError&#39;, function(event,request,settings){\r\n        window.location.replace(&quot;http://mysite.tld/login&quot;);\r\n    }"}, {"tags": [], "down_vote_count": 1, "creation_date": 1282068431, "answer_id": 3505514, "path": "stack.django.answer", "score": 14, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1282068431, "body_markdown": "I have a simple solution that works for me, no server code change needed...just add a tsp of nutmeg...\r\n\r\n    $(document).ready(function ()\r\n    {\r\n        $(document).ajaxSend(\r\n        function(event,request,settings)\r\n        {\r\n            var intercepted_success = settings.success;\r\n            settings.success = function( a, b, c ) \r\n            {  \r\n                if( request.responseText.indexOf( &quot;&lt;html&gt;&quot; ) &gt; -1 )\r\n                    window.location = window.location;\r\n                else\r\n                    intercepted_success( a, b, c );\r\n            };\r\n        });\r\n    });\r\n\r\nI check the presence of html tag, but you can change the indexOf to search for whatever unique string exists in your login page..."}, {"tags": [], "down_vote_count": 0, "creation_date": 1286261587, "answer_id": 3861414, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1288341090, "last_edit_date": 1288341090, "body_markdown": "Try\r\n\r\n        $(document).ready(function () {\r\n            if ($(&quot;#site&quot;).length &gt; 0) {\r\n                window.location = &quot;&lt;%= Url.Content(&quot;~&quot;) %&gt;&quot; + &quot;Login/LogOn&quot;;\r\n            }\r\n        });\r\n\r\nPut it on the login page. If it was loaded in a div on the main page, it will redirect til the login page. &quot;#site&quot; is a id of a div which is located on all pages except login page."}, {"tags": [], "down_vote_count": 0, "creation_date": 1314127295, "answer_id": 7166385, "path": "stack.django.answer", "score": 54, "up_vote_count": 54, "is_accepted": false, "last_activity_date": 1316022243, "last_edit_date": 1316022243, "body_markdown": "I like Timmerz&#39;s method with a slight twist of lemon. If you ever get returned **contentType** of **text/html** when you&#39;re expecting **JSON**, you are most likely being redirected. In my case, I just simply reload the page, and it gets redirected to the login page. Oh, and check that the jqXHR status is 200, which seems silly, because you are in the error function, right? Otherwise, legitimate error cases will force an iterative reload (oops)\r\n\r\n    $.ajax(\r\n       error:  function (jqXHR, timeout, message) {\r\n        var contentType = jqXHR.getResponseHeader(&quot;Content-Type&quot;);\r\n        if (jqXHR.status === 200 &amp;&amp; contentType.toLowerCase().indexOf(&quot;text/html&quot;) &gt;= 0) {\r\n            // assume that our login has expired - reload our current page\r\n            window.location.reload();\r\n        }\r\n    \r\n    });"}, {"tags": [], "down_vote_count": 0, "creation_date": 1314526694, "answer_id": 7220299, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1314526694, "body_markdown": "I was having this problem on a django app I&#39;m tinkering with (disclaimer: I&#39;m tinkering to learn, and am in no way an expert). What I wanted to do was use jQuery ajax to send a DELETE request to a resource, delete it on the server side, then send a redirect back to (basically) the homepage. When I sent `HttpResponseRedirect(&#39;/the-redirect/&#39;)` from the python script, jQuery&#39;s ajax method was receiving 200 instead of 302. So, what I did was to send a response of 300 with:\r\n\r\n    response = HttpResponse(status=&#39;300&#39;)\r\n    response[&#39;Location&#39;] = &#39;/the-redirect/&#39; \r\n    return  response\r\n\r\nThen I sent/handled the request on the client with jQuery.ajax like so:\r\n\r\n    &lt;button onclick=&quot;*the-jquery*&quot;&gt;Delete&lt;/button&gt;\r\n\r\n    where *the-jquery* =\r\n    $.ajax({ \r\n      type: &#39;DELETE&#39;, \r\n      url: &#39;/resource-url/&#39;, \r\n      complete: function(jqxhr){ \r\n        window.location = jqxhr.getResponseHeader(&#39;Location&#39;); \r\n      } \r\n    });\r\n\r\nMaybe using 300 isn&#39;t &quot;right&quot;, but at least it worked just like I wanted it to.\r\n\r\nPS :this was a huge pain to edit on the mobile version of SO. Stupid ISP put my service cancellation request through right when I was done with my answer! "}, {"tags": [], "down_vote_count": 0, "creation_date": 1315673082, "answer_id": 7373118, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1315673082, "body_markdown": "    \t&lt;script&gt;\r\n\t\tfunction showValues() {\r\n\t\t\tvar str = $(&quot;form&quot;).serialize();\r\n\t\t\t$.post(&#39;loginUser.html&#39;, \r\n\t\t\tstr,\r\n\t\t\tfunction(responseText, responseStatus, responseXML){\r\n\t\t\t\tif(responseStatus==&quot;success&quot;){\r\n\t\t\t\t\twindow.location= &quot;adminIndex.html&quot;;\r\n\t\t\t\t}\r\n\t\t    });\t\t\r\n\t\t}\r\n\t&lt;/script&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1323115140, "answer_id": 8391074, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1323115140, "body_markdown": "I solved this by putting the following in my login.php page.\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n        if (top.location.href.indexOf(&#39;login.php&#39;) == -1) {\r\n            top.location.href = &#39;/login.php&#39;;\r\n        }\r\n    &lt;/script&gt;\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1325813588, "answer_id": 8752354, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1325813588, "body_markdown": "I resolved this issue like this:\r\n\r\nAdd a middleware to process response, if it is a redirect for an ajax request, change the response to a normal response with the redirect url.\r\n\r\n    class AjaxRedirect(object):\r\n      def process_response(self, request, response):\r\n        if request.is_ajax():\r\n          if type(response) == HttpResponseRedirect:\r\n            r = HttpResponse(json.dumps({&#39;redirect&#39;: response[&#39;Location&#39;]}))\r\n            return r\r\n        return response\r\n\r\nThen in ajaxComplete, if the response contains redirect, it must be a redirect, so change the browser&#39;s location.\r\n\r\n      $(&#39;body&#39;).ajaxComplete(function (e, xhr, settings) {\r\n        if (xhr.status == 200) {\r\n          var redirect = null;\r\n          try {\r\n            redirect = $.parseJSON(xhr.responseText).redirect;\r\n            if (redirect) {\r\n              window.location.href = redirect.replace(/\\?.*$/, &quot;?next=&quot; + window.location.pathname);\r\n            }\r\n          } catch (e) {\r\n            return;\r\n          }\r\n    \r\n        }\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1334086739, "answer_id": 10095275, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1334086739, "body_markdown": "You can also hook XMLHttpRequest send prototype. This will work for all sends (jQuery/dojo/etc) with one handler.\r\n\r\nI wrote this code to handle a 500 page expired error, but it should work just as well to trap a 200 redirect. Ready the wikipedia entry on [XMLHttpRequest](http://en.wikipedia.org/wiki/XMLHttpRequest) onreadystatechange about the meaning of readyState.\r\n\r\n\r\n    // Hook XMLHttpRequest\r\n    var oldXMLHttpRequestSend = XMLHttpRequest.prototype.send;\r\n\r\n    XMLHttpRequest.prototype.send = function() {\r\n      //console.dir( this );\r\n\r\n      this.onreadystatechange = function() {\r\n        if (this.readyState == 4 &amp;&amp; this.status == 500 &amp;&amp; this.responseText.indexOf(&quot;Expired&quot;) != -1) {\r\n          try {\r\n            document.documentElement.innerHTML = this.responseText;\r\n          } catch(error) {\r\n            // IE makes document.documentElement read only\r\n            document.body.innerHTML = this.responseText;\r\n          }\r\n        }\r\n      };\r\n\r\n      oldXMLHttpRequestSend.apply(this, arguments);\r\n    }\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1337767347, "answer_id": 10717647, "path": "stack.django.answer", "score": 31, "up_vote_count": 31, "is_accepted": false, "last_activity_date": 1337767347, "body_markdown": "I just wanted to share my approach as this might it might help someone:\r\n\r\nI basically included a JavaScript module which handles the authentication stuff like displaying the username and also this case handling the **redirect to the login page**.\r\n\r\nMy scenario: We basically have an ISA server in between which listens to all requests and **responds with a 302 and a location header** to our login page.\r\n\r\nIn my JavaScript module my **initial approach** was something like\r\n\r\n    $(document).ajaxComplete(function(e, xhr, settings){\r\n        if(xhr.status === 302){\r\n            //check for location header and redirect...\r\n        }\r\n    });\r\n\r\nThe problem (as many here already mentioned) is that the browser handles the redirect by itself wherefore my `ajaxComplete` callback got never called, but instead I got the **response of the already redirected Login page** which obviously was a `status 200`. The problem: how do you detect whether the successful 200 response is your actual login page or just some other arbitrary page??\r\n\r\n## The solution\r\nSince I was not able to capture 302 redirect responses, I added a `LoginPage` header on my login page which contained the url of the login page itself. In the module I now listen for the header and do a redirect:\r\n\r\n    if(xhr.status === 200){\r\n        var loginPageRedirectHeader = xhr.getResponseHeader(&quot;LoginPage&quot;);\r\n        if(loginPageRedirectHeader &amp;&amp; loginPageRedirectHeader !== &quot;&quot;){\r\n            window.location.replace(loginPageRedirectHeader);\r\n        }\r\n    }\r\n\r\n...and that works like charm :). You might wonder why I include the url in the `LoginPage` header...well basically because I found no way of determining the url of `GET` resulting from the automatic location redirect from the `xhr` object...\r\n\r\n    "}, {"tags": [], "down_vote_count": 0, "creation_date": 1351009676, "answer_id": 13035088, "path": "stack.django.answer", "score": 21, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1392911952, "last_edit_date": 1495540046, "body_markdown": "I think a better way to handle this is to leverage the existing HTTP protocol response codes, specifically `401 Unauthorized`.\r\n\r\nHere is how I solved it:\r\n\r\n 1. Server side: If session expires, and request is ajax. send a 401 response code header\r\n 2. Client side: Bind to the ajax events\r\n\r\n    \t$(&#39;body&#39;).bind(&#39;ajaxSuccess&#39;,function(event,request,settings){\r\n\t\tif (401 == request.status){\r\n\t\t\twindow.location = &#39;/users/login&#39;;\r\n\t\t}\r\n        }).bind(&#39;ajaxError&#39;,function(event,request,settings){\r\n\t\tif (401 == request.status){\r\n\t\t\twindow.location = &#39;/users/login&#39;;\r\n        }\r\n        });\r\n\r\nIMO this is more generic and you are not writing some new custom spec/header.  You also should not have to modify any of your existing ajax calls.\r\n\r\n**Edit:** Per @Rob&#39;s comment below, 401 (the HTTP status code for authentication errors) should be the indicator. See https://stackoverflow.com/questions/3297048/403-forbidden-vs-401-unauthorized-http-responses for more detail. With that being said some web frameworks use 403 for both authentication AND authorization errors - so adapt accordingly. Thanks Rob."}, {"tags": [], "down_vote_count": 0, "creation_date": 1357540528, "answer_id": 14191048, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1357540528, "body_markdown": "If you also want to pass the values then you can also set the session variables and access \r\nEg: \r\nIn your jsp you can write \r\n\r\n    &lt;% HttpSession ses = request.getSession(true);\r\n       String temp=request.getAttribute(&quot;what_you_defined&quot;); %&gt;\r\nAnd then you can store this temp value in your javascript variable and play around \r\n    "}, {"tags": [], "down_vote_count": 0, "creation_date": 1360158302, "answer_id": 14730592, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1360158302, "body_markdown": "I didn&#39;t have any success with the header solution - they were never picked up in my ajaxSuccess / ajaxComplete method. I used Steg&#39;s answer with the custom response, but I modified the JS side some. I setup a method that I call in each function so I can use standard `$.get` and `$.post` methods.\r\n\r\n\tfunction handleAjaxResponse(data, callback) {\r\n\t\t//Try to convert and parse object\r\n\t\ttry {\r\n\t\t\tif (jQuery.type(data) === &quot;string&quot;) {\r\n\t\t\t\tdata = jQuery.parseJSON(data);\r\n\t\t\t}\r\n\t\t\tif (data.error) {\r\n\t\t\t\tif (data.error == &#39;login&#39;) {\r\n\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse if (data.error.length &gt; 0) {\r\n\t\t\t\t\talert(data.error);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(ex) { }\r\n\t\t\r\n\t\tif (callback) {\r\n\t\t\tcallback(data);\r\n\t\t}\r\n\t}\r\n\r\n\r\nExample of it in use...\r\n\r\n\tfunction submitAjaxForm(form, url, action) {\r\n\t\t//Lock form\r\n\t\tform.find(&#39;.ajax-submit&#39;).hide();\r\n\t\tform.find(&#39;.loader&#39;).show();\r\n\r\n\t\t$.post(url, form.serialize(), function (d) {\r\n\t\t\t//Unlock form\r\n\t\t\tform.find(&#39;.ajax-submit&#39;).show();\r\n\t\t\tform.find(&#39;.loader&#39;).hide();\r\n\r\n\t\t\thandleAjaxResponse(d, function (data) {\r\n\t\t\t\t// ... more code for if auth passes ...\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn false;\r\n\t}\r\n\t"}, {"tags": [], "down_vote_count": 0, "creation_date": 1367884506, "answer_id": 16409097, "path": "stack.django.answer", "score": 26, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1368384095, "last_edit_date": 1495540046, "body_markdown": "I know this topic is old, but I&#39;ll give yet another approach I&#39;ve found and previously described [here][1]. Basically I&#39;m using ASP.MVC with WIF *(but this is not really important for the context of this topic - answer is adequate no matter which frameworks are used. The clue stays unchanged - dealing with issues related to authentication failures while performing ajax requests)*. \r\n\r\nThe approach shown below can be applied to all ajax requests out of the box (if they do not redefine beforeSend event obviously).\r\n\r\n    $.ajaxSetup({\r\n        beforeSend: checkPulse,\r\n        error: function (XMLHttpRequest, textStatus, errorThrown) {\r\n            document.open();\r\n            document.write(XMLHttpRequest.responseText);\r\n            document.close();\r\n        }\r\n    });\r\n    \r\nBefore any ajax request is performed `CheckPulse` method is invoked (the controller method which can be anything simplest):\r\n\r\n    [Authorize]\r\n    public virtual void CheckPulse() {}\r\n\r\nIf user is not authenticated (token has expired) such method cannot be accessed (protected by `Authorize` attribute). Because the framework handles authentication, while token expires, it puts http status 302 to the response. If you don&#39;t want your browser to handle 302 response transparently, catch it in Global.asax and change response status - for example to 200 OK. Additionally, add header, which instructs you to process such response in special way (later at the client side):\r\n\r\n    protected void Application_EndRequest()\r\n    {\r\n        if (Context.Response.StatusCode == 302\r\n            &amp;&amp; (new HttpContextWrapper(Context)).Request.IsAjaxRequest())\r\n        {                \r\n            Context.Response.StatusCode = 200;\r\n            Context.Response.AddHeader(&quot;REQUIRES_AUTH&quot;, &quot;1&quot;);\r\n        }\r\n    }\r\n\r\nFinally at the client side check for such custom header. If present - full redirection to logon page should be done (in my case `window.location` is replaced by url from request which is handled automatically by my framework).\r\n\r\n    function checkPulse(XMLHttpRequest) {\r\n        var location = window.location.href;\r\n        $.ajax({\r\n            url: &quot;/Controller/CheckPulse&quot;,\r\n            type: &#39;GET&#39;,\r\n            async: false,\r\n            beforeSend: null,\r\n            success:\r\n                function (result, textStatus, xhr) {\r\n                    if (xhr.getResponseHeader(&#39;REQUIRES_AUTH&#39;) === &#39;1&#39;) {\r\n                        XMLHttpRequest.abort(); // terminate further ajax execution\r\n                        window.location = location;\r\n                    }\r\n                }\r\n        });\r\n    }\r\n\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/11049690/session-cookies-expiration-handling-in-asp-net-mvc-3-while-using-wif-and-jquery"}, {"tags": [], "down_vote_count": 2, "creation_date": 1379434035, "answer_id": 18854676, "path": "stack.django.answer", "score": 7, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1379434035, "last_edit_date": 1495540510, "body_markdown": "While the answers seem to work for people if you&#39;re using Spring Security I have found extending LoginUrlAuthenticationEntryPoint and adding specific code to handle AJAX more robust.  Most of the examples intercept *all* redirects not just authentication failures.  This was undesirable for the project I work on.  You may find the need to also extend ExceptionTranslationFilter and override the &quot;sendStartAuthentication&quot; method to remove the caching step if you don&#39;t want the failed AJAX request cached.\r\n\r\nExample AjaxAwareAuthenticationEntryPoint:\r\n\r\n    public class AjaxAwareAuthenticationEntryPoint extends\r\n\t\tLoginUrlAuthenticationEntryPoint {\r\n\t\r\n    public AjaxAwareAuthenticationEntryPoint(String loginUrl) {\r\n        super(loginUrl);\r\n    }\r\n\r\n    @Override\r\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\r\n        if (isAjax(request)) {\r\n            response.sendError(HttpStatus.UNAUTHORIZED.value(), &quot;Please re-authenticate yourself&quot;);\r\n        } else {\r\n            super.commence(request, response, authException);\r\n        }\r\n    }\r\n\r\n    public static boolean isAjax(HttpServletRequest request) {\r\n        return request != null &amp;&amp; &quot;XMLHttpRequest&quot;.equals(request.getHeader(&quot;X-Requested-With&quot;));\r\n    }\r\n}\r\n\r\nSources:\r\n[1][1], [2][2]\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/11242174/handle-session-expired-event-in-spring-based-web-application\r\n  [2]: http://yoyar.com/blog/2012/06/dealing-with-the-spring-security-ajax-session-timeout-problem/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1392386215, "answer_id": 21781321, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1396355421, "last_edit_date": 1396355421, "body_markdown": "Most of the given solutions use a workaround, using an extra header or an inappropiate HTTP code. Those solutions will most probably work but feel a bit &#39;hacky&#39;. I&#39;ve come up with another solution.\r\n\r\nWe&#39;re using WIF which is configured to redirect (passiveRedirectEnabled=&quot;true&quot;) on a 401 response. The redirect is usefull when handling normal requests but won&#39;t work for AJAX requests (since browsers won&#39;t execute the 302/redirect). \r\n\r\nUsing the following code in your global.asax you can disable the redirect for AJAX requests:\r\n\r\n        void WSFederationAuthenticationModule_AuthorizationFailed(object sender, AuthorizationFailedEventArgs e)\r\n        {\r\n            string requestedWithHeader = HttpContext.Current.Request.Headers[&quot;X-Requested-With&quot;];\r\n\r\n            if (!string.IsNullOrEmpty(requestedWithHeader) &amp;&amp; requestedWithHeader.Equals(&quot;XMLHttpRequest&quot;, StringComparison.OrdinalIgnoreCase))\r\n            {\r\n                e.RedirectToIdentityProvider = false;\r\n            }\r\n        }\r\n\r\nThis allows you to return 401 responses for AJAX requests, which your javascript can then handle by reloading the page. Reloading the page  will throw a 401 which will be handled by WIF (and WIF will redirect the user to the login page).\r\n\r\nAn example javascript to handle 401 errors:\r\n\r\n\t$(document).ajaxError(function (event, jqxhr, settings, exception) {\r\n\t\r\n\t\tif (jqxhr.status == 401) { //Forbidden, go to login\r\n\t\t\t//Use a reload, WIF will redirect to Login\r\n\t\t\tlocation.reload(true);\r\n\t\t}\r\n\t});"}, {"tags": [], "down_vote_count": 4, "creation_date": 1394898580, "answer_id": 22426015, "path": "stack.django.answer", "score": -2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1394898580, "body_markdown": "this worked for me: \r\n\r\n    success: function(data, textStatus, xhr) {\r\n\r\n\t\t\tconsole.log(xhr.status);\r\n    }\r\n\r\non success, ajax will get the same status code the browser gets from the server and execute it."}, {"tags": [], "down_vote_count": 0, "creation_date": 1398980528, "answer_id": 23417149, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1464698307, "last_edit_date": 1464698307, "body_markdown": "Another solution I found (especially useful if you want to set a global behaviour) is to use the [`$.ajaxsetup()` method][1] together with the [`statusCode` property][2]. Like others pointed out, don&#39;t use a redirect statuscode (``3xx``), instead use a ``4xx`` statuscode and handle the redirect client-side.\r\n\r\n    $.ajaxSetup({ \r\n      statusCode : {\r\n        400 : function () {\r\n          window.location = &quot;/&quot;;\r\n        }\r\n      }\r\n    });\r\n\r\nReplace ``400`` with the statuscode you want to handle. Like already mentioned ``401 Unauthorized`` could be a good idea. I use the ``400`` since it&#39;s very unspecific and I can use the ``401`` for more specific cases (like wrong login credentials). So instead of redirecting directly your backend should return a ``4xx`` error-code when the session timed out and you you handle the redirect client-side. Works perfect for me even with frameworks like backbone.js\r\n\r\n\r\n  [1]: https://api.jquery.com/jQuery.ajax/\r\n  [2]: https://api.jquery.com/jquery.ajaxsetup/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1438236144, "answer_id": 31716188, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1438236144, "body_markdown": "Finally, I solve the problem by adding a custom `HTTP Header`. Just before response for every request in server side, i add the current requested url to response&#39;s header.\r\n\r\nMy application type on server is `Asp.Net MVC`, and it has a good place to do it. in `Global.asax` i implemented the `Application_EndRequest` event so:\r\n\r\n        public class MvcApplication : System.Web.HttpApplication\r\n        {\r\n\r\n        //  ...\r\n        //  ...\r\n\r\n            protected void Application_EndRequest(object sender, EventArgs e)\r\n            {\r\n                var app = (HttpApplication)sender;\r\n                app.Context.Response.Headers.Add(&quot;CurrentUrl&quot;,app.Context. Request.CurrentExecutionFilePath);\r\n            }\r\n            \r\n        }\r\n\r\nIt works perfect for me! Now in every response of the `JQuery` `$.post` i have the requested `url` and also other response headers which comes as result of `POST` method by status `302`, `303` ,... .\r\n\r\nand other important thing is that there is no need to modify code on server side nor client side.\r\n\r\nand the next is the ability to get access to the other information of post action such errors, messages, and ..., In this way.\r\n\r\nI posted this, maybe help someone :)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1460157977, "answer_id": 36510887, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1460157977, "body_markdown": "Some might find the below useful:\r\n\r\nI wanted clients to be redirected to the login page for any rest-action that is sent without an authorization token. Since all of my rest-actions are Ajax based, I needed a good generic way to redirect to the login page instead of handling the Ajax success function.\r\n\r\nThis is what I&#39;ve done:\r\n\r\nOn any Ajax request my server will return a Json 200 response &quot;NEED TO AUTHENTICATE&quot; (if the client needs to authenticate).\r\n\r\nSimple example in Java (server side):\r\n\r\n    @Secured\r\n    @Provider\r\n    @Priority(Priorities.AUTHENTICATION)\r\n    public class AuthenticationFilter implements ContainerRequestFilter {\r\n    \r\n    \tprivate final Logger m_logger = LoggerFactory.getLogger(AuthenticationFilter.class);\r\n    \t\r\n    \tpublic static final String COOKIE_NAME = &quot;token_cookie&quot;; \r\n    \t\r\n    \t@Override\r\n    \tpublic void filter(ContainerRequestContext context) throws IOException {\t\t\r\n    \t\t// Check if it has a cookie.\r\n    \t\ttry {\r\n    \t\t\tMap&lt;String, Cookie&gt; cookies = context.getCookies();\r\n    \r\n    \t\t\tif (!cookies.containsKey(COOKIE_NAME)) {\r\n    \t\t\t\tm_logger.debug(&quot;No cookie set - redirect to login page&quot;);\r\n    \t\t\t\tthrow new AuthenticationException();\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\tcatch (AuthenticationException e) {\r\n    \t\t\tcontext.abortWith(Response.ok(&quot;\\&quot;NEED TO AUTHENTICATE\\&quot;&quot;).type(&quot;json/application&quot;).build());\r\n    \t\t}\r\n    \t}\r\n    }\r\n\r\nIn my Javascript I&#39;ve added the following code:\r\n\r\n\t$.ajaxPrefilter(function(options, originalOptions, jqXHR) {\r\n\t    var originalSuccess = options.success;\r\n\r\n\t    options.success = function(data) {\r\n\t    \tif (data == &quot;NEED TO AUTHENTICATE&quot;) {\r\n\t    \t\twindow.location.replace(&quot;/login.html&quot;);\r\n\t    \t}\r\n\t    \telse {\r\n\t    \t\toriginalSuccess(data);\r\n\t    \t}\r\n\t    };\t    \r\n\t});\r\n\t\r\nAnd that&#39;s about it.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1477575065, "answer_id": 40285917, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1477575065, "body_markdown": "This problem may appear then using ASP.NET MVC RedirectToAction method. To prevent form displaying the response in div you can simply do some kind of ajax response filter for incomming responses with **$.ajaxSetup**. If the response contains MVC redirection you can evaluate this expression on JS side. Example code for JS below:\r\n\r\n    $.ajaxSetup({\r\n        dataFilter: function (data, type) {\r\n            if (data &amp;&amp; typeof data == &quot;string&quot;) {\r\n                if (data.indexOf(&#39;window.location&#39;) &gt; -1) {\r\n                    eval(data);\r\n                }\r\n            }\r\n            return data;\r\n        }\r\n    });\r\nIf data is: *&quot;window.location = &#39;/Acount/Login&#39;&quot;* above filter will catch that and evaluate to make the redirection instead of letting the data to be displayed."}], "title": "How to manage a redirect request after a jQuery Ajax call", "view_count": 684673, "answer_count": 29, "code_snippet": ["<code>$.post()</code>", "<code>div</code>", "<code>div</code>", "<code>HttpContext.Response.AddHeader</code>", "<code>$.ajax({\n    type: \"POST\",\n    url: reqUrl,\n    data: reqBody,\n    dataType: \"json\",\n    success: function(data, textStatus) {\n        if (data.redirect) {\n            // data.redirect contains the string URL to redirect to\n            window.location.href = data.redirect;\n        }\n        else {\n            // data.form contains the HTML for the replacement form\n            $(\"#myform\").replaceWith(data.form);\n        }\n    }\n});\n</code>", "<code>public ActionResult Index(){\n    if (!HttpContext.User.Identity.IsAuthenticated)\n    {\n        HttpContext.Response.AddHeader(\"REQUIRES_AUTH\",\"1\");\n    }\n    return View();\n}\n</code>", "<code>ajaxSuccess</code>", "<code>$(document).ajaxSuccess(function(event, request, settings) {\n    if (request.getResponseHeader('REQUIRES_AUTH') === '1') {\n       window.location = '/';\n    }\n});\n</code>", "<code>function cbWrapper(data, funct){\n    if($(\"#myForm\", data).length &gt; 0)\n        top.location.href=\"login.htm\";//redirection\n    else\n        funct(data);\n}\n</code>", "<code>$.post(\"myAjaxHandler\", \n       {\n        param1: foo,\n        param2: bar\n       },\n       function(data){\n           cbWrapper(data, myActualCB);\n       }, \n       \"html\"\n);\n</code>", "<code>$.ajax(\n   error:  function (jqXHR, timeout, message) {\n    var contentType = jqXHR.getResponseHeader(\"Content-Type\");\n    if (jqXHR.status === 200 &amp;&amp; contentType.toLowerCase().indexOf(\"text/html\") &gt;= 0) {\n        // assume that our login has expired - reload our current page\n        window.location.reload();\n    }\n\n});\n</code>", "<code>$.ajax()</code>", "<code>$.ajax({\n  url: \"/yourservlet\",\n  data: { },\n  complete: function(xmlHttp) {\n    // xmlHttp is a XMLHttpRquest object\n    alert(xmlHttp.status);\n  }\n});\n</code>", "<code>if (xmlHttp.code != 200) {\n  top.location.href = '/some/other/page';\n}\n</code>", "<code>$(document).ajaxComplete(function(e, xhr, settings){\n    if(xhr.status === 302){\n        //check for location header and redirect...\n    }\n});\n</code>", "<code>ajaxComplete</code>", "<code>status 200</code>", "<code>LoginPage</code>", "<code>if(xhr.status === 200){\n    var loginPageRedirectHeader = xhr.getResponseHeader(\"LoginPage\");\n    if(loginPageRedirectHeader &amp;&amp; loginPageRedirectHeader !== \"\"){\n        window.location.replace(loginPageRedirectHeader);\n    }\n}\n</code>", "<code>LoginPage</code>", "<code>GET</code>", "<code>xhr</code>", "<code>X-</code>", "<code>X-LoginPage: http://example.com/login</code>", "<code>X-</code>", "<code>$.ajaxSetup({\n    beforeSend: checkPulse,\n    error: function (XMLHttpRequest, textStatus, errorThrown) {\n        document.open();\n        document.write(XMLHttpRequest.responseText);\n        document.close();\n    }\n});\n</code>", "<code>CheckPulse</code>", "<code>[Authorize]\npublic virtual void CheckPulse() {}\n</code>", "<code>Authorize</code>", "<code>protected void Application_EndRequest()\n{\n    if (Context.Response.StatusCode == 302\n        &amp;&amp; (new HttpContextWrapper(Context)).Request.IsAjaxRequest())\n    {                \n        Context.Response.StatusCode = 200;\n        Context.Response.AddHeader(\"REQUIRES_AUTH\", \"1\");\n    }\n}\n</code>", "<code>window.location</code>", "<code>function checkPulse(XMLHttpRequest) {\n    var location = window.location.href;\n    $.ajax({\n        url: \"/Controller/CheckPulse\",\n        type: 'GET',\n        async: false,\n        beforeSend: null,\n        success:\n            function (result, textStatus, xhr) {\n                if (xhr.getResponseHeader('REQUIRES_AUTH') === '1') {\n                    XMLHttpRequest.abort(); // terminate further ajax execution\n                    window.location = location;\n                }\n            }\n    });\n}\n</code>", "<code>401 Unauthorized</code>", "<code>$('body').bind('ajaxSuccess',function(event,request,settings){\nif (401 == request.status){\n    window.location = '/users/login';\n}\n}).bind('ajaxError',function(event,request,settings){\nif (401 == request.status){\n    window.location = '/users/login';\n}\n});\n</code>", "<code>class AjaxRedirect(object):\n  def process_response(self, request, response):\n    if request.is_ajax():\n      if type(response) == HttpResponseRedirect:\n        r = HttpResponse(json.dumps({'redirect': response['Location']}))\n        return r\n    return response\n</code>", "<code>  $('body').ajaxComplete(function (e, xhr, settings) {\n    if (xhr.status == 200) {\n      var redirect = null;\n      try {\n        redirect = $.parseJSON(xhr.responseText).redirect;\n        if (redirect) {\n          window.location.href = redirect.replace(/\\?.*$/, \"?next=\" + window.location.pathname);\n        }\n      } catch (e) {\n        return;\n      }\n\n    }\n</code>", "<code>$.ajaxsetup()</code>", "<code>statusCode</code>", "<code>3xx</code>", "<code>4xx</code>", "<code>$.ajaxSetup({ \n  statusCode : {\n    400 : function () {\n      window.location = \"/\";\n    }\n  }\n});\n</code>", "<code>400</code>", "<code>401 Unauthorized</code>", "<code>400</code>", "<code>401</code>", "<code>4xx</code>", "<code>$.ajaxSetup({\n    dataFilter: function (data, type) {\n        if (data &amp;&amp; typeof data == \"string\") {\n            if (data.indexOf('window.location') &gt; -1) {\n                eval(data);\n            }\n        }\n        return data;\n    }\n});\n</code>", "<code>data</code>", "<code>    void WSFederationAuthenticationModule_AuthorizationFailed(object sender, AuthorizationFailedEventArgs e)\n    {\n        string requestedWithHeader = HttpContext.Current.Request.Headers[\"X-Requested-With\"];\n\n        if (!string.IsNullOrEmpty(requestedWithHeader) &amp;&amp; requestedWithHeader.Equals(\"XMLHttpRequest\", StringComparison.OrdinalIgnoreCase))\n        {\n            e.RedirectToIdentityProvider = false;\n        }\n    }\n</code>", "<code>$(document).ajaxError(function (event, jqxhr, settings, exception) {\n\n    if (jqxhr.status == 401) { //Forbidden, go to login\n        //Use a reload, WIF will redirect to Login\n        location.reload(true);\n    }\n});\n</code>", "<code>   if request.is_ajax():\n      response.status_code = 278\n</code>", "<code>$('#my-form').submit(function(event){ \n\n  event.preventDefault();   \n  var options = {\n    url: $(this).attr('action'),\n    type: 'POST',\n    complete: function(response, textStatus) {    \n      if (response.status == 278) { \n        window.location = response.getResponseHeader('Location')\n      }\n      else { ... your code here ... } \n    },\n    data: $(this).serialize(),   \n  };   \n  $.ajax(options); \n});\n</code>", "<code>$(document).ready(function ()\n{\n    $(document).ajaxSend(\n    function(event,request,settings)\n    {\n        var intercepted_success = settings.success;\n        settings.success = function( a, b, c ) \n        {  \n            if( request.responseText.indexOf( \"&lt;html&gt;\" ) &gt; -1 )\n                window.location = window.location;\n            else\n                intercepted_success( a, b, c );\n        };\n    });\n});\n</code>", "<code>    $(document).ready(function () {\n        if ($(\"#site\").length &gt; 0) {\n            window.location = \"&lt;%= Url.Content(\"~\") %&gt;\" + \"Login/LogOn\";\n        }\n    });\n</code>", "<code>    &lt;script&gt;\n    function showValues() {\n        var str = $(\"form\").serialize();\n        $.post('loginUser.html', \n        str,\n        function(responseText, responseStatus, responseXML){\n            if(responseStatus==\"success\"){\n                window.location= \"adminIndex.html\";\n            }\n        });     \n    }\n&lt;/script&gt;\n</code>", "<code>&lt;script type=\"text/javascript\"&gt;\n    if (top.location.href.indexOf('login.php') == -1) {\n        top.location.href = '/login.php';\n    }\n&lt;/script&gt;\n</code>", "<code>public class AjaxAwareAuthenticationEntryPoint extends\n    LoginUrlAuthenticationEntryPoint {\n\npublic AjaxAwareAuthenticationEntryPoint(String loginUrl) {\n    super(loginUrl);\n}\n\n@Override\npublic void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\n    if (isAjax(request)) {\n        response.sendError(HttpStatus.UNAUTHORIZED.value(), \"Please re-authenticate yourself\");\n    } else {\n        super.commence(request, response, authException);\n    }\n}\n\npublic static boolean isAjax(HttpServletRequest request) {\n    return request != null &amp;&amp; \"XMLHttpRequest\".equals(request.getHeader(\"X-Requested-With\"));\n}\n</code>", "<code>@Secured\n@Provider\n@Priority(Priorities.AUTHENTICATION)\npublic class AuthenticationFilter implements ContainerRequestFilter {\n\n    private final Logger m_logger = LoggerFactory.getLogger(AuthenticationFilter.class);\n\n    public static final String COOKIE_NAME = \"token_cookie\"; \n\n    @Override\n    public void filter(ContainerRequestContext context) throws IOException {        \n        // Check if it has a cookie.\n        try {\n            Map&lt;String, Cookie&gt; cookies = context.getCookies();\n\n            if (!cookies.containsKey(COOKIE_NAME)) {\n                m_logger.debug(\"No cookie set - redirect to login page\");\n                throw new AuthenticationException();\n            }\n        }\n        catch (AuthenticationException e) {\n            context.abortWith(Response.ok(\"\\\"NEED TO AUTHENTICATE\\\"\").type(\"json/application\").build());\n        }\n    }\n}\n</code>", "<code>$.ajaxPrefilter(function(options, originalOptions, jqXHR) {\n    var originalSuccess = options.success;\n\n    options.success = function(data) {\n        if (data == \"NEED TO AUTHENTICATE\") {\n            window.location.replace(\"/login.html\");\n        }\n        else {\n            originalSuccess(data);\n        }\n    };      \n});\n</code>", "<code>response.setStatus(response.SC_MOVED_PERMANENTLY);</code>", "<code>.toString()</code>", "<code>if (xmlHttp.status == 301) {\n    top.location.href = 'xxxx.jsp';\n}</code>", "<code>// redirect ajax requests that are redirected, not found (404), or forbidden (403.)\n$('body').bind('ajaxComplete', function(event,request,settings){\n        switch(request.status) {\n            case 301: case 404: case 403:                    \n                window.location.replace(\"http://mysite.tld/login\");\n                break;\n        }\n});\n</code>", "<code>$('body').bind('ajaxError', function(event,request,settings){\n    window.location.replace(\"http://mysite.tld/login\");\n}\n</code>", "<code>&lt;% HttpSession ses = request.getSession(true);\n   String temp=request.getAttribute(\"what_you_defined\"); %&gt;\n</code>", "<code>$.get</code>", "<code>$.post</code>", "<code>function handleAjaxResponse(data, callback) {\n    //Try to convert and parse object\n    try {\n        if (jQuery.type(data) === \"string\") {\n            data = jQuery.parseJSON(data);\n        }\n        if (data.error) {\n            if (data.error == 'login') {\n                window.location.reload();\n                return;\n            }\n            else if (data.error.length &gt; 0) {\n                alert(data.error);\n                return;\n            }\n        }\n    }\n    catch(ex) { }\n\n    if (callback) {\n        callback(data);\n    }\n}\n</code>", "<code>function submitAjaxForm(form, url, action) {\n    //Lock form\n    form.find('.ajax-submit').hide();\n    form.find('.loader').show();\n\n    $.post(url, form.serialize(), function (d) {\n        //Unlock form\n        form.find('.ajax-submit').show();\n        form.find('.loader').hide();\n\n        handleAjaxResponse(d, function (data) {\n            // ... more code for if auth passes ...\n        });\n    });\n    return false;\n}\n</code>", "<code>HTTP Header</code>", "<code>Asp.Net MVC</code>", "<code>Global.asax</code>", "<code>Application_EndRequest</code>", "<code>    public class MvcApplication : System.Web.HttpApplication\n    {\n\n    //  ...\n    //  ...\n\n        protected void Application_EndRequest(object sender, EventArgs e)\n        {\n            var app = (HttpApplication)sender;\n            app.Context.Response.Headers.Add(\"CurrentUrl\",app.Context. Request.CurrentExecutionFilePath);\n        }\n\n    }\n</code>", "<code>JQuery</code>", "<code>$.post</code>", "<code>url</code>", "<code>POST</code>", "<code>302</code>", "<code>303</code>", "<code>HttpResponseRedirect('/the-redirect/')</code>", "<code>response = HttpResponse(status='300')\nresponse['Location'] = '/the-redirect/' \nreturn  response\n</code>", "<code>&lt;button onclick=\"*the-jquery*\"&gt;Delete&lt;/button&gt;\n\nwhere *the-jquery* =\n$.ajax({ \n  type: 'DELETE', \n  url: '/resource-url/', \n  complete: function(jqxhr){ \n    window.location = jqxhr.getResponseHeader('Location'); \n  } \n});\n</code>", "<code>// Hook XMLHttpRequest\nvar oldXMLHttpRequestSend = XMLHttpRequest.prototype.send;\n\nXMLHttpRequest.prototype.send = function() {\n  //console.dir( this );\n\n  this.onreadystatechange = function() {\n    if (this.readyState == 4 &amp;&amp; this.status == 500 &amp;&amp; this.responseText.indexOf(\"Expired\") != -1) {\n      try {\n        document.documentElement.innerHTML = this.responseText;\n      } catch(error) {\n        // IE makes document.documentElement read only\n        document.body.innerHTML = this.responseText;\n      }\n    }\n  };\n\n  oldXMLHttpRequestSend.apply(this, arguments);\n}\n</code>", "<code>$.ajax({\n    //.... other definition\n    complete:function(xmlHttp){\n        if(xmlHttp.status.toString()[0]=='3'){\n        top.location.href = xmlHttp.getResponseHeader('Location');\n    }\n});\n</code>", "<code>success: function(data, textStatus, xhr) {\n\n        console.log(xhr.status);\n}\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "debugging"], "creation_date": 1247471822, "body_markdown": "So, I started learning to code in [Python][1] and later [Django][2]. The first times it was hard looking at tracebacks and actually figure out what I did wrong and where the syntax error was. Some time has passed now and some way along the way, I guess I got a routine in debugging my Django code. As this was done early in my coding experience, I sat down and wondered if how I was doing this was ineffective and could be done faster. I usually manage to find and correct the bugs in my code, but I wonder if I should be doing it faster?\r\n\r\nI usually just use the debug info Django gives when enabled. When things do end up as I thought it would, I break the code flow a lot with a syntax error, and look at the variables at that point in the flow to figure out, where the code does something other than what I wanted.\r\n\r\nBut can this be improved? Are there some good tools or better ways to debug your Django code?\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Python_%28programming_language%29\r\n  [2]: http://en.wikipedia.org/wiki/Django_%28web_framework%29\r\n", "last_edit_date": 1267353650, "up_vote_count": 466, "link": "https://stackoverflow.com/questions/1118183/how-to-debug-in-django-the-good-way", "_childDocuments_": [{"tags": [], "down_vote_count": 4, "creation_date": 1247473764, "answer_id": 1118271, "path": "stack.django.answer", "score": 432, "up_vote_count": 436, "is_accepted": true, "last_activity_date": 1512478085, "last_edit_date": 1512478085, "body_markdown": "There are a bunch of ways to do it, but the most straightforward is to simply \r\nuse the [Python debugger][1]. Just add following line in to a Django view function:\r\n\r\n    import pdb; pdb.set_trace()\r\n\r\nIf you try to load that page in your browser, the browser will hang and you get a prompt to carry on debugging on actual executing code.\r\n\r\nHowever there are other options suggested by others (I won&#39;t recommend them):\r\n\r\n    * return HttpResponse({variable to inspect})\r\n    \r\n    * print {variable to inspect}\r\n    \r\n    * raise Exception({variable to inspect})\r\n\r\nBut the Python Debugger (pdb) is highly recommended for all types of Python code. If you are already into pdb, you&#39;d also want to have a look at [**IPDB**][2] that uses [**ipython**][3] for debugging.\r\n\r\nAnother useful extension to pdb is [**pdb++**][7], suggested by [Antash][6].\r\n\r\nA useful reference provided by [Seafangs][5] : [**Using the Python debugger in Django**][4]\r\n\r\n  [1]: https://docs.python.org/2/library/pdb.html\r\n  [2]: http://pypi.python.org/pypi/ipdb/\r\n  [3]: http://ipython.org/\r\n  [4]: https://mike.tig.as/blog/2010/09/14/pdb/\r\n  [5]: https://stackoverflow.com/users/884640/seafangs\r\n  [6]: https://stackoverflow.com/users/5792269/antash\r\n  [7]: https://pypi.python.org/pypi/pdbpp/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1247473807, "answer_id": 1118273, "path": "stack.django.answer", "score": 75, "up_vote_count": 75, "is_accepted": false, "last_activity_date": 1355427494, "last_edit_date": 1355427494, "body_markdown": "There are a few tools that cooperate well and can make your debugging task easier.\r\n\r\nMost important is the [Django debug toolbar][1].\r\n\r\nThen you need good logging using the Python [logging][2] facility.  You can send logging output to a log file, but an easier option is sending log output to [firepython][3].  To use this you need to use the Firefox browser with the [firebug][4] extension. Firepython includes a firebug plugin that will display any server-side logging in a Firebug tab.\r\n\r\nFirebug itself is also critical for debugging the Javascript side of any app you develop.  (Assuming you have some JS code of course).\r\n\r\nI also liked [django-viewtools][5] for debugging views interactively using pdb, but I don&#39;t use it that much.\r\n\r\nThere are more useful tools like dozer for tracking down memory leaks (there are also other good suggestions given in answers here on SO for memory tracking).\r\n\r\n\r\n  [1]: https://github.com/django-debug-toolbar/django-debug-toolbar\r\n  [2]: http://docs.python.org/library/logging.html#module-logging\r\n  [3]: http://github.com/darwin/firepython/tree/master\r\n  [4]: http://getfirebug.com/\r\n  [5]: http://eric.themoritzfamily.com/2009/02/17/announcing-django-viewtools/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1247474454, "answer_id": 1118314, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1247474454, "body_markdown": "I use [pyDev][1] with Eclipse really good, set break points, step into code, view values on any objects and variables, try it.\r\n\r\n\r\n  [1]: http://www.pydev.sourceforge.net/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1247475284, "answer_id": 1118360, "path": "stack.django.answer", "score": 207, "up_vote_count": 207, "is_accepted": false, "last_activity_date": 1338626480, "last_edit_date": 1338626480, "body_markdown": "I really like [Werkzeug][1]&#39;s interactive debugger. It&#39;s similar to Django&#39;s debug page, except that you get an interactive shell on every level of the traceback. If you use the [django-extensions][2], you get a `runserver_plus` managment command which starts the development server and gives you Werkzeug&#39;s debugger on exceptions.\r\n\r\nOf course, you should only run this locally, as it gives anyone with a browser the rights to execute arbitrary python code in the context of the server.\r\n\r\n\r\n  [1]: http://werkzeug.pocoo.org/\r\n  [2]: https://github.com/django-extensions/django-extensions"}, {"tags": [], "down_vote_count": 0, "creation_date": 1266994329, "answer_id": 2324210, "path": "stack.django.answer", "score": 152, "up_vote_count": 152, "is_accepted": false, "last_activity_date": 1266994329, "body_markdown": "A little quickie for template tags:\r\n\r\n    @register.filter \r\n    def pdb(element):\r\n        import pdb; pdb.set_trace()\r\n        return element\r\n\r\nNow, inside a template you can do `{{ template_var|pdb }}` and enter a pdb session (given you&#39;re running the local devel server) where you can inspect `element` to your heart&#39;s content.\r\n\r\nIt&#39;s a very nice way to see what&#39;s happened to your object when it arrives at the template. \r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1266996316, "answer_id": 2324303, "path": "stack.django.answer", "score": 39, "up_vote_count": 39, "is_accepted": false, "last_activity_date": 1452350125, "last_edit_date": 1452350125, "body_markdown": "Almost everything has been mentioned so far, so I&#39;ll only add that instead of `pdb.set_trace()` one can use **ipdb.set_trace()** which uses iPython and therefore is more powerful (autocomplete and other goodies). This requires ipdb package, so you only need to `pip install ipdb`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1281611252, "answer_id": 3466951, "path": "stack.django.answer", "score": 48, "up_vote_count": 48, "is_accepted": false, "last_activity_date": 1300241316, "last_edit_date": 1300241316, "body_markdown": "I use [PyCharm](http://www.jetbrains.com/pycharm/) (same pydev engine as eclipse).  Really helps me to visually be able to step through my code and see what is happening.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1311984678, "answer_id": 6880214, "path": "stack.django.answer", "score": 27, "up_vote_count": 27, "is_accepted": false, "last_activity_date": 1311984678, "body_markdown": "I&#39;ve pushed `django-pdb` to [PyPI][1].\r\nIt&#39;s a simple app that means you don&#39;t need to edit your source code every time you want to break into pdb.\r\n\r\nInstallation is just...\r\n\r\n1. `pip install django-pdb`\r\n2. Add `&#39;django_pdb&#39;` to your `INSTALLED_APPS`\r\n\r\nYou can now run: `manage.py runserver --pdb` to break into pdb at the start of every view...\r\n\r\n    bash: manage.py runserver --pdb\r\n    Validating models...\r\n    \r\n    0 errors found\r\n    Django version 1.3, using settings &#39;testproject.settings&#39;\r\n    Development server is running at http://127.0.0.1:8000/\r\n    Quit the server with CONTROL-C.\r\n    \r\n    GET /\r\n    function &quot;myview&quot; in testapp/views.py:6\r\n    args: ()\r\n    kwargs: {}\r\n    \r\n    &gt; /Users/tom/github/django-pdb/testproject/testapp/views.py(7)myview()\r\n    -&gt; a = 1\r\n    (Pdb)\r\n\r\nAnd run: `manage.py test --pdb` to break into pdb on test failures/errors...\r\n\r\n    bash: manage.py test testapp --pdb\r\n    Creating test database for alias &#39;default&#39;...\r\n    E\r\n    ======================================================================\r\n    &gt;&gt;&gt; test_error (testapp.tests.SimpleTest)\r\n    ----------------------------------------------------------------------\r\n    Traceback (most recent call last):\r\n      File &quot;.../django-pdb/testproject/testapp/tests.py&quot;, line 16, in test_error\r\n        one_plus_one = four\r\n    NameError: global name &#39;four&#39; is not defined\r\n    ======================================================================\r\n    \r\n    &gt; /Users/tom/github/django-pdb/testproject/testapp/tests.py(16)test_error()\r\n    -&gt; one_plus_one = four\r\n    (Pdb)\r\n\r\nThe project&#39;s hosted on [GitHub][2], contributions are welcome of course.\r\n\r\n  [1]: http://pypi.python.org/pypi/django-pdb\r\n  [2]: https://github.com/tomchristie/django-pdb &quot;GitHub&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1328493913, "answer_id": 9154880, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1328493913, "body_markdown": "If using Aptana for django development, watch this: http://www.youtube.com/watch?v=qQh-UQFltJQ\r\n\r\nIf not, consider using it."}, {"tags": [], "down_vote_count": 0, "creation_date": 1333692584, "answer_id": 10039794, "path": "stack.django.answer", "score": 19, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1449336404, "last_edit_date": 1449336404, "body_markdown": "The easiest way to debug python - especially for programmers that are used to Visual Studio - is using PTVS (Python Tools for Visual Studio). \r\nThe steps are simple: \r\n\r\n1. Download and install it from http://pytools.codeplex.com/ \r\n2. Set breakpoints and press F5. \r\n3. Your breakpoint is hit, you can view/change the variables as easy as debugging C#/C++ programs. \r\n4. That&#39;s all :) \r\n\r\nIf you want to debug Django using PTVS, you need to do the following: \r\n\r\n1. In Project settings - General tab, set &quot;Startup File&quot; to &quot;manage.py&quot;, the entry point of the Django program. \r\n2. In Project settings - Debug tab, set &quot;Script Arguments&quot; to &quot;runserver --noreload&quot;. The key point is the &quot;--noreload&quot; here. If you don&#39;t set it, your breakpoints won&#39;t be hit. \r\n3. Enjoy it."}, {"tags": [], "down_vote_count": 1, "creation_date": 1344518574, "answer_id": 11884452, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1447080763, "last_edit_date": 1447080763, "body_markdown": "Most options are alredy mentioned.\r\nTo print template context, I&#39;ve created a simple library for that.\r\nSee https://github.com/edoburu/django-debugtools\r\n\r\nYou can use it to print template context without any `{% load %}` construct:\r\n\r\n    {% print var %}   prints variable\r\n    {% print %}       prints all\r\n\r\nIt uses a customized pprint format to display the variables in a ``&lt;pre&gt;`` tag."}, {"tags": [], "down_vote_count": 0, "creation_date": 1362781584, "answer_id": 15304395, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1362781584, "body_markdown": "I highly recommend epdb (Extended Python Debugger).  \r\n\r\nhttps://bitbucket.org/dugan/epdb\r\n\r\nOne thing I love about epdb for debugging Django or other Python webservers is the epdb.serve() command.  This sets a trace and serves this on a local port that you can connect to.  Typical use case:\r\n\r\nI have a view that I want to go through step-by-step. I&#39;ll insert the following at the point I want to set the trace.\r\n\r\n    import epdb; epdb.serve()\r\n\r\nOnce this code gets executed, I open a Python interpreter and connect to the serving instance.  I can analyze all the values and step through the code using the standard pdb commands like n, s, etc.\r\n\r\n    In [2]: import epdb; epdb.connect()\r\n    (Epdb) request\r\n    &lt;WSGIRequest\r\n    path:/foo,\r\n    GET:&lt;QueryDict: {}&gt;, \r\n    POST:&lt;QuestDict: {}&gt;,\r\n    ...\r\n    &gt;\r\n    (Epdb) request.session.session_key\r\n    &#39;i31kq7lljj3up5v7hbw9cff0rga2vlq5&#39;\r\n    (Epdb) list\r\n     85  \t    raise some_error.CustomError()\r\n     86 \r\n     87  \t# Example login view\r\n     88  \tdef login(request, username, password):\r\n     89  \t    import epdb; epdb.serve()\r\n     90  -&gt;\t    return my_login_method(username, password)\r\n     91\r\n     92  \t# Example view to show session key\r\n     93  \tdef get_session_key(request):\r\n     94  \t    return request.session.session_key\r\n     95\r\n\r\nAnd tons more that you can learn about typing epdb help at any time.\r\n\r\nIf you want to serve or connect to multiple epdb instances at the same time, you can specify the port to listen on (default is 8080).  I.e.\r\n\r\n    import epdb; epdb.serve(4242)\r\n\r\n    &gt;&gt; import epdb; epdb.connect(host=&#39;192.168.3.2&#39;, port=4242)\r\n\r\nhost defaults to &#39;localhost&#39; if not specified.  I threw it in here to demonstrate how you can use this to debug something other than a local instance, like a development server on your local LAN.  Obviously, if you do this be careful that the set trace never makes it onto your production server!\r\n\r\nAs a quick note, you can still do the same thing as the accepted answer with epdb (`import epdb; epdb.set_trace()`) but I wanted to highlight the serve functionality since I&#39;ve found it so useful.\r\n    "}, {"tags": [], "down_vote_count": 0, "creation_date": 1372360322, "answer_id": 17351366, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1372360322, "body_markdown": "I use [PyCharm][1] and different debug tools. Also have a nice articles set about easy set up those things for novices. [You may start here.][2] It tells about PDB and GUI debugging in general with Django projects. Hope someone would benefit from them.\r\n\r\n\r\n  [1]: http://www.jetbrains.com/pycharm/\r\n  [2]: http://garmoncheg.blogspot.com/2013/06/django-how-to-debug-django.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1373413122, "answer_id": 17560099, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1401561813, "last_edit_date": 1401561813, "body_markdown": "I just found wdb (http://www.rkblog.rk.edu.pl/w/p/debugging-python-code-browser-wdb-debugger/?goback=%2Egde_25827_member_255996401).  It has a pretty nice user interface / GUI with all the bells and whistles.  Author says this about wdb -\r\n\r\n&quot;There are IDEs like PyCharm that have their own debuggers. They offer similar or equal set of features ...  However to use them you have to use those specific IDEs (and some of then are non-free or may not be available for all platforms). Pick the right tool for your needs.&quot;\r\n\r\n\r\nThought i&#39;d just pass it on.\r\n\r\n**Also a very helpful article about python debuggers:**\r\nhttps://zapier.com/engineering/debugging-python-boss/\r\n\r\n**Finally**, if you&#39;d like to see a nice graphical printout of your call stack in Django, checkout:\r\nhttps://github.com/joerick/pyinstrument.  Just add pyinstrument.middleware.ProfilerMiddleware to MIDDLEWARE_CLASSES, then add ?profile to the end of the request URL to activate the profiler. \r\n\r\nCan also run pyinstrument from command line or by importing as a module."}, {"tags": [], "down_vote_count": 0, "creation_date": 1374884125, "answer_id": 17892930, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1374884125, "body_markdown": "Sometimes when I wan to explore around in a particular method and summoning pdb is just too cumbersome, I would add:\r\n\r\n    import IPython; IPython.embed()\r\n\r\n`IPython.embed()` starts an IPython shell which have access to the local variables from the point where you call it. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1381241923, "answer_id": 19250270, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1381241923, "body_markdown": "I use [PyCharm][1] and stand by it all the way. It cost me a little but I have to say the advantage that I get out of it is priceless. I tried debugging from console and I do give people a lot of credit who can do that, but for me being able to visually debug my application(s) is great.\r\n\r\nI have to say though, [PyCharm][1] does take a lot of memory.  But then again, nothing good is free in life.  They just came with their latest version 3.  It also plays very well with Django, Flask and Google AppEngine.  So, all in all, I&#39;d say it&#39;s a great handy tool to have for any developer.\r\n\r\nIf you are not using it yet, I&#39;d recommend to get the trial version for 30 days to take a look at the power of PyCharm.  I&#39;m sure there are other tools also available, such as Aptana.  But I guess I just also like the way PyCharm looks.  I feel very comfortable debugging my apps there.\r\n\r\n\r\n  [1]: http://www.jetbrains.com/pycharm/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1413105245, "answer_id": 26323570, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1413105245, "body_markdown": "i highly suggest to use PDB.\r\n\r\n    import pdb\r\n    pdb.set_trace()\r\n\r\nYou can inspect all the variables values, step in to the function and much more.\r\nhttps://docs.python.org/2/library/pdb.html\r\n\r\nfor checking out the all kind of request,response and hits to database.i am using django-debug-toolbar\r\nhttps://github.com/django-debug-toolbar/django-debug-toolbar"}, {"tags": [], "down_vote_count": 0, "creation_date": 1444393484, "answer_id": 33038237, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1444393484, "body_markdown": "As mentioned in other posts here - setting breakpoints in your code and walking thru the code to see if it behaves as you expected is a great way to learn something like Django until you have a good sense of how it all behaves - and what your code is doing.\r\n\r\nTo do this I would recommend using WingIde. Just like other mentioned IDEs nice and easy to use, nice layout and also easy to set breakpoints evaluate / modify the stack etc. Perfect for visualizing what your code is doing as you step through it. I&#39;m a big fan of it.\r\n\r\nAlso I use PyCharm - it has excellent static code analysis and can help sometimes spot problems before you realize they are there.\r\n\r\nAs mentioned already django-debug-toolbar is essential - https://github.com/django-debug-toolbar/django-debug-toolbar\r\n\r\nAnd while not explicitly a debug or analysis tool - one of my favorites is **SQL Printing Middleware** available from Django Snippets at https://djangosnippets.org/snippets/290/\r\n\r\nThis will display the SQL queries that your view has generated. This will give you a good sense of what the ORM is doing and if your queries are efficient or you need to rework your code (or add caching).\r\n\r\nI find it invaluable for keeping an eye on query performance while developing and debugging my application.  \r\n\r\nJust one other tip - I modified it slightly for my own use to only show the summary and not the SQL statement.... So I always use it while developing and testing. I also added that if the len(connection.queries) is greater than a pre-defined threshold it displays an extra warning.\r\n\r\nThen if I spot something bad (from a performance or number of queries perspective) is happening I turn back on the full display of the SQL statements to see exactly what is going on.  Very handy when you are working on a large Django project with multiple developers."}, {"tags": [], "down_vote_count": 0, "creation_date": 1452377877, "answer_id": 34699590, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1452377877, "body_markdown": "From my perspective, we could break down common *code debugging* tasks into three distinct usage patterns:\r\n\r\n1. Something has **raised an exception**: [runserver_plus][1]&#39; Werkzeug debugger to the rescue. The ability to run custom code at all the trace levels is a killer. And if you&#39;re completely stuck, you can create a Gist to share with just a click.\r\n2. Page is rendered, but the **result is wrong**: again, Werkzeug rocks. To make a breakpoint in code, just type `assert False` in the place you want to stop at.\r\n3. **Code works wrong**, but the quick look doesn&#39;t help. Most probably, an algorithmic problem. Sigh. Then I usually fire up a console debugger [PuDB][2]: `import pudb; pudb.set_trace()`. The main advantage over [i]pdb is that PuDB (while looking as you&#39;re in 80&#39;s) makes setting custom watch expressions a breeze. And debugging a bunch of nested loops is much simpler with a GUI.\r\n\r\nAh, yes, the templates&#39; woes. The most common (to me and my colleagues) problem is a wrong context: either you don&#39;t have a variable, or your variable doesn&#39;t have some attribute. If you&#39;re using [debug toolbar][3], just inspect the context at the &quot;Templates&quot; section, or, if it&#39;s not sufficient, set a break in your views&#39; code just after your context is filled up.\r\n\r\nSo it goes.\r\n\r\n[1]: https://github.com/django-extensions/django-extensions\r\n[2]: https://pypi.python.org/pypi/pudb\r\n[3]: https://github.com/django-debug-toolbar/django-debug-toolbar"}, {"tags": [], "down_vote_count": 0, "creation_date": 1467075689, "answer_id": 38065474, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1467075689, "body_markdown": "An additional suggestion.  \r\n\r\nYou can leverage **nosetests** and **pdb** together, rather injecting `pdb.set_trace()` in your views manually.  The advantage is that you can observe error conditions when they first start, potentially in 3rd party code.\r\n\r\nHere&#39;s an error for me today.\r\n\r\n\tTypeError at /db/hcm91dmo/catalog/records/\r\n\r\n\trender_option() argument after * must be a sequence, not int\r\n\r\n\t....\r\n\r\n\r\n\tError during template rendering\r\n\r\n\tIn template /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/crispy_forms/templates/bootstrap3/field.html, error at line 28\r\n\trender_option() argument after * must be a sequence, not int\r\n\t18 \t\r\n\t19 \t        {% if field|is_checkboxselectmultiple %}\r\n\t20 \t            {% include &#39;bootstrap3/layout/checkboxselectmultiple.html&#39; %}\r\n\t21 \t        {% endif %}\r\n\t22 \t\r\n\t23 \t        {% if field|is_radioselect %}\r\n\t24 \t            {% include &#39;bootstrap3/layout/radioselect.html&#39; %}\r\n\t25 \t        {% endif %}\r\n\t26 \t\r\n\t27 \t        {% if not field|is_checkboxselectmultiple and not field|is_radioselect %}\r\n\t28 \t\r\n\t                  \r\n\t      {% if field|is_checkbox and form_show_labels %}\r\n\r\nNow, I know this means that I goofed the constructor for the form, and I even have good idea of which field is a problem.  But, can I use pdb to see what crispy forms is complaining about, **within a template**?\r\n\r\nYes, I can.  Using the *--pdb* option on nosetests:\r\n\r\n`tests$ nosetests test_urls_catalog.py --pdb`\r\n\r\nAs soon as I hit any exception (including ones handled gracefully), pdb stops where it happens and I can look around.\r\n\r\n\t  File &quot;/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/django/forms/forms.py&quot;, line 537, in __str__\r\n\t    return self.as_widget()\r\n\t  File &quot;/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/django/forms/forms.py&quot;, line 593, in as_widget\r\n\t    return force_text(widget.render(name, self.value(), attrs=attrs))\r\n\t  File &quot;/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/django/forms/widgets.py&quot;, line 513, in render\r\n\t    options = self.render_options(choices, [value])\r\n\t  File &quot;/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/django/forms/widgets.py&quot;, line 543, in render_options\r\n\t    output.append(self.render_option(selected_choices, *option))\r\n\tTypeError: render_option() argument after * must be a sequence, not int\r\n\tINFO lib.capture_middleware log write_to_index(http://localhost:8082/db/hcm91dmo/catalog/records.html)\r\n\tINFO lib.capture_middleware log write_to_index:end\r\n\t&gt; /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/django/forms/widgets.py(543)render_options()\r\n\t-&gt; output.append(self.render_option(selected_choices, *option))\r\n\t(Pdb) import pprint\r\n\t(Pdb) pprint.PrettyPrinter(indent=4).pprint(self)\r\n\t&lt;django.forms.widgets.Select object at 0x115fe7d10&gt;\r\n\t(Pdb) pprint.PrettyPrinter(indent=4).pprint(vars(self))\r\n\t{   &#39;attrs&#39;: {   &#39;class&#39;: &#39;select form-control&#39;},\r\n\t    &#39;choices&#39;: [[(&#39;_&#39;, &#39;any type&#39;), (7, (7, &#39;type 7&#39;, &#39;RECTYPE_TABLE&#39;))]],\r\n\t    &#39;is_required&#39;: False}\r\n\t(Pdb)\t      \r\n\r\nNow, it&#39;s clear that my choices argument to the crispy field constructor was as it was a list within a list, rather than a list/tuple of tuples.\r\n\r\n     &#39;choices&#39;: [[(&#39;_&#39;, &#39;any type&#39;), (7, (7, &#39;type 7&#39;, &#39;RECTYPE_TABLE&#39;))]]\r\n\r\nThe neat thing is that this pdb is taking place within crispy&#39;s code, not mine and I didn&#39;t need to insert it manually."}, {"tags": [], "down_vote_count": 0, "creation_date": 1468104750, "answer_id": 38287020, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1468104750, "body_markdown": "I like answers I can copy directly. And I like IPython:\r\n\r\n    pip install ipdb\r\n\r\nIn your code:\r\n\r\n    import ipdb; ipdb.set_trace()"}, {"tags": [], "down_vote_count": 0, "creation_date": 1475646353, "answer_id": 39866246, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1475646353, "body_markdown": "use `pdb` or `ipdb`. Diffrence between these two is ipdb supports auto complete.\r\n\r\nfor pdb\r\n\r\n    import pdb\r\n    pdb.set_trace()\r\n\r\nfor ipdb\r\n\r\n    import ipdb\r\n    ipdb.set_trace()\r\n\r\nFor executing new line hit `n` key, for continue hit `c` key.\r\ncheck more options by using `help(pdb)`\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1482745196, "answer_id": 41329184, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1482745196, "body_markdown": "During development, adding a quick\r\n\r\n    assert False, value\r\n\r\ncan help diagnose problems in views or anywhere else, without the need to use a debugger."}, {"tags": [], "down_vote_count": 0, "creation_date": 1485832596, "answer_id": 41949094, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1485832596, "body_markdown": "I find Visual Studio Code is awesome for debugging Django apps. The standard python launch.json parameters run `python manage.py` with the debugger attached, so you can set breakpoints and step through your code as you like."}, {"tags": [], "down_vote_count": 0, "creation_date": 1489758935, "answer_id": 42859395, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1489758935, "body_markdown": "For those that can accidentally add pdb into live commits, I can suggest this extension of #Koobz answer:\r\n\r\n    @register.filter \r\n    def pdb(element):\r\n        from django.conf import settings\r\n        if settings.DEBUG:    \r\n            import pdb\r\n            pdb.set_trace()\r\n        return element"}, {"tags": [], "down_vote_count": 0, "creation_date": 1504958215, "answer_id": 46130410, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1505593066, "last_edit_date": 1505593066, "body_markdown": "One of your best option to debug Django code is via wdb: \r\n[https://github.com/Kozea/wdb][1]\r\n\r\n&gt; wdb works with python 2 (2.6, 2.7), python 3 (3.2, 3.3, 3.4, 3.5) and pypy. Even better, it is possible to debug a python 2 program with a wdb server running on python 3 and vice-versa or debug a program running on a computer with a debugging server running on another computer inside a web page on a third computer!\r\n&gt; Even betterer, it is now possible to pause a currently running python process/thread using code injection from the web interface. (This requires gdb and ptrace enabled)\r\n&gt; In other words it&#39;s a very enhanced version of pdb directly in your browser with nice features.\r\n\r\nInstall and run the server, and in your code add:\r\n\r\n    import wdb\r\n    wdb.set_trace()\r\n\r\nAccording to the author, main differences with respect to `pdb` are:\r\n\r\n&gt; For those who don\u2019t know the project, wdb is a python debugger like pdb, but with a slick web front-end and a lot of additional features, such as:\r\n&gt; \r\n&gt; - Source syntax highlighting \r\n&gt; - Visual breakpoints \r\n&gt; - Interactive code completion using jedi \r\n&gt; - Persistent breakpoints \r\n&gt; - Deep objects inspection using mouse Multithreading / Multiprocessing support\r\n&gt; - Remote debugging\r\n&gt; - Watch expressions \r\n&gt; - In debugger code edition \r\n&gt; - Popular web servers integration to break on error \r\n&gt; - In exception breaking during trace (not post-mortem) in contrary to the werkzeug debugger for instance\r\n&gt; - Breaking in currently running programs through code injection (on supported systems)\r\n\r\nIt has a great browser-based user interface. A joy to use! :)\r\n\r\n  [1]: https://github.com/Kozea/wdb"}, {"tags": [], "down_vote_count": 0, "creation_date": 1509571328, "answer_id": 47063871, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1509571328, "body_markdown": "Add `import pdb; pdb.set_trace()` at the corresponding line in the Python code and execute it. The execution will stop with an interactive shell. In the shell you can execute Python code (i.e. print variables) or use commands such as:\r\n\r\n - `c` continue execution\r\n - `n` step to the next line within the same function\r\n - `s` step to the next line in this function or a called function\r\n - `q` quit the debugger/execution\r\n\r\nAlso see: https://poweruser.blog/setting-a-breakpoint-in-python-438e23fe6b28"}], "title": "How to debug in Django, the good way?", "view_count": 171601, "answer_count": 27, "code_snippet": ["<code>import pdb; pdb.set_trace()\n</code>", "<code>* return HttpResponse({variable to inspect})\n\n* print {variable to inspect}\n\n* raise Exception({variable to inspect})\n</code>", "<code>manage.py runserver --pdb</code>", "<code>manage.py test --pdb</code>", "<code>ipython</code>", "<code>Ipdb</code>", "<code>ipython</code>", "<code>runserver_plus</code>", "<code>@register.filter \ndef pdb(element):\n    import pdb; pdb.set_trace()\n    return element\n</code>", "<code>{{ template_var|pdb }}</code>", "<code>element</code>", "<code>pdb.set_trace()</code>", "<code>pip install ipdb</code>", "<code>django-pdb</code>", "<code>pip install django-pdb</code>", "<code>'django_pdb'</code>", "<code>INSTALLED_APPS</code>", "<code>manage.py runserver --pdb</code>", "<code>bash: manage.py runserver --pdb\nValidating models...\n\n0 errors found\nDjango version 1.3, using settings 'testproject.settings'\nDevelopment server is running at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n\nGET /\nfunction \"myview\" in testapp/views.py:6\nargs: ()\nkwargs: {}\n\n&gt; /Users/tom/github/django-pdb/testproject/testapp/views.py(7)myview()\n-&gt; a = 1\n(Pdb)\n</code>", "<code>manage.py test --pdb</code>", "<code>bash: manage.py test testapp --pdb\nCreating test database for alias 'default'...\nE\n======================================================================\n&gt;&gt;&gt; test_error (testapp.tests.SimpleTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \".../django-pdb/testproject/testapp/tests.py\", line 16, in test_error\n    one_plus_one = four\nNameError: global name 'four' is not defined\n======================================================================\n\n&gt; /Users/tom/github/django-pdb/testproject/testapp/tests.py(16)test_error()\n-&gt; one_plus_one = four\n(Pdb)\n</code>", "<code>assert False</code>", "<code>import pudb; pudb.set_trace()</code>", "<code>import pudb;pu.db</code>", "<code>import epdb; epdb.serve()\n</code>", "<code>In [2]: import epdb; epdb.connect()\n(Epdb) request\n&lt;WSGIRequest\npath:/foo,\nGET:&lt;QueryDict: {}&gt;, \nPOST:&lt;QuestDict: {}&gt;,\n...\n&gt;\n(Epdb) request.session.session_key\n'i31kq7lljj3up5v7hbw9cff0rga2vlq5'\n(Epdb) list\n 85         raise some_error.CustomError()\n 86 \n 87     # Example login view\n 88     def login(request, username, password):\n 89         import epdb; epdb.serve()\n 90  -&gt;     return my_login_method(username, password)\n 91\n 92     # Example view to show session key\n 93     def get_session_key(request):\n 94         return request.session.session_key\n 95\n</code>", "<code>import epdb; epdb.serve(4242)\n\n&gt;&gt; import epdb; epdb.connect(host='192.168.3.2', port=4242)\n</code>", "<code>import epdb; epdb.set_trace()</code>", "<code>import IPython; IPython.embed()\n</code>", "<code>IPython.embed()</code>", "<code>{% load %}</code>", "<code>{% print var %}   prints variable\n{% print %}       prints all\n</code>", "<code>&lt;pre&gt;</code>", "<code>pip install ipdb\n</code>", "<code>import ipdb; ipdb.set_trace()\n</code>", "<code>import pdb\npdb.set_trace()\n</code>", "<code>python manage.py</code>", "<code>@register.filter \ndef pdb(element):\n    from django.conf import settings\n    if settings.DEBUG:    \n        import pdb\n        pdb.set_trace()\n    return element\n</code>", "<code>import pdb; pdb.set_trace()</code>", "<code>c</code>", "<code>n</code>", "<code>s</code>", "<code>q</code>", "<code>pdb.set_trace()</code>", "<code>TypeError at /db/hcm91dmo/catalog/records/\n\nrender_option() argument after * must be a sequence, not int\n\n....\n\n\nError during template rendering\n\nIn template /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/crispy_forms/templates/bootstrap3/field.html, error at line 28\nrender_option() argument after * must be a sequence, not int\n18  \n19          {% if field|is_checkboxselectmultiple %}\n20              {% include 'bootstrap3/layout/checkboxselectmultiple.html' %}\n21          {% endif %}\n22  \n23          {% if field|is_radioselect %}\n24              {% include 'bootstrap3/layout/radioselect.html' %}\n25          {% endif %}\n26  \n27          {% if not field|is_checkboxselectmultiple and not field|is_radioselect %}\n28  \n\n      {% if field|is_checkbox and form_show_labels %}\n</code>", "<code>tests$ nosetests test_urls_catalog.py --pdb</code>", "<code>  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/django/forms/forms.py\", line 537, in __str__\n    return self.as_widget()\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/django/forms/forms.py\", line 593, in as_widget\n    return force_text(widget.render(name, self.value(), attrs=attrs))\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/django/forms/widgets.py\", line 513, in render\n    options = self.render_options(choices, [value])\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/django/forms/widgets.py\", line 543, in render_options\n    output.append(self.render_option(selected_choices, *option))\nTypeError: render_option() argument after * must be a sequence, not int\nINFO lib.capture_middleware log write_to_index(http://localhost:8082/db/hcm91dmo/catalog/records.html)\nINFO lib.capture_middleware log write_to_index:end\n&gt; /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/django/forms/widgets.py(543)render_options()\n-&gt; output.append(self.render_option(selected_choices, *option))\n(Pdb) import pprint\n(Pdb) pprint.PrettyPrinter(indent=4).pprint(self)\n&lt;django.forms.widgets.Select object at 0x115fe7d10&gt;\n(Pdb) pprint.PrettyPrinter(indent=4).pprint(vars(self))\n{   'attrs': {   'class': 'select form-control'},\n    'choices': [[('_', 'any type'), (7, (7, 'type 7', 'RECTYPE_TABLE'))]],\n    'is_required': False}\n(Pdb)         \n</code>", "<code> 'choices': [[('_', 'any type'), (7, (7, 'type 7', 'RECTYPE_TABLE'))]]\n</code>", "<code>pdb</code>", "<code>ipdb</code>", "<code>import pdb\npdb.set_trace()\n</code>", "<code>import ipdb\nipdb.set_trace()\n</code>", "<code>n</code>", "<code>c</code>", "<code>help(pdb)</code>", "<code>assert False, value\n</code>", "<code>import wdb\nwdb.set_trace()\n</code>", "<code>pdb</code>"], "path": "stack.django"}, {"tags": ["mysql", "postgresql", "full-text-search", "lucene", "sphinx"], "creation_date": 1239359894, "body_markdown": "I&#39;m building a Django site and I am looking for a search engine.\r\n\r\nA few candidates:\r\n\r\n- Lucene/Lucene with Compass/Solr\r\n\r\n- Sphinx\r\n\r\n- Postgresql built-in full text search\r\n\r\n- MySQl built-in full text search\r\n\r\nSelection criteria:\r\n\r\n- result relevance and ranking\r\n- searching and indexing speed\r\n- ease of use and ease of integration with Django\r\n- resource requirements - site will be hosted on a [VPS][1], so ideally the search engine wouldn&#39;t require a lot of RAM and CPU\r\n- scalability\r\n- extra features such as &quot;did you mean?&quot;, related searches, etc\r\n\r\nAnyone who has had experience with the search engines above, or other engines not in the list -- I would love to hear your opinions.\r\n\r\nEDIT: As for indexing needs, as users keep entering data into the site, those data would need to be indexed continuously. It doesn&#39;t have to be real time, but ideally new data would show up in index with no more than 15 - 30 minutes delay\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Virtual_private_server\r\n", "last_edit_date": 1324068819, "up_vote_count": 299, "link": "https://stackoverflow.com/questions/737275/comparison-of-full-text-search-engine-lucene-sphinx-postgresql-mysql", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1239361957, "answer_id": 737340, "path": "stack.django.answer", "score": 80, "up_vote_count": 81, "is_accepted": false, "last_activity_date": 1241029416, "last_edit_date": 1241029416, "body_markdown": "I don&#39;t know Sphinx, but as for Lucene vs a database full-text search, I think that Lucene performance is unmatched. You should be able to do almost *any* search in less than 10 ms, no matter how many records you have to search, provided that you have set up your Lucene index correctly.\r\n\r\nHere comes the biggest hurdle though: personally, I think integrating Lucene in your project is not *easy*. Sure, it is not too hard to set it up so you can do some basic search, but if you want to get the most out of it, with optimal performance, then you definitely need a good book about Lucene.\r\n\r\nAs for CPU &amp; RAM requirements, performing a search in Lucene doesn&#39;t task your CPU too much, though indexing your data is, although you don&#39;t do that too often (maybe once or twice a day), so that isn&#39;t much of a hurdle.\r\n\r\nIt doesn&#39;t answer all of your questions but in short, if you have a lot of data to search, and you want great performance, then I think Lucene is definitely the way to go. If you&#39;re not going to have that much data to search, then you might as well go for a database full-text search. Setting up a MySQL full-text search is definitely easier in my book."}, {"tags": [], "down_vote_count": 0, "creation_date": 1239376136, "answer_id": 737931, "path": "stack.django.answer", "score": 159, "up_vote_count": 159, "is_accepted": true, "last_activity_date": 1239376136, "body_markdown": "Good to see someone&#39;s chimed in about Lucene - because I&#39;ve no idea about that.\r\n\r\nSphinx, on the other hand, I know quite well, so let&#39;s see if I can be of some help.\r\n\r\n* Result relevance ranking is the default. You can set up your own sorting should you wish, and give specific fields higher weightings.\r\n* Indexing speed is super-fast, because it talks directly to the database. Any slowness will come from complex SQL queries and un-indexed foreign keys and other such problems. I&#39;ve never noticed any slowness in searching either.\r\n* I&#39;m a Rails guy, so I&#39;ve no idea how easy it is to implement with Django. There is a Python API that comes with the Sphinx source though.\r\n* The search service daemon (searchd) is pretty low on memory usage - and you can set limits on &lt;a href=&quot;http://www.sphinxsearch.com/docs/manual-0.9.8.html#conf-mem-limit&quot;&gt;how much memory&lt;/a&gt; the indexer process uses too.\r\n* Scalability is where my knowledge is more sketchy - but it&#39;s easy enough to copy index files to multiple machines and run several searchd daemons. The general impression I get from others though is that it&#39;s pretty damn good under high load, so scaling it out across multiple machines isn&#39;t something that needs to be dealt with.\r\n* There&#39;s no support for &#39;did-you-mean&#39;, etc - although these can be done with other tools easily enough. Sphinx does stem words though using dictionaries, so &#39;driving&#39; and &#39;drive&#39; (for example) would be considered the same in searches.\r\n* Sphinx doesn&#39;t allow partial index updates for field data though. The common approach to this is to maintain a delta index with all the recent changes, and re-index this after every change (and those new results appear within a second or two). Because of the small amount of data, this can take a matter of seconds. You will still need to re-index the main dataset regularly though (although how regularly depends on the volatility of your data - every day? every hour?). The fast indexing speeds keep this all pretty painless though.\r\n\r\nI&#39;ve no idea how applicable to your situation this is, but &lt;a href=&quot;http://blog.evanweaver.com/articles/2008/03/17/rails-search-benchmarks/&quot;&gt;Evan Weaver compared a few of the common Rails search options&lt;/a&gt; (Sphinx, Ferret (a port of Lucene for Ruby) and Solr), running some benchmarks. Could be useful, I guess.\r\n\r\nI&#39;ve not plumbed the depths of MySQL&#39;s full-text search, but I know it doesn&#39;t compete speed-wise nor feature-wise with Sphinx, Lucene or Solr."}, {"tags": [], "down_vote_count": 1, "creation_date": 1253228270, "answer_id": 1441737, "path": "stack.django.answer", "score": 25, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1253228270, "body_markdown": "I&#39;m looking at PostgreSQL full-text search right now, and it has all the right features of a modern search engine, really good extended character and multilingual support, nice tight integration with text fields in the database.  \r\n\r\nBut it doesn&#39;t have user-friendly search operators like + or AND (uses &amp; | !) and I&#39;m not thrilled with how it works on their documentation site.  While it has bolding  of match terms in the results snippets, the default algorithm for which match terms is not great. Also, if you want to index rtf, PDF, MS Office, you have to find and integrate a file format converter.\r\n\r\nOTOH, it&#39;s way better than the MySQL text search, which doesn&#39;t even index words of three letters or fewer.  It&#39;s the default for the MediaWiki search, and I really think it&#39;s no good for end-users: http://www.searchtools.com/analysis/mediawiki-search/\r\n\r\n**In all cases I&#39;ve seen, Lucene/Solr and Sphinx are really great**.  They&#39;re solid code and have evolved with significant improvements in usability, so the tools are all there to make search that satisfies almost everyone.\r\n\r\nfor SHAILI - SOLR includes the Lucene search code library and has the components to be a nice stand-alone search engine.\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1254099099, "answer_id": 1484957, "path": "stack.django.answer", "score": 10, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1254099099, "body_markdown": "SearchTools-Avi said &quot;MySQL text search, which doesn&#39;t even index words of three letters or fewer.&quot;\r\n\r\nFYIs, The MySQL fulltext min word length is adjustable since _at least_ MySQL 5.0. Google &#39;mysql fulltext min length&#39; for simple instructions.\r\n\r\nThat said, MySQL fulltext has limitations: for one, it gets slow to update once you reach a million records or so, ...\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1291868435, "answer_id": 4394805, "path": "stack.django.answer", "score": 58, "up_vote_count": 58, "is_accepted": false, "last_activity_date": 1327389406, "last_edit_date": 1495542377, "body_markdown": "I am surprised that there isn&#39;t more information posted about Solr. Solr is quite similar to Sphinx but has more advanced features (AFAIK as I haven&#39;t used Sphinx -- only read about it).\r\n\r\nThe answer at the link below details a few things about Sphinx which also applies to Solr.\r\nhttps://stackoverflow.com/questions/737275/pros-cons-of-full-text-search-engine-lucene-sphinx-postgresql-full-text-searc/737931#737931\r\n\r\nSolr also provides the following additional features:\r\n\r\n1.  Supports replication\r\n2.  Multiple cores (think of these as separate databases with their own configuration and own indexes)\r\n3.  Boolean searches\r\n4.  Highlighting of keywords (fairly easy to do in application code if you have regex-fu; however, why not let a specialized tool do a better job for you)\r\n5.  Update index via XML or delimited file\r\n6.  Communicate with the search server via HTTP (it can even return Json, Native PHP/Ruby/Python)\r\n7.  PDF, Word document indexing\r\n8.  Dynamic fields\r\n9.  Facets\r\n10. Aggregate fields\r\n11. Stop words, synonyms, etc.\r\n12. More Like this...\r\n13. Index directly from the database with custom queries\r\n14. Auto-suggest\r\n15. Cache Autowarming\r\n16. Fast indexing (compare to MySQL full-text search indexing times) -- Lucene uses a binary inverted index format.\r\n17. Boosting (custom rules for increasing relevance of a particular keyword or phrase, etc.)\r\n18. Fielded searches (if a search user knows the field he/she wants to search, they narrow down their search by typing the field, then the value, and ONLY that field is searched rather than everything -- much better user experience)\r\n\r\nBTW, there are tons more features; however, I&#39;ve listed just the features that I have actually used in production. BTW, out of the box, MySQL supports #1, #3, and #11 (limited) on the list above. For the features you are looking for, a relational database isn&#39;t going to cut it. I&#39;d eliminate those straight away.\r\n\r\nAlso, another benefit is that Solr (well, Lucene actually) is a document database (e.g. NoSQL) so many of the benefits of any other document database can be realized with Solr. In other words, you can use it for more than just search (i.e. Performance). Get creative with it :)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1371762033, "answer_id": 17223676, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1371762378, "last_edit_date": 1371762378, "body_markdown": "I would add [mnoGoSearch][1] to the list. Extremely performant and flexible solution, which works as Google : indexer fetches data from multiple sites, You could use basic criterias, or invent Your own hooks to have maximal search quality. Also it could fetch the data directly from the database.\r\n\r\nThe solution is not so known today, but it feets maximum needs. You could compile and install it or on standalone server, or even on Your principal server, it doesn&#39;t need so much ressources as Solr, as it&#39;s written in C and runs perfectly even on small servers.\r\n\r\nIn the beginning You need to compile it Yourself, so it requires some knowledge. I made a tiny [script][2] for Debian, which could help. Any adjustments are welcome.\r\n\r\nAs You are using Django framework, You could use or PHP client in the middle, or find a solution in Python, I saw [some][3] [articles][4].\r\n\r\nAnd, of course mnoGoSearch is open source, GNU GPL.\r\n\r\n\r\n  [1]: http://www.mnogosearch.org/\r\n  [2]: https://github.com/fedir/mnogosearch-typo3/blob/master/installation-debian.sh\r\n  [3]: http://mail.python.org/pipermail/xml-sig/2002-September/008623.html\r\n  [4]: http://blog.garambrogne.net/post/2004/04/15/14-mnogosearch-et-python"}, {"tags": [], "down_vote_count": 0, "creation_date": 1390331232, "answer_id": 21266929, "path": "stack.django.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1390331232, "body_markdown": "Just my two cents to this very old question. I would highly recommend taking a look at [ElasticSearch][1]. \r\n\r\n&gt; Elasticsearch is a search server based on Lucene. It provides a distributed, multitenant-capable full-text search engine with a RESTful web interface and schema-free JSON documents. Elasticsearch is developed in Java and is released as open source under the terms of the Apache License.\r\n\r\nThe advantages over other FTS (full text search) Engines are:\r\n\r\n - RESTful interface \r\n - Better scalability \r\n - Large community \r\n - Built by Lucene\r\n   developers  \r\n - Extensive documentation \r\n - [There are many][2] open source libraries available (including Django)\r\n\r\nWe are using this search engine at our project and very happy with it.\r\n\r\n\r\n  [1]: http://www.elasticsearch.org/\r\n  [2]: http://www.elasticsearch.org/guide/en/elasticsearch/client/community/current/integrations.html"}, {"tags": [], "down_vote_count": 2, "creation_date": 1421664574, "answer_id": 28022882, "path": "stack.django.answer", "score": 53, "up_vote_count": 55, "is_accepted": false, "last_activity_date": 1421668294, "last_edit_date": 1421668294, "body_markdown": "#[Apache *Solr*][1]\r\n\r\n---\r\n\r\nApart from answering OP&#39;s queries, Let me throw some insights on ***Apache Solr*** from **simple introduction** to **detailed installation** and **implementation**.\r\n\r\n\r\n&gt;#Simple Introduction\r\n\r\n---\r\n&gt; *Anyone who has had experience with the search engines above, or other\r\n&gt; engines not in the list -- I would love to hear your opinions.*\r\n\r\n**Solr** shouldn&#39;t be used to solve real-time problems. For search engines, **Solr** is pretty much game and works *flawlessly*.\r\n\r\n**Solr** works fine on High Traffic web-applications (*I read somewhere that it is not suited for this, but I am backing up that statement*). It utilizes the RAM, not the CPU.\r\n\r\n \r\n&gt;  - result relevance and ranking\r\n\r\nThe **boost** helps you rank your results show up on top. Say, you&#39;re trying to search for a name *john* in the fields *firstname* and *lastname*, and you want to give relevancy to the *firstname* field, then you need to **boost** up the *firstname* field as shown. \r\n\r\n    http://localhost:8983/solr/collection1/select?q=firstname:john^2&amp;lastname:john\r\n\r\nAs you can see, *firstname* field is **boosted** up with a score of 2.\r\n\r\nMore on [SolrRelevancy][2]\r\n\r\n&gt;  - searching and indexing speed\r\n\r\nThe speed is unbelievably fast and no compromise on that. The reason I moved to **Solr**.\r\n\r\nRegarding the indexing speed, **Solr** can also handle **JOINS** from your database tables. A higher and complex **JOIN** do affect the indexing speed. However, an enormous **RAM** config can easily tackle this situation.\r\n\r\nThe higher the RAM, The faster the indexing speed of Solr is.\r\n\r\n\r\n&gt;  - ease of use and ease of integration with Django\r\n\r\nNever attempted to integrate **Solr** and **Django**, however you can achieve to do that with [Haystack][3]. I found some interesting [article][4] on the same and here&#39;s the [github][5] for it.\r\n\r\n&gt;  - resource requirements - site will be hosted on a VPS, so ideally the  search engine wouldn&#39;t require a lot of RAM and CPU\r\n\r\n**Solr** breeds on RAM, so if the RAM is high, you don&#39;t to have to worry about **Solr**.\r\n\r\n**Solr&#39;s** RAM usage shoots up on full-indexing if you have some billion records, you could smartly make use of Delta imports to tackle this situation. As explained, **Solr** *is only a near real-time solution*.\r\n\r\n&gt;  - scalability\r\n\r\n**Solr** is highly scalable. Have a look on [SolrCloud][6].\r\nSome key features of it.\r\n \r\n- Shards (or sharding is the concept of distributing the index among multiple machines, say if your index has grown too large)\r\n- Load Balancing (if [Solrj][7] is used with Solr cloud it automatically takes care of load-balancing using it&#39;s Round-Robin mechanism)\r\n- [Distributed Search][8]\r\n- High Availability\r\n\r\n&gt;  - extra features such as &quot;did you mean?&quot;, related searches, etc\r\n\r\nFor the above scenario, you could use the [SpellCheckComponent][9] that is packed up with **Solr**. There are a lot other features, The [SnowballPorterFilterFactory][10] helps to retrieve records say if you typed, *books* instead of *book*, you will be presented with results related to *book*.\r\n\r\n---\r\n\r\nThis answer broadly focuses on **Apache Solr** &amp; **MySQL**.  Django is out of scope.  \r\n\r\nAssuming that you are under LINUX environment, you could proceed to this article further. (mine was an Ubuntu 14.04 version)\r\n\r\n&gt;#Detailed Installation\r\n\r\n##Getting Started\r\n\r\nDownload **Apache Solr** from [here][11]. That would be version is **4.8.1**. You could download new versions, I found this stable.\r\n\r\nAfter downloading the archive , extract it to a folder of your choice. \r\nSay ..  `Downloads` or whatever.. So it will look like `Downloads/solr-4.8.1/`\r\n\r\nOn your prompt..  Navigate inside the directory\r\n\r\n`shankar@shankar-lenovo: cd Downloads/solr-4.8.1`\r\n\r\nSo now you are here .. \r\n\r\n`shankar@shankar-lenovo: ~/Downloads/solr-4.8.1$ `\r\n\r\n\r\n##Start the Jetty Application Server\r\n\r\n**Jetty** is available inside the examples folder of the `solr-4.8.1` directory , so navigate inside that and start the Jetty Application Server.\r\n\r\n`shankar@shankar-lenovo:~/Downloads/solr-4.8.1/example$ java -jar start.jar`\r\n\r\nNow , do not close the terminal , minimize it and let it stay aside. \r\n\r\n&gt; ( TIP : Use &amp; after start.jar to make the Jetty Server run in the\r\n&gt; background )\r\n\r\nTo check if **Apache Solr** runs successfully, visit this URL on the browser. http://localhost:8983/solr\r\n\r\n##Running Jetty on custom Port \r\n\r\nIt runs on the port 8983 as default. You could change the port either here or directly inside the `jetty.xml` file.\r\n\r\n`java -Djetty.port=9091 -jar start.jar`\r\n\r\n\r\n##Download the JConnector\r\n\r\nThis JAR file acts as a bridge between **MySQL** and JDBC , Download the Platform Independent Version [here][12]\r\n\r\nAfter downloading it, extract the folder and copy the` mysql-connector-java-5.1.31-bin.jar` and paste it to the **lib** directory.\r\n\r\n`shankar@shankar-lenovo:~/Downloads/solr-4.8.1/contrib/dataimporthandler/lib`\r\n\r\n\r\n##Creating the MySQL table to be linked to Apache Solr\r\n\r\nTo put **Solr** to use, You need to have some tables and data to search for. For that, we will use **MySQL** for creating a table and pushing some random names and then we could use **Solr** to connect to **MySQL** and index that table and it&#39;s entries.\r\n\r\n \r\n\r\n###1.Table Structure\r\n\r\n    CREATE TABLE test_solr_mysql\r\n     (\r\n      id INT UNSIGNED NOT NULL AUTO_INCREMENT,\r\n      name VARCHAR(45) NULL,\r\n      created TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,\r\n      PRIMARY KEY (id)\r\n     );\r\n\r\n###2.Populate the above table\r\n\r\n    INSERT INTO `test_solr_mysql` (`name`) VALUES (&#39;Jean&#39;);\r\n    INSERT INTO `test_solr_mysql` (`name`) VALUES (&#39;Jack&#39;);\r\n    INSERT INTO `test_solr_mysql` (`name`) VALUES (&#39;Jason&#39;);\r\n    INSERT INTO `test_solr_mysql` (`name`) VALUES (&#39;Vego&#39;);\r\n    INSERT INTO `test_solr_mysql` (`name`) VALUES (&#39;Grunt&#39;);\r\n    INSERT INTO `test_solr_mysql` (`name`) VALUES (&#39;Jasper&#39;);\r\n    INSERT INTO `test_solr_mysql` (`name`) VALUES (&#39;Fred&#39;);\r\n    INSERT INTO `test_solr_mysql` (`name`) VALUES (&#39;Jenna&#39;);\r\n    INSERT INTO `test_solr_mysql` (`name`) VALUES (&#39;Rebecca&#39;);\r\n    INSERT INTO `test_solr_mysql` (`name`) VALUES (&#39;Roland&#39;);\r\n\r\n##Getting inside the core and adding the lib directives\r\n\r\n###1.Navigate to \r\n\r\n    shankar@shankar-lenovo: ~/Downloads/solr-4.8.1/example/solr/collection1/conf\r\n\r\n###2.Modifying the solrconfig.xml\r\n\r\nAdd these two directives to this file..\r\n\r\n      &lt;lib dir=&quot;../../../contrib/dataimporthandler/lib/&quot; regex=&quot;.*\\.jar&quot; /&gt;\r\n      &lt;lib dir=&quot;../../../dist/&quot; regex=&quot;solr-dataimporthandler-\\d.*\\.jar&quot; /&gt;\r\n\r\nNow add the **DIH** (Data Import Handler)\r\n\r\n    &lt;requestHandler name=&quot;/dataimport&quot; \r\n      class=&quot;org.apache.solr.handler.dataimport.DataImportHandler&quot; &gt;\r\n        &lt;lst name=&quot;defaults&quot;&gt;\r\n          &lt;str name=&quot;config&quot;&gt;db-data-config.xml&lt;/str&gt;\r\n        &lt;/lst&gt;\r\n    &lt;/requestHandler&gt;\r\n\r\n###3.Create the db-data-config.xml file \r\n\r\nIf the file exists then ignore, add these lines to that file. As you can see the first line, you need to provide the credentials of your **MySQL** database. The Database name, username and password.\r\n\r\n    &lt;dataConfig&gt;\r\n        &lt;dataSource type=&quot;JdbcDataSource&quot; driver=&quot;com.mysql.jdbc.Driver&quot; url=&quot;jdbc:mysql://localhost/yourdbname&quot; user=&quot;dbuser&quot; password=&quot;dbpass&quot;/&gt;\r\n        &lt;document&gt;\r\n       &lt;entity name=&quot;test_solr&quot; query=&quot;select CONCAT(&#39;test_solr-&#39;,id) as rid,name from test_solr_mysql WHERE &#39;${dataimporter.request.clean}&#39; != &#39;false&#39;\r\n          OR `created` &gt; &#39;${dataimporter.last_index_time}&#39;&quot; &gt;\r\n        &lt;field name=&quot;id&quot; column=&quot;rid&quot; /&gt;\r\n        &lt;field name=&quot;solr_name&quot; column=&quot;name&quot; /&gt;\r\n        &lt;/entity&gt;\r\n       &lt;/document&gt;\r\n    &lt;/dataConfig&gt;\r\n\r\n&gt; ( TIP : You can have any number of entities but watch out for id field,\r\n&gt; if they are same then indexing will skipped. )\r\n\r\n###4.Modify the schema.xml file\r\n\r\nAdd this to your **schema.xml** as shown.. \r\n\r\n    &lt;uniqueKey&gt;id&lt;/uniqueKey&gt;\r\n    &lt;field name=&quot;solr_name&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; /&gt;\r\n\r\n&gt;#Implementation\r\n\r\n## Indexing\r\n\r\nThis is where the real deal is. You need to do the indexing of data from **MySQL** to **Solr** inorder to make use of Solr Queries.\r\n\r\n###Step 1: Go to Solr Admin Panel\r\nHit the URL http://localhost:8983/solr on your browser. The screen opens like this. \r\n\r\n![This is the main Apache Solr Administration Panel][13]\r\n\r\nAs the marker indicates, go to **Logging** inorder to check if any of the above configuration has led to errors.\r\n\r\n###Step 2: Check your Logs\r\n\r\nOk so now you are here, As you can there are a lot of yellow messages (WARNINGS). Make sure you don&#39;t have error messages marked in red. Earlier, on our configuration we had added a select query on our **db-data-config.xml**, say if there were any errors on that query, it would have shown up here.\r\n\r\n![This is the logging section of your Apache Solr engine][14]\r\n\r\nFine, no errors. We are good to go. Let&#39;s choose **collection1** from the list as depicted and select **Dataimport**\r\n\r\n\r\n###Step 3: DIH (Data Import Handler)\r\n\r\nUsing the DIH, you will be connecting to **MySQL** from **Solr** through the configuration file **db-data-config.xml** from the **Solr** interface and retrieve the 10 records from the database which gets indexed onto **Solr**.\r\n\r\nTo do that, Choose **full-import** , and check the options *Clean* and *Commit*. Now click **Execute** as shown.\r\n\r\nAlternatively, you could use a direct **full-import** query like this too..\r\n\r\n    http://localhost:8983/solr/collection1/dataimport?command=full-import&amp;commit=true\r\n\r\n\r\n![The Data Import Handler][15]\r\n\r\nAfter you clicked **Execute**, **Solr** begins to index the records, if there were any errors, it would say **Indexing Failed** and you have to go back to the **Logging** section to see what has gone wrong.\r\n\r\nAssuming there are no errors with this configuration and if the indexing is successfully complete., you would get this notification.\r\n\r\n![Indexing Success][16]\r\n\r\n\r\n###Step 4: Running Solr Queries\r\n\r\nSeems like everything went well, now you could use **Solr** Queries to query the data that was indexed. Click the **Query** on the left and then press **Execute** button on the bottom.\r\n\r\nYou will see the indexed records as shown.\r\n\r\nThe corresponding **Solr** query for listing all the records is\r\n\r\n    http://localhost:8983/solr/collection1/select?q=*:*&amp;wt=json&amp;indent=true\r\n\r\n![The indexed data][17]\r\n\r\nWell, there goes all 10 indexed records. Say, we need only names starting with **Ja** , in this case, you need to target the column name `solr_name`, Hence your query goes like this.\r\n\r\n    http://localhost:8983/solr/collection1/select?q=solr_name:Ja*&amp;wt=json&amp;indent=true\r\n\r\n![The JSON data starting with Ja*][18]\r\n\r\nThat&#39;s how you write **Solr** Queries. To read more about it, Check this beautiful [article][19].\r\n\r\n\r\n  [1]: http://lucene.apache.org/solr/\r\n  [2]: https://wiki.apache.org/solr/SolrRelevancyFAQ\r\n  [3]: http://haystacksearch.org/\r\n  [4]: http://www.alexanderinteractive.com/blog/2012/08/getting-started-with-solr-and-django/\r\n  [5]: https://github.com/broderboy/django-solr-demo\r\n  [6]: https://cwiki.apache.org/confluence/display/solr/SolrCloud\r\n  [7]: http://wiki.apache.org/solr/Solrj\r\n  [8]: http://wiki.apache.org/solr/DistributedSearch\r\n  [9]: http://wiki.apache.org/solr/SpellCheckComponent\r\n  [10]: http://lucene.apache.org/solr/3_6_1/org/apache/solr/analysis/SnowballPorterFilterFactory.html\r\n  [11]: http://apache.mirrors.hoobly.com/lucene/solr/4.8.1/\r\n  [12]: http://dev.mysql.com/downloads/connector/j/\r\n  [13]: http://i.stack.imgur.com/8grrc.png\r\n  [14]: http://i.stack.imgur.com/8l6n5.png\r\n  [15]: http://i.stack.imgur.com/sHvSO.png\r\n  [16]: http://i.stack.imgur.com/WlD07.png\r\n  [17]: http://i.stack.imgur.com/aZP9W.png\r\n  [18]: http://i.stack.imgur.com/qeArE.png\r\n  [19]: http://lucene.apache.org/core/3_5_0/queryparsersyntax.html"}], "title": "Comparison of full text search engine - Lucene, Sphinx, Postgresql, MySQL?", "view_count": 124576, "answer_count": 8, "code_snippet": ["<code>Tsearch</code>", "<code>http://localhost:8983/solr/collection1/select?q=firstname:john^2&amp;lastname:john\n</code>", "<code>Downloads</code>", "<code>Downloads/solr-4.8.1/</code>", "<code>shankar@shankar-lenovo: cd Downloads/solr-4.8.1</code>", "<code>shankar@shankar-lenovo: ~/Downloads/solr-4.8.1$</code>", "<code>solr-4.8.1</code>", "<code>shankar@shankar-lenovo:~/Downloads/solr-4.8.1/example$ java -jar start.jar</code>", "<code>jetty.xml</code>", "<code>java -Djetty.port=9091 -jar start.jar</code>", "<code>mysql-connector-java-5.1.31-bin.jar</code>", "<code>shankar@shankar-lenovo:~/Downloads/solr-4.8.1/contrib/dataimporthandler/lib</code>", "<code>CREATE TABLE test_solr_mysql\n (\n  id INT UNSIGNED NOT NULL AUTO_INCREMENT,\n  name VARCHAR(45) NULL,\n  created TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY (id)\n );\n</code>", "<code>INSERT INTO `test_solr_mysql` (`name`) VALUES ('Jean');\nINSERT INTO `test_solr_mysql` (`name`) VALUES ('Jack');\nINSERT INTO `test_solr_mysql` (`name`) VALUES ('Jason');\nINSERT INTO `test_solr_mysql` (`name`) VALUES ('Vego');\nINSERT INTO `test_solr_mysql` (`name`) VALUES ('Grunt');\nINSERT INTO `test_solr_mysql` (`name`) VALUES ('Jasper');\nINSERT INTO `test_solr_mysql` (`name`) VALUES ('Fred');\nINSERT INTO `test_solr_mysql` (`name`) VALUES ('Jenna');\nINSERT INTO `test_solr_mysql` (`name`) VALUES ('Rebecca');\nINSERT INTO `test_solr_mysql` (`name`) VALUES ('Roland');\n</code>", "<code>shankar@shankar-lenovo: ~/Downloads/solr-4.8.1/example/solr/collection1/conf\n</code>", "<code>  &lt;lib dir=\"../../../contrib/dataimporthandler/lib/\" regex=\".*\\.jar\" /&gt;\n  &lt;lib dir=\"../../../dist/\" regex=\"solr-dataimporthandler-\\d.*\\.jar\" /&gt;\n</code>", "<code>&lt;requestHandler name=\"/dataimport\" \n  class=\"org.apache.solr.handler.dataimport.DataImportHandler\" &gt;\n    &lt;lst name=\"defaults\"&gt;\n      &lt;str name=\"config\"&gt;db-data-config.xml&lt;/str&gt;\n    &lt;/lst&gt;\n&lt;/requestHandler&gt;\n</code>", "<code>&lt;dataConfig&gt;\n    &lt;dataSource type=\"JdbcDataSource\" driver=\"com.mysql.jdbc.Driver\" url=\"jdbc:mysql://localhost/yourdbname\" user=\"dbuser\" password=\"dbpass\"/&gt;\n    &lt;document&gt;\n   &lt;entity name=\"test_solr\" query=\"select CONCAT('test_solr-',id) as rid,name from test_solr_mysql WHERE '${dataimporter.request.clean}' != 'false'\n      OR `created` &gt; '${dataimporter.last_index_time}'\" &gt;\n    &lt;field name=\"id\" column=\"rid\" /&gt;\n    &lt;field name=\"solr_name\" column=\"name\" /&gt;\n    &lt;/entity&gt;\n   &lt;/document&gt;\n&lt;/dataConfig&gt;\n</code>", "<code>&lt;uniqueKey&gt;id&lt;/uniqueKey&gt;\n&lt;field name=\"solr_name\" type=\"string\" indexed=\"true\" stored=\"true\" /&gt;\n</code>", "<code>http://localhost:8983/solr/collection1/dataimport?command=full-import&amp;commit=true\n</code>", "<code>http://localhost:8983/solr/collection1/select?q=*:*&amp;wt=json&amp;indent=true\n</code>", "<code>solr_name</code>", "<code>http://localhost:8983/solr/collection1/select?q=solr_name:Ja*&amp;wt=json&amp;indent=true\n</code>", "<code>Tsearch</code>"], "path": "stack.django"}, {"tags": ["sql", "django"], "creation_date": 1246539787, "body_markdown": "Is there a way to show the SQL that Django is running while performing a query?", "last_edit_date": 1505578756, "up_vote_count": 199, "link": "https://stackoverflow.com/questions/1074212/how-can-i-see-the-raw-sql-queries-django-is-running", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1246539966, "answer_id": 1074224, "path": "stack.django.answer", "score": 255, "up_vote_count": 255, "is_accepted": true, "last_activity_date": 1470433297, "last_edit_date": 1470433297, "body_markdown": "See the docs FAQ: &quot;[How can I see the raw SQL queries Django is running?][1]&quot;\r\n\r\n`django.db.connection.queries` contains a list of the SQL queries:\r\n\r\n    from django.db import connection\r\n    print connection.queries\r\n\r\nQuerysets also have a [`query` attribute][2] containing the query to be executed:\r\n\r\n    print MyModel.objects.filter(name=&quot;my name&quot;).query\r\n\r\nNote that the output of the query is not valid SQL, because:\r\n\r\n&gt; &quot;Django never actually interpolates the parameters: it sends the query and the parameters separately to the database adapter, which performs the appropriate operations.&quot;\r\n\r\nFrom Django bug report [#17741][3].\r\n\r\nBecause of that, you should not send query output directly to a database.\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/faq/models/#how-can-i-see-the-raw-sql-queries-django-is-running\r\n  [2]: https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet\r\n  [3]:\r\nhttps://code.djangoproject.com/ticket/17741 \r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1246542449, "answer_id": 1074436, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1246542449, "body_markdown": "Though you can do it with with the code supplied, I find that using the debug toolbar app is a great tool to show queries. You can download it from github [here](http://github.com/dcramer/django-debug-toolbar/tree/master).\r\n\r\nThis gives you the option to show all the queries ran on a given page along with the time to query took. It also sums up the number of queries on a page along with total time for a quick review. This is a great tool, when you want to look at what the Django ORM does behind the scenes. It also have a lot of other nice features, that you can use if you like."}, {"tags": [], "down_vote_count": 0, "creation_date": 1246602936, "answer_id": 1078011, "path": "stack.django.answer", "score": 30, "up_vote_count": 30, "is_accepted": false, "last_activity_date": 1463247538, "last_edit_date": 1463247538, "body_markdown": "Take a look at **debug_toolbar**, it&#39;s very useful for debugging.\r\n\r\nDocumentation and source is available at http://django-debug-toolbar.readthedocs.io/.\r\n\r\n[![Screenshot of debug toolbar][1]][1]\r\n\r\n  [1]: http://i.stack.imgur.com/VR75R.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1287033594, "answer_id": 3930290, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1455649267, "last_edit_date": 1455649267, "body_markdown": "If you make sure your settings.py file has:\r\n\r\n 1. `django.core.context_processors.debug` listed in `CONTEXT_PROCESSORS`\r\n 2. `DEBUG=True`\r\n 3. your `IP` in the `INTERNAL_IPS` tuple\r\n\r\nThen you should have access to the `sql_queries` variable.  I append a footer to each page that looks like this:\r\n\r\n        \r\n\r\n    {%if sql_queries %}\r\n      &lt;div class=&quot;footNav&quot;&gt;\r\n        &lt;h2&gt;Queries&lt;/h2&gt;\r\n        &lt;p&gt;\r\n          {{ sql_queries|length }} Quer{{ sql_queries|pluralize:&quot;y,ies&quot; }}, {{sql_time_sum}} Time\r\n        {% ifnotequal sql_queries|length 0 %}\r\n          (&lt;span style=&quot;cursor: pointer;&quot; onclick=&quot;var s=document.getElementById(&#39;debugQueryTable&#39;).style;s.disp\\\r\n    lay=s.display==&#39;none&#39;?&#39;&#39;:&#39;none&#39;;this.innerHTML=this.innerHTML==&#39;Show&#39;?&#39;Hide&#39;:&#39;Show&#39;;&quot;&gt;Show&lt;/span&gt;)\r\n        {% endifnotequal %}\r\n        &lt;/p&gt;\r\n        &lt;table id=&quot;debugQueryTable&quot; style=&quot;display: none;&quot;&gt;\r\n          &lt;col width=&quot;1&quot;&gt;&lt;/col&gt;\r\n          &lt;col&gt;&lt;/col&gt;\r\n          &lt;col width=&quot;1&quot;&gt;&lt;/col&gt;\r\n          &lt;thead&gt;\r\n            &lt;tr&gt;\r\n              &lt;th scope=&quot;col&quot;&gt;#&lt;/th&gt;\r\n              &lt;th scope=&quot;col&quot;&gt;SQL&lt;/th&gt;\r\n              &lt;th scope=&quot;col&quot;&gt;Time&lt;/th&gt;\r\n            &lt;/tr&gt;\r\n          &lt;/thead&gt;\r\n          &lt;tbody&gt;\r\n            {% for query in sql_queries %}\r\n              &lt;tr class=&quot;{% cycle odd,even %}&quot;&gt;\r\n                &lt;td&gt;{{ forloop.counter }}&lt;/td&gt;\r\n                &lt;td&gt;{{ query.sql|escape }}&lt;/td&gt;\r\n                &lt;td&gt;{{ query.time }}&lt;/td&gt;\r\n              &lt;/tr&gt;\r\n            {% endfor %}\r\n          &lt;/tbody&gt;\r\n        &lt;/table&gt;\r\n      &lt;/div&gt;\r\n    {% endif %}\r\n\r\nI got the variable `sql_time_sum` by adding the line \r\n\r\n    context_extras[&#39;sql_time_sum&#39;] = sum([float(q[&#39;time&#39;]) for q in connection.queries])\r\n\r\nto the debug function in django_src/django/core/context_processors.py."}, {"tags": [], "down_vote_count": 0, "creation_date": 1340835909, "answer_id": 11235636, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1389045000, "last_edit_date": 1389045000, "body_markdown": "    q = Query.objects.values(&#39;val1&#39;,&#39;val2&#39;,&#39;val_etc&#39;)\r\n\r\n    print q.query"}, {"tags": [], "down_vote_count": 0, "creation_date": 1385566629, "answer_id": 20246650, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1385567116, "last_edit_date": 1385567116, "body_markdown": "Another option, see logging options in settings.py described by this post\r\n\r\nhttp://dabapps.com/blog/logging-sql-queries-django-13/\r\n\r\ndebug_toolbar slows down each page load on your dev server, logging does not so it&#39;s faster. Outputs can be dumped to console or file, so the UI is not as nice. But for views with lots of SQLs, it can take a long time to debug and optimize the SQLs through debug_toolbar since each page load is so slow."}, {"tags": [], "down_vote_count": 0, "creation_date": 1401579082, "answer_id": 23975393, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1401579082, "body_markdown": "No other answer covers this method, so:\r\n\r\nI find by far the most useful, simple, and reliable method is to ask your database.  For example on Linux for Postgres you might do:\r\n\r\n    sudo su postgres\r\n    tail -f /var/log/postgresql/postgresql-8.4-main.log\r\n\r\nEach database will have slightly different procedure.  In the database logs you&#39;ll see not only the raw SQL, but any connection setup or transaction overhead django is placing on the system."}, {"tags": [], "down_vote_count": 0, "creation_date": 1437039809, "answer_id": 31450706, "path": "stack.django.answer", "score": 22, "up_vote_count": 22, "is_accepted": false, "last_activity_date": 1437039809, "body_markdown": "[Django-extensions][1] have a command [shell_plus][2] with a parameter `print-sql`\r\n\r\n    ./manage.py shell_plus --print-sql\r\n\r\nIn django-shell all executed queries will be printed\r\n\r\nEx.:\r\n\r\n    User.objects.get(pk=1)\r\n    SELECT &quot;auth_user&quot;.&quot;id&quot;,\r\n           &quot;auth_user&quot;.&quot;password&quot;,\r\n           &quot;auth_user&quot;.&quot;last_login&quot;,\r\n           &quot;auth_user&quot;.&quot;is_superuser&quot;,\r\n           &quot;auth_user&quot;.&quot;username&quot;,\r\n           &quot;auth_user&quot;.&quot;first_name&quot;,\r\n           &quot;auth_user&quot;.&quot;last_name&quot;,\r\n           &quot;auth_user&quot;.&quot;email&quot;,\r\n           &quot;auth_user&quot;.&quot;is_staff&quot;,\r\n           &quot;auth_user&quot;.&quot;is_active&quot;,\r\n           &quot;auth_user&quot;.&quot;date_joined&quot;\r\n    FROM &quot;auth_user&quot;\r\n    WHERE &quot;auth_user&quot;.&quot;id&quot; = 1\r\n    \r\n    Execution time: 0.002466s [Database: default]\r\n    \r\n    &lt;User: username&gt;\r\n\r\n  [1]: https://pypi.python.org/pypi/django-extensions/\r\n  [2]: http://django-extensions.readthedocs.org/en/latest/shell_plus.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1511913675, "answer_id": 47542953, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1511913675, "body_markdown": "The following returns the query as valid SQL, based on https://code.djangoproject.com/ticket/17741:\r\n\r\n    def str_query(qs):\r\n        &quot;&quot;&quot;\r\n        qs.query returns something that isn&#39;t valid SQL, this returns the actual\r\n        valid SQL that&#39;s executed: https://code.djangoproject.com/ticket/17741\r\n        &quot;&quot;&quot;\r\n        cursor = connections[qs.db].cursor()\r\n        query, params = qs.query.sql_with_params()\r\n        cursor.execute(&#39;EXPLAIN &#39; + query, params)\r\n        res = str(cursor.db.ops.last_executed_query(cursor, query, params))\r\n        assert res.startswith(&#39;EXPLAIN &#39;)\r\n        return res[len(&#39;EXPLAIN &#39;):]"}, {"tags": [], "down_vote_count": 0, "creation_date": 1516875836, "answer_id": 48440571, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1516875836, "body_markdown": "I&#39;ve made a small snippet you can use:\r\n\r\n    from django.conf import settings\r\n    from django.db import connection\r\n    \r\n    \r\n    def sql_echo(method, *args, **kwargs):\r\n        settings.DEBUG = True\r\n        result = method(*args, **kwargs)\r\n        for query in connection.queries:\r\n            print(query)\r\n        return result\r\n      \r\n\r\n    # HOW TO USE EXAMPLE:\r\n    # \r\n    # result = sql_echo(my_method, &#39;whatever&#39;, show=True)\r\n\r\nIt takes as parameters function (contains sql queryies) to inspect and args, kwargs needed to call that function. As the result it returns what function returns and prints SQL queries in a console."}], "title": "How can I see the raw SQL queries Django is running?", "view_count": 97971, "answer_count": 10, "code_snippet": ["<code>django.db.connection.queries</code>", "<code>from django.db import connection\nprint connection.queries\n</code>", "<code>query</code>", "<code>print MyModel.objects.filter(name=\"my name\").query\n</code>", "<code>str()</code>", "<code>__str__()</code>", "<code>str(MyModel.objects.filter(name=\"my name\").query)</code>", "<code>query</code>", "<code>print-sql</code>", "<code>./manage.py shell_plus --print-sql\n</code>", "<code>User.objects.get(pk=1)\nSELECT \"auth_user\".\"id\",\n       \"auth_user\".\"password\",\n       \"auth_user\".\"last_login\",\n       \"auth_user\".\"is_superuser\",\n       \"auth_user\".\"username\",\n       \"auth_user\".\"first_name\",\n       \"auth_user\".\"last_name\",\n       \"auth_user\".\"email\",\n       \"auth_user\".\"is_staff\",\n       \"auth_user\".\"is_active\",\n       \"auth_user\".\"date_joined\"\nFROM \"auth_user\"\nWHERE \"auth_user\".\"id\" = 1\n\nExecution time: 0.002466s [Database: default]\n\n&lt;User: username&gt;\n</code>", "<code>q = Query.objects.values('val1','val2','val_etc')\n\nprint q.query\n</code>", "<code>str(q.query)</code>", "<code>sudo su postgres\ntail -f /var/log/postgresql/postgresql-8.4-main.log\n</code>", "<code>log_statement='all'</code>", "<code>postgresql.conf</code>", "<code>django.core.context_processors.debug</code>", "<code>CONTEXT_PROCESSORS</code>", "<code>DEBUG=True</code>", "<code>IP</code>", "<code>INTERNAL_IPS</code>", "<code>sql_queries</code>", "<code>{%if sql_queries %}\n  &lt;div class=\"footNav\"&gt;\n    &lt;h2&gt;Queries&lt;/h2&gt;\n    &lt;p&gt;\n      {{ sql_queries|length }} Quer{{ sql_queries|pluralize:\"y,ies\" }}, {{sql_time_sum}} Time\n    {% ifnotequal sql_queries|length 0 %}\n      (&lt;span style=\"cursor: pointer;\" onclick=\"var s=document.getElementById('debugQueryTable').style;s.disp\\\nlay=s.display=='none'?'':'none';this.innerHTML=this.innerHTML=='Show'?'Hide':'Show';\"&gt;Show&lt;/span&gt;)\n    {% endifnotequal %}\n    &lt;/p&gt;\n    &lt;table id=\"debugQueryTable\" style=\"display: none;\"&gt;\n      &lt;col width=\"1\"&gt;&lt;/col&gt;\n      &lt;col&gt;&lt;/col&gt;\n      &lt;col width=\"1\"&gt;&lt;/col&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th scope=\"col\"&gt;#&lt;/th&gt;\n          &lt;th scope=\"col\"&gt;SQL&lt;/th&gt;\n          &lt;th scope=\"col\"&gt;Time&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        {% for query in sql_queries %}\n          &lt;tr class=\"{% cycle odd,even %}\"&gt;\n            &lt;td&gt;{{ forloop.counter }}&lt;/td&gt;\n            &lt;td&gt;{{ query.sql|escape }}&lt;/td&gt;\n            &lt;td&gt;{{ query.time }}&lt;/td&gt;\n          &lt;/tr&gt;\n        {% endfor %}\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n{% endif %}\n</code>", "<code>sql_time_sum</code>", "<code>context_extras['sql_time_sum'] = sum([float(q['time']) for q in connection.queries])\n</code>", "<code>def str_query(qs):\n    \"\"\"\n    qs.query returns something that isn't valid SQL, this returns the actual\n    valid SQL that's executed: https://code.djangoproject.com/ticket/17741\n    \"\"\"\n    cursor = connections[qs.db].cursor()\n    query, params = qs.query.sql_with_params()\n    cursor.execute('EXPLAIN ' + query, params)\n    res = str(cursor.db.ops.last_executed_query(cursor, query, params))\n    assert res.startswith('EXPLAIN ')\n    return res[len('EXPLAIN '):]\n</code>", "<code>from django.conf import settings\nfrom django.db import connection\n\n\ndef sql_echo(method, *args, **kwargs):\n    settings.DEBUG = True\n    result = method(*args, **kwargs)\n    for query in connection.queries:\n        print(query)\n    return result\n\n\n# HOW TO USE EXAMPLE:\n# \n# result = sql_echo(my_method, 'whatever', show=True)\n</code>"], "path": "stack.django"}, {"tags": ["python", "url", "encoding", "urllib", "urlencode"], "creation_date": 1257648225, "body_markdown": "If I do \r\n\r\n    url = &quot;http://example.com?p=&quot; + urllib.quote(query)\r\n\r\n1. It doesn&#39;t encode `/` to `%2F` (breaks OAuth normalization)\r\n2. It doesn&#39;t handle Unicode (it throws an exception)\r\n\r\nIs there a better library?", "last_edit_date": 1461395009, "up_vote_count": 207, "link": "https://stackoverflow.com/questions/1695183/how-to-percent-encode-url-parameters-in-python", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1257648742, "answer_id": 1695199, "path": "stack.django.answer", "score": 282, "up_vote_count": 282, "is_accepted": true, "last_activity_date": 1503327010, "last_edit_date": 1503327010, "body_markdown": "From the [docs][1]:\r\n\r\n    urllib.quote(string[, safe])\r\n\r\n&gt; Replace special characters in string\r\n&gt; using the %xx escape. Letters, digits,\r\n&gt; and the characters &#39;_.-&#39; are never\r\n&gt; quoted. By default, this function is\r\n&gt; intended for quoting the path section\r\n&gt; of the URL.The optional safe parameter\r\n&gt; specifies additional characters that\r\n&gt; should not be quoted \u2014 **its default\r\n&gt; value is &#39;/&#39;**\r\n\r\nThat means passing &#39;&#39; for safe will solve your first issue:\r\n\r\n    &gt;&gt;&gt; urllib.quote(&#39;/test&#39;)\r\n    &#39;/test&#39;\r\n    &gt;&gt;&gt; urllib.quote(&#39;/test&#39;, safe=&#39;&#39;)\r\n    &#39;%2Ftest&#39;\r\nAbout the second issue, there is a bug report about it [here][2]. Apparently it was fixed in python 3. You can workaround it by encoding as utf8 like this:\r\n\r\n    &gt;&gt;&gt; query = urllib.quote(u&quot;M&#252;ller&quot;.encode(&#39;utf8&#39;))\r\n    &gt;&gt;&gt; print urllib.unquote(query).decode(&#39;utf8&#39;)\r\n    M&#252;ller\r\n\r\nBy the way have a look at [urlencode][3]\r\n\r\nNote that `urllib.quote` moved to `urllib.parse.quote` in Python3\r\n\r\n  [1]: http://docs.python.org/library/urllib.html#urllib.quote\r\n  [2]: http://bugs.python.org/issue1712522\r\n  [3]: http://docs.python.org/library/urllib.html#urllib.urlencode"}, {"tags": [], "down_vote_count": 0, "creation_date": 1354189971, "answer_id": 13625238, "path": "stack.django.answer", "score": 106, "up_vote_count": 106, "is_accepted": false, "last_activity_date": 1354189971, "body_markdown": "In Python 3, [`urllib.quote`](http://docs.python.org/2/library/urllib.html#urllib.quote) has been moved to [`urllib.parse.quote`](http://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote) and it does handle unicode by default.\r\n\r\n    &gt;&gt;&gt; from urllib.parse import quote\r\n    &gt;&gt;&gt; quote(&#39;/test&#39;)\r\n    &#39;/test&#39;\r\n    &gt;&gt;&gt; quote(&#39;/test&#39;, safe=&#39;&#39;)\r\n    &#39;%2Ftest&#39;\r\n    &gt;&gt;&gt; quote(&#39;/El Ni&#241;o/&#39;)\r\n    &#39;/El%20Ni%C3%B1o/&#39;\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1436862658, "answer_id": 31401601, "path": "stack.django.answer", "score": 28, "up_vote_count": 30, "is_accepted": false, "last_activity_date": 1461391711, "last_edit_date": 1461391711, "body_markdown": "My answer is similar to Paolo&#39;s answer.\r\n\r\nI think module `requests` is much better. It&#39;s based on `urllib3`.\r\nYou can try this:\r\n\r\n    &gt;&gt;&gt; from requests.utils import quote\r\n    &gt;&gt;&gt; quote(&#39;/test&#39;)\r\n    &#39;/test&#39;\r\n    &gt;&gt;&gt; quote(&#39;/test&#39;, safe=&#39;&#39;)\r\n    &#39;%2Ftest&#39;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1445974821, "answer_id": 33377041, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1445974821, "body_markdown": "If you&#39;re using django, you can use urlquote:\r\n\r\n    &gt;&gt;&gt; from django.utils.http import urlquote\r\n    &gt;&gt;&gt; urlquote(u&quot;M&#252;ller&quot;)\r\n    u&#39;M%C3%BCller&#39;\r\n"}], "title": "How to percent-encode URL parameters in Python?", "view_count": 168425, "answer_count": 4, "code_snippet": ["<code>url = \"http://example.com?p=\" + urllib.quote(query)\n</code>", "<code>/</code>", "<code>%2F</code>", "<code>urllib.quote(string[, safe])\n</code>", "<code>&gt;&gt;&gt; urllib.quote('/test')\n'/test'\n&gt;&gt;&gt; urllib.quote('/test', safe='')\n'%2Ftest'\n</code>", "<code>&gt;&gt;&gt; query = urllib.quote(u\"M\u00fcller\".encode('utf8'))\n&gt;&gt;&gt; print urllib.unquote(query).decode('utf8')\nM\u00fcller\n</code>", "<code>urllib.quote</code>", "<code>urllib.parse.quote</code>", "<code>reserved    = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&amp;\" | \"=\" | \"+\" |                     \"$\" | \",\"</code>", "<code>urllib.quote</code>", "<code>urlib.parse.quote</code>", "<code>urllib.parse.quote</code>", "<code>urllib.quote</code>", "<code>urllib.parse.quote</code>", "<code>&gt;&gt;&gt; from urllib.parse import quote\n&gt;&gt;&gt; quote('/test')\n'/test'\n&gt;&gt;&gt; quote('/test', safe='')\n'%2Ftest'\n&gt;&gt;&gt; quote('/El Ni\u00f1o/')\n'/El%20Ni%C3%B1o/'\n</code>", "<code>requests</code>", "<code>urllib3</code>", "<code>&gt;&gt;&gt; from requests.utils import quote\n&gt;&gt;&gt; quote('/test')\n'/test'\n&gt;&gt;&gt; quote('/test', safe='')\n'%2Ftest'\n</code>", "<code>requests.utils.quote</code>", "<code>quote</code>", "<code>requests.utils.quote</code>", "<code>urllib.quote</code>", "<code>urllib.parse.quote</code>", "<code>&gt;&gt;&gt; from django.utils.http import urlquote\n&gt;&gt;&gt; urlquote(u\"M\u00fcller\")\nu'M%C3%BCller'\n</code>"], "path": "stack.django"}, {"tags": ["javascript", "caching", "versioning"], "creation_date": 1219933826, "body_markdown": "We are currently working in a private beta and so are still in the process of making fairly rapid changes, although obviously as usage is starting to ramp up, we will be slowing down this process.  That being said, one issue we are running into is that after we push out an update with new JavaScript files, the client browsers still use the cached version of the file and they do not see the update.  Obviously, on a support call, we can simply inform them to do a &lt;kbd&gt;ctrl&lt;/kbd&gt;&lt;kbd&gt;F5&lt;/kbd&gt; refresh to ensure that they get the up-to-date files from the server, but it would be preferable to handle this before that time.\r\n\r\nOur current thought is to simply attach a version number onto the name of the JavaScript files and then when changes are made, increment the version on the script and update all references.  This definitely gets the job done, but updating the references on each release could get cumbersome.\r\n\r\nAs I&#39;m sure we&#39;re not the first ones to deal with this, I figured I would throw it out to the community.  How are you ensuring clients update their cache when you update your code?  If you&#39;re using the method described above, are you using a process that simplifies the change?", "last_edit_date": 1312398264, "up_vote_count": 444, "link": "https://stackoverflow.com/questions/32414/how-can-i-force-clients-to-refresh-javascript-files", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1219934052, "answer_id": 32427, "path": "stack.django.answer", "score": 413, "up_vote_count": 414, "is_accepted": true, "last_activity_date": 1429305730, "last_edit_date": 1429305730, "body_markdown": "As far as I know a common solution is to add a `?&lt;version&gt;` to the script&#39;s src link.\r\n\r\nFor instance:\r\n\r\n    &lt;script type=&quot;text/javascript&quot; src=&quot;myfile.js?1500&quot;&gt;&lt;/script&gt;\r\n\r\n---\r\n\r\n&gt; I assume at this point that there isn&#39;t a better way than find-replace to increment these &quot;version numbers&quot; in all of the script tags?\r\n\r\nYou might have a version control system do that for you? Most version control systems have a way to automatically inject the revision number on check-in for instance.\r\n\r\nIt would look something like this:\r\n\r\n    &lt;script type=&quot;text/javascript&quot; src=&quot;myfile.js?$$REVISION$$&quot;&gt;&lt;/script&gt;\r\n\r\n---\r\n\r\nOf course, there are always better solutions like [this one][1].\r\n\r\n[1]:http://blog.greenfelt.net/2009/09/01/caching-javascript-safely/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1219934534, "answer_id": 32450, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1323962568, "last_edit_date": 1323962568, "body_markdown": "My colleague just found a reference to that method right after I posted (in reference to css) at http://www.stefanhayden.com/blog/2006/04/03/css-caching-hack/.  Good to see that others are using it and it seems to work.  I assume at this point that there isn&#39;t a better way than find-replace to increment these &quot;version numbers&quot; in all of the script tags?"}, {"tags": [], "down_vote_count": 0, "creation_date": 1221661871, "answer_id": 83853, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1221661871, "body_markdown": "One solution is to append a query string with a timestamp in it to the URL when fetching the resource. This takes advantage of the fact that a browser will not cache resources fetched from URLs with query strings in them.\r\n\r\nYou probably don&#39;t want the browser not to cache these resources at all though; it&#39;s more likely that you want them cached, but you want the browser to fetch a new version of the file when it is made available.\r\n\r\nThe most common solution seems to be to embed a timestamp or revision number in the file name itself. This is a little more work, because your code needs to be modified to request the correct files, but it means that, e.g. version 7 of your `snazzy_javascript_file.js` (i.e. `snazzy_javascript_file_7.js`) is cached on the browser until you release version 8, and then your code changes to fetch `snazzy_javascript_file_8.js` instead."}, {"tags": [], "down_vote_count": 2, "creation_date": 1221666901, "answer_id": 84770, "path": "stack.django.answer", "score": 0, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1221666901, "body_markdown": "Simplest solution?  Don&#39;t let the browser cache at all.  Append the current time (in ms) as a query.\r\n\r\n(You are still in beta, so you could make a reasonable case for not optimizing for performance.  But YMMV here.)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1221667386, "answer_id": 84835, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1221667386, "body_markdown": "If you&#39;re generating the page that links to the JS files a simple solution is appending the file&#39;s last modification timestamp to the generated links. \r\n\r\nThis is very similar to Huppie&#39;s answer, but works in version control systems without keyword substitution. It&#39;s also better than append the current time, since that would prevent caching even when the file didn&#39;t change at all."}, {"tags": [], "down_vote_count": 1, "creation_date": 1221667442, "answer_id": 84846, "path": "stack.django.answer", "score": 65, "up_vote_count": 66, "is_accepted": false, "last_activity_date": 1221667442, "body_markdown": "Appending the current time to the URL is indeed a common solution. However, you can also manage this at the web server level, if you want to. The server can be configured to send different HTTP headers for javascript files. \r\n\r\nFor example, to force the file to be cached for no longer than 1 day, you would send:\r\n\r\n    Cache-Control: max-age=86400, must-revalidate\r\n\r\nFor beta, if you want to force the user to always get the latest, you would use:\r\n\r\n    Cache-Control: no-cache, must-revalidate"}, {"tags": [], "down_vote_count": 0, "creation_date": 1221667688, "answer_id": 84871, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1221667688, "body_markdown": "Not all browsers cache files with &#39;?&#39; in it. What I did to make sure it was cached as much as possible, I included the version in the filename. \r\n\r\nSo instead of stuff.js?123, I did stuff_123.js \r\n\r\nI used mod_redirect(I think) in apache to to have stuff_*.js to go stuff.js"}, {"tags": [], "down_vote_count": 2, "creation_date": 1242216019, "answer_id": 857557, "path": "stack.django.answer", "score": 0, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1242216019, "body_markdown": "The advantage of using a `file.js?V=1` over a `fileV1.js` is that you do not need to store multiple versions of the JavaScript files on the server.\r\n\r\nThe trouble I see with `file.js?V=1` is that you may have dependant code in another JavaScript file that breaks when using the new version of the library utilities.\r\n\r\nFor the sake of backwards compatibility, I think it is much better to use `jQuery.1.3.js` for your new pages and let existing pages use `jQuery.1.1.js`, until you are ready to upgrade the older pages, if necessary."}, {"tags": [], "down_vote_count": 0, "creation_date": 1290891659, "answer_id": 4293901, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1290891659, "body_markdown": "Use a version `GET` variable to prevent browser caching.\r\n\r\nAppending `?v=AUTO_INCREMENT_VERSION` to the end of your url prevents browser caching - avoiding any and all cached scripts."}, {"tags": [], "down_vote_count": 1, "creation_date": 1317888824, "answer_id": 7671705, "path": "stack.django.answer", "score": 38, "up_vote_count": 39, "is_accepted": false, "last_activity_date": 1317888824, "body_markdown": "Google Page-Speed: Don&#39;t include a query string in the URL for static resources.\r\nMost proxies, most notably Squid up through version 3.0, do not cache resources with a &quot;?&quot; in their URL even if a Cache-control: public header is present in the response. To enable proxy caching for these resources, remove query strings from references to static resources, and instead encode the parameters into the file names themselves. \r\n\r\nIn this case, you can include the version into URL ex: http://abc.com/**v1.2**/script.js and use apache mod_rewrite to redirect the link to http://abc.com/script.js. When you change the version, client browser will update the new file."}, {"tags": [], "down_vote_count": 0, "creation_date": 1349504778, "answer_id": 12757339, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1349504778, "last_edit_date": 1495540499, "body_markdown": "Athough it is framework specific, Django 1.4 has [this functionailty][1] which works in a similar fashion to the link to the &#39;greenfelt&#39; site in the [above answer][2] \r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#django.contrib.staticfiles.storage.CachedStaticFilesStorage &quot;this functionality&quot;\r\n  [2]: https://stackoverflow.com/a/32427/110226"}, {"tags": [], "down_vote_count": 0, "creation_date": 1359892130, "answer_id": 14672139, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1469541822, "last_edit_date": 1469541822, "body_markdown": "In **PHP**:\r\n\r\n    function latest_version($file_name){\r\n    \techo $file_name.&quot;?&quot;.filemtime($_SERVER[&#39;DOCUMENT_ROOT&#39;] .$file_name);\r\n    }\r\n\r\nIn **HTML**:\r\n\r\n    &lt;script type=&quot;text/javascript&quot; src=&quot;&lt;?php latest_version(&#39;/a-o/javascript/almanacka.js&#39;); ?&gt;&quot;&gt;&lt; /script&gt;\r\n\r\n\r\n\r\n**How it works:**\r\n\r\nIn HTML, write the `filepath` and name as you wold do, but in the function only.\r\nPHP gets the `filetime` of the file and returns the `filepath+name+&quot;?&quot;+time` of latest change "}, {"tags": [], "down_vote_count": 0, "creation_date": 1375538123, "answer_id": 18033575, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1375538123, "body_markdown": "For ASP.NET I suppose next solution with advanced options (debug/release mode, versions):\r\n\r\nJs or Css files included by such way:\r\n\r\n    &lt;script type=&quot;text/javascript&quot; src=&quot;Scripts/exampleScript&lt;%=Global.JsPostfix%&gt;&quot; /&gt;\r\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;Css/exampleCss&lt;%=Global.CssPostfix%&gt;&quot; /&gt;\r\n\r\nGlobal.JsPostfix and Global.CssPostfix is calculated by the following way in Global.asax:\r\n\r\n    protected void Application_Start(object sender, EventArgs e)\r\n    {\r\n        ...\r\n\t\tstring jsVersion = ConfigurationManager.AppSettings[&quot;JsVersion&quot;];\r\n\t\tbool updateEveryAppStart = Convert.ToBoolean(ConfigurationManager.AppSettings[&quot;UpdateJsEveryAppStart&quot;]);\r\n        int buildNumber = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.Revision;\r\n        JsPostfix = &quot;&quot;;\r\n    #if !DEBUG\r\n\t\tJsPostfix += &quot;.min&quot;;\r\n    #endif\t\t\r\n\t\tJsPostfix += &quot;.js?&quot; + jsVersion + &quot;_&quot; + buildNumber;\r\n\t\tif (updateEveryAppStart)\r\n\t\t{\r\n\t\t\tRandom rand = new Random();\r\n\t\t\tJsPosfix += &quot;_&quot; + rand.Next();\r\n        }\r\n\t\t...\r\n    }"}, {"tags": [], "down_vote_count": 7, "creation_date": 1390439456, "answer_id": 21297413, "path": "stack.django.answer", "score": 10, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1390439456, "body_markdown": "For ASP.NET pages I am using the following\r\n\r\n**BEFORE**\r\n\r\n    &lt;script src=&quot;/Scripts/pages/common.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;\r\n\r\n**AFTER (force reload)**\r\n\r\n    &lt;script src=&quot;/Scripts/pages/common.js?ver&lt;%=DateTime.Now.Ticks.ToString()%&gt;&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;\r\n\r\n\r\nAdding the DateTime.Now.Ticks works very well.\r\n"}, {"tags": [], "down_vote_count": 5, "creation_date": 1408046748, "answer_id": 25316713, "path": "stack.django.answer", "score": 31, "up_vote_count": 36, "is_accepted": false, "last_activity_date": 1408046748, "body_markdown": "This answer is only 6 years late, but I don&#39;t see this answer in many places... HTML5 has introduced [Application Cache][1] which is used to solve this problem. I was finding that new server code I was writing was crashing old javascript stored in people&#39;s browsers, so I wanted to find a way to expire their javascript. Use a manifest file that looks like this:\r\n\r\n    CACHE MANIFEST\r\n    # Aug 14, 2014\r\n    /mycode.js\r\n\r\n    NETWORK:\r\n    *\r\n\r\nand generate this file with a new time stamp every time you want users to update their cache. As a side note, if you add this, the browser will *not* reload (even when a user refreshes the page) until the manifest tells it to.\r\n\r\n  [1]: http://www.w3schools.com/html/html5_app_cache.asp &quot;Application Cache&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1444510390, "answer_id": 33058872, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1444510390, "body_markdown": "The jQuery function getScript can also be used to ensure that a js file is indeed loaded every time the page is loaded.\r\n\r\nThis is how I did it:\r\n\r\n    $(document).ready(function(){\r\n        $.getScript(&quot;../data/playlist.js&quot;, function(data, textStatus, jqxhr){\r\n             startProgram();\r\n        });\r\n    });\r\nCheck the function at http://api.jquery.com/jQuery.getScript/\r\n\r\nBy default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested."}, {"tags": [], "down_vote_count": 1, "creation_date": 1449017142, "answer_id": 34032995, "path": "stack.django.answer", "score": 23, "up_vote_count": 24, "is_accepted": false, "last_activity_date": 1449017142, "body_markdown": "How about adding the filesize as a load parameter?\r\n\r\n    &lt;script type=&#39;text/javascript&#39; src=&#39;path/to/file/mylibrary.js?filever=&lt;?=filesize(&#39;path/to/file/mylibrary.js&#39;)?&gt;&#39;&gt;&lt;/script&gt;\r\n\r\nSo every time you update the file the &quot;filever&quot; parameter changes.\r\n\r\nHow about when you update the file and your update results in the same file size? what are the odds?"}, {"tags": [], "down_vote_count": 1, "creation_date": 1483692098, "answer_id": 41501905, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1483692098, "body_markdown": "One simple way.\r\nEdit htaccess\r\n\r\n    RewriteEngine On\r\n    RewriteBase /\r\n    RewriteCond %{REQUEST_URI} \\.(jpe?g|bmp|png|gif|css|js|mp3|ogg)$ [NC]\r\n    RewriteCond %{QUERY_STRING} !^(.+?&amp;v33|)v=33[^&amp;]*(?:&amp;(.*)|)$ [NC]\r\n    RewriteRule ^ %{REQUEST_URI}?v=33 [R=301,L]"}, {"tags": [], "down_vote_count": 0, "creation_date": 1498775436, "answer_id": 44835940, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1498775436, "body_markdown": "Cache Busting in ASP.NET Core via a tag helper will handle this for you and allow your browser to keep cached scripts/css until the file changes. Simply add the tag helper asp-append-version=&quot;true&quot; to your script (js) or link (css) tag:\r\n\r\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;~/css/site.min.css&quot; asp-append-version=&quot;true&quot;/&gt;\r\n\r\nDave Paquette has a good example and explanation of cache busting here (bottom of page) [Cache Busting][1] \r\n\r\n\r\n  [1]: http://www.davepaquette.com/archive/2015/05/06/link-and-script-tag-helpers-in-mvc6.aspx"}, {"tags": [], "down_vote_count": 0, "creation_date": 1510129679, "answer_id": 47174803, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1510129679, "body_markdown": "We have been creating a SaaS for users and providing them a script to attach in their website page, and it was not possible to attach a version with the script as user will attach the script to their website for functionalities and i can&#39;t force them to change the version each time we update the script\r\n\r\nSo, we found a way to load the newer version of the script each time user calls the original script\r\n\r\n\r\n*the script link provided to user*\r\n\r\n    &lt;script src=&quot;https://thesaasdomain.com/somejsfile.js&quot; data-ut=&quot;user_token&quot;&gt;&lt;/script&gt;\r\n\r\n*the script file*\r\n\r\n    if($(&#39;script[src^=&quot;https://thesaasdomain.com/somejsfile.js?&quot;]&#39;).length !== 0) {\r\n       init();\r\n    } else {\r\n       loadScript(&quot;https://thesaasdomain.com/somejsfile.js?&quot; + guid());\r\n    }\r\n\r\n    var loadscript = function(scriptURL) {\r\n       var head = document.getElementsByTagName(&#39;head&#39;)[0];\r\n       var script = document.createElement(&#39;script&#39;);\r\n       script.type = &#39;text/javascript&#39;;\r\n       script.src = scriptURL;\r\n       head.appendChild(script);\r\n    }\r\n\r\n    var guid = function() {\r\n        return &#39;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#39;.replace(/[xy]/g, function(c) {\r\n            var r = Math.random() * 16 | 0, v = c == &#39;x&#39; ? r : (r &amp; 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n    var init = function() {\r\n        // our main code\r\n    }\r\n\r\n\r\n**Explanation:**\r\n\r\nThe user have attached the script provided to them in their website and we checked for the unique token attached with the script exists or not using jQuery selector and if not then load it dynamically with newer token (or version)\r\n\r\nThis is call the same script twice which could be a performance issue, but it really solves the problem of forcing the script to not load from the cache without putting the version in the actual script link given to the user or client\r\n\r\n&gt; Disclaimer: Do not use if performance is a big issue in your case."}], "title": "How can I force clients to refresh JavaScript files?", "view_count": 328044, "answer_count": 20, "code_snippet": ["<code>?&lt;version&gt;</code>", "<code>&lt;script type=\"text/javascript\" src=\"myfile.js?1500\"&gt;&lt;/script&gt;\n</code>", "<code>&lt;script type=\"text/javascript\" src=\"myfile.js?$$REVISION$$\"&gt;&lt;/script&gt;\n</code>", "<code>foo.js?1</code>", "<code>foo.js?2</code>", "<code>Cache-Control: max-age=86400, must-revalidate\n</code>", "<code>Cache-Control: no-cache, must-revalidate\n</code>", "<code>CACHE MANIFEST\n# Aug 14, 2014\n/mycode.js\n\nNETWORK:\n*\n</code>", "<code>?&lt;version&gt; </code>", "<code>&lt;script type='text/javascript' src='path/to/file/mylibrary.js?filever=&lt;?=filesize('path/to/file/mylibrary.js')?&gt;'&gt;&lt;/script&gt;\n</code>", "<code>.htaccess</code>", "<code>&lt;script src=\"/Scripts/pages/common.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code>", "<code>&lt;script src=\"/Scripts/pages/common.js?ver&lt;%=DateTime.Now.Ticks.ToString()%&gt;\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code>", "<code>&lt;script type=\"text/javascript\" src=\"Scripts/exampleScript&lt;%=Global.JsPostfix%&gt;\" /&gt;\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"Css/exampleCss&lt;%=Global.CssPostfix%&gt;\" /&gt;\n</code>", "<code>protected void Application_Start(object sender, EventArgs e)\n{\n    ...\n    string jsVersion = ConfigurationManager.AppSettings[\"JsVersion\"];\n    bool updateEveryAppStart = Convert.ToBoolean(ConfigurationManager.AppSettings[\"UpdateJsEveryAppStart\"]);\n    int buildNumber = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.Revision;\n    JsPostfix = \"\";\n#if !DEBUG\n    JsPostfix += \".min\";\n#endif      \n    JsPostfix += \".js?\" + jsVersion + \"_\" + buildNumber;\n    if (updateEveryAppStart)\n    {\n        Random rand = new Random();\n        JsPosfix += \"_\" + rand.Next();\n    }\n    ...\n}\n</code>", "<code>$(document).ready(function(){\n    $.getScript(\"../data/playlist.js\", function(data, textStatus, jqxhr){\n         startProgram();\n    });\n});\n</code>", "<code>GET</code>", "<code>?v=AUTO_INCREMENT_VERSION</code>", "<code>function latest_version($file_name){\n    echo $file_name.\"?\".filemtime($_SERVER['DOCUMENT_ROOT'] .$file_name);\n}\n</code>", "<code>&lt;script type=\"text/javascript\" src=\"&lt;?php latest_version('/a-o/javascript/almanacka.js'); ?&gt;\"&gt;&lt; /script&gt;\n</code>", "<code>filepath</code>", "<code>filetime</code>", "<code>filepath+name+\"?\"+time</code>", "<code>RewriteEngine On\nRewriteBase /\nRewriteCond %{REQUEST_URI} \\.(jpe?g|bmp|png|gif|css|js|mp3|ogg)$ [NC]\nRewriteCond %{QUERY_STRING} !^(.+?&amp;v33|)v=33[^&amp;]*(?:&amp;(.*)|)$ [NC]\nRewriteRule ^ %{REQUEST_URI}?v=33 [R=301,L]\n</code>", "<code>&lt;script src=\"https://thesaasdomain.com/somejsfile.js\" data-ut=\"user_token\"&gt;&lt;/script&gt;\n</code>", "<code>if($('script[src^=\"https://thesaasdomain.com/somejsfile.js?\"]').length !== 0) {\n   init();\n} else {\n   loadScript(\"https://thesaasdomain.com/somejsfile.js?\" + guid());\n}\n\nvar loadscript = function(scriptURL) {\n   var head = document.getElementsByTagName('head')[0];\n   var script = document.createElement('script');\n   script.type = 'text/javascript';\n   script.src = scriptURL;\n   head.appendChild(script);\n}\n\nvar guid = function() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r &amp; 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\nvar init = function() {\n    // our main code\n}\n</code>", "<code>snazzy_javascript_file.js</code>", "<code>snazzy_javascript_file_7.js</code>", "<code>snazzy_javascript_file_8.js</code>", "<code>file.js?V=1</code>", "<code>fileV1.js</code>", "<code>file.js?V=1</code>", "<code>jQuery.1.3.js</code>", "<code>jQuery.1.1.js</code>", "<code>&lt;link rel=\"stylesheet\" href=\"~/css/site.min.css\" asp-append-version=\"true\"/&gt;\n</code>"], "path": "stack.django"}, {"tags": ["django", "admin"], "creation_date": 1308142802, "body_markdown": "I am using Django (version 1.3) and have forgotten both admin username and password. How to reset both?\r\n\r\nAnd is it possible to make a normal user into admin, and then remove admin status?", "last_edit_date": 1436820942, "up_vote_count": 279, "link": "https://stackoverflow.com/questions/6358030/how-to-reset-django-admin-password", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1308143192, "answer_id": 6358109, "path": "stack.django.answer", "score": 135, "up_vote_count": 135, "is_accepted": false, "last_activity_date": 1393529190, "last_edit_date": 1393529190, "body_markdown": "1. `python manage.py createsuperuser` will create another superuser, you will be able to log into admin and rememder your username.\r\n2. Yes, why not.\r\n\r\nTo give a normal user privileges, open a shell with `python manage.py shell` and try:\r\n\r\n    from django.contrib.auth.models import User\r\n    user = User.objects.get(username=&#39;normaluser&#39;)\r\n    user.is_superuser = True\r\n    user.save()"}, {"tags": [], "down_vote_count": 0, "creation_date": 1308143207, "answer_id": 6358112, "path": "stack.django.answer", "score": 19, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1404679612, "last_edit_date": 1404679612, "body_markdown": "You can create a new superuser with [`createsuperuser`][1] command. \r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/dev/ref/django-admin/?from=olddocs#django-admin-createsuperuser"}, {"tags": [], "down_vote_count": 4, "creation_date": 1308143234, "answer_id": 6358121, "path": "stack.django.answer", "score": 466, "up_vote_count": 470, "is_accepted": true, "last_activity_date": 1459781894, "last_edit_date": 1459781894, "body_markdown": "    manage.py changepassword &lt;user_name&gt;\r\n\r\n[see docs][1] \r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/stable/topics/auth/default/#changing-passwords"}, {"tags": [], "down_vote_count": 1, "creation_date": 1308144604, "answer_id": 6358452, "path": "stack.django.answer", "score": 76, "up_vote_count": 77, "is_accepted": false, "last_activity_date": 1347003787, "last_edit_date": 1347003787, "body_markdown": "You may try through console:\r\n\r\n    python manage.py shell\r\n\r\nthen use following script in shell\r\n\r\n    from django.contrib.auth.models import User\r\n    User.objects.filter(is_superuser=True)\r\n\r\nwill list you all super users on the system. if you recognize yur username from the list:\r\n\r\n    usr = User.objects.get(username=&#39;your username&#39;)\r\n    usr.set_password(&#39;raw password&#39;)\r\n    usr.save()\r\n\r\nand you set a new password (:\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1388783417, "answer_id": 20912736, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1404679540, "last_edit_date": 1404679540, "body_markdown": "You may also have answered a setup question wrong and have zero staff members.  In which case head to postgres:\r\n\r\n    obvioustest=# \\c [yourdatabasename]\r\n    obvioustest=# \\x\r\n    obvioustest=# select * from auth_user;\r\n    -[ RECORD 1 ]+-------------\r\n    id           | 1\r\n    is_superuser | f\r\n    is_staff     | f\r\n    ...\r\n\r\nTo fix, edit directly:\r\n\r\n    update auth_user set is_staff=&#39;true&#39; where id=1;\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1390646222, "answer_id": 21349445, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1432207708, "last_edit_date": 1432207708, "body_markdown": "If you forgot create admin user first build one with `createsuperuser` command on `manage.py` then change the password."}, {"tags": [], "down_vote_count": 0, "creation_date": 1434310377, "answer_id": 30833640, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1434310377, "body_markdown": "Another thing that is worth noting is to set your user&#39;s status `is_staff` as active. At least, that&#39;s what makes it works for me. For more detail, I created another `superuser` as people explained above. Then I go to the database table `auth_user` and search for that username to make sure its `is_staff` flag is set to `1`. That finally allowed me to log into `admin` site."}, {"tags": [], "down_vote_count": 0, "creation_date": 1457865061, "answer_id": 35969131, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1457865061, "body_markdown": "This is very good question. \r\n\r\n   python manage.py changepassword user_name\r\n\r\nExample :- \r\n\r\n    python manage.py changepassword mickey\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1473682277, "answer_id": 39450027, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1484739067, "last_edit_date": 1484739067, "body_markdown": "**new setup** should **first run** `python manage.py createsuperuser` to create user. It seems like there is no default username password to login into admin. "}, {"tags": [], "down_vote_count": 1, "creation_date": 1504343944, "answer_id": 46012311, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1504343944, "body_markdown": "python manage.py changepassword username\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1509555153, "answer_id": 47059837, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1509555153, "body_markdown": "In case you do not know the usernames as created here. You can get the users as described by @FallenAngel above.\r\n\r\n    python manage.py shell \r\n    from django.contrib.auth.models import User\r\n    usrs = User.objects.filter(is_superuser=True)\r\n    #identify the user\r\n    your_user = usrs.filter(username=&quot;yourusername&quot;)[0]\r\n    #youruser = usrs.get(username=&quot;yourusername&quot;)\r\n    #then set the password\r\n However in the event that you created your independent user model. A simple case is when you want to use email as a username instead of the default user name. In which case your user model lives somewhere such as your_accounts_app.models then the above solution wont work.\r\nIn this case you can instead use the get_user_model method \r\n\r\n    from django.contrib.auth import get_user_model \r\n    super_users = get_user_model().objects.filter(is_superuser=True)\r\n    #proceed to get identify your user\r\n    # and set their user password\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1514991590, "answer_id": 48079917, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1514991590, "body_markdown": "Create a new superuser with the command &quot;python manage.py createsuperuser&quot;.\r\nLogin as the new super user. Click on the &#39;users&#39; link. Then click on the user you want to delete. click on delete user at the end of the form page. \r\n\r\nNote - The above process will make changes to the activity logs done by that particular user."}, {"tags": [], "down_vote_count": 0, "creation_date": 1517343876, "answer_id": 48529922, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1517343876, "body_markdown": "You may try this:\r\n\r\n 1.Change Superuser password without console\r\n\r\n    python manage.py changepassword &lt;username&gt;\r\n 2.Change Superuser password through console\r\n \r\n[![enter image description here][1]][1]\r\n[![enter image description here][2]][2]\r\n\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/I2BLt.png\r\n  [2]: https://i.stack.imgur.com/2fFUJ.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1519812934, "answer_id": 49027013, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1519818348, "last_edit_date": 1519818348, "body_markdown": "One of the best ways to retrieve the username and password is to view and update them. The User Model provides a perfect way to do so. \r\n\r\n#In this case, I&#39;m using Django 1.9\r\n\r\n1. Navigate to your root directory i,e. where you &quot;manage.py&quot; file is located using your console or other application such as Git.\r\n2. Retrieve the Python shell using the command  &quot;python manage.py shell&quot;.\r\n3. Import the User Model by typing the following command\r\n &quot;from django.contrib.auth.models import User&quot;\r\n4. Get all the users by typing the following command\r\n&quot;users = User.objects.all()&quot;\r\n5. Print a list of the users \r\nFor Python 2 users use the command &quot;print users&quot;\r\nFor Python 3 users use the command &quot;print(users)&quot;\r\nThe first user is usually the admin. \r\n\r\n6. Select the user you wish to change their password e.g.\r\n\r\n&quot;user = users[0]&quot; \r\n\r\n7. Set the password\r\n\r\n   \r\n\r\n \r\n\r\n    user.set_password(&#39;name_of_the_new_password_for_user_selected&#39;)\r\n\r\n8.Save the new password\r\n\r\n    &quot;user.save()&quot;\r\n\r\nStart the server and log in using the username and the updated password. \r\n\r\n"}], "title": "How to reset Django admin password?", "view_count": 173983, "answer_count": 14, "code_snippet": ["<code>manage.py changepassword &lt;user_name&gt;\n</code>", "<code>python manage.py createsuperuser</code>", "<code>python manage.py shell</code>", "<code>from django.contrib.auth.models import User\nuser = User.objects.get(username='normaluser')\nuser.is_superuser = True\nuser.save()\n</code>", "<code>user.is_staff = True</code>", "<code>python manage.py shell\n</code>", "<code>from django.contrib.auth.models import User\nUser.objects.filter(is_superuser=True)\n</code>", "<code>usr = User.objects.get(username='your username')\nusr.set_password('raw password')\nusr.save()\n</code>", "<code>User.objects.filter(is_superuser=True)</code>", "<code>createsuperuser</code>", "<code>python manage.py createsuperuser</code>", "<code>python manage.py changepassword mickey\n</code>", "<code>obvioustest=# \\c [yourdatabasename]\nobvioustest=# \\x\nobvioustest=# select * from auth_user;\n-[ RECORD 1 ]+-------------\nid           | 1\nis_superuser | f\nis_staff     | f\n...\n</code>", "<code>update auth_user set is_staff='true' where id=1;\n</code>", "<code>createsuperuser</code>", "<code>manage.py</code>", "<code>python manage.py shell \nfrom django.contrib.auth.models import User\nusrs = User.objects.filter(is_superuser=True)\n#identify the user\nyour_user = usrs.filter(username=\"yourusername\")[0]\n#youruser = usrs.get(username=\"yourusername\")\n#then set the password\n</code>", "<code>from django.contrib.auth import get_user_model \nsuper_users = get_user_model().objects.filter(is_superuser=True)\n#proceed to get identify your user\n# and set their user password\n</code>", "<code>python manage.py changepassword &lt;username&gt;\n</code>", "<code>is_staff</code>", "<code>superuser</code>", "<code>auth_user</code>", "<code>is_staff</code>", "<code>1</code>", "<code>admin</code>", "<code>\"user = users[0]\"</code>", "<code>user.set_password('name_of_the_new_password_for_user_selected')</code>", "<code>\"user.save()\"</code>"], "path": "stack.django"}, {"tags": ["ajax", "django"], "creation_date": 1233527187, "body_markdown": "I want to automatically add new forms to a Django formset using Ajax, so that when the user clicks an &quot;add&quot; button it runs JavaScript that adds a new form (which is part of the formset) to the page.", "last_edit_date": 1405683454, "up_vote_count": 214, "link": "https://stackoverflow.com/questions/501719/dynamically-adding-a-form-to-a-django-formset-with-ajax", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1233535775, "answer_id": 501930, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1233535775, "body_markdown": "One option would be to create a formset with every possible form, but initially set the unrequired forms to hidden - ie, `display: none;`.  When it&#39;s necessary to display a form, set it&#39;s css display to `block` or whatever is appropriate.\r\n\r\nWithout know more details of what your &quot;Ajax&quot; is doing, it&#39;s hard to give a more detailed response.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234212551, "answer_id": 529873, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1234212551, "body_markdown": "Simulate and imitate:\r\n\r\n * Create a formset which corresponds to the situation **before** clicking the &quot;add&quot; button.\r\n * Load the page, view the source and take a note of all `&lt;input&gt;` fields.\r\n * Modify the formset to correspond to the situation **after** clicking the &quot;add&quot; button (change the number of extra fields).\r\n * Load the page, view the source and take a note of how the `&lt;input&gt;` fields changed.\r\n * Create some JavaScript which modifies the DOM in a suitable way to move it from the **before** state to the **after** state.\r\n * Attach that JavaScript to the &quot;add&quot; button.\r\n\r\nWhile I do know formsets use special hidden `&lt;input&gt;` fields and know approximately what the script must do, I don&#39;t recall the details off the top of my head. What I described above is what I would do in your situation."}, {"tags": [], "down_vote_count": 0, "creation_date": 1237669082, "answer_id": 669982, "path": "stack.django.answer", "score": 189, "up_vote_count": 189, "is_accepted": true, "last_activity_date": 1253083333, "last_edit_date": 1253083333, "body_markdown": "This is how I do it, using [jQuery](http://www.jquery.com):\r\n\r\nMy template:\r\n\r\n    &lt;h3&gt;My Services&lt;/h3&gt;\r\n    {{ serviceFormset.management_form }}\r\n    {% for form in serviceFormset.forms %}\r\n        &lt;div class=&#39;table&#39;&gt;\r\n        &lt;table class=&#39;no_error&#39;&gt;\r\n            {{ form.as_table }}\r\n        &lt;/table&gt;\r\n        &lt;/div&gt;\r\n    {% endfor %}\r\n    &lt;input type=&quot;button&quot; value=&quot;Add More&quot; id=&quot;add_more&quot;&gt;\r\n    &lt;script&gt;\r\n        $(&#39;#add_more&#39;).click(function() {\r\n            cloneMore(&#39;div.table:last&#39;, &#39;service&#39;);\r\n        });\r\n    &lt;/script&gt;\r\n\r\nIn a javascript file:\r\n\r\n    function cloneMore(selector, type) {\r\n        var newElement = $(selector).clone(true);\r\n        var total = $(&#39;#id_&#39; + type + &#39;-TOTAL_FORMS&#39;).val();\r\n        newElement.find(&#39;:input&#39;).each(function() {\r\n            var name = $(this).attr(&#39;name&#39;).replace(&#39;-&#39; + (total-1) + &#39;-&#39;,&#39;-&#39; + total + &#39;-&#39;);\r\n            var id = &#39;id_&#39; + name;\r\n            $(this).attr({&#39;name&#39;: name, &#39;id&#39;: id}).val(&#39;&#39;).removeAttr(&#39;checked&#39;);\r\n        });\r\n        newElement.find(&#39;label&#39;).each(function() {\r\n            var newFor = $(this).attr(&#39;for&#39;).replace(&#39;-&#39; + (total-1) + &#39;-&#39;,&#39;-&#39; + total + &#39;-&#39;);\r\n            $(this).attr(&#39;for&#39;, newFor);\r\n        });\r\n        total++;\r\n        $(&#39;#id_&#39; + type + &#39;-TOTAL_FORMS&#39;).val(total);\r\n        $(selector).after(newElement);\r\n    }\r\n\r\nWhat it does:\r\n\r\n`cloneMore` accepts `selector` as the first argument, and the `type` of formset as the 2nd one. What the `selector` should do is pass it what it should duplicate. In this case, I pass it `div.table:last` so that jQuery looks for the last table with a class of `table`. The `:last` part of it is important because the `selector` is also used to determine what the new form will be inserted after. More than likely you&#39;d want it at the end of the rest of the forms. The `type` argument is so that we can update the `management_form` field, notably `TOTAL_FORMS`, as well as the actual form fields. If you have a formset full of, say, `Client` models, the management fields will have IDs of `id_clients-TOTAL_FORMS` and `id_clients-INITIAL_FORMS`, while the form fields will be in a format of `id_clients-N-fieldname` with `N` being the form number, starting with `0`. So with the `type` argument the `cloneMore` function looks at how many forms there currently are, and goes through every input and label inside the new form replacing all the field names/ids from something like `id_clients-(N)-name` to `id_clients-(N+1)-name` and so on. After it is finished, it updates the `TOTAL_FORMS` field to reflect the new form and adds it to the end of the set.\r\n\r\nThis function is particularly helpful to me because the way it is setup it allows me to use it throughout the app when I want to provide more forms in a formset, and doesn&#39;t make me need to have a hidden &quot;template&quot; form to duplicate as long as I pass it the formset name and the format in which the forms are laid out. Hope it helps."}, {"tags": [], "down_vote_count": 1, "creation_date": 1237724237, "answer_id": 670910, "path": "stack.django.answer", "score": 23, "up_vote_count": 24, "is_accepted": false, "last_activity_date": 1237724237, "body_markdown": "I&#39;ve [posted a snippet][1] from an app I worked on a while back. Similar to Paolo&#39;s, but also allows you delete forms.\r\n\r\n\r\n  [1]: http://www.djangosnippets.org/snippets/1389/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1240318337, "answer_id": 772426, "path": "stack.django.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1240318337, "body_markdown": "Paolo&#39;s suggestion works beautifully with one caveat - the browser&#39;s back/forward buttons.\r\n\r\nThe dynamic elements created with Paolo&#39;s script will not be rendered if the user returns to the formset using the back/forward button. An issue that may be a deal breaker for some. \r\n\r\nExample:\r\n\r\n1) User adds two new forms to the formset using the &quot;add-more&quot; button\r\n\r\n2) User populates the forms and submits the formset\r\n\r\n3) User clicks the back button in the browser\r\n\r\n4) Formset is now reduced to the original form, all dynamically added forms are not there\r\n\r\nThis is not a defect with Paolo&#39;s script at all; but a fact of life with dom manipulation and browser&#39;s cache.\r\n\r\nI suppose one could store the values of the form in the session and have some ajax magic when the formset loads to create the elements again and reload the values from the session; but depending on how anal you want to be about the same user and multiple instances of the form this may become very complicated.\r\n\r\nAnyone has a good suggestion for dealing with this?\r\n\r\nThanks!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1253064331, "answer_id": 1430465, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1253064331, "last_edit_date": 1495541444, "body_markdown": "@Paolo Bergantino\r\n\r\nto clone all the handlers attached just modify the line \r\n\r\n    var newElement = $(selector).clone();\r\n\r\nfor \r\n\r\n    var newElement = $(selector).clone(true);\r\n\r\nto prevent [this problem.][1] \r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/1430306/jquery-cloning-html-problem-update-dom"}, {"tags": [], "down_vote_count": 0, "creation_date": 1275945750, "answer_id": 2993276, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1275945750, "body_markdown": "There is a small issue with the cloneMore function. Since it&#39;s also cleaning the value of the django auto-generated hidden fields, it causes django to complain if you try to save a formset with more than one empty form.\r\n\r\nHere is a fix:\r\n\r\n    function cloneMore(selector, type) {\r\n        var newElement = $(selector).clone(true);\r\n        var total = $(&#39;#id_&#39; + type + &#39;-TOTAL_FORMS&#39;).val();\r\n        newElement.find(&#39;:input&#39;).each(function() {\r\n            var name = $(this).attr(&#39;name&#39;).replace(&#39;-&#39; + (total-1) + &#39;-&#39;,&#39;-&#39; + total + &#39;-&#39;);\r\n            var id = &#39;id_&#39; + name;\r\n    \r\n            if ($(this).attr(&#39;type&#39;) != &#39;hidden&#39;) {\r\n                $(this).val(&#39;&#39;);\r\n            }\r\n            $(this).attr({&#39;name&#39;: name, &#39;id&#39;: id}).removeAttr(&#39;checked&#39;);\r\n        });\r\n        newElement.find(&#39;label&#39;).each(function() {\r\n            var newFor = $(this).attr(&#39;for&#39;).replace(&#39;-&#39; + (total-1) + &#39;-&#39;,&#39;-&#39; + total + &#39;-&#39;);\r\n            $(this).attr(&#39;for&#39;, newFor);\r\n        });\r\n        total++;\r\n        $(&#39;#id_&#39; + type + &#39;-TOTAL_FORMS&#39;).val(total);\r\n        $(selector).after(newElement);\r\n    }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1288879225, "answer_id": 4097400, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1288879225, "body_markdown": "Another cloneMore version, which allows for selective sanitization of fields. Use it when you need to prevent several fields from being erased.\r\n\r\n    $(&#39;table tr.add-row a&#39;).click(function() {\r\n        toSanitize = new Array(&#39;id&#39;, &#39;product&#39;, &#39;price&#39;, &#39;type&#39;, &#39;valid_from&#39;, &#39;valid_until&#39;);\r\n        cloneMore(&#39;div.formtable table tr.form-row:last&#39;, &#39;form&#39;, toSanitize);\r\n    });\r\n    \r\n    function cloneMore(selector, type, sanitize) {\r\n        var newElement = $(selector).clone(true);\r\n        var total = $(&#39;#id_&#39; + type + &#39;-TOTAL_FORMS&#39;).val();\r\n        newElement.find(&#39;:input&#39;).each(function() {\r\n            var namePure = $(this).attr(&#39;name&#39;).replace(type + &#39;-&#39; + (total-1) + &#39;-&#39;, &#39;&#39;);\r\n            var name = $(this).attr(&#39;name&#39;).replace(&#39;-&#39; + (total-1) + &#39;-&#39;,&#39;-&#39; + total + &#39;-&#39;);\r\n            var id = &#39;id_&#39; + name;\r\n            $(this).attr({&#39;name&#39;: name, &#39;id&#39;: id}).removeAttr(&#39;checked&#39;);\r\n            \r\n            if ($.inArray(namePure, sanitize) != -1) {\r\n                $(this).val(&#39;&#39;);\r\n            }\r\n                \r\n        });\r\n        newElement.find(&#39;label&#39;).each(function() {\r\n            var newFor = $(this).attr(&#39;for&#39;).replace(&#39;-&#39; + (total-1) + &#39;-&#39;,&#39;-&#39; + total + &#39;-&#39;);\r\n            $(this).attr(&#39;for&#39;, newFor);\r\n        });\r\n        total++;\r\n        $(&#39;#id_&#39; + type + &#39;-TOTAL_FORMS&#39;).val(total);\r\n        $(selector).after(newElement);\r\n    }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1311610870, "answer_id": 6819244, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1311610870, "last_edit_date": 1495540048, "body_markdown": "I think this is a much better solution. \r\n\r\nhttps://stackoverflow.com/questions/2353710/how-would-you-make-a-dynamic-formset-in-django\r\n\r\nDoes things clone doesn&#39;t:\r\n\r\n - Add form when no initial forms exists\r\n - Handles javascript in the form better, for example django-ckeditor\r\n - Keep initial data"}, {"tags": [], "down_vote_count": 0, "creation_date": 1321032043, "answer_id": 8097617, "path": "stack.django.answer", "score": 70, "up_vote_count": 70, "is_accepted": false, "last_activity_date": 1395999753, "last_edit_date": 1395999753, "body_markdown": "Simplified version of Paolo&#39;s answer using [`empty_form`](https://docs.djangoproject.com/en/dev/topics/forms/formsets/#empty-form) as a template.\r\n\r\n    &lt;h3&gt;My Services&lt;/h3&gt;\r\n    {{ serviceFormset.management_form }}\r\n    &lt;div id=&quot;form_set&quot;&gt;\r\n        {% for form in serviceFormset.forms %}\r\n            &lt;table class=&#39;no_error&#39;&gt;\r\n                {{ form.as_table }}\r\n            &lt;/table&gt;\r\n        {% endfor %}\r\n    &lt;/div&gt;\r\n    &lt;input type=&quot;button&quot; value=&quot;Add More&quot; id=&quot;add_more&quot;&gt;\r\n    &lt;div id=&quot;empty_form&quot; style=&quot;display:none&quot;&gt;\r\n        &lt;table class=&#39;no_error&#39;&gt;\r\n            {{ serviceFormset.empty_form.as_table }}\r\n        &lt;/table&gt;\r\n    &lt;/div&gt;\r\n    &lt;script&gt;\r\n        $(&#39;#add_more&#39;).click(function() {\r\n            var form_idx = $(&#39;#id_form-TOTAL_FORMS&#39;).val();\r\n            $(&#39;#form_set&#39;).append($(&#39;#empty_form&#39;).html().replace(/__prefix__/g, form_idx));\r\n            $(&#39;#id_form-TOTAL_FORMS&#39;).val(parseInt(form_idx) + 1);\r\n        });\r\n    &lt;/script&gt;\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1322340115, "answer_id": 8281464, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1322340115, "body_markdown": "Check out the following solutions to dynamic django forms:\r\n\r\nhttp://code.google.com/p/django-dynamic-formset/\r\n\r\nhttps://github.com/javisantana/django-dinamyc-form/tree/master/frm\r\n\r\nThey both make use of jQuery and are django-specific. The first seems a bit more polished and offers a download that comes w/demos which are excellent."}, {"tags": [], "down_vote_count": 0, "creation_date": 1325707040, "answer_id": 8733143, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1325707040, "body_markdown": "There is a [jquery plugin for this][1], I used it with inline_form set in Django 1.3, and it works perfectly, including prepopulation, client side form adding, removing, and multiple inline_formsets.\r\n\r\n\r\n  [1]: http://elo80ka.wordpress.com/2009/10/10/jquery-plugin-django-dynamic-formset/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1344474317, "answer_id": 11875404, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1344474317, "body_markdown": "Yea I&#39;d also recommend just rendering them out in the html if you have a finite number of entries. (If you don&#39;t you&#39;ll have to user another method).\r\n\r\nYou can hide them like this:\r\n    \r\n    {% for form in spokenLanguageFormset %}\r\n        &lt;fieldset class=&quot;languages-{{forloop.counter0 }} {% if spokenLanguageFormset.initial_forms|length &lt; forloop.counter and forloop.counter != 1 %}hidden-form{% endif %}&quot;&gt;\r\n\r\nThen the js is really simple:\r\n\r\n    addItem: function(e){\r\n        e.preventDefault();\r\n        var maxForms = parseInt($(this).closest(&quot;fieldset&quot;).find(&quot;[name*=&#39;MAX_NUM_FORMS&#39;]&quot;).val(), 10);\r\n        var initialForms = parseInt($(this).closest(&quot;fieldset&quot;).find(&quot;[name*=&#39;INITIAL_FORMS&#39;]&quot;).val(), 10);\r\n        // check if we can add\r\n        if (initialForms &lt; maxForms) {\r\n            $(this).closest(&quot;fieldset&quot;).find(&quot;fieldset:hidden&quot;).first().show();\r\n            if ($(this).closest(&quot;fieldset&quot;).find(&quot;fieldset:visible&quot;).length == maxForms ){\r\n                // here I&#39;m just hiding my &#39;add&#39; link\r\n                $(this).closest(&quot;.control-group&quot;).hide();\r\n            };\r\n        };\r\n    }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1491237657, "answer_id": 43189957, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1491237657, "body_markdown": "Because all answers above use jQuery and make some things a bit complex I wrote following script:\r\n\r\n    function $(selector, element) {\r\n        if (!element) {\r\n            element = document\r\n        }\r\n        return element.querySelector(selector)\r\n    }\r\n    \r\n    function $$(selector, element) {\r\n        if (!element) {\r\n            element = document\r\n        }\r\n        return element.querySelectorAll(selector)\r\n    }\r\n    \r\n    function hasReachedMaxNum(type, form) {\r\n        var total = parseInt(form.elements[type + &quot;-TOTAL_FORMS&quot;].value);\r\n        var max = parseInt(form.elements[type + &quot;-MAX_NUM_FORMS&quot;].value);\r\n        return total &gt;= max\r\n    }\r\n    \r\n    function cloneMore(element, type, form) {\r\n        var totalElement = form.elements[type + &quot;-TOTAL_FORMS&quot;];\r\n        total = parseInt(totalElement.value);\r\n        newElement = element.cloneNode(true);\r\n        for (var input of $$(&quot;input&quot;, newElement)) {\r\n            input.name = input.name.replace(&quot;-&quot; + (total - 1) + &quot;-&quot;, &quot;-&quot; + total + &quot;-&quot;);\r\n            input.value = null\r\n        }\r\n        total++;\r\n        element.parentNode.insertBefore(newElement, element.nextSibling);\r\n        totalElement.value = total;\r\n        return newElement\r\n    }\r\n    var addChoiceButton = $(&quot;#add-choice&quot;);\r\n    addChoiceButton.onclick = function() {\r\n        var choices = $(&quot;#choices&quot;);\r\n        var createForm = $(&quot;#create&quot;);\r\n        cloneMore(choices.lastElementChild, &quot;choice_set&quot;, createForm);\r\n        if (hasReachedMaxNum(&quot;choice_set&quot;, createForm)) {\r\n            this.disabled = true\r\n        }\r\n    };\r\nFirst you should set [auto_id](https://docs.djangoproject.com/en/1.10/ref/forms/api/#django.forms.Form.auto_id) to false and so disable the duplication of id and name. Because the input names have to be unique in there form, all identification is done with them and not with id&#39;s.\r\nYou also have to replace the `form`, `type` and the container of the formset. (In the example above `choices`)"}], "title": "Dynamically adding a form to a Django formset with Ajax", "view_count": 59436, "answer_count": 14, "code_snippet": ["<code>&lt;h3&gt;My Services&lt;/h3&gt;\n{{ serviceFormset.management_form }}\n{% for form in serviceFormset.forms %}\n    &lt;div class='table'&gt;\n    &lt;table class='no_error'&gt;\n        {{ form.as_table }}\n    &lt;/table&gt;\n    &lt;/div&gt;\n{% endfor %}\n&lt;input type=\"button\" value=\"Add More\" id=\"add_more\"&gt;\n&lt;script&gt;\n    $('#add_more').click(function() {\n        cloneMore('div.table:last', 'service');\n    });\n&lt;/script&gt;\n</code>", "<code>function cloneMore(selector, type) {\n    var newElement = $(selector).clone(true);\n    var total = $('#id_' + type + '-TOTAL_FORMS').val();\n    newElement.find(':input').each(function() {\n        var name = $(this).attr('name').replace('-' + (total-1) + '-','-' + total + '-');\n        var id = 'id_' + name;\n        $(this).attr({'name': name, 'id': id}).val('').removeAttr('checked');\n    });\n    newElement.find('label').each(function() {\n        var newFor = $(this).attr('for').replace('-' + (total-1) + '-','-' + total + '-');\n        $(this).attr('for', newFor);\n    });\n    total++;\n    $('#id_' + type + '-TOTAL_FORMS').val(total);\n    $(selector).after(newElement);\n}\n</code>", "<code>cloneMore</code>", "<code>selector</code>", "<code>type</code>", "<code>selector</code>", "<code>div.table:last</code>", "<code>table</code>", "<code>:last</code>", "<code>selector</code>", "<code>type</code>", "<code>management_form</code>", "<code>TOTAL_FORMS</code>", "<code>Client</code>", "<code>id_clients-TOTAL_FORMS</code>", "<code>id_clients-INITIAL_FORMS</code>", "<code>id_clients-N-fieldname</code>", "<code>N</code>", "<code>0</code>", "<code>type</code>", "<code>cloneMore</code>", "<code>id_clients-(N)-name</code>", "<code>id_clients-(N+1)-name</code>", "<code>TOTAL_FORMS</code>", "<code>prefix</code>", "<code>type</code>", "<code>cloneMore</code>", "<code>empty_form</code>", "<code>&lt;h3&gt;My Services&lt;/h3&gt;\n{{ serviceFormset.management_form }}\n&lt;div id=\"form_set\"&gt;\n    {% for form in serviceFormset.forms %}\n        &lt;table class='no_error'&gt;\n            {{ form.as_table }}\n        &lt;/table&gt;\n    {% endfor %}\n&lt;/div&gt;\n&lt;input type=\"button\" value=\"Add More\" id=\"add_more\"&gt;\n&lt;div id=\"empty_form\" style=\"display:none\"&gt;\n    &lt;table class='no_error'&gt;\n        {{ serviceFormset.empty_form.as_table }}\n    &lt;/table&gt;\n&lt;/div&gt;\n&lt;script&gt;\n    $('#add_more').click(function() {\n        var form_idx = $('#id_form-TOTAL_FORMS').val();\n        $('#form_set').append($('#empty_form').html().replace(/__prefix__/g, form_idx));\n        $('#id_form-TOTAL_FORMS').val(parseInt(form_idx) + 1);\n    });\n&lt;/script&gt;\n</code>", "<code>CompetitorFormSet = modelformset_factory(ProjectCompetitor, formset=CompetitorFormSets)</code>", "<code>ctx['competitor_form_set'] = CompetitorFormSet(request.POST)</code>", "<code>&lt;input&gt;</code>", "<code>&lt;input&gt;</code>", "<code>&lt;input&gt;</code>", "<code>display: none;</code>", "<code>block</code>", "<code>$('table tr.add-row a').click(function() {\n    toSanitize = new Array('id', 'product', 'price', 'type', 'valid_from', 'valid_until');\n    cloneMore('div.formtable table tr.form-row:last', 'form', toSanitize);\n});\n\nfunction cloneMore(selector, type, sanitize) {\n    var newElement = $(selector).clone(true);\n    var total = $('#id_' + type + '-TOTAL_FORMS').val();\n    newElement.find(':input').each(function() {\n        var namePure = $(this).attr('name').replace(type + '-' + (total-1) + '-', '');\n        var name = $(this).attr('name').replace('-' + (total-1) + '-','-' + total + '-');\n        var id = 'id_' + name;\n        $(this).attr({'name': name, 'id': id}).removeAttr('checked');\n\n        if ($.inArray(namePure, sanitize) != -1) {\n            $(this).val('');\n        }\n\n    });\n    newElement.find('label').each(function() {\n        var newFor = $(this).attr('for').replace('-' + (total-1) + '-','-' + total + '-');\n        $(this).attr('for', newFor);\n    });\n    total++;\n    $('#id_' + type + '-TOTAL_FORMS').val(total);\n    $(selector).after(newElement);\n}\n</code>", "<code>function cloneMore(selector, type) {\n    var newElement = $(selector).clone(true);\n    var total = $('#id_' + type + '-TOTAL_FORMS').val();\n    newElement.find(':input').each(function() {\n        var name = $(this).attr('name').replace('-' + (total-1) + '-','-' + total + '-');\n        var id = 'id_' + name;\n\n        if ($(this).attr('type') != 'hidden') {\n            $(this).val('');\n        }\n        $(this).attr({'name': name, 'id': id}).removeAttr('checked');\n    });\n    newElement.find('label').each(function() {\n        var newFor = $(this).attr('for').replace('-' + (total-1) + '-','-' + total + '-');\n        $(this).attr('for', newFor);\n    });\n    total++;\n    $('#id_' + type + '-TOTAL_FORMS').val(total);\n    $(selector).after(newElement);\n}\n</code>", "<code>var newElement = $(selector).clone();\n</code>", "<code>var newElement = $(selector).clone(true);\n</code>", "<code>{% for form in spokenLanguageFormset %}\n    &lt;fieldset class=\"languages-{{forloop.counter0 }} {% if spokenLanguageFormset.initial_forms|length &lt; forloop.counter and forloop.counter != 1 %}hidden-form{% endif %}\"&gt;\n</code>", "<code>addItem: function(e){\n    e.preventDefault();\n    var maxForms = parseInt($(this).closest(\"fieldset\").find(\"[name*='MAX_NUM_FORMS']\").val(), 10);\n    var initialForms = parseInt($(this).closest(\"fieldset\").find(\"[name*='INITIAL_FORMS']\").val(), 10);\n    // check if we can add\n    if (initialForms &lt; maxForms) {\n        $(this).closest(\"fieldset\").find(\"fieldset:hidden\").first().show();\n        if ($(this).closest(\"fieldset\").find(\"fieldset:visible\").length == maxForms ){\n            // here I'm just hiding my 'add' link\n            $(this).closest(\".control-group\").hide();\n        };\n    };\n}\n</code>", "<code>function $(selector, element) {\n    if (!element) {\n        element = document\n    }\n    return element.querySelector(selector)\n}\n\nfunction $$(selector, element) {\n    if (!element) {\n        element = document\n    }\n    return element.querySelectorAll(selector)\n}\n\nfunction hasReachedMaxNum(type, form) {\n    var total = parseInt(form.elements[type + \"-TOTAL_FORMS\"].value);\n    var max = parseInt(form.elements[type + \"-MAX_NUM_FORMS\"].value);\n    return total &gt;= max\n}\n\nfunction cloneMore(element, type, form) {\n    var totalElement = form.elements[type + \"-TOTAL_FORMS\"];\n    total = parseInt(totalElement.value);\n    newElement = element.cloneNode(true);\n    for (var input of $$(\"input\", newElement)) {\n        input.name = input.name.replace(\"-\" + (total - 1) + \"-\", \"-\" + total + \"-\");\n        input.value = null\n    }\n    total++;\n    element.parentNode.insertBefore(newElement, element.nextSibling);\n    totalElement.value = total;\n    return newElement\n}\nvar addChoiceButton = $(\"#add-choice\");\naddChoiceButton.onclick = function() {\n    var choices = $(\"#choices\");\n    var createForm = $(\"#create\");\n    cloneMore(choices.lastElementChild, \"choice_set\", createForm);\n    if (hasReachedMaxNum(\"choice_set\", createForm)) {\n        this.disabled = true\n    }\n};\n</code>", "<code>form</code>", "<code>type</code>", "<code>choices</code>"], "path": "stack.django"}, {"tags": ["django", "forms", "field", "readonly"], "creation_date": 1227812046, "body_markdown": "In a Django form, how do I make a field read-only (or disabled)?\r\n\r\nWhen the form is being used to create a new entry, all fields should be enabled - but when the record is in update mode some fields need to be read-only.\r\n\r\nFor example, when creating a new `Item` model, all fields must be editable, but while updating the record, is there a way to disable the `sku` field so that it is visible, but cannot be edited?\r\n\r\n    class Item(models.Model):\r\n        sku = models.CharField(max_length=50)\r\n        description = models.CharField(max_length=200)\r\n        added_by = models.ForeignKey(User)\r\n\r\n\r\n    class ItemForm(ModelForm):\r\n        class Meta:\r\n            model = Item\r\n            exclude = (&#39;added_by&#39;)\r\n\r\n    def new_item_view(request):\r\n        if request.method == &#39;POST&#39;:\r\n            form = ItemForm(request.POST)\r\n            # Validate and save\r\n        else:\r\n                form = ItemForm()\r\n        # Render the view\r\n\r\nCan class `ItemForm` be reused? What changes would be required in the `ItemForm` or `Item` model class? Would I need to write another class, &quot;`ItemUpdateForm`&quot;, for updating the item?\r\n\r\n    def update_item_view(request):\r\n        if request.method == &#39;POST&#39;:\r\n            form = ItemUpdateForm(request.POST)\r\n            # Validate and save\r\n        else:\r\n            form = ItemUpdateForm()\r\n", "last_edit_date": 1469843882, "up_vote_count": 327, "link": "https://stackoverflow.com/questions/324477/in-a-django-form-how-do-i-make-a-field-readonly-or-disabled-so-that-it-cannot", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1227845363, "answer_id": 325038, "path": "stack.django.answer", "score": 337, "up_vote_count": 339, "is_accepted": true, "last_activity_date": 1469847208, "last_edit_date": 1495542402, "body_markdown": "As pointed out in [this answer][1], Django 1.9 added the [Field.disabled][2] attribute:\r\n\r\n&gt; The disabled boolean argument, when set to True, disables a form field using the disabled HTML attribute so that it won\u2019t be editable by users. Even if a user tampers with the field\u2019s value submitted to the server, it will be ignored in favor of the value from the form\u2019s initial data.\r\n\r\nWith Django 1.8 and earlier, to disable entry on the widget and prevent malicious POST hacks you must scrub the input in addition to setting the `readonly` attribute on the form field:\r\n\r\n    class ItemForm(ModelForm):\r\n        def __init__(self, *args, **kwargs):\r\n            super(ItemForm, self).__init__(*args, **kwargs)\r\n            instance = getattr(self, &#39;instance&#39;, None)\r\n            if instance and instance.pk:\r\n                self.fields[&#39;sku&#39;].widget.attrs[&#39;readonly&#39;] = True\r\n\r\n        def clean_sku(self):\r\n            instance = getattr(self, &#39;instance&#39;, None)\r\n          &#160; if instance and instance.pk:\r\n            &#160; &#160; return instance.sku\r\n          &#160; else:\r\n            &#160; &#160; return self.cleaned_data[&#39;sku&#39;]\r\n\r\nOr, replace `if instance and instance.pk` with another condition indicating you&#39;re editing.  You could also set the attribute `disabled` on the input field, instead of `readonly`.\r\n\r\nThe `clean_sku` function will ensure that the `readonly` value won&#39;t be overridden by a `POST`.\r\n\r\nOtherwise, there is no built-in Django form field which will render a value while rejecting bound input data.  If this is what you desire, you should instead create a separate `ModelForm` that excludes the uneditable field(s), and just print them inside your template.\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/324477/in-a-django-form-how-do-i-make-a-field-readonly-or-disabled-so-that-it-cannot/34538169#34538169\r\n  [2]: https://docs.djangoproject.com/en/1.9/ref/forms/fields/#disabled"}, {"tags": [], "down_vote_count": 0, "creation_date": 1228152304, "answer_id": 331550, "path": "stack.django.answer", "score": 90, "up_vote_count": 90, "is_accepted": false, "last_activity_date": 1397066290, "last_edit_date": 1397066290, "body_markdown": "Setting READONLY on widget only makes the input in the browser read-only. Adding a clean_sku which returns instance.sku ensures the field value will not change on form level.\r\n\r\n    def clean_sku(self):\r\n        if self.instance: \r\n            return self.instance.sku\r\n        else: \r\n            return self.fields[&#39;sku&#39;]\r\n\r\nThis way you can use model&#39;s (unmodified save) and aviod getting the field required error."}, {"tags": [], "down_vote_count": 0, "creation_date": 1252972067, "answer_id": 1424453, "path": "stack.django.answer", "score": 47, "up_vote_count": 47, "is_accepted": false, "last_activity_date": 1399308977, "last_edit_date": 1399308977, "body_markdown": "To make this work for a ForeignKey field, a few changes need to be made.  Firstly, the SELECT HTML tag does not have the readonly attribute.  We need to use disabled=&quot;disabled&quot; instead.  However, then the browser doesn&#39;t send any form data back for that field.  So we need to set that field to not be required so that the field validates correctly.  We then need to reset the value back to what it used to be so it&#39;s not set to blank.  \r\n\r\nSo for foreign keys you will need to do something like:\r\n\r\n    class ItemForm(ModelForm):\r\n\r\n        def __init__(self, *args, **kwargs):\r\n            super(ItemForm, self).__init__(*args, **kwargs)\r\n            instance = getattr(self, &#39;instance&#39;, None)\r\n            if instance and instance.id:\r\n                self.fields[&#39;sku&#39;].required = False\r\n                self.fields[&#39;sku&#39;].widget.attrs[&#39;disabled&#39;] = &#39;disabled&#39;\r\n        \r\n        def clean_sku(self):\r\n            # As shown in the above answer.\r\n            instance = getattr(self, &#39;instance&#39;, None)\r\n            if instance:\r\n                return instance.sku\r\n            else:\r\n                return self.cleaned_data.get(&#39;sku&#39;, None)\r\n\r\nThis way the browser won&#39;t let the user change the field, and will always POST as it it was left blank.  We then override the clean method to set the field&#39;s value to be what was originally in the instance."}, {"tags": [], "down_vote_count": 5, "creation_date": 1294668182, "answer_id": 4647579, "path": "stack.django.answer", "score": 21, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1463336762, "last_edit_date": 1463336762, "body_markdown": "For Django 1.2+, you can override the field like so:\r\n\r\n    sku = forms.CharField(widget = forms.TextInput(attrs={&#39;readonly&#39;:&#39;readonly&#39;}))\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1299617494, "answer_id": 5238191, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1299617494, "body_markdown": "I ran across a similar problem. \r\nIt looks like I was able to solve it by defining a &quot;get_readonly_fields&quot; method in my ModelAdmin class.\r\n\r\nSomething like this:\r\n\r\n    # In the admin.py file\r\n    \r\n    class ItemAdmin(admin.ModelAdmin):\r\n    \r\n        def get_readonly_display(self, request, obj=None):\r\n            if obj:\r\n                return [&#39;sku&#39;]\r\n            else:\r\n                return []\r\n\r\n\r\nThe nice thing is that `obj` will be None when you are adding a new Item, or it will be the object being edited when you are changing an existing Item.\r\n\r\nget_readonly_display is documented here:\r\nhttp://docs.djangoproject.com/en/1.2/ref/contrib/admin/#modeladmin-methods\r\n\r\n\r\n\r\n\r\n  [1]: http://docs.djangoproject.com/en/1.2/ref/contrib/admin/#modeladmin-methods"}, {"tags": [], "down_vote_count": 0, "creation_date": 1299727690, "answer_id": 5255112, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1463336856, "last_edit_date": 1495540519, "body_markdown": "As a useful addition to [Humphrey&#39;s post][1], I had some issues with django-reversion, because it still registered disabled fields as &#39;changed&#39;. The following code fixes the problem.\r\n\r\n    class ItemForm(ModelForm):\r\n\r\n        def __init__(self, *args, **kwargs):\r\n            super(ItemForm, self).__init__(*args, **kwargs)\r\n            instance = getattr(self, &#39;instance&#39;, None)\r\n            if instance and instance.id:\r\n                self.fields[&#39;sku&#39;].required = False\r\n                self.fields[&#39;sku&#39;].widget.attrs[&#39;disabled&#39;] = &#39;disabled&#39;\r\n\r\n        def clean_sku(self):\r\n            # As shown in the above answer.\r\n            instance = getattr(self, &#39;instance&#39;, None)\r\n            if instance:\r\n                try:\r\n                    self.changed_data.remove(&#39;sku&#39;)\r\n                except ValueError, e:\r\n                    pass\r\n                return instance.sku\r\n            else:\r\n                return self.cleaned_data.get(&#39;sku&#39;, None)\r\n\r\n  [1]: https://stackoverflow.com/questions/324477/in-a-django-form-how-do-i-make-a-field-readonly-or-disabled-so-that-it-cannot/1424453#1424453\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1300262943, "answer_id": 5322503, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1463336891, "last_edit_date": 1463336891, "body_markdown": "One simple option is to just type `form.instance.fieldName` in the template instead of `form.fieldName`.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1305302760, "answer_id": 5994681, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1463336964, "last_edit_date": 1495542899, "body_markdown": "As I can&#39;t yet comment ([muhuk&#39;s solution][1]), I&#39;ll response as a separate answer. This is a complete code example, that worked for me:\r\n\r\n    def clean_sku(self):\r\n      if self.instance and self.instance.pk:\r\n        return self.instance.sku\r\n      else:\r\n        return self.cleaned_data[&#39;sku&#39;]\r\n\r\n  [1]: https://stackoverflow.com/questions/324477/in-a-django-form-how-do-i-make-a-field-readonly-or-disabled-so-that-it-cannot/331550#331550\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1311335663, "answer_id": 6789609, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1463337027, "last_edit_date": 1463337027, "body_markdown": "I made a MixIn class which you may inherit to be able to add a read_only iterable field which will disable and secure fields on the non-first edit:\r\n\r\n(Based on Daniel&#39;s and Muhuk&#39;s answers)\r\n\r\n    from django import forms\r\n    from django.db.models.manager import Manager\r\n\r\n    # I used this instead of lambda expression after scope problems\r\n    def _get_cleaner(form, field):\r\n        def clean_field():\r\n             value = getattr(form.instance, field, None)\r\n             if issubclass(type(value), Manager):\r\n                 value = value.all()\r\n             return value\r\n        return clean_field\r\n\r\n    class ROFormMixin(forms.BaseForm):\r\n        def __init__(self, *args, **kwargs):\r\n            super(ROFormMixin, self).__init__(*args, **kwargs)\r\n            if hasattr(self, &quot;read_only&quot;):\r\n                if self.instance and self.instance.pk:\r\n                    for field in self.read_only:\r\n                        self.fields[field].widget.attrs[&#39;readonly&#39;] = &quot;readonly&quot;\r\n                        setattr(self, &quot;clean_&quot; + field, _get_cleaner(self, field))\r\n\r\n    # Basic usage\r\n    class TestForm(AModelForm, ROFormMixin):\r\n        read_only = (&#39;sku&#39;, &#39;an_other_field&#39;)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1313231118, "answer_id": 7049879, "path": "stack.django.answer", "score": 56, "up_vote_count": 56, "is_accepted": false, "last_activity_date": 1463337140, "last_edit_date": 1495540056, "body_markdown": "[awalker&#39;s answer][1] helped me a lot!\r\n\r\nI&#39;ve changed his example to work with Django 1.3, using [get_readonly_fields][2].\r\n\r\nUsually you should declare something like this in `app/admin.py`:\r\n\r\n    class ItemAdmin(admin.ModelAdmin):\r\n    \t...\r\n    \treadonly_fields = (&#39;url&#39;,)\r\n\r\nI&#39;ve adapted in this way:\r\n\r\n    # In the admin.py file\r\n    class ItemAdmin(admin.ModelAdmin):\r\n        ...\r\n        def get_readonly_fields(self, request, obj=None):\r\n            if obj:\r\n                return [&#39;url&#39;]\r\n            else:\r\n                return []\r\n\r\nAnd it works fine. Now if you add an Item, the `url` field is read-write, but on change it becomes read-only.\r\n\r\n  [1]: https://stackoverflow.com/questions/324477/in-a-django-form-how-do-i-make-a-field-readonly-or-disabled-so-that-it-cannot/5238191#5238191\r\n  [2]: https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.readonly_fields\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1333114581, "answer_id": 9944067, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1463337361, "last_edit_date": 1495541454, "body_markdown": "Yet again, I am going to offer one more solution :) I was using [Humphrey&#39;s code][1], so this is based off of that.\r\n\r\nHowever, I ran into issues with the field being a ModelChoiceField. Everything would work on the first request. However, if the formset tried to add a new item and failed validation, something was going wrong with the &quot;existing&quot; forms where the SELECTED option was being reset to the default &quot;---------&quot;.\r\n\r\nAnyway, I couldn&#39;t figure out how to fix that. So instead, (and I think this is actually cleaner in the form), I made the fields HiddenInputField(). This just means you have to do a little more work in the template.\r\n\r\nSo the fix for me was to simplify the Form:\r\n\r\n    class ItemForm(ModelForm):\r\n\r\n        def __init__(self, *args, **kwargs):\r\n            super(ItemForm, self).__init__(*args, **kwargs)\r\n            instance = getattr(self, &#39;instance&#39;, None)\r\n            if instance and instance.id:\r\n                self.fields[&#39;sku&#39;].widget=HiddenInput()\r\n\r\nAnd then in the template, you&#39;ll need to do some [manual looping of the formset][2].\r\n\r\nSo, in this case you would do something like this in the template:\r\n\r\n    &lt;div&gt;\r\n        {{ form.instance.sku }} &lt;!-- This prints the value --&gt;\r\n        {{ form }} &lt;!-- Prints form normally, and makes the hidden input --&gt;\r\n    &lt;/div&gt;\r\n\r\nThis worked a little better for me and with less form manipulation.\r\n\r\n  [1]: https://stackoverflow.com/questions/324477/in-a-django-form-how-do-i-make-a-field-readonly-or-disabled-so-that-it-cannot/1424453#1424453\r\n  [2]: https://docs.djangoproject.com/en/1.3//topics/forms/modelforms/#using-the-formset-in-the-template\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1339796652, "answer_id": 11058596, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1463337385, "last_edit_date": 1463337385, "body_markdown": "For the Admin version, I think this is a more compact way if you have more than one field:\r\n\r\n    def get_readonly_fields(self, request, obj=None):\r\n        skips = (&#39;sku&#39;, &#39;other_field&#39;)\r\n        fields = super(ItemAdmin, self).get_readonly_fields(request, obj)\r\n\r\n        if not obj:\r\n            return [field for field in fields if not field in skips]\r\n        return fields\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1346755836, "answer_id": 12261941, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1463337539, "last_edit_date": 1495542899, "body_markdown": "Here is a slightly more involved version, based on [christophe31&#39;s answer][1]. It does not rely on the &quot;readonly&quot; attribute. This makes its problems, like select boxes still being changeable and datapickers still popping up, go away.\r\n\r\nInstead, it wraps the form fields widget in a readonly widget, thus making the form still validate. The content of the original widget is displayed inside `&lt;span class=&quot;hidden&quot;&gt;&lt;/span&gt;` tags. If the widget has a `render_readonly()` method it uses that as the visible text, otherwise it parses the HTML of the original widget and tries to guess the best representation.\r\n\r\n    def make_readonly(form):\r\n        &quot;&quot;&quot;\r\n        Makes all fields on the form readonly and prevents it from POST hacks.\r\n        &quot;&quot;&quot;\r\n        \r\n        def _get_cleaner(_form, field):\r\n            def clean_field():\r\n                return getattr(_form.instance, field, None)\r\n            return clean_field\r\n    \r\n        for field_name in form.fields.keys():\r\n            form.fields[field_name].widget = ReadOnlyWidget(\r\n                initial_widget=form.fields[field_name].widget)\r\n            setattr(form, &quot;clean_&quot; + field_name, \r\n                    _get_cleaner(form, field_name))\r\n            \r\n        form.is_readonly = True\r\n        \r\n    class ReadOnlyWidget(f.Select):\r\n        &quot;&quot;&quot;\r\n        Renders the content of the initial widget in a hidden &lt;span&gt;. If the\r\n        initial widget has a ``render_readonly()`` method it uses that as display\r\n        text, otherwise it tries to guess by parsing the html of the initial widget.\r\n        &quot;&quot;&quot;\r\n        \r\n        def __init__(self, initial_widget, *args, **kwargs):\r\n            self.initial_widget = initial_widget\r\n            super(ReadOnlyWidget, self).__init__(*args, **kwargs)\r\n            \r\n        def render(self, *args, **kwargs):\r\n            def guess_readonly_text(original_content):\r\n                root = etree.fromstring(&quot;&lt;span&gt;%s&lt;/span&gt;&quot; % original_content)\r\n                \r\n                for element in root:\r\n                    if element.tag == &#39;input&#39;:\r\n                        return element.get(&#39;value&#39;)\r\n                    \r\n                    if element.tag == &#39;select&#39;:\r\n                        for option in element:\r\n                            if option.get(&#39;selected&#39;):\r\n                                return option.text\r\n                            \r\n                    if element.tag == &#39;textarea&#39;:\r\n                        return element.text\r\n                \r\n                return &quot;N/A&quot;\r\n                \r\n            original_content = self.initial_widget.render(*args, **kwargs)\r\n            try:\r\n                readonly_text = self.initial_widget.render_readonly(*args, **kwargs)\r\n            except AttributeError:\r\n                readonly_text = guess_readonly_text(original_content)\r\n                \r\n            return mark_safe(&quot;&quot;&quot;&lt;span class=&quot;hidden&quot;&gt;%s&lt;/span&gt;%s&quot;&quot;&quot; % (\r\n                original_content, readonly_text))\r\n\r\n    # Usage example 1.\r\n    self.fields[&#39;my_field&#39;].widget = ReadOnlyWidget(self.fields[&#39;my_field&#39;].widget)\r\n    \r\n    # Usage example 2.\r\n    form = MyForm()\r\n    make_readonly(form)\r\n\r\n  [1]: https://stackoverflow.com/questions/324477/in-a-django-form-how-do-i-make-a-field-readonly-or-disabled-so-that-it-cannot/6789609#6789609\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1362051612, "answer_id": 15134622, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1362051987, "last_edit_date": 1362051987, "body_markdown": "I&#39;ve just created the simplest possible widget for a readonly field - I don&#39;t really see why forms don&#39;t have this already:\r\n\r\n    class ReadOnlyWidget(widgets.Widget):\r\n        &quot;&quot;&quot;Some of these values are read only - just a bit of text...&quot;&quot;&quot;\r\n        def render(self, _, value, attrs=None):\r\n            return value\r\n\r\nIn the form:\r\n\r\n    my_read_only = CharField(widget=ReadOnlyWidget())\r\n\r\nVery simple - and gets me just output. Handy in a formset with a bunch of read only values.\r\nOf course - you could also be a bit more clever and give it a div with the attrs so you can append classes to it."}, {"tags": [], "down_vote_count": 0, "creation_date": 1385566844, "answer_id": 20246739, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1385588331, "last_edit_date": 1385588331, "body_markdown": "Two more (similar) approaches with one generalized example:\r\n\r\n 1) first approach - removing field in save() method, e.g. (not tested ;) ):\r\n     \r\n    def save(self, *args, **kwargs):\r\n        for fname in self.readonly_fields:\r\n            if fname in self.cleaned_data:\r\n                del self.cleaned_data[fname]\r\n        return super(&lt;form-name&gt;, self).save(*args,**kwargs)\r\n\r\n 2) second approach - reset field to initial value in clean method:\r\n\r\n    def clean_&lt;fieldname&gt;(self):\r\n        return self.initial[&lt;fieldname&gt;] # or getattr(self.instance, fieldname)\r\n\r\nBased on second approach I generalized it like this:\r\n\r\n    from functools                 import partial\r\n\r\n    class &lt;Form-name&gt;(...):\r\n    \r\n        def __init__(self, ...):\r\n            ...\r\n            super(&lt;Form-name&gt;, self).__init__(*args, **kwargs)\r\n            ...\r\n            for i, (fname, field) in enumerate(self.fields.iteritems()):\r\n                if fname in self.readonly_fields:\r\n                    field.widget.attrs[&#39;readonly&#39;] = &quot;readonly&quot;\r\n                    field.required = False\r\n                    # set clean method to reset value back\r\n                    clean_method_name = &quot;clean_%s&quot; % fname\r\n                    assert clean_method_name not in dir(self)\r\n                    setattr(self, clean_method_name, partial(self._clean_for_readonly_field, fname=fname))\r\n\r\n        def _clean_for_readonly_field(self, fname):\r\n            &quot;&quot;&quot; will reset value to initial - nothing will be changed \r\n                needs to be added dynamically - partial, see init_fields\r\n            &quot;&quot;&quot;\r\n            return self.initial[fname] # or getattr(self.instance, fieldname)\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1391355897, "answer_id": 21512530, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1392153426, "last_edit_date": 1392153426, "body_markdown": "Is this the simplest way?\r\n\r\nRight in a view code something like this: \r\n\r\n    def resume_edit(request, r_id):\r\n        .....    \r\n        r = Resume.get.object(pk=r_id)\r\n        resume = ResumeModelForm(instance=r)\r\n        .....\r\n        resume.fields[&#39;email&#39;].widget.attrs[&#39;readonly&#39;] = True \r\n        .....\r\n        return render(request, &#39;resumes/resume.html&#39;, context)\r\n\r\nIt works fine!\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1391914965, "answer_id": 21654713, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1391914965, "body_markdown": "I was going into the same problem so I created a Mixin that seems to work for my use cases.\r\n\r\n    class ReadOnlyFieldsMixin(object):\r\n        readonly_fields =()\r\n    \r\n        def __init__(self, *args, **kwargs):\r\n            super(ReadOnlyFieldsMixin, self).__init__(*args, **kwargs)\r\n            for field in (field for name, field in self.fields.iteritems() if name in self.readonly_fields):\r\n                field.widget.attrs[&#39;disabled&#39;] = &#39;true&#39;\r\n                field.required = False\r\n    \r\n        def clean(self):\r\n            cleaned_data = super(ReadOnlyFieldsMixin,self).clean()\r\n            for field in self.readonly_fields:\r\n               cleaned_data[field] = getattr(self.instance, field)\r\n    \r\n            return cleaned_data\r\n\r\n\r\nUsage, just define which ones must be read only:\r\n\r\n    class MyFormWithReadOnlyFields(ReadOnlyFieldsMixin, MyForm):\r\n        readonly_fields = (&#39;field1&#39;, &#39;field2&#39;, &#39;fieldx&#39;)\r\n    "}, {"tags": [], "down_vote_count": 0, "creation_date": 1427179060, "answer_id": 29226377, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1427179060, "body_markdown": "If you are using Django admin, here is the simplest solution.\r\n\r\n\r\n    class ReadonlyFieldsMixin(object):\r\n        def get_readonly_fields(self, request, obj=None):\r\n            if obj:\r\n                return super(ReadonlyFieldsMixin, self).get_readonly_fields(request, obj)\r\n            else:\r\n                return tuple()\r\n    \r\n    class MyAdmin(ReadonlyFieldsMixin, ModelAdmin):\r\n        readonly_fields = (&#39;sku&#39;,)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1430417720, "answer_id": 29974906, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1463337627, "last_edit_date": 1463337627, "body_markdown": "I think your best option would just be to include the readonly attribute in your template rendered in a `&lt;span&gt;` or `&lt;p&gt;` rather than include it in the form if it&#39;s readonly.\r\n\r\nForms are for collecting data, not displaying it. That being said, the options to display in a `readonly` widget and scrub POST data are fine solutions.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1451514120, "answer_id": 34538169, "path": "stack.django.answer", "score": 113, "up_vote_count": 113, "is_accepted": false, "last_activity_date": 1509473134, "last_edit_date": 1509473134, "body_markdown": "Django 1.9 added the Field.disabled attribute: https://docs.djangoproject.com/en/1.9/ref/forms/fields/#disabled\r\n\r\n&gt; The disabled boolean argument, when set to True, disables a form field using the disabled HTML attribute so that it won\u2019t be editable by users. Even if a user tampers with the field\u2019s value submitted to the server, it will be ignored in favor of the value from the form\u2019s initial data.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1461159990, "answer_id": 36745852, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1463337769, "last_edit_date": 1495541913, "body_markdown": "Based on [Yamikep&#39;s answer][1], I found a better and very simple solution which also handles `ModelMultipleChoiceField` fields.\r\n\r\nRemoving field from `form.cleaned_data` prevents fields from being saved:\r\n\r\n    class ReadOnlyFieldsMixin(object):\r\n        readonly_fields = ()\r\n\r\n        def __init__(self, *args, **kwargs):\r\n            super(ReadOnlyFieldsMixin, self).__init__(*args, **kwargs)\r\n            for field in (field for name, field in self.fields.iteritems() if\r\n                          name in self.readonly_fields):\r\n                field.widget.attrs[&#39;disabled&#39;] = &#39;true&#39;\r\n                field.required = False\r\n\r\n        def clean(self):\r\n            for f in self.readonly_fields:\r\n                self.cleaned_data.pop(f, None)\r\n            return super(ReadOnlyFieldsMixin, self).clean()\r\n\r\nUsage:\r\n\r\n    class MyFormWithReadOnlyFields(ReadOnlyFieldsMixin, MyForm):\r\n        readonly_fields = (&#39;field1&#39;, &#39;field2&#39;, &#39;fieldx&#39;)\r\n\r\n  [1]: https://stackoverflow.com/questions/324477/in-a-django-form-how-do-i-make-a-field-readonly-or-disabled-so-that-it-cannot/21654713#21654713\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1471601591, "answer_id": 39036431, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1471601591, "body_markdown": "if your need multiple read-only fields.you can use any of methods given below \r\n\r\n**method 1**\r\n\r\n    class ItemForm(ModelForm):\r\n        readonly = (&#39;sku&#39;,)\r\n    \r\n        def __init__(self, *arg, **kwrg):\r\n            super(ItemForm, self).__init__(*arg, **kwrg)\r\n            for x in self.readonly:\r\n                self.fields[x].widget.attrs[&#39;disabled&#39;] = &#39;disabled&#39;\r\n    \r\n        def clean(self):\r\n            data = super(ItemForm, self).clean()\r\n            for x in self.readonly:\r\n                data[x] = getattr(self.instance, x)\r\n            return data\r\n\r\n**method 2** \r\n\r\ninheritance method\r\n\r\n\r\n    class AdvancedModelForm(ModelForm):\r\n\r\n    \r\n        def __init__(self, *arg, **kwrg):\r\n            super(AdvancedModelForm, self).__init__(*arg, **kwrg)\r\n            if hasattr(self, &#39;readonly&#39;):\r\n                for x in self.readonly:\r\n                    self.fields[x].widget.attrs[&#39;disabled&#39;] = &#39;disabled&#39;\r\n    \r\n        def clean(self):\r\n            data = super(AdvancedModelForm, self).clean()\r\n            if hasattr(self, &#39;readonly&#39;):\r\n                for x in self.readonly:\r\n                    data[x] = getattr(self.instance, x)\r\n            return data\r\n    \r\n    \r\n    class ItemForm(AdvancedModelForm):\r\n        readonly = (&#39;sku&#39;,)\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1500910498, "answer_id": 45284664, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1500910498, "body_markdown": "How I do it with Django 1.11 : \r\n\r\n    class ItemForm(ModelForm):\r\n        disabled_fields = (&#39;added_by&#39;,)\r\n\r\n        class Meta:\r\n            model = Item\r\n            fields = &#39;__all__&#39;\r\n\r\n        def __init__(self, *args, **kwargs):\r\n            super(ItemForm, self).__init__(*args, **kwargs)\r\n            for field in self.disabled_fields:\r\n                self.fields[field].disabled = True\r\n "}, {"tags": [], "down_vote_count": 1, "creation_date": 1502671014, "answer_id": 45666083, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1502791667, "last_edit_date": 1502791667, "body_markdown": "Set blank=True for &#39;sku&#39; CharField in models.py. [Doc][1]\r\n\r\nmodels.py\r\n\r\n    class Item(models.Model):\r\n        sku = models.CharField(max_length=50, default=&#39;sku&#39;, blank=True)\r\n        description = models.CharField(max_length=200)\r\n        added_by = models.ForeignKey(User)\r\n\r\nforms.py\r\n\r\n    class ItemForm(ModelForm):\r\n        class Meta:\r\n            model = Item\r\n            fields = (&#39;sku&#39;, &#39;description&#39;)\r\n\r\nviews.py\r\n\r\n    def new_item_view(request):\r\n        if request.method == &#39;POST&#39;:\r\n            form = ItemForm(request.POST)\r\n            if form.is_valid():\r\n                itemf = form.save(commit=False)\r\n                itemf.added_by = request.user\r\n                itemf.save()\r\n\r\n                return redirect(&#39;somewhere_url_name&#39;)\r\n        else:\r\n            form = ItemForm()\r\n       \r\n        return render(request, &#39;template.html&#39;, {&#39;form&#39;: form})\r\n\r\n    def update_item_view(request, pk):\r\n        item = get_object_or_404(Item, pk=pk)\r\n        form = ItemForm(request.POST, instance=item)\r\n        if request.method == &#39;POST&#39;:\r\n           if form.is_valid():\r\n                itemf = form.save(commit=False)\r\n                itemf.save()\r\n\r\n                return redirect(&#39;somewhere_url_name&#39;)\r\n        else:\r\n            form = ItemForm(instance=item)\r\n       \r\n        item_edit_flag = True\r\n        return render(request, &#39;template.html&#39;, {&#39;form&#39;: form, &#39;item&#39;: item, &#39;item_ef&#39;: item_edit_flag})\r\n\r\nin template\r\n\r\n    ...\r\n    &lt;form method=&quot;POST&quot;&gt;\r\n        ...\r\n        &lt;div class=&quot;form-sku&quot;&gt;\r\n            {% if item_ef %}                    #edit item\r\n                {{ item.sku }}\r\n            {% else %}                          #new item\r\n                {{ form.sku }}                  \r\n            {% endif %}\r\n        &lt;/div&gt;\r\n        ...\r\n    &lt;/form&gt;\r\n    ...\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.11/ref/models/fields/#blank"}, {"tags": [], "down_vote_count": 0, "creation_date": 1518087177, "answer_id": 48683742, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1518087177, "body_markdown": "I solved this problem like this:\r\n\r\n        class UploadFileForm(forms.ModelForm):\r\n         class Meta:\r\n          model = FileStorage\r\n          fields = &#39;__all__&#39;\r\n          widgets = {&#39;patient&#39;: forms.HiddenInput()}\r\n\r\nin views:\r\n\r\n    form = UploadFileForm(request.POST, request.FILES, instance=patient, initial={&#39;patient&#39;: patient})\r\n\r\n\r\nIt&#39;s all."}], "title": "In a Django form, how do I make a field readonly (or disabled) so that it cannot be edited?", "view_count": 184094, "answer_count": 25, "code_snippet": ["<code>Item</code>", "<code>sku</code>", "<code>class Item(models.Model):\n    sku = models.CharField(max_length=50)\n    description = models.CharField(max_length=200)\n    added_by = models.ForeignKey(User)\n\n\nclass ItemForm(ModelForm):\n    class Meta:\n        model = Item\n        exclude = ('added_by')\n\ndef new_item_view(request):\n    if request.method == 'POST':\n        form = ItemForm(request.POST)\n        # Validate and save\n    else:\n            form = ItemForm()\n    # Render the view\n</code>", "<code>ItemForm</code>", "<code>ItemForm</code>", "<code>Item</code>", "<code>ItemUpdateForm</code>", "<code>def update_item_view(request):\n    if request.method == 'POST':\n        form = ItemUpdateForm(request.POST)\n        # Validate and save\n    else:\n        form = ItemUpdateForm()\n</code>", "<code>readonly</code>", "<code>class ItemForm(ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(ItemForm, self).__init__(*args, **kwargs)\n        instance = getattr(self, 'instance', None)\n        if instance and instance.pk:\n            self.fields['sku'].widget.attrs['readonly'] = True\n\n    def clean_sku(self):\n        instance = getattr(self, 'instance', None)\n      \u00a0 if instance and instance.pk:\n        \u00a0 \u00a0 return instance.sku\n      \u00a0 else:\n        \u00a0 \u00a0 return self.cleaned_data['sku']\n</code>", "<code>if instance and instance.pk</code>", "<code>disabled</code>", "<code>readonly</code>", "<code>clean_sku</code>", "<code>readonly</code>", "<code>POST</code>", "<code>ModelForm</code>", "<code>clean_description</code>", "<code>disabled</code>", "<code>Field.disabled</code>", "<code>True</code>", "<code>Field</code>", "<code>clean</code>", "<code>disabled = True</code>", "<code>disabled=True</code>", "<code>def clean_sku(self):\n    if self.instance: \n        return self.instance.sku\n    else: \n        return self.fields['sku']\n</code>", "<code>app/admin.py</code>", "<code>class ItemAdmin(admin.ModelAdmin):\n    ...\n    readonly_fields = ('url',)\n</code>", "<code># In the admin.py file\nclass ItemAdmin(admin.ModelAdmin):\n    ...\n    def get_readonly_fields(self, request, obj=None):\n        if obj:\n            return ['url']\n        else:\n            return []\n</code>", "<code>url</code>", "<code>class ItemForm(ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        super(ItemForm, self).__init__(*args, **kwargs)\n        instance = getattr(self, 'instance', None)\n        if instance and instance.id:\n            self.fields['sku'].required = False\n            self.fields['sku'].widget.attrs['disabled'] = 'disabled'\n\n    def clean_sku(self):\n        # As shown in the above answer.\n        instance = getattr(self, 'instance', None)\n        if instance:\n            return instance.sku\n        else:\n            return self.cleaned_data.get('sku', None)\n</code>", "<code>TabularInline</code>", "<code>attrs</code>", "<code>widget</code>", "<code>sku = forms.CharField(widget = forms.TextInput(attrs={'readonly':'readonly'}))\n</code>", "<code>Field</code>", "<code>disabled</code>", "<code>from django import forms\nfrom django.db.models.manager import Manager\n\n# I used this instead of lambda expression after scope problems\ndef _get_cleaner(form, field):\n    def clean_field():\n         value = getattr(form.instance, field, None)\n         if issubclass(type(value), Manager):\n             value = value.all()\n         return value\n    return clean_field\n\nclass ROFormMixin(forms.BaseForm):\n    def __init__(self, *args, **kwargs):\n        super(ROFormMixin, self).__init__(*args, **kwargs)\n        if hasattr(self, \"read_only\"):\n            if self.instance and self.instance.pk:\n                for field in self.read_only:\n                    self.fields[field].widget.attrs['readonly'] = \"readonly\"\n                    setattr(self, \"clean_\" + field, _get_cleaner(self, field))\n\n# Basic usage\nclass TestForm(AModelForm, ROFormMixin):\n    read_only = ('sku', 'an_other_field')\n</code>", "<code>class ReadOnlyWidget(widgets.Widget):\n    \"\"\"Some of these values are read only - just a bit of text...\"\"\"\n    def render(self, _, value, attrs=None):\n        return value\n</code>", "<code>my_read_only = CharField(widget=ReadOnlyWidget())\n</code>", "<code>unicode(value)</code>", "<code># In the admin.py file\n\nclass ItemAdmin(admin.ModelAdmin):\n\n    def get_readonly_display(self, request, obj=None):\n        if obj:\n            return ['sku']\n        else:\n            return []\n</code>", "<code>obj</code>", "<code>class ItemForm(ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        super(ItemForm, self).__init__(*args, **kwargs)\n        instance = getattr(self, 'instance', None)\n        if instance and instance.id:\n            self.fields['sku'].required = False\n            self.fields['sku'].widget.attrs['disabled'] = 'disabled'\n\n    def clean_sku(self):\n        # As shown in the above answer.\n        instance = getattr(self, 'instance', None)\n        if instance:\n            try:\n                self.changed_data.remove('sku')\n            except ValueError, e:\n                pass\n            return instance.sku\n        else:\n            return self.cleaned_data.get('sku', None)\n</code>", "<code>def clean_sku(self):\n  if self.instance and self.instance.pk:\n    return self.instance.sku\n  else:\n    return self.cleaned_data['sku']\n</code>", "<code>class ReadOnlyFieldsMixin(object):\n    readonly_fields =()\n\n    def __init__(self, *args, **kwargs):\n        super(ReadOnlyFieldsMixin, self).__init__(*args, **kwargs)\n        for field in (field for name, field in self.fields.iteritems() if name in self.readonly_fields):\n            field.widget.attrs['disabled'] = 'true'\n            field.required = False\n\n    def clean(self):\n        cleaned_data = super(ReadOnlyFieldsMixin,self).clean()\n        for field in self.readonly_fields:\n           cleaned_data[field] = getattr(self.instance, field)\n\n        return cleaned_data\n</code>", "<code>class MyFormWithReadOnlyFields(ReadOnlyFieldsMixin, MyForm):\n    readonly_fields = ('field1', 'field2', 'fieldx')\n</code>", "<code>class ItemForm(ModelForm):\n\n    def __init__(self, *args, **kwargs):\n        super(ItemForm, self).__init__(*args, **kwargs)\n        instance = getattr(self, 'instance', None)\n        if instance and instance.id:\n            self.fields['sku'].widget=HiddenInput()\n</code>", "<code>&lt;div&gt;\n    {{ form.instance.sku }} &lt;!-- This prints the value --&gt;\n    {{ form }} &lt;!-- Prints form normally, and makes the hidden input --&gt;\n&lt;/div&gt;\n</code>", "<code>def save(self, *args, **kwargs):\n    for fname in self.readonly_fields:\n        if fname in self.cleaned_data:\n            del self.cleaned_data[fname]\n    return super(&lt;form-name&gt;, self).save(*args,**kwargs)\n</code>", "<code>def clean_&lt;fieldname&gt;(self):\n    return self.initial[&lt;fieldname&gt;] # or getattr(self.instance, fieldname)\n</code>", "<code>from functools                 import partial\n\nclass &lt;Form-name&gt;(...):\n\n    def __init__(self, ...):\n        ...\n        super(&lt;Form-name&gt;, self).__init__(*args, **kwargs)\n        ...\n        for i, (fname, field) in enumerate(self.fields.iteritems()):\n            if fname in self.readonly_fields:\n                field.widget.attrs['readonly'] = \"readonly\"\n                field.required = False\n                # set clean method to reset value back\n                clean_method_name = \"clean_%s\" % fname\n                assert clean_method_name not in dir(self)\n                setattr(self, clean_method_name, partial(self._clean_for_readonly_field, fname=fname))\n\n    def _clean_for_readonly_field(self, fname):\n        \"\"\" will reset value to initial - nothing will be changed \n            needs to be added dynamically - partial, see init_fields\n        \"\"\"\n        return self.initial[fname] # or getattr(self.instance, fieldname)\n</code>", "<code>form.instance.fieldName</code>", "<code>form.fieldName</code>", "<code>class ItemForm(ModelForm):\n    readonly = ('sku',)\n\n    def __init__(self, *arg, **kwrg):\n        super(ItemForm, self).__init__(*arg, **kwrg)\n        for x in self.readonly:\n            self.fields[x].widget.attrs['disabled'] = 'disabled'\n\n    def clean(self):\n        data = super(ItemForm, self).clean()\n        for x in self.readonly:\n            data[x] = getattr(self.instance, x)\n        return data\n</code>", "<code>class AdvancedModelForm(ModelForm):\n\n\n    def __init__(self, *arg, **kwrg):\n        super(AdvancedModelForm, self).__init__(*arg, **kwrg)\n        if hasattr(self, 'readonly'):\n            for x in self.readonly:\n                self.fields[x].widget.attrs['disabled'] = 'disabled'\n\n    def clean(self):\n        data = super(AdvancedModelForm, self).clean()\n        if hasattr(self, 'readonly'):\n            for x in self.readonly:\n                data[x] = getattr(self.instance, x)\n        return data\n\n\nclass ItemForm(AdvancedModelForm):\n    readonly = ('sku',)\n</code>", "<code>def get_readonly_fields(self, request, obj=None):\n    skips = ('sku', 'other_field')\n    fields = super(ItemAdmin, self).get_readonly_fields(request, obj)\n\n    if not obj:\n        return [field for field in fields if not field in skips]\n    return fields\n</code>", "<code>&lt;span class=\"hidden\"&gt;&lt;/span&gt;</code>", "<code>render_readonly()</code>", "<code>def make_readonly(form):\n    \"\"\"\n    Makes all fields on the form readonly and prevents it from POST hacks.\n    \"\"\"\n\n    def _get_cleaner(_form, field):\n        def clean_field():\n            return getattr(_form.instance, field, None)\n        return clean_field\n\n    for field_name in form.fields.keys():\n        form.fields[field_name].widget = ReadOnlyWidget(\n            initial_widget=form.fields[field_name].widget)\n        setattr(form, \"clean_\" + field_name, \n                _get_cleaner(form, field_name))\n\n    form.is_readonly = True\n\nclass ReadOnlyWidget(f.Select):\n    \"\"\"\n    Renders the content of the initial widget in a hidden &lt;span&gt;. If the\n    initial widget has a ``render_readonly()`` method it uses that as display\n    text, otherwise it tries to guess by parsing the html of the initial widget.\n    \"\"\"\n\n    def __init__(self, initial_widget, *args, **kwargs):\n        self.initial_widget = initial_widget\n        super(ReadOnlyWidget, self).__init__(*args, **kwargs)\n\n    def render(self, *args, **kwargs):\n        def guess_readonly_text(original_content):\n            root = etree.fromstring(\"&lt;span&gt;%s&lt;/span&gt;\" % original_content)\n\n            for element in root:\n                if element.tag == 'input':\n                    return element.get('value')\n\n                if element.tag == 'select':\n                    for option in element:\n                        if option.get('selected'):\n                            return option.text\n\n                if element.tag == 'textarea':\n                    return element.text\n\n            return \"N/A\"\n\n        original_content = self.initial_widget.render(*args, **kwargs)\n        try:\n            readonly_text = self.initial_widget.render_readonly(*args, **kwargs)\n        except AttributeError:\n            readonly_text = guess_readonly_text(original_content)\n\n        return mark_safe(\"\"\"&lt;span class=\"hidden\"&gt;%s&lt;/span&gt;%s\"\"\" % (\n            original_content, readonly_text))\n\n# Usage example 1.\nself.fields['my_field'].widget = ReadOnlyWidget(self.fields['my_field'].widget)\n\n# Usage example 2.\nform = MyForm()\nmake_readonly(form)\n</code>", "<code>ModelMultipleChoiceField</code>", "<code>form.cleaned_data</code>", "<code>class ReadOnlyFieldsMixin(object):\n    readonly_fields = ()\n\n    def __init__(self, *args, **kwargs):\n        super(ReadOnlyFieldsMixin, self).__init__(*args, **kwargs)\n        for field in (field for name, field in self.fields.iteritems() if\n                      name in self.readonly_fields):\n            field.widget.attrs['disabled'] = 'true'\n            field.required = False\n\n    def clean(self):\n        for f in self.readonly_fields:\n            self.cleaned_data.pop(f, None)\n        return super(ReadOnlyFieldsMixin, self).clean()\n</code>", "<code>class MyFormWithReadOnlyFields(ReadOnlyFieldsMixin, MyForm):\n    readonly_fields = ('field1', 'field2', 'fieldx')\n</code>", "<code>def resume_edit(request, r_id):\n    .....    \n    r = Resume.get.object(pk=r_id)\n    resume = ResumeModelForm(instance=r)\n    .....\n    resume.fields['email'].widget.attrs['readonly'] = True \n    .....\n    return render(request, 'resumes/resume.html', context)\n</code>", "<code>class ItemForm(ModelForm):\n    disabled_fields = ('added_by',)\n\n    class Meta:\n        model = Item\n        fields = '__all__'\n\n    def __init__(self, *args, **kwargs):\n        super(ItemForm, self).__init__(*args, **kwargs)\n        for field in self.disabled_fields:\n            self.fields[field].disabled = True\n</code>", "<code>class ReadonlyFieldsMixin(object):\n    def get_readonly_fields(self, request, obj=None):\n        if obj:\n            return super(ReadonlyFieldsMixin, self).get_readonly_fields(request, obj)\n        else:\n            return tuple()\n\nclass MyAdmin(ReadonlyFieldsMixin, ModelAdmin):\n    readonly_fields = ('sku',)\n</code>", "<code>list_editable</code>", "<code>readonly_fields</code>", "<code>&lt;span&gt;</code>", "<code>&lt;p&gt;</code>", "<code>readonly</code>", "<code>    class UploadFileForm(forms.ModelForm):\n     class Meta:\n      model = FileStorage\n      fields = '__all__'\n      widgets = {'patient': forms.HiddenInput()}\n</code>", "<code>form = UploadFileForm(request.POST, request.FILES, instance=patient, initial={'patient': patient})\n</code>", "<code>class Item(models.Model):\n    sku = models.CharField(max_length=50, default='sku', blank=True)\n    description = models.CharField(max_length=200)\n    added_by = models.ForeignKey(User)\n</code>", "<code>class ItemForm(ModelForm):\n    class Meta:\n        model = Item\n        fields = ('sku', 'description')\n</code>", "<code>def new_item_view(request):\n    if request.method == 'POST':\n        form = ItemForm(request.POST)\n        if form.is_valid():\n            itemf = form.save(commit=False)\n            itemf.added_by = request.user\n            itemf.save()\n\n            return redirect('somewhere_url_name')\n    else:\n        form = ItemForm()\n\n    return render(request, 'template.html', {'form': form})\n\ndef update_item_view(request, pk):\n    item = get_object_or_404(Item, pk=pk)\n    form = ItemForm(request.POST, instance=item)\n    if request.method == 'POST':\n       if form.is_valid():\n            itemf = form.save(commit=False)\n            itemf.save()\n\n            return redirect('somewhere_url_name')\n    else:\n        form = ItemForm(instance=item)\n\n    item_edit_flag = True\n    return render(request, 'template.html', {'form': form, 'item': item, 'item_ef': item_edit_flag})\n</code>", "<code>...\n&lt;form method=\"POST\"&gt;\n    ...\n    &lt;div class=\"form-sku\"&gt;\n        {% if item_ef %}                    #edit item\n            {{ item.sku }}\n        {% else %}                          #new item\n            {{ form.sku }}                  \n        {% endif %}\n    &lt;/div&gt;\n    ...\n&lt;/form&gt;\n...\n</code>"], "path": "stack.django"}, {"tags": ["python", "django"], "_childDocuments_": [{"tags": [], "down_vote_count": 5, "creation_date": 1294027687, "answer_id": 4581997, "path": "stack.django.answer", "score": 313, "up_vote_count": 318, "is_accepted": true, "last_activity_date": 1478625694, "last_edit_date": 1495535477, "body_markdown": "    def get_client_ip(request):\r\n        x_forwarded_for = request.META.get(&#39;HTTP_X_FORWARDED_FOR&#39;)\r\n        if x_forwarded_for:\r\n            ip = x_forwarded_for.split(&#39;,&#39;)[0]\r\n        else:\r\n            ip = request.META.get(&#39;REMOTE_ADDR&#39;)\r\n        return ip\r\nMake sure you have reverse proxy (if any) configured correctly (e.g. `mod_rpaf` installed for Apache).\r\n\r\nNote: the above uses the **first** item in `X-Forwarded-For`, but you might want to use the **last** item (e.g., in the case of Heroku: https://stackoverflow.com/questions/18264304/get-clients-real-ip-address-on-heroku#answer-18517550)\r\n\r\n\r\nAnd then just pass the request as argument to it;\r\n\r\n    get_client_ip(request)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1298413035, "answer_id": 5084671, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1316501298, "last_edit_date": 1316501298, "body_markdown": "The simpliest solution (in case you are using fastcgi+nignx) is what itgorilla commented: \r\n\r\n&gt; Thank you for this great question. My fastcgi was not passing the REMOTE_ADDR meta key. **I added the line below in the nginx.conf and fixed the problem: fastcgi_param REMOTE_ADDR $remote_addr;** \u2013 itgorilla\r\n\r\nPs: I added this answer just to make his solution more visible."}, {"tags": [], "down_vote_count": 4, "creation_date": 1305193127, "answer_id": 5976065, "path": "stack.django.answer", "score": 64, "up_vote_count": 68, "is_accepted": false, "last_activity_date": 1305193127, "body_markdown": "Alexander&#39;s answer is great, but lacks the handling of proxies that sometimes return multiple IP&#39;s in the HTTP_X_FORWARDED_FOR header.\r\n\r\nThe real IP is usually at the end of the list, as explained here: http://en.wikipedia.org/wiki/X-Forwarded-For\r\n\r\nThe solution is a simple modification of Alexander&#39;s code:\r\n\r\n    def get_client_ip(request):\r\n        x_forwarded_for = request.META.get(&#39;HTTP_X_FORWARDED_FOR&#39;)\r\n        if x_forwarded_for:\r\n            ip = x_forwarded_for.split(&#39;,&#39;)[-1].strip()\r\n        else:\r\n            ip = request.META.get(&#39;REMOTE_ADDR&#39;)\r\n        return ip"}, {"tags": [], "down_vote_count": 0, "creation_date": 1360572446, "answer_id": 14808613, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1375034091, "last_edit_date": 1375034091, "body_markdown": "I would like to suggest an improvement to yanchenko&#39;s answer.\r\n\r\nInstead of taking the first ip in the X_FORWARDED_FOR list, I take the first one which in not a known internal ip, as some routers don&#39;t respect the protocol, and you can see internal ips as the first value of the list.\r\n\r\n    PRIVATE_IPS_PREFIX = (&#39;10.&#39;, &#39;172.&#39;, &#39;192.&#39;, )\r\n\r\n    def get_client_ip(request):\r\n        &quot;&quot;&quot;get the client ip from the request\r\n        &quot;&quot;&quot;\r\n        remote_address = request.META.get(&#39;REMOTE_ADDR&#39;)\r\n        # set the default value of the ip to be the REMOTE_ADDR if available\r\n        # else None\r\n        ip = remote_address\r\n        # try to get the first non-proxy ip (not a private ip) from the\r\n        # HTTP_X_FORWARDED_FOR\r\n        x_forwarded_for = request.META.get(&#39;HTTP_X_FORWARDED_FOR&#39;)\r\n        if x_forwarded_for:\r\n            proxies = x_forwarded_for.split(&#39;,&#39;)\r\n            # remove the private ips from the beginning\r\n            while (len(proxies) &gt; 0 and\r\n                    proxies[0].startswith(PRIVATE_IPS_PREFIX)):\r\n                proxies.pop(0)\r\n            # take the first ip which is not a private one (of a proxy)\r\n            if len(proxies) &gt; 0:\r\n                ip = proxies[0]\r\n\r\n        return ip\r\n\r\nI hope this helps fellow Googlers who have the same problem."}, {"tags": [], "down_vote_count": 0, "creation_date": 1366846264, "answer_id": 16203978, "path": "stack.django.answer", "score": 161, "up_vote_count": 161, "is_accepted": false, "last_activity_date": 1515975183, "last_edit_date": 1515975183, "body_markdown": "You can use **[django-ipware](https://github.com/un33k/django-ipware)** which supports Python **2** &amp; **3** and handles **IPv4** &amp; **IPv6**.\r\n\r\n**Install:** \r\n\r\n&gt;&gt; pip install django-ipware\r\n\r\n\r\n**Simple Usage:**\r\n\r\n&gt;&gt; To get client&#39;s IP address.\r\n\r\n    # In a view or a middleware where the `request` object is available\r\n\r\n    from ipware import get_client_ip\r\n    ip, is_routable = get_client_ip(request)\r\n    if ip is None:\r\n       # Unable to get the client&#39;s IP address\r\n    else:\r\n        # We got the client&#39;s IP address\r\n        if is_routable:\r\n            # The client&#39;s IP address is publicly routable on the Internet\r\n        else:\r\n            # The client&#39;s IP address is private\r\n\r\n    # Order of precedence is (Public, Private, Loopback, None)\r\n\r\n**Advanced Usage:**\r\n\r\n&gt;&gt; Proxy Count - Django server is behind a fixed number of proxies\r\n\r\n    i, r = get_client_ip(request, proxy_count=1)\r\n\r\n&gt;&gt; Trusted Proxies - Django server is behind one or more known &amp; trusted proxies\r\n\r\n    i, r = get_client_ip(request, proxy_trusted_ips=(&#39;177.2.2.2&#39;))\r\n\r\n    # For multiple proxies, simply add them to the list\r\n    i, r = get_client_ip(request, proxy_trusted_ips=(&#39;177.2.2.2&#39;, &#39;177.3.3.3&#39;))\r\n\r\n    # For proxies with fixed sub-domain and dynamic IP addresses, use partial pattern\r\n    i, r = get_client_ip(request, proxy_trusted_ips=(&#39;177.2.&#39;, &#39;177.3.&#39;))\r\n\r\n\r\n**Note:** read this [notice][1].\r\n\r\n  [1]: https://github.com/un33k/django-ipware#notice"}, {"tags": [], "down_vote_count": 0, "creation_date": 1416196075, "answer_id": 26965205, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1488853217, "last_edit_date": 1488853217, "body_markdown": "In my case none of above works, so I have to check `uwsgi` + `django` source code and pass static param in nginx and see why/how, and below is what I have found.\r\n\r\n**Env info:**  \r\npython version: `2.7.5 `  \r\nDjango version: `(1, 6, 6, &#39;final&#39;, 0)`  \r\nnginx version: `nginx/1.6.0`  \r\nuwsgi: `2.0.7`  \r\n\r\n**Env setting info:**  \r\nnginx as reverse proxy listening at port `80`\r\nuwsgi as upstream unix socket, will response to the request eventually\r\n\r\n**Django config info:**\r\n\r\n    USE_X_FORWARDED_HOST = True # with or without this line does not matter\r\n\r\n**nginx config:**\r\n\r\n    uwsgi_param      X-Real-IP              $remote_addr;\r\n    // uwsgi_param   X-Forwarded-For        $proxy_add_x_forwarded_for;\r\n    // uwsgi_param   HTTP_X_FORWARDED_FOR   $proxy_add_x_forwarded_for;\r\n\r\n    // hardcode for testing\r\n    uwsgi_param      X-Forwarded-For        &quot;10.10.10.10&quot;;\r\n    uwsgi_param      HTTP_X_FORWARDED_FOR   &quot;20.20.20.20&quot;;\r\n\r\n\r\n**getting all the params in django app:**\r\n\r\n    X-Forwarded-For :       10.10.10.10\r\n    HTTP_X_FORWARDED_FOR :  20.20.20.20\r\n\r\n**Conclusion:** \r\n\r\nSo basically, you have to specify exactly the same field/param name in nginx, and use `request.META[field/param]` in django app.\r\n\r\nAnd now you can decide whether to add a middleware (interceptor) or just parse `HTTP_X_FORWARDED_FOR` in certain views."}, {"tags": [], "down_vote_count": 0, "creation_date": 1447658262, "answer_id": 33730161, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1452603048, "last_edit_date": 1452603048, "body_markdown": "The reason the functionality was removed from Django originally was that the header cannot ultimately be trusted. The reason is that it is easy to spoof. For example the recommended way to configure an nginx reverse proxy is to:\r\n\r\n    add_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n    add_header X-Real-Ip       $remote_addr;\r\n\r\nWhen you do:\r\n\r\n    curl -H &#39;X-Forwarded-For: 8.8.8.8, 192.168.1.2&#39; http://192.168.1.3/\r\n\r\nYour nginx in myhost.com will send onwards:\r\n\r\n    X-Forwarded-For: 8.8.8.8, 192.168.1.2, 192.168.1.3\r\n\r\nThe `X-Real-IP` will be the IP of the first previous proxy if you follow the instructions blindly.\r\n\r\nIn case trusting who your users are is an issue, you could try something like `django-xff`: https://pypi.python.org/pypi/django-xff/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1454199762, "answer_id": 35108884, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1454199762, "body_markdown": "I was also missing proxy in above answer. I used `get_ip_address_from_request` from [django_easy_timezones][1].  \r\n\r\n    from easy_timezones.utils import get_ip_address_from_request, is_valid_ip, is_local_ip\r\n    ip = get_ip_address_from_request(request)\r\n    try:\r\n        if is_valid_ip(ip):\r\n            geoip_record = IpRange.objects.by_ip(ip)\r\n    except IpRange.DoesNotExist:\r\n        return None\r\nAnd here is method `get_ip_address_from_request`, IPv4 and IPv6 ready:  \r\n\r\n    def get_ip_address_from_request(request):\r\n        &quot;&quot;&quot; Makes the best attempt to get the client&#39;s real IP or return the loopback &quot;&quot;&quot;\r\n        PRIVATE_IPS_PREFIX = (&#39;10.&#39;, &#39;172.&#39;, &#39;192.&#39;, &#39;127.&#39;)\r\n        ip_address = &#39;&#39;\r\n        x_forwarded_for = request.META.get(&#39;HTTP_X_FORWARDED_FOR&#39;, &#39;&#39;)\r\n        if x_forwarded_for and &#39;,&#39; not in x_forwarded_for:\r\n            if not x_forwarded_for.startswith(PRIVATE_IPS_PREFIX) and is_valid_ip(x_forwarded_for):\r\n                ip_address = x_forwarded_for.strip()\r\n        else:\r\n            ips = [ip.strip() for ip in x_forwarded_for.split(&#39;,&#39;)]\r\n            for ip in ips:\r\n                if ip.startswith(PRIVATE_IPS_PREFIX):\r\n                    continue\r\n                elif not is_valid_ip(ip):\r\n                    continue\r\n                else:\r\n                    ip_address = ip\r\n                    break\r\n        if not ip_address:\r\n            x_real_ip = request.META.get(&#39;HTTP_X_REAL_IP&#39;, &#39;&#39;)\r\n            if x_real_ip:\r\n                if not x_real_ip.startswith(PRIVATE_IPS_PREFIX) and is_valid_ip(x_real_ip):\r\n                    ip_address = x_real_ip.strip()\r\n        if not ip_address:\r\n            remote_addr = request.META.get(&#39;REMOTE_ADDR&#39;, &#39;&#39;)\r\n            if remote_addr:\r\n                if not remote_addr.startswith(PRIVATE_IPS_PREFIX) and is_valid_ip(remote_addr):\r\n                    ip_address = remote_addr.strip()\r\n        if not ip_address:\r\n            ip_address = &#39;127.0.0.1&#39;\r\n        return ip_address\r\n\r\n\r\n  [1]: https://github.com/Miserlou/django-easy-timezones"}, {"tags": [], "down_vote_count": 8, "creation_date": 1470292737, "answer_id": 38760120, "path": "stack.django.answer", "score": -8, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1470292737, "body_markdown": "The most easy solution to this is:\r\n\r\n    from ipaddress import ip_address\r\n\r\nand then use it like:\r\n\r\n    print(get_client_ip(request))"}, {"tags": [], "down_vote_count": 0, "creation_date": 1504073116, "answer_id": 45953050, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1504073116, "body_markdown": "`request.META.get(&#39;REMOTE_ADDR&#39;)` would be good enough here."}, {"tags": [], "down_vote_count": 0, "creation_date": 1505585763, "answer_id": 46257031, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1505585763, "body_markdown": "here is a short one liner to accomplish this:\r\n\r\n    request.META.get(&#39;HTTP_X_FORWARDED_FOR&#39;, request.META.get(&#39;REMOTE_ADDR&#39;)).split(&#39;,&#39;)[-1].strip()"}], "creation_date": 1294023305, "body_markdown": "\r\n   \r\n How do I get user&#39;s IP in django?\r\n\r\nI have a view like this:\r\n\r\n    # Create your views\r\n    from django.contrib.gis.utils import GeoIP\r\n    from django.template import  RequestContext\r\n    from django.shortcuts import render_to_response\r\n    \r\n    \r\n    def home(request):\r\n      g = GeoIP()\r\n      client_ip = request.META[&#39;REMOTE_ADDR&#39;]\r\n      lat,long = g.lat_lon(client_ip)\r\n      return render_to_response(&#39;home_page_tmp.html&#39;,locals())\r\n\r\nBut I get this error:\r\n\r\n    KeyError at /mypage/\r\n        &#39;REMOTE_ADDR&#39;\r\n        Request Method:\tGET\r\n        Request URL:\thttp://mywebsite.com/mypage/\r\n        Django Version:\t1.2.4\r\n        Exception Type:\tKeyError\r\n        Exception Value:\t\r\n        &#39;REMOTE_ADDR&#39;\r\n        Exception Location:\t/mysite/homepage/views.py in home, line 9\r\n        Python Executable:\t/usr/bin/python\r\n        Python Version:\t2.6.6\r\n        Python Path:\t[&#39;/mysite&#39;, &#39;/usr/local/lib/python2.6/dist-packages/flup-1.0.2-py2.6.egg&#39;, &#39;/usr/lib/python2.6&#39;, &#39;/usr/lib/python2.6/plat-linux2&#39;, &#39;/usr/lib/python2.6/lib-tk&#39;, &#39;/usr/lib/python2.6/lib-old&#39;, &#39;/usr/lib/python2.6/lib-dynload&#39;, &#39;/usr/local/lib/python2.6/dist-packages&#39;, &#39;/usr/lib/python2.6/dist-packages&#39;, &#39;/usr/lib/pymodules/python2.6&#39;]\r\n        Server time:\tSun, 2 Jan 2011 20:42:50 -0600", "title": "How do I get user IP address in django?", "view_count": 106274, "up_vote_count": 211, "answer_count": 11, "link": "https://stackoverflow.com/questions/4581789/how-do-i-get-user-ip-address-in-django", "code_snippet": ["<code># Create your views\nfrom django.contrib.gis.utils import GeoIP\nfrom django.template import  RequestContext\nfrom django.shortcuts import render_to_response\n\n\ndef home(request):\n  g = GeoIP()\n  client_ip = request.META['REMOTE_ADDR']\n  lat,long = g.lat_lon(client_ip)\n  return render_to_response('home_page_tmp.html',locals())\n</code>", "<code>KeyError at /mypage/\n    'REMOTE_ADDR'\n    Request Method: GET\n    Request URL:    http://mywebsite.com/mypage/\n    Django Version: 1.2.4\n    Exception Type: KeyError\n    Exception Value:    \n    'REMOTE_ADDR'\n    Exception Location: /mysite/homepage/views.py in home, line 9\n    Python Executable:  /usr/bin/python\n    Python Version: 2.6.6\n    Python Path:    ['/mysite', '/usr/local/lib/python2.6/dist-packages/flup-1.0.2-py2.6.egg', '/usr/lib/python2.6', '/usr/lib/python2.6/plat-linux2', '/usr/lib/python2.6/lib-tk', '/usr/lib/python2.6/lib-old', '/usr/lib/python2.6/lib-dynload', '/usr/local/lib/python2.6/dist-packages', '/usr/lib/python2.6/dist-packages', '/usr/lib/pymodules/python2.6']\n    Server time:    Sun, 2 Jan 2011 20:42:50 -0600\n</code>", "<code>def get_client_ip(request):\n    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')\n    if x_forwarded_for:\n        ip = x_forwarded_for.split(',')[0]\n    else:\n        ip = request.META.get('REMOTE_ADDR')\n    return ip\n</code>", "<code>mod_rpaf</code>", "<code>X-Forwarded-For</code>", "<code>get_client_ip(request)\n</code>", "<code>ip = get_client_ip(request)</code>", "<code>X-Forwarded-For: client, proxy1, proxy2</code>", "<code># In a view or a middleware where the `request` object is available\n\nfrom ipware import get_client_ip\nip, is_routable = get_client_ip(request)\nif ip is None:\n   # Unable to get the client's IP address\nelse:\n    # We got the client's IP address\n    if is_routable:\n        # The client's IP address is publicly routable on the Internet\n    else:\n        # The client's IP address is private\n\n# Order of precedence is (Public, Private, Loopback, None)\n</code>", "<code>i, r = get_client_ip(request, proxy_count=1)\n</code>", "<code>i, r = get_client_ip(request, proxy_trusted_ips=('177.2.2.2'))\n\n# For multiple proxies, simply add them to the list\ni, r = get_client_ip(request, proxy_trusted_ips=('177.2.2.2', '177.3.3.3'))\n\n# For proxies with fixed sub-domain and dynamic IP addresses, use partial pattern\ni, r = get_client_ip(request, proxy_trusted_ips=('177.2.', '177.3.'))\n</code>", "<code>IPWARE_META_PRECEDENCE_LIST</code>", "<code>def get_client_ip(request):\n    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')\n    if x_forwarded_for:\n        ip = x_forwarded_for.split(',')[-1].strip()\n    else:\n        ip = request.META.get('REMOTE_ADDR')\n    return ip\n</code>", "<code>request.META</code>", "<code>request.META.get('REMOTE_ADDR', None)</code>", "<code>PRIVATE_IPS_PREFIX = ('10.', '172.', '192.', )\n\ndef get_client_ip(request):\n    \"\"\"get the client ip from the request\n    \"\"\"\n    remote_address = request.META.get('REMOTE_ADDR')\n    # set the default value of the ip to be the REMOTE_ADDR if available\n    # else None\n    ip = remote_address\n    # try to get the first non-proxy ip (not a private ip) from the\n    # HTTP_X_FORWARDED_FOR\n    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')\n    if x_forwarded_for:\n        proxies = x_forwarded_for.split(',')\n        # remove the private ips from the beginning\n        while (len(proxies) &gt; 0 and\n                proxies[0].startswith(PRIVATE_IPS_PREFIX)):\n            proxies.pop(0)\n        # take the first ip which is not a private one (of a proxy)\n        if len(proxies) &gt; 0:\n            ip = proxies[0]\n\n    return ip\n</code>", "<code>proxy_set_header REMOTE_ADDR $remote_addr;</code>", "<code>uwsgi</code>", "<code>django</code>", "<code>2.7.5</code>", "<code>(1, 6, 6, 'final', 0)</code>", "<code>nginx/1.6.0</code>", "<code>2.0.7</code>", "<code>80</code>", "<code>USE_X_FORWARDED_HOST = True # with or without this line does not matter\n</code>", "<code>uwsgi_param      X-Real-IP              $remote_addr;\n// uwsgi_param   X-Forwarded-For        $proxy_add_x_forwarded_for;\n// uwsgi_param   HTTP_X_FORWARDED_FOR   $proxy_add_x_forwarded_for;\n\n// hardcode for testing\nuwsgi_param      X-Forwarded-For        \"10.10.10.10\";\nuwsgi_param      HTTP_X_FORWARDED_FOR   \"20.20.20.20\";\n</code>", "<code>X-Forwarded-For :       10.10.10.10\nHTTP_X_FORWARDED_FOR :  20.20.20.20\n</code>", "<code>request.META[field/param]</code>", "<code>HTTP_X_FORWARDED_FOR</code>", "<code>get_ip_address_from_request</code>", "<code>from easy_timezones.utils import get_ip_address_from_request, is_valid_ip, is_local_ip\nip = get_ip_address_from_request(request)\ntry:\n    if is_valid_ip(ip):\n        geoip_record = IpRange.objects.by_ip(ip)\nexcept IpRange.DoesNotExist:\n    return None\n</code>", "<code>get_ip_address_from_request</code>", "<code>def get_ip_address_from_request(request):\n    \"\"\" Makes the best attempt to get the client's real IP or return the loopback \"\"\"\n    PRIVATE_IPS_PREFIX = ('10.', '172.', '192.', '127.')\n    ip_address = ''\n    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR', '')\n    if x_forwarded_for and ',' not in x_forwarded_for:\n        if not x_forwarded_for.startswith(PRIVATE_IPS_PREFIX) and is_valid_ip(x_forwarded_for):\n            ip_address = x_forwarded_for.strip()\n    else:\n        ips = [ip.strip() for ip in x_forwarded_for.split(',')]\n        for ip in ips:\n            if ip.startswith(PRIVATE_IPS_PREFIX):\n                continue\n            elif not is_valid_ip(ip):\n                continue\n            else:\n                ip_address = ip\n                break\n    if not ip_address:\n        x_real_ip = request.META.get('HTTP_X_REAL_IP', '')\n        if x_real_ip:\n            if not x_real_ip.startswith(PRIVATE_IPS_PREFIX) and is_valid_ip(x_real_ip):\n                ip_address = x_real_ip.strip()\n    if not ip_address:\n        remote_addr = request.META.get('REMOTE_ADDR', '')\n        if remote_addr:\n            if not remote_addr.startswith(PRIVATE_IPS_PREFIX) and is_valid_ip(remote_addr):\n                ip_address = remote_addr.strip()\n    if not ip_address:\n        ip_address = '127.0.0.1'\n    return ip_address\n</code>", "<code>add_header X-Forwarded-For $proxy_add_x_forwarded_for;\nadd_header X-Real-Ip       $remote_addr;\n</code>", "<code>curl -H 'X-Forwarded-For: 8.8.8.8, 192.168.1.2' http://192.168.1.3/\n</code>", "<code>X-Forwarded-For: 8.8.8.8, 192.168.1.2, 192.168.1.3\n</code>", "<code>X-Real-IP</code>", "<code>django-xff</code>", "<code>request.META.get('HTTP_X_FORWARDED_FOR', request.META.get('REMOTE_ADDR')).split(',')[-1].strip()\n</code>", "<code>request.META.get('REMOTE_ADDR')</code>", "<code>from ipaddress import ip_address\n</code>", "<code>print(get_client_ip(request))\n</code>"], "path": "stack.django"}, {"tags": ["html", "include"], "creation_date": 1327416676, "body_markdown": "I have 2 HTML files, suppose `a.html` and `b.html`. In `a.html` I want to include `b.html`.\r\n\r\nIn JSF I can do it like that:\r\n\r\n    &lt;ui:include src=&quot;b.xhtml&quot; /&gt;\r\n\r\nIt means that inside `a.xhtml` file, I can include `b.xhtml`.\r\n\r\nHow can we do it in `*.html` file?", "last_edit_date": 1327417181, "up_vote_count": 461, "link": "https://stackoverflow.com/questions/8988855/include-another-html-file-in-a-html-file", "_childDocuments_": [{"tags": [], "down_vote_count": 11, "creation_date": 1327417493, "answer_id": 8989055, "path": "stack.django.answer", "score": 16, "up_vote_count": 27, "is_accepted": false, "last_activity_date": 1327417493, "body_markdown": "As an alternative, if you have access to the .htaccess file on your server, you can add a simple directive that will allow php to be interpreted on files ending in .html extension.\r\n\r\n    RemoveHandler .html\r\n    AddType application/x-httpd-php .php .html\r\n\r\nNow you can use a simple php script to include other files such as:\r\n\r\n    &lt;?php include(&#39;b.html&#39;); ?&gt;"}, {"tags": [], "down_vote_count": 8, "creation_date": 1327497439, "answer_id": 9003363, "path": "stack.django.answer", "score": 532, "up_vote_count": 540, "is_accepted": true, "last_activity_date": 1478257399, "last_edit_date": 1478257399, "body_markdown": "In my opinion the best solution uses jQuery:\r\n\r\n`a.html`:\r\n\r\n    &lt;html&gt; \r\n      &lt;head&gt; \r\n        &lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt; \r\n        &lt;script&gt; \r\n        $(function(){\r\n          $(&quot;#includedContent&quot;).load(&quot;b.html&quot;); \r\n        });\r\n        &lt;/script&gt; \r\n      &lt;/head&gt; \r\n\r\n      &lt;body&gt; \r\n         &lt;div id=&quot;includedContent&quot;&gt;&lt;/div&gt;\r\n      &lt;/body&gt; \r\n    &lt;/html&gt;\r\n\r\n`b.html`:\r\n\r\n    &lt;p&gt;This is my include file&lt;/p&gt;\r\n\r\nThis method is a simple and clean solution to my problem.\r\n\r\nThe jQuery `.load()` documentation is [here][1].\r\n\r\n\r\n  [1]: http://api.jquery.com/load/"}, {"tags": [], "down_vote_count": 5, "creation_date": 1362580812, "answer_id": 15250208, "path": "stack.django.answer", "score": 116, "up_vote_count": 121, "is_accepted": false, "last_activity_date": 1515998192, "last_edit_date": 1515998192, "body_markdown": "My solution is similar to the one of [lolo][1] above. However, I insert the HTML code via JavaScript&#39;s document.write instead of using jQuery:\r\n\r\n**a.html:**\r\n\r\n    &lt;html&gt; \r\n      &lt;body&gt;\r\n      &lt;h1&gt;Put your HTML content before insertion of b.js.&lt;/h1&gt;\r\n          ...\r\n\r\n      &lt;script src=&quot;b.js&quot;&gt;&lt;/script&gt;\r\n\r\n          ...\r\n\r\n      &lt;p&gt;And whatever content you want afterwards.&lt;/p&gt;\r\n      &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\n\r\n**b.js:**\r\n\r\n    document.write(&#39;\\\r\n    \\\r\n        &lt;h1&gt;Add your HTML code here&lt;/h1&gt;\\\r\n    \\\r\n         &lt;p&gt;Notice however, that you have to escape LF&#39;s with a &#39;\\&#39;, just like\\\r\n            demonstrated in this code listing.\\\r\n        &lt;/p&gt;\\\r\n    \\\r\n    &#39;);\r\n\r\nThe reason for me against using jQuery is that jQuery.js is ~90kb in size, and I want to keep the amount of data to load as small as possible.\r\n\r\nIn order to get the properly escaped JavaScript file without much work, you can use the following sed command:\r\n\r\n    sed &#39;s/\\\\/\\\\\\\\/g;s/^.*$/&amp;\\\\/g;s/&#39;\\&#39;&#39;/\\\\&#39;\\&#39;&#39;/g&#39; b.html &gt; escapedB.html\r\n\r\nOr just use the following handy bash script published as a Gist on Github, that automates all necessary work, converting `b.html` to `b.js`:\r\n\thttps://gist.github.com/Tafkadasoh/334881e18cbb7fc2a5c033bfa03f6ee6\r\n\r\n\r\nCredits to [Greg Minshall][2] for the improved sed command that also escapes back slashes and single quotes, which my original sed command did not consider.\r\n\r\n[1]: https://stackoverflow.com/users/1001224/lolo\r\n[2]: https://stackoverflow.com/users/1527747/greg-minshall"}, {"tags": [], "down_vote_count": 3, "creation_date": 1365949623, "answer_id": 16000128, "path": "stack.django.answer", "score": 40, "up_vote_count": 43, "is_accepted": false, "last_activity_date": 1365949623, "body_markdown": " A simple server side include directive to include another file found in the same folder looks like this:\r\n\r\n    &lt;!--#include virtual=&quot;a.html&quot; --&gt; "}, {"tags": [], "down_vote_count": 0, "creation_date": 1366387473, "answer_id": 16108864, "path": "stack.django.answer", "score": 31, "up_vote_count": 31, "is_accepted": false, "last_activity_date": 1414193151, "last_edit_date": 1414193151, "body_markdown": "A [very old solution](http://aplus.rs/2006/insert-html-page-into-another-html-page/) I did met my needs back then, but here&#39;s how to do it standards-compliant code:\r\n\r\n    &lt;!--[if IE]&gt;\r\n    &lt;object classid=&quot;clsid:25336920-03F9-11CF-8FD0-00AA00686F13&quot; data=&quot;some.html&quot;&gt;\r\n    &lt;p&gt;backup content&lt;/p&gt;\r\n    &lt;/object&gt;\r\n    &lt;![endif]--&gt;\r\n    \r\n    &lt;!--[if !IE]&gt; &lt;--&gt;\r\n    &lt;object type=&quot;text/html&quot; data=&quot;some.html&quot;&gt;\r\n    &lt;p&gt;backup content&lt;/p&gt;\r\n    &lt;/object&gt;\r\n    &lt;!--&gt; &lt;![endif]--&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1376804168, "answer_id": 18296053, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1376805404, "last_edit_date": 1376805404, "body_markdown": "To insert contents of the named file:\r\n\r\n    &lt;!--#include virtual=&quot;filename.htm&quot;--&gt;\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1378665112, "answer_id": 18687208, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1378744740, "last_edit_date": 1378744740, "body_markdown": "I came to this topic looking for something similar, but a bit different from the problem posed by lolo.  I wanted to construct an HTML page holding an alphabetical menu of links to other pages, and each of the other pages might or might not exist, and the order in which they were created might not be alphabetical (nor even numerical).  Also, like Tafkadasoh, I did not want to bloat the web page with jQuery.  After researching the problem and experimenting for several hours, here is what worked for me, with relevant remarks added:\r\n\r\n    &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;\r\n    &lt;html&gt;\r\n    &lt;head&gt;\r\n      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/application/html; charset=iso-8859-1&quot;&gt;\r\n      &lt;meta name=&quot;Author&quot; content=&quot;me&quot;&gt;\r\n      &lt;meta copyright=&quot;Copyright&quot; content= &quot;(C) 2013-present by me&quot; /&gt;\r\n      &lt;title&gt;Menu&lt;/title&gt;\r\n    \r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n    &lt;!--\r\n    var F000, F001, F002, F003, F004, F005, F006, F007, F008, F009,\r\n        F010, F011, F012, F013, F014, F015, F016, F017, F018, F019;\r\n    var dat = new Array();\r\n    var form, script, write, str, tmp, dtno, indx, unde;\r\n    \r\n    /*\r\n    The &quot;F000&quot; and similar variables need to exist/be-declared.\r\n    Each one will be associated with a different menu item,\r\n    so decide on how many items maximum you are likely to need,\r\n    when constructing that listing of them.  Here, there are 20.\r\n    */\r\n    \r\n    \r\n    function initialize()\r\n    { window.name=&quot;Menu&quot;;\r\n      form = document.getElementById(&#39;MENU&#39;);\r\n      for(indx=0; indx&lt;20; indx++)\r\n      { str = &quot;00&quot; + indx;\r\n        tmp = str.length - 3;\r\n        str = str.substr(tmp);\r\n        script = document.createElement(&#39;script&#39;);\r\n        script.type = &#39;text/javascript&#39;;\r\n        script.src = str + &quot;.js&quot;;\r\n        form.appendChild(script);\r\n      }\r\n    \r\n    /*\r\n    The for() loop constructs some &lt;script&gt; objects\r\n    and associates each one with a different simple file name,\r\n    starting with &quot;000.js&quot; and, here, going up to &quot;019.js&quot;.\r\n    It won&#39;t matter which of those files exist or not.\r\n    However, for each menu item you want to display on this\r\n    page, you will need to ensure that its .js file does exist.\r\n    \r\n    The short function below (inside HTML comment-block) is,\r\n    generically, what the content of each one of the .js files looks like:\r\n    &lt;!--\r\n    function F000()\r\n    { return [&quot;Menu Item Name&quot;, &quot;./URLofFile.htm&quot;, &quot;Description string&quot;];\r\n    }\r\n    --&gt;\r\n    \r\n    (Continuing the remarks in the main menu.htm file)\r\n    It happens that each call of the form.appendChild() function\r\n    will cause the specified .js script-file to be loaded at that time.\r\n    However, it takes a bit of time for the JavaScript in the file\r\n    to be fully integrated into the web page, so one thing that I tried,\r\n    but it didn&#39;t work, was to write an &quot;onload&quot; event handler.\r\n    The handler was apparently being called before the just-loaded\r\n    JavaScript had actually become accessible.\r\n    \r\n    Note that the name of the function in the .js file is the same as one\r\n    of the the pre-defined variables like &quot;F000&quot;.  When I tried to access\r\n    that function without declaring the variable, attempting to use an\r\n    &quot;onload&quot; event handler, the JavaScript debugger claimed that the item\r\n    was &quot;not available&quot;.  This is not something that can be tested-for!\r\n    However, &quot;undefined&quot; IS something that CAN be tested-for.  Simply\r\n    declaring them to exist automatically makes all of them &quot;undefined&quot;.\r\n    When the system finishes integrating a just-loaded .js script file,\r\n    the appropriate variable, like &quot;F000&quot;, will become something other\r\n    than &quot;undefined&quot;.  Thus it doesn&#39;t matter which .js files exist or\r\n    not, because we can simply test all the &quot;F000&quot;-type variables, and\r\n    ignore the ones that are &quot;undefined&quot;.  More on that later.\r\n    \r\n    The line below specifies a delay of 2 seconds, before any attempt\r\n    is made to access the scripts that were loaded.  That DOES give the\r\n    system enough time to fully integrate them into the web page.\r\n    (If you have a really long list of menu items, or expect the page\r\n    to be loaded by an old/slow computer, a longer delay may be needed.)\r\n    */\r\n    \r\n      window.setTimeout(&quot;BuildMenu();&quot;, 2000);\r\n      return;\r\n    }\r\n\r\n    \r\n    //So here is the function that gets called after the 2-second delay  \r\n    function BuildMenu()\r\n    { dtno = 0;    //index-counter for the &quot;dat&quot; array\r\n      for(indx=0; indx&lt;20; indx++)\r\n      { str = &quot;00&quot; + indx;\r\n        tmp = str.length - 3;\r\n        str = &quot;F&quot; + str.substr(tmp);\r\n        tmp = eval(str);\r\n        if(tmp != unde) // &quot;unde&quot; is deliberately undefined, for this test\r\n          dat[dtno++] = eval(str + &quot;()&quot;);\r\n      }\r\n    \r\n    /*\r\n    The loop above simply tests each one of the &quot;F000&quot;-type variables, to\r\n    see if it is &quot;undefined&quot; or not.  Any actually-defined variable holds\r\n    a short function (from the &quot;.js&quot; script-file as previously indicated).\r\n    We call the function to get some data for one menu item, and put that\r\n    data into an array named &quot;dat&quot;.\r\n    \r\n    Below, the array is sorted alphabetically (the default), and the\r\n    &quot;dtno&quot; variable lets us know exactly how many menu items we will\r\n    be working with.  The loop that follows creates some &quot;&lt;span&gt;&quot; tags,\r\n    and the the &quot;innerHTML&quot; property of each one is set to become an\r\n    &quot;anchor&quot; or &quot;&lt;a&gt;&quot; tag, for a link to some other web page.  A description\r\n    and a &quot;&lt;br /&gt;&quot; tag gets included for each link.  Finally, each new\r\n    &lt;span&gt; object is appended to the menu-page&#39;s &quot;form&quot; object, and thereby\r\n    ends up being inserted into the middle of the overall text on the page.\r\n    (For finer control of where you want to put text in a page, consider\r\n    placing something like this in the web page at an appropriate place,\r\n    as preparation:\r\n    &lt;div id=&quot;InsertHere&quot;&gt;&lt;/div&gt;\r\n    You could then use document.getElementById(&quot;InsertHere&quot;) to get it into\r\n    a variable, for appending of &lt;span&gt; elements, the way a variable named\r\n    &quot;form&quot; was used in this example menu page.\r\n    \r\n    Note: You don&#39;t have to specify the link in the same way I did\r\n    (the type of link specified here only works if JavaScript is enabled).\r\n    You are free to use the more-standard &quot;&lt;a&gt;&quot; tag with the &quot;href&quot;\r\n    property defined, if you wish.  But whichever way you go,\r\n    you need to make sure that any pages being linked actually exist!\r\n    */\r\n    \r\n      dat.sort();\r\n      for(indx=0; indx&lt;dtno; indx++)\r\n      { write = document.createElement(&#39;span&#39;);\r\n        write.innerHTML = &quot;&lt;a onclick=\\&quot;window.open(&#39;&quot; + dat[indx][1] +\r\n                          &quot;&#39;, &#39;Menu&#39;);\\&quot; style=\\&quot;color:#0000ff;&quot; + \r\n                          &quot;text-decoration:underline;cursor:pointer;\\&quot;&gt;&quot; +\r\n                          dat[indx][0] + &quot;&lt;/a&gt; &quot; + dat[indx][2] + &quot;&lt;br /&gt;&quot;;\r\n        form.appendChild(write);\r\n      }\r\n      return;\r\n    }\r\n    \r\n    // --&gt;\r\n    &lt;/script&gt;\r\n    &lt;/head&gt;\r\n    \r\n    &lt;body onload=&quot;initialize();&quot; style=&quot;background-color:#a0a0a0; color:#000000; \r\n    \r\n    font-family:sans-serif; font-size:11pt;&quot;&gt;\r\n    &lt;h2&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;\r\n    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;MENU\r\n    &lt;noscript&gt;&lt;br /&gt;&lt;span style=&quot;color:#ff0000;&quot;&gt;\r\n    Links here only work if&lt;br /&gt;\r\n    your browser&#39;s JavaScript&lt;br /&gt;\r\n    support is enabled.&lt;/span&gt;&lt;br /&gt;&lt;/noscript&gt;&lt;/h2&gt;\r\n    These are the menu items you currently have available:&lt;br /&gt;\r\n    &lt;br /&gt;\r\n    &lt;form id=&quot;MENU&quot; action=&quot;&quot; onsubmit=&quot;return false;&quot;&gt;\r\n    &lt;!-- Yes, the &lt;form&gt; object starts out completely empty --&gt;\r\n    &lt;/form&gt;\r\n    Click any link, and enjoy it as much as you like.&lt;br /&gt;\r\n    Then use your browser&#39;s BACK button to return to this Menu,&lt;br /&gt;\r\n    so you can click a different link for a different thing.&lt;br /&gt;\r\n    &lt;br /&gt;\r\n    &lt;br /&gt;\r\n    &lt;small&gt;This file (web page) Copyright (c) 2013-present by me&lt;/small&gt;\r\n    &lt;/body&gt;\r\n    &lt;/html&gt;"}, {"tags": [], "down_vote_count": 2, "creation_date": 1385513522, "answer_id": 20230965, "path": "stack.django.answer", "score": 27, "up_vote_count": 29, "is_accepted": false, "last_activity_date": 1385513522, "body_markdown": "No need for scripts. No need to do any fancy stuff server-side (tho that would probably be a better option)\r\n\r\n    &lt;iframe src=&quot;/path/to/file.html&quot; seamless&gt;&lt;/iframe&gt;\r\n\r\nSince old browsers don&#39;t support seamless, you should add some css to fix it:\r\n\r\n\tiframe[seamless] {\r\n\t\tborder: none;\r\n\t}\r\n\r\nKeep in mind that for browsers that don&#39;t support seamless, if you click a link in the iframe it will make the _frame_ go to that url, not the whole window. A way to get around that is to have all links have `target=&quot;_parent&quot;`, tho the browser support is &quot;good enough&quot;."}, {"tags": [], "down_vote_count": 0, "creation_date": 1387472709, "answer_id": 20687569, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1387473318, "last_edit_date": 1387473318, "body_markdown": "The Athari&#180;s answer (the first!) was too much conclusive! Very Good!\r\n\r\nBut if you would like to **pass the name of the page to be included as URL parameter**, this post has a very nice solution to be used combined with:\r\n\r\n[http://www.jquerybyexample.net/2012/06/get-url-parameters-using-jquery.html][1]\r\n\r\n\r\n  [1]: http://www.jquerybyexample.net/2012/06/get-url-parameters-using-jquery.html\r\n\r\nSo it becomes something like this:\r\n\r\nYour URL: \r\n\r\n    www.yoursite.com/a.html?p=b.html\r\n\r\n\r\nThe **a.html** code now becomes:\r\n\r\n    &lt;html&gt; \r\n      &lt;head&gt; \r\n        &lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt; \r\n        &lt;script&gt; \r\n        function GetURLParameter(sParam)\r\n        {\r\n          var sPageURL = window.location.search.substring(1);\r\n          var sURLVariables = sPageURL.split(&#39;&amp;&#39;);\r\n          for (var i = 0; i &lt; sURLVariables.length; i++) \r\n          {\r\n            var sParameterName = sURLVariables[i].split(&#39;=&#39;);\r\n            if (sParameterName[0] == sParam) \r\n            {\r\n                return sParameterName[1];\r\n            }\r\n          }\r\n        }\u200b\r\n        $(function(){\r\n          var pinc = GetURLParameter(&#39;p&#39;);\r\n          $(&quot;#includedContent&quot;).load(pinc); \r\n        });\r\n        &lt;/script&gt; \r\n      &lt;/head&gt; \r\n    \r\n      &lt;body&gt; \r\n         &lt;div id=&quot;includedContent&quot;&gt;&lt;/div&gt;\r\n      &lt;/body&gt; \r\n    &lt;/html&gt;\r\n\r\nIt worked very well for me!\r\nI hope have helped :)\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1388061909, "answer_id": 20785120, "path": "stack.django.answer", "score": -1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1388063086, "last_edit_date": 1388063086, "body_markdown": "PHP is a server level scripting language. It can do many things, but one popular use is to include HTML documents inside your pages, much the same as SSI. Like SSI, this is a server level technology. If you are not sure if you have PHP functionality on your website contact your hosting provider.\r\n\r\nHere is a simple PHP script you can use to include a snippet of HTML on any PHP-enabled web page:\r\n\r\nSave the HTML for the common elements of your site to separate files. For example, your navigation section might be saved as navigation.html or navigation.php.\r\nUse the following PHP code to include that HTML in each page.\r\n\r\n    &lt;?php require($DOCUMENT_ROOT . &quot;navigation.php&quot;); ?&gt;\r\n\r\nUse that same code on every page that you want to include the file.\r\nMake sure to change the higlighted file name to the name and path to your include file."}, {"tags": [], "down_vote_count": 0, "creation_date": 1389631887, "answer_id": 21096828, "path": "stack.django.answer", "score": 41, "up_vote_count": 41, "is_accepted": false, "last_activity_date": 1389631887, "body_markdown": "Shameless plug of a library that I wrote the solve this.\r\n\r\nhttps://github.com/LexmarkWeb/csi.js\r\n\r\n    &lt;div data-include=&quot;/path/to/include.html&quot;&gt;&lt;/div&gt;\r\n\r\nThe above will take the contents of `/path/to/include.html` and replace the `div` with it."}, {"tags": [], "down_vote_count": 3, "creation_date": 1393836116, "answer_id": 22142111, "path": "stack.django.answer", "score": 64, "up_vote_count": 67, "is_accepted": false, "last_activity_date": 1477151094, "last_edit_date": 1477151094, "body_markdown": "Checkout HTML5 imports [via Html5rocks tutorial ][1]\r\nand at [polymer-project][2]\r\n\r\n**For example:**\r\n\r\n    &lt;head&gt;\r\n      &lt;link rel=&quot;import&quot; href=&quot;/path/to/imports/stuff.html&quot;&gt;\r\n    &lt;/head&gt;\r\n\r\n  [1]: http://www.html5rocks.com/en/tutorials/webcomponents/imports/\r\n  [2]: http://www.polymer-project.org/platform/html-imports.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1400569887, "answer_id": 23753161, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1400569887, "body_markdown": "Following works if html content from some file needs to be included:\r\nFor instance, the following line will include the contents of piece_to_include.html at the location where the OBJECT definition occurs.\r\n\r\n    ...text before...\r\n    &lt;OBJECT data=&quot;file_to_include.html&quot;&gt;\r\n    Warning: file_to_include.html could not be included.\r\n    &lt;/OBJECT&gt;\r\n    ...text after...\r\n\r\nReference: [http://www.w3.org/TR/WD-html40-970708/struct/includes.html#h-7.7.4][1]\r\n\r\n\r\n  [1]: http://www.w3.org/TR/WD-html40-970708/struct/includes.html#h-7.7.4"}, {"tags": [], "down_vote_count": 0, "creation_date": 1402672998, "answer_id": 24208865, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1402688599, "last_edit_date": 1402688599, "body_markdown": "Most of the solutions works but they have issue with **jquery**:\r\n\r\nThe issue is following code `$(document).ready(function () { alert($(&quot;#includedContent&quot;).text()); }` alerts nothing instead of alerting included content.\r\n\r\nI write the below code, in my solution you can access to included content in `$(document).ready` function:\r\n\r\n(The key is loading included content synchronously).\r\n\r\n**index.htm**:\r\n\r\n    &lt;html&gt;\r\n        &lt;head&gt;\r\n            &lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;\r\n    \t\t\r\n    \t\t&lt;script&gt;\r\n    \t\t\t(function ($) {\r\n    \t\t\t\t$.include = function (url) {\r\n    \t\t\t\t\t$.ajax({\r\n    \t\t\t\t\t\turl: url,\r\n    \t\t\t\t\t\tasync: false,\r\n    \t\t\t\t\t\tsuccess: function (result) {\r\n    \t\t\t\t\t\t\tdocument.write(result);\r\n    \t\t\t\t\t\t}\r\n    \t\t\t\t\t});\r\n    \t\t\t\t};\r\n    \t\t\t}(jQuery));\r\n    \t\t&lt;/script&gt;\r\n    \t\t\r\n    \t\t&lt;script&gt;\r\n    \t\t\t$(document).ready(function () {\r\n    \t\t\t\talert($(&quot;#test&quot;).text());\r\n    \t\t\t});\r\n    \t\t&lt;/script&gt;\r\n        &lt;/head&gt;\r\n    \t\r\n        &lt;body&gt;\r\n    \t\t&lt;script&gt;$.include(&quot;include.inc&quot;);&lt;/script&gt;\r\n        &lt;/body&gt;\r\n    \t\r\n    &lt;/html&gt;\r\n\r\n**include.inc**:\r\n\r\n    &lt;div id=&quot;test&quot;&gt;\r\n    \tThere is no issue between this solution and jquery.\r\n    &lt;/div&gt;\r\n\r\n\r\n[jquery include plugin on github][1]\r\n\r\n\r\n  [1]: https://github.com/amir-saniyan/jquery-include"}, {"tags": [], "down_vote_count": 8, "creation_date": 1407352733, "answer_id": 25168436, "path": "stack.django.answer", "score": -6, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1407352733, "body_markdown": "using jquery u need import library\r\n\r\ni recommend you using php\r\n\r\n\r\n\r\n    &lt;?php\r\n    \techo&quot;&lt;html&gt;   \r\n    \t\t  &lt;body&gt;&quot;;\r\n    ?&gt; \r\n    &lt;?php\r\n    \tinclude &quot;b.html&quot;;\r\n    ?&gt;\r\n    &lt;?php\r\n    \techo&quot; &lt;/body&gt; \r\n    \t\t&lt;/html&gt;&quot;;\r\n    ?&gt;\r\n\r\nb.html\r\n\r\n    &lt;div&gt;hi this is ur file :3&lt;div&gt;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1426664632, "answer_id": 29116562, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1426664632, "body_markdown": "If you use some framework like django/bootle, they often ship some template engine.\r\nLet&#39;s say you use bottle, and the default template engine is [SimpleTemplate Engine][1].\r\nAnd below is the pure html file\r\n\r\n    $ cat footer.tpl\r\n    &lt;hr&gt; &lt;footer&gt;   &lt;p&gt;&amp;copy; stackoverflow, inc 2015&lt;/p&gt; &lt;/footer&gt;\r\n\r\nYou can include the footer.tpl in you main file, like: \r\n \r\n    $ cat dashboard.tpl\r\n    %include footer\r\n\r\nBesides that, you can also pass parameter to your dashborard.tpl.\r\n\r\n\r\n  [1]: http://bottlepy.org/docs/0.11/stpl.html?highlight=include"}, {"tags": [], "down_vote_count": 0, "creation_date": 1430320473, "answer_id": 29947863, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1430492191, "last_edit_date": 1430492191, "body_markdown": "There is no direct HTML solution for the task for now. Even  [HTML Imports](https://w3c.github.io/webcomponents/spec/imports/)  (which is permanently *in  draft*) will not do the thing, because Import != Include and some JS magic will be required anyway.  \r\nI recently wrote  [a *VanillaJS* script](http://al-scvorets.github.io/wm-html-include.js/) that is just for inclusion HTML into HTML, without any complications.  \r\n  \r\nJust place in your `a.html`\r\n\r\n    &lt;link data-wi-src=&quot;b.html&quot; /&gt;\r\n    &lt;!-- ... and somewhere below is ref to the script ... --&gt;\r\n    &lt;script src=&quot;wm-html-include.js&quot;&gt; &lt;/script&gt;  \r\n  \r\nIt is `open-source` and may give an idea (I hope)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1434563768, "answer_id": 30898899, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1434563768, "body_markdown": "[Here is a great article][1], You can implement common library and just use below code to import any HTML files in one line. \r\n    \r\n    &lt;head&gt;\r\n       &lt;link rel=&quot;import&quot; href=&quot;warnings.html&quot;&gt;\r\n    &lt;/head&gt;\r\n\r\n\r\nYou can also try [Google Polymer][2]\r\n\r\n\r\n  [1]: http://www.html5rocks.com/en/tutorials/webcomponents/imports/\r\n  [2]: https://www.polymer-project.org/1.0/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1438789968, "answer_id": 31837264, "path": "stack.django.answer", "score": 79, "up_vote_count": 79, "is_accepted": false, "last_activity_date": 1505077018, "last_edit_date": 1505077018, "body_markdown": "Expanding lolo&#39;s answer from above, here is a little more automation if you have to include a lot of files:\r\n\r\n    &lt;script&gt;\r\n      $(function(){\r\n        var includes = $(&#39;[data-include]&#39;);\r\n        jQuery.each(includes, function(){\r\n          var file = &#39;views/&#39; + $(this).data(&#39;include&#39;) + &#39;.html&#39;;\r\n          $(this).load(file);\r\n        });\r\n      });\r\n    &lt;/script&gt;\r\n\r\nAnd then to include something in the html:\r\n\r\n    &lt;div data-include=&quot;header&quot;&gt;&lt;/div&gt;\r\n    &lt;div data-include=&quot;footer&quot;&gt;&lt;/div&gt;\r\n\r\nWhich would include the file views/header.html and views/footer.html"}, {"tags": [], "down_vote_count": 1, "creation_date": 1440725614, "answer_id": 32262017, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1440725962, "last_edit_date": 1440725962, "body_markdown": "Well, if all you&#39;re wanting to do is put text from a separate file into your page (tags in the text should work, too), you can do this (your text styles on the main page\u2014`test.html`\u2014should still work):\r\n\r\n`test.html`\r\n\r\n    &lt;html&gt;\r\n    &lt;body&gt;\r\n    &lt;p&gt;Start&lt;/p&gt;\r\n    \r\n    &lt;p&gt;Beginning&lt;/p&gt;\r\n    \r\n    &lt;div&gt;\r\n    &lt;script language=&quot;JavaScript&quot; src=&quot;sample.js&quot;&gt;&lt;/script&gt;\r\n    &lt;/div&gt;\r\n    \r\n    &lt;p&gt;End&lt;/p&gt;\r\n    \r\n    &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\n`sample.js`\r\n\r\n    var data=&quot;Here is the imported text!&quot;;\r\n    document.write(data);\r\n\r\nYou can always recreate the HTML tags you want yourself, after all. There&#39;s need for server-side scripting just to grab text from another file, unless you want to do something more.\r\n\r\nAnyway, what I&#39;m starting to use this for is to make it so if I update a description common among lots of HTML files, I only need to update one file to do it (the `.js` file) instead of every single HTML file that contains the text.\r\n\r\nSo, in summary, instead of importing an `.html` file, a simpler solution is to import a `.js` file with the content of the `.html` file in a variable (and write the contents to the screen where you call the script).\r\n\r\nThanks for the question."}, {"tags": [], "down_vote_count": 0, "creation_date": 1442704417, "answer_id": 32674115, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1442704417, "body_markdown": "You can do that with JavaScript&#39;s library jQuery like this:\r\n\r\n\r\nHTML:\r\n\r\n    &lt;div class=&quot;banner&quot; title=&quot;banner.html&quot;&gt;&lt;/div&gt;\r\n\r\nJS:\r\n\r\n    $(&quot;.banner&quot;).each(function(){\r\n        var inc=$(this);\r\n        $.get(inc.attr(&quot;title&quot;), function(data){\r\n            inc.replaceWith(data);\r\n        });\r\n    });\r\n\r\nPlease note that `banner.html` should be located under the same domain your other pages are in otherwise your webpages will refuse the `banner.html` file due to [**Cross-Origin Resource Sharing**][1] policies.\r\n\r\nAlso, please note that if you load your content with JavaScript, Google will not be able to index it so it&#39;s not exactly a good method for SEO reasons.\r\n\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Cross-origin_resource_sharing"}, {"tags": [], "down_vote_count": 0, "creation_date": 1470259893, "answer_id": 38753983, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1470377628, "last_edit_date": 1495541906, "body_markdown": "Based on the answer of https://stackoverflow.com/a/31837264/4360308\r\nI&#39;ve implemented this functionality with Nodejs (+ express + cheerio) as follows:\r\n\r\n**HTML (index.html)**\r\n\r\n    &lt;div class=&quot;include&quot; data-include=&quot;componentX&quot; data-method=&quot;append&quot;&gt;&lt;/div&gt;\r\n    &lt;div class=&quot;include&quot; data-include=&quot;componentX&quot; data-method=&quot;replace&quot;&gt;&lt;/div&gt;\r\n\r\n**JS**\r\n\r\n    function includeComponents($) {\r\n        $(&#39;.include&#39;).each(function () {\r\n            var file = &#39;view/html/component/&#39; + $(this).data(&#39;include&#39;) + &#39;.html&#39;;\r\n            var dataComp = fs.readFileSync(file);\r\n            var htmlComp = dataComp.toString();\r\n            if ($(this).data(&#39;method&#39;) == &quot;replace&quot;) {\r\n                $(this).replaceWith(htmlComp);\r\n            } else if ($(this).data(&#39;method&#39;) == &quot;append&quot;) {\r\n                $(this).append(htmlComp);\r\n            }\r\n        })\r\n    }\r\n    \r\n    function foo(){\r\n        fs.readFile(&#39;./view/html/index.html&#39;, function (err, data) {\r\n            if (err) throw err;\r\n            var html = data.toString();\r\n            var $ = cheerio.load(html);\r\n            includeComponents($);\r\n            ...\r\n        }\r\n    }\r\n\r\nappend -&gt; includes the content into the div\r\n\r\nreplace -&gt; replaces the div\r\n\r\nyou could easily add more behaviours following the same design\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1487299703, "answer_id": 42288521, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1487300241, "last_edit_date": 1487300241, "body_markdown": "[html5rocks.com][1] has a very good tutorial on this stuff, and this might be a little late, but I myself didn&#39;t know this existed. w3schools also has a way to do this using their new library called w3.js. The thing is, this requires the use of a web server and and HTTPRequest object. You can&#39;t actually load these locally and test them on your machine. What you can do though, is use polyfills provided on the html5rocks link at the top, or follow their tutorial. With a little JS magic, you can do something like this:\r\n\r\n     var link = document.createElement(&#39;link&#39;);\r\n     if(&#39;import&#39; in link){\r\n         //Run import code\r\n         link.setAttribute(&#39;rel&#39;,&#39;import&#39;);\r\n         link.setAttribute(&#39;href&#39;,importPath);\r\n         document.getElementsByTagName(&#39;head&#39;)[0].appendChild(link);\r\n         //Create a phantom element to append the import document text to\r\n         link = document.querySelector(&#39;link[rel=&quot;import&quot;]&#39;);\r\n         var docText = document.createElement(&#39;div&#39;);\r\n         docText.innerHTML = link.import;\r\n         element.appendChild(docText.cloneNode(true));\r\n     } else {\r\n         //Imports aren&#39;t supported, so call polyfill\r\n         importPolyfill(importPath);\r\n     }\r\n\r\nThis will make the link (Can change to be the wanted link element if already set), set the import (unless you already have it), and then append it. It will then from there take that and parse the file in HTML, and then append it to the desired element under a div. This can all be changed to fit your needs from the appending element to the link you are using. I hope this helped, it may irrelevant now if newer, faster ways have come out without using libraries and frameworks such as jQuery or W3.js.\r\n\r\n**UPDATE:** This will throw an error saying that the local import has been blocked by CORS policy. Might need access to the deep web to be able to use this because of the properties of the deep web. (Meaning no practical use)\r\n\r\n\r\n  [1]: https://www.html5rocks.com/en/tutorials/webcomponents/imports/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1487542281, "answer_id": 42333532, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1487542281, "body_markdown": "This is what helped me. For adding a block of html code from `b.html` to `a.html`, this should go into the `head` tag of `a.html`:\r\n\r\n    &lt;script src=&quot;https://code.jquery.com/jquery-1.10.2.js&quot;&gt;&lt;/script&gt;\r\n\r\nThen in the body tag, a container is made with an unique id and a javascript block to load the `b.html` into the container, as follows:\r\n\r\n   \r\n\r\n    &lt;div id=&quot;b-placeholder&quot;&gt;\r\n    \r\n    &lt;/div&gt;\r\n    \r\n    &lt;script&gt;\r\n    $(function(){\r\n      $(&quot;#b-placeholder&quot;).load(&quot;b.html&quot;);\r\n    });\r\n    &lt;/script&gt;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1491989560, "answer_id": 43365690, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1491989560, "body_markdown": "In w3.js include works like this:\r\n\r\n    &lt;body&gt;\r\n    &lt;div w3-include-HTML=&quot;h1.html&quot;&gt;&lt;/div&gt;\r\n    &lt;div w3-include-HTML=&quot;content.html&quot;&gt;&lt;/div&gt;\r\n    &lt;script&gt;w3.includeHTML();&lt;/script&gt;\r\n    &lt;/body&gt;"}, {"tags": [], "down_vote_count": 4, "creation_date": 1492179790, "answer_id": 43413454, "path": "stack.django.answer", "score": -3, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1492179790, "body_markdown": "A simple solution with php:\r\n\r\n    &lt;?php\r\n    \treadfile(&quot;yourpath/yourpage.html&quot;);\r\n    ?&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1501762993, "answer_id": 45484094, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1501762993, "body_markdown": "You can use a polyfill of HTML Imports (https://www.html5rocks.com/en/tutorials/webcomponents/imports/), or that simplified solution\r\nhttps://github.com/dsheiko/html-import\r\n\r\nFor example, on the page you import HTML block like that:\r\n\r\n    &lt;link rel=&quot;html-import&quot; href=&quot;./some-path/block.html&quot; &gt;\r\n\r\nThe block may have imports of its own:\r\n\r\n    &lt;link rel=&quot;html-import&quot; href=&quot;./some-other-path/other-block.html&quot; &gt;\r\n\r\nThe importer replaces the directive with the loaded HTML pretty much like SSI\r\n\r\nThese directives will be served automatically as soon as you load this small JavaScript:\r\n\r\n    &lt;script async src=&quot;./src/html-import.js&quot;&gt;&lt;/script&gt;\r\n\r\nIt will process the imports when DOM is ready automatically. Besides, it exposes an API that you can use to run manually, to get logs and so on. Enjoy :)"}], "title": "Include another HTML file in a HTML file", "view_count": 1016908, "answer_count": 27, "code_snippet": ["<code>a.html</code>", "<code>b.html</code>", "<code>a.html</code>", "<code>b.html</code>", "<code>&lt;ui:include src=\"b.xhtml\" /&gt;\n</code>", "<code>a.xhtml</code>", "<code>b.xhtml</code>", "<code>*.html</code>", "<code>localhost</code>", "<code>a.html</code>", "<code>&lt;html&gt; \n  &lt;head&gt; \n    &lt;script src=\"jquery.js\"&gt;&lt;/script&gt; \n    &lt;script&gt; \n    $(function(){\n      $(\"#includedContent\").load(\"b.html\"); \n    });\n    &lt;/script&gt; \n  &lt;/head&gt; \n\n  &lt;body&gt; \n     &lt;div id=\"includedContent\"&gt;&lt;/div&gt;\n  &lt;/body&gt; \n&lt;/html&gt;\n</code>", "<code>b.html</code>", "<code>&lt;p&gt;This is my include file&lt;/p&gt;\n</code>", "<code>.load()</code>", "<code>$(function(){})</code>", "<code>XMLHttpRequest cannot load file:///.../b.html. Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https, chrome-extension-resource.</code>", "<code>&lt;html&gt; \n  &lt;body&gt;\n  &lt;h1&gt;Put your HTML content before insertion of b.js.&lt;/h1&gt;\n      ...\n\n  &lt;script src=\"b.js\"&gt;&lt;/script&gt;\n\n      ...\n\n  &lt;p&gt;And whatever content you want afterwards.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code>", "<code>document.write('\\\n\\\n    &lt;h1&gt;Add your HTML code here&lt;/h1&gt;\\\n\\\n     &lt;p&gt;Notice however, that you have to escape LF's with a '\\', just like\\\n        demonstrated in this code listing.\\\n    &lt;/p&gt;\\\n\\\n');\n</code>", "<code>sed 's/\\\\/\\\\\\\\/g;s/^.*$/&amp;\\\\/g;s/'\\''/\\\\'\\''/g' b.html &gt; escapedB.html\n</code>", "<code>b.html</code>", "<code>b.js</code>", "<code>&lt;script&gt;\n  $(function(){\n    var includes = $('[data-include]');\n    jQuery.each(includes, function(){\n      var file = 'views/' + $(this).data('include') + '.html';\n      $(this).load(file);\n    });\n  });\n&lt;/script&gt;\n</code>", "<code>&lt;div data-include=\"header\"&gt;&lt;/div&gt;\n&lt;div data-include=\"footer\"&gt;&lt;/div&gt;\n</code>", "<code>data-argument</code>", "<code>class=\"include\"</code>", "<code>var includes = $('[data-include]');</code>", "<code>&lt;head&gt;\n  &lt;link rel=\"import\" href=\"/path/to/imports/stuff.html\"&gt;\n&lt;/head&gt;\n</code>", "<code>stuff.html</code>", "<code>TypeError: ... .import is undefined</code>", "<code>&lt;div data-include=\"/path/to/include.html\"&gt;&lt;/div&gt;\n</code>", "<code>/path/to/include.html</code>", "<code>div</code>", "<code>&lt;!--#include virtual=\"a.html\" --&gt; \n</code>", "<code>&lt;!--#include file=\"a.html\" --&gt;</code>", "<code>&lt;!--[if IE]&gt;\n&lt;object classid=\"clsid:25336920-03F9-11CF-8FD0-00AA00686F13\" data=\"some.html\"&gt;\n&lt;p&gt;backup content&lt;/p&gt;\n&lt;/object&gt;\n&lt;![endif]--&gt;\n\n&lt;!--[if !IE]&gt; &lt;--&gt;\n&lt;object type=\"text/html\" data=\"some.html\"&gt;\n&lt;p&gt;backup content&lt;/p&gt;\n&lt;/object&gt;\n&lt;!--&gt; &lt;![endif]--&gt;\n</code>", "<code>&lt;object&gt;</code>", "<code>&lt;embed&gt;</code>", "<code>&lt;iframe&gt;</code>", "<code>seamless</code>", "<code>&lt;iframe src=\"/path/to/file.html\" seamless&gt;&lt;/iframe&gt;\n</code>", "<code>iframe[seamless] {\n    border: none;\n}\n</code>", "<code>target=\"_parent\"</code>", "<code>seamless</code>", "<code>RemoveHandler .html\nAddType application/x-httpd-php .php .html\n</code>", "<code>&lt;?php include('b.html'); ?&gt;\n</code>", "<code>.htaccess</code>", "<code>html</code>", "<code>.htaccess</code>", "<code>lolo</code>", "<code>...text before...\n&lt;OBJECT data=\"file_to_include.html\"&gt;\nWarning: file_to_include.html could not be included.\n&lt;/OBJECT&gt;\n...text after...\n</code>", "<code>&lt;!--#include virtual=\"filename.htm\"--&gt;\n</code>", "<code>$(document).ready(function () { alert($(\"#includedContent\").text()); }</code>", "<code>$(document).ready</code>", "<code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script src=\"jquery.js\"&gt;&lt;/script&gt;\n\n        &lt;script&gt;\n            (function ($) {\n                $.include = function (url) {\n                    $.ajax({\n                        url: url,\n                        async: false,\n                        success: function (result) {\n                            document.write(result);\n                        }\n                    });\n                };\n            }(jQuery));\n        &lt;/script&gt;\n\n        &lt;script&gt;\n            $(document).ready(function () {\n                alert($(\"#test\").text());\n            });\n        &lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;script&gt;$.include(\"include.inc\");&lt;/script&gt;\n    &lt;/body&gt;\n\n&lt;/html&gt;\n</code>", "<code>&lt;div id=\"test\"&gt;\n    There is no issue between this solution and jquery.\n&lt;/div&gt;\n</code>", "<code>b.html</code>", "<code>a.html</code>", "<code>head</code>", "<code>a.html</code>", "<code>&lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n</code>", "<code>b.html</code>", "<code>&lt;div id=\"b-placeholder\"&gt;\n\n&lt;/div&gt;\n\n&lt;script&gt;\n$(function(){\n  $(\"#b-placeholder\").load(\"b.html\");\n});\n&lt;/script&gt;\n</code>", "<code>www.yoursite.com/a.html?p=b.html\n</code>", "<code>&lt;html&gt; \n  &lt;head&gt; \n    &lt;script src=\"jquery.js\"&gt;&lt;/script&gt; \n    &lt;script&gt; \n    function GetURLParameter(sParam)\n    {\n      var sPageURL = window.location.search.substring(1);\n      var sURLVariables = sPageURL.split('&amp;');\n      for (var i = 0; i &lt; sURLVariables.length; i++) \n      {\n        var sParameterName = sURLVariables[i].split('=');\n        if (sParameterName[0] == sParam) \n        {\n            return sParameterName[1];\n        }\n      }\n    }\u200b\n    $(function(){\n      var pinc = GetURLParameter('p');\n      $(\"#includedContent\").load(pinc); \n    });\n    &lt;/script&gt; \n  &lt;/head&gt; \n\n  &lt;body&gt; \n     &lt;div id=\"includedContent\"&gt;&lt;/div&gt;\n  &lt;/body&gt; \n&lt;/html&gt;\n</code>", "<code> var link = document.createElement('link');\n if('import' in link){\n     //Run import code\n     link.setAttribute('rel','import');\n     link.setAttribute('href',importPath);\n     document.getElementsByTagName('head')[0].appendChild(link);\n     //Create a phantom element to append the import document text to\n     link = document.querySelector('link[rel=\"import\"]');\n     var docText = document.createElement('div');\n     docText.innerHTML = link.import;\n     element.appendChild(docText.cloneNode(true));\n } else {\n     //Imports aren't supported, so call polyfill\n     importPolyfill(importPath);\n }\n</code>", "<code>&lt;link rel=\"html-import\" href=\"./some-path/block.html\" &gt;\n</code>", "<code>&lt;link rel=\"html-import\" href=\"./some-other-path/other-block.html\" &gt;\n</code>", "<code>&lt;script async src=\"./src/html-import.js\"&gt;&lt;/script&gt;\n</code>", "<code>a.html</code>", "<code>&lt;link data-wi-src=\"b.html\" /&gt;\n&lt;!-- ... and somewhere below is ref to the script ... --&gt;\n&lt;script src=\"wm-html-include.js\"&gt; &lt;/script&gt;  \n</code>", "<code>open-source</code>", "<code>&lt;head&gt;\n   &lt;link rel=\"import\" href=\"warnings.html\"&gt;\n&lt;/head&gt;\n</code>", "<code>&lt;div class=\"banner\" title=\"banner.html\"&gt;&lt;/div&gt;\n</code>", "<code>$(\".banner\").each(function(){\n    var inc=$(this);\n    $.get(inc.attr(\"title\"), function(data){\n        inc.replaceWith(data);\n    });\n});\n</code>", "<code>banner.html</code>", "<code>banner.html</code>", "<code>&lt;body&gt;\n&lt;div w3-include-HTML=\"h1.html\"&gt;&lt;/div&gt;\n&lt;div w3-include-HTML=\"content.html\"&gt;&lt;/div&gt;\n&lt;script&gt;w3.includeHTML();&lt;/script&gt;\n&lt;/body&gt;\n</code>", "<code>&lt;div class=\"include\" data-include=\"componentX\" data-method=\"append\"&gt;&lt;/div&gt;\n&lt;div class=\"include\" data-include=\"componentX\" data-method=\"replace\"&gt;&lt;/div&gt;\n</code>", "<code>function includeComponents($) {\n    $('.include').each(function () {\n        var file = 'view/html/component/' + $(this).data('include') + '.html';\n        var dataComp = fs.readFileSync(file);\n        var htmlComp = dataComp.toString();\n        if ($(this).data('method') == \"replace\") {\n            $(this).replaceWith(htmlComp);\n        } else if ($(this).data('method') == \"append\") {\n            $(this).append(htmlComp);\n        }\n    })\n}\n\nfunction foo(){\n    fs.readFile('./view/html/index.html', function (err, data) {\n        if (err) throw err;\n        var html = data.toString();\n        var $ = cheerio.load(html);\n        includeComponents($);\n        ...\n    }\n}\n</code>", "<code>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta http-equiv=\"Content-Type\" content=\"text/application/html; charset=iso-8859-1\"&gt;\n  &lt;meta name=\"Author\" content=\"me\"&gt;\n  &lt;meta copyright=\"Copyright\" content= \"(C) 2013-present by me\" /&gt;\n  &lt;title&gt;Menu&lt;/title&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n&lt;!--\nvar F000, F001, F002, F003, F004, F005, F006, F007, F008, F009,\n    F010, F011, F012, F013, F014, F015, F016, F017, F018, F019;\nvar dat = new Array();\nvar form, script, write, str, tmp, dtno, indx, unde;\n\n/*\nThe \"F000\" and similar variables need to exist/be-declared.\nEach one will be associated with a different menu item,\nso decide on how many items maximum you are likely to need,\nwhen constructing that listing of them.  Here, there are 20.\n*/\n\n\nfunction initialize()\n{ window.name=\"Menu\";\n  form = document.getElementById('MENU');\n  for(indx=0; indx&lt;20; indx++)\n  { str = \"00\" + indx;\n    tmp = str.length - 3;\n    str = str.substr(tmp);\n    script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = str + \".js\";\n    form.appendChild(script);\n  }\n\n/*\nThe for() loop constructs some &lt;script&gt; objects\nand associates each one with a different simple file name,\nstarting with \"000.js\" and, here, going up to \"019.js\".\nIt won't matter which of those files exist or not.\nHowever, for each menu item you want to display on this\npage, you will need to ensure that its .js file does exist.\n\nThe short function below (inside HTML comment-block) is,\ngenerically, what the content of each one of the .js files looks like:\n&lt;!--\nfunction F000()\n{ return [\"Menu Item Name\", \"./URLofFile.htm\", \"Description string\"];\n}\n--&gt;\n\n(Continuing the remarks in the main menu.htm file)\nIt happens that each call of the form.appendChild() function\nwill cause the specified .js script-file to be loaded at that time.\nHowever, it takes a bit of time for the JavaScript in the file\nto be fully integrated into the web page, so one thing that I tried,\nbut it didn't work, was to write an \"onload\" event handler.\nThe handler was apparently being called before the just-loaded\nJavaScript had actually become accessible.\n\nNote that the name of the function in the .js file is the same as one\nof the the pre-defined variables like \"F000\".  When I tried to access\nthat function without declaring the variable, attempting to use an\n\"onload\" event handler, the JavaScript debugger claimed that the item\nwas \"not available\".  This is not something that can be tested-for!\nHowever, \"undefined\" IS something that CAN be tested-for.  Simply\ndeclaring them to exist automatically makes all of them \"undefined\".\nWhen the system finishes integrating a just-loaded .js script file,\nthe appropriate variable, like \"F000\", will become something other\nthan \"undefined\".  Thus it doesn't matter which .js files exist or\nnot, because we can simply test all the \"F000\"-type variables, and\nignore the ones that are \"undefined\".  More on that later.\n\nThe line below specifies a delay of 2 seconds, before any attempt\nis made to access the scripts that were loaded.  That DOES give the\nsystem enough time to fully integrate them into the web page.\n(If you have a really long list of menu items, or expect the page\nto be loaded by an old/slow computer, a longer delay may be needed.)\n*/\n\n  window.setTimeout(\"BuildMenu();\", 2000);\n  return;\n}\n\n\n//So here is the function that gets called after the 2-second delay  \nfunction BuildMenu()\n{ dtno = 0;    //index-counter for the \"dat\" array\n  for(indx=0; indx&lt;20; indx++)\n  { str = \"00\" + indx;\n    tmp = str.length - 3;\n    str = \"F\" + str.substr(tmp);\n    tmp = eval(str);\n    if(tmp != unde) // \"unde\" is deliberately undefined, for this test\n      dat[dtno++] = eval(str + \"()\");\n  }\n\n/*\nThe loop above simply tests each one of the \"F000\"-type variables, to\nsee if it is \"undefined\" or not.  Any actually-defined variable holds\na short function (from the \".js\" script-file as previously indicated).\nWe call the function to get some data for one menu item, and put that\ndata into an array named \"dat\".\n\nBelow, the array is sorted alphabetically (the default), and the\n\"dtno\" variable lets us know exactly how many menu items we will\nbe working with.  The loop that follows creates some \"&lt;span&gt;\" tags,\nand the the \"innerHTML\" property of each one is set to become an\n\"anchor\" or \"&lt;a&gt;\" tag, for a link to some other web page.  A description\nand a \"&lt;br /&gt;\" tag gets included for each link.  Finally, each new\n&lt;span&gt; object is appended to the menu-page's \"form\" object, and thereby\nends up being inserted into the middle of the overall text on the page.\n(For finer control of where you want to put text in a page, consider\nplacing something like this in the web page at an appropriate place,\nas preparation:\n&lt;div id=\"InsertHere\"&gt;&lt;/div&gt;\nYou could then use document.getElementById(\"InsertHere\") to get it into\na variable, for appending of &lt;span&gt; elements, the way a variable named\n\"form\" was used in this example menu page.\n\nNote: You don't have to specify the link in the same way I did\n(the type of link specified here only works if JavaScript is enabled).\nYou are free to use the more-standard \"&lt;a&gt;\" tag with the \"href\"\nproperty defined, if you wish.  But whichever way you go,\nyou need to make sure that any pages being linked actually exist!\n*/\n\n  dat.sort();\n  for(indx=0; indx&lt;dtno; indx++)\n  { write = document.createElement('span');\n    write.innerHTML = \"&lt;a onclick=\\\"window.open('\" + dat[indx][1] +\n                      \"', 'Menu');\\\" style=\\\"color:#0000ff;\" + \n                      \"text-decoration:underline;cursor:pointer;\\\"&gt;\" +\n                      dat[indx][0] + \"&lt;/a&gt; \" + dat[indx][2] + \"&lt;br /&gt;\";\n    form.appendChild(write);\n  }\n  return;\n}\n\n// --&gt;\n&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body onload=\"initialize();\" style=\"background-color:#a0a0a0; color:#000000; \n\nfont-family:sans-serif; font-size:11pt;\"&gt;\n&lt;h2&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;\n&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;MENU\n&lt;noscript&gt;&lt;br /&gt;&lt;span style=\"color:#ff0000;\"&gt;\nLinks here only work if&lt;br /&gt;\nyour browser's JavaScript&lt;br /&gt;\nsupport is enabled.&lt;/span&gt;&lt;br /&gt;&lt;/noscript&gt;&lt;/h2&gt;\nThese are the menu items you currently have available:&lt;br /&gt;\n&lt;br /&gt;\n&lt;form id=\"MENU\" action=\"\" onsubmit=\"return false;\"&gt;\n&lt;!-- Yes, the &lt;form&gt; object starts out completely empty --&gt;\n&lt;/form&gt;\nClick any link, and enjoy it as much as you like.&lt;br /&gt;\nThen use your browser's BACK button to return to this Menu,&lt;br /&gt;\nso you can click a different link for a different thing.&lt;br /&gt;\n&lt;br /&gt;\n&lt;br /&gt;\n&lt;small&gt;This file (web page) Copyright (c) 2013-present by me&lt;/small&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code>", "<code>$ cat footer.tpl\n&lt;hr&gt; &lt;footer&gt;   &lt;p&gt;&amp;copy; stackoverflow, inc 2015&lt;/p&gt; &lt;/footer&gt;\n</code>", "<code>$ cat dashboard.tpl\n%include footer\n</code>", "<code>&lt;?php require($DOCUMENT_ROOT . \"navigation.php\"); ?&gt;\n</code>", "<code>test.html</code>", "<code>test.html</code>", "<code>&lt;html&gt;\n&lt;body&gt;\n&lt;p&gt;Start&lt;/p&gt;\n\n&lt;p&gt;Beginning&lt;/p&gt;\n\n&lt;div&gt;\n&lt;script language=\"JavaScript\" src=\"sample.js\"&gt;&lt;/script&gt;\n&lt;/div&gt;\n\n&lt;p&gt;End&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code>", "<code>sample.js</code>", "<code>var data=\"Here is the imported text!\";\ndocument.write(data);\n</code>", "<code>.js</code>", "<code>.html</code>", "<code>.js</code>", "<code>.html</code>", "<code>&lt;?php\n    readfile(\"yourpath/yourpage.html\");\n?&gt;\n</code>", "<code>&lt;?php\n    echo\"&lt;html&gt;   \n          &lt;body&gt;\";\n?&gt; \n&lt;?php\n    include \"b.html\";\n?&gt;\n&lt;?php\n    echo\" &lt;/body&gt; \n        &lt;/html&gt;\";\n?&gt;\n</code>", "<code>&lt;div&gt;hi this is ur file :3&lt;div&gt;\n</code>"], "path": "stack.django"}, {"tags": ["python", "oop", "metaclass", "python-datamodel"], "creation_date": 1221804646, "body_markdown": "What are metaclasses and what do we use them for?", "last_edit_date": 1515712711, "up_vote_count": 4242, "link": "https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1221805570, "answer_id": 100037, "path": "stack.django.answer", "score": 286, "up_vote_count": 286, "is_accepted": false, "last_activity_date": 1491582099, "last_edit_date": 1491582099, "body_markdown": "*Note, this answer is for Python 2.x as it was written in 2008, metaclasses are slightly different in 3.x, see the comments.*\r\n\r\nMetaclasses are the secret sauce that make &#39;class&#39; work. The default metaclass for a new style object is called &#39;type&#39;.\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    class type(object)\r\n      |  type(object) -&gt; the object&#39;s type\r\n      |  type(name, bases, dict) -&gt; a new type\r\n\r\nMetaclasses take 3 args. &#39;**name**&#39;, &#39;**bases**&#39; and &#39;**dict**&#39;\r\n\r\nHere is where the secret starts. Look for where name, bases and the dict come from in this example class definition.\r\n\r\n    class ThisIsTheName(Bases, Are, Here):\r\n        All_the_code_here\r\n        def doesIs(create, a):\r\n            dict\r\n\r\nLets define a metaclass that will demonstrate how &#39;**class:**&#39; calls it.\r\n\r\n    def test_metaclass(name, bases, dict):\r\n        print &#39;The Class Name is&#39;, name\r\n        print &#39;The Class Bases are&#39;, bases\r\n        print &#39;The dict has&#39;, len(dict), &#39;elems, the keys are&#39;, dict.keys()\r\n    \r\n        return &quot;yellow&quot;\r\n    \r\n    class TestName(object, None, int, 1):\r\n        __metaclass__ = test_metaclass\r\n        foo = 1\r\n        def baz(self, arr):\r\n            pass\r\n    \r\n    print &#39;TestName = &#39;, repr(TestName)\r\n\r\n    # output =&gt; \r\n    The Class Name is TestName\r\n    The Class Bases are (&lt;type &#39;object&#39;&gt;, None, &lt;type &#39;int&#39;&gt;, 1)\r\n    The dict has 4 elems, the keys are [&#39;baz&#39;, &#39;__module__&#39;, &#39;foo&#39;, &#39;__metaclass__&#39;]\r\n    TestName =  &#39;yellow&#39;\r\n\r\n\r\nAnd now, an example that actually means something, this will automatically make the variables in the list &quot;attributes&quot; set on the class, and set to None.\r\n\r\n    def init_attributes(name, bases, dict):\r\n        if &#39;attributes&#39; in dict:\r\n            for attr in dict[&#39;attributes&#39;]:\r\n                dict[attr] = None\r\n    \r\n        return type(name, bases, dict)\r\n    \r\n    class Initialised(object):\r\n        __metaclass__ = init_attributes\r\n        attributes = [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]\r\n    \r\n    print &#39;foo =&gt;&#39;, Initialised.foo\r\n    # output=&gt;\r\n    foo =&gt; None\r\n\r\nNote that the magic behaviour that &#39;Initalised&#39; gains by having the metaclass `init_attributes` is not passed onto a subclass of Initalised.\r\n\r\nHere is an even more concrete example, showing how you can subclass &#39;type&#39; to make a metaclass that performs an action when the class is created. This is quite tricky:\r\n\r\n    class MetaSingleton(type):\r\n        instance = None\r\n        def __call__(cls, *args, **kw):\r\n            if cls.instance is None:\r\n                cls.instance = super(MetaSingleton, cls).__call__(*args, **kw)\r\n            return cls.instance\r\n\r\n     class Foo(object):\r\n         __metaclass__ = MetaSingleton\r\n     \r\n     a = Foo()\r\n     b = Foo()\r\n     assert a is b\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1221805978, "answer_id": 100059, "path": "stack.django.answer", "score": 80, "up_vote_count": 81, "is_accepted": false, "last_activity_date": 1265207814, "last_edit_date": 1265207814, "body_markdown": "I think the ONLamp introduction to metaclass programming is well written and gives a really good introduction to the topic despite being several years old already.\r\n\r\n[http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html][1]\r\n\r\nIn short: A class is a blueprint for the creation of an instance, a metaclass is a blueprint for the creation of a class. It can be easily seen that in Python classes need to be first-class objects too to enable this behavior.\r\n\r\nI&#39;ve never written one myself, but I think one of the nicest uses of metaclasses can be seen in the [Django framework][2]. The model classes use a metaclass approach to enable a declarative style of writing new models or form classes. While the metaclass is creating the class, all members get the possibility to customize the class itself.\r\n\r\n  - [Creating a new model][3]\r\n  - [The metaclass enabling this][4]\r\n\r\nThe thing that&#39;s left to say is: If you don&#39;t know what metaclasses are, the probability that you **will not need them** is 99%.\r\n\r\n\r\n  [1]: http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html\r\n  [2]: http://www.djangoproject.com/\r\n  [3]: http://docs.djangoproject.com/en/dev/intro/tutorial01/#id3\r\n  [4]: http://code.djangoproject.com/browser/django/trunk/django/db/models/base.py#L25"}, {"tags": [], "down_vote_count": 2, "creation_date": 1221806740, "answer_id": 100091, "path": "stack.django.answer", "score": 115, "up_vote_count": 117, "is_accepted": false, "last_activity_date": 1221806740, "body_markdown": "One use for metaclasses is adding new properties and methods to an instance automatically.\r\n\r\nFor example, if you look at [Django models][1], their definition looks a bit confusing. It looks as if you are only defining class properties:\r\n\r\n    class Person(models.Model):\r\n        first_name = models.CharField(max_length=30)\r\n        last_name = models.CharField(max_length=30)\r\n\r\nHowever, at runtime the Person objects are filled with all sorts of useful methods. See the [source][2] for some amazing metaclassery.\r\n\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/topics/db/models/\r\n  [2]: http://code.djangoproject.com/browser/django/trunk/django/db/models/base.py"}, {"tags": [], "down_vote_count": 13, "creation_date": 1221807718, "answer_id": 100146, "path": "stack.django.answer", "score": 1846, "up_vote_count": 1859, "is_accepted": true, "last_activity_date": 1470765322, "last_edit_date": 1495540052, "body_markdown": "A metaclass is the class of a class. Like a class defines how an instance of the class behaves, a metaclass defines how a class behaves. A class is an instance of a metaclass.\r\n\r\n[![metaclass diagram][1]][1]\r\n\r\nWhile in Python you can use arbitrary callables for metaclasses (like [Jerub][2] shows), the more useful approach is actually to make it an actual class itself. `type` is the usual metaclass in Python. In case you&#39;re wondering, yes, `type` is itself a class, and it is its own type. You won&#39;t be able to recreate something like `type` purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass `type`.\r\n\r\nA metaclass is most commonly used as a class-factory. Like you create an instance of the class by calling the class, Python creates a new class (when it executes the &#39;class&#39; statement) by calling the metaclass. Combined with the normal `__init__` and `__new__` methods, metaclasses therefore allow you to do &#39;extra things&#39; when creating a class, like registering the new class with some registry, or even replace the class with something else entirely.\r\n\r\nWhen the `class` statement is executed, Python first executes the body of the `class` statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the `__metaclass__` attribute of the class-to-be (if any) or the `__metaclass__` global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.\r\n\r\nHowever, metaclasses actually define the *type* of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods, in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. `type.__subclasses__()` is an example of a method on the `type` metaclass. You can also define the normal &#39;magic&#39; methods, like `__add__`, `__iter__` and `__getattr__`, to implement or change how the class behaves.\r\n\r\nHere&#39;s an aggregated example of the bits and pieces:\r\n\r\n    def make_hook(f):\r\n        &quot;&quot;&quot;Decorator to turn &#39;foo&#39; method into &#39;__foo__&#39;&quot;&quot;&quot;\r\n        f.is_hook = 1\r\n        return f\r\n    \r\n    class MyType(type):\r\n        def __new__(cls, name, bases, attrs):\r\n    \r\n            if name.startswith(&#39;None&#39;):\r\n                return None\r\n    \r\n            # Go over attributes and see if they should be renamed.\r\n            newattrs = {}\r\n            for attrname, attrvalue in attrs.iteritems():\r\n                if getattr(attrvalue, &#39;is_hook&#39;, 0):\r\n                    newattrs[&#39;__%s__&#39; % attrname] = attrvalue\r\n                else:\r\n                    newattrs[attrname] = attrvalue\r\n    \r\n            return super(MyType, cls).__new__(cls, name, bases, newattrs)\r\n    \r\n        def __init__(self, name, bases, attrs):\r\n            super(MyType, self).__init__(name, bases, attrs)\r\n    \r\n            # classregistry.register(self, self.interfaces)\r\n            print &quot;Would register class %s now.&quot; % self\r\n    \r\n        def __add__(self, other):\r\n            class AutoClass(self, other):\r\n                pass\r\n            return AutoClass\r\n            # Alternatively, to autogenerate the classname as well as the class:\r\n            # return type(self.__name__ + other.__name__, (self, other), {})\r\n    \r\n        def unregister(self):\r\n            # classregistry.unregister(self)\r\n            print &quot;Would unregister class %s now.&quot; % self\r\n    \r\n    class MyObject:\r\n        __metaclass__ = MyType\r\n    \r\n    \r\n    class NoneSample(MyObject):\r\n        pass\r\n    \r\n    # Will print &quot;NoneType None&quot;\r\n    print type(NoneSample), repr(NoneSample)\r\n    \r\n    class Example(MyObject):\r\n        def __init__(self, value):\r\n            self.value = value\r\n        @make_hook\r\n        def add(self, other):\r\n            return self.__class__(self.value + other.value)\r\n    \r\n    # Will unregister the class\r\n    Example.unregister()\r\n    \r\n    inst = Example(10)\r\n    # Will fail with an AttributeError\r\n    #inst.unregister()\r\n    \r\n    print inst + inst\r\n    class Sibling(MyObject):\r\n        pass\r\n    \r\n    ExampleSibling = Example + Sibling\r\n    # ExampleSibling is now a subclass of both Example and Sibling (with no\r\n    # content of its own) although it will believe it&#39;s called &#39;AutoClass&#39;\r\n    print ExampleSibling\r\n    print ExampleSibling.__mro__\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/QQ0OK.png\r\n  [2]: https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/100037#100037"}, {"tags": [], "down_vote_count": 1, "creation_date": 1308673826, "answer_id": 6428779, "path": "stack.django.answer", "score": 105, "up_vote_count": 106, "is_accepted": false, "last_activity_date": 1480356281, "last_edit_date": 1480356281, "body_markdown": "Others have explained how metaclasses work and how they fit into the Python type system. Here&#39;s an example of what they can be used for. In a testing framework I wrote, I wanted to keep track of the order in which classes were defined, so that I could later instantiate them in this order. I found it easiest to do this using a metaclass.\r\n\r\n    class MyMeta(type):\r\n    \r\n        counter = 0\r\n    \r\n        def __init__(cls, name, bases, dic):\r\n            type.__init__(cls, name, bases, dic)\r\n            cls._order = MyMeta.counter\r\n            MyMeta.counter += 1\r\n    \r\n    class MyType(object):              # Python 2\r\n        __metaclass__ = MyMeta\r\n\r\n    class MyType(metaclass=MyMeta):    # Python 3\r\n        pass\r\n\r\nAnything that&#39;s a subclass of `MyType` then gets a class attribute `_order` that records the order in which the classes were defined."}, {"tags": [], "down_vote_count": 2, "creation_date": 1309865390, "answer_id": 6581949, "path": "stack.django.answer", "score": 5448, "up_vote_count": 5450, "is_accepted": false, "last_activity_date": 1519253014, "last_edit_date": 1519253014, "body_markdown": "Classes as objects\r\n==================\r\n\r\nBefore understanding metaclasses, you need to master classes in Python. And Python has a very peculiar idea of what classes are, borrowed from the Smalltalk language.\r\n\r\nIn most languages, classes are just pieces of code that describe how to produce an object. That&#39;s kinda true in Python too:\r\n\r\n    &gt;&gt;&gt; class ObjectCreator(object):\r\n    ...       pass\r\n    ...\r\n\r\n    &gt;&gt;&gt; my_object = ObjectCreator()\r\n    &gt;&gt;&gt; print(my_object)\r\n    &lt;__main__.ObjectCreator object at 0x8974f2c&gt;\r\n\r\nBut classes are more than that in Python. Classes are objects too.\r\n\r\nYes, objects.\r\n\r\nAs soon as you use the keyword `class`, Python executes it and creates\r\nan OBJECT. The instruction\r\n\r\n    &gt;&gt;&gt; class ObjectCreator(object):\r\n    ...       pass\r\n    ...\r\n\r\ncreates in memory an object with the name &quot;ObjectCreator&quot;.\r\n\r\n**This object (the class) is itself capable of creating objects (the instances),\r\nand this is why it&#39;s a class**.\r\n\r\nBut still, it&#39;s an object, and therefore:\r\n\r\n- you can assign it to a variable\r\n- you can copy it\r\n- you can add attributes to it\r\n- you can pass it as a function parameter\r\n\r\ne.g.:\r\n\r\n    &gt;&gt;&gt; print(ObjectCreator) # you can print a class because it&#39;s an object\r\n    &lt;class &#39;__main__.ObjectCreator&#39;&gt;\r\n    &gt;&gt;&gt; def echo(o):\r\n    ...       print(o)\r\n    ...\r\n    &gt;&gt;&gt; echo(ObjectCreator) # you can pass a class as a parameter\r\n    &lt;class &#39;__main__.ObjectCreator&#39;&gt;\r\n    &gt;&gt;&gt; print(hasattr(ObjectCreator, &#39;new_attribute&#39;))\r\n    False\r\n    &gt;&gt;&gt; ObjectCreator.new_attribute = &#39;foo&#39; # you can add attributes to a class\r\n    &gt;&gt;&gt; print(hasattr(ObjectCreator, &#39;new_attribute&#39;))\r\n    True\r\n    &gt;&gt;&gt; print(ObjectCreator.new_attribute)\r\n    foo\r\n    &gt;&gt;&gt; ObjectCreatorMirror = ObjectCreator # you can assign a class to a variable\r\n    &gt;&gt;&gt; print(ObjectCreatorMirror.new_attribute)\r\n    foo\r\n    &gt;&gt;&gt; print(ObjectCreatorMirror())\r\n    &lt;__main__.ObjectCreator object at 0x8997b4c&gt;\r\n\r\n\r\nCreating classes dynamically\r\n============================\r\n\r\nSince classes are objects, you can create them on the fly, like any object.\r\n\r\nFirst, you can create a class in a function using `class`:\r\n\r\n    &gt;&gt;&gt; def choose_class(name):\r\n    ...     if name == &#39;foo&#39;:\r\n    ...         class Foo(object):\r\n    ...             pass\r\n    ...         return Foo # return the class, not an instance\r\n    ...     else:\r\n    ...         class Bar(object):\r\n    ...             pass\r\n    ...         return Bar\r\n    ...\r\n    &gt;&gt;&gt; MyClass = choose_class(&#39;foo&#39;)\r\n    &gt;&gt;&gt; print(MyClass) # the function returns a class, not an instance\r\n    &lt;class &#39;__main__.Foo&#39;&gt;\r\n    &gt;&gt;&gt; print(MyClass()) # you can create an object from this class\r\n    &lt;__main__.Foo object at 0x89c6d4c&gt;\r\n\r\n\r\nBut it&#39;s not so dynamic, since you still have to write the whole class yourself.\r\n\r\nSince classes are objects, they must be generated by something.\r\n\r\nWhen you use the `class` keyword, Python creates this object automatically. But as\r\nwith most things in Python, it gives you a way to do it manually.\r\n\r\nRemember the function `type`? The good old function that lets you know what\r\ntype an object is:\r\n\r\n    &gt;&gt;&gt; print(type(1))\r\n    &lt;type &#39;int&#39;&gt;\r\n    &gt;&gt;&gt; print(type(&quot;1&quot;))\r\n    &lt;type &#39;str&#39;&gt;\r\n    &gt;&gt;&gt; print(type(ObjectCreator))\r\n    &lt;type &#39;type&#39;&gt;\r\n    &gt;&gt;&gt; print(type(ObjectCreator()))\r\n    &lt;class &#39;__main__.ObjectCreator&#39;&gt;\r\n\r\nWell, [`type`][1] has a completely different ability, it can also create classes on the fly. `type` can take the description of a class as parameters,\r\nand return a class.\r\n\r\n(I  know, it&#39;s silly that the same function can have two completely different uses according to the parameters you pass to it. It&#39;s an issue due to backwards\r\ncompatibility in Python)\r\n\r\n`type` works this way:\r\n\r\n    type(name of the class,\r\n         tuple of the parent class (for inheritance, can be empty),\r\n         dictionary containing attributes names and values)\r\n\r\ne.g.:\r\n\r\n    &gt;&gt;&gt; class MyShinyClass(object):\r\n    ...       pass\r\n\r\ncan be created manually this way:\r\n\r\n    &gt;&gt;&gt; MyShinyClass = type(&#39;MyShinyClass&#39;, (), {}) # returns a class object\r\n    &gt;&gt;&gt; print(MyShinyClass)\r\n    &lt;class &#39;__main__.MyShinyClass&#39;&gt;\r\n    &gt;&gt;&gt; print(MyShinyClass()) # create an instance with the class\r\n    &lt;__main__.MyShinyClass object at 0x8997cec&gt;\r\n\r\nYou&#39;ll notice that we use &quot;MyShinyClass&quot; as the name of the class\r\nand as the variable to hold the class reference. They can be different,\r\nbut there is no reason to complicate things.\r\n\r\n`type` accepts a dictionary to define the attributes of the class. So:\r\n\r\n    &gt;&gt;&gt; class Foo(object):\r\n    ...       bar = True\r\n\r\nCan be translated to:\r\n\r\n    &gt;&gt;&gt; Foo = type(&#39;Foo&#39;, (), {&#39;bar&#39;:True})\r\n\r\nAnd used as a normal class:\r\n\r\n    &gt;&gt;&gt; print(Foo)\r\n    &lt;class &#39;__main__.Foo&#39;&gt;\r\n    &gt;&gt;&gt; print(Foo.bar)\r\n    True\r\n    &gt;&gt;&gt; f = Foo()\r\n    &gt;&gt;&gt; print(f)\r\n    &lt;__main__.Foo object at 0x8a9b84c&gt;\r\n    &gt;&gt;&gt; print(f.bar)\r\n    True\r\n\r\nAnd of course, you can inherit from it, so:\r\n\r\n    &gt;&gt;&gt;   class FooChild(Foo):\r\n    ...         pass\r\n\r\nwould be:\r\n\r\n    &gt;&gt;&gt; FooChild = type(&#39;FooChild&#39;, (Foo,), {})\r\n    &gt;&gt;&gt; print(FooChild)\r\n    &lt;class &#39;__main__.FooChild&#39;&gt;\r\n    &gt;&gt;&gt; print(FooChild.bar) # bar is inherited from Foo\r\n    True\r\n\r\nEventually you&#39;ll want to add methods to your class. Just define a function\r\nwith the proper signature and assign it as an attribute.\r\n\r\n    &gt;&gt;&gt; def echo_bar(self):\r\n    ...       print(self.bar)\r\n    ...\r\n    &gt;&gt;&gt; FooChild = type(&#39;FooChild&#39;, (Foo,), {&#39;echo_bar&#39;: echo_bar})\r\n    &gt;&gt;&gt; hasattr(Foo, &#39;echo_bar&#39;)\r\n    False\r\n    &gt;&gt;&gt; hasattr(FooChild, &#39;echo_bar&#39;)\r\n    True\r\n    &gt;&gt;&gt; my_foo = FooChild()\r\n    &gt;&gt;&gt; my_foo.echo_bar()\r\n    True\r\n\r\nAnd you can add even more methods after you dynamically create the class, just like adding methods to a normally created class object.\r\n\r\n    &gt;&gt;&gt; def echo_bar_more(self):\r\n    ...       print(&#39;yet another method&#39;)\r\n    ...\r\n    &gt;&gt;&gt; FooChild.echo_bar_more = echo_bar_more\r\n    &gt;&gt;&gt; hasattr(FooChild, &#39;echo_bar_more&#39;)\r\n    True\r\n\r\nYou see where we are going: in Python, classes are objects, and you can create a class on the fly, dynamically.\r\n\r\nThis is what Python does when you use the keyword `class`, and it does so by using a metaclass.\r\n\r\nWhat are metaclasses (finally)\r\n==============================\r\n\r\nMetaclasses are the &#39;stuff&#39; that creates classes.\r\n\r\nYou define classes in order to create objects, right?\r\n\r\nBut we learned that Python classes are objects.\r\n\r\nWell, metaclasses are what create these objects. They are the classes&#39; classes,\r\nyou can picture them this way:\r\n\r\n    MyClass = MetaClass()\r\n    MyObject = MyClass()\r\n\r\nYou&#39;ve seen that `type` lets you do something like this:\r\n\r\n    MyClass = type(&#39;MyClass&#39;, (), {})\r\n\r\nIt&#39;s because the function `type` is in fact a metaclass. `type` is the\r\nmetaclass Python uses to create all classes behind the scenes.\r\n\r\nNow you wonder why the heck is it written in lowercase, and not `Type`?\r\n\r\nWell, I guess it&#39;s a matter of consistency with `str`, the class that creates\r\nstrings objects, and `int` the class that creates integer objects. `type` is\r\njust the class that creates class objects.\r\n\r\nYou see that by checking the `__class__` attribute.\r\n\r\nEverything, and I mean everything, is an object in Python. That includes ints,\r\nstrings, functions and classes. All of them are objects. And all of them have\r\nbeen created from a class:\r\n\r\n    &gt;&gt;&gt; age = 35\r\n    &gt;&gt;&gt; age.__class__\r\n    &lt;type &#39;int&#39;&gt;\r\n    &gt;&gt;&gt; name = &#39;bob&#39;\r\n    &gt;&gt;&gt; name.__class__\r\n    &lt;type &#39;str&#39;&gt;\r\n    &gt;&gt;&gt; def foo(): pass\r\n    &gt;&gt;&gt; foo.__class__\r\n    &lt;type &#39;function&#39;&gt;\r\n    &gt;&gt;&gt; class Bar(object): pass\r\n    &gt;&gt;&gt; b = Bar()\r\n    &gt;&gt;&gt; b.__class__\r\n    &lt;class &#39;__main__.Bar&#39;&gt;\r\n\r\nNow, what is the `__class__` of any `__class__` ?\r\n\r\n    &gt;&gt;&gt; age.__class__.__class__\r\n    &lt;type &#39;type&#39;&gt;\r\n    &gt;&gt;&gt; name.__class__.__class__\r\n    &lt;type &#39;type&#39;&gt;\r\n    &gt;&gt;&gt; foo.__class__.__class__\r\n    &lt;type &#39;type&#39;&gt;\r\n    &gt;&gt;&gt; b.__class__.__class__\r\n    &lt;type &#39;type&#39;&gt;\r\n\r\nSo, a metaclass is just the stuff that creates class objects.\r\n\r\nYou can call it a &#39;class factory&#39; if you wish.\r\n\r\n`type` is the built-in metaclass Python uses, but of course, you can create your\r\nown metaclass.\r\n\r\nThe [`__metaclass__`][2] attribute\r\n==================================\r\n\r\nYou can add a `__metaclass__` attribute when you write a class:\r\n\r\n    class Foo(object):\r\n        __metaclass__ = something...\r\n        [...]\r\n\r\nIf you do so, Python will use the metaclass to create the class `Foo`.\r\n\r\nCareful, it&#39;s tricky.\r\n\r\nYou write `class Foo(object)` first, but the class object `Foo` is not created\r\nin memory yet.\r\n\r\nPython will look for `__metaclass__` in the class definition. If it finds it,\r\nit will use it to create the object class `Foo`. If it doesn&#39;t, it will use\r\n`type` to create the class.\r\n\r\nRead that several times.\r\n\r\nWhen you do:\r\n\r\n    class Foo(Bar):\r\n        pass\r\n\r\nPython does the following:\r\n\r\nIs there a `__metaclass__` attribute in `Foo`?\r\n\r\nIf yes, create in memory a class object (I said a class object, stay with me here), with the name `Foo` by using what is in `__metaclass__`.\r\n\r\nIf Python can&#39;t find `__metaclass__`, it will look for a `__metaclass__` at the MODULE level, and try to do the same (but only for classes that don&#39;t inherit anything, basically old-style classes).\r\n\r\nThen if it can&#39;t find any `__metaclass__` at all, it will use the `Bar`&#39;s (the first parent) own metaclass (which might be the default `type`) to create the class object.\r\n\r\nBe careful here that the `__metaclass__` attribute will not be inherited, the metaclass of the parent (`Bar.__class__`) will be. If `Bar` used a `__metaclass__` attribute that created `Bar` with `type()` (and not `type.__new__()`), the subclasses will not inherit that behavior.\r\n\r\nNow the big question is, what can you put in `__metaclass__` ?\r\n\r\nThe answer is: something that can create a class.\r\n\r\nAnd what can create a class? `type`, or anything that subclasses or uses it.\r\n\r\nCustom metaclasses\r\n==================\r\n\r\nThe main purpose of a metaclass is to change the class automatically,\r\nwhen it&#39;s created.\r\n\r\nYou usually do this for APIs, where you want to create classes matching the\r\ncurrent context.\r\n\r\nImagine a stupid example, where you decide that all classes in your module\r\nshould have their attributes written in uppercase. There are several ways to\r\ndo this, but one way is to set `__metaclass__` at the module level.\r\n\r\nThis way, all classes of this module will be created using this metaclass,\r\nand we just have to tell the metaclass to turn all attributes to uppercase.\r\n\r\nLuckily, `__metaclass__` can actually be any callable, it doesn&#39;t need to be a\r\nformal class (I know, something with &#39;class&#39; in its name doesn&#39;t need to be\r\na class, go figure... but it&#39;s helpful).\r\n\r\nSo we will start with a simple example, by using a function.\r\n\r\n    # the metaclass will automatically get passed the same argument\r\n    # that you usually pass to `type`\r\n    def upper_attr(future_class_name, future_class_parents, future_class_attr):\r\n        &quot;&quot;&quot;\r\n          Return a class object, with the list of its attribute turned\r\n          into uppercase.\r\n        &quot;&quot;&quot;\r\n\r\n        # pick up any attribute that doesn&#39;t start with &#39;__&#39; and uppercase it\r\n        uppercase_attr = {}\r\n        for name, val in future_class_attr.items():\r\n            if not name.startswith(&#39;__&#39;):\r\n                uppercase_attr[name.upper()] = val\r\n            else:\r\n                uppercase_attr[name] = val\r\n\r\n        # let `type` do the class creation\r\n        return type(future_class_name, future_class_parents, uppercase_attr)\r\n\r\n    __metaclass__ = upper_attr # this will affect all classes in the module\r\n\r\n    class Foo(): # global __metaclass__ won&#39;t work with &quot;object&quot; though\r\n        # but we can define __metaclass__ here instead to affect only this class\r\n        # and this will work with &quot;object&quot; children\r\n        bar = &#39;bip&#39;\r\n\r\n    print(hasattr(Foo, &#39;bar&#39;))\r\n    # Out: False\r\n    print(hasattr(Foo, &#39;BAR&#39;))\r\n    # Out: True\r\n\r\n    f = Foo()\r\n    print(f.BAR)\r\n    # Out: &#39;bip&#39;\r\n\r\nNow, let&#39;s do exactly the same, but using a real class for a metaclass:\r\n\r\n    # remember that `type` is actually a class like `str` and `int`\r\n    # so you can inherit from it\r\n    class UpperAttrMetaclass(type):\r\n        # __new__ is the method called before __init__\r\n        # it&#39;s the method that creates the object and returns it\r\n        # while __init__ just initializes the object passed as parameter\r\n        # you rarely use __new__, except when you want to control how the object\r\n        # is created.\r\n        # here the created object is the class, and we want to customize it\r\n        # so we override __new__\r\n        # you can do some stuff in __init__ too if you wish\r\n        # some advanced use involves overriding __call__ as well, but we won&#39;t\r\n        # see this\r\n        def __new__(upperattr_metaclass, future_class_name,\r\n                    future_class_parents, future_class_attr):\r\n\r\n            uppercase_attr = {}\r\n            for name, val in future_class_attr.items():\r\n                if not name.startswith(&#39;__&#39;):\r\n                    uppercase_attr[name.upper()] = val\r\n                else:\r\n                    uppercase_attr[name] = val\r\n\r\n            return type(future_class_name, future_class_parents, uppercase_attr)\r\n\r\n\r\nBut this is not really OOP. We call `type` directly and we don&#39;t override\r\nor call the parent `__new__`. Let&#39;s do it:\r\n\r\n    class UpperAttrMetaclass(type):\r\n\r\n        def __new__(upperattr_metaclass, future_class_name,\r\n                    future_class_parents, future_class_attr):\r\n\r\n            uppercase_attr = {}\r\n            for name, val in future_class_attr.items():\r\n                if not name.startswith(&#39;__&#39;):\r\n                    uppercase_attr[name.upper()] = val\r\n                else:\r\n                    uppercase_attr[name] = val\r\n\r\n            # reuse the type.__new__ method\r\n            # this is basic OOP, nothing magic in there\r\n            return type.__new__(upperattr_metaclass, future_class_name,\r\n                                future_class_parents, uppercase_attr)\r\n\r\nYou may have noticed the extra argument `upperattr_metaclass`. There is\r\nnothing special about it: `__new__` always receives the class it&#39;s defined in, as first parameter. Just like you have `self` for ordinary methods which receive the instance as first parameter, or the defining class for class methods.\r\n\r\nOf course, the names I used here are long for the sake of clarity, but like\r\nfor `self`, all the arguments have conventional names. So a real production\r\nmetaclass would look like this:\r\n\r\n    class UpperAttrMetaclass(type):\r\n\r\n        def __new__(cls, clsname, bases, dct):\r\n\r\n            uppercase_attr = {}\r\n            for name, val in dct.items():\r\n                if not name.startswith(&#39;__&#39;):\r\n                    uppercase_attr[name.upper()] = val\r\n                else:\r\n                    uppercase_attr[name] = val\r\n\r\n            return type.__new__(cls, clsname, bases, uppercase_attr)\r\n\r\nWe can make it even cleaner by using `super`, which will ease inheritance (because yes, you can have metaclasses, inheriting from metaclasses, inheriting from type):\r\n\r\n    class UpperAttrMetaclass(type):\r\n\r\n        def __new__(cls, clsname, bases, dct):\r\n\r\n            uppercase_attr = {}\r\n            for name, val in dct.items():\r\n                if not name.startswith(&#39;__&#39;):\r\n                    uppercase_attr[name.upper()] = val\r\n                else:\r\n                    uppercase_attr[name] = val\r\n\r\n            return super(UpperAttrMetaclass, cls).__new__(cls, clsname, bases, uppercase_attr)\r\n\r\nThat&#39;s it. There is really nothing more about metaclasses.\r\n\r\nThe reason behind the complexity of the code using metaclasses is not because\r\nof metaclasses, it&#39;s because you usually use metaclasses to do twisted stuff\r\nrelying on introspection, manipulating inheritance, vars such as `__dict__`, etc.\r\n\r\nIndeed, metaclasses are especially useful to do black magic, and therefore\r\ncomplicated stuff. But by themselves, they are simple:\r\n\r\n- intercept a class creation\r\n- modify the class\r\n- return the modified class\r\n\r\n\r\nWhy would you use metaclasses classes instead of functions?\r\n=============================================================\r\n\r\nSince `__metaclass__` can accept any callable, why would you use a class\r\nsince it&#39;s obviously more complicated?\r\n\r\nThere are several reasons to do so:\r\n\r\n- The intention is clear. When you read `UpperAttrMetaclass(type)`, you know\r\n  what&#39;s going to follow\r\n- You can use OOP. Metaclass can inherit from metaclass, override parent methods. Metaclasses can even use metaclasses.\r\n- Children of a class will be instances of its metaclass if you specified a metaclass-class, but not with a metaclass-function.\r\n- You can structure your code better. You never use metaclasses for something as\r\n  trivial as the above example. It&#39;s usually for something complicated. Having the\r\n  ability to make several methods and group them in one class is very useful\r\n  to make the code easier to read.\r\n- You can hook on `__new__`, `__init__` and `__call__`. Which will allow\r\n  you to do different stuff. Even if usually you can do it all in `__new__`,\r\n  some people are just more comfortable using `__init__`.\r\n- These are called metaclasses, damn it! It must mean something!\r\n\r\n\r\nWhy would you use metaclasses?\r\n========================================\r\n\r\nNow the big question. Why would you use some obscure error prone feature?\r\n\r\nWell, usually you don&#39;t:\r\n\r\n&gt; Metaclasses are deeper magic that\r\n&gt; 99% of users should never worry about.\r\n&gt; If you wonder whether you need them,\r\n&gt; you don&#39;t (the people who actually\r\n&gt; need them know with certainty that\r\n&gt; they need them, and don&#39;t need an\r\n&gt; explanation about why).\r\n\r\n  *Python Guru Tim Peters*\r\n\r\nThe main use case for a metaclass is creating an API. A typical example of this is the Django ORM.\r\n\r\nIt allows you to define something like this:\r\n\r\n    class Person(models.Model):\r\n        name = models.CharField(max_length=30)\r\n        age = models.IntegerField()\r\n\r\nBut if you do this:\r\n\r\n    guy = Person(name=&#39;bob&#39;, age=&#39;35&#39;)\r\n    print(guy.age)\r\n\r\nIt won&#39;t return an `IntegerField` object. It will return an `int`, and can even take it directly from the database.\r\n\r\nThis is possible because `models.Model` defines `__metaclass__` and\r\nit uses some magic that will turn the `Person` you just defined with simple statements\r\ninto a complex hook to a database field.\r\n\r\nDjango makes something complex look simple by exposing a simple API\r\nand using metaclasses, recreating code from this API to do the real job\r\nbehind the scenes.\r\n\r\nThe last word\r\n====================\r\n\r\nFirst, you know that classes are objects that can create instances.\r\n\r\nWell in fact, classes are themselves instances. Of metaclasses.\r\n\r\n    &gt;&gt;&gt; class Foo(object): pass\r\n    &gt;&gt;&gt; id(Foo)\r\n    142630324\r\n\r\nEverything is an object in Python, and they are all either instances of classes\r\nor instances of metaclasses.\r\n\r\nExcept for `type`.\r\n\r\n`type` is actually its own metaclass. This is not something you could\r\nreproduce in pure Python, and is done by cheating a little bit at the implementation\r\nlevel.\r\n\r\nSecondly, metaclasses are complicated. You may not want to use them for\r\nvery simple class alterations. You can change classes by using two different techniques:\r\n\r\n- [monkey patching](http://en.wikipedia.org/wiki/Monkey_patch)\r\n- class decorators\r\n\r\n99% of the time you need class alteration, you are better off using these.\r\n\r\nBut 98% of the time, you don&#39;t need class alteration at all.\r\n\r\n\r\n  [1]: http://docs.python.org/2/library/functions.html#type\r\n  [2]: http://docs.python.org/2/reference/datamodel.html?highlight=__metaclass__#__metaclass__"}, {"tags": [], "down_vote_count": 1, "creation_date": 1393276849, "answer_id": 21999253, "path": "stack.django.answer", "score": 36, "up_vote_count": 37, "is_accepted": false, "last_activity_date": 1453752517, "last_edit_date": 1453752517, "body_markdown": "A metaclass is a class that tells how (some) other class should be created.\r\n\r\nThis is a case where I saw metaclass as a solution to my problem:\r\nI had a really complicated problem, that probably could have been solved differently, but I chose to solve it using a metaclass.  Because of the complexity, it is one of the few modules I have written where the comments in the module surpass the amount of code that has been written.  Here it is...\r\n\r\n    #!/usr/bin/env python\r\n\r\n    # Copyright (C) 2013-2014 Craig Phillips.  All rights reserved.\r\n\r\n    # This requires some explaining.  The point of this metaclass excercise is to\r\n    # create a static abstract class that is in one way or another, dormant until\r\n    # queried.  I experimented with creating a singlton on import, but that did\r\n    # not quite behave how I wanted it to.  See now here, we are creating a class\r\n    # called GsyncOptions, that on import, will do nothing except state that its\r\n    # class creator is GsyncOptionsType.  This means, docopt doesn&#39;t parse any\r\n    # of the help document, nor does it start processing command line options.\r\n    # So importing this module becomes really efficient.  The complicated bit\r\n    # comes from requiring the GsyncOptions class to be static.  By that, I mean\r\n    # any property on it, may or may not exist, since they are not statically\r\n    # defined; so I can&#39;t simply just define the class with a whole bunch of\r\n    # properties that are @property @staticmethods.\r\n    #\r\n    # So here&#39;s how it works:\r\n    #\r\n    # Executing &#39;from libgsync.options import GsyncOptions&#39; does nothing more\r\n    # than load up this module, define the Type and the Class and import them\r\n    # into the callers namespace.  Simple.\r\n    #\r\n    # Invoking &#39;GsyncOptions.debug&#39; for the first time, or any other property\r\n    # causes the __metaclass__ __getattr__ method to be called, since the class\r\n    # is not instantiated as a class instance yet.  The __getattr__ method on\r\n    # the type then initialises the class (GsyncOptions) via the __initialiseClass\r\n    # method.  This is the first and only time the class will actually have its\r\n    # dictionary statically populated.  The docopt module is invoked to parse the\r\n    # usage document and generate command line options from it.  These are then\r\n    # paired with their defaults and what&#39;s in sys.argv.  After all that, we\r\n    # setup some dynamic properties that could not be defined by their name in\r\n    # the usage, before everything is then transplanted onto the actual class\r\n    # object (or static class GsyncOptions).\r\n    #\r\n    # Another piece of magic, is to allow command line options to be set in\r\n    # in their native form and be translated into argparse style properties.\r\n    #\r\n    # Finally, the GsyncListOptions class is actually where the options are\r\n    # stored.  This only acts as a mechanism for storing options as lists, to\r\n    # allow aggregation of duplicate options or options that can be specified\r\n    # multiple times.  The __getattr__ call hides this by default, returning the\r\n    # last item in a property&#39;s list.  However, if the entire list is required,\r\n    # calling the &#39;list()&#39; method on the GsyncOptions class, returns a reference\r\n    # to the GsyncListOptions class, which contains all of the same properties\r\n    # but as lists and without the duplication of having them as both lists and\r\n    # static singlton values.\r\n    #\r\n    # So this actually means that GsyncOptions is actually a static proxy class...\r\n    #\r\n    # ...And all this is neatly hidden within a closure for safe keeping.\r\n    def GetGsyncOptionsType():\r\n        class GsyncListOptions(object):\r\n            __initialised = False\r\n\r\n        class GsyncOptionsType(type):\r\n            def __initialiseClass(cls):\r\n                if GsyncListOptions._GsyncListOptions__initialised: return\r\n\r\n                from docopt import docopt\r\n                from libgsync.options import doc\r\n                from libgsync import __version__\r\n\r\n                options = docopt(\r\n                    doc.__doc__ % __version__,\r\n                    version = __version__,\r\n                    options_first = True\r\n                )\r\n\r\n                paths = options.pop(&#39;&lt;path&gt;&#39;, None)\r\n                setattr(cls, &quot;destination_path&quot;, paths.pop() if paths else None)\r\n                setattr(cls, &quot;source_paths&quot;, paths)\r\n                setattr(cls, &quot;options&quot;, options)\r\n\r\n                for k, v in options.iteritems():\r\n                    setattr(cls, k, v)\r\n\r\n                GsyncListOptions._GsyncListOptions__initialised = True\r\n\r\n            def list(cls):\r\n                return GsyncListOptions\r\n\r\n            def __getattr__(cls, name):\r\n                cls.__initialiseClass()\r\n                return getattr(GsyncListOptions, name)[-1]\r\n\r\n            def __setattr__(cls, name, value):\r\n                # Substitut option names: --an-option-name for an_option_name\r\n                import re\r\n                name = re.sub(r&#39;^__&#39;, &quot;&quot;, re.sub(r&#39;-&#39;, &quot;_&quot;, name))\r\n                listvalue = []\r\n\r\n                # Ensure value is converted to a list type for GsyncListOptions\r\n                if isinstance(value, list):\r\n                    if value:\r\n                        listvalue = [] + value\r\n                    else:\r\n                        listvalue = [ None ]\r\n                else:\r\n                    listvalue = [ value ]\r\n\r\n                type.__setattr__(GsyncListOptions, name, listvalue)\r\n\r\n        # Cleanup this module to prevent tinkering.\r\n        import sys\r\n        module = sys.modules[__name__]\r\n        del module.__dict__[&#39;GetGsyncOptionsType&#39;]\r\n\r\n        return GsyncOptionsType\r\n\r\n    # Our singlton abstract proxy class.\r\n    class GsyncOptions(object):\r\n        __metaclass__ = GetGsyncOptionsType()"}, {"tags": [], "down_vote_count": 0, "creation_date": 1439249289, "answer_id": 31930795, "path": "stack.django.answer", "score": 66, "up_vote_count": 66, "is_accepted": false, "last_activity_date": 1504063154, "last_edit_date": 1504063154, "body_markdown": "&gt; ## What are metaclasses? What do you use them for?\r\n\r\nTLDR: A metaclass instantiates and defines behavior for a class just like a class instantiates and defines behavior for an instance. \r\n\r\nPseudocode:\r\n\r\n    &gt;&gt;&gt; Class(...)\r\n    instance\r\n\r\nThe above should look familiar. Well, where does `Class` come from? It&#39;s an instance of a metaclass (also pseudocode):\r\n\r\n    &gt;&gt;&gt; Metaclass(...)\r\n    Class\r\n    \r\nIn real code, we can pass the default metaclass, `type`, everything we need to instantiate a class and we get a class:\r\n\r\n    &gt;&gt;&gt; type(&#39;Foo&#39;, (object,), {}) # requires a name, bases, and a namespace\r\n    &lt;class &#39;__main__.Foo&#39;&gt;\r\n\r\n## Putting it differently\r\n\r\n- A class is to an instance as a metaclass is to a class. \r\n\r\n  When we instantiate an object, we get an instance:\r\n\r\n        &gt;&gt;&gt; object()                          # instantiation of class\r\n        &lt;object object at 0x7f9069b4e0b0&gt;     # instance\r\n\r\n  Likewise, when we define a class explicitly with the default metaclass, `type`, we instantiate it:\r\n\r\n        &gt;&gt;&gt; type(&#39;Object&#39;, (object,), {})     # instantiation of metaclass\r\n        &lt;class &#39;__main__.Object&#39;&gt;             # instance\r\n\r\n\r\n- Put another way, a class is an instance of a metaclass:\r\n\r\n        &gt;&gt;&gt; isinstance(object, type)\r\n        True\r\n\r\n- Put a third way, a metaclass is a class&#39;s class.\r\n\r\n        &gt;&gt;&gt; type(object) == type\r\n        True\r\n        &gt;&gt;&gt; object.__class__\r\n        &lt;class &#39;type&#39;&gt;\r\n\r\n\r\nWhen you write a class definition and Python executes it, it uses a metaclass to instantiate the class object (which will, in turn, be used to instantiate instances of that class).\r\n\r\nJust as we can use class definitions to change how custom object instances behave, we can use a metaclass class definition to change the way a class object behaves.\r\n\r\nWhat can they be used for? From the [docs][1]:\r\n\r\n&gt; The potential uses for metaclasses are boundless. Some ideas that have been explored include logging, interface checking, automatic delegation, automatic property creation, proxies, frameworks, and automatic resource locking/synchronization.\r\n\r\nNevertheless, it is usually encouraged for users to avoid using metaclasses unless absolutely necessary.\r\n\r\n# You use a metaclass every time you create a class:\r\n\r\nWhen you write a class definition, for example, like this,\r\n\r\n    class Foo(object): \r\n        &#39;demo&#39;\r\n\r\nYou instantiate a class object.\r\n\r\n    &gt;&gt;&gt; Foo\r\n    &lt;class &#39;__main__.Foo&#39;&gt;\r\n    &gt;&gt;&gt; isinstance(Foo, type), isinstance(Foo, object)\r\n    (True, True)\r\n\r\nIt is the same as functionally calling `type` with the appropriate arguments and assigning the result to a variable of that name:\r\n\r\n    name = &#39;Foo&#39;\r\n    bases = (object,)\r\n    namespace = {&#39;__doc__&#39;: &#39;demo&#39;}\r\n    Foo = type(name, bases, namespace)\r\n\r\nNote, some things automatically get added to the `__dict__`, i.e., the namespace:\r\n\r\n    &gt;&gt;&gt; Foo.__dict__\r\n    dict_proxy({&#39;__dict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;Foo&#39; objects&gt;, \r\n    &#39;__module__&#39;: &#39;__main__&#39;, &#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; \r\n    of &#39;Foo&#39; objects&gt;, &#39;__doc__&#39;: &#39;demo&#39;})\r\n\r\nThe *metaclass* of the object we created, in both cases, is `type`. \r\n\r\n(A side-note on the contents of the class `__dict__`: `__module__` is there because classes must know where they are defined, and  `__dict__` and `__weakref__` are there because we don&#39;t define `__slots__` - if we [define `__slots__`][2] we&#39;ll save a bit of space in the instances, as we can disallow `__dict__` and `__weakref__` by excluding them. For example:\r\n\r\n    &gt;&gt;&gt; Baz = type(&#39;Bar&#39;, (object,), {&#39;__doc__&#39;: &#39;demo&#39;, &#39;__slots__&#39;: ()})\r\n    &gt;&gt;&gt; Baz.__dict__\r\n    mappingproxy({&#39;__doc__&#39;: &#39;demo&#39;, &#39;__slots__&#39;: (), &#39;__module__&#39;: &#39;__main__&#39;})\r\n\r\n... but I digress.)\r\n\r\n# We can extend `type` just like any other class definition:\r\n\r\nHere&#39;s the default `__repr__` of classes:\r\n\r\n    &gt;&gt;&gt; Foo\r\n    &lt;class &#39;__main__.Foo&#39;&gt;\r\n\r\nOne of the most valuable things we can do by default in writing a Python object is to provide it with a good `__repr__`. When we call `help(repr)` we learn that there&#39;s a good test for a `__repr__` that also requires a test for equality - `obj == eval(repr(obj))`. The following simple implementation of `__repr__` and `__eq__` for class instances of our type class provides us with a demonstration that may improve on the default `__repr__` of classes:\r\n\r\n    class Type(type):\r\n        def __repr__(cls):\r\n            &quot;&quot;&quot;\r\n            &gt;&gt;&gt; Baz\r\n            Type(&#39;Baz&#39;, (Foo, Bar,), {&#39;__module__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None})\r\n            &gt;&gt;&gt; eval(repr(Baz))\r\n            Type(&#39;Baz&#39;, (Foo, Bar,), {&#39;__module__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None})\r\n            &quot;&quot;&quot;\r\n            metaname = type(cls).__name__\r\n            name = cls.__name__\r\n            parents = &#39;, &#39;.join(b.__name__ for b in cls.__bases__)\r\n            if parents:\r\n                parents += &#39;,&#39;\r\n            namespace = &#39;, &#39;.join(&#39;: &#39;.join(\r\n              (repr(k), repr(v) if not isinstance(v, type) else v.__name__))\r\n                   for k, v in cls.__dict__.items())\r\n            return &#39;{0}(\\&#39;{1}\\&#39;, ({2}), {{{3}}})&#39;.format(metaname, name, parents, namespace)\r\n        def __eq__(cls, other):\r\n            &quot;&quot;&quot;\r\n            &gt;&gt;&gt; Baz == eval(repr(Baz))\r\n            True            \r\n            &quot;&quot;&quot;\r\n            return (cls.__name__, cls.__bases__, cls.__dict__) == (\r\n                    other.__name__, other.__bases__, other.__dict__)\r\n\r\n\r\nSo now when we create an object with this metaclass, the `__repr__` echoed on the command line provides a much less ugly sight than the default:\r\n\r\n    &gt;&gt;&gt; class Bar(object): pass\r\n    &gt;&gt;&gt; Baz = Type(&#39;Baz&#39;, (Foo, Bar,), {&#39;__module__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None})\r\n    &gt;&gt;&gt; Baz\r\n    Type(&#39;Baz&#39;, (Foo, Bar,), {&#39;__module__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None})\r\n\r\nWith a nice `__repr__` defined for the class instance, we have a stronger ability to debug our code. However, much further checking with `eval(repr(Class))` is unlikely (as functions would be rather impossible to eval from their default `__repr__`&#39;s).\r\n\r\n# An expected usage: `__prepare__` a namespace\r\n\r\nIf, for example, we want to know in what order a class&#39;s methods are created in, we could provide an ordered dict as the namespace of the class. We would do this with `__prepare__` which [returns the namespace dict for the class if it is implemented in Python 3][3]: \r\n\r\n    from collections import OrderedDict\r\n    \r\n    class OrderedType(Type):\r\n        @classmethod\r\n        def __prepare__(metacls, name, bases, **kwargs):\r\n            return OrderedDict()\r\n        def __new__(cls, name, bases, namespace, **kwargs):\r\n            result = Type.__new__(cls, name, bases, dict(namespace))\r\n            result.members = tuple(namespace)\r\n            return result\r\n\r\nAnd usage:\r\n\r\n    class OrderedMethodsObject(object, metaclass=OrderedType):\r\n        def method1(self): pass\r\n        def method2(self): pass\r\n        def method3(self): pass\r\n        def method4(self): pass\r\n\r\nAnd now we have a record of the order in which these methods (and other class attributes) were created:\r\n\r\n    &gt;&gt;&gt; OrderedMethodsObject.members\r\n    (&#39;__module__&#39;, &#39;__qualname__&#39;, &#39;method1&#39;, &#39;method2&#39;, &#39;method3&#39;, &#39;method4&#39;)\r\n\r\nNote, this example was adapted from the [documentation][1] - the new [enum in the standard library][4] does this.\r\n\r\n\r\nSo what we did was instantiate a metaclass by creating a class. We can also treat the metaclass as we would any other class. It has a method resolution order:\r\n\r\n    &gt;&gt;&gt; inspect.getmro(OrderedType)\r\n    (&lt;class &#39;__main__.OrderedType&#39;&gt;, &lt;class &#39;__main__.Type&#39;&gt;, &lt;class &#39;type&#39;&gt;, &lt;class &#39;object&#39;&gt;)\r\n\r\nAnd it has approximately the correct `repr` (which we can no longer eval unless we can find a way to represent our functions.):\r\n\r\n    &gt;&gt;&gt; OrderedMethodsObject\r\n    OrderedType(&#39;OrderedMethodsObject&#39;, (object,), {&#39;method1&#39;: &lt;function OrderedMethodsObject.method1 at 0x0000000002DB01E0&gt;, &#39;members&#39;: (&#39;__module__&#39;, &#39;__qualname__&#39;, &#39;method1&#39;, &#39;method2&#39;, &#39;method3&#39;, &#39;method4&#39;), &#39;method3&#39;: &lt;function OrderedMet\r\n    hodsObject.method3 at 0x0000000002DB02F0&gt;, &#39;method2&#39;: &lt;function OrderedMethodsObject.method2 at 0x0000000002DB0268&gt;, &#39;__module__&#39;: &#39;__main__&#39;, &#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; of &#39;OrderedMethodsObject&#39; objects&gt;, &#39;__doc__&#39;: None, &#39;__d\r\n    ict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;OrderedMethodsObject&#39; objects&gt;, &#39;method4&#39;: &lt;function OrderedMethodsObject.method4 at 0x0000000002DB0378&gt;})\r\n\r\n\r\n  [1]: https://docs.python.org/3/reference/datamodel.html#metaclass-example\r\n  [2]: https://stackoverflow.com/q/472000/541136\r\n  [3]: https://docs.python.org/3/reference/datamodel.html#preparing-the-class-namespace\r\n  [4]: https://github.com/python/cpython/blob/master/Lib/enum.py\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1456861714, "answer_id": 35732111, "path": "stack.django.answer", "score": 46, "up_vote_count": 46, "is_accepted": false, "last_activity_date": 1456861714, "body_markdown": "**Python 3 update**\r\n\r\nThere are (at this point) two key methods in a metaclass:\r\n\r\n- `__prepare__`, and\r\n- `__new__`\r\n\r\n`__prepare__` lets you supply a custom mapping (such as an `OrderedDict`) to be used as the namespace while the class is being created.  You must return an instance of whatever namespace you choose.  If you don&#39;t implement `__prepare__` a normal `dict` is used.\r\n\r\n`__new__` is responsible for the actual creation/modification of the final class.\r\n\r\nA bare-bones, do-nothing-extra metaclass would like:\r\n\r\n    class Meta(type):\r\n\r\n        def __prepare__(metaclass, cls, bases):\r\n            return dict()\r\n\r\n        def __new__(metacls, cls, bases, clsdict):\r\n            return super().__new__(metacls, cls, bases, clsdict)\r\n\r\nA simple example:\r\n\r\nSay you want some simple validation code to run on your attributes -- like it must always be an `int` or a `str`.  Without a metaclass, your class would look something like:\r\n\r\n    class Person:\r\n        weight = ValidateType(&#39;weight&#39;, int)\r\n        age = ValidateType(&#39;age&#39;, int)\r\n        name = ValidateType(&#39;name&#39;, str)\r\n\r\nAs you can see, you have to repeat the name of the attribute twice.  This makes typos possible along with irritating bugs.\r\n\r\nA simple metaclass can address that problem:\r\n\r\n    class Person(metaclass=Validator):\r\n        weight = ValidateType(int)\r\n        age = ValidateType(int)\r\n        name = ValidateType(str)\r\n\r\nThis is what the metaclass would look like (not using `__prepare__` since it is not needed):\r\n\r\n    class Validator(type):\r\n        def __new__(metacls, cls, bases, clsdict):\r\n            # search clsdict looking for ValidateType descriptors\r\n            for name, attr in clsdict.items():\r\n                if isinstance(attr, ValidateType):\r\n                    attr.name = name\r\n                    attr.attr = &#39;_&#39; + name\r\n            # create final class and return it\r\n            return super().__new__(metacls, cls, bases, clsdict)\r\n\r\nA sample run of:\r\n\r\n    p = Person()\r\n    p.weight = 9\r\n    print(p.weight)\r\n    p.weight = &#39;9&#39;\r\n\r\nproduces:\r\n\r\n    9\r\n    Traceback (most recent call last):\r\n      File &quot;simple_meta.py&quot;, line 36, in &lt;module&gt;\r\n        p.weight = &#39;9&#39;\r\n      File &quot;simple_meta.py&quot;, line 24, in __set__\r\n        (self.name, self.type, value))\r\n    TypeError: weight must be of type(s) &lt;class &#39;int&#39;&gt; (got &#39;9&#39;)\r\n\r\n---\r\n\r\n**Note**:  This example is simple enough it could have also been accomplished with a class decorator, but presumably an actual metaclass would be doing much more.\r\n\r\nThe &#39;ValidateType&#39; class for reference:\r\n\r\n    class ValidateType:\r\n        def __init__(self, type):\r\n            self.name = None  # will be set by metaclass\r\n            self.attr = None  # will be set by metaclass\r\n            self.type = type\r\n        def __get__(self, inst, cls):\r\n            if inst is None:\r\n                return self\r\n            else:\r\n                return inst.__dict__[self.attr]\r\n        def __set__(self, inst, value):\r\n            if not isinstance(value, self.type):\r\n                raise TypeError(&#39;%s must be of type(s) %s (got %r)&#39; %\r\n                        (self.name, self.type, value))\r\n            else:\r\n                inst.__dict__[self.attr] = value\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1470768584, "answer_id": 38858285, "path": "stack.django.answer", "score": 20, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1503984195, "last_edit_date": 1503984195, "body_markdown": "`type` is actually a `metaclass` -- a class that creates another classes.\r\nMost `metaclass` are the subclasses of `type`. The `metaclass` receives the `new` class as its first argument and provide access to class object with details as mentioned below:\r\n\r\n    &gt;&gt;&gt; class MetaClass(type):\r\n    ...     def __init__(cls, name, bases, attrs):\r\n    ...         print (&#39;class name: %s&#39; %name )\r\n    ...         print (&#39;Defining class %s&#39; %cls)\r\n    ...         print(&#39;Bases %s: &#39; %bases)\r\n    ...         print(&#39;Attributes&#39;)\r\n    ...         for (name, value) in attrs.items():\r\n    ...             print (&#39;%s :%r&#39; %(name, value))\r\n    ... \r\n\r\n    &gt;&gt;&gt; class NewClass(object, metaclass=MetaClass):\r\n    ...    get_choch=&#39;dairy&#39;\r\n    ... \r\n    class name: NewClass\r\n    Bases &lt;class &#39;object&#39;&gt;: \r\n    Defining class &lt;class &#39;NewClass&#39;&gt;\r\n    get_choch :&#39;dairy&#39;\r\n    __module__ :&#39;builtins&#39;\r\n    __qualname__ :&#39;NewClass&#39;\r\n\r\n`Note: `\r\n\r\nNotice that the class was not instantiated at any time; the simple act of creating the class triggered execution of the `metaclass`.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1476350486, "answer_id": 40017019, "path": "stack.django.answer", "score": 29, "up_vote_count": 29, "is_accepted": false, "last_activity_date": 1478920878, "last_edit_date": 1478920878, "body_markdown": "# Role of a metaclass&#39;s `__call__()` method when creating a class instance \r\n\r\nIf you&#39;ve done Python programming for more than a few months you&#39;ll eventually stumble upon code that looks like this:\r\n\r\n    # define a class\r\n    class SomeClass(object):\r\n        # ...\r\n        # some definition here ...\r\n        # ...\r\n\r\n    # create an instance of it\r\n    instance = SomeClass()\r\n\r\n    # then call the object as if it&#39;s a function\r\n    result = instance(&#39;foo&#39;, &#39;bar&#39;)\r\n\r\nThe latter is possible when you implement the `__call__()` magic method on the class.\r\n\r\n    class SomeClass(object):\r\n        # ...\r\n        # some definition here ...\r\n        # ...\r\n\r\n        def __call__(self, foo, bar):\r\n            return bar + foo\r\n\r\nThe `__call__()` method is invoked when an instance of a class is used as a callable. But as we&#39;ve seen from previous answers a class itself is an instance of a metaclass, so when we use the class as a callable (i.e. when we create an instance of it) we&#39;re actually calling its metaclass&#39;s `__call__()` method. At this point most Python programmers are a bit confused because they&#39;ve been told that when creating an instance like this `instance = SomeClass()` you&#39;re calling it&#39;s `__init__()` method. Some who&#39;ve dug a bit deeper know that before `__init__()` there&#39;s `__new__()`. Well, today another layer of truth is being revealed, before `__new__()` there&#39;s the metaclass&#39;s `__call__()`.\r\n\r\n\r\nLet&#39;s study the method call chain from specifically the perspective of creating an instance of a class.\r\n\r\nThis is a metaclass that logs exactly the moment before an instance is created and the moment it&#39;s about to return it.\r\n\r\n    class Meta_1(type):\r\n        def __call__(cls):\r\n            print &quot;Meta_1.__call__() before creating an instance of &quot;, cls\r\n            instance = super(Meta_1, cls).__call__()\r\n            print &quot;Meta_1.__call__() about to return instance.&quot;\r\n            return instance\r\n\r\nThis is a class that uses that metaclass \r\n\r\n    class Class_1(object):\r\n\r\n        __metaclass__ = Meta_1\r\n\r\n        def __new__(cls):\r\n            print &quot;Class_1.__new__() before creating an instance.&quot;\r\n            instance = super(Class_1, cls).__new__(cls)\r\n            print &quot;Class_1.__new__() about to return instance.&quot;\r\n            return instance\r\n\r\n        def __init__(self):\r\n            print &quot;entering Class_1.__init__() for instance initialization.&quot;\r\n            super(Class_1,self).__init__()\r\n            print &quot;exiting Class_1.__init__().&quot;\r\n\r\nAnd now let&#39;s create an instance of `Class_1`\r\n\r\n    instance = Class_1()\r\n    # Meta_1.__call__() before creating an instance of &lt;class &#39;__main__.Class_1&#39;&gt;.\r\n    # Class_1.__new__() before creating an instance.\r\n    # Class_1.__new__() about to return instance.\r\n    # entering Class_1.__init__() for instance initialization.\r\n    # exiting Class_1.__init__().\r\n    # Meta_1.__call__() about to return instance.\r\n\r\nThe code above doesn&#39;t actually do anything other than logging the task and then delegating the actual work to the parent (i.e. keeping the default behavior). So with `type` being `Meta_1`&#39;s parent class, we can imagine that this would be the pseudo implementation of `type.__call__()`:\r\n\r\n    class type:\r\n        def __call__(cls, *args, **kwarg):\r\n\r\n            # ... maybe a few things done to cls here\r\n\r\n            # then we call __new__() on the class to create an instance\r\n            instance = cls.__new__(cls, *args, **kwargs)\r\n\r\n            # ... maybe a few things done to the instance here\r\n\r\n            # then we initialize the instance with its __init__() method\r\n            instance.__init__(*args, **kwargs)\r\n\r\n            # ... maybe a few more things done to instance here\r\n\r\n            # then we return it\r\n            return instance\r\n   \r\nWe can see that the metaclass&#39;s `__call__()` method is the one that&#39;s called first. It then delegates creation of the instance to the class&#39;s `__new__()` method and initialization to the instance&#39;s `__init__()`. It&#39;s also the one that ultimately returns the instance.\r\n\r\nFrom the above it stems that the metaclass&#39;s `__call__()` is also given the opportunity to decide whether or not a call to `Class_1.__new__()` or `Class_1.__init__()` will eventually be made. Over the course of its execution it could actually return an object that hasn&#39;t been touched by either of these methods. Take for example this approach to the singleton pattern:\r\n\r\n\r\n    class Meta_2(type):\r\n        singletons = {}\r\n    \r\n        def __call__(cls, *args, **kwargs):\r\n            if cls in Meta_2.singletons:\r\n                # we return the only instance and skip a call to __new__() \r\n                # and __init__()\r\n                print (&quot;{} singleton returning from Meta_2.__call__(), &quot;\r\n                       &quot;skipping creation of new instance.&quot;.format(cls))\r\n                return Meta_2.singletons[cls]\r\n    \r\n            # else if the singleton isn&#39;t present we proceed as usual\r\n            print &quot;Meta_2.__call__() before creating an instance.&quot;\r\n            instance = super(Meta_2, cls).__call__(*args, **kwargs)\r\n            Meta_2.singletons[cls] = instance\r\n            print &quot;Meta_2.__call__() returning new instance.&quot;\r\n            return instance\r\n    \r\n    class Class_2(object):\r\n    \r\n        __metaclass__ = Meta_2\r\n    \r\n        def __new__(cls, *args, **kwargs):\r\n            print &quot;Class_2.__new__() before creating instance.&quot;\r\n            instance = super(Class_2, cls).__new__(cls)\r\n            print &quot;Class_2.__new__() returning instance.&quot;\r\n            return instance\r\n    \r\n        def __init__(self, *args, **kwargs):\r\n            print &quot;entering Class_2.__init__() for initialization.&quot;\r\n            super(Class_2, self).__init__()\r\n            print &quot;exiting Class_2.__init__().&quot;\r\n\r\nLet&#39;s observe what happens when repeatedly trying to create an object of type `Class_2`\r\n\r\n    a = Class_2()\r\n    # Meta_2.__call__() before creating an instance.\r\n    # Class_2.__new__() before creating instance.\r\n    # Class_2.__new__() returning instance.\r\n    # entering Class_2.__init__() for initialization.\r\n    # exiting Class_2.__init__().\r\n    # Meta_2.__call__() returning new instance.\r\n\r\n    b = Class_2()\r\n    # &lt;class &#39;__main__.Class_2&#39;&gt; singleton returning from Meta_2.__call__(), skipping creation of new instance.\r\n\r\n    c = Class_2()\r\n    # &lt;class &#39;__main__.Class_2&#39;&gt; singleton returning from Meta_2.__call__(), skipping creation of new instance.\r\n\r\n    a is b is c # True\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1482805261, "answer_id": 41338238, "path": "stack.django.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1483118920, "last_edit_date": 1483118920, "body_markdown": "## The tl;dr version\r\n\r\nThe `type(obj)` function gets you the type of an object. \r\n\r\n**The `type()` of a class is its *metaclass*.**\r\n\r\nTo use a metaclass:\r\n\r\n    class Foo(object):\r\n        __metaclass__ = MyMetaClass"}, {"tags": [], "down_vote_count": 8, "creation_date": 1496304113, "answer_id": 44301834, "path": "stack.django.answer", "score": -6, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1516865037, "last_edit_date": 1516865037, "body_markdown": "A meta class is essentially an abstract base class--a concept taught in most intermediate computer programming course. Class is related to meta class."}, {"tags": [], "down_vote_count": 0, "creation_date": 1499932690, "answer_id": 45074712, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1499933902, "last_edit_date": 1499933902, "body_markdown": "Python classes are themselves objects - as in instance - of their meta-class. \r\n\r\nThe default metaclass, which is applied when when you determine classes as:\r\n\r\n    class foo:\r\n        ...\r\n\r\nmeta class are used to apply some rule to an entire set of classes. For example, suppose you&#39;re building an ORM to access a database, and you want records from each table to be of a class mapped to that table (based on fields, business rules, etc..,), a possible use of metaclass is for instance, connection pool logic, which is share by all classes of record from all tables. Another use is logic to to support foreign keys, which involves multiple classes of records. \r\n\r\nwhen you define metaclass, you subclass type, and can overrided the following magic methods to insert your logic. \r\n\r\n    class somemeta(type):\r\n        __new__(mcs, name, bases, clsdict):\r\n          &quot;&quot;&quot;\r\n      mcs: is the base metaclass, in this case type.\r\n      name: name of the new class, as provided by the user.\r\n      bases: tuple of base classes \r\n      clsdict: a dictionary containing all methods and attributes defined on class\r\n      \r\n      you must return a class object by invoking the __new__ constructor on the base metaclass. \r\n     ie: \r\n        return type.__call__(mcs, name, bases, clsdict).\r\n\r\n      in the following case:\r\n\r\n      class foo(baseclass):\r\n            __metaclass__ = somemeta\r\n      \r\n      an_attr = 12\r\n      \r\n      def bar(self):\r\n          ...\r\n      \r\n      @classmethod\r\n      def foo(cls):\r\n          ...\r\n\r\n          arguments would be : ( somemeta, &quot;foo&quot;, (baseclass, baseofbase,..., object), {&quot;an_attr&quot;:12, &quot;bar&quot;: &lt;function&gt;, &quot;foo&quot;: &lt;bound class method&gt;}\r\n      \r\n          you can modify any of these values before passing on to type\r\n          &quot;&quot;&quot;\r\n          return type.__call__(mcs, name, bases, clsdict)\r\n\r\n\r\n        def __init__(self, name, bases, clsdict):\r\n          &quot;&quot;&quot; \r\n          called after type has been created. unlike in standard classes, __init__ method cannot modify the instance (cls) - and should be used for class validaton.\r\n          &quot;&quot;&quot;\r\n          pass\r\n          \r\n\r\n        def __prepare__():\r\n            &quot;&quot;&quot;\r\n            returns a dict or something that can be used as a namespace.\r\n            the type will then attach methods and attributes from class definition to it.\r\n\r\n            call order :\r\n\r\n            somemeta.__new__ -&gt;  type.__new__ -&gt; type.__init__ -&gt; somemeta.__init__ \r\n            &quot;&quot;&quot;\r\n            return dict()\r\n\r\n        def mymethod(cls):\r\n            &quot;&quot;&quot; works like a classmethod, but for class objects. Also, my method will not be visible to instances of cls.\r\n            &quot;&quot;&quot;\r\n            pass\r\n\r\nanyhow, those two are the most commonly used hooks. metaclassing is powerful, and above is nowhere near and exhaustive list of uses for metaclassing. \r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1511419589, "answer_id": 47449191, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1511419970, "last_edit_date": 1511419970, "body_markdown": "Metaclass. I can illustrate that.\r\nA metaclass is a class whose instances are classes. Like an &quot;ordinary&quot; class defines the behavior of the instances of the class, a metaclass defines the behavior of classes and their instances.\r\n\r\nMetaclasses are not supported by every object oriented programming language. Those programming language, which support metaclasses, considerably vary in way the implement them. Python is supporting them.\r\n\r\nSome programmers see metaclasses in Python as &quot;solutions waiting or looking for a problem&quot;.\r\n\r\nThere are numerous use cases for metaclasses. Just to name a few:\r\n\r\n    logging and profiling\r\n    interface checking\r\n    registering classes at creation time\r\n    automatically adding new methods\r\n    automatic property creation\r\n    proxies\r\n    automatic resource locking/synchronization.\r\n\r\nMetaclasses are defined like any other Python class, but they are classes that inherit from &quot;type&quot;. Another difference is, that a metaclass is called automatically, when the class statement using a metaclass ends. In other words: If no &quot;metaclass&quot; keyword is passed after the base classes (there may be no base classes either) of the class header, type() (i.e. __call__ of type) will be called. If a metaclass keyword is used on the other hand, the class assigned to it will be called instead of type.\r\n\r\nLet me show you by creating a very simple metaclass.\r\nIt&#39;s good for nothing, except that it will print the content of its arguments in the __new__ method and returns the results of the type.__new__ call:\r\n\r\nclass LittleMeta(type):\r\n    def __new__(cls, clsname, superclasses, attributedict):\r\n        print(&quot;clsname: &quot;, clsname)\r\n        print(&quot;superclasses: &quot;, superclasses)\r\n        print(&quot;attributedict: &quot;, attributedict)\r\n        return type.__new__(cls, clsname, superclasses, attributedict)\r\n\r\nI will use the metaclass &quot;LittleMeta&quot; in the following example:\r\n\r\nclass S:\r\n    pass\r\nclass A(S, metaclass=LittleMeta):\r\n\r\nclsname:  A\r\nsuperclasses:  (&lt;class &#39;__main__.S&#39;&gt;,)\r\nattributedict:  {&#39;__module__&#39;: &#39;__main__&#39;, &#39;__qualname__&#39;: &#39;A&#39;}\r\n    pass\r\na = A()\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1515748616, "answer_id": 48222963, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1515749420, "last_edit_date": 1515749420, "body_markdown": "The type() function can return the type of an object or create a new type, \r\n\r\nfor example, we can create a Hi class with the type() function and do not  need to use this way with class Hi(object):\r\n\r\n    def func(self, name=&#39;mike&#39;):\r\n        print(&#39;Hi, %s.&#39; % name)\r\n\r\n    Hi = type(&#39;Hi&#39;, (object,), dict(hi=func))\r\n    h = Hi()\r\n    h.hi()\r\n    Hi, mike.\r\n\r\n    type(Hi)\r\n    type\r\n\r\n    type(h)\r\n    __main__.Hi\r\n\r\n\r\nIn addition to using type() to create classes dynamically, you can control creation behavior of class and use metaclass.\r\n\r\nAccording to the Python object model, the class is the object, so the class must be an instance of another certain class.\r\nBy default, a Python class is instance of the type class. That is, type is metaclass of most of the built-in classes and metaclass of user-defined classes.\r\n\r\n    class ListMetaclass(type):\r\n        def __new__(cls, name, bases, attrs):\r\n            attrs[&#39;add&#39;] = lambda self, value: self.append(value)\r\n            return type.__new__(cls, name, bases, attrs)\r\n\r\n    class CustomList(list, metaclass=ListMetaclass):\r\n        pass\r\n\r\n    lst = CustomList()\r\n    lst.add(&#39;custom_list_1&#39;)\r\n    lst.add(&#39;custom_list_2&#39;)\r\n\r\n    lst\r\n    [&#39;custom_list_1&#39;, &#39;custom_list_2&#39;]\r\n\r\nMagic will take effect when we passed keyword arguments in metaclass, it indicates the Python interpreter to create the CustomList through ListMetaclass. __new__ (), at this point, we can modify the class definition, for example, and add a new method and then return the revised definition."}, {"tags": [], "down_vote_count": 0, "creation_date": 1518351025, "answer_id": 48731337, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1518351025, "body_markdown": "A metaclass is defined as &quot;the class of a class&quot;. Any class whose instances are themselves classes, is a metaclass. So, according to what we&#39;ve seen above, this makes type a metaclass - in fact, the most commonly used metaclass in Python, since it&#39;s the default metaclass of all classes.\r\n\r\nSince a metaclass is the class of a class, it is used to construct classes (just as a class is used to construct objects). But wait a second, don&#39;t we create classes with a standard class definition? Definitely, but what Python does under the hood is the following:\r\n\r\n 1. When it sees a class definition, Python executes it to collect the\r\n   attributes (including methods) into a dictionary\r\n 2. When the class definition is over, Python determines the metaclass of\r\n   the class. Let&#39;s call it Meta\r\n 3. Eventually, Python executes Meta(name, bases, dct), where:\r\n\r\n  -Meta is the metaclass, so this invocation is instantiating it.\r\n \r\n  -name is the name of the newly created class \r\n\r\n  -bases is a tuple of the class&#39;s base classes\r\n\r\n  -dct maps attribute names to objects, listing all of the class&#39;s attributes\r\n\r\n\r\nHow do we determine the metaclass of a class? Simply stated , if either a class or one of its bases has a __metaclass__ attribute , it&#39;s taken as the metaclass. Otherwise, type is the metaclass.\r\n\r\nSo what happens when we define:\r\n\r\n    class MyKlass(object):\r\n      foo = 2\r\nIs this: MyKlass has no __metaclass__ attribute, so type is used instead, and the class creation is done as:\r\n\r\n    MyKlass = type(name, bases, dct)\r\n\r\nWhich is consistent to what we&#39;ve seen in the beginning of the article. If, on the other hand, MyKlass does have a metaclass defined:\r\n\r\n    class MyKlass(object):\r\n      __metaclass__ = MyMeta\r\n      foo = 2\r\nThen the class creation is done as:\r\n\r\n    MyKlass = MyMeta(name, bases, dct)\r\n\r\nSo MyMeta should be implemented appropriately to support such calling form and return the new class. It&#39;s actually similar to writing a normal class with a pre-defined constructor signature.\r\n\r\no control the creation and initialization of the class in the metaclass, you can implement the metaclass&#39;s `__new__` method and/or `__init__` constructor. Most real-life metaclasses will probably override just one of them. `__new__` should be implemented when you want to control the creation of a new object (class in our case), and `__init__` should be implemented when you want to control the initialization of the new object after it has been created.\r\n\r\nSo when the call to MyMeta is done above, what happens under the hood is this:\r\n\r\n    MyKlass = MyMeta.__new__(MyMeta, name, bases, dct)\r\n    MyMeta.__init__(MyKlass, name, bases, dct)\r\nHere&#39;s a more concrete example that should demonstrate what&#39;s going on. Let&#39;s write down this definition for a metaclass\r\n\r\n    class MyMeta(type):\r\n        def __new__(meta, name, bases, dct):\r\n            print &#39;-----------------------------------&#39;\r\n            print &quot;Allocating memory for class&quot;, name\r\n            print meta\r\n            print bases\r\n            print dct\r\n            return super(MyMeta, meta).__new__(meta, name, bases, dct)\r\n        def __init__(cls, name, bases, dct):\r\n            print &#39;-----------------------------------&#39;\r\n            print &quot;Initializing class&quot;, name\r\n            print cls\r\n            print bases\r\n            print dct\r\n            super(MyMeta, cls).__init__(name, bases, dct)\r\nWhich executes with the following class definition:\r\n\r\n    class MyKlass(object):\r\n        __metaclass__ = MyMeta\r\n    \r\n        def foo(self, param):\r\n            pass\r\n    \r\n        barattr = 2\r\n\r\n"}], "title": "What are metaclasses in Python?", "view_count": 565728, "answer_count": 17, "code_snippet": ["<code>type</code>", "<code>type</code>", "<code>type</code>", "<code>type</code>", "<code>__init__</code>", "<code>__new__</code>", "<code>class</code>", "<code>class</code>", "<code>__metaclass__</code>", "<code>__metaclass__</code>", "<code>type.__subclasses__()</code>", "<code>type</code>", "<code>__add__</code>", "<code>__iter__</code>", "<code>__getattr__</code>", "<code>def make_hook(f):\n    \"\"\"Decorator to turn 'foo' method into '__foo__'\"\"\"\n    f.is_hook = 1\n    return f\n\nclass MyType(type):\n    def __new__(cls, name, bases, attrs):\n\n        if name.startswith('None'):\n            return None\n\n        # Go over attributes and see if they should be renamed.\n        newattrs = {}\n        for attrname, attrvalue in attrs.iteritems():\n            if getattr(attrvalue, 'is_hook', 0):\n                newattrs['__%s__' % attrname] = attrvalue\n            else:\n                newattrs[attrname] = attrvalue\n\n        return super(MyType, cls).__new__(cls, name, bases, newattrs)\n\n    def __init__(self, name, bases, attrs):\n        super(MyType, self).__init__(name, bases, attrs)\n\n        # classregistry.register(self, self.interfaces)\n        print \"Would register class %s now.\" % self\n\n    def __add__(self, other):\n        class AutoClass(self, other):\n            pass\n        return AutoClass\n        # Alternatively, to autogenerate the classname as well as the class:\n        # return type(self.__name__ + other.__name__, (self, other), {})\n\n    def unregister(self):\n        # classregistry.unregister(self)\n        print \"Would unregister class %s now.\" % self\n\nclass MyObject:\n    __metaclass__ = MyType\n\n\nclass NoneSample(MyObject):\n    pass\n\n# Will print \"NoneType None\"\nprint type(NoneSample), repr(NoneSample)\n\nclass Example(MyObject):\n    def __init__(self, value):\n        self.value = value\n    @make_hook\n    def add(self, other):\n        return self.__class__(self.value + other.value)\n\n# Will unregister the class\nExample.unregister()\n\ninst = Example(10)\n# Will fail with an AttributeError\n#inst.unregister()\n\nprint inst + inst\nclass Sibling(MyObject):\n    pass\n\nExampleSibling = Example + Sibling\n# ExampleSibling is now a subclass of both Example and Sibling (with no\n# content of its own) although it will believe it's called 'AutoClass'\nprint ExampleSibling\nprint ExampleSibling.__mro__\n</code>", "<code>NameError: name 'unregister' is not defined</code>", "<code>MyType</code>", "<code>&gt;&gt;&gt; class ObjectCreator(object):\n...       pass\n...\n\n&gt;&gt;&gt; my_object = ObjectCreator()\n&gt;&gt;&gt; print(my_object)\n&lt;__main__.ObjectCreator object at 0x8974f2c&gt;\n</code>", "<code>class</code>", "<code>&gt;&gt;&gt; class ObjectCreator(object):\n...       pass\n...\n</code>", "<code>&gt;&gt;&gt; print(ObjectCreator) # you can print a class because it's an object\n&lt;class '__main__.ObjectCreator'&gt;\n&gt;&gt;&gt; def echo(o):\n...       print(o)\n...\n&gt;&gt;&gt; echo(ObjectCreator) # you can pass a class as a parameter\n&lt;class '__main__.ObjectCreator'&gt;\n&gt;&gt;&gt; print(hasattr(ObjectCreator, 'new_attribute'))\nFalse\n&gt;&gt;&gt; ObjectCreator.new_attribute = 'foo' # you can add attributes to a class\n&gt;&gt;&gt; print(hasattr(ObjectCreator, 'new_attribute'))\nTrue\n&gt;&gt;&gt; print(ObjectCreator.new_attribute)\nfoo\n&gt;&gt;&gt; ObjectCreatorMirror = ObjectCreator # you can assign a class to a variable\n&gt;&gt;&gt; print(ObjectCreatorMirror.new_attribute)\nfoo\n&gt;&gt;&gt; print(ObjectCreatorMirror())\n&lt;__main__.ObjectCreator object at 0x8997b4c&gt;\n</code>", "<code>class</code>", "<code>&gt;&gt;&gt; def choose_class(name):\n...     if name == 'foo':\n...         class Foo(object):\n...             pass\n...         return Foo # return the class, not an instance\n...     else:\n...         class Bar(object):\n...             pass\n...         return Bar\n...\n&gt;&gt;&gt; MyClass = choose_class('foo')\n&gt;&gt;&gt; print(MyClass) # the function returns a class, not an instance\n&lt;class '__main__.Foo'&gt;\n&gt;&gt;&gt; print(MyClass()) # you can create an object from this class\n&lt;__main__.Foo object at 0x89c6d4c&gt;\n</code>", "<code>class</code>", "<code>type</code>", "<code>&gt;&gt;&gt; print(type(1))\n&lt;type 'int'&gt;\n&gt;&gt;&gt; print(type(\"1\"))\n&lt;type 'str'&gt;\n&gt;&gt;&gt; print(type(ObjectCreator))\n&lt;type 'type'&gt;\n&gt;&gt;&gt; print(type(ObjectCreator()))\n&lt;class '__main__.ObjectCreator'&gt;\n</code>", "<code>type</code>", "<code>type</code>", "<code>type</code>", "<code>type(name of the class,\n     tuple of the parent class (for inheritance, can be empty),\n     dictionary containing attributes names and values)\n</code>", "<code>&gt;&gt;&gt; class MyShinyClass(object):\n...       pass\n</code>", "<code>&gt;&gt;&gt; MyShinyClass = type('MyShinyClass', (), {}) # returns a class object\n&gt;&gt;&gt; print(MyShinyClass)\n&lt;class '__main__.MyShinyClass'&gt;\n&gt;&gt;&gt; print(MyShinyClass()) # create an instance with the class\n&lt;__main__.MyShinyClass object at 0x8997cec&gt;\n</code>", "<code>type</code>", "<code>&gt;&gt;&gt; class Foo(object):\n...       bar = True\n</code>", "<code>&gt;&gt;&gt; Foo = type('Foo', (), {'bar':True})\n</code>", "<code>&gt;&gt;&gt; print(Foo)\n&lt;class '__main__.Foo'&gt;\n&gt;&gt;&gt; print(Foo.bar)\nTrue\n&gt;&gt;&gt; f = Foo()\n&gt;&gt;&gt; print(f)\n&lt;__main__.Foo object at 0x8a9b84c&gt;\n&gt;&gt;&gt; print(f.bar)\nTrue\n</code>", "<code>&gt;&gt;&gt;   class FooChild(Foo):\n...         pass\n</code>", "<code>&gt;&gt;&gt; FooChild = type('FooChild', (Foo,), {})\n&gt;&gt;&gt; print(FooChild)\n&lt;class '__main__.FooChild'&gt;\n&gt;&gt;&gt; print(FooChild.bar) # bar is inherited from Foo\nTrue\n</code>", "<code>&gt;&gt;&gt; def echo_bar(self):\n...       print(self.bar)\n...\n&gt;&gt;&gt; FooChild = type('FooChild', (Foo,), {'echo_bar': echo_bar})\n&gt;&gt;&gt; hasattr(Foo, 'echo_bar')\nFalse\n&gt;&gt;&gt; hasattr(FooChild, 'echo_bar')\nTrue\n&gt;&gt;&gt; my_foo = FooChild()\n&gt;&gt;&gt; my_foo.echo_bar()\nTrue\n</code>", "<code>&gt;&gt;&gt; def echo_bar_more(self):\n...       print('yet another method')\n...\n&gt;&gt;&gt; FooChild.echo_bar_more = echo_bar_more\n&gt;&gt;&gt; hasattr(FooChild, 'echo_bar_more')\nTrue\n</code>", "<code>class</code>", "<code>MyClass = MetaClass()\nMyObject = MyClass()\n</code>", "<code>type</code>", "<code>MyClass = type('MyClass', (), {})\n</code>", "<code>type</code>", "<code>type</code>", "<code>Type</code>", "<code>str</code>", "<code>int</code>", "<code>type</code>", "<code>__class__</code>", "<code>&gt;&gt;&gt; age = 35\n&gt;&gt;&gt; age.__class__\n&lt;type 'int'&gt;\n&gt;&gt;&gt; name = 'bob'\n&gt;&gt;&gt; name.__class__\n&lt;type 'str'&gt;\n&gt;&gt;&gt; def foo(): pass\n&gt;&gt;&gt; foo.__class__\n&lt;type 'function'&gt;\n&gt;&gt;&gt; class Bar(object): pass\n&gt;&gt;&gt; b = Bar()\n&gt;&gt;&gt; b.__class__\n&lt;class '__main__.Bar'&gt;\n</code>", "<code>__class__</code>", "<code>__class__</code>", "<code>&gt;&gt;&gt; age.__class__.__class__\n&lt;type 'type'&gt;\n&gt;&gt;&gt; name.__class__.__class__\n&lt;type 'type'&gt;\n&gt;&gt;&gt; foo.__class__.__class__\n&lt;type 'type'&gt;\n&gt;&gt;&gt; b.__class__.__class__\n&lt;type 'type'&gt;\n</code>", "<code>type</code>", "<code>__metaclass__</code>", "<code>__metaclass__</code>", "<code>class Foo(object):\n    __metaclass__ = something...\n    [...]\n</code>", "<code>Foo</code>", "<code>class Foo(object)</code>", "<code>Foo</code>", "<code>__metaclass__</code>", "<code>Foo</code>", "<code>type</code>", "<code>class Foo(Bar):\n    pass\n</code>", "<code>__metaclass__</code>", "<code>Foo</code>", "<code>Foo</code>", "<code>__metaclass__</code>", "<code>__metaclass__</code>", "<code>__metaclass__</code>", "<code>__metaclass__</code>", "<code>Bar</code>", "<code>type</code>", "<code>__metaclass__</code>", "<code>Bar.__class__</code>", "<code>Bar</code>", "<code>__metaclass__</code>", "<code>Bar</code>", "<code>type()</code>", "<code>type.__new__()</code>", "<code>__metaclass__</code>", "<code>type</code>", "<code>__metaclass__</code>", "<code>__metaclass__</code>", "<code># the metaclass will automatically get passed the same argument\n# that you usually pass to `type`\ndef upper_attr(future_class_name, future_class_parents, future_class_attr):\n    \"\"\"\n      Return a class object, with the list of its attribute turned\n      into uppercase.\n    \"\"\"\n\n    # pick up any attribute that doesn't start with '__' and uppercase it\n    uppercase_attr = {}\n    for name, val in future_class_attr.items():\n        if not name.startswith('__'):\n            uppercase_attr[name.upper()] = val\n        else:\n            uppercase_attr[name] = val\n\n    # let `type` do the class creation\n    return type(future_class_name, future_class_parents, uppercase_attr)\n\n__metaclass__ = upper_attr # this will affect all classes in the module\n\nclass Foo(): # global __metaclass__ won't work with \"object\" though\n    # but we can define __metaclass__ here instead to affect only this class\n    # and this will work with \"object\" children\n    bar = 'bip'\n\nprint(hasattr(Foo, 'bar'))\n# Out: False\nprint(hasattr(Foo, 'BAR'))\n# Out: True\n\nf = Foo()\nprint(f.BAR)\n# Out: 'bip'\n</code>", "<code># remember that `type` is actually a class like `str` and `int`\n# so you can inherit from it\nclass UpperAttrMetaclass(type):\n    # __new__ is the method called before __init__\n    # it's the method that creates the object and returns it\n    # while __init__ just initializes the object passed as parameter\n    # you rarely use __new__, except when you want to control how the object\n    # is created.\n    # here the created object is the class, and we want to customize it\n    # so we override __new__\n    # you can do some stuff in __init__ too if you wish\n    # some advanced use involves overriding __call__ as well, but we won't\n    # see this\n    def __new__(upperattr_metaclass, future_class_name,\n                future_class_parents, future_class_attr):\n\n        uppercase_attr = {}\n        for name, val in future_class_attr.items():\n            if not name.startswith('__'):\n                uppercase_attr[name.upper()] = val\n            else:\n                uppercase_attr[name] = val\n\n        return type(future_class_name, future_class_parents, uppercase_attr)\n</code>", "<code>type</code>", "<code>__new__</code>", "<code>class UpperAttrMetaclass(type):\n\n    def __new__(upperattr_metaclass, future_class_name,\n                future_class_parents, future_class_attr):\n\n        uppercase_attr = {}\n        for name, val in future_class_attr.items():\n            if not name.startswith('__'):\n                uppercase_attr[name.upper()] = val\n            else:\n                uppercase_attr[name] = val\n\n        # reuse the type.__new__ method\n        # this is basic OOP, nothing magic in there\n        return type.__new__(upperattr_metaclass, future_class_name,\n                            future_class_parents, uppercase_attr)\n</code>", "<code>upperattr_metaclass</code>", "<code>__new__</code>", "<code>self</code>", "<code>self</code>", "<code>class UpperAttrMetaclass(type):\n\n    def __new__(cls, clsname, bases, dct):\n\n        uppercase_attr = {}\n        for name, val in dct.items():\n            if not name.startswith('__'):\n                uppercase_attr[name.upper()] = val\n            else:\n                uppercase_attr[name] = val\n\n        return type.__new__(cls, clsname, bases, uppercase_attr)\n</code>", "<code>super</code>", "<code>class UpperAttrMetaclass(type):\n\n    def __new__(cls, clsname, bases, dct):\n\n        uppercase_attr = {}\n        for name, val in dct.items():\n            if not name.startswith('__'):\n                uppercase_attr[name.upper()] = val\n            else:\n                uppercase_attr[name] = val\n\n        return super(UpperAttrMetaclass, cls).__new__(cls, clsname, bases, uppercase_attr)\n</code>", "<code>__dict__</code>", "<code>__metaclass__</code>", "<code>UpperAttrMetaclass(type)</code>", "<code>__new__</code>", "<code>__init__</code>", "<code>__call__</code>", "<code>__new__</code>", "<code>__init__</code>", "<code>class Person(models.Model):\n    name = models.CharField(max_length=30)\n    age = models.IntegerField()\n</code>", "<code>guy = Person(name='bob', age='35')\nprint(guy.age)\n</code>", "<code>IntegerField</code>", "<code>int</code>", "<code>models.Model</code>", "<code>__metaclass__</code>", "<code>Person</code>", "<code>&gt;&gt;&gt; class Foo(object): pass\n&gt;&gt;&gt; id(Foo)\n142630324\n</code>", "<code>type</code>", "<code>type</code>", "<code>models.Model</code>", "<code>__metaclass__</code>", "<code>class Model(metaclass=ModelBase):</code>", "<code>ModelBase</code>", "<code>__metaclass__</code>", "<code>Bar.__class__</code>", "<code>Bar</code>", "<code>__metaclass__</code>", "<code>Bar</code>", "<code>type()</code>", "<code>type.__new__()</code>", "<code>class type(object)\n  |  type(object) -&gt; the object's type\n  |  type(name, bases, dict) -&gt; a new type\n</code>", "<code>class ThisIsTheName(Bases, Are, Here):\n    All_the_code_here\n    def doesIs(create, a):\n        dict\n</code>", "<code>def test_metaclass(name, bases, dict):\n    print 'The Class Name is', name\n    print 'The Class Bases are', bases\n    print 'The dict has', len(dict), 'elems, the keys are', dict.keys()\n\n    return \"yellow\"\n\nclass TestName(object, None, int, 1):\n    __metaclass__ = test_metaclass\n    foo = 1\n    def baz(self, arr):\n        pass\n\nprint 'TestName = ', repr(TestName)\n\n# output =&gt; \nThe Class Name is TestName\nThe Class Bases are (&lt;type 'object'&gt;, None, &lt;type 'int'&gt;, 1)\nThe dict has 4 elems, the keys are ['baz', '__module__', 'foo', '__metaclass__']\nTestName =  'yellow'\n</code>", "<code>def init_attributes(name, bases, dict):\n    if 'attributes' in dict:\n        for attr in dict['attributes']:\n            dict[attr] = None\n\n    return type(name, bases, dict)\n\nclass Initialised(object):\n    __metaclass__ = init_attributes\n    attributes = ['foo', 'bar', 'baz']\n\nprint 'foo =&gt;', Initialised.foo\n# output=&gt;\nfoo =&gt; None\n</code>", "<code>init_attributes</code>", "<code>class MetaSingleton(type):\n    instance = None\n    def __call__(cls, *args, **kw):\n        if cls.instance is None:\n            cls.instance = super(MetaSingleton, cls).__call__(*args, **kw)\n        return cls.instance\n\n class Foo(object):\n     __metaclass__ = MetaSingleton\n\n a = Foo()\n b = Foo()\n assert a is b\n</code>", "<code>class Foo(object)</code>", "<code>class Foo(metaclass=MetaSingleton)</code>", "<code>class Person(models.Model):\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n</code>", "<code>class MyMeta(type):\n\n    counter = 0\n\n    def __init__(cls, name, bases, dic):\n        type.__init__(cls, name, bases, dic)\n        cls._order = MyMeta.counter\n        MyMeta.counter += 1\n\nclass MyType(object):              # Python 2\n    __metaclass__ = MyMeta\n\nclass MyType(metaclass=MyMeta):    # Python 3\n    pass\n</code>", "<code>MyType</code>", "<code>_order</code>", "<code>&gt;&gt;&gt; Class(...)\ninstance\n</code>", "<code>Class</code>", "<code>&gt;&gt;&gt; Metaclass(...)\nClass\n</code>", "<code>type</code>", "<code>&gt;&gt;&gt; type('Foo', (object,), {}) # requires a name, bases, and a namespace\n&lt;class '__main__.Foo'&gt;\n</code>", "<code>&gt;&gt;&gt; object()                          # instantiation of class\n&lt;object object at 0x7f9069b4e0b0&gt;     # instance\n</code>", "<code>type</code>", "<code>&gt;&gt;&gt; type('Object', (object,), {})     # instantiation of metaclass\n&lt;class '__main__.Object'&gt;             # instance\n</code>", "<code>&gt;&gt;&gt; isinstance(object, type)\nTrue\n</code>", "<code>&gt;&gt;&gt; type(object) == type\nTrue\n&gt;&gt;&gt; object.__class__\n&lt;class 'type'&gt;\n</code>", "<code>class Foo(object): \n    'demo'\n</code>", "<code>&gt;&gt;&gt; Foo\n&lt;class '__main__.Foo'&gt;\n&gt;&gt;&gt; isinstance(Foo, type), isinstance(Foo, object)\n(True, True)\n</code>", "<code>type</code>", "<code>name = 'Foo'\nbases = (object,)\nnamespace = {'__doc__': 'demo'}\nFoo = type(name, bases, namespace)\n</code>", "<code>__dict__</code>", "<code>&gt;&gt;&gt; Foo.__dict__\ndict_proxy({'__dict__': &lt;attribute '__dict__' of 'Foo' objects&gt;, \n'__module__': '__main__', '__weakref__': &lt;attribute '__weakref__' \nof 'Foo' objects&gt;, '__doc__': 'demo'})\n</code>", "<code>type</code>", "<code>__dict__</code>", "<code>__module__</code>", "<code>__dict__</code>", "<code>__weakref__</code>", "<code>__slots__</code>", "<code>__slots__</code>", "<code>__dict__</code>", "<code>__weakref__</code>", "<code>&gt;&gt;&gt; Baz = type('Bar', (object,), {'__doc__': 'demo', '__slots__': ()})\n&gt;&gt;&gt; Baz.__dict__\nmappingproxy({'__doc__': 'demo', '__slots__': (), '__module__': '__main__'})\n</code>", "<code>type</code>", "<code>__repr__</code>", "<code>&gt;&gt;&gt; Foo\n&lt;class '__main__.Foo'&gt;\n</code>", "<code>__repr__</code>", "<code>help(repr)</code>", "<code>__repr__</code>", "<code>obj == eval(repr(obj))</code>", "<code>__repr__</code>", "<code>__eq__</code>", "<code>__repr__</code>", "<code>class Type(type):\n    def __repr__(cls):\n        \"\"\"\n        &gt;&gt;&gt; Baz\n        Type('Baz', (Foo, Bar,), {'__module__': '__main__', '__doc__': None})\n        &gt;&gt;&gt; eval(repr(Baz))\n        Type('Baz', (Foo, Bar,), {'__module__': '__main__', '__doc__': None})\n        \"\"\"\n        metaname = type(cls).__name__\n        name = cls.__name__\n        parents = ', '.join(b.__name__ for b in cls.__bases__)\n        if parents:\n            parents += ','\n        namespace = ', '.join(': '.join(\n          (repr(k), repr(v) if not isinstance(v, type) else v.__name__))\n               for k, v in cls.__dict__.items())\n        return '{0}(\\'{1}\\', ({2}), {{{3}}})'.format(metaname, name, parents, namespace)\n    def __eq__(cls, other):\n        \"\"\"\n        &gt;&gt;&gt; Baz == eval(repr(Baz))\n        True            \n        \"\"\"\n        return (cls.__name__, cls.__bases__, cls.__dict__) == (\n                other.__name__, other.__bases__, other.__dict__)\n</code>", "<code>__repr__</code>", "<code>&gt;&gt;&gt; class Bar(object): pass\n&gt;&gt;&gt; Baz = Type('Baz', (Foo, Bar,), {'__module__': '__main__', '__doc__': None})\n&gt;&gt;&gt; Baz\nType('Baz', (Foo, Bar,), {'__module__': '__main__', '__doc__': None})\n</code>", "<code>__repr__</code>", "<code>eval(repr(Class))</code>", "<code>__repr__</code>", "<code>__prepare__</code>", "<code>__prepare__</code>", "<code>from collections import OrderedDict\n\nclass OrderedType(Type):\n    @classmethod\n    def __prepare__(metacls, name, bases, **kwargs):\n        return OrderedDict()\n    def __new__(cls, name, bases, namespace, **kwargs):\n        result = Type.__new__(cls, name, bases, dict(namespace))\n        result.members = tuple(namespace)\n        return result\n</code>", "<code>class OrderedMethodsObject(object, metaclass=OrderedType):\n    def method1(self): pass\n    def method2(self): pass\n    def method3(self): pass\n    def method4(self): pass\n</code>", "<code>&gt;&gt;&gt; OrderedMethodsObject.members\n('__module__', '__qualname__', 'method1', 'method2', 'method3', 'method4')\n</code>", "<code>&gt;&gt;&gt; inspect.getmro(OrderedType)\n(&lt;class '__main__.OrderedType'&gt;, &lt;class '__main__.Type'&gt;, &lt;class 'type'&gt;, &lt;class 'object'&gt;)\n</code>", "<code>repr</code>", "<code>&gt;&gt;&gt; OrderedMethodsObject\nOrderedType('OrderedMethodsObject', (object,), {'method1': &lt;function OrderedMethodsObject.method1 at 0x0000000002DB01E0&gt;, 'members': ('__module__', '__qualname__', 'method1', 'method2', 'method3', 'method4'), 'method3': &lt;function OrderedMet\nhodsObject.method3 at 0x0000000002DB02F0&gt;, 'method2': &lt;function OrderedMethodsObject.method2 at 0x0000000002DB0268&gt;, '__module__': '__main__', '__weakref__': &lt;attribute '__weakref__' of 'OrderedMethodsObject' objects&gt;, '__doc__': None, '__d\nict__': &lt;attribute '__dict__' of 'OrderedMethodsObject' objects&gt;, 'method4': &lt;function OrderedMethodsObject.method4 at 0x0000000002DB0378&gt;})\n</code>", "<code>__prepare__</code>", "<code>__new__</code>", "<code>__prepare__</code>", "<code>OrderedDict</code>", "<code>__prepare__</code>", "<code>dict</code>", "<code>__new__</code>", "<code>class Meta(type):\n\n    def __prepare__(metaclass, cls, bases):\n        return dict()\n\n    def __new__(metacls, cls, bases, clsdict):\n        return super().__new__(metacls, cls, bases, clsdict)\n</code>", "<code>int</code>", "<code>str</code>", "<code>class Person:\n    weight = ValidateType('weight', int)\n    age = ValidateType('age', int)\n    name = ValidateType('name', str)\n</code>", "<code>class Person(metaclass=Validator):\n    weight = ValidateType(int)\n    age = ValidateType(int)\n    name = ValidateType(str)\n</code>", "<code>__prepare__</code>", "<code>class Validator(type):\n    def __new__(metacls, cls, bases, clsdict):\n        # search clsdict looking for ValidateType descriptors\n        for name, attr in clsdict.items():\n            if isinstance(attr, ValidateType):\n                attr.name = name\n                attr.attr = '_' + name\n        # create final class and return it\n        return super().__new__(metacls, cls, bases, clsdict)\n</code>", "<code>p = Person()\np.weight = 9\nprint(p.weight)\np.weight = '9'\n</code>", "<code>9\nTraceback (most recent call last):\n  File \"simple_meta.py\", line 36, in &lt;module&gt;\n    p.weight = '9'\n  File \"simple_meta.py\", line 24, in __set__\n    (self.name, self.type, value))\nTypeError: weight must be of type(s) &lt;class 'int'&gt; (got '9')\n</code>", "<code>class ValidateType:\n    def __init__(self, type):\n        self.name = None  # will be set by metaclass\n        self.attr = None  # will be set by metaclass\n        self.type = type\n    def __get__(self, inst, cls):\n        if inst is None:\n            return self\n        else:\n            return inst.__dict__[self.attr]\n    def __set__(self, inst, value):\n        if not isinstance(value, self.type):\n            raise TypeError('%s must be of type(s) %s (got %r)' %\n                    (self.name, self.type, value))\n        else:\n            inst.__dict__[self.attr] = value\n</code>", "<code>NameError: name 'ValidateType' is not defined</code>", "<code>#!/usr/bin/env python\n\n# Copyright (C) 2013-2014 Craig Phillips.  All rights reserved.\n\n# This requires some explaining.  The point of this metaclass excercise is to\n# create a static abstract class that is in one way or another, dormant until\n# queried.  I experimented with creating a singlton on import, but that did\n# not quite behave how I wanted it to.  See now here, we are creating a class\n# called GsyncOptions, that on import, will do nothing except state that its\n# class creator is GsyncOptionsType.  This means, docopt doesn't parse any\n# of the help document, nor does it start processing command line options.\n# So importing this module becomes really efficient.  The complicated bit\n# comes from requiring the GsyncOptions class to be static.  By that, I mean\n# any property on it, may or may not exist, since they are not statically\n# defined; so I can't simply just define the class with a whole bunch of\n# properties that are @property @staticmethods.\n#\n# So here's how it works:\n#\n# Executing 'from libgsync.options import GsyncOptions' does nothing more\n# than load up this module, define the Type and the Class and import them\n# into the callers namespace.  Simple.\n#\n# Invoking 'GsyncOptions.debug' for the first time, or any other property\n# causes the __metaclass__ __getattr__ method to be called, since the class\n# is not instantiated as a class instance yet.  The __getattr__ method on\n# the type then initialises the class (GsyncOptions) via the __initialiseClass\n# method.  This is the first and only time the class will actually have its\n# dictionary statically populated.  The docopt module is invoked to parse the\n# usage document and generate command line options from it.  These are then\n# paired with their defaults and what's in sys.argv.  After all that, we\n# setup some dynamic properties that could not be defined by their name in\n# the usage, before everything is then transplanted onto the actual class\n# object (or static class GsyncOptions).\n#\n# Another piece of magic, is to allow command line options to be set in\n# in their native form and be translated into argparse style properties.\n#\n# Finally, the GsyncListOptions class is actually where the options are\n# stored.  This only acts as a mechanism for storing options as lists, to\n# allow aggregation of duplicate options or options that can be specified\n# multiple times.  The __getattr__ call hides this by default, returning the\n# last item in a property's list.  However, if the entire list is required,\n# calling the 'list()' method on the GsyncOptions class, returns a reference\n# to the GsyncListOptions class, which contains all of the same properties\n# but as lists and without the duplication of having them as both lists and\n# static singlton values.\n#\n# So this actually means that GsyncOptions is actually a static proxy class...\n#\n# ...And all this is neatly hidden within a closure for safe keeping.\ndef GetGsyncOptionsType():\n    class GsyncListOptions(object):\n        __initialised = False\n\n    class GsyncOptionsType(type):\n        def __initialiseClass(cls):\n            if GsyncListOptions._GsyncListOptions__initialised: return\n\n            from docopt import docopt\n            from libgsync.options import doc\n            from libgsync import __version__\n\n            options = docopt(\n                doc.__doc__ % __version__,\n                version = __version__,\n                options_first = True\n            )\n\n            paths = options.pop('&lt;path&gt;', None)\n            setattr(cls, \"destination_path\", paths.pop() if paths else None)\n            setattr(cls, \"source_paths\", paths)\n            setattr(cls, \"options\", options)\n\n            for k, v in options.iteritems():\n                setattr(cls, k, v)\n\n            GsyncListOptions._GsyncListOptions__initialised = True\n\n        def list(cls):\n            return GsyncListOptions\n\n        def __getattr__(cls, name):\n            cls.__initialiseClass()\n            return getattr(GsyncListOptions, name)[-1]\n\n        def __setattr__(cls, name, value):\n            # Substitut option names: --an-option-name for an_option_name\n            import re\n            name = re.sub(r'^__', \"\", re.sub(r'-', \"_\", name))\n            listvalue = []\n\n            # Ensure value is converted to a list type for GsyncListOptions\n            if isinstance(value, list):\n                if value:\n                    listvalue = [] + value\n                else:\n                    listvalue = [ None ]\n            else:\n                listvalue = [ value ]\n\n            type.__setattr__(GsyncListOptions, name, listvalue)\n\n    # Cleanup this module to prevent tinkering.\n    import sys\n    module = sys.modules[__name__]\n    del module.__dict__['GetGsyncOptionsType']\n\n    return GsyncOptionsType\n\n# Our singlton abstract proxy class.\nclass GsyncOptions(object):\n    __metaclass__ = GetGsyncOptionsType()\n</code>", "<code>__call__()</code>", "<code># define a class\nclass SomeClass(object):\n    # ...\n    # some definition here ...\n    # ...\n\n# create an instance of it\ninstance = SomeClass()\n\n# then call the object as if it's a function\nresult = instance('foo', 'bar')\n</code>", "<code>__call__()</code>", "<code>class SomeClass(object):\n    # ...\n    # some definition here ...\n    # ...\n\n    def __call__(self, foo, bar):\n        return bar + foo\n</code>", "<code>__call__()</code>", "<code>__call__()</code>", "<code>instance = SomeClass()</code>", "<code>__init__()</code>", "<code>__init__()</code>", "<code>__new__()</code>", "<code>__new__()</code>", "<code>__call__()</code>", "<code>class Meta_1(type):\n    def __call__(cls):\n        print \"Meta_1.__call__() before creating an instance of \", cls\n        instance = super(Meta_1, cls).__call__()\n        print \"Meta_1.__call__() about to return instance.\"\n        return instance\n</code>", "<code>class Class_1(object):\n\n    __metaclass__ = Meta_1\n\n    def __new__(cls):\n        print \"Class_1.__new__() before creating an instance.\"\n        instance = super(Class_1, cls).__new__(cls)\n        print \"Class_1.__new__() about to return instance.\"\n        return instance\n\n    def __init__(self):\n        print \"entering Class_1.__init__() for instance initialization.\"\n        super(Class_1,self).__init__()\n        print \"exiting Class_1.__init__().\"\n</code>", "<code>Class_1</code>", "<code>instance = Class_1()\n# Meta_1.__call__() before creating an instance of &lt;class '__main__.Class_1'&gt;.\n# Class_1.__new__() before creating an instance.\n# Class_1.__new__() about to return instance.\n# entering Class_1.__init__() for instance initialization.\n# exiting Class_1.__init__().\n# Meta_1.__call__() about to return instance.\n</code>", "<code>type</code>", "<code>Meta_1</code>", "<code>type.__call__()</code>", "<code>class type:\n    def __call__(cls, *args, **kwarg):\n\n        # ... maybe a few things done to cls here\n\n        # then we call __new__() on the class to create an instance\n        instance = cls.__new__(cls, *args, **kwargs)\n\n        # ... maybe a few things done to the instance here\n\n        # then we initialize the instance with its __init__() method\n        instance.__init__(*args, **kwargs)\n\n        # ... maybe a few more things done to instance here\n\n        # then we return it\n        return instance\n</code>", "<code>__call__()</code>", "<code>__new__()</code>", "<code>__init__()</code>", "<code>__call__()</code>", "<code>Class_1.__new__()</code>", "<code>Class_1.__init__()</code>", "<code>class Meta_2(type):\n    singletons = {}\n\n    def __call__(cls, *args, **kwargs):\n        if cls in Meta_2.singletons:\n            # we return the only instance and skip a call to __new__() \n            # and __init__()\n            print (\"{} singleton returning from Meta_2.__call__(), \"\n                   \"skipping creation of new instance.\".format(cls))\n            return Meta_2.singletons[cls]\n\n        # else if the singleton isn't present we proceed as usual\n        print \"Meta_2.__call__() before creating an instance.\"\n        instance = super(Meta_2, cls).__call__(*args, **kwargs)\n        Meta_2.singletons[cls] = instance\n        print \"Meta_2.__call__() returning new instance.\"\n        return instance\n\nclass Class_2(object):\n\n    __metaclass__ = Meta_2\n\n    def __new__(cls, *args, **kwargs):\n        print \"Class_2.__new__() before creating instance.\"\n        instance = super(Class_2, cls).__new__(cls)\n        print \"Class_2.__new__() returning instance.\"\n        return instance\n\n    def __init__(self, *args, **kwargs):\n        print \"entering Class_2.__init__() for initialization.\"\n        super(Class_2, self).__init__()\n        print \"exiting Class_2.__init__().\"\n</code>", "<code>Class_2</code>", "<code>a = Class_2()\n# Meta_2.__call__() before creating an instance.\n# Class_2.__new__() before creating instance.\n# Class_2.__new__() returning instance.\n# entering Class_2.__init__() for initialization.\n# exiting Class_2.__init__().\n# Meta_2.__call__() returning new instance.\n\nb = Class_2()\n# &lt;class '__main__.Class_2'&gt; singleton returning from Meta_2.__call__(), skipping creation of new instance.\n\nc = Class_2()\n# &lt;class '__main__.Class_2'&gt; singleton returning from Meta_2.__call__(), skipping creation of new instance.\n\na is b is c # True\n</code>", "<code>type</code>", "<code>metaclass</code>", "<code>metaclass</code>", "<code>type</code>", "<code>metaclass</code>", "<code>new</code>", "<code>&gt;&gt;&gt; class MetaClass(type):\n...     def __init__(cls, name, bases, attrs):\n...         print ('class name: %s' %name )\n...         print ('Defining class %s' %cls)\n...         print('Bases %s: ' %bases)\n...         print('Attributes')\n...         for (name, value) in attrs.items():\n...             print ('%s :%r' %(name, value))\n... \n\n&gt;&gt;&gt; class NewClass(object, metaclass=MetaClass):\n...    get_choch='dairy'\n... \nclass name: NewClass\nBases &lt;class 'object'&gt;: \nDefining class &lt;class 'NewClass'&gt;\nget_choch :'dairy'\n__module__ :'builtins'\n__qualname__ :'NewClass'\n</code>", "<code>Note:</code>", "<code>metaclass</code>", "<code>type(obj)</code>", "<code>type()</code>", "<code>class Foo(object):\n    __metaclass__ = MyMetaClass\n</code>", "<code>class foo:\n    ...\n</code>", "<code>class somemeta(type):\n    __new__(mcs, name, bases, clsdict):\n      \"\"\"\n  mcs: is the base metaclass, in this case type.\n  name: name of the new class, as provided by the user.\n  bases: tuple of base classes \n  clsdict: a dictionary containing all methods and attributes defined on class\n\n  you must return a class object by invoking the __new__ constructor on the base metaclass. \n ie: \n    return type.__call__(mcs, name, bases, clsdict).\n\n  in the following case:\n\n  class foo(baseclass):\n        __metaclass__ = somemeta\n\n  an_attr = 12\n\n  def bar(self):\n      ...\n\n  @classmethod\n  def foo(cls):\n      ...\n\n      arguments would be : ( somemeta, \"foo\", (baseclass, baseofbase,..., object), {\"an_attr\":12, \"bar\": &lt;function&gt;, \"foo\": &lt;bound class method&gt;}\n\n      you can modify any of these values before passing on to type\n      \"\"\"\n      return type.__call__(mcs, name, bases, clsdict)\n\n\n    def __init__(self, name, bases, clsdict):\n      \"\"\" \n      called after type has been created. unlike in standard classes, __init__ method cannot modify the instance (cls) - and should be used for class validaton.\n      \"\"\"\n      pass\n\n\n    def __prepare__():\n        \"\"\"\n        returns a dict or something that can be used as a namespace.\n        the type will then attach methods and attributes from class definition to it.\n\n        call order :\n\n        somemeta.__new__ -&gt;  type.__new__ -&gt; type.__init__ -&gt; somemeta.__init__ \n        \"\"\"\n        return dict()\n\n    def mymethod(cls):\n        \"\"\" works like a classmethod, but for class objects. Also, my method will not be visible to instances of cls.\n        \"\"\"\n        pass\n</code>", "<code>logging and profiling\ninterface checking\nregistering classes at creation time\nautomatically adding new methods\nautomatic property creation\nproxies\nautomatic resource locking/synchronization.\n</code>", "<code>def func(self, name='mike'):\n    print('Hi, %s.' % name)\n\nHi = type('Hi', (object,), dict(hi=func))\nh = Hi()\nh.hi()\nHi, mike.\n\ntype(Hi)\ntype\n\ntype(h)\n__main__.Hi\n</code>", "<code>class ListMetaclass(type):\n    def __new__(cls, name, bases, attrs):\n        attrs['add'] = lambda self, value: self.append(value)\n        return type.__new__(cls, name, bases, attrs)\n\nclass CustomList(list, metaclass=ListMetaclass):\n    pass\n\nlst = CustomList()\nlst.add('custom_list_1')\nlst.add('custom_list_2')\n\nlst\n['custom_list_1', 'custom_list_2']\n</code>", "<code>class MyKlass(object):\n  foo = 2\n</code>", "<code>MyKlass = type(name, bases, dct)\n</code>", "<code>class MyKlass(object):\n  __metaclass__ = MyMeta\n  foo = 2\n</code>", "<code>MyKlass = MyMeta(name, bases, dct)\n</code>", "<code>__new__</code>", "<code>__init__</code>", "<code>__new__</code>", "<code>__init__</code>", "<code>MyKlass = MyMeta.__new__(MyMeta, name, bases, dct)\nMyMeta.__init__(MyKlass, name, bases, dct)\n</code>", "<code>class MyMeta(type):\n    def __new__(meta, name, bases, dct):\n        print '-----------------------------------'\n        print \"Allocating memory for class\", name\n        print meta\n        print bases\n        print dct\n        return super(MyMeta, meta).__new__(meta, name, bases, dct)\n    def __init__(cls, name, bases, dct):\n        print '-----------------------------------'\n        print \"Initializing class\", name\n        print cls\n        print bases\n        print dct\n        super(MyMeta, cls).__init__(name, bases, dct)\n</code>", "<code>class MyKlass(object):\n    __metaclass__ = MyMeta\n\n    def foo(self, param):\n        pass\n\n    barattr = 2\n</code>"], "path": "stack.django"}, {"tags": ["python", "postgresql", "datetime", "timezone"], "creation_date": 1240885688, "body_markdown": "I have a timezone aware `timestamptz` field in PostgreSQL. When I pull data from the table, I then want to subtract the time right now so I can get it&#39;s age.\r\n\r\nThe problem I&#39;m having is that both `datetime.datetime.now()` and `datetime.datetime.utcnow()` seem to return timezone unaware timestamps, which results in me getting this error:\r\n\r\n    TypeError: can&#39;t subtract offset-naive and offset-aware datetimes \r\n\r\nIs there a way to avoid this (preferably without a third-party module being used).\r\n\r\nEDIT: Thanks for the suggestions, however trying to adjust the timezone seems to give me errors.. so I&#39;m just going to use timezone unaware timestamps in PG and always insert using:\r\n\r\n    NOW() AT TIME ZONE &#39;UTC&#39;\r\n\r\nThat way all my timestamps are UTC by default (even though it&#39;s more annoying to do this).", "last_edit_date": 1495226059, "up_vote_count": 172, "link": "https://stackoverflow.com/questions/796008/cant-subtract-offset-naive-and-offset-aware-datetimes", "_childDocuments_": [{"tags": [], "down_vote_count": 3, "creation_date": 1240886167, "answer_id": 796019, "path": "stack.django.answer", "score": 194, "up_vote_count": 197, "is_accepted": true, "last_activity_date": 1508420948, "last_edit_date": 1508420948, "body_markdown": "have you tried to remove the timezone awareness?\r\n\r\nfrom &lt;http://pytz.sourceforge.net/&gt;\r\n\r\n    naive = dt.replace(tzinfo=None)\r\n\r\nmay have to add time zone conversion as well.\r\n\r\nedit: Please be aware the age of this answer. A Python 3 answer is below."}, {"tags": [], "down_vote_count": 0, "creation_date": 1240914264, "answer_id": 797233, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1240914264, "body_markdown": "Is there some pressing reason why you can&#39;t handle the age calculation in  PostgreSQL itself? Something like\r\n\r\n    select *, age(timeStampField) as timeStampAge from myTable"}, {"tags": [], "down_vote_count": 0, "creation_date": 1374256904, "answer_id": 17752647, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1391003031, "last_edit_date": 1391003031, "body_markdown": "The psycopg2 module has its own timezone definitions, so I ended up writing my own wrapper around utcnow:\r\n\r\n    def pg_utcnow():\r\n        import psycopg2\r\n        return datetime.utcnow().replace(\r\n            tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=0, name=None))\r\n\r\nand just use `pg_utcnow` whenever you need the current time to compare against a PostgreSQL `timestamptz`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1398788676, "answer_id": 23370174, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1398788676, "body_markdown": "I know this is old, but just thought I would add my solution just in case someone finds it useful.\r\n\r\nI wanted to compare the local naive datetime with an aware datetime from a timeserver. I basically created a new naive datetime object using the aware datetime object. It&#39;s a bit of a hack and doesn&#39;t look very pretty but gets the job done.\r\n\r\n    import ntplib\r\n    import datetime\r\n    from datetime import timezone\r\n\r\n    def utc_to_local(utc_dt):\r\n        return utc_dt.replace(tzinfo=timezone.utc).astimezone(tz=None)    \r\n\r\n    try:\r\n        ntpt = ntplib.NTPClient()\r\n        response = ntpt.request(&#39;pool.ntp.org&#39;)\r\n        date = utc_to_local(datetime.datetime.utcfromtimestamp(response.tx_time))\r\n        sysdate = datetime.datetime.now()\r\n...here comes the fudge...\r\n        \r\n        temp_date = datetime.datetime(int(str(date)[:4]),int(str(date)[5:7]),int(str(date)[8:10]),int(str(date)[11:13]),int(str(date)[14:16]),int(str(date)[17:19]))\r\n        dt_delta = temp_date-sysdate\r\n    except Exception:\r\n        print(&#39;Something went wrong :-(&#39;)\r\n\r\n"}, {"tags": [], "down_vote_count": 3, "creation_date": 1409823434, "answer_id": 25662061, "path": "stack.django.answer", "score": 74, "up_vote_count": 77, "is_accepted": false, "last_activity_date": 1409823434, "body_markdown": "The correct solution is to *add* the timezone info e.g., to get the current time as an aware datetime object in Python 3:\r\n\r\n    from datetime import datetime, timezone\r\n    \r\n    now = datetime.now(timezone.utc)\r\n\r\nOn older Python versions, you could define the `utc` tzinfo object yourself (example from datetime docs):\r\n\r\n    from datetime import tzinfo, timedelta, datetime\r\n    \r\n    ZERO = timedelta(0)\r\n    \r\n    class UTC(tzinfo):\r\n      def utcoffset(self, dt):\r\n        return ZERO\r\n      def tzname(self, dt):\r\n        return &quot;UTC&quot;\r\n      def dst(self, dt):\r\n        return ZERO\r\n    \r\n    utc = UTC()\r\n\r\nthen:\r\n\r\n    now = datetime.now(utc)"}, {"tags": [], "down_vote_count": 1, "creation_date": 1434940127, "answer_id": 30971376, "path": "stack.django.answer", "score": 36, "up_vote_count": 37, "is_accepted": false, "last_activity_date": 1485015832, "last_edit_date": 1485015832, "body_markdown": "I know some people use Django specifically as an interface to abstract this type of database interaction.  Django provides utilities that can be used for this:\r\n\r\n    from django.utils import timezone\r\n    now_aware = timezone.now()\r\n\r\nYou do need to set up a basic Django settings infrastructure, even if you are just using this type of interface (in settings, you need to include `USE_TZ=True` to get an aware datetime).\r\n\r\nBy itself, this is probably nowhere near enough to motivate you to use Django as an interface, but there are many other perks.  On the other hand, if you stumbled here because you were mangling your Django app (as I did), then perhaps this helps... "}, {"tags": [], "down_vote_count": 0, "creation_date": 1443898284, "answer_id": 32926239, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1505873471, "last_edit_date": 1505873471, "body_markdown": "**This is a very simple and clear solution**&lt;br&gt;\r\n**Two lines of code**\r\n\r\n\r\n    # First we obtain de timezone info o some datatime variable    \r\n\r\n    tz_info = your_timezone_aware_variable.tzinfo\r\n\r\n    # Now we can subtract two variables using the same time zone info\r\n    # For instance\r\n    # Lets obtain the Now() datetime but for the tz_info we got before\r\n\r\n\tdiff = datetime.datetime.now(tz_info)-your_timezone_aware_variable\r\n\r\nYou must mange your datetime variables with the same time info"}, {"tags": [], "down_vote_count": 0, "creation_date": 1456128078, "answer_id": 35548516, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1456128078, "body_markdown": "I also faced the same problem. Then I found a solution after a lot of searching .\r\n\r\nThe problem was that when we get the datetime object from model or form it is **offset aware** and if we get the time by system it is **offset naive**.\r\n\r\nSo what I did is I got the current time using **timezone.now()** and import the timezone by **from django.utils import timezone** and put the **USE_TZ = True** in your project settings file."}, {"tags": [], "down_vote_count": 0, "creation_date": 1469475556, "answer_id": 38576091, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1469475556, "body_markdown": "I&#39;ve found `timezone.make_aware(datetime.datetime.now())` is helpful in django (I&#39;m on 1.9.1). Unfortunately you can&#39;t simply make a `datetime` object offset-aware, then `timetz()` it. You have to make a `datetime` and make comparisons based on that."}], "title": "Can&#39;t subtract offset-naive and offset-aware datetimes", "view_count": 107146, "answer_count": 9, "code_snippet": ["<code>timestamptz</code>", "<code>datetime.datetime.now()</code>", "<code>datetime.datetime.utcnow()</code>", "<code>TypeError: can't subtract offset-naive and offset-aware datetimes \n</code>", "<code>NOW() AT TIME ZONE 'UTC'\n</code>", "<code>naive = dt.replace(tzinfo=None)\n</code>", "<code>datetime.timezone.utc</code>", "<code>pytz.utc</code>", "<code>1970-01-01 00:00:00</code>", "<code>1970-01-01 00:00:00 UTC</code>", "<code>from datetime import datetime, timezone\n\nnow = datetime.now(timezone.utc)\n</code>", "<code>utc</code>", "<code>from datetime import tzinfo, timedelta, datetime\n\nZERO = timedelta(0)\n\nclass UTC(tzinfo):\n  def utcoffset(self, dt):\n    return ZERO\n  def tzname(self, dt):\n    return \"UTC\"\n  def dst(self, dt):\n    return ZERO\n\nutc = UTC()\n</code>", "<code>now = datetime.now(utc)\n</code>", "<code>from django.utils import timezone\nnow_aware = timezone.now()\n</code>", "<code>USE_TZ=True</code>", "<code>USE_TZ=True</code>", "<code># First we obtain de timezone info o some datatime variable    \n\ntz_info = your_timezone_aware_variable.tzinfo\n\n# Now we can subtract two variables using the same time zone info\n# For instance\n# Lets obtain the Now() datetime but for the tz_info we got before\n\ndiff = datetime.datetime.now(tz_info)-your_timezone_aware_variable\n</code>", "<code>datetime.now(timezone.utc)</code>", "<code>(a - b) == (a.replace(tzinfo=None) - a.utcoffset() - b.replace(tzinfo=None) + b.utcoffset())</code>", "<code>diff = datetime.now(timezone.utc) - your_timezone_aware_variable</code>", "<code>(a - b)</code>", "<code>(a - b)</code>", "<code>a.tzinfo</code>", "<code>b.tzinfo</code>", "<code>def pg_utcnow():\n    import psycopg2\n    return datetime.utcnow().replace(\n        tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=0, name=None))\n</code>", "<code>pg_utcnow</code>", "<code>timestamptz</code>", "<code>select *, age(timeStampField) as timeStampAge from myTable\n</code>", "<code>import ntplib\nimport datetime\nfrom datetime import timezone\n\ndef utc_to_local(utc_dt):\n    return utc_dt.replace(tzinfo=timezone.utc).astimezone(tz=None)    \n\ntry:\n    ntpt = ntplib.NTPClient()\n    response = ntpt.request('pool.ntp.org')\n    date = utc_to_local(datetime.datetime.utcfromtimestamp(response.tx_time))\n    sysdate = datetime.datetime.now()\n</code>", "<code>    temp_date = datetime.datetime(int(str(date)[:4]),int(str(date)[5:7]),int(str(date)[8:10]),int(str(date)[11:13]),int(str(date)[14:16]),int(str(date)[17:19]))\n    dt_delta = temp_date-sysdate\nexcept Exception:\n    print('Something went wrong :-(')\n</code>", "<code>utc_to_local()</code>", "<code>delta = response.tx_time - time.time()</code>", "<code>timezone.make_aware(datetime.datetime.now())</code>", "<code>datetime</code>", "<code>timetz()</code>", "<code>datetime</code>"], "path": "stack.django"}, {"tags": ["python", "django", "download"], "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1248132015, "answer_id": 1156490, "path": "stack.django.answer", "score": 78, "up_vote_count": 78, "is_accepted": false, "last_activity_date": 1248132015, "body_markdown": "A &quot;download&quot; is simply an HTTP header change.\r\n\r\nSee http://docs.djangoproject.com/en/dev/ref/request-response/#telling-the-browser-to-treat-the-response-as-a-file-attachment for how to respond with a download.\r\n\r\nYou only need one URL definition for `&quot;/download&quot;`.\r\n\r\nThe request&#39;s `GET` or `POST` dictionary will have the `&quot;f=somefile.txt&quot;` information.\r\n\r\nYour view function will simply merge the base path with the &quot;`f`&quot; value, open the file, create and return a response object.  It should be less than 12 lines of code."}, {"tags": [], "down_vote_count": 2, "creation_date": 1248169796, "answer_id": 1158244, "path": "stack.django.answer", "score": 1, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1248169796, "body_markdown": "Django recommend that you use another server to serve static media (another server running on the same machine is fine.) They recommend the use of such servers as [lighttp][1]. \r\n\r\nThis is very simple to set up. However. if &#39;somefile.txt&#39; is generated on request (content is dynamic) then you may want django to serve it.\r\n\r\n[Django Docs - Static Files][2]\r\n\r\n\r\n  [1]: http://www.lighttpd.net/\r\n  [2]: http://docs.djangoproject.com/en/dev/howto/static-files/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1248177479, "answer_id": 1158750, "path": "stack.django.answer", "score": 165, "up_vote_count": 165, "is_accepted": true, "last_activity_date": 1505477995, "last_edit_date": 1505477995, "body_markdown": "For the &quot;best of both worlds&quot; you could combine S.Lott&#39;s solution with the [xsendfile module][1]: django generates the path to the file (or the file itself), but the actual file serving is handled by Apache/Lighttpd. Once you&#39;ve set up mod_xsendfile, integrating with your view takes a few lines of code:\r\n\r\n    from django.utils.encoding import smart_str\r\n\r\n    response = HttpResponse(mimetype=&#39;application/force-download&#39;) # mimetype is replaced by content_type for django 1.7\r\n    response[&#39;Content-Disposition&#39;] = &#39;attachment; filename=%s&#39; % smart_str(file_name)\r\n    response[&#39;X-Sendfile&#39;] = smart_str(path_to_file)\r\n    # It&#39;s usually a good idea to set the &#39;Content-Length&#39; header too.\r\n    # You can also set any other required headers: Cache-Control, etc.\r\n    return response\r\n\r\nOf course, this will only work if you have control over your server, or your hosting company has mod_xsendfile already set up.\r\n\r\n**EDIT:**\r\n&gt; mimetype is replaced by content_type for django 1.7\r\n\r\n    response = HttpResponse(content_type=&#39;application/force-download&#39;  \r\n\r\n**EDIT:**\r\n For `nginx` check [this][2], it uses `X-Accel-Redirect` instead of `apache` X-Sendfile header.\r\n\r\n\r\n  [1]: http://www.google.com.ng/search?q=mod_xsendfile&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a\r\n  [2]: https://www.nginx.com/resources/wiki/start/topics/examples/xsendfile/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1293736640, "answer_id": 4565501, "path": "stack.django.answer", "score": 25, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1490135480, "last_edit_date": 1490135480, "body_markdown": "S.Lott has the &quot;good&quot;/simple solution, and elo80ka has the &quot;best&quot;/efficient solution.  Here is a &quot;better&quot;/middle solution - no server setup, but more efficient for large files than the naive fix:\r\n\r\nhttp://djangosnippets.org/snippets/365/\r\n\r\nBasically, Django still handles serving the file but does not load the whole thing into memory at once.  This allows your server to (slowly) serve a big file without ramping up the memory usage.\r\n\r\nAgain, S.Lott&#39;s X-SendFile is still better for larger files.  But if you can&#39;t or don&#39;t want to bother with that, then this middle solution will gain you better efficiency without the hassle."}, {"tags": [], "down_vote_count": 0, "creation_date": 1300122618, "answer_id": 5301921, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1300122618, "body_markdown": "It was mentioned above that the mod_xsendfile method does not allow for non-ASCII characters in filenames.\r\n\r\nFor this reason, I have a patch available for mod_xsendfile that will allow any file to be sent, as long as the name is url encoded, and the additional header:\r\n\r\n    X-SendFile-Encoding: url\r\n\r\nIs sent as well.\r\n\r\n[http://ben.timby.com/?p=149][1]\r\n\r\n\r\n  [1]: http://ben.timby.com/?p=149"}, {"tags": [], "down_vote_count": 1, "creation_date": 1302763057, "answer_id": 5659486, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1453452456, "last_edit_date": 1453452456, "body_markdown": "Try: https://pypi.python.org/pypi/django-sendfile/\r\n\r\n&quot;Abstraction to offload file uploads to web-server (e.g. Apache with mod_xsendfile) once Django has checked permissions etc.&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1326435511, "answer_id": 8846697, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1326435511, "body_markdown": "Another project to have a look at: http://readthedocs.org/docs/django-private-files/en/latest/usage.html\r\nLooks promissing, haven&#39;t tested it myself yet tho.\r\n\r\nBasically the project abstracts the mod_xsendfile configuration and allows you to do things like:\r\n\r\n\tfrom django.db import models\r\n\tfrom django.contrib.auth.models import User\r\n\tfrom private_files import PrivateFileField\r\n\r\n\tdef is_owner(request, instance):\r\n\t    return (not request.user.is_anonymous()) and request.user.is_authenticated and\r\n\t                   instance.owner.pk = request.user.pk\r\n\r\n\tclass FileSubmission(models.Model):\r\n\t    description = models.CharField(&quot;description&quot;, max_length = 200)\r\n\t        owner = models.ForeignKey(User)\r\n\t    uploaded_file = PrivateFileField(&quot;file&quot;, upload_to = &#39;uploads&#39;, condition = is_owner)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1335910071, "answer_id": 10405065, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1335910071, "body_markdown": "I have faced the same problem more then once and so implemented using xsendfile module and auth view decorators the [django-filelibrary][1]. Feel free to use it as inspiration for your own solution. \r\n\r\nhttps://github.com/danielsokolowski/django-filelibrary\r\n\r\n  [1]: https://github.com/danielsokolowski/django-filelibrary"}, {"tags": [], "down_vote_count": 1, "creation_date": 1380036126, "answer_id": 18985653, "path": "stack.django.answer", "score": 12, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1451934373, "last_edit_date": 1451934373, "body_markdown": "Tried @Rocketmonkeys solution but downloaded files were being stored as *.bin and given random names. That&#39;s not fine of course. Adding another line from @elo80ka solved the problem.&lt;br&gt;\r\nHere is the code I&#39;m using now:\r\n\r\n\r\n    filename = &quot;/home/stackoverflow-addict/private-folder(not-porn)/image.jpg&quot;\r\n    wrapper = FileWrapper(file(filename))\r\n    response = HttpResponse(wrapper, content_type=&#39;text/plain&#39;)\r\n    response[&#39;Content-Disposition&#39;] = &#39;attachment; filename=%s&#39; % os.path.basename(filename)\r\n    response[&#39;Content-Length&#39;] = os.path.getsize(filename)\r\n    return response\r\n\r\nYou can now store files in a private directory (not inside /media nor /public_html) and expose them via django to certain users or under certain circumstances.&lt;br&gt;\r\nHope it helps. &lt;br&gt;&lt;br&gt;\r\n_Thanks to @elo80ka, @S.Lott and @Rocketmonkeys for the answers, got the perfect solution combining all of them =)_"}, {"tags": [], "down_vote_count": 0, "creation_date": 1387193166, "answer_id": 20609767, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1453371161, "last_edit_date": 1453371161, "body_markdown": "    def qrcodesave(request): \r\n        import urllib2;   \r\n        url =&quot;http://chart.apis.google.com/chart?cht=qr&amp;chs=300x300&amp;chl=s&amp;chld=H|0&quot;; \r\n        opener = urllib2.urlopen(url);  \r\n        content_type = &quot;application/octet-stream&quot;\r\n        response = HttpResponse(opener.read(), content_type=content_type)\r\n        response[&quot;Content-Disposition&quot;]= &quot;attachment; filename=aktel.png&quot;\r\n        return response "}, {"tags": [], "down_vote_count": 0, "creation_date": 1390085668, "answer_id": 21210929, "path": "stack.django.answer", "score": 23, "up_vote_count": 23, "is_accepted": false, "last_activity_date": 1390085668, "body_markdown": "For a very simple **but not efficient or scalable** solution, you can just use the built in django `serve` view. This is excellent for quick prototypes or one-off work, but as has been mentioned throughout this question, you should use something like apache or nginx in production.\r\n\r\n    from django.views.static import serve\r\n    filepath = &#39;/some/path/to/local/file.txt&#39;\r\n    return serve(request, os.path.basename(filepath), os.path.dirname(filepath))\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1396326939, "answer_id": 22776886, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1396326939, "body_markdown": "Providing protected access to static html folder using https://github.com/johnsensible/django-sendfile: https://gist.github.com/iutinvg/9907731"}, {"tags": [], "down_vote_count": 0, "creation_date": 1481567740, "answer_id": 41107317, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1502640509, "last_edit_date": 1502640509, "body_markdown": "You should use sendfile apis given by popular servers like `apache` or `nginx`\r\nin production. Many years i was using sendfile api of these servers for protecting files. Then created a simple middleware based django app for this purpose suitable for both development &amp; production purpose.You can access the source code [here][1].  \r\nUPDATE: in new version `python` provider uses django `FileResponse` if available and also adds support for many server implementations from lighthttp, caddy to hiawatha\r\n\r\n**Usage**\r\n\r\n    pip install django-fileprovider\r\n\r\n *  add `fileprovider` app to `INSTALLED_APPS` settings, \r\n *  add `fileprovider.middleware.FileProviderMiddleware` to `MIDDLEWARE_CLASSES` settings\r\n * set `FILEPROVIDER_NAME` settings to `nginx` or `apache` in production, by default it is `python` for development purpose.  \r\n\r\nin your classbased or function views set response header `X-File` value to absolute path to the file. For example,  \r\n\r\n    def hello(request):  \r\n       // code to check or protect the file from unauthorized access\r\n       response = HttpResponse()  \r\n       response[&#39;X-File&#39;] = &#39;/absolute/path/to/file&#39;  \r\n       return response  \r\n\r\n`django-fileprovider` impemented in a way that your code will need only minimum modification.\r\n\r\n**Nginx configuration**  \r\n\r\n To protect file from direct access you can set the configuration as\r\n\r\n     location /files/ {\r\n      internal;\r\n      root   /home/sideffect0/secret_files/;\r\n     }\r\n Here `nginx` sets a location url `/files/` only access internaly, if you are using above configuration you can set X-File as,  \r\n \r\n\r\n    response[&#39;X-File&#39;] = &#39;/files/filename.extension&#39; \r\n\r\nBy doing this with nginx configuration, the file will be protected &amp; also you can control the file from django `views`\r\n\r\n  [1]: https://github.com/instapk/django-fileprovider\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1489996294, "answer_id": 42898323, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1489996294, "body_markdown": "Just mentioning the [FileResponse](https://docs.djangoproject.com/en/1.10/ref/request-response/#fileresponse-objects) object available in Django 1.10"}], "creation_date": 1248127830, "body_markdown": "I want users on the site to be able to download files whose paths are obscured so they cannot be directly downloaded.\r\n\r\nFor instance, I&#39;d like the URL to be something like this, &quot;http://example.com/download/?f=somefile.txt\r\n\r\nAnd on the server, I know that all downloadable files reside in a folder &quot;/home/user/files/&quot;.\r\n\r\nIs there a way to make Django serve that file for download as opposed to trying to find a URL and View to display it?", "title": "Having Django serve downloadable files", "view_count": 114139, "up_vote_count": 202, "answer_count": 14, "link": "https://stackoverflow.com/questions/1156246/having-django-serve-downloadable-files", "code_snippet": ["<code>from django.utils.encoding import smart_str\n\nresponse = HttpResponse(mimetype='application/force-download') # mimetype is replaced by content_type for django 1.7\nresponse['Content-Disposition'] = 'attachment; filename=%s' % smart_str(file_name)\nresponse['X-Sendfile'] = smart_str(path_to_file)\n# It's usually a good idea to set the 'Content-Length' header too.\n# You can also set any other required headers: Cache-Control, etc.\nreturn response\n</code>", "<code>response = HttpResponse(content_type='application/force-download'  \n</code>", "<code>nginx</code>", "<code>X-Accel-Redirect</code>", "<code>apache</code>", "<code>smart_str</code>", "<code>\"/download\"</code>", "<code>GET</code>", "<code>POST</code>", "<code>\"f=somefile.txt\"</code>", "<code>f</code>", "<code>filepath = filepath.replace('..', '').replace('/', '')</code>", "<code>django.core.servers.httpbase</code>", "<code>FileWrapper</code>", "<code>serve</code>", "<code>from django.views.static import serve\nfilepath = '/some/path/to/local/file.txt'\nreturn serve(request, os.path.basename(filepath), os.path.dirname(filepath))\n</code>", "<code>X-SendFile-Encoding: url\n</code>", "<code>filename = \"/home/stackoverflow-addict/private-folder(not-porn)/image.jpg\"\nwrapper = FileWrapper(file(filename))\nresponse = HttpResponse(wrapper, content_type='text/plain')\nresponse['Content-Disposition'] = 'attachment; filename=%s' % os.path.basename(filename)\nresponse['Content-Length'] = os.path.getsize(filename)\nreturn response\n</code>", "<code>filename=\"%s\"</code>", "<code>FileWrapper(open(path.abspath(file_name), 'rb'))</code>", "<code>FileWrapper</code>", "<code>from wsgiref.util import FileWrapper</code>", "<code>apache</code>", "<code>nginx</code>", "<code>python</code>", "<code>FileResponse</code>", "<code>pip install django-fileprovider\n</code>", "<code>fileprovider</code>", "<code>INSTALLED_APPS</code>", "<code>fileprovider.middleware.FileProviderMiddleware</code>", "<code>MIDDLEWARE_CLASSES</code>", "<code>FILEPROVIDER_NAME</code>", "<code>nginx</code>", "<code>apache</code>", "<code>python</code>", "<code>X-File</code>", "<code>def hello(request):  \n   // code to check or protect the file from unauthorized access\n   response = HttpResponse()  \n   response['X-File'] = '/absolute/path/to/file'  \n   return response  \n</code>", "<code>django-fileprovider</code>", "<code> location /files/ {\n  internal;\n  root   /home/sideffect0/secret_files/;\n }\n</code>", "<code>nginx</code>", "<code>/files/</code>", "<code>response['X-File'] = '/files/filename.extension' \n</code>", "<code>views</code>", "<code>def qrcodesave(request): \n    import urllib2;   \n    url =\"http://chart.apis.google.com/chart?cht=qr&amp;chs=300x300&amp;chl=s&amp;chld=H|0\"; \n    opener = urllib2.urlopen(url);  \n    content_type = \"application/octet-stream\"\n    response = HttpResponse(opener.read(), content_type=content_type)\n    response[\"Content-Disposition\"]= \"attachment; filename=aktel.png\"\n    return response \n</code>", "<code>from django.db import models\nfrom django.contrib.auth.models import User\nfrom private_files import PrivateFileField\n\ndef is_owner(request, instance):\n    return (not request.user.is_anonymous()) and request.user.is_authenticated and\n                   instance.owner.pk = request.user.pk\n\nclass FileSubmission(models.Model):\n    description = models.CharField(\"description\", max_length = 200)\n        owner = models.ForeignKey(User)\n    uploaded_file = PrivateFileField(\"file\", upload_to = 'uploads', condition = is_owner)\n</code>", "<code>django-private-files</code>"], "path": "stack.django"}, {"tags": ["python", "django", "hidden-features"], "creation_date": 1234692382, "body_markdown": "Inspired by the question series &#39;Hidden features of ...&#39;, I am curious to hear about your favorite Django tips or lesser known but useful features you know of.\r\n\r\n - Please, include only one tip per answer.\r\n - Add Django version requirements if there are any.\r\n\r\n", "last_edit_date": 1251754605, "up_vote_count": 312, "link": "https://stackoverflow.com/questions/550632/favorite-django-tips-features", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1234692952, "answer_id": 550644, "path": "stack.django.answer", "score": 222, "up_vote_count": 223, "is_accepted": false, "last_activity_date": 1282718315, "last_edit_date": 1282718315, "body_markdown": "I&#39;m just going to start with a tip from myself :)\r\n\r\n**Use os.path.dirname() in settings.py to avoid hardcoded dirnames.**\r\n\r\nDon&#39;t hardcode path&#39;s in your settings.py if you want to run your project in different locations. Use the following code in settings.py if your templates and static files are located within the Django project directory:\r\n\r\n    # settings.py\r\n    import os\r\n    PROJECT_DIR = os.path.dirname(__file__)\r\n    ...\r\n    STATIC_DOC_ROOT = os.path.join(PROJECT_DIR, &quot;static&quot;)\r\n    ...\r\n    TEMPLATE_DIRS = (\r\n        os.path.join(PROJECT_DIR, &quot;templates&quot;),\r\n    )\r\n\r\nCredits: I got this tip from the screencast &#39;[Django From the Ground Up][1]&#39;.\r\n\r\n\r\n  [1]: http://thisweekindjango.com/screencasts/episode/10/django-ground-episodes-1-and-2/"}, {"tags": [], "down_vote_count": 7, "creation_date": 1234713992, "answer_id": 551114, "path": "stack.django.answer", "score": 119, "up_vote_count": 126, "is_accepted": false, "last_activity_date": 1330113347, "last_edit_date": 1330113347, "body_markdown": "Use [django-annoying&#39;s](http://bitbucket.org/offline/django-annoying/wiki/Home) `render_to` decorator instead of `render_to_response`.\r\n\r\n    @render_to(&#39;template.html&#39;)\r\n    def foo(request):\r\n        bars = Bar.objects.all()\r\n        if request.user.is_authenticated():\r\n            return HttpResponseRedirect(&quot;/some/url/&quot;)\r\n        else:\r\n            return {&#39;bars&#39;: bars}\r\n\r\n    # equals to\r\n    def foo(request):\r\n        bars = Bar.objects.all()\r\n        if request.user.is_authenticated():\r\n            return HttpResponseRedirect(&quot;/some/url/&quot;)\r\n        else:\r\n            return render_to_response(&#39;template.html&#39;,\r\n                                  {&#39;bars&#39;: bars},\r\n                                  context_instance=RequestContext(request))\r\n\r\nEdited to point out that returning an HttpResponse (such as a redirect) will short circuit the decorator and work just as you expect."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234714826, "answer_id": 551139, "path": "stack.django.answer", "score": 37, "up_vote_count": 37, "is_accepted": false, "last_activity_date": 1234714826, "body_markdown": "I like to use the Python debugger pdb to debug Django projects.\r\n\r\nThis is a helpful link for learning how to use it: [http://www.ferg.org/papers/debugging_in_python.html][1]\r\n\r\n\r\n  [1]: http://www.ferg.org/papers/debugging_in_python.html"}, {"tags": [], "down_vote_count": 1, "creation_date": 1234715450, "answer_id": 551158, "path": "stack.django.answer", "score": 35, "up_vote_count": 36, "is_accepted": false, "last_activity_date": 1234900168, "last_edit_date": 1234900168, "body_markdown": "Use [Jinja2](http://jinja.pocoo.org/2/) alongside Django.\r\n\r\nIf you find the Django template language extremely restricting (like me!) then you don&#39;t have to be stuck with it. Django is flexible, and the template language is loosely coupled to the rest of the system, so just plug-in another template language and use it to render your http responses!\r\n\r\nI use [Jinja2](http://jinja.pocoo.org/2/), it&#39;s almost like a powered-up version of the django template language, it uses the same syntax, and allows you to use expressions in if statements! no more making a custom if-tags such as `if_item_in_list`! you can simply say `%{ if item in list %}`, or `{% if object.field &lt; 10 %}`.\r\n\r\nBut that&#39;s not all; it has many more features to ease template creation, that I can&#39;t go though all of them in here."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234728418, "answer_id": 551499, "path": "stack.django.answer", "score": 35, "up_vote_count": 35, "is_accepted": false, "last_activity_date": 1234728418, "body_markdown": "Add `assert False` in your view code to dump debug information."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234732694, "answer_id": 551615, "path": "stack.django.answer", "score": 130, "up_vote_count": 130, "is_accepted": false, "last_activity_date": 1326356758, "last_edit_date": 1326356758, "body_markdown": "Install [Django Command Extensions][1] and [pygraphviz][2] and then issue the following command to get a really nice looking Django model visualization:\r\n    \r\n    ./manage.py graph_models -a -g -o my_project.png\r\n\r\n\r\n  [1]: http://code.google.com/p/django-command-extensions\r\n  [2]: http://networkx.lanl.gov/pygraphviz/\r\n  [3]: http://ido.nl.eu.org/static/images/pycon_grouping.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234899298, "answer_id": 558401, "path": "stack.django.answer", "score": 88, "up_vote_count": 88, "is_accepted": false, "last_activity_date": 1255454929, "last_edit_date": 1495541406, "body_markdown": "Don&#39;t hard-code your URLs! \r\n\r\nUse [url names](http://docs.djangoproject.com/en/dev/topics/http/urls/#id2) instead, and the [`reverse`](http://docs.djangoproject.com/en/dev/topics/http/urls/#reverse) function to get the URL itself.\r\n\r\nWhen you define your URL mappings, give names to your URLs. \r\n\r\n    urlpatterns += (&#39;project.application.views&#39;\r\n       url( r&#39;^something/$&#39;, &#39;view_function&#39;, name=&quot;url-name&quot; ),\r\n       ....\r\n    )\r\n\r\nMake sure the name is unique per URL.\r\n\r\nI usually have a consistent format &quot;project-appplication-view&quot;, e.g. &quot;cbx-forum-thread&quot; for a thread view.\r\n\r\n__UPDATE__ (shamelessly stealing [ayaz&#39;s addition][1]):\r\n\r\nThis name can be used in templates with the [`url` tag][2].\r\n\r\n  [1]: https://stackoverflow.com/questions/550632/favorite-django-tips-features/560111#560111\r\n  [2]: http://docs.djangoproject.com/en/dev/ref/templates/builtins/#url\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1234935450, "answer_id": 559972, "path": "stack.django.answer", "score": 80, "up_vote_count": 81, "is_accepted": false, "last_activity_date": 1234935450, "body_markdown": "Don&#39;t write your own login pages.  If you&#39;re using django.contrib.auth.\r\n\r\nThe real, dirty secret is that if you&#39;re also using django.contrib.admin, and django.template.loaders.app_directories.load_template_source is in your template loaders,  **you can get your templates free too!**\r\n\r\n    # somewhere in urls.py\r\n    urlpatterns += patterns(&#39;django.contrib.auth&#39;,\r\n        (r&#39;^accounts/login/$&#39;,&#39;views.login&#39;, {&#39;template_name&#39;: &#39;admin/login.html&#39;}),\r\n        (r&#39;^accounts/logout/$&#39;,&#39;views.logout&#39;),\r\n    )"}, {"tags": [], "down_vote_count": 1, "creation_date": 1234939489, "answer_id": 560064, "path": "stack.django.answer", "score": 16, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1246517492, "last_edit_date": 1246517492, "body_markdown": "[django.views.generic.list\\_detail.object\\_list][1] -- It provides all the logic &amp; template variables for pagination (one of those I&#39;ve-written-that-a-thousand-times-now drudgeries).  [Wrapping it][2] allows for any logic you need.  This gem has saved me many hours of debugging off-by-one errors in my &quot;Search Results&quot; pages and makes the view code cleaner in the process.\r\n\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/ref/generic-views/?from=olddocs#django-views-generic-list-detail-object-list\r\n  [2]: http://www.djangobook.com/en/2.0/chapter11/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1234940850, "answer_id": 560111, "path": "stack.django.answer", "score": 33, "up_vote_count": 34, "is_accepted": false, "last_activity_date": 1255454918, "last_edit_date": 1495541880, "body_markdown": "This adds to the reply above about [Django URL names and reverse URL dispatching][1].\r\n\r\nThe URL names can also be effectively used within templates. For example, for a given URL pattern:\r\n\r\n    url(r&#39;(?P&lt;project_id&gt;\\d+)/team/$&#39;, &#39;project_team&#39;, name=&#39;project_team&#39;)\r\n\r\nyou can have the following in templates:\r\n\r\n    &lt;a href=&quot;{% url project_team project.id %}&quot;&gt;Team&lt;/a&gt;\r\n\r\n  [1]: https://stackoverflow.com/questions/550632/favorite-django-tips-features/558401#558401\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1234994043, "answer_id": 562998, "path": "stack.django.answer", "score": 57, "up_vote_count": 59, "is_accepted": false, "last_activity_date": 1234994043, "body_markdown": "When I was starting out, I didn&#39;t know that there was a [Paginator](http://docs.djangoproject.com/en/dev/topics/pagination/#topics-pagination), make sure you know of its existence!!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1238668216, "answer_id": 709180, "path": "stack.django.answer", "score": 37, "up_vote_count": 37, "is_accepted": false, "last_activity_date": 1255454895, "last_edit_date": 1255454895, "body_markdown": "When trying to exchange data between Django and another application, `request.raw_post_data` is a good friend. Use it to receive and custom-process, say, XML data.\r\n\r\nDocumentation:\r\n[http://docs.djangoproject.com/en/dev/ref/request-response/][1]\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/ref/request-response/\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1242325188, "answer_id": 864898, "path": "stack.django.answer", "score": 19, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1255454886, "last_edit_date": 1255454886, "body_markdown": "`django.db.models.get_model` does allow you to retrieve a model without importing it.\r\n\r\nJames shows how handy it can be: [&quot;Django tips: Write better template tags \u2014 Iteration 4 &quot;][1].\r\n\r\n  [1]: http://www.b-list.org/weblog/2006/jun/07/django-tips-write-better-template-tags/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1243981355, "answer_id": 942214, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1255454858, "last_edit_date": 1255454858, "body_markdown": "[Render form via django template instead of as_(ul|table|p)()][1].\r\n\r\nThis article shows, how to use template to render CusstomForms instead of `as_p()`, `as_table()`...\r\n\r\nTo make it work change \r\n\r\n* `from django import newforms as forms` **to** `from django import forms`  \r\n* `from django.newforms.forms import BoundField` **to** `from django.forms.forms import BoundField`\r\n\r\n  [1]: http://code.djangoproject.com/wiki/TemplatedForm\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1243981663, "answer_id": 942237, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1243981663, "body_markdown": "Use [isapi-wsgi][1] and [django-pyodbc][2] to run Django on Windows using IIS and SQL Server!\r\n\r\n\r\n  [1]: http://code.google.com/p/isapi-wsgi/\r\n  [2]: http://code.google.com/p/django-pyodbc/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1243985541, "answer_id": 942426, "path": "stack.django.answer", "score": 19, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1243985541, "body_markdown": "The [webdesign app](http://docs.djangoproject.com/en/dev/ref/contrib/webdesign/#ref-contrib-webdesign) is very useful when starting to design your website.  Once imported, you can add this to generate sample text:\r\n\r\n    {% load webdesign %}\r\n    {% lorem 5 p %}"}, {"tags": [], "down_vote_count": 0, "creation_date": 1244054042, "answer_id": 946397, "path": "stack.django.answer", "score": 103, "up_vote_count": 103, "is_accepted": false, "last_activity_date": 1244054343, "last_edit_date": 1244054343, "body_markdown": "There&#39;s a set of custom tags I use all over my site&#39;s templates. Looking for a way to autoload it (DRY, remember?), I found the following:\r\n\r\n    from django import template\r\n    template.add_to_builtins(&#39;project.app.templatetags.custom_tag_module&#39;)\r\n\r\nIf you put this in a module that&#39;s loaded by default (your main urlconf for instance), you&#39;ll have the tags and filters from your custom tag module available in any template, without using `{% load custom_tag_module %}`.\r\n\r\nThe argument passed to `template.add_to_builtins()` can be any module path; your custom tag module doesn&#39;t have to live in a specific application. For example, it can also be a module in your project&#39;s root directory (eg. `&#39;project.custom_tag_module&#39;`)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1244054669, "answer_id": 946443, "path": "stack.django.answer", "score": 97, "up_vote_count": 97, "is_accepted": false, "last_activity_date": 1255454848, "last_edit_date": 1255454848, "body_markdown": "[Virtualenv][1] + Python = life saver if you are working on multiple Django projects and there is a possibility that they all don&#39;t depend on the same version of Django/an application.\r\n\r\n  [1]: http://pypi.python.org/pypi/virtualenv#what-it-does\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1244055226, "answer_id": 946497, "path": "stack.django.answer", "score": 82, "up_vote_count": 82, "is_accepted": false, "last_activity_date": 1319500136, "last_edit_date": 1319500136, "body_markdown": "Use [django debug toolbar][1]. For example, it allows to view all SQL queries performed while rendering view and you can also view stacktrace for any of them.\r\n\r\n\r\n  [1]: http://github.com/robhudson/django-debug-toolbar/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1245429318, "answer_id": 1018895, "path": "stack.django.answer", "score": 20, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1255454825, "last_edit_date": 1255454825, "body_markdown": "I don&#39;t have enough reputation to reply to the comment in question, but it&#39;s important to note that if you&#39;re going to use [Jinja][1], it does NOT support the &#39;-&#39; character in template block names, while Django does. This caused me a lot of problems and wasted time trying to track down the very obscure error message it generated.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Jinja_(template_engine)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1246269667, "answer_id": 1057512, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1255454819, "last_edit_date": 1255454819, "body_markdown": "Just found this link: http://lincolnloop.com/django-best-practices/#table-of-contents - &quot;Django Best Practices&quot;."}, {"tags": [], "down_vote_count": 0, "creation_date": 1246422455, "answer_id": 1067267, "path": "stack.django.answer", "score": 41, "up_vote_count": 41, "is_accepted": false, "last_activity_date": 1246422455, "body_markdown": "From the [django-admin documentation][1]:\r\n\r\nIf you use the Bash shell, consider installing the Django bash completion script, which lives in `extras/django_bash_completion` in the Django distribution. It enables tab-completion of `django-admin.py` and `manage.py` commands, so you can, for instance...\r\n\r\n* Type `django-admin.py`.\r\n* Press [TAB] to see all available options.\r\n* Type `sql`, then [TAB], to see all available options whose names start with `sql`.\r\n\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/ref/django-admin/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1250690030, "answer_id": 1300107, "path": "stack.django.answer", "score": 67, "up_vote_count": 67, "is_accepted": false, "last_activity_date": 1321631301, "last_edit_date": 1321631301, "body_markdown": "Context processors are awesome.\r\n-------------------------------\r\n\r\nSay you have a different user model and you want to include\r\nthat in every response. Instead of doing this:\r\n\r\n    def myview(request, arg, arg2=None, template=&#39;my/template.html&#39;):\r\n        &#39;&#39;&#39; My view... &#39;&#39;&#39;\r\n        response = dict()\r\n        myuser = MyUser.objects.get(user=request.user)\r\n        response[&#39;my_user&#39;] = myuser\r\n        ...\r\n        return render_to_response(template,\r\n                                  response,\r\n                                  context_instance=RequestContext(request))\r\n\r\nContext processes give you the ability to pass any variable to your\r\ntemplates. I typically put mine in `&#39;my_project/apps/core/context.py`:\r\n\r\n    def my_context(request):\r\n        try:\r\n            return dict(my_user=MyUser.objects.get(user=request.user))\r\n        except ObjectNotFound:\r\n            return dict(my_user=&#39;&#39;)\r\n\r\nIn your `settings.py` add the following line to your `TEMPLATE_CONTEXT_PROCESSORS`\r\n\r\n    TEMPLATE_CONTEXT_PROCESSORS = (\r\n        &#39;my_project.apps.core.context.my_context&#39;,\r\n        ...\r\n    )\r\n\r\nNow every time a request is made it includes the `my_user` key automatically.\r\n\r\n\r\nAlso [signals][1] win.\r\n----------------------\r\n\r\nI wrote a blog post about this a few months ago so I&#39;m just going to cut and paste:\r\n\r\nOut of the box Django gives you several signals that are\r\nincredibly useful. You have the ability to do things pre and\r\npost save, init, delete, or even when a request is being\r\nprocessed. So lets get away from the concepts and\r\ndemonstrate how these are used. Say we\u2019ve got a blog\r\n\r\n    from django.utils.translation import ugettext_lazy as _\r\n    class Post(models.Model):\r\n        title = models.CharField(_(&#39;title&#39;), max_length=255)\r\n        body = models.TextField(_(&#39;body&#39;))\r\n        created = models.DateTimeField(auto_now_add=True)\r\n\r\nSo somehow you want to notify one of the many blog-pinging\r\nservices we\u2019ve made a new post, rebuild the most recent\r\nposts cache, and tweet about it. Well with signals you have\r\nthe ability to do all of this without having to add any\r\nmethods to the Post class.\r\n\r\n    import twitter\r\n\r\n    from django.core.cache import cache\r\n    from django.db.models.signals import post_save\r\n    from django.conf import settings\r\n\r\n    def posted_blog(sender, created=None, instance=None, **kwargs):\r\n        &#39;&#39;&#39; Listens for a blog post to save and alerts some services. &#39;&#39;&#39;\r\n        if (created and instance is not None):\r\n            tweet = &#39;New blog post! %s&#39; instance.title\r\n            t = twitter.PostUpdate(settings.TWITTER_USER,\r\n                                   settings.TWITTER_PASSWD,\r\n                                   tweet)\r\n            cache.set(instance.cache_key, instance, 60*5)\r\n           # send pingbacks\r\n           # ...\r\n           # whatever else\r\n        else:\r\n            cache.delete(instance.cache_key)\r\n    post_save.connect(posted_blog, sender=Post)\r\n\r\nThere we go, by defining that function and using the\r\npost_init signal to connect the function to the Post model\r\nand execute it after it has been saved.\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/topics/signals/ &quot;Django Signals&quot;\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1251460786, "answer_id": 1346574, "path": "stack.django.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1251460786, "body_markdown": "I learned this one from the documentation for the [sorl-thumbnails][1] app. You can use the &quot;as&quot; keyword in template tags to use the results of the call elsewhere in your template.\r\n\r\nFor example:\r\n\r\n    {% url image-processor uid as img_src %}\r\n    &lt;img src=&quot;{% thumbnail img_src 100x100 %}&quot;/&gt;\r\n\r\nThis is mentioned in passing in the Django templatetag documentation, but in reference to loops only. They don&#39;t call out that you can use this elsewhere (anywhere?) as well.\r\n\r\n\r\n  [1]: http://code.google.com/p/sorl-thumbnail/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1251749578, "answer_id": 1359196, "path": "stack.django.answer", "score": 27, "up_vote_count": 27, "is_accepted": false, "last_activity_date": 1251836036, "last_edit_date": 1251836036, "body_markdown": "Since Django &quot;views&quot; only need to be callables that return an HttpResponse, you can easily create class-based views like those in Ruby on Rails and other frameworks.\r\n\r\nThere are several ways to create class-based views, here&#39;s my favorite:\r\n\r\n    from django import http\r\n    \r\n    class RestView(object):\r\n        methods = (&#39;GET&#39;, &#39;HEAD&#39;)\r\n    \r\n        @classmethod\r\n        def dispatch(cls, request, *args, **kwargs):\r\n            resource = cls()\r\n            if request.method.lower() not in (method.lower() for method in resource.methods):\r\n                return http.HttpResponseNotAllowed(resource.methods)\r\n            try:\r\n                method = getattr(resource, request.method.lower())\r\n            except AttributeError:\r\n                raise Exception(&quot;View method `%s` does not exist.&quot; % request.method.lower())\r\n            if not callable(method):\r\n                raise Exception(&quot;View method `%s` is not callable.&quot; % request.method.lower())\r\n            return method(request, *args, **kwargs)\r\n    \r\n        def get(self, request, *args, **kwargs):\r\n            return http.HttpResponse()\r\n    \r\n        def head(self, request, *args, **kwargs):\r\n            response = self.get(request, *args, **kwargs)\r\n            response.content = &#39;&#39;\r\n            return response\r\n\r\nYou can add all sorts of other stuff like conditional request handling and authorization in your base view.\r\n\r\nOnce you&#39;ve got your views setup your urls.py will look something like this:\r\n\r\n    from django.conf.urls.defaults import *\r\n    from views import MyRestView\r\n    \r\n    urlpatterns = patterns(&#39;&#39;,\r\n        (r&#39;^restview/&#39;, MyRestView.dispatch),\r\n    )"}, {"tags": [], "down_vote_count": 0, "creation_date": 1252611976, "answer_id": 1407331, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1255453857, "last_edit_date": 1255453857, "body_markdown": "Use [signals][1] to add accessor-methods on-the-fly.\r\n\r\nI saw this technique in [django-photologue][2]: For any Size object added, the post_init signal will add the corresponding methods to the Image model.\r\nIf you add a site *giant*, the methods to retrieve the picture in giant resolution will be `image.get_giant_url()`.\r\n\r\nThe methods are generated by calling `add_accessor_methods` from the `post_init` signal:\r\n\r\n    def add_accessor_methods(self, *args, **kwargs):\r\n        for size in PhotoSizeCache().sizes.keys():\r\n            setattr(self, &#39;get_%s_size&#39; % size,\r\n                    curry(self._get_SIZE_size, size=size))\r\n            setattr(self, &#39;get_%s_photosize&#39; % size,\r\n                    curry(self._get_SIZE_photosize, size=size))\r\n            setattr(self, &#39;get_%s_url&#39; % size,\r\n                    curry(self._get_SIZE_url, size=size))\r\n            setattr(self, &#39;get_%s_filename&#39; % size,\r\n                    curry(self._get_SIZE_filename, size=size))\r\n\r\nSee the [source code of photologue.models][3] for real-world usage.\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/topics/signals/\r\n  [2]: http://code.google.com/p/django-photologue\r\n  [3]: http://code.google.com/p/django-photologue/source/browse/trunk/photologue/models.py\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1257068840, "answer_id": 1656759, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1266374498, "last_edit_date": 1266374498, "body_markdown": "Use **[djangorecipe](http://pypi.python.org/pypi/djangorecipe)** to manage your project\r\n\r\n* If you&#39;re writing a new app, this recipe makes testing it outside of a project really easy\r\n* It allows you to manage dependencies for a project (e.g. what version of some app it should depend on)\r\n\r\nAll you have to do to get started is this:\r\n\r\n1. Create a folder for your new website (or library)\r\n2. Create a buildout.cfg with following content in it:\r\n   &lt;pre&gt;&lt;code&gt;\r\n   [buildout]\r\n   parts=django\r\n   \r\n   [django]\r\n   recipe=djangorecipe\r\n   version=1.1.1\r\n   project=my_new_site\r\n   settings=development\r\n   &lt;/code&gt;&lt;/pre&gt;\r\n3. Grab a bootstrap.py to get a local installation of buildout and place it within your directory. You can either go with the [official one](http://www.google.at/search?q=buidlout+bootstrap.py&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a) (sorry, Markdown didn&#39;t like part of the full link :-/ ) or with one that uses distribute instead of setuptools as described by [Reinout van Rees](http://reinout.vanrees.org/weblog/2009/10/15/distribute-works-with-buildout.html).\r\n4. `python bootstrap.py` (or `python bootstrap_dev.py` if you want to use distribute).\r\n5. `./bin/buildout`\r\n\r\nThat&#39;s it. You should now have a new folder &quot;my\\_new\\_site&quot;, which is your new django 1.1.1 project, and in ./bin you will find the `django`-script which replaces the manage.py on a normal installation. \r\n\r\nWhat&#39;s the benefit? Let&#39;s say you want to use something like django-comment-spamfighter in your project. All you&#39;d have to do is change your buildout.cfg to something like this:\r\n\r\n&lt;pre&gt;&lt;code&gt;\r\n[buildout]\r\nparts=django\r\n   \r\n[django]\r\nrecipe=djangorecipe\r\nversion=1.1.1\r\nproject=my_new_site\r\nsettings=development\r\neggs=\r\n    django-comments-spamfighter==0.4\r\n&lt;/code&gt;&lt;/pre&gt;\r\n\r\nNote that all I did was to add the last 2 lines which say, that the django-part should also have the django-comments-spamfighter package in version 0.4. The next time you run `./bin/buildout`, buildout will download that package and modify ./bin/django to add it to its PYTHONPATH.\r\n\r\ndjangorecipe is also suited for deploying your project with mod_wsgi. Just add the `wsgi=true` setting to the django-part of your buildout.cfg and a &quot;django.wsgi&quot; will appear in your ./bin folder :-)\r\n\r\nAnd if you set the `test` option to a list of applications, the djangorecipe will create a nice wrapper for you that runs all the tests for the listed application in your project.\r\n\r\nIf you want to develop a single app in a standalone environment for debugging etc., Jakob Kaplan-Moss has a quite complete tutorial on [his blog](http://jacobian.org/writing/django-apps-with-buildout/)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1258236903, "answer_id": 1735782, "path": "stack.django.answer", "score": 22, "up_vote_count": 22, "is_accepted": false, "last_activity_date": 1258236903, "body_markdown": "Instead of using `render_to_response` to bind your context to a template and render it (which is what the Django docs usually show) use the generic view [`direct_to_template`][1]. It does the same thing that `render_to_response` does but it also automatically adds RequestContext to the template context, implicitly allowing context processors to be used. You can do this manually using `render_to_response`, but why bother? It&#39;s just another step to remember and another LOC. Besides making use of context processors, having RequestContext in your template allows you to do things like:\r\n\r\n    &lt;a href=&quot;{{MEDIA_URL}}images/frog.jpg&quot;&gt;A frog&lt;/a&gt; \r\n\r\nwhich is very useful. In fact, +1 on generic views in general. The Django docs mostly show them as shortcuts for not even having a views.py file for simple apps, but you can also use them inside your own view functions:\r\n\r\n    from django.views.generic import simple\r\n\r\n    def article_detail(request, slug=None):\r\n        article = get_object_or_404(Article, slug=slug)\r\n        return simple.direct_to_template(request, \r\n            template=&quot;articles/article_detail.html&quot;,\r\n            extra_context={&#39;article&#39;: article}\r\n        )\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-simple-direct-to-template\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1258784989, "answer_id": 1774722, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1259595905, "last_edit_date": 1259595905, "body_markdown": "Instead of running the Django dev server on localhost, run it on a proper network interface. For example:\r\n\r\n    python manage.py runserver 192.168.1.110:8000\r\n\r\nor \r\n\r\n    python manage.py runserver 0.0.0.0:8000\r\n\r\nThen you can not only easily use Fiddler (http://www.fiddler2.com/fiddler2/) or another tool like HTTP Debugger (http://www.httpdebugger.com/) to inspect your HTTP headers, but you can also access your dev site from other machines on your LAN to test.\r\n\r\nMake sure you are protected by a firewall though, although the dev server is minimal and relatively safe."}, {"tags": [], "down_vote_count": 0, "creation_date": 1259812557, "answer_id": 1837525, "path": "stack.django.answer", "score": 47, "up_vote_count": 47, "is_accepted": false, "last_activity_date": 1259812557, "body_markdown": "Use [IPython][1] to jump into your code at any level and debug using the power of IPython.  Once you have installed IPython just put this code in wherever you want to debug: \r\n\r\n    from IPython.Shell import IPShellEmbed; IPShellEmbed()()\r\n\r\nThen, refresh the page, go to your runserver window and you will be in an interactive IPython window.\r\n\r\nI have a snippet set up in TextMate so I just type ipshell and hit tab.  I couldn&#39;t live without it.\r\n\r\n\r\n  [1]: http://ipython.scipy.org/moin/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1259813327, "answer_id": 1837571, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1259813327, "body_markdown": "This is a really easy way to never have to import another one of your models again in your python shell.\r\n\r\nFirst, install [IPython][1] (If you don&#39;t use IPython, what&#39;s wrong with you?).  Next, create a python script, ipythonrc.py, in your django project directory with the following code in it:\r\n\r\n    from django.db.models.loading import get_models \r\n    for m in get_models(): \r\n         globals()[m.__name__] = m \r\n    #NOTE: if you have two models with the same name you&#39;ll only end up with one of them\r\n\r\nThen, in your ~/.ipython/ipythonrc file, put the following code in the &quot;Python files to load and execute&quot; section:\r\n\r\n    execfile /path/to/project/ipythonrc.py\r\n\r\nNow every time you start up IPython or run `./manage.py shell` you will have all your models already imported and ready to use.  No need to ever import another model again.  \r\n\r\nYou can also put any other code you execute a lot in your ipythonrc.py file to save yourself time.\r\n\r\n  [1]: http://ipython.scipy.org/moin/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1263905859, "answer_id": 2093549, "path": "stack.django.answer", "score": 19, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1263905859, "body_markdown": "Everybody knows there is a development server you can run with &quot;manage.py runserver&quot;, but did you know that there is a development view for serving static files (CSS / JS / IMG) as well ?\r\n\r\nNewcomers are always puzzled because Django doesn&#39;t come with any way to serve static files. This is because the dev team think it is the job for a real life Web server.\r\n\r\nBut when developing, you may not want to set up Apache + mod_wisgi, it&#39;s heavy. Then you can just add the following to urls.py:\r\n\r\n    (r&#39;^site_media/(?P&lt;path&gt;.*)$&#39;, &#39;django.views.static.serve&#39;,\r\n            {&#39;document_root&#39;: &#39;/path/to/media&#39;}),\r\n\r\nYour CSS / JS / IMG will be available at www.yoursite.com/site_media/.\r\n\r\nOf course, don&#39;t use it in a production environment.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1266128788, "answer_id": 2260327, "path": "stack.django.answer", "score": 43, "up_vote_count": 43, "is_accepted": false, "last_activity_date": 1266128788, "body_markdown": "Run a development SMTP server that will just output whatever is sent to it (if you don&#39;t want to actually install SMTP on your dev server.)\r\n\r\ncommand line:\r\n\r\n    python -m smtpd -n -c DebuggingServer localhost:1025"}, {"tags": [], "down_vote_count": 0, "creation_date": 1272568966, "answer_id": 2740163, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1287154408, "last_edit_date": 1287154408, "body_markdown": "Use `wraps` decorator in custom views decorators to preserve view&#39;s name, module and docstring. E.g.\r\n\r\n    try:\r\n        from functools import wraps\r\n    except ImportError:\r\n        from django.utils.functional import wraps  # Python 2.3, 2.4 fallback.\r\n    \r\n    def view_decorator(fun):\r\n        @wraps(fun)\r\n        def wrapper():\r\n            # here goes your decorator&#39;s code\r\n        return wrapper\r\n\r\n**Beware**: will not work on a class-based views (those with `__call__` method definition), if the author hasn&#39;t defined a `__name__` property. As a workaround use:\r\n     \r\n    from django.utils.decorators import available_attrs\r\n    ...\r\n        @wraps(fun, assigned=available_attrs(fun))"}, {"tags": [], "down_vote_count": 0, "creation_date": 1272739902, "answer_id": 2751177, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1272739902, "body_markdown": "**Changing Django form field properties on init**\r\n\r\nSometimes it&#39;s useful to pass extra arguments to a Form class.\r\n\r\n\tfrom django import forms\r\n\tfrom mymodels import Group\r\n\r\n\tclass MyForm(forms.Form):\r\n\t\tgroup=forms.ModelChoiceField(queryset=None)\r\n\t\temail=forms.EmailField()\r\n\t\tsome_choices=forms.ChoiceField()\r\n\r\n\t\t\r\n\t\tdef __init__(self,my_var,*args,**kwrds):\r\n\t\t\tsuper(MyForm,self).__init__(*args,**kwrds)\r\n\t\t\tself.fields[&#39;group&#39;].queryset=Group.objects.filter(...)\r\n\t\t\tself.fields[&#39;email&#39;].widget.attrs[&#39;size&#39;]=&#39;50&#39;\r\n\t\t\tself.fields[&#39;some_choices&#39;]=[[x,x] for x in list_of_stuff]\r\n\r\nsource: [Dzone snippets][1]\r\n\r\n\r\n  [1]: http://snippets.dzone.com/posts/show/7936"}, {"tags": [], "down_vote_count": 0, "creation_date": 1273791864, "answer_id": 2830887, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1273791864, "body_markdown": "[PyCharm IDE][1] is a nice environment to code and especially debug, with built-in support for Django.\r\n\r\n  [1]: http://www.jetbrains.com/pycharm/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1273821832, "answer_id": 2832479, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1273821832, "body_markdown": "The [Django Debug Toolbar][1] is really fantastic. Not really a toolbar, it actually brings up a sidepane that tells you all sorts of information about what brought you the page you&#39;re looking at - DB queries, the context variables sent to the template, signals, and more. \r\n\r\n\r\n\r\n\r\n  [1]: http://github.com/robhudson/django-debug-toolbar"}, {"tags": [], "down_vote_count": 0, "creation_date": 1279120009, "answer_id": 3247524, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1279120564, "last_edit_date": 1279120564, "body_markdown": "Use [xml_models][1] to create Django models that use an XML REST API backend (instead of a SQL one).  This is very useful especially when modelling third party APIs - you get all the same QuerySet syntax that you&#39;re used to.  You can install it from PyPI.\r\n\r\nXML from an API:\r\n\r\n    &lt;profile id=4&gt;\r\n        &lt;email&gt;joe@example.com&lt;/email&gt;\r\n        &lt;first_name&gt;Joe&lt;/first_name&gt;\r\n        &lt;last_name&gt;Example&lt;/last_name&gt;\r\n        &lt;date_of_birth&gt;1975-05-15&lt;/date_of_birth&gt;\r\n    &lt;/profile&gt;\r\n\r\nAnd now in python:\r\n\r\n    class Profile(xml_models.Model):\r\n        user_id = xml_models.IntField(xpath=&#39;/profile/@id&#39;)\r\n        email = xml_models.CharField(xpath=&#39;/profile/email&#39;)\r\n        first = xml_models.CharField(xpath=&#39;/profile/first_name&#39;)\r\n        last = xml_models.CharField(xpath=&#39;/profile/last_name&#39;)\r\n        birthday = xml_models.DateField(xpath=&#39;/profile/date_of_birth&#39;)\r\n\r\n        finders = {\r\n            (user_id,):  settings.API_URL +&#39;/api/v1/profile/userid/%s&#39;,\r\n            (email,):  settings.API_URL +&#39;/api/v1/profile/email/%s&#39;,\r\n        }\r\n\r\n    profile = Profile.objects.get(user_id=4)\r\n    print profile.email\r\n    # would print &#39;joe@example.com&#39;\r\n\r\nIt can also handle relationships and collections.  We use it every day in heavily used production code, so even though it&#39;s beta it&#39;s very usable.  It also has a good set of stubs that you can use in your tests.\r\n\r\n(Disclaimer: while I&#39;m not the author of this library, I am now a committer, having made a few minor commits)\r\n    \r\n\r\n  [1]: http://djangorestmodel.sourceforge.net/\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1279261628, "answer_id": 3262408, "path": "stack.django.answer", "score": 5, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1279262636, "last_edit_date": 1279262636, "body_markdown": "Use reverse in your urlconf.\r\n\r\nThis is one of those tricks where I don&#39;t understand why it isn&#39;t the default.\r\n\r\nHere&#39;s a link to where I picked it up:\r\nhttp://andr.in/2009/11/21/calling-reverse-in-django/\r\n\r\nHere&#39;s the code snippet:\r\n&lt;blockquote&gt;&lt;pre&gt;&lt;code&gt;from django.conf.urls.defaults import *\r\nfrom django.core.urlresolvers import reverse\r\nfrom django.utils.functional import lazy\r\nfrom django.http import HttpResponse\r\n\r\nreverse_lazy = lazy(reverse, str)\r\n\r\nurlpatterns = patterns(&#39;&#39;,\r\nurl(r&#39;^comehere/&#39;, lambda request: HttpResponse(&#39;Welcome!&#39;), name=&#39;comehere&#39;),\r\nurl(r&#39;^$&#39;, &#39;django.views.generic.simple.redirect_to&#39;,\r\n{&#39;url&#39;: reverse_lazy(&#39;comehere&#39;)}, name=&#39;root&#39;)\r\n)&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1287890275, "answer_id": 4007017, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1287890275, "body_markdown": "Create dynamic models for sets of legacy tables with the same structure:\r\n\r\n    class BaseStructure(models.Model):\r\n        name = models.CharField(max_length=100)\r\n        address = models.CharField(max_length=100)\r\n        \r\n        class Meta:\r\n            abstract=True\r\n\r\n    class DynamicTable(models.Model):\r\n        table_name = models.CharField(max_length=20)\r\n\r\n        def get_model(self):\r\n            class Meta:\r\n                managed=False\r\n                table_name=self.table_name\r\n            \r\n            attrs = {}\r\n            attrs[&#39;Meta&#39;] = Meta\r\n            \r\n            # type(new_class_name, (base,classes), {extra: attributes})\r\n            dynamic_class = type(self.table_name, (BaseStructure,), attrs) \r\n            return dynamic_class\r\n\r\n    customers = DynamicTable.objects.get(table_name=&#39;Customers&#39;).get_model()\r\n    me = customers.objects.get(name=&#39;Josh Smeaton&#39;)\r\n    me.address = &#39;Over the rainbow&#39;\r\n    me.save()\r\n\r\nThis assumes that you have legacy tables with the same structure. Instead of creating a model to wrap each of the tables, you define one base model, and dynamically construct the class needed to interact with a specific table."}, {"tags": [], "down_vote_count": 0, "creation_date": 1287891714, "answer_id": 4007078, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1287891714, "last_edit_date": 1495542865, "body_markdown": "#Remove Database Access Information from settings.py\r\n\r\nOne thing I&#39;ve done in my Django site&#39;s `settings.py` is load database access info from a file in `/etc`.  This way the access setup (database host, port, username, password) can be different for each machine, and sensitive info like the password isn&#39;t in my project&#39;s repository.  You might want to restrict access to the workers in a similar manner, by making them connect with a different username.\r\n\r\nYou could also pass in the database connection information, or even just a key or path to a configuration file, via environment variables, and handle it in `settings.py`.\r\n\r\nFor example, here&#39;s how I pull in my database configuration file:\r\n\r\n    g = {}\r\n    dbSetup = {}\r\n    execfile(os.environ[&#39;DB_CONFIG&#39;], g, dbSetup)\r\n    if &#39;databases&#39; in dbSetup:\r\n    \tDATABASES = dbSetup[&#39;databases&#39;]\r\n    else:\r\n    \tDATABASES = {\r\n    \t\t&#39;default&#39;: {\r\n    \t\t\t&#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,\r\n    \t\t\t# ...\r\n    \t\t}\r\n    \t}\r\n\r\nNeedless to say, you need to make sure that the file in `DB_CONFIG` is not accessible to any user besides the db admins and Django itself.  The default case should refer Django to a developer&#39;s own test database.  There may also be a better solution using the `ast` module instead of `execfile`, but I haven&#39;t researched it yet.\r\n\r\nAnother thing I do is use separate users for DB admin tasks vs. everything else.  In my `manage.py`, I added the following preamble:\r\n\r\n    # Find a database configuration, if there is one, and set it in the environment.\r\n    adminDBConfFile = &#39;/etc/django/db_admin.py&#39;\r\n    dbConfFile = &#39;/etc/django/db_regular.py&#39;\r\n    import sys\r\n    import os\r\n    def goodFile(path):\r\n    \treturn os.path.isfile(path) and os.access(path, os.R_OK)\r\n    if len(sys.argv) &gt;= 2 and sys.argv[1] in [&quot;syncdb&quot;, &quot;dbshell&quot;, &quot;migrate&quot;] \\\r\n    \tand goodFile(adminDBConfFile):\r\n    \tos.environ[&#39;DB_CONFIG&#39;] = adminDBConfFile\r\n    elif goodFile(dbConfFile):\r\n    \tos.environ[&#39;DB_CONFIG&#39;] = dbConfFile\r\n\r\nWhere the config in `/etc/django/db_regular.py` is for a user with access to only the Django database with SELECT, INSERT, UPDATE, and DELETE, and `/etc/django/db_admin.py` is for a user with these permissions plus CREATE, DROP, INDEX, ALTER, and LOCK TABLES.  (The `migrate` command is from [South][2].)  This gives me some protection from Django code messing with my schema at runtime, and it limits the damage an SQL injection attack can cause (though you should still check and filter all user input).\r\n\r\n(Copied from my answer to [another question][1])\r\n\r\n  [1]: https://stackoverflow.com/questions/3884249/django-celery-database-for-models-on-producer-and-worker/3884535#3884535\r\n  [2]: http://south.aeracode.org/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1296555118, "answer_id": 4861267, "path": "stack.django.answer", "score": 40, "up_vote_count": 40, "is_accepted": false, "last_activity_date": 1296555118, "body_markdown": "The `./manage.py runserver_plus` facilty which comes with [django_extensions][1] is truly awesome.  \r\n\r\nIt creates an enhanced debug page that, amongst other things, uses the Werkzeug debugger to create interactive debugging consoles for each point in the stack (see screenshot).  It also provides a very useful convenience debugging method `dump()` for displaying information about an object/frame.\r\n\r\n![enter image description here][2]\r\n\r\nTo install, you can use pip:\r\n\r\n    pip install django_extensions\r\n    pip install Werkzeug\r\n\r\nThen add `&#39;django_extensions&#39;` to your `INSTALLED_APPS` tuple in `settings.py` and start the development server with the new extension:\r\n\r\n    ./manage.py runserver_plus\r\n\r\nThis will change the way you debug.\r\n\r\n  [1]: http://code.google.com/p/django-command-extensions/\r\n  [2]: http://i.stack.imgur.com/M6dJb.jpg"}, {"tags": [], "down_vote_count": 0, "creation_date": 1296747453, "answer_id": 4888160, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1296747453, "body_markdown": "Using an &#39;apps&#39; folder to organize your applications without editing PYTHONPATH\r\n\r\nThis has come handy when I want to organize my folders like this:\r\n\r\n    apps/\r\n        foo/\r\n        bar/\r\n    site/\r\n    settings.py\r\n    urls.py\r\n\r\nwithout overwritting PYTHONPATH or having to add **apps** to every import like:\r\n\r\n    from apps.foo.model import *\r\n    from apps.bar.forms import *\r\n\r\n \r\n\r\nIn your settings.py add\r\n\r\n    import os\r\n    import sys\r\n    PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))\r\n    sys.path.insert(0, os.path.join(PROJECT_ROOT, &quot;apps&quot;))\r\n\r\nand you are ready to go :-)\r\n\r\nI saw this at http://codespatter.com/2009/04/10/how-to-add-locations-to-python-path-for-reusable-django-apps/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1301973154, "answer_id": 5546778, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1301973154, "body_markdown": "Instead of evaluating whole queryset to check whether you got back any results, use .exists() in Django 1.2+ and .count() for previous versions.\r\n\r\nBoth exists() and count() clears order by clauses and retrieves a single integer from DB. However exists() will always return 1 where as count may return higher values on which limits will be applied manually. Source for [has_result][1] used in exists() and [get_count][2] used in count() for the curious.\r\n\r\nSince they both return a single integer, there&#39;s no model instantiation, loading model attributes in memory and no large TextFields being passed between your DB and app.\r\n\r\nIf you have already evaluated the query, .count() computes len(cached_result) and .exists() computes bool(cached_result)\r\n\r\n**Not efficient - Example 1**\r\n\r\n    books = Books.objects.filter(author__last_name=&#39;Brown&#39;)\r\n    if books:\r\n        # Do something\r\n\r\n**Not efficient - Example 2**\r\n\r\n    books = Books.objects.filter(author__last_name=&#39;Brown&#39;)\r\n    if len(books):\r\n        # Do something\r\n\r\n**Efficient - Example 1**\r\n\r\n    books = Books.objects.filter(author__last_name=&#39;Brown&#39;)\r\n    if books.count():\r\n        # Do something\r\n\r\n**Efficient - Example 2**\r\n\r\n    books = Books.objects.filter(author__last_name=&#39;Brown&#39;)\r\n    if books.exists():\r\n        # Do something\r\n\r\n\r\n  [1]: http://code.djangoproject.com/browser/django/trunk/django/db/models/sql/query.py#L412\r\n  [2]: http://code.djangoproject.com/browser/django/trunk/django/db/models/sql/query.py#L377"}, {"tags": [], "down_vote_count": 0, "creation_date": 1302033573, "answer_id": 5557751, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1302033573, "body_markdown": "`django_extensions` from https://github.com/django-extensions/django-extensions is just great.\r\n\r\nFew nice `./manage.py` commands:\r\n\r\n- `shell_plus` - autoimports models from all INSTALLED_APPS\r\n- `show_urls` - prints all urls defined in all apps in project\r\n- `runscript` - runs any script in project context (you can use models and other Django-related modules)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1303460558, "answer_id": 5753606, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1303460558, "body_markdown": "PyCharm and Wingware IDE is great tool if you have money to pay for the license. \r\n\r\nSince I am a poor developer, I use [PyDev][1] with [Eclipse][2]. \r\n\r\n\r\n  [1]: http://pydev.org/\r\n  [2]: http://www.eclipse.org/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1303486832, "answer_id": 5757092, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1305789648, "last_edit_date": 1305789648, "body_markdown": "When passing variables from a view to a template the response dictionary can become tedious to type out. I find it nice to just pass all the local variables at once using `locals()` .\r\n\r\n    def show_thing(request, thing_id):\r\n    \tthing = Thing.objects.get(pk=thing_id)\r\n    \treturn render_to_response(&#39;templates/things/show.html&#39;, locals())\r\n\r\n(Not a hidden feature per se but nevertheless helpful when new to Python and or Django.)\r\n\r\nEdit: Obviously it&#39;s better to be explicit than implicit but this approach can be helpful  during development."}, {"tags": [], "down_vote_count": 0, "creation_date": 1303934356, "answer_id": 5809809, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1303934356, "body_markdown": "Use database migrations. Use [South][1].\r\n\r\n\r\n  [1]: http://south.aeracode.org"}, {"tags": [], "down_vote_count": 0, "creation_date": 1305461624, "answer_id": 6008305, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1305461624, "body_markdown": "A bit late to the party. But Django Canvas has recently come out and it deserves a place here.\r\n\r\nDon&#39;t start your project with `django-admin.py startproject`. Instead you can use something like [Django Canvas][1] to help piece together a blank project with the modules you need.\r\n\r\nYou go to that site, tick some options and then download a blank project, so simple.\r\n\r\nIt has all the common things like South schema migrations and Command Extensions as well as a lot of other best practices mentioned here. Plus it has a great `start.sh/shart.bat` script that will install python, virtualenv, pip, django and whatever you need to start from a fresh copy of windows, osx or linux.\r\n\r\n\r\n  [1]: http://djangocanvas.com"}, {"tags": [], "down_vote_count": 0, "creation_date": 1306693882, "answer_id": 6169597, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1306693882, "body_markdown": "\r\nIf you make changes into model\r\n\r\n    ./manage.py dumpdata appname &gt; appname_data.json  \r\n    ./manage.py reset appname\r\n    django-admin.py loaddata appname_data.json"}, {"tags": [], "down_vote_count": 0, "creation_date": 1307933689, "answer_id": 6326248, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1307933689, "body_markdown": "**dir() &amp; raise ValueError()**\r\n\r\nFor debugging / exploring the state of things during development, I use the following trick:\r\n\r\n    ...\r\n      to_see = dir(inspect_this_thing)\r\n      to_see2 = inspect_this_thing.some_attribute\r\n      raise ValueError(&quot;Debugging&quot;)\r\n    ...\r\n\r\nThis is especially helpful when you&#39;re working on parts of django that aren&#39;t particularly well documented (form.changed_fields is one I used this on recently).\r\n\r\n**locals().** \r\n\r\nInstead of writing out every variable for the template context, use the python builtin locals() command which creates a dictionary for you:\r\n\r\n     \r\n    #This is tedious and not very DRY\r\n    return render_to_response(&#39;template.html&#39;, {&quot;var1&quot;: var1, &quot;var2&quot;:var2}, context_instance=RequestContext(request))\r\n\r\n    #95% of the time this works perfectly\r\n    return render_to_response(&#39;template.html&#39;, locals(), context_instance=RequestContext(request))\r\n\r\n    #The other 4.99%\r\n    render_dict = locals()\r\n    render_dict[&#39;also_needs&#39;] = &quot;this value&quot;\r\n    return render_to_response(&#39;template.html&#39;, render_dict, context_instance=RequestContext(request))\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1313957103, "answer_id": 7140786, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1313957103, "body_markdown": "Automatically set &#39;DEBUG&#39; attribute on production environment (settings.py)\r\n\r\n    import socket\r\n     \r\n    if socket.gethostname() == &#39;productionserver.com&#39;:\r\n        DEBUG = False\r\n    else:\r\n        DEBUG = True\r\n\r\nBy: http://nicksergeant.com/2008/automatically-setting-debug-in-your-django-app-based-on-server-hostname/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1320844657, "answer_id": 8065577, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1320844657, "body_markdown": "Django hasn&#39;t got app settings, so i made my own app_settings.py detection.\r\nAt the bottom of the settings.py i added this code:\r\n\r\n    import sys, os\r\n    # Append application settings without triggering the __init__.\r\n    for installed_app in INSTALLED_APPS:\r\n        # Ignore django applications\r\n        if not installed_app.startswith(&#39;django.&#39;):\r\n            # Find the app (and the settings file)\r\n            for path in sys.path:\r\n                path = os.path.join(path, installed_app, &#39;app_settings.py&#39;)\r\n                if os.path.isfile(path):\r\n                    # Application settings found\r\n                    exec open(path).read()\r\n\r\nIt detects app_settings.py in all the INSTALLED_APPS. Instead of importing it, it will read the contents of the app_settings file and will execute it inline. If app_settings is imported directly all sort of Django import errors will be raised (because Django isn&#39;t initialized yet).\r\n\r\nSo my app/app_settings.py will look like this:\r\n\r\n    MIDDLEWARE_CLASSES += (\r\n        &#39;app.middleware.FancyMiddleware&#39;,\r\n    )\r\n\r\nNow the application only has to be added to the INSTALLED_APPS, instead of finding all application settings and add them to the settings.py (middleware, urls...)\r\n\r\nNote: It would be better if Django had a hook to append extra settings, so application settings could be added on startup (or in runtime)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1321427648, "answer_id": 8147991, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1321427648, "body_markdown": "Use asynchronous tasks. Use [Celery][1]\r\n\r\n\r\n  [1]: http://celeryproject.org/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1323902884, "answer_id": 8512853, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1323902884, "body_markdown": "Read [Unbreaking Django][1] if you haven&#39;t already. It contains _lots_ of useful information regarding django pitfalls.\r\n\r\n[1]: http://thebuild.com/presentations/unbreaking-django.pdf"}], "title": "Favorite Django Tips &amp; Features?", "view_count": 55339, "answer_count": 55, "code_snippet": ["<code># settings.py\nimport os\nPROJECT_DIR = os.path.dirname(__file__)\n...\nSTATIC_DOC_ROOT = os.path.join(PROJECT_DIR, \"static\")\n...\nTEMPLATE_DIRS = (\n    os.path.join(PROJECT_DIR, \"templates\"),\n)\n</code>", "<code>j = lambda filename: os.path.join(PROJECT_DIR, filename)</code>", "<code>j(\"static\")</code>", "<code>wontfix</code>", "<code>./manage.py graph_models -a -g -o my_project.png\n</code>", "<code>render_to</code>", "<code>render_to_response</code>", "<code>@render_to('template.html')\ndef foo(request):\n    bars = Bar.objects.all()\n    if request.user.is_authenticated():\n        return HttpResponseRedirect(\"/some/url/\")\n    else:\n        return {'bars': bars}\n\n# equals to\ndef foo(request):\n    bars = Bar.objects.all()\n    if request.user.is_authenticated():\n        return HttpResponseRedirect(\"/some/url/\")\n    else:\n        return render_to_response('template.html',\n                              {'bars': bars},\n                              context_instance=RequestContext(request))\n</code>", "<code>from django import template\ntemplate.add_to_builtins('project.app.templatetags.custom_tag_module')\n</code>", "<code>{% load custom_tag_module %}</code>", "<code>template.add_to_builtins()</code>", "<code>'project.custom_tag_module'</code>", "<code>virtualenv myNewEnv --no-site-packages</code>", "<code>. myNewEnv/bin/activate</code>", "<code>pip install django</code>", "<code>reverse</code>", "<code>urlpatterns += ('project.application.views'\n   url( r'^something/$', 'view_function', name=\"url-name\" ),\n   ....\n)\n</code>", "<code>url</code>", "<code>url</code>", "<code>{% url path.to.view.name arg1 arg2 %}</code>", "<code># somewhere in urls.py\nurlpatterns += patterns('django.contrib.auth',\n    (r'^accounts/login/$','views.login', {'template_name': 'admin/login.html'}),\n    (r'^accounts/logout/$','views.logout'),\n)\n</code>", "<code>def myview(request, arg, arg2=None, template='my/template.html'):\n    ''' My view... '''\n    response = dict()\n    myuser = MyUser.objects.get(user=request.user)\n    response['my_user'] = myuser\n    ...\n    return render_to_response(template,\n                              response,\n                              context_instance=RequestContext(request))\n</code>", "<code>'my_project/apps/core/context.py</code>", "<code>def my_context(request):\n    try:\n        return dict(my_user=MyUser.objects.get(user=request.user))\n    except ObjectNotFound:\n        return dict(my_user='')\n</code>", "<code>settings.py</code>", "<code>TEMPLATE_CONTEXT_PROCESSORS</code>", "<code>TEMPLATE_CONTEXT_PROCESSORS = (\n    'my_project.apps.core.context.my_context',\n    ...\n)\n</code>", "<code>my_user</code>", "<code>from django.utils.translation import ugettext_lazy as _\nclass Post(models.Model):\n    title = models.CharField(_('title'), max_length=255)\n    body = models.TextField(_('body'))\n    created = models.DateTimeField(auto_now_add=True)\n</code>", "<code>import twitter\n\nfrom django.core.cache import cache\nfrom django.db.models.signals import post_save\nfrom django.conf import settings\n\ndef posted_blog(sender, created=None, instance=None, **kwargs):\n    ''' Listens for a blog post to save and alerts some services. '''\n    if (created and instance is not None):\n        tweet = 'New blog post! %s' instance.title\n        t = twitter.PostUpdate(settings.TWITTER_USER,\n                               settings.TWITTER_PASSWD,\n                               tweet)\n        cache.set(instance.cache_key, instance, 60*5)\n       # send pingbacks\n       # ...\n       # whatever else\n    else:\n        cache.delete(instance.cache_key)\npost_save.connect(posted_blog, sender=Post)\n</code>", "<code>from IPython.Shell import IPShellEmbed; IPShellEmbed()()\n</code>", "<code>ipdb</code>", "<code>ipdb.set_trace()</code>", "<code>python -m smtpd -n -c DebuggingServer localhost:1025\n</code>", "<code>EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'</code>", "<code>manage.py</code>", "<code>extras/django_bash_completion</code>", "<code>django-admin.py</code>", "<code>manage.py</code>", "<code>django-admin.py</code>", "<code>sql</code>", "<code>sql</code>", "<code>./manage.py runserver_plus</code>", "<code>dump()</code>", "<code>pip install django_extensions\npip install Werkzeug\n</code>", "<code>'django_extensions'</code>", "<code>INSTALLED_APPS</code>", "<code>settings.py</code>", "<code>./manage.py runserver_plus\n</code>", "<code>request.raw_post_data</code>", "<code>assert False</code>", "<code>5 / 0</code>", "<code>if_item_in_list</code>", "<code>%{ if item in list %}</code>", "<code>{% if object.field &lt; 10 %}</code>", "<code>url(r'(?P&lt;project_id&gt;\\d+)/team/$', 'project_team', name='project_team')\n</code>", "<code>&lt;a href=\"{% url project_team project.id %}\"&gt;Team&lt;/a&gt;\n</code>", "<code>from django import http\n\nclass RestView(object):\n    methods = ('GET', 'HEAD')\n\n    @classmethod\n    def dispatch(cls, request, *args, **kwargs):\n        resource = cls()\n        if request.method.lower() not in (method.lower() for method in resource.methods):\n            return http.HttpResponseNotAllowed(resource.methods)\n        try:\n            method = getattr(resource, request.method.lower())\n        except AttributeError:\n            raise Exception(\"View method `%s` does not exist.\" % request.method.lower())\n        if not callable(method):\n            raise Exception(\"View method `%s` is not callable.\" % request.method.lower())\n        return method(request, *args, **kwargs)\n\n    def get(self, request, *args, **kwargs):\n        return http.HttpResponse()\n\n    def head(self, request, *args, **kwargs):\n        response = self.get(request, *args, **kwargs)\n        response.content = ''\n        return response\n</code>", "<code>from django.conf.urls.defaults import *\nfrom views import MyRestView\n\nurlpatterns = patterns('',\n    (r'^restview/', MyRestView.dispatch),\n)\n</code>", "<code>render_to_response</code>", "<code>direct_to_template</code>", "<code>render_to_response</code>", "<code>render_to_response</code>", "<code>&lt;a href=\"{{MEDIA_URL}}images/frog.jpg\"&gt;A frog&lt;/a&gt; \n</code>", "<code>from django.views.generic import simple\n\ndef article_detail(request, slug=None):\n    article = get_object_or_404(Article, slug=slug)\n    return simple.direct_to_template(request, \n        template=\"articles/article_detail.html\",\n        extra_context={'article': article}\n    )\n</code>", "<code>render</code>", "<code>{% load webdesign %}\n{% lorem 5 p %}\n</code>", "<code>django.db.models.get_model</code>", "<code>(r'^site_media/(?P&lt;path&gt;.*)$', 'django.views.static.serve',\n        {'document_root': '/path/to/media'}),\n</code>", "<code>{% url image-processor uid as img_src %}\n&lt;img src=\"{% thumbnail img_src 100x100 %}\"/&gt;\n</code>", "<code>&lt;profile id=4&gt;\n    &lt;email&gt;joe@example.com&lt;/email&gt;\n    &lt;first_name&gt;Joe&lt;/first_name&gt;\n    &lt;last_name&gt;Example&lt;/last_name&gt;\n    &lt;date_of_birth&gt;1975-05-15&lt;/date_of_birth&gt;\n&lt;/profile&gt;\n</code>", "<code>class Profile(xml_models.Model):\n    user_id = xml_models.IntField(xpath='/profile/@id')\n    email = xml_models.CharField(xpath='/profile/email')\n    first = xml_models.CharField(xpath='/profile/first_name')\n    last = xml_models.CharField(xpath='/profile/last_name')\n    birthday = xml_models.DateField(xpath='/profile/date_of_birth')\n\n    finders = {\n        (user_id,):  settings.API_URL +'/api/v1/profile/userid/%s',\n        (email,):  settings.API_URL +'/api/v1/profile/email/%s',\n    }\n\nprofile = Profile.objects.get(user_id=4)\nprint profile.email\n# would print 'joe@example.com'\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "slug"], "creation_date": 1241745431, "body_markdown": "I am trying to create a SlugField in Django.\r\n\r\nI created this simple model:\r\n\r\n    from django.db import models\r\n    \r\n    class Test(models.Model):\r\n        q = models.CharField(max_length=30)\r\n        s = models.SlugField()\r\n\r\nI then do this:\r\n\r\n    &gt;&gt;&gt; from mysite.books.models import Test\r\n    &gt;&gt;&gt; t=Test(q=&quot;aa a a a&quot;, s=&quot;b b b b&quot;)\r\n    &gt;&gt;&gt; t.s\r\n    &#39;b b b b&#39;\r\n    &gt;&gt;&gt; t.save()\r\n    &gt;&gt;&gt; t.s\r\n    &#39;b b b b&#39;\r\n    &gt;&gt;&gt; \r\n\r\n\r\n\r\n\r\nI was expecting b-b-b-b\r\n\r\n\r\n", "last_edit_date": 1453874800, "up_vote_count": 182, "link": "https://stackoverflow.com/questions/837828/how-do-i-create-a-slug-in-django", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1241745754, "answer_id": 837835, "path": "stack.django.answer", "score": 351, "up_vote_count": 351, "is_accepted": false, "last_activity_date": 1346947623, "last_edit_date": 1346947623, "body_markdown": "You will need to use the slugify function. \r\n\r\n    \r\n    &gt;&gt;&gt; from django.template.defaultfilters import slugify\r\n    &gt;&gt;&gt; slugify(&quot;b b b b&quot;)\r\n    u&#39;b-b-b-b&#39;\r\n    &gt;&gt;&gt;\r\n\r\nYou can call `slugify` automatically by overriding the `save` method:\r\n\r\n    class test(models.Model):\r\n        q = models.CharField(max_length=30)\r\n        s = models.SlugField()\r\n        \r\n        def save(self, *args, **kwargs):\r\n            self.s = slugify(self.q)\r\n            super(test, self).save(*args, **kwargs)\r\n\r\nBe aware that the above will cause your URL to change when the `q` field is edited, which [can cause broken links](http://www.w3.org/Provider/Style/URI.html). It may be preferable to generate the slug only once when you create a new object:\r\n\r\n\r\n    class test(models.Model):\r\n        q = models.CharField(max_length=30)\r\n        s = models.SlugField()\r\n        \r\n        def save(self, *args, **kwargs):\r\n            if not self.id:\r\n                # Newly created object, so set slug\r\n                self.s = slugify(self.q)\r\n\r\n            super(test, self).save(*args, **kwargs)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1241853989, "answer_id": 842865, "path": "stack.django.answer", "score": 27, "up_vote_count": 27, "is_accepted": false, "last_activity_date": 1440337804, "last_edit_date": 1440337804, "body_markdown": "If you&#39;re using the admin interface to add new items of your model, you can set up a `ModelAdmin` in your `admin.py` and utilize [`prepopulated_fields`](https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.prepopulated_fields) to automate entering of a slug:\r\n\r\n    class ClientAdmin(admin.ModelAdmin):\r\n        prepopulated_fields = {&#39;slug&#39;: (&#39;name&#39;,)}\r\n\r\n    admin.site.register(Client, ClientAdmin)\r\n\r\nHere, when the user enters a value in the admin form for the `name` field, the `slug` will be automatically populated with the correct slugified `name`. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1241863812, "answer_id": 843067, "path": "stack.django.answer", "score": 22, "up_vote_count": 22, "is_accepted": false, "last_activity_date": 1454531367, "last_edit_date": 1454531367, "body_markdown": "In most cases the slug should not change, so you really only want to calculate it on first save:\r\n\r\n    class Test(models.Model):\r\n        q = models.CharField(max_length=30)\r\n        s = models.SlugField(editable=False) # hide from admin\r\n\r\n        def save(self):\r\n            if not self.id:\r\n                self.s = slugify(self.q)\r\n \r\n            super(Test, self).save()\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1253939795, "answer_id": 1480440, "path": "stack.django.answer", "score": 57, "up_vote_count": 57, "is_accepted": false, "last_activity_date": 1471633168, "last_edit_date": 1471633168, "body_markdown": "A small correction to Thepeer&#39;s answer: To override `save()` function in model classes, better add arguments to it:\r\n\r\n    from django.utils.text import slugify\r\n\r\n    def save(self, *args, **kwargs):\r\n        if not self.id:\r\n            self.s = slugify(self.q)\r\n    \r\n        super(test, self).save(*args, **kwargs)\r\n\r\nOtherwise, `test.objects.create(q=&quot;blah blah blah&quot;)` will result in a `force_insert` error (unexpected argument).\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1292340409, "answer_id": 4440730, "path": "stack.django.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1292340409, "body_markdown": "If you don&#39;t want to set the slugfield to Not be editable, then I believe you&#39;ll want to set the Null and Blank properties to False.  Otherwise you&#39;ll get an error when trying to save in Admin.\r\n\r\nSo a modification to the above example would be::\r\n\r\n    class test(models.Model):\r\n        q = models.CharField(max_length=30)\r\n        s = models.SlugField(null=True, blank=True) # Allow blank submission in admin.\r\n    \r\n        def save(self):\r\n            if not self.id:\r\n                self.s = slugify(self.q)\r\n    \r\n            super(test, self).save()\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1296807287, "answer_id": 4895850, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1314242290, "last_edit_date": 1314242290, "body_markdown": "Use prepopulated_fields in your admin class:\r\n\r\n    class ArticleAdmin(admin.ModelAdmin):\r\n        prepopulated_fields = {&quot;slug&quot;: (&quot;title&quot;,)}\r\n    \r\n    admin.site.register(Article, ArticleAdmin)\r\n\r\n\r\nhttp://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.prepopulated_fields"}, {"tags": [], "down_vote_count": 0, "creation_date": 1346403921, "answer_id": 12212162, "path": "stack.django.answer", "score": 101, "up_vote_count": 101, "is_accepted": false, "last_activity_date": 1346403921, "body_markdown": "There is corner case with some utf-8 characters\r\n\r\nExample:\r\n    \r\n    &gt;&gt;&gt; from django.template.defaultfilters import slugify\r\n    &gt;&gt;&gt; slugify(u&quot;test \u0105\u0119\u015b\u0107&#243;\u0142\u0144&quot;)\r\n    u&#39;test-aescon&#39; # there is no &quot;l&quot;\r\n\r\nThis can be solved with [Unidecode][1]\r\n\r\n    &gt;&gt;&gt; from unidecode import unidecode\r\n    &gt;&gt;&gt; from django.template.defaultfilters import slugify\r\n    &gt;&gt;&gt; slugify(unidecode(u&quot;test \u0105\u0119\u015b\u0107&#243;\u0142\u0144&quot;))\r\n    u&#39;test-aescoln&#39;\r\n\r\n\r\n  [1]: http://pypi.python.org/pypi/Unidecode/0.04.9"}, {"tags": [], "down_vote_count": 0, "creation_date": 1424008717, "answer_id": 28526821, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1427451964, "last_edit_date": 1427451964, "body_markdown": "I&#39;m using Django 1.7\r\n\r\nCreate a SlugField in your model like this:\r\n\r\n    slug = models.SlugField()\r\n\r\nThen in `admin.py` define `prepopulated_fields`;\r\n\r\n    class ArticleAdmin(admin.ModelAdmin):\r\n        prepopulated_fields = {&quot;slug&quot;: (&quot;title&quot;,)}"}], "title": "How do I create a slug in Django?", "view_count": 97191, "answer_count": 8, "code_snippet": ["<code>from django.db import models\n\nclass Test(models.Model):\n    q = models.CharField(max_length=30)\n    s = models.SlugField()\n</code>", "<code>&gt;&gt;&gt; from mysite.books.models import Test\n&gt;&gt;&gt; t=Test(q=\"aa a a a\", s=\"b b b b\")\n&gt;&gt;&gt; t.s\n'b b b b'\n&gt;&gt;&gt; t.save()\n&gt;&gt;&gt; t.s\n'b b b b'\n&gt;&gt;&gt; \n</code>", "<code>&gt;&gt;&gt; from django.template.defaultfilters import slugify\n&gt;&gt;&gt; slugify(\"b b b b\")\nu'b-b-b-b'\n&gt;&gt;&gt;\n</code>", "<code>slugify</code>", "<code>save</code>", "<code>class test(models.Model):\n    q = models.CharField(max_length=30)\n    s = models.SlugField()\n\n    def save(self, *args, **kwargs):\n        self.s = slugify(self.q)\n        super(test, self).save(*args, **kwargs)\n</code>", "<code>q</code>", "<code>class test(models.Model):\n    q = models.CharField(max_length=30)\n    s = models.SlugField()\n\n    def save(self, *args, **kwargs):\n        if not self.id:\n            # Newly created object, so set slug\n            self.s = slugify(self.q)\n\n        super(test, self).save(*args, **kwargs)\n</code>", "<code>def save(self):</code>", "<code>def save(self, *args, **kwargs):</code>", "<code>test.objects.create(q=\"blah blah blah\")</code>", "<code>slugify()</code>", "<code>django.utils.text.slugify</code>", "<code>&gt;&gt;&gt; from django.template.defaultfilters import slugify\n&gt;&gt;&gt; slugify(u\"test \u0105\u0119\u015b\u0107\u00f3\u0142\u0144\")\nu'test-aescon' # there is no \"l\"\n</code>", "<code>&gt;&gt;&gt; from unidecode import unidecode\n&gt;&gt;&gt; from django.template.defaultfilters import slugify\n&gt;&gt;&gt; slugify(unidecode(u\"test \u0105\u0119\u015b\u0107\u00f3\u0142\u0144\"))\nu'test-aescoln'\n</code>", "<code>save()</code>", "<code>from django.utils.text import slugify\n\ndef save(self, *args, **kwargs):\n    if not self.id:\n        self.s = slugify(self.q)\n\n    super(test, self).save(*args, **kwargs)\n</code>", "<code>test.objects.create(q=\"blah blah blah\")</code>", "<code>force_insert</code>", "<code>return super(test, self).save(*args, **kwargs)</code>", "<code>None</code>", "<code>ModelAdmin</code>", "<code>admin.py</code>", "<code>prepopulated_fields</code>", "<code>class ClientAdmin(admin.ModelAdmin):\n    prepopulated_fields = {'slug': ('name',)}\n\nadmin.site.register(Client, ClientAdmin)\n</code>", "<code>name</code>", "<code>slug</code>", "<code>name</code>", "<code>slug</code>", "<code>name</code>", "<code>'slug_en':('name_en',)</code>", "<code>class Test(models.Model):\n    q = models.CharField(max_length=30)\n    s = models.SlugField(editable=False) # hide from admin\n\n    def save(self):\n        if not self.id:\n            self.s = slugify(self.q)\n\n        super(Test, self).save()\n</code>", "<code>class test(models.Model):\n    q = models.CharField(max_length=30)\n    s = models.SlugField(null=True, blank=True) # Allow blank submission in admin.\n\n    def save(self):\n        if not self.id:\n            self.s = slugify(self.q)\n\n        super(test, self).save()\n</code>", "<code>class ArticleAdmin(admin.ModelAdmin):\n    prepopulated_fields = {\"slug\": (\"title\",)}\n\nadmin.site.register(Article, ArticleAdmin)\n</code>", "<code>slug = models.SlugField()\n</code>", "<code>admin.py</code>", "<code>prepopulated_fields</code>", "<code>class ArticleAdmin(admin.ModelAdmin):\n    prepopulated_fields = {\"slug\": (\"title\",)}\n</code>"], "path": "stack.django"}, {"tags": ["shell", "find"], "creation_date": 1247688741, "body_markdown": "I was trying to get a list of all python and html files in a directory with the command `find Documents -name &quot;*.{py,html}&quot;`.\r\n\r\nThen along came the man page:\r\n\r\n&gt; Braces within the pattern (\u2018{}\u2019) are not considered to be special (that is, find . -name &#39;foo{1,2}&#39; matches a file named foo{1,2}, not the files foo1 and foo2.\r\n\r\nAs this is part of a pipe-chain, I&#39;d like to be able to specify which extensions it matches at runtime (no hardcoding).  If find just can&#39;t do it, a perl one-liner (or similar) would be fine.\r\n\r\nEdit: The answer I eventually came up with include all sorts of crap, and is a bit long as well, so I posted it as [an answer][1] to the original itch I was trying to scratch.  Feel free to hack that up if you have better solutions.\r\n\r\n  [1]:https://stackoverflow.com/questions/1133391/code-lines-of-code-in-a-django-project/1134186#1134186", "last_edit_date": 1495541426, "up_vote_count": 223, "link": "https://stackoverflow.com/questions/1133698/find-name-pattern-that-matches-multiple-patterns", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1247688960, "answer_id": 1133720, "path": "stack.django.answer", "score": 333, "up_vote_count": 333, "is_accepted": true, "last_activity_date": 1473767496, "last_edit_date": 1473767496, "body_markdown": "Use `-o`, which means &quot;or&quot;:\r\n\r\n    find Documents \\( -name &quot;*.py&quot; -o -name &quot;*.html&quot; \\)\r\n\r\n**Edit**: Sorry, just re-read the question... you&#39;d need to build that command line programmatically, which isn&#39;t that easy.\r\n\r\nAre you using bash (or Cygwin on Windows)?  If you are, you should be able to do this:\r\n\r\n    ls **/*.py **/*.html\r\n\r\nwhich might be easier to build programmatically.\r\n\r\n**Edit**: Applied @artbristol comment to the answer. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1247688989, "answer_id": 1133726, "path": "stack.django.answer", "score": 24, "up_vote_count": 24, "is_accepted": false, "last_activity_date": 1449161005, "last_edit_date": 1449161005, "body_markdown": "You could programmatically add more `-name` clauses, separated by `-or`:\r\n\r\n    find Documents \\( -name &quot;*.py&quot; -or -name &quot;*.html&quot; \\)\r\n\r\nOr, go for a simple loop instead:\r\n\r\n    for F in Documents/*.{py,html}; do ...something with each &#39;$F&#39;... ; done"}, {"tags": [], "down_vote_count": 0, "creation_date": 1264611241, "answer_id": 2148733, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1264611241, "body_markdown": "I had a similar need.  This worked for me:\r\n\r\n    find ../../ \\( -iname &#39;tmp&#39; -o -iname &#39;vendor&#39; \\) -prune -o \\( -iname &#39;*.*rb&#39; -o -iname &#39;*.rjs&#39; \\) -print\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1326469861, "answer_id": 8853263, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1326469861, "body_markdown": "I needed to remove all files in child dirs except for some files. The following worked for me (three patterns specified):\r\n\r\n    find . -depth -type f -not -name *.itp -and -not -name *ane.gro -and -not -name *.top -exec rm &#39;{}&#39; +\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1327312919, "answer_id": 8969875, "path": "stack.django.answer", "score": 40, "up_vote_count": 41, "is_accepted": false, "last_activity_date": 1455012067, "last_edit_date": 1455012067, "body_markdown": "Some editions of find, mostly on linux systems, possibly on others aswell support -regex and -regextype options, which finds files with names matching the regex.\r\n\r\nfor example\r\n\r\n    find . -regextype posix-egrep -regex &quot;.*\\.(py|html)$&quot; \r\n\r\nshould do the trick in the above example.\r\nHowever this is not a standard POSIX find function and is implementation dependent."}, {"tags": [], "down_vote_count": 1, "creation_date": 1374605397, "answer_id": 17818604, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1374605397, "body_markdown": "    #! /bin/bash\r\n    filetypes=&quot;*.py *.xml&quot;\r\n    for type in $filetypes\r\n    do\r\n    find Documents -name &quot;$type&quot;\r\n    done\r\nsimple but works :)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1403040606, "answer_id": 24273633, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1403041888, "last_edit_date": 1403041888, "body_markdown": "This works on AIX korn shell.\r\n\r\n    find *.cbl *.dms -prune -type f -mtime -1\r\n\r\nThis is looking for `*.cbl` or `*.dms` which are 1 day old, in current directory only, skipping the sub-directories.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1452790765, "answer_id": 34795371, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1452790765, "body_markdown": "My default has been:\r\n\r\n`find -type f | egrep -i &quot;*.java|*.css|*.cs|*.sql&quot;`\r\n\r\nLike the less process intencive `find` execution by Brendan Long and Stephan202 et al.:\r\n\r\n&gt; `find Documents \\( -name &quot;*.py&quot; -or -name &quot;*.html&quot; \\)`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1479926906, "answer_id": 40772121, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1479926906, "body_markdown": "This will find all .c or .cpp files on linux\r\n\r\n    $ find . -name &quot;*.c&quot; -o -name &quot;*.cpp&quot;\r\n\r\nYou don&#39;t need the escaped parenthesis unless you are doing some additional mods.  Here from the man page they are saying if the pattern matches, print it.  Perhaps they are trying to control printing.  In this case the -print acts as a conditional and becomes an &quot;AND&#39;d&quot; conditional.  It will prevent any .c files from being printed.\r\n\r\n    $ find .  -name &quot;*.c&quot; -o -name &quot;*.cpp&quot;  -print\r\n\r\nBut if you do like the original answer you can control the printing.  This will find all .c files as well.\r\n\r\n\r\n    $ find . \\( -name &quot;*.c&quot; -o -name &quot;*.cpp&quot; \\) -print\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1486517233, "answer_id": 42103089, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1486517233, "body_markdown": "    find MyDir -iname &quot;*.[j][p][g]&quot;\r\n    +\r\n    find MyDir -iname &quot;*.[b][m][p]&quot;\r\n    =\r\n    find MyDir -iname &quot;*.[jb][pm][gp]&quot;"}], "title": "`find -name` pattern that matches multiple patterns", "view_count": 245252, "answer_count": 10, "code_snippet": ["<code>find Documents -name \"*.{py,html}\"</code>", "<code>-o</code>", "<code>find Documents \\( -name \"*.py\" -o -name \"*.html\" \\)\n</code>", "<code>ls **/*.py **/*.html\n</code>", "<code>**</code>", "<code>shopt -s globstar</code>", "<code>-name</code>", "<code>-exec</code>", "<code>find Documents \\( -name \"*.py\" -o -name \"*.html\" \\) -exec file {} \\;</code>", "<code>-print0</code>", "<code>find . -regextype posix-egrep -regex \".*\\.(py|html)$\" \n</code>", "<code>find . -regex \".*\\.\\(py\\|html\\)$\"</code>", "<code>-regextype posix-egrep</code>", "<code>find -regextype posix-egrep -regex \".*(\\.([chyl]|def|cpy|cob|conf|cfg)|(README|ChangeLog|AUTHORS|ABOUT-NLS|NEWS|THANKS|TODO|COPYING.*))$\" -exec sed -i -e 's/\\r*$/\\r/' {} \\;</code>", "<code>-name</code>", "<code>-or</code>", "<code>find Documents \\( -name \"*.py\" -or -name \"*.html\" \\)\n</code>", "<code>for F in Documents/*.{py,html}; do ...something with each '$F'... ; done\n</code>", "<code>*.html</code>", "<code>*.py</code>", "<code>find</code>", "<code>-iname</code>", "<code>*.py</code>", "<code>iname *.html</code>", "<code>find ../../ \\( -iname 'tmp' -o -iname 'vendor' \\) -prune -o \\( -iname '*.*rb' -o -iname '*.rjs' \\) -print\n</code>", "<code>()</code>", "<code>find -name \"*.cpp\" -o -name \"*.c\" -o -name \"*.cc\" -print0</code>", "<code>find -name \"*.cpp\" -o \\( -name \"*.c\" -o -name \"*.cc\" \\) -print0</code>", "<code>$ find . -name \"*.c\" -o -name \"*.cpp\"\n</code>", "<code>$ find .  -name \"*.c\" -o -name \"*.cpp\"  -print\n</code>", "<code>$ find . \\( -name \"*.c\" -o -name \"*.cpp\" \\) -print\n</code>", "<code>#! /bin/bash\nfiletypes=\"*.py *.xml\"\nfor type in $filetypes\ndo\nfind Documents -name \"$type\"\ndone\n</code>", "<code>find -type f | egrep -i \"*.java|*.css|*.cs|*.sql\"</code>", "<code>find</code>", "<code>find Documents \\( -name \"*.py\" -or -name \"*.html\" \\)</code>", "<code>find . -depth -type f -not -name *.itp -and -not -name *ane.gro -and -not -name *.top -exec rm '{}' +\n</code>", "<code>find MyDir -iname \"*.[j][p][g]\"\n+\nfind MyDir -iname \"*.[b][m][p]\"\n=\nfind MyDir -iname \"*.[jb][pm][gp]\"\n</code>", "<code>find *.cbl *.dms -prune -type f -mtime -1\n</code>", "<code>*.cbl</code>", "<code>*.dms</code>"], "path": "stack.django"}, {"tags": ["python", "virtualenv", "virtualenvwrapper"], "creation_date": 1244902536, "body_markdown": "I&#39;m using virtualenv and the virtualenvwrapper. I can switch between virtualenv&#39;s just fine using the workon command. \r\n\r\n    me@mymachine:~$ workon env1\r\n    (env1)me@mymachine:~$ workon env2\r\n    (env2)me@mymachine:~$ workon env1\r\n    (env1)me@mymachine:~$ \r\n\r\nHowever, how do I exit all virtual machines and workon my real machine again? Right now, the only way I have of getting back to\r\n\r\n    me@mymachine:~$ \r\n\r\nis to exit the shell and start a new one. That&#39;s kind of annoying. Is there a command to workon &quot;nothing&quot;, and if so, what is it? If such a command does not exist, how would I go about creating it?", "last_edit_date": 1472661769, "up_vote_count": 964, "link": "https://stackoverflow.com/questions/990754/how-to-leave-exit-deactivate-a-python-virtualenv", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1244903460, "answer_id": 990779, "path": "stack.django.answer", "score": 1595, "up_vote_count": 1596, "is_accepted": true, "last_activity_date": 1490795480, "last_edit_date": 1490795480, "body_markdown": "Usually, activating a virtualenv gives you a shell function named:\r\n\r\n    $ deactivate\r\n\r\nwhich puts things back to normal.\r\n\r\n### Edit 1\r\n\r\nI have just looked specifically again at the code for `virtualenvwrapper,` and, yes, it too supports `deactivate` as the way to escape from all virtualenvs.\r\n\r\n### Edit 2\r\n\r\nIf you are trying to leave an _Anaconda_ environment, the procedure is a bit different: run the two-word command `source deactivate` since they implement deactivation using a stand-alone script.\r\n\r\n\r\n    bash-4.3$ deactivate\r\n    pyenv-virtualenv: deactivate must be sourced. Run &#39;source deactivate&#39; instead of &#39;deactivate&#39;\r\n    bash-4.3$ source deactivate\r\n    pyenv-virtualenv: no virtualenv has been activated."}, {"tags": [], "down_vote_count": 4, "creation_date": 1418321922, "answer_id": 27429748, "path": "stack.django.answer", "score": -2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1418321922, "body_markdown": "Had the same problem myself while working on an installer script, I took a look at what the *bin/activate_this.py* did and reversed it. \r\n\r\nExample:\r\n\r\n    #! /usr/bin/python\r\n    # -*- coding: utf-8 -*-\r\n    import os\r\n    import sys\r\n    \r\n    # path to virtualenv\r\n    venv_path = os.path.join(&#39;/home&#39;, &#39;sixdays&#39;, &#39;.virtualenvs&#39;, &#39;test32&#39;)\r\n    \r\n    # Save old values\r\n    old_os_path = os.environ[&#39;PATH&#39;]\r\n    old_sys_path = list(sys.path)\r\n    old_sys_prefix = sys.prefix\r\n    \r\n    \r\n    def deactivate():\r\n        # Change back by setting values to starting values\r\n        os.environ[&#39;PATH&#39;] = old_os_path\r\n        sys.prefix = old_sys_prefix\r\n        sys.path[:0] = old_sys_path\r\n    \r\n    \r\n    # Activate the virtualenvironment\r\n    activate_this = os.path.join(venv_path, &#39;bin/activate_this.py&#39;)\r\n    execfile(activate_this, dict(__file__=activate_this))\r\n    \r\n    \r\n    # Print list of pip packages for virtualenv for example purpose\r\n    import pip\r\n    print str(pip.get_installed_distributions())\r\n    # Unload pip module\r\n    del pip\r\n    \r\n    # deactive/switch back to initial interpreter\r\n    deactivate()\r\n    \r\n    # print list of initial environment pip packages for example purpose\r\n    import pip\r\n    print str(pip.get_installed_distributions())\r\n\r\n\r\n\r\nNot 100% sure if it works as intended, I may have missed something completely.\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1421252593, "answer_id": 27947686, "path": "stack.django.answer", "score": 31, "up_vote_count": 33, "is_accepted": false, "last_activity_date": 1421252593, "last_edit_date": 1492086162, "body_markdown": "I defined an [alias][1] **workoff** as the opposite of workon:\r\n\r\n    alias workoff=&#39;deactivate&#39;\r\n\r\nEasy to remember:\r\n\r\n    [bobstein@host ~]$ workon django_project\r\n    (django_project)[bobstein@host ~]$ workoff\r\n    [bobstein@host ~]$\r\n\r\n\r\n  [1]: https://askubuntu.com/questions/17536/how-do-i-create-a-permanent-bash-alias"}, {"tags": [], "down_vote_count": 4, "creation_date": 1428820868, "answer_id": 29586756, "path": "stack.django.answer", "score": 11, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1489764472, "last_edit_date": 1489764472, "body_markdown": "    $ deactivate \r\n\r\nIf this doesn&#39;t work , try \r\n\r\n    $ source deactivate\r\n\r\nAnyone who knows how [bash `source`][1] works will think that&#39;s odd, but some wrappers/workflows around virtualenv implement as a compliment/counterpart to `source activate`. YMMV\r\n\r\n\r\n  [1]: https://superuser.com/a/46146/3376"}, {"tags": [], "down_vote_count": 1, "creation_date": 1448521618, "answer_id": 33932473, "path": "stack.django.answer", "score": 9, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1448521618, "body_markdown": "to activate python virtual environment:\r\n\r\n    $cd ~/python-venv/\r\n    $./bin/activate\r\nto deactivate:\r\n\r\n    $deactivate"}, {"tags": [], "down_vote_count": 3, "creation_date": 1472706801, "answer_id": 39263132, "path": "stack.django.answer", "score": 2, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1472706801, "body_markdown": "You can use `virtualenvwrapper` in order to ease the way you work with `virtualenv`\r\n\r\nInstalling `virtualenvwrapper`\r\n\r\n    pip install virtualenvwrapper\r\n\r\nIf you are using standard shell, open your `~/.bashrc` or `~/.zshrc` if you use oh-my-zsh. Add this two lines:\r\n\r\n    export WORKON_HOME=$HOME/.virtualenvs  \r\n    source /usr/local/bin/virtualenvwrapper.sh\r\n\r\nTo activate an existing virtualenv, use command workon:\r\n\r\n    $ workon myenv\r\n    (myenv)$\r\n\r\nIn order to deactivate your virtualenv:\r\n\r\n    (myenv)$ deactivate\r\n\r\nHere is my [tutorial](http://levipy.com/virtualenv-and-virtualenvwrapper-tutorial/), step by step in how to install virtualenv and virtualenvwrapper\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1487069419, "answer_id": 42224204, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1487069419, "body_markdown": "I use [zsh-autoenv](https://github.com/Tarrasch/zsh-autoenv) which is based off [autoenv](https://github.com/kennethreitz/autoenv). \r\n\r\n&gt; [zsh-autoenv](https://github.com/Tarrasch/zsh-autoenv) automatically\r\n&gt; sources (known/whitelisted) `.autoenv.zsh` files, typically used in\r\n&gt; project root directories. It handles &quot;enter&quot; and leave&quot; events,\r\n&gt; nesting, and stashing of variables (overwriting and restoring).\r\n\r\nHere is an example:\r\n\r\n    ; cd dtree \r\n    Switching to virtual environment: Development tree utiles\r\n    ;dtree(feature/task24|\u2713); cat .autoenv.zsh       \r\n    # Autoenv.\r\n    echo -n &quot;Switching to virtual environment: &quot;\r\n    printf &quot;\\e[38;5;93m%s\\e[0m\\n&quot; &quot;Development tree utiles&quot;\r\n    workon dtree\r\n    # eof\r\n    dtree(feature/task24|\u2713); cat .autoenv_leave.zsh \r\n    deactivate\r\n\r\nSo when I leave the `dtree` directory, the virtual environment is automatically exited.\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1504421020, "answer_id": 46020962, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1504421020, "body_markdown": "(my_env) basant@basant:~/EonTraining/my_env$ deactivate\r\n\r\n   use &#39;deactivate&#39;\r\n\r\nbasant@basant-Lenovo-E40-80:~/EonTraining/my_env$ \r\n\r\nGone (my_env);"}], "title": "How to leave/exit/deactivate a python virtualenv?", "view_count": 364708, "answer_count": 8, "code_snippet": ["<code>me@mymachine:~$ workon env1\n(env1)me@mymachine:~$ workon env2\n(env2)me@mymachine:~$ workon env1\n(env1)me@mymachine:~$ \n</code>", "<code>me@mymachine:~$ \n</code>", "<code>$ deactivate\n</code>", "<code>virtualenvwrapper,</code>", "<code>deactivate</code>", "<code>source deactivate</code>", "<code>bash-4.3$ deactivate\npyenv-virtualenv: deactivate must be sourced. Run 'source deactivate' instead of 'deactivate'\nbash-4.3$ source deactivate\npyenv-virtualenv: no virtualenv has been activated.\n</code>", "<code>alias workoff='deactivate'\n</code>", "<code>[bobstein@host ~]$ workon django_project\n(django_project)[bobstein@host ~]$ workoff\n[bobstein@host ~]$\n</code>", "<code>.bashrc</code>", "<code>~/.bashrc</code>", "<code>$ deactivate \n</code>", "<code>$ source deactivate\n</code>", "<code>source</code>", "<code>source activate</code>", "<code>deactivate</code>", "<code>activate</code>", "<code>source deactivate</code>", "<code>deactivate</code>", "<code>$cd ~/python-venv/\n$./bin/activate\n</code>", "<code>$deactivate\n</code>", "<code>$source activate</code>", "<code>$cd /to/dir/i/want/my/virtualenv/installed</code>", "<code>$virtualenv name_i_want_for_it</code>", "<code>$. name_i_want_for_it/bin/activate</code>", "<code>virtualenvwrapper</code>", "<code>virtualenv</code>", "<code>virtualenvwrapper</code>", "<code>pip install virtualenvwrapper\n</code>", "<code>~/.bashrc</code>", "<code>~/.zshrc</code>", "<code>export WORKON_HOME=$HOME/.virtualenvs  \nsource /usr/local/bin/virtualenvwrapper.sh\n</code>", "<code>$ workon myenv\n(myenv)$\n</code>", "<code>(myenv)$ deactivate\n</code>", "<code>workon</code>", "<code>virtualenvwrapper</code>", "<code>.autoenv.zsh</code>", "<code>; cd dtree \nSwitching to virtual environment: Development tree utiles\n;dtree(feature/task24|\u2713); cat .autoenv.zsh       \n# Autoenv.\necho -n \"Switching to virtual environment: \"\nprintf \"\\e[38;5;93m%s\\e[0m\\n\" \"Development tree utiles\"\nworkon dtree\n# eof\ndtree(feature/task24|\u2713); cat .autoenv_leave.zsh \ndeactivate\n</code>", "<code>dtree</code>", "<code>#! /usr/bin/python\n# -*- coding: utf-8 -*-\nimport os\nimport sys\n\n# path to virtualenv\nvenv_path = os.path.join('/home', 'sixdays', '.virtualenvs', 'test32')\n\n# Save old values\nold_os_path = os.environ['PATH']\nold_sys_path = list(sys.path)\nold_sys_prefix = sys.prefix\n\n\ndef deactivate():\n    # Change back by setting values to starting values\n    os.environ['PATH'] = old_os_path\n    sys.prefix = old_sys_prefix\n    sys.path[:0] = old_sys_path\n\n\n# Activate the virtualenvironment\nactivate_this = os.path.join(venv_path, 'bin/activate_this.py')\nexecfile(activate_this, dict(__file__=activate_this))\n\n\n# Print list of pip packages for virtualenv for example purpose\nimport pip\nprint str(pip.get_installed_distributions())\n# Unload pip module\ndel pip\n\n# deactive/switch back to initial interpreter\ndeactivate()\n\n# print list of initial environment pip packages for example purpose\nimport pip\nprint str(pip.get_installed_distributions())\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "datetime", "django-models", "django-admin"], "creation_date": 1258274876, "body_markdown": "For Django 1.1.\r\n\r\nI have this in my models.py:\r\n\r\n    class User(models.Model):\r\n        created = models.DateTimeField(auto_now_add=True)\r\n        modified = models.DateTimeField(auto_now=True)\r\n\r\nWhen updating a row I get:\r\n\r\n    [Sun Nov 15 02:18:12 2009] [error] /home/ptarjan/projects/twitter-meme/django/db/backends/mysql/base.py:84: Warning: Column &#39;created&#39; cannot be null\r\n    [Sun Nov 15 02:18:12 2009] [error]   return self.cursor.execute(query, args)\r\n\r\nThe relevant part of my database is:\r\n\r\n      `created` datetime NOT NULL,\r\n      `modified` datetime NOT NULL,\r\n\r\nIs this cause for concern?\r\n\r\nSide question: in my admin tool, those two fields aren&#39;t showing up. Is that expected?\r\n", "last_edit_date": 1412132474, "up_vote_count": 177, "link": "https://stackoverflow.com/questions/1737017/django-auto-now-and-auto-now-add", "_childDocuments_": [{"tags": [], "down_vote_count": 6, "creation_date": 1258277191, "answer_id": 1737078, "path": "stack.django.answer", "score": 258, "up_vote_count": 264, "is_accepted": true, "last_activity_date": 1456670659, "last_edit_date": 1456670659, "body_markdown": "Any field with the `auto_now` attribute set will also inherit `editable=False` and therefore will not show up in the admin panel.  There has been talk in the past about making the `auto_now` and `auto_now_add` arguments go away, and although they still exist, I feel you&#39;re better off just using a custom `save()` method.\r\n\r\nSo, to make this work properly, I would recommend not using `auto_now` or `auto_now_add` and instead  define your own `save()` method to make sure that `created` is only updated if `id` is not set (such as when the item is first created), and have it update `modified` every time the item is saved.\r\n\r\nI have done the exact same thing with other projects I have written using Django, and so your `save()` would look like this:\r\n\r\n    from django.utils import timezone\r\n\r\n    class User(models.Model):\r\n        created     = models.DateTimeField(editable=False)\r\n        modified    = models.DateTimeField()\r\n    \r\n        def save(self, *args, **kwargs):\r\n            &#39;&#39;&#39; On save, update timestamps &#39;&#39;&#39;\r\n            if not self.id:\r\n                self.created = timezone.now()\r\n            self.modified = timezone.now()\r\n            return super(User, self).save(*args, **kwargs)\r\n\r\nHope this helps!\r\n\r\n**Edit in response to comments:**\r\n\r\nThe reason why I just stick with overloading `save()` vs. relying on these field arguments is two-fold:\r\n\r\n 1. The aforementioned ups and downs with their reliability.  These arguments are heavily reliant on the way each type of database that Django knows how to interact with treats a date/time stamp field, and seems to break and/or change between every release. (Which I believe is the impetus behind the call to have them removed altogether).\r\n 2. The fact that they only work on DateField, DateTimeField, and TimeField, and by using this technique you are able to automatically populate any field type every time an item is saved.\r\n 3. Use `django.utils.timezone.now()` vs. `datetime.datetime.now()`, because it will return a TZ-aware or naive `datetime.datetime` object depending on `settings.USE_TZ`.\r\n\r\nTo address why the OP saw the error, I don&#39;t know exactly, but it looks like `created` isn&#39;t even being populated at all, despite having `auto_now_add=True`.  To me it stands out as a bug, and underscores item #1 in my little list above:  `auto_now` and `auto_now_add` are flaky at best. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1258290566, "answer_id": 1737488, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1258290566, "body_markdown": "&gt; Is this cause for concern?\r\n\r\nNo, Django automatically adds it for you while saving the models, so, it is expected.\r\n\r\n&gt; Side question: in my admin tool, those 2 fields aren&#39;t showing up. Is that expected?\r\n\r\nSince these fields are auto added, they are not shown.\r\n\r\nTo add to the above, as synack said, there has been a debate on the django mailing list to remove this, because, it is &quot;not designed well&quot; and is &quot;a hack&quot;\r\n\r\n&gt; Writing a custom save() on each of my models is much more pain than using the auto_now\r\n\r\nObviously you don&#39;t have to write it to every model. You can write it to one model and inherit others from it.\r\n\r\nBut, as `auto_add` and `auto_now_add` are there, I would use them rather than trying to write a method myself."}, {"tags": [], "down_vote_count": 1, "creation_date": 1280077295, "answer_id": 3330128, "path": "stack.django.answer", "score": 122, "up_vote_count": 123, "is_accepted": false, "last_activity_date": 1402430783, "last_edit_date": 1402430783, "body_markdown": "Bah... Not enough reputation to comment... But I wanted to point out that the opinion expressed in the accepted answer is somewhat outdated. According to more recent discussions (django bugs [#7634][1] and [#12785][2]), auto_now and auto_now_add are not going anywhere, and even if you go to the [original discussion][3], you&#39;ll find strong arguments against the RY (as in DRY) in custom save methods.\r\n\r\nA better solution has been offered (custom field types), but didn&#39;t gain enough momentum to make it into django. You can write your own in three lines (it&#39;s Jacob Kaplan-Moss&#39; suggestion).\r\n\r\n    class AutoDateTimeField(models.DateTimeField):\r\n        def pre_save(self, model_instance, add):\r\n            return datetime.datetime.now()\r\n\r\n    #usage\r\n    created_at = models.DateField(default=timezone.now)\r\n    updated_at = models.AutoDateTimeField(default=timezone.now)\r\n\r\n  [1]: https://code.djangoproject.com/ticket/7634\r\n  [2]: https://code.djangoproject.com/ticket/12785\r\n  [3]: http://groups.google.com/group/django-developers/browse_thread/thread/4cd631c225cb4e52"}, {"tags": [], "down_vote_count": 0, "creation_date": 1343208341, "answer_id": 11646630, "path": "stack.django.answer", "score": 25, "up_vote_count": 25, "is_accepted": false, "last_activity_date": 1343208341, "body_markdown": "Talking about a side question: if you want to see this fields in admin (though, you won&#39;t be able to edit it), you can add `readonly_fields` to your admin class.\r\n\r\n    class SomeAdmin(ModelAdmin):\r\n        readonly_fields = (&quot;created&quot;,&quot;modified&quot;,)\r\n\r\nWell, this applies only to latest Django versions (I believe, 1.3 and above)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1360672379, "answer_id": 14832661, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1360672379, "last_edit_date": 1495541445, "body_markdown": "As for your Admin display, see [this answer].\r\n\r\nNote: auto_now and auto_now_add are set to editable=False by default, which is why this applies.\r\n\r\n  [this answer]: https://stackoverflow.com/a/3967891/1536539"}, {"tags": [], "down_vote_count": 0, "creation_date": 1369147571, "answer_id": 16672915, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1369147571, "body_markdown": "Here&#39;s the answer if you&#39;re using south and you want to default to the date you add the field to the database:\r\n\r\nChoose option **2**\r\nthen: **datetime.datetime.now()**\r\n\r\nLooks like this:\r\n\r\n    $ ./manage.py schemamigration myapp --auto\r\n     ? The field &#39;User.created_date&#39; does not have a default specified, yet is NOT NULL.\r\n     ? Since you are adding this field, you MUST specify a default\r\n     ? value to use for existing rows. Would you like to:\r\n     ?  1. Quit now, and add a default to the field in models.py\r\n     ?  2. Specify a one-off value to use for existing columns now\r\n     ? Please select a choice: 2\r\n     ? Please enter Python code for your one-off default value.\r\n     ? The datetime module is available, so you can do e.g. datetime.date.today()\r\n     &gt;&gt;&gt; datetime.datetime.now()\r\n     + Added field created_date on myapp.User\r\n\r\n"}, {"tags": [], "down_vote_count": 3, "creation_date": 1378940295, "answer_id": 18752680, "path": "stack.django.answer", "score": 16, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1381423748, "last_edit_date": 1381423748, "body_markdown": "I think the easiest (and maybe most elegant) solution here is to leverage the fact that you can set `default` to a callable. So, to get around admin&#39;s special handling of auto_now, you can just declare the field like so:\r\n\r\n    from django.utils import timezone\r\n    date_filed = models.DateField(default=timezone.now)\r\n\r\nIt&#39;s important that you don&#39;t use `timezone.now()` as the default value wouldn&#39;t update (i.e., default gets set only when the code is loaded). If you find yourself doing this a lot, you could create a custom field. However, this is pretty DRY already I think."}, {"tags": [], "down_vote_count": 0, "creation_date": 1393334296, "answer_id": 22015427, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1482266198, "last_edit_date": 1482266198, "body_markdown": "I have found a solution\r\n\r\nIf I have a model class like:\r\n\r\n    class MyModel(models.Model):\r\n        time = models.DatetimeField(auto_now_add=True)\r\n        time.editable = True\r\n\r\nThen this field will show up in my admin change page"}, {"tags": [], "down_vote_count": 0, "creation_date": 1393601505, "answer_id": 22099287, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1412132568, "last_edit_date": 1412132568, "body_markdown": "`auto_now=True` didn&#39;t work for me in Django 1.4.1, but the below code saved me. It&#39;s for timezone aware datetime.\r\n\r\n    from django.utils.timezone import get_current_timezone\r\n    from datetime import datetime\r\n    \r\n    class EntryVote(models.Model):\r\n        voted_on = models.DateTimeField(auto_now=True)\r\n    \r\n        def save(self, *args, **kwargs):\r\n            self.voted_on = datetime.now().replace(tzinfo=get_current_timezone())\r\n            super(EntryVote, self).save(*args, **kwargs)\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1403061299, "answer_id": 24276495, "path": "stack.django.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1412132657, "last_edit_date": 1412132657, "body_markdown": "You can use `timezone.now()` for created and `auto_now` for modified:\r\n\r\n    from django.utils import timezone\r\n    class User(models.Model):\r\n        created = models.DateTimeField(default=timezone.now())\r\n        modified = models.DateTimeField(auto_now=True)\r\n\r\nIf you are using a custom primary key instead of the default `auto- increment int`, `auto_now_add` will lead to a bug.\r\n\r\nHere is the code of Django&#39;s default [DateTimeField.pre_save](https://github.com/django/django/blob/11932e978f980846d2c3326ff070ece7e65bf75c/django/db/models/fields/__init__.py#L1373) with`auto_now` and `auto_now_add`:\r\n\r\n    def pre_save(self, model_instance, add):\r\n        if self.auto_now or (self.auto_now_add and add):\r\n            value = timezone.now()\r\n            setattr(model_instance, self.attname, value)\r\n            return value\r\n        else:\r\n            return super(DateTimeField, self).pre_save(model_instance, add)\r\n\r\nI am not sure what the parameter `add` is. I hope it will some thing like:\r\n\r\n    add = True if getattr(model_instance, &#39;id&#39;) else False\r\n\r\n&gt; The new record will not have attr `id`, so `getattr(model_instance, &#39;id&#39;)` will return False will lead to not setting any value in the field.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1404937085, "answer_id": 24663093, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1409782680, "last_edit_date": 1409782680, "body_markdown": "Based on what I&#39;ve read and my experience with Django so far, auto_now_add is buggy.  I agree with jthanism --- override the normal save method it&#39;s clean and you know what&#39;s hapenning.  Now, to make it dry, create an abstract model called TimeStamped:\r\n\r\n    from django.utils import timezone\r\n\r\n    class TimeStamped(models.Model):\r\n        creation_date = models.DateTimeField(editable=False)\r\n        last_modified = models.DateTimeField(editable=False)\r\n\r\n        def save(self, *args, **kwargs):\r\n            if not self.creation_date:\r\n                self.creation_date = timezone.now()\r\n            \r\n            self.last_modified = timezone.now()\r\n            return super(TimeStamped, self).save(*args, **kwargs)\r\n\r\n        class Meta:\r\n            abstract = True\r\n\r\nAnd then, when you want a model that has this time-stampy behavior, just subclass:\r\n\r\n    MyNewTimeStampyModel(TimeStamped):\r\n        field1 = ...\r\n\r\nIf you want the fields to show up in admin, then just remove the `editable=False` option"}, {"tags": [], "down_vote_count": 0, "creation_date": 1461683712, "answer_id": 36869051, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1461684097, "last_edit_date": 1461684097, "body_markdown": "I needed something similar today at work. Default value to be timezone.now(), but editable both in admin and class views inheriting from FormMixin, so for created in my models.py the following code fulfilled those requirements:\r\n\r\n    from __future__ import unicode_literals\r\n    import datetime\r\n    \r\n    from django.db import models\r\n    from django.utils.functional import lazy\r\n    from django.utils.timezone import localtime, now\r\n    \r\n    def get_timezone_aware_now_date():\r\n        return localtime(now()).date()\r\n    \r\n    class TestDate(models.Model):\r\n        created = models.DateField(default=lazy(\r\n            get_timezone_aware_now_date, datetime.date)()\r\n        )\r\n\r\nFor DateTimeField, I guess remove the .date() from the function and change datetime.date to datetime.datetime or better timezone.datetime. I haven&#39;t tried it with DateTime, only with Date."}], "title": "Django auto_now and auto_now_add", "view_count": 144521, "answer_count": 12, "code_snippet": ["<code>class User(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    modified = models.DateTimeField(auto_now=True)\n</code>", "<code>[Sun Nov 15 02:18:12 2009] [error] /home/ptarjan/projects/twitter-meme/django/db/backends/mysql/base.py:84: Warning: Column 'created' cannot be null\n[Sun Nov 15 02:18:12 2009] [error]   return self.cursor.execute(query, args)\n</code>", "<code>  `created` datetime NOT NULL,\n  `modified` datetime NOT NULL,\n</code>", "<code>update()</code>", "<code>save()</code>", "<code>modified</code>", "<code>auto_now</code>", "<code>editable=False</code>", "<code>auto_now</code>", "<code>auto_now_add</code>", "<code>save()</code>", "<code>auto_now</code>", "<code>auto_now_add</code>", "<code>save()</code>", "<code>created</code>", "<code>id</code>", "<code>modified</code>", "<code>save()</code>", "<code>from django.utils import timezone\n\nclass User(models.Model):\n    created     = models.DateTimeField(editable=False)\n    modified    = models.DateTimeField()\n\n    def save(self, *args, **kwargs):\n        ''' On save, update timestamps '''\n        if not self.id:\n            self.created = timezone.now()\n        self.modified = timezone.now()\n        return super(User, self).save(*args, **kwargs)\n</code>", "<code>save()</code>", "<code>django.utils.timezone.now()</code>", "<code>datetime.datetime.now()</code>", "<code>datetime.datetime</code>", "<code>settings.USE_TZ</code>", "<code>created</code>", "<code>auto_now_add=True</code>", "<code>auto_now</code>", "<code>auto_now_add</code>", "<code>save()</code>", "<code>auto_now</code>", "<code>editable=True</code>", "<code>class AutoDateTimeField(models.DateTimeField):\n    def pre_save(self, model_instance, add):\n        return datetime.datetime.now()\n\n#usage\ncreated_at = models.DateField(default=timezone.now)\nupdated_at = models.AutoDateTimeField(default=timezone.now)\n</code>", "<code>readonly_fields</code>", "<code>class SomeAdmin(ModelAdmin):\n    readonly_fields = (\"created\",\"modified\",)\n</code>", "<code>XxAdmin</code>", "<code>AdminForm</code>", "<code>ModelForm</code>", "<code>default</code>", "<code>from django.utils import timezone\ndate_filed = models.DateField(default=timezone.now)\n</code>", "<code>timezone.now()</code>", "<code>makemigrations</code>", "<code>makemigrations</code>", "<code>default=timezone.now()</code>", "<code>default=timezine.now</code>", "<code>class MyModel(models.Model):\n    time = models.DatetimeField(auto_now_add=True)\n    time.editable = True\n</code>", "<code>python manage.py makemigrations</code>", "<code>from django.utils import timezone\n\nclass TimeStamped(models.Model):\n    creation_date = models.DateTimeField(editable=False)\n    last_modified = models.DateTimeField(editable=False)\n\n    def save(self, *args, **kwargs):\n        if not self.creation_date:\n            self.creation_date = timezone.now()\n\n        self.last_modified = timezone.now()\n        return super(TimeStamped, self).save(*args, **kwargs)\n\n    class Meta:\n        abstract = True\n</code>", "<code>MyNewTimeStampyModel(TimeStamped):\n    field1 = ...\n</code>", "<code>editable=False</code>", "<code>timezone.now()</code>", "<code>django.utils.timezone.now()</code>", "<code>timezone.now()</code>", "<code>datetime.datetime.now()</code>", "<code>timezone.now()</code>", "<code>datetime.datetime.now()</code>", "<code>default=timezone.now</code>", "<code>update_fields</code>", "<code>if 'update_fields' in kwargs and 'last_modifed' not in kwargs['update_fields']:             kwargs['update_fields'].append('last_modified')</code>", "<code>timezone.now()</code>", "<code>auto_now</code>", "<code>from django.utils import timezone\nclass User(models.Model):\n    created = models.DateTimeField(default=timezone.now())\n    modified = models.DateTimeField(auto_now=True)\n</code>", "<code>auto- increment int</code>", "<code>auto_now_add</code>", "<code>auto_now</code>", "<code>auto_now_add</code>", "<code>def pre_save(self, model_instance, add):\n    if self.auto_now or (self.auto_now_add and add):\n        value = timezone.now()\n        setattr(model_instance, self.attname, value)\n        return value\n    else:\n        return super(DateTimeField, self).pre_save(model_instance, add)\n</code>", "<code>add</code>", "<code>add = True if getattr(model_instance, 'id') else False\n</code>", "<code>id</code>", "<code>getattr(model_instance, 'id')</code>", "<code>auto_add</code>", "<code>auto_now_add</code>", "<code>from __future__ import unicode_literals\nimport datetime\n\nfrom django.db import models\nfrom django.utils.functional import lazy\nfrom django.utils.timezone import localtime, now\n\ndef get_timezone_aware_now_date():\n    return localtime(now()).date()\n\nclass TestDate(models.Model):\n    created = models.DateField(default=lazy(\n        get_timezone_aware_now_date, datetime.date)()\n    )\n</code>", "<code>auto_now=True</code>", "<code>from django.utils.timezone import get_current_timezone\nfrom datetime import datetime\n\nclass EntryVote(models.Model):\n    voted_on = models.DateTimeField(auto_now=True)\n\n    def save(self, *args, **kwargs):\n        self.voted_on = datetime.now().replace(tzinfo=get_current_timezone())\n        super(EntryVote, self).save(*args, **kwargs)\n</code>", "<code>$ ./manage.py schemamigration myapp --auto\n ? The field 'User.created_date' does not have a default specified, yet is NOT NULL.\n ? Since you are adding this field, you MUST specify a default\n ? value to use for existing rows. Would you like to:\n ?  1. Quit now, and add a default to the field in models.py\n ?  2. Specify a one-off value to use for existing columns now\n ? Please select a choice: 2\n ? Please enter Python code for your one-off default value.\n ? The datetime module is available, so you can do e.g. datetime.date.today()\n &gt;&gt;&gt; datetime.datetime.now()\n + Added field created_date on myapp.User\n</code>"], "path": "stack.django"}, {"tags": ["python", "filenames", "slug", "sanitize"], "creation_date": 1226912527, "body_markdown": "I have a string that I want to use as a filename, so I want to remove all characters that wouldn&#39;t be allowed in filenames, using Python.\r\n\r\nI&#39;d rather be strict than otherwise, so let&#39;s say I want to retain only letters, digits, and a small set of other characters like `&quot;_-.() &quot;`. What&#39;s the most elegant solution?\r\n\r\nThe filename needs to be valid on multiple operating systems (Windows, Linux and Mac OS) - it&#39;s an MP3 file in my library with the song title as the filename, and is shared and backed up between 3 machines.", "last_edit_date": 1480299527, "up_vote_count": 202, "link": "https://stackoverflow.com/questions/295135/turn-a-string-into-a-valid-filename", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1226913049, "answer_id": 295146, "path": "stack.django.answer", "score": 88, "up_vote_count": 88, "is_accepted": false, "last_activity_date": 1226917530, "last_edit_date": 1495539204, "body_markdown": "This whitelist approach (ie, allowing only the chars present in valid_chars) will work if there aren&#39;t limits on the formatting of the files or combination of valid chars that are illegal (like &quot;..&quot;), for example, what you say would allow a filename named &quot; . txt&quot; which I think is not valid on Windows. As this is the most simple approach I&#39;d try to remove whitespace from the valid_chars and prepend a known valid string in case of error, any other approach will have to know about what is allowed where to cope with [Windows file naming limitations][1] and thus be a lot more complex. \r\n\r\n    &gt;&gt;&gt; import string\r\n    &gt;&gt;&gt; valid_chars = &quot;-_.() %s%s&quot; % (string.ascii_letters, string.digits)\r\n    &gt;&gt;&gt; valid_chars\r\n    &#39;-_.() abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#39;\r\n    &gt;&gt;&gt; filename = &quot;This Is a (valid) - filename%$&amp;$ .txt&quot;\r\n    &gt;&gt;&gt; &#39;&#39;.join(c for c in filename if c in valid_chars)\r\n    &#39;This Is a (valid) - filename .txt&#39;\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/62771/how-check-if-given-string-is-legal-allowed-file-name-under-windows"}, {"tags": [], "down_vote_count": 0, "creation_date": 1226913053, "answer_id": 295147, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1435743310, "last_edit_date": 1435743310, "body_markdown": "You could use the re.sub() method to replace anything not &quot;filelike&quot;. But in effect, every character could be valid; so there are no prebuilt functions (I believe), to get it done.\r\n\r\n    import re\r\n    \r\n    str = &quot;File!name?.txt&quot;\r\n    f = open(os.path.join(&quot;/tmp&quot;, re.sub(&#39;[^-a-zA-Z0-9_.() ]+&#39;, &#39;&#39;, str))\r\n\r\nWould result in a filehandle to /tmp/filename.txt."}, {"tags": [], "down_vote_count": 1, "creation_date": 1226913122, "answer_id": 295150, "path": "stack.django.answer", "score": 82, "up_vote_count": 83, "is_accepted": false, "last_activity_date": 1239641316, "last_edit_date": 1239641316, "body_markdown": "What is the reason to use the strings as file names? If human readability is not a factor I would go with base64 module which can produce file system safe strings. It won&#39;t be readable but you won&#39;t have to deal with collisions and it is reversible.\r\n\r\n    import base64\r\n    file_name_string = base64.urlsafe_b64encode(your_string)\r\n\r\n**Update**: Changed based on Matthew comment.\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1226913169, "answer_id": 295152, "path": "stack.django.answer", "score": 75, "up_vote_count": 75, "is_accepted": false, "last_activity_date": 1351504745, "last_edit_date": 1351504745, "body_markdown": "You can use list comprehension together with the string methods.\r\n\r\n    &gt;&gt;&gt; s\r\n    &#39;foo-bar#baz?qux@127/\\\\9]&#39;\r\n    &gt;&gt;&gt; &quot;&quot;.join(x for x in s if x.isalnum())\r\n    &#39;foobarbazqux1279&#39;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1226915860, "answer_id": 295206, "path": "stack.django.answer", "score": 33, "up_vote_count": 33, "is_accepted": false, "last_activity_date": 1226915860, "body_markdown": "Just to further complicate things, you are not guaranteed to get a valid filename just by removing invalid characters.  Since allowed characters differ on different filenames, a conservative approach could end up turning a valid name into an invalid one.  You may want to add special handling for the cases where:\r\n\r\n   - The string is all invalid characters (leaving you with an empty string)\r\n\r\n   - You end up with a string with a special meaning, eg &quot;.&quot; or &quot;..&quot;\r\n\r\n   - On windows, [certain device names](http://msdn.microsoft.com/en-us/library/aa365247.aspx) are reserved.  For instance, you can&#39;t create a file named &quot;nul&quot;, &quot;nul.txt&quot; (or nul.anything in fact)  The reserved names are:\r\n\r\n    CON, PRN, AUX, NUL, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9, LPT1, LPT2,  LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, and LPT9\r\n\r\nYou can probably work around these issues by prepending some string to the filenames that can never result in one of these cases, and stripping invalid characters."}, {"tags": [], "down_vote_count": 0, "creation_date": 1226916915, "answer_id": 295242, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1498130810, "last_edit_date": 1498130810, "body_markdown": "    &gt;&gt;&gt; import string\r\n    &gt;&gt;&gt; safechars = bytearray((&#39;_-.()&#39; + string.digits + string.ascii_letters).encode())\r\n    &gt;&gt;&gt; allchars = bytearray(range(0x100))\r\n    &gt;&gt;&gt; deletechars = bytearray(set(allchars) - set(safechars))\r\n    &gt;&gt;&gt; filename = u&#39;#ab\\xa0c.$%.txt&#39;\r\n    &gt;&gt;&gt; safe_filename = filename.encode(&#39;ascii&#39;, &#39;ignore&#39;).translate(None, deletechars).decode()\r\n    &gt;&gt;&gt; safe_filename\r\n    &#39;abc..txt&#39;\r\n\r\nIt doesn&#39;t handle empty strings, special filenames (&#39;nul&#39;, &#39;con&#39;, etc)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1226918754, "answer_id": 295298, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1226918754, "body_markdown": "Keep in mind, there are actually no restrictions on filenames on Unix systems other than \r\n\r\n  *  It may not contain \\0 \r\n  *  It may not contain  /\r\n\r\nEverything else is fair game. \r\n&lt;pre&gt;\r\n$ touch &quot;\r\n&gt; even multiline\r\n&gt; haha\r\n&gt; ^[[31m red ^[[0m\r\n&gt; evil&quot;\r\n$ ls -la \r\n-rw-r--r--       0 Nov 17 23:39 ?even multiline?haha??[31m red ?[0m?evil\r\n$ ls -lab\r\n-rw-r--r--       0 Nov 17 23:39 \\neven\\ multiline\\nhaha\\n\\033[31m\\ red\\ \\033[0m\\nevil\r\n$ perl -e &#39;for my $i ( glob(q{./*even*}) ){ print $i; } &#39;\r\n./\r\neven multiline\r\nhaha\r\n red \r\nevil\r\n&lt;/pre&gt;\r\n\r\nYes, i just stored ANSI Colour Codes in a file name and had them take effect. \r\n\r\nFor entertainment, put a BEL character in a directory name and watch the fun that ensues when you CD into it ;) \r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1226921089, "answer_id": 295354, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1338342413, "last_edit_date": 1338342413, "body_markdown": "Why not just wrap the &quot;osopen&quot; with a try/except and let the underlying OS sort out whether the file is valid?\r\n\r\nThis seems like much less work and is valid no matter which OS you use.\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1226924632, "answer_id": 295466, "path": "stack.django.answer", "score": 116, "up_vote_count": 117, "is_accepted": false, "last_activity_date": 1475162793, "last_edit_date": 1475162793, "body_markdown": "You can look at the [Django framework][1] for how they create a &quot;slug&quot; from arbitrary text.  A slug is URL- and filename- friendly.\r\n\r\nTheir `template/defaultfilters.py` (at around line 183) defines a function, `slugify`, that&#39;s probably the gold standard for this kind of thing.  Essentially, their code is the following.\r\n\r\n    def slugify(value):\r\n        &quot;&quot;&quot;\r\n        Normalizes string, converts to lowercase, removes non-alpha characters,\r\n        and converts spaces to hyphens.\r\n        &quot;&quot;&quot;\r\n        import unicodedata\r\n        value = unicodedata.normalize(&#39;NFKD&#39;, value).encode(&#39;ascii&#39;, &#39;ignore&#39;)\r\n        value = unicode(re.sub(&#39;[^\\w\\s-]&#39;, &#39;&#39;, value).strip().lower())\r\n        value = unicode(re.sub(&#39;[-\\s]+&#39;, &#39;-&#39;, value))\r\n\r\nThere&#39;s more, but I left it out, since it doesn&#39;t address slugification, but escaping.\r\n\r\n\r\n  [1]: http://www.djangoproject.com"}, {"tags": [], "down_vote_count": 0, "creation_date": 1226928259, "answer_id": 295560, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1226928259, "body_markdown": "Another issue that the other comments haven&#39;t addressed yet is the empty string, which is obviously not a valid filename. You can also end up with an empty string from stripping too many characters.\r\n\r\nWhat with the Windows reserved filenames and issues with dots, the safest answer to the question \u201chow do I normalise a valid filename from arbitrary user input?\u201d is \u201cdon&#39;t even bother try\u201d: if you can find any other way to avoid it (eg. using integer primary keys from a database as filenames), do that.\r\n\r\nIf you must, and you really need to allow spaces and \u2018.\u2019 for file extensions as part of the name, try something like:\r\n\r\n    import re\r\n    badchars= re.compile(r&#39;[^A-Za-z0-9_. ]+|^\\.|\\.$|^ | $|^$&#39;)\r\n    badnames= re.compile(r&#39;(aux|com[1-9]|con|lpt[1-9]|prn)(\\.|$)&#39;)\r\n\r\n    def makeName(s):\r\n        name= badchars.sub(&#39;_&#39;, s)\r\n        if badnames.match(name):\r\n            name= &#39;_&#39;+name\r\n        return name\r\n\r\nEven this can&#39;t be guaranteed right especially on unexpected OSs\u2009\u2014\u2009for example RISC OS hates spaces and uses \u2018.\u2019 as a directory separator.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1236768286, "answer_id": 634023, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1236768286, "body_markdown": "Though you have to be careful. It is not clearly said in your intro, if you are looking only at latine language. Some words can become meaningless or another meaning if you sanitize them with ascii characters only.\r\n\r\nimagine you have &quot;for&#234;t po&#233;sie&quot; (forest poetry), your sanitization might give &quot;fort-posie&quot; (strong + something meaningless)\r\n\r\nWorse if  you have to deal with chinese characters.\r\n\r\n&quot;\u4e0b\u5317\u6ca2&quot; your system might end up doing &quot;---&quot; which is doomed to fail after a while and not very helpful. So if you deal with only files I would encourage to either call them a generic chain that you control or to keep the characters as it is. For URIs, about the same.\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1238442017, "answer_id": 698714, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": true, "last_activity_date": 1238442017, "body_markdown": "This is the solution I ultimately used:\r\n\r\n    import unicodedata\r\n\r\n    validFilenameChars = &quot;-_.() %s%s&quot; % (string.ascii_letters, string.digits)\r\n\r\n    def removeDisallowedFilenameChars(filename):\r\n        cleanedFilename = unicodedata.normalize(&#39;NFKD&#39;, filename).encode(&#39;ASCII&#39;, &#39;ignore&#39;)\r\n        return &#39;&#39;.join(c for c in cleanedFilename if c in validFilenameChars)\r\n\r\nThe unicodedata.normalize call replaces accented characters with the unaccented equivalent, which is better than simply stripping them out. After that all disallowed characters are removed.\r\n\r\nMy solution doesn&#39;t prepend a known string to avoid possible disallowed filenames, because I know they can&#39;t occur given my particular filename format. A more general solution would need to do so.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1247221151, "answer_id": 1108783, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1451313016, "last_edit_date": 1451313016, "body_markdown": "**UPDATE**\r\n\r\nAll links broken beyond repair in this 6 year old answer.\r\n\r\nAlso, I also wouldn&#39;t do it this way anymore, just `base64` encode or drop unsafe chars. Python 3 example:\r\n\r\n    import re\r\n    t = re.compile(&quot;[a-zA-Z0-9.,_-]&quot;)\r\n    unsafe = &quot;abc\u2202&#233;&#229;&#223;&#174;\u2206\u02da\u02d9&#169;&#172;&#241;\u221a\u0192&#181;&#169;\u2206\u222b&#248;&quot;\r\n    safe = [ch for ch in unsafe if t.match(ch)]\r\n    # =&gt; &#39;abc&#39;\r\n\r\nWith `base64` you can encode and decode, so you can retrieve the original filename again.\r\n\r\nBut depending on the use case you might be better off generating a random filename and storing the metadata in separate file or DB.\r\n\r\n    from random import choice\r\n    from string import ascii_lowercase, ascii_uppercase, digits\r\n    allowed_chr = ascii_lowercase + ascii_uppercase + digits\r\n\r\n    safe = &#39;&#39;.join([choice(allowed_chr) for _ in range(16)])\r\n    # =&gt; &#39;CYQ4JDKE9JfcRzAZ&#39;\r\n\r\n**ORIGINAL LINKROTTEN ANSWER**:\r\n\r\nThe `bobcat` project contains a python module that does just this.\r\n\r\nIt&#39;s not completely robust, see this [post][1] and this [reply][2].\r\n\r\nSo, as noted: `base64` encoding is probably a better idea if readability doesn&#39;t matter.\r\n\r\n - Docs [https://svn.origo.ethz.ch/bobcat/src-doc/safefilename-module.html][3]\r\n - Source [https://svn.origo.ethz.ch/bobcat/trunk/src/bobcatlib/safefilename.py][4]\r\n\r\n\r\n  [1]: http://mail.python.org/pipermail/python-list/2007-September/628023.html\r\n  [2]: http://mail.python.org/pipermail/python-list/2007-September/628042.html\r\n  [3]: https://svn.origo.ethz.ch/bobcat/src-doc/safefilename-module.html\r\n  [4]: https://svn.origo.ethz.ch/bobcat/trunk/src/bobcatlib/safefilename.py"}, {"tags": [], "down_vote_count": 0, "creation_date": 1336190160, "answer_id": 10458710, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1336190160, "body_markdown": "I&#39;m sure this isn&#39;t a great answer, since it modifies the string it&#39;s looping over, but it seems to work alright:\r\n\r\n\r\n    import string\r\n    for chr in your_string:\r\n     if chr == &#39; &#39;:\r\n       your_string = your_string.replace(&#39; &#39;, &#39;_&#39;)\r\n     elif chr not in string.ascii_letters or chr not in string.digits:\r\n        your_string = your_string.replace(chr, &#39;&#39;)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1337130274, "answer_id": 10610768, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1337130274, "body_markdown": "Most of these solutions don&#39;t work.\r\n\r\n&#39;/hello/world&#39; -&gt; &#39;helloworld&#39;\r\n\r\n&#39;/helloworld&#39;/ -&gt; &#39;helloworld&#39;\r\n\r\nThis isn&#39;t what you want generally, say you are saving the html for each link, you&#39;re going to overwrite the html for a different webpage.\r\n\r\nI pickle a dict such as:\r\n\r\n    {&#39;helloworld&#39;: \r\n        (\r\n        {&#39;/hello/world&#39;: &#39;helloworld&#39;, &#39;/helloworld/&#39;: &#39;helloworld1&#39;},\r\n        2)\r\n        }\r\n\r\n2 represents the number that should be appended to the next filename.\r\n\r\nI look up the filename each time from the dict. If it&#39;s not there, I create a new one, appending the max number if needed."}, {"tags": [], "down_vote_count": 0, "creation_date": 1410524379, "answer_id": 25808207, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1410524379, "body_markdown": "Not exactly what OP was asking for but this is what I use because I need unique and reversible conversions:\r\n\r\n    # p3 code\r\n    def safePath (url):\r\n        return &#39;&#39;.join(map(lambda ch: chr(ch) if ch in safePath.chars else &#39;%%%02x&#39; % ch, url.encode(&#39;utf-8&#39;)))\r\n    safePath.chars = set(map(lambda x: ord(x), &#39;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+-_ .&#39;))\r\n\r\nResult is &quot;somewhat&quot; readable, at least from a sysadmin point of view."}, {"tags": [], "down_vote_count": 0, "creation_date": 1430306387, "answer_id": 29942164, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1430306387, "body_markdown": "There is a nice project on Github called [python-slugify][1]:  \r\n\r\nInstall:\r\n\r\n    pip install python-slugify\r\n\r\nThen use:\r\n\r\n    &gt;&gt;&gt; from slugify import slugify\r\n    &gt;&gt;&gt; txt = &quot;This\\ is/ a%#$ test ---&quot;\r\n    &gt;&gt;&gt; slugify(txt)\r\n    &#39;this-is-a-test&#39;\r\n\r\n\r\n  [1]: https://github.com/un33k/python-slugify"}, {"tags": [], "down_vote_count": 0, "creation_date": 1470310143, "answer_id": 38766141, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1470310143, "body_markdown": "In one line:\r\n\r\n    valid_file_name = re.sub(&#39;[^\\w_.)( -]&#39;, &#39;&#39;, any_string)\r\n\r\nyou can also put &#39;_&#39; character to make it more readable (in case of replacing slashs, for example)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1507221407, "answer_id": 46590727, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1507222267, "last_edit_date": 1507222267, "body_markdown": "I liked the python-slugify approach here but it was stripping dots also away which was not desired. So I optimized it for uploading a clean filename to s3 this way:\r\n\r\n    pip install python-slugify\r\n\r\nExample code:\r\n\r\n    s = &#39;Very / Unsafe / file\\nname h&#228;h&#228; \\n\\r .txt&#39;\r\n    clean_basename = slugify(os.path.splitext(s)[0])\r\n    clean_extension = slugify(os.path.splitext(s)[1][1:])\r\n    if clean_extension:\r\n        clean_filename = &#39;{}.{}&#39;.format(clean_basename, clean_extension)\r\n    elif clean_basename:\r\n        clean_filename = clean_basename\r\n    else:\r\n        clean_filename = &#39;none&#39; # only unclean characters\r\n\r\nOutput:\r\n\r\n    &gt;&gt;&gt; clean_filename\r\n    &#39;very-unsafe-file-name-haha.txt&#39;\r\n    \r\nThis is so failsafe, it works with filenames without extension and it even works for only unsafe characters file names (result is `none` here)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1508286284, "answer_id": 46801075, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1508286284, "body_markdown": "Just like [S.Lott][1] answered, you can look at the [Django Framework][2] for how they convert a string to a valid filename.  \r\n\r\nThe most recent and updated version is found in utils/text.py, and defines &quot;get_valid_filename&quot;, which is as follows:\r\n\r\n    def get_valid_filename(s):\r\n        s = str(s).strip().replace(&#39; &#39;, &#39;_&#39;)\r\n        return re.sub(r&#39;(?u)[^-\\w.]&#39;, &#39;&#39;, s)\r\n\r\n( See [https://github.com/django/django/blob/master/django/utils/text.py][3] )\r\n\r\n\r\n  [1]: https://stackoverflow.com/users/10661\r\n  [2]: https://www.djangoproject.com/\r\n  [3]: https://github.com/django/django/blob/master/django/utils/text.py"}], "title": "Turn a string into a valid filename?", "view_count": 112247, "answer_count": 20, "code_snippet": ["<code>\"_-.() \"</code>", "<code>os.path</code>", "<code>os.path</code>", "<code>template/defaultfilters.py</code>", "<code>slugify</code>", "<code>def slugify(value):\n    \"\"\"\n    Normalizes string, converts to lowercase, removes non-alpha characters,\n    and converts spaces to hyphens.\n    \"\"\"\n    import unicodedata\n    value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore')\n    value = unicode(re.sub('[^\\w\\s-]', '', value).strip().lower())\n    value = unicode(re.sub('[-\\s]+', '-', value))\n</code>", "<code>slugify</code>", "<code>get_valid_filename</code>", "<code>&gt;&gt;&gt; import string\n&gt;&gt;&gt; valid_chars = \"-_.() %s%s\" % (string.ascii_letters, string.digits)\n&gt;&gt;&gt; valid_chars\n'-_.() abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n&gt;&gt;&gt; filename = \"This Is a (valid) - filename%$&amp;$ .txt\"\n&gt;&gt;&gt; ''.join(c for c in filename if c in valid_chars)\n'This Is a (valid) - filename .txt'\n</code>", "<code>valid_chars = frozenset(valid_chars)</code>", "<code>\"CON\"</code>", "<code>import base64\nfile_name_string = base64.urlsafe_b64encode(your_string)\n</code>", "<code>your_string</code>", "<code>encode('ascii')</code>", "<code>&gt;&gt;&gt; s\n'foo-bar#baz?qux@127/\\\\9]'\n&gt;&gt;&gt; \"\".join(x for x in s if x.isalnum())\n'foobarbazqux1279'\n</code>", "<code>filename = \"\".join(i for i in s if i not in \"\\/:*?&lt;&gt;|\")</code>", "<code>\"\".join( x for x in s if (x.isalnum() or x in \"._- \"))</code>", "<code>import unicodedata\n\nvalidFilenameChars = \"-_.() %s%s\" % (string.ascii_letters, string.digits)\n\ndef removeDisallowedFilenameChars(filename):\n    cleanedFilename = unicodedata.normalize('NFKD', filename).encode('ASCII', 'ignore')\n    return ''.join(c for c in cleanedFilename if c in validFilenameChars)\n</code>", "<code>pip install python-slugify\n</code>", "<code>&gt;&gt;&gt; from slugify import slugify\n&gt;&gt;&gt; txt = \"This\\ is/ a%#$ test ---\"\n&gt;&gt;&gt; slugify(txt)\n'this-is-a-test'\n</code>", "<code>test.txt</code>", "<code>test-txt</code>", "<code>import re\n\nstr = \"File!name?.txt\"\nf = open(os.path.join(\"/tmp\", re.sub('[^-a-zA-Z0-9_.() ]+', '', str))\n</code>", "<code>&gt;&gt;&gt; import string\n&gt;&gt;&gt; safechars = bytearray(('_-.()' + string.digits + string.ascii_letters).encode())\n&gt;&gt;&gt; allchars = bytearray(range(0x100))\n&gt;&gt;&gt; deletechars = bytearray(set(allchars) - set(safechars))\n&gt;&gt;&gt; filename = u'#ab\\xa0c.$%.txt'\n&gt;&gt;&gt; safe_filename = filename.encode('ascii', 'ignore').translate(None, deletechars).decode()\n&gt;&gt;&gt; safe_filename\n'abc..txt'\n</code>", "<code>valid_file_name = re.sub('[^\\w_.)( -]', '', any_string)\n</code>", "<code>import re\nbadchars= re.compile(r'[^A-Za-z0-9_. ]+|^\\.|\\.$|^ | $|^$')\nbadnames= re.compile(r'(aux|com[1-9]|con|lpt[1-9]|prn)(\\.|$)')\n\ndef makeName(s):\n    name= badchars.sub('_', s)\n    if badnames.match(name):\n        name= '_'+name\n    return name\n</code>", "<code>def get_valid_filename(s):\n    s = str(s).strip().replace(' ', '_')\n    return re.sub(r'(?u)[^-\\w.]', '', s)\n</code>", "<code>{'helloworld': \n    (\n    {'/hello/world': 'helloworld', '/helloworld/': 'helloworld1'},\n    2)\n    }\n</code>", "<code>pip install python-slugify\n</code>", "<code>s = 'Very / Unsafe / file\\nname h\u00e4h\u00e4 \\n\\r .txt'\nclean_basename = slugify(os.path.splitext(s)[0])\nclean_extension = slugify(os.path.splitext(s)[1][1:])\nif clean_extension:\n    clean_filename = '{}.{}'.format(clean_basename, clean_extension)\nelif clean_basename:\n    clean_filename = clean_basename\nelse:\n    clean_filename = 'none' # only unclean characters\n</code>", "<code>&gt;&gt;&gt; clean_filename\n'very-unsafe-file-name-haha.txt'\n</code>", "<code>none</code>", "<code>import string\nfor chr in your_string:\n if chr == ' ':\n   your_string = your_string.replace(' ', '_')\n elif chr not in string.ascii_letters or chr not in string.digits:\n    your_string = your_string.replace(chr, '')\n</code>", "<code># p3 code\ndef safePath (url):\n    return ''.join(map(lambda ch: chr(ch) if ch in safePath.chars else '%%%02x' % ch, url.encode('utf-8')))\nsafePath.chars = set(map(lambda x: ord(x), '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+-_ .'))\n</code>", "<code>base64</code>", "<code>import re\nt = re.compile(\"[a-zA-Z0-9.,_-]\")\nunsafe = \"abc\u2202\u00e9\u00e5\u00df\u00ae\u2206\u02da\u02d9\u00a9\u00ac\u00f1\u221a\u0192\u00b5\u00a9\u2206\u222b\u00f8\"\nsafe = [ch for ch in unsafe if t.match(ch)]\n# =&gt; 'abc'\n</code>", "<code>base64</code>", "<code>from random import choice\nfrom string import ascii_lowercase, ascii_uppercase, digits\nallowed_chr = ascii_lowercase + ascii_uppercase + digits\n\nsafe = ''.join([choice(allowed_chr) for _ in range(16)])\n# =&gt; 'CYQ4JDKE9JfcRzAZ'\n</code>", "<code>bobcat</code>", "<code>base64</code>"], "path": "stack.django"}, {"tags": ["javascript", "jquery", "ajax", "jsp", "download"], "creation_date": 1293531688, "body_markdown": "I have a Struts2 action in the server side for file downloading.\r\n\r\n    &lt;action name=&quot;download&quot; class=&quot;com.xxx.DownAction&quot;&gt;\r\n    \t&lt;result name=&quot;success&quot; type=&quot;stream&quot;&gt;\r\n      \t\t&lt;param name=&quot;contentType&quot;&gt;text/plain&lt;/param&gt;\r\n      \t\t&lt;param name=&quot;inputName&quot;&gt;imageStream&lt;/param&gt;\r\n      \t\t&lt;param name=&quot;contentDisposition&quot;&gt;attachment;filename={fileName}&lt;/param&gt;\r\n      \t\t&lt;param name=&quot;bufferSize&quot;&gt;1024&lt;/param&gt;\r\n    \t&lt;/result&gt;\r\n    &lt;/action&gt;\r\n\r\nHowever when I call the action using the jQuery:\r\n\r\n    $.post(\r\n      &quot;/download.action&quot;,{\r\n        para1:value1,\r\n        para2:value2\r\n        ....\r\n      },function(data){\r\n          console.info(data);\r\n       }\r\n    );\r\n\r\nin Firebug I see the data is retrieved with the **Binary stream**. I wonder how to open the **file downloading window** with which the user can save the file locally?", "last_edit_date": 1482932903, "up_vote_count": 307, "link": "https://stackoverflow.com/questions/4545311/download-a-file-by-jquery-ajax", "_childDocuments_": [{"tags": [], "down_vote_count": 4, "creation_date": 1317815429, "answer_id": 7660817, "path": "stack.django.answer", "score": 168, "up_vote_count": 172, "is_accepted": false, "last_activity_date": 1397573568, "last_edit_date": 1495539204, "body_markdown": "*Noone posted this [@Pekka&#39;s solution][1]... so I&#39;ll post it. It can help someone.*\r\n\r\nYou can&#39;t and don&#39;t need to do this through Ajax. Just use\r\n\r\n    window.location=&quot;download.action?para1=value1....&quot;\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/4545311/download-a-file-by-jquery-ajax#comment4981707_4545311"}, {"tags": [], "down_vote_count": 5, "creation_date": 1333338483, "answer_id": 9970672, "path": "stack.django.answer", "score": 573, "up_vote_count": 578, "is_accepted": true, "last_activity_date": 1474993642, "last_edit_date": 1495540989, "body_markdown": "[Bluish][1] is completely right about this, you can&#39;t do it through Ajax because JavaScript cannot save files directly to a user&#39;s computer (out of security concerns). Unfortunately pointing the *main window&#39;s* URL at your file download means you have little control over what the user experience is when a file download occurs.\r\n\r\nI created [jQuery File Download][2] which allows for an &quot;Ajax like&quot; experience with file downloads complete with OnSuccess and OnFailure callbacks to provide for a better user experience. Take a look at my [blog post][3] on the common problem that the plugin solves and some ways to use it and also a [demo of jQuery File Download in action][4]. Here is the [source][5]\r\n\r\nHere is a simple use case demo using the plugin [source][6] with promises. The [demo page][7] includes many other, &#39;better UX&#39; examples as well.\r\n\r\n    $.fileDownload(&#39;some/file.pdf&#39;)\r\n        .done(function () { alert(&#39;File download a success!&#39;); })\r\n        .fail(function () { alert(&#39;File download failed!&#39;); });\r\n\r\n\r\nDepending on what browsers you need to support you may be able to use https://github.com/eligrey/FileSaver.js/ which allows more explicit control than the IFRAME method jQuery File Download uses.\r\n\r\n  [1]: https://stackoverflow.com/a/7660817/107768\r\n  [2]: http://johnculviner.com/post/2012/03/22/Ajax-like-feature-rich-file-downloads-with-jQuery-File-Download.aspx\r\n  [3]: http://johnculviner.com/post/2012/03/22/Ajax-like-feature-rich-file-downloads-with-jQuery-File-Download.aspx\r\n  [4]: http://jqueryfiledownload.apphb.com/\r\n  [5]: http://github.com/johnculviner/jquery.fileDownload/blob/master/src/Scripts/jquery.fileDownload.js\r\n  [6]: http://github.com/johnculviner/jquery.fileDownload/blob/master/src/Scripts/jquery.fileDownload.js\r\n  [7]: http://jqueryfiledownload.apphb.com/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1370274784, "answer_id": 16900840, "path": "stack.django.answer", "score": 22, "up_vote_count": 23, "is_accepted": false, "last_activity_date": 1370274784, "last_edit_date": 1495540056, "body_markdown": " **1. Framework agnostic: Servlet downloading file as attachment**\r\n\r\n\t&lt;!-- with JS --&gt;\r\n\t&lt;a href=&quot;javascript:window.location=&#39;downloadServlet?param1=value1&#39;&quot;&gt;\r\n\t    download\r\n\t&lt;/a&gt;\r\n\t\t\r\n\t&lt;!-- without JS --&gt;\r\n\t&lt;a href=&quot;downloadServlet?param1=value1&quot; &gt;download&lt;/a&gt;\r\n\r\n **2. Struts2 Framework: Action downloading file as attachment**\r\n\r\n\t&lt;!-- with JS --&gt;\r\n\t&lt;a href=&quot;javascript:window.location=&#39;downloadAction.action?param1=value1&#39;&quot;&gt;\r\n\t\tdownload\r\n\t&lt;/a&gt;\r\n\r\n\t&lt;!-- without JS --&gt;\r\n\t&lt;a href=&quot;downloadAction.action?param1=value1&quot; &gt;download&lt;/a&gt;\r\n\t\t\r\nIt would be better to use `&lt;s:a&gt;` tag pointing with *OGNL* to an *URL* created with `&lt;s:url&gt;` tag:\r\n\r\n\t&lt;!-- without JS, with Struts tags: THE RIGHT WAY --&gt;\t\r\n\t&lt;s:url action=&quot;downloadAction.action&quot; var=&quot;url&quot;&gt;\r\n\t\t&lt;s:param name=&quot;param1&quot;&gt;value1&lt;/s:param&gt;\r\n\t&lt;/s:ulr&gt;\r\n\t&lt;s:a href=&quot;%{url}&quot; &gt;download&lt;/s:a&gt;\r\n\t\r\n\r\nIn the above cases, you **need** to write the *Content-Disposition* header to the *response*, specifying that the file needs to be downloaded (`attachment`) and not opened by the browser (`inline`). You **need** to specify the *Content Type* too, and you may want to add the file name and length (to help the browser drawing a realistic progressbar). \r\n\r\nFor example, when downloading a ZIP:\r\n\r\n\tresponse.setContentType(&quot;application/zip&quot;);\r\n\tresponse.addHeader(&quot;Content-Disposition&quot;, \r\n\t                   &quot;attachment; filename=\\&quot;name of my file.zip\\&quot;&quot;);\r\n\tresponse.setHeader(&quot;Content-Length&quot;, myFile.length()); // or myByte[].length...\r\n\r\nWith Struts2 (unless you are using the Action as a Servlet, an hack [for direct streaming](https://stackoverflow.com/a/16654313/1654265), for example), you don&#39;t need to directly write anything to the response; simply using the [Stream result type](http://struts.apache.org/release/2.3.x/struts2-core/apidocs/org/apache/struts2/dispatcher/StreamResult.html) and configuring it in struts.xml will work: [EXAMPLE](http://www.mkyong.com/struts2/struts-2-download-file-example/)\r\n\r\n\t&lt;result name=&quot;success&quot; type=&quot;stream&quot;&gt;\r\n\t   &lt;param name=&quot;contentType&quot;&gt;application/zip&lt;/param&gt;\r\n\t   &lt;param name=&quot;contentDisposition&quot;&gt;attachment;filename=&quot;${fileName}&quot;&lt;/param&gt;\r\n\t   &lt;param name=&quot;contentLength&quot;&gt;${fileLength}&lt;/param&gt;\r\n\t&lt;/result&gt;\r\n\r\n\r\n\r\n **3. Framework agnostic (/ Struts2 framework): Servlet(/Action) opening file inside the browser**\r\n \r\n If you want to open the file inside the browser, instead of downloading it, the *Content-disposition* must be set to *inline*, but the target can&#39;t be the current window location; you must target a new window created by javascript, an `&lt;iframe&gt;` in the page, or a new window created on-the-fly with the &quot;discussed&quot; target=&quot;_blank&quot;:\r\n\r\n\t&lt;!-- From a parent page into an IFrame without javascript --&gt;\t\r\n\t&lt;a href=&quot;downloadServlet?param1=value1&quot; target=&quot;iFrameName&quot;&gt;\r\n\t\tdownload\r\n\t&lt;/a&gt;\r\n\t\r\n\t&lt;!-- In a new window without javascript --&gt;\t\r\n\t&lt;a href=&quot;downloadServlet?param1=value1&quot; target=&quot;_blank&quot;&gt;\r\n\t\tdownload\r\n\t&lt;/a&gt;\r\n\t\r\n\t&lt;!-- In a new window with javascript --&gt;\t\r\n\t&lt;a href=&quot;javascript:window.open(&#39;downloadServlet?param1=value1&#39;);&quot; &gt;\r\n\t\tdownload\r\n\t&lt;/a&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1389881473, "answer_id": 21164120, "path": "stack.django.answer", "score": 21, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1389884140, "last_edit_date": 1389884140, "body_markdown": "I have created little function as workaround solution (inspired by @JohnCulviner plugin):\r\n\r\n    // creates iframe and form in it with hidden field,\r\n    // then submit form with provided data\r\n    // url - form url\r\n    // data - data to form field\r\n    // input_name - form hidden input name\r\n    \r\n    function ajax_download(url, data, input_name) {\r\n        var $iframe,\r\n            iframe_doc,\r\n            iframe_html;\r\n    \r\n        if (($iframe = $(&#39;#download_iframe&#39;)).length === 0) {\r\n            $iframe = $(&quot;&lt;iframe id=&#39;download_iframe&#39;&quot; +\r\n                        &quot; style=&#39;display: none&#39; src=&#39;about:blank&#39;&gt;&lt;/iframe&gt;&quot;\r\n                       ).appendTo(&quot;body&quot;);\r\n        }\r\n    \r\n        iframe_doc = $iframe[0].contentWindow || $iframe[0].contentDocument;\r\n        if (iframe_doc.document) {\r\n            iframe_doc = iframe_doc.document;\r\n        }\r\n    \r\n        iframe_html = &quot;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;form method=&#39;POST&#39; action=&#39;&quot; +\r\n                      url +&quot;&#39;&gt;&quot; +\r\n                      &quot;&lt;input type=hidden name=&#39;&quot; + input_name + &quot;&#39; value=&#39;&quot; +\r\n                      JSON.stringify(data) +&quot;&#39;/&gt;&lt;/form&gt;&quot; +\r\n                      &quot;&lt;/body&gt;&lt;/html&gt;&quot;;\r\n\r\n        iframe_doc.open();\r\n        iframe_doc.write(iframe_html);\r\n        $(iframe_doc).find(&#39;form&#39;).submit();\r\n    }\r\n\r\nDemo with click event:\r\n\r\n    $(&#39;#someid&#39;).on(&#39;click&#39;, function() {\r\n        ajax_download(&#39;/download.action&#39;, {&#39;para1&#39;: 1, &#39;para2&#39;: 2}, &#39;dataname&#39;);\r\n    });"}, {"tags": [], "down_vote_count": 0, "creation_date": 1390168366, "answer_id": 21223167, "path": "stack.django.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1413513949, "last_edit_date": 1413513949, "body_markdown": "Ok, based on ndpu&#39;s code heres an improved (I think) version of ajax_download;-\r\n\r\n    function ajax_download(url, data) {\r\n        var $iframe,\r\n            iframe_doc,\r\n            iframe_html;\r\n    \r\n        if (($iframe = $(&#39;#download_iframe&#39;)).length === 0) {\r\n            $iframe = $(&quot;&lt;iframe id=&#39;download_iframe&#39;&quot; +\r\n                        &quot; style=&#39;display: none&#39; src=&#39;about:blank&#39;&gt;&lt;/iframe&gt;&quot;\r\n                       ).appendTo(&quot;body&quot;);\r\n        }\r\n    \r\n        iframe_doc = $iframe[0].contentWindow || $iframe[0].contentDocument;\r\n        if (iframe_doc.document) {\r\n            iframe_doc = iframe_doc.document;\r\n        }\r\n    \r\n        iframe_html = &quot;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;form method=&#39;POST&#39; action=&#39;&quot; +\r\n                      url +&quot;&#39;&gt;&quot; \r\n    \r\n        Object.keys(data).forEach(function(key){\r\n            iframe_html += &quot;&lt;input type=&#39;hidden&#39; name=&#39;&quot;+key+&quot;&#39; value=&#39;&quot;+data[key]+&quot;&#39;&gt;&quot;;\r\n                    \r\n        });\r\n    \r\n            iframe_html +=&quot;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&quot;;\r\n    \r\n        iframe_doc.open();\r\n        iframe_doc.write(iframe_html);\r\n        $(iframe_doc).find(&#39;form&#39;).submit();\r\n    }\r\n\r\nUse this like this;-\r\n\r\n    $(&#39;#someid&#39;).on(&#39;click&#39;, function() {\r\n        ajax_download(&#39;/download.action&#39;, {&#39;para1&#39;: 1, &#39;para2&#39;: 2});\r\n    });\r\n\r\nThe params are sent as proper post params as if coming from an input rather than as a json encoded string as per the previous example.\r\n\r\nCAVEAT: Be wary about the potential for variable injection on those forms. There might be a safer way to encode those variables. Alternatively contemplate escaping them."}, {"tags": [], "down_vote_count": 0, "creation_date": 1391105570, "answer_id": 21464346, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1391105570, "body_markdown": "Ok so here is the working code when Using MVC and you are getting your file from a controller\r\n\r\n\r\nlets say you have your byte array declare and populate,  the only thing you need to do is to use the File function (using System.Web.Mvc)\r\n\r\n    byte[] bytes = .... insert your bytes in the array\r\n    return File(bytes, System.Net.Mime.MediaTypeNames.Application.Octet, &quot;nameoffile.exe&quot;);\r\n\r\nand then,  in the same controller,  add thoses 2 functions\r\n\r\n    protected override void OnResultExecuting(ResultExecutingContext context)\r\n        {\r\n            CheckAndHandleFileResult(context);\r\n\r\n            base.OnResultExecuting(context);\r\n        }\r\n\r\n        private const string FILE_DOWNLOAD_COOKIE_NAME = &quot;fileDownload&quot;;\r\n\r\n        /// &lt;summary&gt;\r\n        /// If the current response is a FileResult (an MVC base class for files) then write a\r\n        /// cookie to inform jquery.fileDownload that a successful file download has occured\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=&quot;context&quot;&gt;&lt;/param&gt;\r\n        private void CheckAndHandleFileResult(ResultExecutingContext context)\r\n        {\r\n            if (context.Result is FileResult)\r\n                //jquery.fileDownload uses this cookie to determine that a file download has completed successfully\r\n                Response.SetCookie(new HttpCookie(FILE_DOWNLOAD_COOKIE_NAME, &quot;true&quot;) { Path = &quot;/&quot; });\r\n            else\r\n                //ensure that the cookie is removed in case someone did a file download without using jquery.fileDownload\r\n                if (Request.Cookies[FILE_DOWNLOAD_COOKIE_NAME] != null)\r\n                    Response.Cookies[FILE_DOWNLOAD_COOKIE_NAME].Expires = DateTime.Now.AddYears(-1);\r\n        }\r\n\r\nand then you will be able to call your controller to download and get the &quot;success&quot; or &quot;failure&quot; callback\r\n\r\n    $.fileDownload(mvcUrl(&#39;name of the controller&#39;), {\r\n                httpMethod: &#39;POST&#39;,\r\n                successCallback: function (url) {\r\n\t\t\t\t//insert success code\r\n                    \r\n                },\r\n                failCallback: function (html, url) {\r\n\t\t\t\t//insert fail code\r\n                }\r\n            });\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1430298225, "answer_id": 29939024, "path": "stack.django.answer", "score": 20, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1430302267, "last_edit_date": 1495540989, "body_markdown": "**You can with HTML5**\r\n\r\nNB: The file data returned MUST be base64 encoded because you cannot JSON encode binary data\r\n\r\nIn my `AJAX` response I have a data structure that looks like this:\r\n\r\n    {\r\n        result: &#39;OK&#39;,\r\n        download: {\r\n            mimetype: string(mimetype in the form &#39;major/minor&#39;),\r\n            filename: string(the name of the file to download),\r\n            data: base64(the binary data as base64 to download)\r\n        }\r\n    }\r\n\r\nThat means that I can do the following to save a file via AJAX\r\n\r\n    var a = document.createElement(&#39;a&#39;);\r\n    if (window.URL &amp;&amp; window.Blob &amp;&amp; (&#39;download&#39; in a) &amp;&amp; window.atob) {\r\n        // Do it the HTML5 compliant way\r\n        var blob = base64ToBlob(result.download.data, result.download.mimetype);\r\n        var url = window.URL.createObjectURL(blob);\r\n        a.href = url;\r\n        a.download = result.download.filename;\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n    }\r\n\r\nThe function base64ToBlob was taken from [here][1] and must be used in compliance with this function \r\n\r\n    function base64ToBlob(base64, mimetype, slicesize) {\r\n        if (!window.atob || !window.Uint8Array) {\r\n            // The current browser doesn&#39;t have the atob function. Cannot continue\r\n            return null;\r\n        }\r\n        mimetype = mimetype || &#39;&#39;;\r\n        slicesize = slicesize || 512;\r\n        var bytechars = atob(base64);\r\n        var bytearrays = [];\r\n        for (var offset = 0; offset &lt; bytechars.length; offset += slicesize) {\r\n            var slice = bytechars.slice(offset, offset + slicesize);\r\n            var bytenums = new Array(slice.length);\r\n            for (var i = 0; i &lt; slice.length; i++) {\r\n                bytenums[i] = slice.charCodeAt(i);\r\n            }\r\n            var bytearray = new Uint8Array(bytenums);\r\n            bytearrays[bytearrays.length] = bytearray;\r\n        }\r\n        return new Blob(bytearrays, {type: mimetype});\r\n    };\r\n\r\nThis is good if your server is dumping filedata to be saved. However, I&#39;ve not quite worked out how one would implement a HTML4 fallback\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/16245768"}, {"tags": [], "down_vote_count": 0, "creation_date": 1431330389, "answer_id": 30162170, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1431330389, "body_markdown": "If you want to use  jQuery File Download , please note this for IE.\r\nYou need to reset the response or it will not download\r\n\r\n        //The IE will only work if you reset response\r\n        getServletResponse().reset();\r\n        //The jquery.fileDownload needs a cookie be set\r\n        getServletResponse().setHeader(&quot;Set-Cookie&quot;, &quot;fileDownload=true; path=/&quot;);\r\n        //Do the reset of your action create InputStream and return\r\n\r\nYour action can implement `ServletResponseAware`  to access `getServletResponse()` "}, {"tags": [], "down_vote_count": 0, "creation_date": 1431639110, "answer_id": 30247716, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1450956112, "last_edit_date": 1450956112, "body_markdown": "Adding some more things to  above answer for downloading a file\r\n\r\nBelow is some java spring code which generates byte Array\r\n\r\n    @RequestMapping(value = &quot;/downloadReport&quot;, method = { RequestMethod.POST })\r\n    \tpublic ResponseEntity&lt;byte[]&gt; downloadReport(\r\n    \t\t\t@RequestBody final SomeObejct obj, HttpServletResponse response) throws Exception {\r\n    \t\r\n    \t\tOutputStream out = new ByteArrayOutputStream();\r\n    \t\t// write something to output stream\r\n    \t\tHttpHeaders respHeaders = new HttpHeaders();\r\n    \t\trespHeaders.setContentType(MediaType.APPLICATION_OCTET_STREAM);\r\n    \t\trespHeaders.add(&quot;X-File-Name&quot;, name);\r\n    \t\tByteArrayOutputStream bos = (ByteArrayOutputStream) out;\r\n    \t\treturn new ResponseEntity&lt;byte[]&gt;(bos.toByteArray(), respHeaders, HttpStatus.CREATED);\r\n    \t}\r\n\r\nNow in  javascript code using FileSaver.js ,can download a file with below code \r\n\r\n    var json=angular.toJson(&quot;somejsobject&quot;);\r\n    var url=apiEndPoint+&#39;some url&#39;;\r\n    var xhr = new XMLHttpRequest();\r\n    //headers(&#39;X-File-Name&#39;)\r\n    xhr.onreadystatechange = function() {\r\n        if (this.readyState == 4 &amp;&amp; this.status == 201) {\r\n            var res = this.response;\r\n            var fileName=this.getResponseHeader(&#39;X-File-Name&#39;);\r\n            var data = new Blob([res]);\r\n            saveAs(data, fileName); //this from FileSaver.js\r\n        }\r\n    }    \r\n    xhr.open(&#39;POST&#39;, url);\r\n    xhr.setRequestHeader(&#39;Authorization&#39;,&#39;Bearer &#39; + token);\r\n    xhr.setRequestHeader(&#39;Content-Type&#39;, &#39;application/json&#39;);\r\n    xhr.responseType = &#39;arraybuffer&#39;;\r\n    xhr.send(json);\r\n\r\nThe above will download file \r\n  "}, {"tags": [], "down_vote_count": 0, "creation_date": 1435518371, "answer_id": 31103676, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1504483643, "last_edit_date": 1504483643, "body_markdown": "Here is what I did, pure javascript and html. Did not test it but this should work in all browsers.\r\n\r\n&gt; Javascript Function\r\n\r\n    var iframe = document.createElement(&#39;iframe&#39;);\r\n    iframe.id = &quot;IFRAMEID&quot;;\r\n    iframe.style.display = &#39;none&#39;;\r\n    document.body.appendChild(iframe);\r\n    iframe.src = &#39;SERVERURL&#39;+&#39;?&#39; + $.param($scope.filtro);\r\n    iframe.addEventListener(&quot;load&quot;, function () {\r\n         console.log(&quot;FILE LOAD DONE.. Download should start now&quot;);\r\n    });\r\n\r\n&gt; Using just components that is supported in all browsers no additional\r\n&gt; libraries.\r\n\r\n![enter image description here][1]\r\n![enter image description here][2]\r\n           \r\n\r\n\r\n  [1]: http://i.stack.imgur.com/JghC5.png\r\n  [2]: http://i.stack.imgur.com/wNPAx.png\r\n\r\n&gt; Here is my server side JAVA Spring controller code.\r\n\r\n    @RequestMapping(value = &quot;/rootto/my/xlsx&quot;, method = RequestMethod.GET)\r\n    public void downloadExcelFile(@RequestParam(value = &quot;param1&quot;, required = false) String param1,\r\n        HttpServletRequest request, HttpServletResponse response)\r\n    \t\t\tthrows ParseException {\r\n   \r\n    \tWorkbook wb = service.getWorkbook(param1);\r\n    \tif (wb != null) {\r\n    \t\ttry {\r\n    \t\t\tString fileName = &quot;myfile_&quot; + sdf.format(new Date());\r\n    \t\t\tresponse.setContentType(&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;);\r\n    \t\t\tresponse.setHeader(&quot;Content-disposition&quot;, &quot;attachment; filename=\\&quot;&quot; + fileName + &quot;.xlsx\\&quot;&quot;);\r\n    \t\t\twb.write(response.getOutputStream());\r\n\t            response.getOutputStream().close();\r\n    \t\t} catch (IOException e) {\r\n    \t\t\te.printStackTrace();\r\n    \t\t}\r\n    \t}\r\n    \t}\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1460477244, "answer_id": 36578627, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1460478727, "last_edit_date": 1460478727, "body_markdown": "    function downloadURI(uri, name) \r\n    {\r\n        var link = document.createElement(&quot;a&quot;);\r\n        link.download = name;\r\n        link.href = uri;\r\n        link.click();\r\n    }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1470746670, "answer_id": 38851131, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1470746670, "body_markdown": "I faced the same issue and successfully solved it. My use-case is this.\r\n\r\n&quot;&lt;i&gt;Post JSON data to the server and receive an excel file.\r\nThat excel file is created by the server and returned as a response to the client. Download that response as a file with custom name in browser&lt;/i&gt;&quot;\r\n    \r\n    $(&quot;#my-button&quot;).on(&quot;click&quot;, function(){\r\n\r\n    // Data to post\r\n    data = {\r\n        ids: [1, 2, 3, 4, 5]\r\n    };\r\n\r\n    // Use XMLHttpRequest instead of Jquery $ajax\r\n    xhttp = new XMLHttpRequest();\r\n    xhttp.onreadystatechange = function() {\r\n        var a;\r\n        if (xhttp.readyState === 4 &amp;&amp; xhttp.status === 200) {\r\n            // Trick for making downloadable link\r\n            a = document.createElement(&#39;a&#39;);\r\n            a.href = window.URL.createObjectURL(xhttp.response);\r\n            // Give filename you wish to download\r\n            a.download = &quot;test-file.xls&quot;;\r\n            a.style.display = &#39;none&#39;;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n        }\r\n    };\r\n    // Post data to URL which handles post request\r\n    xhttp.open(&quot;POST&quot;, excelDownloadUrl);\r\n    xhttp.setRequestHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);\r\n    // You should set responseType as blob for binary responses\r\n    xhttp.responseType = &#39;blob&#39;;\r\n    xhttp.send(JSON.stringify(data));\r\n    });\r\nThe above snippet is just doing following\r\n\r\n* Posting an array as JSON to the server using XMLHttpRequest.\r\n* After fetching content as a blob(binary), we are creating a downloadable URL and attaching it to invisible &quot;a&quot; link then clicking it. I did a POST request here. Instead, you can go for a simple GET too. We cannot download the file through Ajax, must use XMLHttpRequest.\r\n\r\nHere we need to carefully set few things on the server side. I set few headers in Python Django HttpResponse. You need to set them accordingly if you use other programming languages.\r\n\r\n    # In python django code\r\n    response = HttpResponse(file_content, content_type=&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;)\r\n\r\nSince I download xls(excel) here, I adjusted contentType to above one. You need to set it according to your file type. You can use this technique to download any kind of files."}, {"tags": [], "down_vote_count": 0, "creation_date": 1489657357, "answer_id": 42830315, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1489657357, "body_markdown": "The simple way to make the browser downloads a file is to make the request like that:\r\n\r\n     function downloadFile(urlToSend) {\r\n\t     var req = new XMLHttpRequest();\r\n\t     req.open(&quot;GET&quot;, urlToSend, true);\r\n\t     req.responseType = &quot;blob&quot;;\r\n\t     req.onload = function (event) {\r\n\t         var blob = req.response;\r\n\t         var fileName = req.getResponseHeader(&quot;fileName&quot;) //if you have the fileName header available\r\n\t         var link=document.createElement(&#39;a&#39;);\r\n\t         link.href=window.URL.createObjectURL(blob);\r\n\t         link.download=fileName;\r\n\t         link.click();\r\n\t     };\r\n\r\n\t     req.send();\r\n     }\r\n\r\nThis opens the browser download pop up."}, {"tags": [], "down_vote_count": 0, "creation_date": 1496257672, "answer_id": 44292887, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1496257672, "body_markdown": "In Rails, I do it this way: \r\n\r\n    function download_file(file_id) {\r\n      let url       = &#39;/files/&#39; + file_id + &#39;/download_file&#39;;\r\n        $.ajax({\r\n        type: &#39;GET&#39;,\r\n        url: url,\r\n        processData: false,\r\n        success: function (data) {\r\n           window.location = url;\r\n        },\r\n        error: function (xhr) {\r\n         console.log(&#39; Error:  &gt;&gt;&gt;&gt; &#39; + JSON.stringify(xhr));\r\n        }\r\n       });\r\n     }\r\n\r\nThe trick is the *window.location* part. The controller&#39;s method looks like:\r\n\r\n    # GET /files/{:id}/download_file/\r\n    def download_file\r\n        send_file(@file.file,\r\n              :disposition =&gt; &#39;attachment&#39;,\r\n              :url_based_filename =&gt; false)\r\n    end\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1516669847, "answer_id": 48392709, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1516669847, "body_markdown": "I found a fix that while it&#39;s not actually using ajax it does allow you to use a javascript call to request the download and then get a callback when the download actually starts.  I found this helpful if the link runs a server side script that takes a little bit to compose the file before sending it. so you can alert them that it&#39;s processing, and then when it does finally send the file remove that processing notification. which is why I wanted to try to load the file via ajax to begin with so that I could have an event happen when the file is requested and another when it actually starts downloading.\r\n\r\nthe js on the front page\r\n\r\n    function expdone()\r\n    {\r\n    \tdocument.getElementById(&#39;exportdiv&#39;).style.display=&#39;none&#39;;\r\n    }\r\n    function expgo()\r\n    {\r\n       document.getElementById(&#39;exportdiv&#39;).style.display=&#39;block&#39;;\r\n       document.getElementById(&#39;exportif&#39;).src=&#39;test2.php?arguments=data&#39;;\r\n    }\r\n    \r\nthe iframe\r\n\r\n    &lt;div id=&quot;exportdiv&quot; style=&quot;display:none;&quot;&gt;\r\n    &lt;img src=&quot;loader.gif&quot;&gt;&lt;br&gt;&lt;h1&gt;Generating Report&lt;/h1&gt;\r\n    &lt;iframe id=&quot;exportif&quot; src=&quot;&quot; style=&quot;width: 1px;height: 1px; border:0px;&quot;&gt;&lt;/iframe&gt;\r\n    &lt;/div&gt;\r\n\r\nthen the other file:\r\n\r\n    &lt;!DOCTYPE html&gt;\r\n    &lt;html&gt;\r\n    &lt;head&gt;\r\n    &lt;script&gt;\r\n    function expdone()\r\n    {\r\n    \twindow.parent.expdone();\r\n    }\r\n    &lt;/script&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n    &lt;iframe id=&quot;exportif&quot; src=&quot;&lt;?php echo &quot;http://10.192.37.211/npdtracker/exportthismonth.php?arguments=&quot;.$_GET[&quot;arguments&quot;]; ?&gt;&quot;&gt;&lt;/iframe&gt;\r\n    &lt;script&gt;document.getElementById(&#39;exportif&#39;).onload= expdone;&lt;/script&gt;\r\n    &lt;/body&gt;&lt;/html&gt;\r\n\r\nI think there&#39;s a way to read get data using js so then no php would be needed. but I don&#39;t know it off hand and the server I&#39;m using supports php so this works for me.  thought I&#39;d share it in case it helps anyone."}], "title": "Download a file by jQuery.Ajax", "view_count": 496499, "answer_count": 15, "code_snippet": ["<code>&lt;action name=\"download\" class=\"com.xxx.DownAction\"&gt;\n    &lt;result name=\"success\" type=\"stream\"&gt;\n        &lt;param name=\"contentType\"&gt;text/plain&lt;/param&gt;\n        &lt;param name=\"inputName\"&gt;imageStream&lt;/param&gt;\n        &lt;param name=\"contentDisposition\"&gt;attachment;filename={fileName}&lt;/param&gt;\n        &lt;param name=\"bufferSize\"&gt;1024&lt;/param&gt;\n    &lt;/result&gt;\n&lt;/action&gt;\n</code>", "<code>$.post(\n  \"/download.action\",{\n    para1:value1,\n    para2:value2\n    ....\n  },function(data){\n      console.info(data);\n   }\n);\n</code>", "<code>$.fileDownload('some/file.pdf')\n    .done(function () { alert('File download a success!'); })\n    .fail(function () { alert('File download failed!'); });\n</code>", "<code>window.location=\"download.action?para1=value1....\"\n</code>", "<code>window.open(&lt;url&gt;, '_blank');</code>", "<code>&lt;!-- with JS --&gt;\n&lt;a href=\"javascript:window.location='downloadServlet?param1=value1'\"&gt;\n    download\n&lt;/a&gt;\n\n&lt;!-- without JS --&gt;\n&lt;a href=\"downloadServlet?param1=value1\" &gt;download&lt;/a&gt;\n</code>", "<code>&lt;!-- with JS --&gt;\n&lt;a href=\"javascript:window.location='downloadAction.action?param1=value1'\"&gt;\n    download\n&lt;/a&gt;\n\n&lt;!-- without JS --&gt;\n&lt;a href=\"downloadAction.action?param1=value1\" &gt;download&lt;/a&gt;\n</code>", "<code>&lt;s:a&gt;</code>", "<code>&lt;s:url&gt;</code>", "<code>&lt;!-- without JS, with Struts tags: THE RIGHT WAY --&gt;    \n&lt;s:url action=\"downloadAction.action\" var=\"url\"&gt;\n    &lt;s:param name=\"param1\"&gt;value1&lt;/s:param&gt;\n&lt;/s:ulr&gt;\n&lt;s:a href=\"%{url}\" &gt;download&lt;/s:a&gt;\n</code>", "<code>attachment</code>", "<code>inline</code>", "<code>response.setContentType(\"application/zip\");\nresponse.addHeader(\"Content-Disposition\", \n                   \"attachment; filename=\\\"name of my file.zip\\\"\");\nresponse.setHeader(\"Content-Length\", myFile.length()); // or myByte[].length...\n</code>", "<code>&lt;result name=\"success\" type=\"stream\"&gt;\n   &lt;param name=\"contentType\"&gt;application/zip&lt;/param&gt;\n   &lt;param name=\"contentDisposition\"&gt;attachment;filename=\"${fileName}\"&lt;/param&gt;\n   &lt;param name=\"contentLength\"&gt;${fileLength}&lt;/param&gt;\n&lt;/result&gt;\n</code>", "<code>&lt;iframe&gt;</code>", "<code>&lt;!-- From a parent page into an IFrame without javascript --&gt;   \n&lt;a href=\"downloadServlet?param1=value1\" target=\"iFrameName\"&gt;\n    download\n&lt;/a&gt;\n\n&lt;!-- In a new window without javascript --&gt; \n&lt;a href=\"downloadServlet?param1=value1\" target=\"_blank\"&gt;\n    download\n&lt;/a&gt;\n\n&lt;!-- In a new window with javascript --&gt;    \n&lt;a href=\"javascript:window.open('downloadServlet?param1=value1');\" &gt;\n    download\n&lt;/a&gt;\n</code>", "<code>// creates iframe and form in it with hidden field,\n// then submit form with provided data\n// url - form url\n// data - data to form field\n// input_name - form hidden input name\n\nfunction ajax_download(url, data, input_name) {\n    var $iframe,\n        iframe_doc,\n        iframe_html;\n\n    if (($iframe = $('#download_iframe')).length === 0) {\n        $iframe = $(\"&lt;iframe id='download_iframe'\" +\n                    \" style='display: none' src='about:blank'&gt;&lt;/iframe&gt;\"\n                   ).appendTo(\"body\");\n    }\n\n    iframe_doc = $iframe[0].contentWindow || $iframe[0].contentDocument;\n    if (iframe_doc.document) {\n        iframe_doc = iframe_doc.document;\n    }\n\n    iframe_html = \"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;form method='POST' action='\" +\n                  url +\"'&gt;\" +\n                  \"&lt;input type=hidden name='\" + input_name + \"' value='\" +\n                  JSON.stringify(data) +\"'/&gt;&lt;/form&gt;\" +\n                  \"&lt;/body&gt;&lt;/html&gt;\";\n\n    iframe_doc.open();\n    iframe_doc.write(iframe_html);\n    $(iframe_doc).find('form').submit();\n}\n</code>", "<code>$('#someid').on('click', function() {\n    ajax_download('/download.action', {'para1': 1, 'para2': 2}, 'dataname');\n});\n</code>", "<code>AJAX</code>", "<code>{\n    result: 'OK',\n    download: {\n        mimetype: string(mimetype in the form 'major/minor'),\n        filename: string(the name of the file to download),\n        data: base64(the binary data as base64 to download)\n    }\n}\n</code>", "<code>var a = document.createElement('a');\nif (window.URL &amp;&amp; window.Blob &amp;&amp; ('download' in a) &amp;&amp; window.atob) {\n    // Do it the HTML5 compliant way\n    var blob = base64ToBlob(result.download.data, result.download.mimetype);\n    var url = window.URL.createObjectURL(blob);\n    a.href = url;\n    a.download = result.download.filename;\n    a.click();\n    window.URL.revokeObjectURL(url);\n}\n</code>", "<code>function base64ToBlob(base64, mimetype, slicesize) {\n    if (!window.atob || !window.Uint8Array) {\n        // The current browser doesn't have the atob function. Cannot continue\n        return null;\n    }\n    mimetype = mimetype || '';\n    slicesize = slicesize || 512;\n    var bytechars = atob(base64);\n    var bytearrays = [];\n    for (var offset = 0; offset &lt; bytechars.length; offset += slicesize) {\n        var slice = bytechars.slice(offset, offset + slicesize);\n        var bytenums = new Array(slice.length);\n        for (var i = 0; i &lt; slice.length; i++) {\n            bytenums[i] = slice.charCodeAt(i);\n        }\n        var bytearray = new Uint8Array(bytenums);\n        bytearrays[bytearrays.length] = bytearray;\n    }\n    return new Blob(bytearrays, {type: mimetype});\n};\n</code>", "<code>a.click()</code>", "<code>a</code>", "<code>revokeObjectURL</code>", "<code>document.body.appendChild(a)</code>", "<code>function ajax_download(url, data) {\n    var $iframe,\n        iframe_doc,\n        iframe_html;\n\n    if (($iframe = $('#download_iframe')).length === 0) {\n        $iframe = $(\"&lt;iframe id='download_iframe'\" +\n                    \" style='display: none' src='about:blank'&gt;&lt;/iframe&gt;\"\n                   ).appendTo(\"body\");\n    }\n\n    iframe_doc = $iframe[0].contentWindow || $iframe[0].contentDocument;\n    if (iframe_doc.document) {\n        iframe_doc = iframe_doc.document;\n    }\n\n    iframe_html = \"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;form method='POST' action='\" +\n                  url +\"'&gt;\" \n\n    Object.keys(data).forEach(function(key){\n        iframe_html += \"&lt;input type='hidden' name='\"+key+\"' value='\"+data[key]+\"'&gt;\";\n\n    });\n\n        iframe_html +=\"&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;\";\n\n    iframe_doc.open();\n    iframe_doc.write(iframe_html);\n    $(iframe_doc).find('form').submit();\n}\n</code>", "<code>$('#someid').on('click', function() {\n    ajax_download('/download.action', {'para1': 1, 'para2': 2});\n});\n</code>", "<code>Uncaught SecurityError: Blocked a frame with origin \"http://foo.bar.com\" from accessing a frame with origin \"null\".  The frame requesting access has a protocol of \"http\", the frame being accessed has a protocol of \"data\". Protocols must match.</code>", "<code>@ResourceMapping() public void downloadFile(final ResourceRequest request, final ResourceResponse response, @ModelAttribute(\"downForm\") FormModel model)</code>", "<code>$(\"#my-button\").on(\"click\", function(){\n\n// Data to post\ndata = {\n    ids: [1, 2, 3, 4, 5]\n};\n\n// Use XMLHttpRequest instead of Jquery $ajax\nxhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\n    var a;\n    if (xhttp.readyState === 4 &amp;&amp; xhttp.status === 200) {\n        // Trick for making downloadable link\n        a = document.createElement('a');\n        a.href = window.URL.createObjectURL(xhttp.response);\n        // Give filename you wish to download\n        a.download = \"test-file.xls\";\n        a.style.display = 'none';\n        document.body.appendChild(a);\n        a.click();\n    }\n};\n// Post data to URL which handles post request\nxhttp.open(\"POST\", excelDownloadUrl);\nxhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n// You should set responseType as blob for binary responses\nxhttp.responseType = 'blob';\nxhttp.send(JSON.stringify(data));\n});\n</code>", "<code># In python django code\nresponse = HttpResponse(file_content, content_type=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n</code>", "<code>var iframe = document.createElement('iframe');\niframe.id = \"IFRAMEID\";\niframe.style.display = 'none';\ndocument.body.appendChild(iframe);\niframe.src = 'SERVERURL'+'?' + $.param($scope.filtro);\niframe.addEventListener(\"load\", function () {\n     console.log(\"FILE LOAD DONE.. Download should start now\");\n});\n</code>", "<code>@RequestMapping(value = \"/rootto/my/xlsx\", method = RequestMethod.GET)\npublic void downloadExcelFile(@RequestParam(value = \"param1\", required = false) String param1,\n    HttpServletRequest request, HttpServletResponse response)\n            throws ParseException {\n\n    Workbook wb = service.getWorkbook(param1);\n    if (wb != null) {\n        try {\n            String fileName = \"myfile_\" + sdf.format(new Date());\n            response.setContentType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n            response.setHeader(\"Content-disposition\", \"attachment; filename=\\\"\" + fileName + \".xlsx\\\"\");\n            wb.write(response.getOutputStream());\n            response.getOutputStream().close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    }\n</code>", "<code>function downloadURI(uri, name) \n{\n    var link = document.createElement(\"a\");\n    link.download = name;\n    link.href = uri;\n    link.click();\n}\n</code>", "<code>download</code>", "<code>@RequestMapping(value = \"/downloadReport\", method = { RequestMethod.POST })\n    public ResponseEntity&lt;byte[]&gt; downloadReport(\n            @RequestBody final SomeObejct obj, HttpServletResponse response) throws Exception {\n\n        OutputStream out = new ByteArrayOutputStream();\n        // write something to output stream\n        HttpHeaders respHeaders = new HttpHeaders();\n        respHeaders.setContentType(MediaType.APPLICATION_OCTET_STREAM);\n        respHeaders.add(\"X-File-Name\", name);\n        ByteArrayOutputStream bos = (ByteArrayOutputStream) out;\n        return new ResponseEntity&lt;byte[]&gt;(bos.toByteArray(), respHeaders, HttpStatus.CREATED);\n    }\n</code>", "<code>var json=angular.toJson(\"somejsobject\");\nvar url=apiEndPoint+'some url';\nvar xhr = new XMLHttpRequest();\n//headers('X-File-Name')\nxhr.onreadystatechange = function() {\n    if (this.readyState == 4 &amp;&amp; this.status == 201) {\n        var res = this.response;\n        var fileName=this.getResponseHeader('X-File-Name');\n        var data = new Blob([res]);\n        saveAs(data, fileName); //this from FileSaver.js\n    }\n}    \nxhr.open('POST', url);\nxhr.setRequestHeader('Authorization','Bearer ' + token);\nxhr.setRequestHeader('Content-Type', 'application/json');\nxhr.responseType = 'arraybuffer';\nxhr.send(json);\n</code>", "<code> function downloadFile(urlToSend) {\n     var req = new XMLHttpRequest();\n     req.open(\"GET\", urlToSend, true);\n     req.responseType = \"blob\";\n     req.onload = function (event) {\n         var blob = req.response;\n         var fileName = req.getResponseHeader(\"fileName\") //if you have the fileName header available\n         var link=document.createElement('a');\n         link.href=window.URL.createObjectURL(blob);\n         link.download=fileName;\n         link.click();\n     };\n\n     req.send();\n }\n</code>", "<code>function download_file(file_id) {\n  let url       = '/files/' + file_id + '/download_file';\n    $.ajax({\n    type: 'GET',\n    url: url,\n    processData: false,\n    success: function (data) {\n       window.location = url;\n    },\n    error: function (xhr) {\n     console.log(' Error:  &gt;&gt;&gt;&gt; ' + JSON.stringify(xhr));\n    }\n   });\n }\n</code>", "<code># GET /files/{:id}/download_file/\ndef download_file\n    send_file(@file.file,\n          :disposition =&gt; 'attachment',\n          :url_based_filename =&gt; false)\nend\n</code>", "<code>byte[] bytes = .... insert your bytes in the array\nreturn File(bytes, System.Net.Mime.MediaTypeNames.Application.Octet, \"nameoffile.exe\");\n</code>", "<code>protected override void OnResultExecuting(ResultExecutingContext context)\n    {\n        CheckAndHandleFileResult(context);\n\n        base.OnResultExecuting(context);\n    }\n\n    private const string FILE_DOWNLOAD_COOKIE_NAME = \"fileDownload\";\n\n    /// &lt;summary&gt;\n    /// If the current response is a FileResult (an MVC base class for files) then write a\n    /// cookie to inform jquery.fileDownload that a successful file download has occured\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"context\"&gt;&lt;/param&gt;\n    private void CheckAndHandleFileResult(ResultExecutingContext context)\n    {\n        if (context.Result is FileResult)\n            //jquery.fileDownload uses this cookie to determine that a file download has completed successfully\n            Response.SetCookie(new HttpCookie(FILE_DOWNLOAD_COOKIE_NAME, \"true\") { Path = \"/\" });\n        else\n            //ensure that the cookie is removed in case someone did a file download without using jquery.fileDownload\n            if (Request.Cookies[FILE_DOWNLOAD_COOKIE_NAME] != null)\n                Response.Cookies[FILE_DOWNLOAD_COOKIE_NAME].Expires = DateTime.Now.AddYears(-1);\n    }\n</code>", "<code>$.fileDownload(mvcUrl('name of the controller'), {\n            httpMethod: 'POST',\n            successCallback: function (url) {\n            //insert success code\n\n            },\n            failCallback: function (html, url) {\n            //insert fail code\n            }\n        });\n</code>", "<code>    //The IE will only work if you reset response\n    getServletResponse().reset();\n    //The jquery.fileDownload needs a cookie be set\n    getServletResponse().setHeader(\"Set-Cookie\", \"fileDownload=true; path=/\");\n    //Do the reset of your action create InputStream and return\n</code>", "<code>ServletResponseAware</code>", "<code>getServletResponse()</code>", "<code>function expdone()\n{\n    document.getElementById('exportdiv').style.display='none';\n}\nfunction expgo()\n{\n   document.getElementById('exportdiv').style.display='block';\n   document.getElementById('exportif').src='test2.php?arguments=data';\n}\n</code>", "<code>&lt;div id=\"exportdiv\" style=\"display:none;\"&gt;\n&lt;img src=\"loader.gif\"&gt;&lt;br&gt;&lt;h1&gt;Generating Report&lt;/h1&gt;\n&lt;iframe id=\"exportif\" src=\"\" style=\"width: 1px;height: 1px; border:0px;\"&gt;&lt;/iframe&gt;\n&lt;/div&gt;\n</code>", "<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\nfunction expdone()\n{\n    window.parent.expdone();\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;iframe id=\"exportif\" src=\"&lt;?php echo \"http://10.192.37.211/npdtracker/exportthismonth.php?arguments=\".$_GET[\"arguments\"]; ?&gt;\"&gt;&lt;/iframe&gt;\n&lt;script&gt;document.getElementById('exportif').onload= expdone;&lt;/script&gt;\n&lt;/body&gt;&lt;/html&gt;\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "django-forms"], "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1226713166, "answer_id": 291968, "path": "stack.django.answer", "score": 199, "up_vote_count": 201, "is_accepted": true, "last_activity_date": 1266012863, "last_edit_date": 1266012863, "body_markdown": "ForeignKey is represented by django.forms.ModelChoiceField, which is a ChoiceField whose choices are a model QuerySet.  See the reference for [ModelChoiceField][1].\r\n\r\nSo, provide a QuerySet to the field&#39;s `queryset` attribute.  Depends on how your form is built.  If you build an explicit form, you&#39;ll have fields named directly. \r\n\r\n    form.rate.queryset = Rate.objects.filter(company_id=the_company.id)\r\n\r\nIf you take the default ModelForm object, `form.fields[&quot;rate&quot;].queryset = ...`\r\n\r\nThis is done explicitly in the view.  No hacking around.\r\n\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/ref/forms/fields/#modelchoicefield"}, {"tags": [], "down_vote_count": 0, "creation_date": 1249650098, "answer_id": 1244586, "path": "stack.django.answer", "score": 115, "up_vote_count": 115, "is_accepted": false, "last_activity_date": 1291096829, "last_edit_date": 1291096829, "body_markdown": "In addition to S.Lott&#39;s answer and as becomingGuru mentioned in comments, its possible to add the queryset filters by overriding the `ModelForm.__init__` function. (This could easily apply to regular forms) it can help with reuse and keeps the view function tidy. \r\n\r\n    class ClientForm(forms.ModelForm):\r\n        def __init__(self,company,*args,**kwargs):\r\n            super (ClientForm,self ).__init__(*args,**kwargs) # populates the post\r\n            self.fields[&#39;rate&#39;].queryset = Rate.objects.filter(company=company)\r\n            self.fields[&#39;client&#39;].queryset = Client.objects.filter(company=company)\r\n\r\n        class Meta:\r\n            model = Client\r\n\r\n    def addclient(request, company_id):\r\n            the_company = get_object_or_404(Company, id=company_id)\r\n\r\n            if request.POST:\r\n                form = ClientForm(the_company,request.POST)  #&lt;-- Note the extra arg\r\n                if form.is_valid():\r\n                    form.save()\r\n                    return HttpResponseRedirect(the_company.get_clients_url())\r\n            else:\r\n                form = ClientForm(the_company)\r\n\r\n            return render_to_response(&#39;addclient.html&#39;, \r\n                                      {&#39;form&#39;: form, &#39;the_company&#39;:the_company})\r\n\r\nThis can be useful for reuse say if you have common filters needed on many models (normally I declare an abstract Form class). E.g.\r\n\r\n    class UberClientForm(ClientForm):\r\n        class Meta:\r\n            model = UberClient\r\n\r\n    def view(request):\r\n        ...\r\n        form = UberClientForm(company)\r\n        ...\r\n\r\n    #or even extend the existing custom init\r\n    class PITAClient(ClientForm):\r\n        def __init__(company, *args, **args):\r\n            super (PITAClient,self ).__init__(company,*args,**kwargs)\r\n            self.fields[&#39;support_staff&#39;].queryset = User.objects.exclude(user=&#39;michael&#39;)\r\n\r\n\r\nOther than that I&#39;m just restating Django blog material of which there are many good ones out there. \r\n     "}, {"tags": [], "down_vote_count": 1, "creation_date": 1256258759, "answer_id": 1610856, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1256258759, "body_markdown": "So, I&#39;ve really tried to understand this, but it seems that Django still doesn&#39;t make this very straightforward.  I&#39;m not all that dumb, but I just can&#39;t see any (somewhat) simple solution.\r\n\r\nI find it generally pretty ugly to have to override the Admin views for this sort of thing, and every example I find never fully applies to the Admin views.\r\n\r\nThis is such a common circumstance with the models I make that I find it appalling that there&#39;s no obvious solution to this...\r\n\r\nI&#39;ve got these classes:\r\n\r\n    # models.py\r\n    class Company(models.Model):\r\n        # ...\r\n    class Contract(models.Model):\r\n        company = models.ForeignKey(Company)\r\n        locations = models.ManyToManyField(&#39;Location&#39;)\r\n    class Location(models.Model):\r\n        company = models.ForeignKey(Company)\r\n\r\nThis creates a problem when setting up the Admin for Company, because it has inlines for both Contract and Location, and Contract&#39;s m2m options for Location are not properly filtered according to the Company that you&#39;re currently editing.\r\n\r\nIn short, I would need some admin option to do something like this:\r\n\r\n    # admin.py\r\n    class LocationInline(admin.TabularInline):\r\n        model = Location\r\n    class ContractInline(admin.TabularInline):\r\n        model = Contract\r\n    class CompanyAdmin(admin.ModelAdmin):\r\n        inlines = (ContractInline, LocationInline)\r\n        inline_filter = dict(Location__company=&#39;self&#39;)\r\n\r\nUltimately I wouldn&#39;t care if the filtering process was placed on the base CompanyAdmin, or if it was placed on the ContractInline.  (Placing it on the inline makes more sense, but it makes it hard to reference the base Contract as &#39;self&#39;.)\r\n\r\nIs there anyone out there who knows of something as straightforward as this badly needed shortcut?  Back when I made PHP admins for this sort of thing, this was considered basic functionality!  In fact, it was always automatic, and had to be disabled if you really didn&#39;t want it!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1312841475, "answer_id": 6989226, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1444641898, "last_edit_date": 1444641898, "body_markdown": "If you haven&#39;t created the form and want to change the queryset you can do:\r\n\r\n\r\n    formmodel.base_fields[&#39;myfield&#39;].queryset = MyModel.objects.filter(...)\r\n\r\nThis is pretty useful when you are using generic views!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1334462022, "answer_id": 10159363, "path": "stack.django.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1334948831, "last_edit_date": 1334948831, "body_markdown": "To do this with a generic view, like CreateView...\r\n\r\n        \r\n    class AddPhotoToProject(CreateView):\r\n        &quot;&quot;&quot;\r\n        a view where a user can associate a photo with a project\r\n        &quot;&quot;&quot;\r\n        model = Connection\r\n        form_class = CreateConnectionForm\r\n        \r\n        \r\n        def get_context_data(self, **kwargs):\r\n            context = super(AddPhotoToProject, self).get_context_data(**kwargs)\r\n            context[&#39;photo&#39;] = self.kwargs[&#39;pk&#39;]\r\n            context[&#39;form&#39;].fields[&#39;project&#39;].queryset = Project.objects.for_user(self.request.user)\r\n            return context\r\n        def form_valid(self, form):\r\n            pobj = Photo.objects.get(pk=self.kwargs[&#39;pk&#39;])\r\n            obj = form.save(commit=False)\r\n            obj.photo = pobj\r\n            obj.save()\r\n            \r\n            return_json = {&#39;success&#39;: True}\r\n    \r\n            if self.request.is_ajax():\r\n    \r\n                final_response = json.dumps(return_json)\r\n                return HttpResponse(final_response)\r\n                \r\n            else:\r\n    \r\n                messages.success(self.request, &#39;photo was added to project!&#39;)\r\n                return HttpResponseRedirect(reverse(&#39;MyPhotos&#39;))\r\n    \r\nthe most important part of that...\r\n    \r\n        context[&#39;form&#39;].fields[&#39;project&#39;].queryset = Project.objects.for_user(self.request.user)\r\n\r\n, [read my post here][1]\r\n\r\n  [1]: http://gravitymad.com/blog/2012/4/14/how-filter-django-forms-multiple-choice-or-foreign/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1364411932, "answer_id": 15667564, "path": "stack.django.answer", "score": 36, "up_vote_count": 36, "is_accepted": false, "last_activity_date": 1452740136, "last_edit_date": 1452740136, "body_markdown": "This is simple, and works with Django 1.4:\r\n\r\n    class ClientAdminForm(forms.ModelForm):\r\n        def __init__(self, *args, **kwargs):\r\n            super(ClientAdminForm, self).__init__(*args, **kwargs)\r\n            # access object through self.instance...\r\n            self.fields[&#39;base_rate&#39;].queryset = Rate.objects.filter(company=self.instance.company)\r\n\r\n    class ClientAdmin(admin.ModelAdmin):\r\n        form = ClientAdminForm\r\n        ....\r\n\r\nYou don&#39;t need to specify this in a form class, but can do it directly in the ModelAdmin, as Django already includes this built-in method on the ModelAdmin (from the docs):\r\n\r\n    ModelAdmin.formfield_for_foreignkey(self, db_field, request, **kwargs)&#182;\r\n    &#39;&#39;&#39;The formfield_for_foreignkey method on a ModelAdmin allows you to \r\n       override the default formfield for a foreign keys field. For example, \r\n       to return a subset of objects for this foreign key field based on the\r\n       user:&#39;&#39;&#39;\r\n\r\n    class MyModelAdmin(admin.ModelAdmin):\r\n        def formfield_for_foreignkey(self, db_field, request, **kwargs):\r\n            if db_field.name == &quot;car&quot;:\r\n                kwargs[&quot;queryset&quot;] = Car.objects.filter(owner=request.user)\r\n            return super(MyModelAdmin, self).formfield_for_foreignkey(db_field, request, **kwargs)\r\n\r\nAn even niftier way to do this (for example in creating a front-end admin interface that users can access) is to subclass the ModelAdmin and then alter the methods below.  The net result is a user interface that ONLY shows them content that is related to them, while allowing you (a super-user) to see everything.\r\n\r\nI&#39;ve overridden four methods, the first two make it impossible for a user to delete anything, and it also removes the delete buttons from the admin site.  \r\n\r\nThe third override filters any query that contains a reference to (in the example &#39;user&#39; or &#39;porcupine&#39; (just as an illustration).  \r\n\r\nThe last override filters any foreignkey field in the model to filter the choices available the same as the basic queryset.  \r\n\r\nIn this way, you can present an easy to manage front-facing admin site that allows users to mess with their own objects, and you don&#39;t have to remember to type in the specific ModelAdmin filters we talked about above.  \r\n\r\n    class FrontEndAdmin(models.ModelAdmin):\r\n        def __init__(self, model, admin_site):\r\n            self.model = model\r\n            self.opts = model._meta\r\n            self.admin_site = admin_site\r\n            super(FrontEndAdmin, self).__init__(model, admin_site)\r\n\r\nremove &#39;delete&#39; buttons:\r\n\r\n        def get_actions(self, request):\r\n            actions = super(FrontEndAdmin, self).get_actions(request)\r\n            if &#39;delete_selected&#39; in actions:\r\n                del actions[&#39;delete_selected&#39;]\r\n            return actions\r\n\r\nprevents delete permission\r\n\r\n        def has_delete_permission(self, request, obj=None):\r\n            return False\r\n\r\nfilters objects that can be viewed on the admin site:\r\n\r\n        def get_queryset(self, request):\r\n            if request.user.is_superuser:\r\n                try:\r\n                    qs = self.model.objects.all()\r\n                except AttributeError:\r\n                    qs = self.model._default_manager.get_queryset()\r\n                return qs\r\n\r\n            else:\r\n                try:\r\n                    qs = self.model.objects.all()\r\n                except AttributeError:\r\n                    qs = self.model._default_manager.get_queryset()\r\n\r\n                if hasattr(self.model, \u2018user\u2019):\r\n                    return qs.filter(user=request.user)\r\n                if hasattr(self.model, \u2018porcupine\u2019):\r\n                    return qs.filter(porcupine=request.user.porcupine)\r\n                else:\r\n                    return qs\r\n\r\nfilters choices for all foreignkey fields on the admin site:\r\n\r\n        def formfield_for_foreignkey(self, db_field, request, **kwargs):\r\n            if request.employee.is_superuser:\r\n                return super(FrontEndAdmin, self).formfield_for_foreignkey(db_field, request, **kwargs)\r\n    \r\n            else:\r\n                if hasattr(db_field.rel.to, &#39;user&#39;):\r\n                    kwargs[&quot;queryset&quot;] = db_field.rel.to.objects.filter(user=request.user)\r\n                if hasattr(db_field.rel.to, &#39;porcupine&#39;):\r\n                    kwargs[&quot;queryset&quot;] = db_field.rel.to.objects.filter(porcupine=request.user.porcupine)\r\n                return super(ModelAdminFront, self).formfield_for_foreignkey(db_field, request, **kwargs)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1471412557, "answer_id": 38988875, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1471415412, "last_edit_date": 1471415412, "body_markdown": "A more public way is by calling get_form in Admin classes. It also works for non-database fields too. For example here i have a field called &#39;_terminal_list&#39; on the form that can be used in special cases for choosing several terminal items from get_list(request), then filtering based on request.user:\r\n\r\n    class ChangeKeyValueForm(forms.ModelForm):  \r\n        _terminal_list = forms.ModelMultipleChoiceField( \r\n    queryset=Terminal.objects.all() )\r\n    \r\n        class Meta:\r\n            model = ChangeKeyValue\r\n            fields = [&#39;_terminal_list&#39;, &#39;param_path&#39;, &#39;param_value&#39;, &#39;scheduled_time&#39;,  ] \r\n    \r\n    class ChangeKeyValueAdmin(admin.ModelAdmin):\r\n        form = ChangeKeyValueForm\r\n        list_display = (&#39;terminal&#39;,&#39;task_list&#39;, &#39;plugin&#39;,&#39;last_update_time&#39;)\r\n        list_per_page =16\r\n            \r\n        def get_form(self, request, obj = None, **kwargs):\r\n            form = super(ChangeKeyValueAdmin, self).get_form(request, **kwargs)\r\n            qs, filterargs = Terminal.get_list(request)\r\n            form.base_fields[&#39;_terminal_list&#39;].queryset = qs\r\n            return form\r\n"}], "creation_date": 1226712093, "body_markdown": "Say I have the following in my `models.py`:\r\n\r\n    class Company(models.Model):\r\n       name = ...\r\n    \r\n    class Rate(models.Model):\r\n       company = models.ForeignKey(Company)\r\n       name = ...\r\n    \r\n    class Client(models.Model):\r\n       name = ...\r\n       company = models.ForeignKey(Company)\r\n       base_rate = models.ForeignKey(Rate)\r\n\r\nI.e. there are multiple `Companies`, each having a range of `Rates` and `Clients`.  Each `Client` should have a base `Rate` that is chosen from it&#39;s parent `Company&#39;s Rates`, not another `Company&#39;s Rates`.\r\n\r\nWhen creating a form for adding a `Client`, I would like to remove the `Company` choices (as that has already been selected via an &quot;Add Client&quot; button on the `Company` page) and limit the `Rate` choices to that `Company` as well.\r\n\r\nHow do I go about this in Django 1.0?  \r\n\r\nMy current `forms.py` file is just boilerplate at the moment:\r\n\r\n    from models import *\r\n    from django.forms import ModelForm\r\n    \r\n    class ClientForm(ModelForm):\r\n        class Meta:\r\n            model = Client\r\n\r\nAnd the `views.py` is also basic:\r\n\r\n    from django.shortcuts import render_to_response, get_object_or_404\r\n    from models import *\r\n    from forms import *\r\n    \r\n    def addclient(request, company_id):\r\n    \tthe_company = get_object_or_404(Company, id=company_id)\r\n    \r\n    \tif request.POST:\r\n    \t\tform = ClientForm(request.POST)\r\n    \t\tif form.is_valid():\r\n    \t\t\tform.save()\r\n    \t\t\treturn HttpResponseRedirect(the_company.get_clients_url())\r\n    \telse:\r\n    \t\tform = ClientForm()\r\n    \r\n    \treturn render_to_response(&#39;addclient.html&#39;, {&#39;form&#39;: form, &#39;the_company&#39;:the_company})\r\n\r\nIn Django 0.96 I was able to hack this in by doing something like the following before rendering the template:\r\n\r\n    manipulator.fields[0].choices = [(r.id,r.name) for r in Rate.objects.filter(company_id=the_company.id)]\r\n\r\n[`ForeignKey.limit_choices_to`][1] seems promising but I don&#39;t know how to pass in `the_company.id` and I&#39;m not clear if that will work outside the Admin interface anyway.\r\n\r\nThanks.  (This seems like a pretty basic request but if I should redesign something I&#39;m open to suggestions.)\r\n\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.limit_choices_to\r\n", "title": "How do I filter ForeignKey choices in a Django ModelForm?", "view_count": 107438, "up_vote_count": 187, "answer_count": 7, "link": "https://stackoverflow.com/questions/291945/how-do-i-filter-foreignkey-choices-in-a-django-modelform", "code_snippet": ["<code>models.py</code>", "<code>class Company(models.Model):\n   name = ...\n\nclass Rate(models.Model):\n   company = models.ForeignKey(Company)\n   name = ...\n\nclass Client(models.Model):\n   name = ...\n   company = models.ForeignKey(Company)\n   base_rate = models.ForeignKey(Rate)\n</code>", "<code>Companies</code>", "<code>Rates</code>", "<code>Clients</code>", "<code>Client</code>", "<code>Rate</code>", "<code>Company's Rates</code>", "<code>Company's Rates</code>", "<code>Client</code>", "<code>Company</code>", "<code>Company</code>", "<code>Rate</code>", "<code>Company</code>", "<code>forms.py</code>", "<code>from models import *\nfrom django.forms import ModelForm\n\nclass ClientForm(ModelForm):\n    class Meta:\n        model = Client\n</code>", "<code>views.py</code>", "<code>from django.shortcuts import render_to_response, get_object_or_404\nfrom models import *\nfrom forms import *\n\ndef addclient(request, company_id):\n    the_company = get_object_or_404(Company, id=company_id)\n\n    if request.POST:\n        form = ClientForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return HttpResponseRedirect(the_company.get_clients_url())\n    else:\n        form = ClientForm()\n\n    return render_to_response('addclient.html', {'form': form, 'the_company':the_company})\n</code>", "<code>manipulator.fields[0].choices = [(r.id,r.name) for r in Rate.objects.filter(company_id=the_company.id)]\n</code>", "<code>ForeignKey.limit_choices_to</code>", "<code>the_company.id</code>", "<code>queryset</code>", "<code>form.rate.queryset = Rate.objects.filter(company_id=the_company.id)\n</code>", "<code>form.fields[\"rate\"].queryset = ...</code>", "<code>__init__</code>", "<code>ModelForm.__init__</code>", "<code>class ClientForm(forms.ModelForm):\n    def __init__(self,company,*args,**kwargs):\n        super (ClientForm,self ).__init__(*args,**kwargs) # populates the post\n        self.fields['rate'].queryset = Rate.objects.filter(company=company)\n        self.fields['client'].queryset = Client.objects.filter(company=company)\n\n    class Meta:\n        model = Client\n\ndef addclient(request, company_id):\n        the_company = get_object_or_404(Company, id=company_id)\n\n        if request.POST:\n            form = ClientForm(the_company,request.POST)  #&lt;-- Note the extra arg\n            if form.is_valid():\n                form.save()\n                return HttpResponseRedirect(the_company.get_clients_url())\n        else:\n            form = ClientForm(the_company)\n\n        return render_to_response('addclient.html', \n                                  {'form': form, 'the_company':the_company})\n</code>", "<code>class UberClientForm(ClientForm):\n    class Meta:\n        model = UberClient\n\ndef view(request):\n    ...\n    form = UberClientForm(company)\n    ...\n\n#or even extend the existing custom init\nclass PITAClient(ClientForm):\n    def __init__(company, *args, **args):\n        super (PITAClient,self ).__init__(company,*args,**kwargs)\n        self.fields['support_staff'].queryset = User.objects.exclude(user='michael')\n</code>", "<code>class ClientAdminForm(forms.ModelForm):\n    def __init__(self, *args, **kwargs):\n        super(ClientAdminForm, self).__init__(*args, **kwargs)\n        # access object through self.instance...\n        self.fields['base_rate'].queryset = Rate.objects.filter(company=self.instance.company)\n\nclass ClientAdmin(admin.ModelAdmin):\n    form = ClientAdminForm\n    ....\n</code>", "<code>ModelAdmin.formfield_for_foreignkey(self, db_field, request, **kwargs)\u00b6\n'''The formfield_for_foreignkey method on a ModelAdmin allows you to \n   override the default formfield for a foreign keys field. For example, \n   to return a subset of objects for this foreign key field based on the\n   user:'''\n\nclass MyModelAdmin(admin.ModelAdmin):\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        if db_field.name == \"car\":\n            kwargs[\"queryset\"] = Car.objects.filter(owner=request.user)\n        return super(MyModelAdmin, self).formfield_for_foreignkey(db_field, request, **kwargs)\n</code>", "<code>class FrontEndAdmin(models.ModelAdmin):\n    def __init__(self, model, admin_site):\n        self.model = model\n        self.opts = model._meta\n        self.admin_site = admin_site\n        super(FrontEndAdmin, self).__init__(model, admin_site)\n</code>", "<code>    def get_actions(self, request):\n        actions = super(FrontEndAdmin, self).get_actions(request)\n        if 'delete_selected' in actions:\n            del actions['delete_selected']\n        return actions\n</code>", "<code>    def has_delete_permission(self, request, obj=None):\n        return False\n</code>", "<code>    def get_queryset(self, request):\n        if request.user.is_superuser:\n            try:\n                qs = self.model.objects.all()\n            except AttributeError:\n                qs = self.model._default_manager.get_queryset()\n            return qs\n\n        else:\n            try:\n                qs = self.model.objects.all()\n            except AttributeError:\n                qs = self.model._default_manager.get_queryset()\n\n            if hasattr(self.model, \u2018user\u2019):\n                return qs.filter(user=request.user)\n            if hasattr(self.model, \u2018porcupine\u2019):\n                return qs.filter(porcupine=request.user.porcupine)\n            else:\n                return qs\n</code>", "<code>    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        if request.employee.is_superuser:\n            return super(FrontEndAdmin, self).formfield_for_foreignkey(db_field, request, **kwargs)\n\n        else:\n            if hasattr(db_field.rel.to, 'user'):\n                kwargs[\"queryset\"] = db_field.rel.to.objects.filter(user=request.user)\n            if hasattr(db_field.rel.to, 'porcupine'):\n                kwargs[\"queryset\"] = db_field.rel.to.objects.filter(porcupine=request.user.porcupine)\n            return super(ModelAdminFront, self).formfield_for_foreignkey(db_field, request, **kwargs)\n</code>", "<code>class AddPhotoToProject(CreateView):\n    \"\"\"\n    a view where a user can associate a photo with a project\n    \"\"\"\n    model = Connection\n    form_class = CreateConnectionForm\n\n\n    def get_context_data(self, **kwargs):\n        context = super(AddPhotoToProject, self).get_context_data(**kwargs)\n        context['photo'] = self.kwargs['pk']\n        context['form'].fields['project'].queryset = Project.objects.for_user(self.request.user)\n        return context\n    def form_valid(self, form):\n        pobj = Photo.objects.get(pk=self.kwargs['pk'])\n        obj = form.save(commit=False)\n        obj.photo = pobj\n        obj.save()\n\n        return_json = {'success': True}\n\n        if self.request.is_ajax():\n\n            final_response = json.dumps(return_json)\n            return HttpResponse(final_response)\n\n        else:\n\n            messages.success(self.request, 'photo was added to project!')\n            return HttpResponseRedirect(reverse('MyPhotos'))\n</code>", "<code>    context['form'].fields['project'].queryset = Project.objects.for_user(self.request.user)\n</code>", "<code>formmodel.base_fields['myfield'].queryset = MyModel.objects.filter(...)\n</code>", "<code># models.py\nclass Company(models.Model):\n    # ...\nclass Contract(models.Model):\n    company = models.ForeignKey(Company)\n    locations = models.ManyToManyField('Location')\nclass Location(models.Model):\n    company = models.ForeignKey(Company)\n</code>", "<code># admin.py\nclass LocationInline(admin.TabularInline):\n    model = Location\nclass ContractInline(admin.TabularInline):\n    model = Contract\nclass CompanyAdmin(admin.ModelAdmin):\n    inlines = (ContractInline, LocationInline)\n    inline_filter = dict(Location__company='self')\n</code>", "<code>class ChangeKeyValueForm(forms.ModelForm):  \n    _terminal_list = forms.ModelMultipleChoiceField( \nqueryset=Terminal.objects.all() )\n\n    class Meta:\n        model = ChangeKeyValue\n        fields = ['_terminal_list', 'param_path', 'param_value', 'scheduled_time',  ] \n\nclass ChangeKeyValueAdmin(admin.ModelAdmin):\n    form = ChangeKeyValueForm\n    list_display = ('terminal','task_list', 'plugin','last_update_time')\n    list_per_page =16\n\n    def get_form(self, request, obj = None, **kwargs):\n        form = super(ChangeKeyValueAdmin, self).get_form(request, **kwargs)\n        qs, filterargs = Terminal.get_list(request)\n        form.base_fields['_terminal_list'].queryset = qs\n        return form\n</code>"], "path": "stack.django"}, {"tags": ["python", "packages", "setuptools", "easy-install"], "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1249458823, "answer_id": 1231745, "path": "stack.django.answer", "score": 28, "up_vote_count": 30, "is_accepted": false, "last_activity_date": 1283258429, "last_edit_date": 1283258429, "body_markdown": "There are [several][1] sources on the net suggesting a hack by reinstalling the package with the -m option and then just removing the .egg file in lib/ and the binaries in bin/. Also, discussion about this setuptools issue can be found on the python bug tracker as setuptools [issue 21][2].\r\n\r\nEdit: Added the link to the python bugtracker.\r\n\r\n\r\n  [1]: http://thingsilearned.com/2009/04/13/easy_install-uninstalling/\r\n  [2]: http://bugs.python.org/setuptools/issue21"}, {"tags": [], "down_vote_count": 0, "creation_date": 1249478917, "answer_id": 1233261, "path": "stack.django.answer", "score": 25, "up_vote_count": 25, "is_accepted": false, "last_activity_date": 1249478917, "body_markdown": "If the problem is a serious-enough annoyance to you, you might consider [virtualenv][1]. It allows you to create an environment that encapsulates python libraries. You install packages there rather than in the global site-packages directory. Any scripts you run in that environment have access to those packages (and optionally, your global ones as well). I use this a lot when evaluating packages that I am not sure I want/need to install globally. If you decide you don&#39;t need the package, it&#39;s easy enough to just blow that virtual environment away. It&#39;s pretty easy to use. Make a new env:\r\n\r\n    $&gt;virtualenv /path/to/your/new/ENV\r\n\r\nvirtual_envt installs setuptools for you in the new environment, so you can do:\r\n\r\n    $&gt;ENV/bin/easy_install\r\n\r\nYou can even create your own boostrap scripts that setup your new environment. So, with one command, you can create a new virtual env with, say, python 2.6, psycopg2 and django installed by default (you can can install an env-specific version of python if you want).\r\n\r\n  [1]: http://pypi.python.org/pypi/virtualenv"}, {"tags": [], "down_vote_count": 0, "creation_date": 1249479113, "answer_id": 1233282, "path": "stack.django.answer", "score": 178, "up_vote_count": 178, "is_accepted": false, "last_activity_date": 1249479113, "body_markdown": "To uninstall an `.egg` you need to `rm -rf` the egg (it might be a directory) and remove the matching line from `site-packages/easy-install.pth`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1279701636, "answer_id": 3297522, "path": "stack.django.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1279701636, "body_markdown": "try\r\n\r\n    $ easy_install -m [PACKAGE]\r\n\r\nthen\r\n\r\n    $ rm -rf .../python2.X/site-packages/[PACKAGE].egg\r\n\r\n"}, {"tags": [], "down_vote_count": 4, "creation_date": 1279702041, "answer_id": 3297564, "path": "stack.django.answer", "score": 582, "up_vote_count": 586, "is_accepted": true, "last_activity_date": 1446453465, "last_edit_date": 1446453465, "body_markdown": "[pip], an alternative to setuptools/easy_install, provides an &quot;uninstall&quot; command. \r\n\r\nInstall pip according to the [installation instructions](http://pip.readthedocs.org/en/stable/installing/):\r\n\r\n    $ wget https://bootstrap.pypa.io/get-pip.py\r\n    $ python get-pip.py\r\n\r\nThen you can use `pip uninstall` to remove packages installed with `easy_install`\r\n\r\n  [pip]: http://pypi.python.org/pypi/pip/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1281493694, "answer_id": 3454856, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1475075505, "last_edit_date": 1475075505, "body_markdown": "Official(?) instructions: http://peak.telecommunity.com/DevCenter/EasyInstall#uninstalling-packages\r\n&gt; If you have replaced a package with another version, then you can just delete the package(s) you don&#39;t need by deleting the PackageName-versioninfo.egg file or directory (found in the installation directory).\r\n&gt; \r\nIf you want to delete the currently installed version of a package (or all versions of a package), you should first run:\r\n&gt; \r\n    easy_install -mxN PackageName\r\n&gt; \r\nThis will ensure that Python doesn&#39;t continue to search for a package you&#39;re planning to remove. After you&#39;ve done this, you can safely delete the .egg files or directories, along with any scripts you wish to remove."}, {"tags": [], "down_vote_count": 0, "creation_date": 1291166711, "answer_id": 4320437, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1387853419, "last_edit_date": 1387853419, "body_markdown": "To list installed Python packages, you can use `yolk -l`. You&#39;ll need to use `easy_install yolk` first though.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1291179400, "answer_id": 4321319, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1387853340, "last_edit_date": 1387853340, "body_markdown": "Came across this question, while trying to uninstall the many random Python packages installed over time.\r\n\r\nUsing information from this thread, this is what I came up with:\r\n\r\n    cat package_list | xargs -n1 sudo pip uninstall -y\r\n\r\nThe `package_list` is cleaned up (awk) from a `pip freeze` in a virtualenv.\r\n\r\nTo remove _almost_ all Python packages:\r\n\r\n    yolk -l | cut -f 1 -d &quot; &quot; | grep -v &quot;setuptools|pip|ETC..&quot; | xargs -n1 pip uninstall -y\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1302875156, "answer_id": 5677700, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1387853229, "last_edit_date": 1387853229, "body_markdown": "I ran into the same problem on my MacOS X Leopard 10.6.blah.\r\n\r\nSolution is to make sure you&#39;re calling the MacPorts Python:\r\n\r\n    sudo port install python26\r\n    sudo port install python_select\r\n    sudo python_select python26\r\n    sudo port install py26-mysql\r\n\r\nHope this helps."}, {"tags": [], "down_vote_count": 3, "creation_date": 1307440607, "answer_id": 6263564, "path": "stack.django.answer", "score": 150, "up_vote_count": 153, "is_accepted": false, "last_activity_date": 1446429216, "last_edit_date": 1446429216, "body_markdown": "First you have to run this command:\r\n\r\n    $ easy_install -m [PACKAGE]\r\n\r\nIt removes all dependencies of the package.\r\n\r\nThen remove egg file of that package:\r\n\r\n    $ sudo rm -rf /usr/local/lib/python2.X/site-packages/[PACKAGE].egg"}, {"tags": [], "down_vote_count": 0, "creation_date": 1325624684, "answer_id": 8718590, "path": "stack.django.answer", "score": 54, "up_vote_count": 54, "is_accepted": false, "last_activity_date": 1387853154, "last_edit_date": 1387853154, "body_markdown": "All the info is in the other answers, but none summarizes *both* your requests or seem to make things needlessly complex:\r\n\r\n- For your removal needs use:\r\n\r\n        pip uninstall &lt;package&gt;\r\n\r\n    (install using `easy_install pip`)\r\n\r\n- For your &#39;list installed packages&#39; needs either use: \r\n\r\n        pip freeze\r\n\r\n    Or:\r\n\r\n        yolk -l\r\n\r\n    which can output more package details.\r\n\r\n    (Install via `easy_install yolk` or `pip install yolk`)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1413878454, "answer_id": 26481670, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1413878454, "body_markdown": "For me only deleting this file : easy-install.pth \r\nworked, rest pip install django==1.3.7 "}], "creation_date": 1249457593, "body_markdown": "Python&#39;s &lt;code&gt;easy_install&lt;/code&gt; makes installing new packages extremely convenient. However, as far as I can tell, it doesn&#39;t implement the other common features of a dependency manager - listing and removing installed packages.\r\n\r\nWhat is the best way of finding out what&#39;s installed, and what is the preferred way of removing installed packages? Are there any files that need to be updated if I remove packages manually (e.g. by `rm /usr/local/lib/python2.6/dist-packages/my_installed_pkg.egg` or similar)?\r\n", "title": "How do I remove packages installed with Python&#39;s easy_install?", "view_count": 458783, "up_vote_count": 635, "answer_count": 12, "link": "https://stackoverflow.com/questions/1231688/how-do-i-remove-packages-installed-with-pythons-easy-install", "code_snippet": ["<code>easy_install</code>", "<code>rm /usr/local/lib/python2.6/dist-packages/my_installed_pkg.egg</code>", "<code>easy_uninstall</code>", "<code>--help</code>", "<code>$ wget https://bootstrap.pypa.io/get-pip.py\n$ python get-pip.py\n</code>", "<code>pip uninstall</code>", "<code>easy_install</code>", "<code>.egg</code>", "<code>rm -rf</code>", "<code>site-packages/easy-install.pth</code>", "<code>pip</code>", "<code>data_files</code>", "<code>scripts</code>", "<code>EGG-INFO/SOURCES.txt</code>", "<code>package</code>", "<code>sources</code>", "<code>data_files</code>", "<code>$ easy_install -m [PACKAGE]\n</code>", "<code>$ sudo rm -rf /usr/local/lib/python2.X/site-packages/[PACKAGE].egg\n</code>", "<code>-m</code>", "<code>rm -rf /usr/local/lib/python*</code>", "<code>pip uninstall &lt;package&gt;\n</code>", "<code>easy_install pip</code>", "<code>pip freeze\n</code>", "<code>yolk -l\n</code>", "<code>easy_install yolk</code>", "<code>pip install yolk</code>", "<code>yolk -l</code>", "<code>$&gt;virtualenv /path/to/your/new/ENV\n</code>", "<code>$&gt;ENV/bin/easy_install\n</code>", "<code>easy_install -mxN PackageName\n</code>", "<code>$ easy_install -m [PACKAGE]\n</code>", "<code>$ rm -rf .../python2.X/site-packages/[PACKAGE].egg\n</code>", "<code>$ easy_install -mxN PACKAGE</code>", "<code>$ rm -rf .../lib/python2.X/site-packages/PACKAGE.egg</code>", "<code>yolk -l</code>", "<code>easy_install yolk</code>", "<code>cat package_list | xargs -n1 sudo pip uninstall -y\n</code>", "<code>package_list</code>", "<code>pip freeze</code>", "<code>yolk -l | cut -f 1 -d \" \" | grep -v \"setuptools|pip|ETC..\" | xargs -n1 pip uninstall -y\n</code>", "<code>&lt;package_list xargs -n1 sudo pip uninstall -y</code>", "<code>sudo port install python26\nsudo port install python_select\nsudo python_select python26\nsudo port install py26-mysql\n</code>"], "path": "stack.django"}, {"tags": ["python", "unit-testing", "code-organization"], "creation_date": 1221370871, "body_markdown": "If you&#39;re writing a library, or an app, where do the unit test files go?  \r\n\r\nIt&#39;s nice to separate the test files from the main app code, but it&#39;s awkward to put them into a &quot;tests&quot; subdirectory inside of the app root directory, because it makes it harder to import the modules that you&#39;ll be testing.  \r\n\r\nIs there a best practice here?", "last_edit_date": 1267533212, "up_vote_count": 372, "link": "https://stackoverflow.com/questions/61151/where-do-the-python-unit-tests-go", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1221374763, "answer_id": 61168, "path": "stack.django.answer", "score": 11, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1221374763, "body_markdown": "I don&#39;t believe there is an established &quot;best practice&quot;.\r\n\r\nI put my tests in another directory outside of the app code. I then add the main app directory to sys.path (allowing you to import the modules from anywhere) in my test runner script (which does some other stuff as well) before running all the tests. This way I never have to remove the tests directory from the main code when I release it, saving me time and effort, if an ever so tiny amount."}, {"tags": [], "down_vote_count": 1, "creation_date": 1221374774, "answer_id": 61169, "path": "stack.django.answer", "score": 42, "up_vote_count": 43, "is_accepted": false, "last_activity_date": 1420781508, "last_edit_date": 1420781508, "body_markdown": "A common practice is to put the tests directory in the same parent directory as your module/package. So if your module was called foo.py your directory layout would look like:\r\n\r\n    parent_dir/\r\n      foo.py\r\n      tests/\r\n\r\nOf course there is no one way of doing it. You could also make a tests subdirectory and import the module using [absolute import][1].\r\n\r\nWherever you put your tests, I would recommend you use [nose][2] to run them. [Nose][2] searches through your directories for tests. This way, you can put tests wherever they make the most sense organizationally.\r\n\r\n\r\n  [1]: http://www.python.org/dev/peps/pep-0328/\r\n  [2]: http://nose.readthedocs.org/en/latest/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1221415332, "answer_id": 61518, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1221415332, "body_markdown": "I&#39;ve recently started to program in Python, so I&#39;ve not really had chance to find out best practice yet.\r\nBut, I&#39;ve written a module that goes and finds all the tests and runs them.\r\n\r\nSo, I have:\r\n&lt;pre&gt;\r\napp/\r\n appfile.py\r\ntest/\r\n appfileTest.py\r\n&lt;/pre&gt;\r\nI&#39;ll have to see how it goes as I progress to larger projects.\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1221416338, "answer_id": 61531, "path": "stack.django.answer", "score": 13, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1221416338, "body_markdown": "I use a `tests/` directory, and then import the main application modules using relative imports. So in MyApp/tests/foo.py, there might be:\r\n\r\n    from .. import foo\r\n\r\nto import the `MyApp.foo` module."}, {"tags": [], "down_vote_count": 0, "creation_date": 1221448169, "answer_id": 61820, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1226059296, "last_edit_date": 1226059297, "body_markdown": "In C#, I&#39;ve generally separated the tests into a separate assembly.\r\n\r\nIn Python -- so far -- I&#39;ve tended to either write doctests, where the test is in the docstring of a function, or put them in the `if __name__ == &quot;__main__&quot;` block at the bottom of the module."}, {"tags": [], "down_vote_count": 6, "creation_date": 1221483120, "answer_id": 62527, "path": "stack.django.answer", "score": 143, "up_vote_count": 149, "is_accepted": false, "last_activity_date": 1436094734, "last_edit_date": 1436094734, "body_markdown": "For a file `module.py`, the unit test should normally be called `test_module.py`, following Pythonic naming conventions.\r\n\r\nThere are several commonly accepted places to put `test_module.py`:\r\n\r\n1. In the same directory as `module.py`.\r\n2. In `../tests/test_module.py` (at the same level as the code directory).\r\n3. In `tests/test_module.py` (one level under the code directory).\r\n\r\nI prefer #1 for its simplicity of finding the tests and importing them. Whatever build system you&#39;re using can easily be configured to run files starting with `test_`. Actually, the [default `unittest` pattern used for test discovery is `test*.py`](https://docs.python.org/library/unittest.html#test-discovery)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1221490595, "answer_id": 63645, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1221490595, "body_markdown": "When writing a package called &quot;foo&quot;, I will put unit tests into a separate package &quot;foo\\_test&quot;. Modules and subpackages will then have the same name as the SUT package module. E.g. tests for a module foo.x.y are found in foo\\_test.x.y. The \\_\\_init\\_\\_.py files of each testing package then contain an AllTests suite that includes all test suites of the package. setuptools provides a convenient way to specify the main testing package, so that after &quot;python setup.py develop&quot; you can just use &quot;python setup.py test&quot; or &quot;python setup.py test -s foo\\_test.x.SomeTestSuite&quot; to the just a specific suite."}, {"tags": [], "down_vote_count": 0, "creation_date": 1221599412, "answer_id": 77145, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1221599412, "body_markdown": "If the tests are simple, simply put them in the docstring -- most of the test frameworks for Python will be able to use that:\r\n\r\n    &gt;&gt;&gt; import module\r\n    &gt;&gt;&gt; module.method(&#39;test&#39;)\r\n    &#39;testresult&#39;\r\n\r\nFor other more involved tests, I&#39;d put them either in `../tests/test_module.py` or in `tests/test_module.py`.\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1221842813, "answer_id": 103610, "path": "stack.django.answer", "score": 22, "up_vote_count": 23, "is_accepted": false, "last_activity_date": 1221843855, "last_edit_date": 1221843855, "body_markdown": "I also tend to put my unit tests in the file itself, as Jeremy Cantrell above notes, although I tend to not put the test function in the main body, but rather put everything in an\r\n\r\n    if __name__ == &#39;__main__&#39;:\r\n       do tests...\r\n\r\nblock.  This ends up adding documentation to the file as &#39;example code&#39; for how to use the python file you are testing.\r\n\r\nI should add, I tend to write very tight modules/classes.  If your modules require very large numbers of tests, you can put them in another, but even then, I&#39;d still add:\r\n\r\n    if __name__ == &#39;__main__&#39;:\r\n       import tests.thisModule\r\n       tests.thisModule.runtests\r\n\r\nThis lets anybody reading your source code know where to look for the test code."}, {"tags": [], "down_vote_count": 1, "creation_date": 1222278256, "answer_id": 128616, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1222284363, "last_edit_date": 1222284363, "body_markdown": "We use \r\n\r\napp/src/code.py\r\n\r\napp/testing/code_test.py \r\n\r\napp/docs/..\r\n\r\nIn each test file we insert &quot;../src/&quot; in sys.path. It&#39;s not the nicest solution but works. I think it would be great if someone came up w/ something like maven in java that gives you standard conventions that just work, no matter what project you work on."}, {"tags": [], "down_vote_count": 0, "creation_date": 1229730487, "answer_id": 382596, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1317950339, "last_edit_date": 1317950339, "body_markdown": "I prefer toplevel tests directory. This does mean imports become a little more difficult. For that I have two solutions:\r\n\r\n1. Use setuptools. Then you can pass `test_suite=&#39;tests.runalltests.suite&#39;` into `setup()`, and can run the tests simply: `python setup.py test`\r\n2. Set PYTHONPATH when running the tests: `PYTHONPATH=. python tests/runalltests.py`\r\n\r\nHere&#39;s how that stuff is supported by code in M2Crypto:\r\n\r\n* http://svn.osafoundation.org/m2crypto/trunk/setup.py\r\n* http://svn.osafoundation.org/m2crypto/trunk/tests/alltests.py\r\n\r\nIf you prefer to run tests with nosetests you might need do something a little different.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1241284085, "answer_id": 815212, "path": "stack.django.answer", "score": 26, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1241284085, "body_markdown": "We had the very same question when writing Pythoscope (http://pythoscope.org), which generates unit tests for Python programs.  We polled people on the testing in python list before we chose a directory, there were many different opinions.  In the end we chose to put a &quot;tests&quot; directory in the same directory as the source code. In that directory we generate a test file for each module in the parent directory.  "}, {"tags": [], "down_vote_count": 1, "creation_date": 1267534251, "answer_id": 2363162, "path": "stack.django.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1302039365, "last_edit_date": 1302039365, "body_markdown": "How I do it...\r\n\r\nFolder structure:\r\n\r\n    project/\r\n        src/\r\n            code.py\r\n        tests/\r\n        setup.py\r\n\r\nSetup.py points to src/ as the location containing my projects modules, then i run:\r\n\r\n    setup.py develop\r\n\r\nWhich adds my project into site-packages, pointing to my working copy. To run my tests i use:\r\n\r\n    setup.py tests\r\n\r\nUsing whichever test runner I&#39;ve configured."}, {"tags": [], "down_vote_count": 0, "creation_date": 1395980558, "answer_id": 22704148, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1395980558, "body_markdown": "From my experience in developing Testing frameworks in Python, I would suggest to put python unit tests in a separate directory. Maintain a symmetric directory structure. This would be helpful in packaging just the core libraries and not package the unit tests. Below is implemented through a schematic diagram. \r\n\r\n \r\n                                  &lt;Main Package&gt;\r\n                                   /          \\\r\n                                  /            \\\r\n                                lib           tests\r\n                                /                \\\r\n                 [module1.py, module2.py,  [ut_module1.py, ut_module2.py,\r\n                  module3.py  module4.py,   ut_module3.py, ut_module.py]\r\n                  __init__.py]\r\n     \r\nIn this way when you package these libraries using an rpm, you can just package the main library modules (only). This helps maintainability particularly in agile environment. \r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1398855531, "answer_id": 23386287, "path": "stack.django.answer", "score": 34, "up_vote_count": 34, "is_accepted": false, "last_activity_date": 1506451274, "last_edit_date": 1506451274, "body_markdown": "## Only 1 test file\r\n\r\nIf doesn&#39;t have many test files, putting it in a top-level directory is nice (I think this is a pythonic (recommended) way):\r\n\r\n    module/\r\n      lib/\r\n        __init__.py\r\n        module.py\r\n      test.py\r\n\r\n## Many test files\r\n\r\nIf has many test files, put it in a `tests` folder:\r\n\r\n    module/\r\n      lib/\r\n        __init__.py\r\n        module.py\r\n      tests/\r\n        test_module.py\r\n        test_module2.py\r\n\r\nbut if you put the tests in `tests` folder, test can&#39;t `import ..lib` in CLI because `__main__`  can&#39;t import relative modules, so instead we can use [&lt;kbd&gt;nose&lt;/kbd&gt;](https://nose.readthedocs.org/en/latest/), or we can add a parent directory to the python import path, and for that I will create a\r\n\r\n### env.py\r\n\r\n    import sys\r\n    import os\r\n    \r\n    # append module root directory to sys.path\r\n    sys.path.append(\r\n        os.path.dirname(\r\n            os.path.dirname(\r\n                os.path.abspath(__file__)\r\n            )\r\n        )\r\n    )\r\n\r\nin\r\n\r\n    module/\r\n      tests/\r\n        test_module.py\r\n        env.py\r\n\r\nand `import env` before test import module\r\n\r\n### test_module.py\r\n    \r\n    import unittest\r\n    # append parent directory to import path\r\n    import env\r\n    # now we can import the lib module\r\n    from lib import module\r\n\r\n    if __name__ == &#39;__main__&#39;:\r\n        unittest.main()\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1462816453, "answer_id": 37122327, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1462816453, "body_markdown": "I recommend you check some main Python projects on GitHub and get some ideas.\r\n\r\nWhen your code gets larger and you add more libraries it&#39;s better to create a test folder in the same directory you have setup.py and mirror your project directory structure for each test type (unittest, integration, ...)\r\n\r\nFor example if you have a directory structure like:\r\n\r\n    myPackage/\r\n        myapp/\r\n           moduleA/\r\n              __init__.py\r\n              module_A.py\r\n           moduleB/\r\n              __init__.py\r\n              module_B.py\r\n    setup.py\r\n\r\nAfter adding test folder you will have a directory structure like:\r\n\r\n    myPackage/\r\n        myapp/\r\n           moduleA/\r\n              __init__.py\r\n              module_A.py\r\n           moduleB/\r\n              __init__.py\r\n              module_B.py\r\n    test/\r\n       unit/\r\n          myapp/\r\n             moduleA/\r\n                module_A_test.py\r\n             moduleB/\r\n                module_B_test.py\r\n       integration/\r\n              myapp/\r\n                 moduleA/\r\n                    module_A_test.py\r\n                 moduleB/\r\n                    module_B_test.py\r\n    setup.py\r\nMany properly written Python packages uses the same structure. A very good example is the Boto package.\r\nCheck https://github.com/boto/boto"}, {"tags": [], "down_vote_count": 0, "creation_date": 1475047898, "answer_id": 39740835, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1503931392, "last_edit_date": 1503931392, "body_markdown": "Every once in a while I find myself checking out the topic of test placement, and every time the majority recommends a separate folder structure beside the library code, but I find that every time the arguments are the same and are not that convincing. I end up putting my test modules somewhere beside the core modules. \r\n\r\nThe main reason for doing this is: **refactoring**.\r\n\r\nWhen I move things around I do want test modules to move with the code; it&#39;s easy to lose tests if they are in a separate tree. Let&#39;s be honest, sooner or later you end up with a totally different folder structure, like [django](https://github.com/django/django), [flask](https://github.com/pallets/flask) and many others. Which is fine if you don&#39;t care.\r\n\r\nThe main question you should ask yourself is this:  \r\n\r\nAm I writing:  \r\n\r\n- a) reusable library or  \r\n- b) building a project than bundles together some semi-separated modules?\r\n\r\nIf a: \r\n\r\nA separate folder and the extra effort to maintain its structure may be better suited. No one will complain about your tests getting *deployed to production*. \r\n\r\nBut it&#39;s also just as easy to exclude tests from being distributed when they are mixed with the core folders; [put this in the setup.py](http://setuptools.readthedocs.io/en/latest/setuptools.html?highlight=find_packages#using-find-packages):\r\n\r\n    find_packages(&quot;src&quot;, exclude=[&quot;*.tests&quot;, &quot;*.tests.*&quot;, &quot;tests.*&quot;, &quot;tests&quot;]) \r\n\r\nIf b: \r\n\r\nYou may wish \u2014 as every one of us do \u2014 that you are writing reusable libraries, but most of the time their life is tied to the life of the project. Ability to easily maintain your project should be a priority. \r\n\r\nThen if you did a good job and your module is a good fit for another project, it will probably get copied \u2014 not forked or made into a separate library \u2014 into this new project, and moving tests that lay beside it in the same folder structure is easy in comparison to fishing up tests in a mess that a separate test folder had become. (You may argue that it shouldn&#39;t be a mess in the first place but let&#39;s be realistic here).\r\n\r\nSo the choice is still yours, but I would argue that with mixed up tests you achieve all the same things as with a separate folder, but with less effort on keeping things tidy.    \r\n\r\n\r\n\r\n\r\n   "}], "title": "Where do the Python unit tests go?", "view_count": 61389, "answer_count": 17, "code_snippet": ["<code>module.py</code>", "<code>test_module.py</code>", "<code>test_module.py</code>", "<code>module.py</code>", "<code>../tests/test_module.py</code>", "<code>tests/test_module.py</code>", "<code>test_</code>", "<code>unittest</code>", "<code>test*.py</code>", "<code>parent_dir/\n  foo.py\n  tests/\n</code>", "<code>module/\n  lib/\n    __init__.py\n    module.py\n  test.py\n</code>", "<code>tests</code>", "<code>module/\n  lib/\n    __init__.py\n    module.py\n  tests/\n    test_module.py\n    test_module2.py\n</code>", "<code>tests</code>", "<code>import ..lib</code>", "<code>__main__</code>", "<code>import sys\nimport os\n\n# append module root directory to sys.path\nsys.path.append(\n    os.path.dirname(\n        os.path.dirname(\n            os.path.abspath(__file__)\n        )\n    )\n)\n</code>", "<code>module/\n  tests/\n    test_module.py\n    env.py\n</code>", "<code>import env</code>", "<code>import unittest\n# append parent directory to import path\nimport env\n# now we can import the lib module\nfrom lib import module\n\nif __name__ == '__main__':\n    unittest.main()\n</code>", "<code>if __name__ == '__main__':\n   do tests...\n</code>", "<code>if __name__ == '__main__':\n   import tests.thisModule\n   tests.thisModule.runtests\n</code>", "<code>tests/</code>", "<code>from .. import foo\n</code>", "<code>MyApp.foo</code>", "<code>                              &lt;Main Package&gt;\n                               /          \\\n                              /            \\\n                            lib           tests\n                            /                \\\n             [module1.py, module2.py,  [ut_module1.py, ut_module2.py,\n              module3.py  module4.py,   ut_module3.py, ut_module.py]\n              __init__.py]\n</code>", "<code>myPackage/\n    myapp/\n       moduleA/\n          __init__.py\n          module_A.py\n       moduleB/\n          __init__.py\n          module_B.py\nsetup.py\n</code>", "<code>myPackage/\n    myapp/\n       moduleA/\n          __init__.py\n          module_A.py\n       moduleB/\n          __init__.py\n          module_B.py\ntest/\n   unit/\n      myapp/\n         moduleA/\n            module_A_test.py\n         moduleB/\n            module_B_test.py\n   integration/\n          myapp/\n             moduleA/\n                module_A_test.py\n             moduleB/\n                module_B_test.py\nsetup.py\n</code>", "<code>matplotlib</code>", "<code>matplotlib/lib/matplotlib/tests</code>", "<code>sklearn</code>", "<code>scikitelearn/sklearn/tests</code>", "<code>find_packages(\"src\", exclude=[\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\"]) \n</code>", "<code>project/\n    src/\n        code.py\n    tests/\n    setup.py\n</code>", "<code>setup.py develop\n</code>", "<code>setup.py tests\n</code>", "<code>code.py</code>", "<code>test_suite='tests.runalltests.suite'</code>", "<code>setup()</code>", "<code>python setup.py test</code>", "<code>PYTHONPATH=. python tests/runalltests.py</code>", "<code>if __name__ == \"__main__\"</code>", "<code>&gt;&gt;&gt; import module\n&gt;&gt;&gt; module.method('test')\n'testresult'\n</code>", "<code>../tests/test_module.py</code>", "<code>tests/test_module.py</code>"], "path": "stack.django"}, {"tags": ["python", "django"], "creation_date": 1298981630, "body_markdown": "Whats the difference (in language a python/django noob can understand) in a view between `render()`, `render_to_response()` and `direct_to_template()`?\r\n\r\ne.g. from [Nathan Borror&#39;s basic apps examples][3]\r\n\r\n    def comment_edit(request, object_id, template_name=&#39;comments/edit.html&#39;):\r\n        comment = get_object_or_404(Comment, pk=object_id, user=request.user)\r\n        # ...\r\n        return render(request, template_name, {\r\n            &#39;form&#39;: form,\r\n            &#39;comment&#39;: comment,\r\n        })\r\n\r\nBut I&#39;ve also seen\r\n\r\n        return render_to_response(template_name, my_data_dictionary,\r\n                  context_instance=RequestContext(request))\r\n\r\nAnd\r\n\r\n        return direct_to_template(request, template_name, my_data_dictionary)\r\n        \r\nWhats the difference, what to use in any particular situation?\r\n\r\n  [3]: https://github.com/nathanborror/django-basic-apps", "last_edit_date": 1430828766, "up_vote_count": 210, "link": "https://stackoverflow.com/questions/5154358/django-what-is-the-difference-between-render-render-to-response-and-direc", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1298982011, "answer_id": 5154431, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1339233141, "last_edit_date": 1339233141, "body_markdown": "From django [docs][1]: \r\n\r\n&gt; render() is the same as a call to\r\n&gt; render_to_response() with a\r\n&gt; context_instance argument that that\r\n&gt; forces the use of a RequestContext.\r\n\r\n\r\n`direct_to_template` is something different. It&#39;s a generic view that uses a data dictionary to render the html without the need of the views.py, you use it in urls.py. Docs [here][2]\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.4/topics/http/shortcuts/#render\r\n  [2]: https://docs.djangoproject.com/en/1.4/ref/generic-views/#django-views-generic-simple-direct-to-template"}, {"tags": [], "down_vote_count": 1, "creation_date": 1298982165, "answer_id": 5154458, "path": "stack.django.answer", "score": 167, "up_vote_count": 168, "is_accepted": true, "last_activity_date": 1443618157, "last_edit_date": 1443618157, "body_markdown": "https://docs.djangoproject.com/en/1.8/topics/http/shortcuts/#render\r\n\r\n    render(request, template[, dictionary][, context_instance][, content_type][, status][, current_app])\r\n\r\n`render()` is a brand spanking new shortcut for `render_to_response` in 1.3 that will automatically use `RequestContext` that I will most definitely be using from now on.\r\n\r\n\r\n----------\r\n\r\nhttps://docs.djangoproject.com/en/1.8/topics/http/shortcuts/#render-to-response\r\n\r\n    render_to_response(template[, dictionary][, context_instance][, mimetype])&#182;\r\n\r\n`render_to_response` is your standard render function used in the tutorials and such. To use `RequestContext` you&#39;d have to specify `context_instance=RequestContext(request)`\r\n\r\n\r\n----------\r\n\r\nhttps://docs.djangoproject.com/en/1.8/ref/generic-views/#django-views-generic-simple-direct-to-template\r\n\r\n`direct_to_template` is a generic view that I use in my views (as opposed to in my urls) because like the new `render()` function, it automatically uses `RequestContext` and all its `context_processor`s.\r\n\r\nBut `direct_to_template` _should be avoided_ as function based generic views are deprecated. Either use `render` or an actual class, see https://docs.djangoproject.com/en/1.3/topics/generic-views-migration/\r\n\r\nI&#39;m happy I haven&#39;t typed `RequestContext` in a long, long time. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1298982287, "answer_id": 5154474, "path": "stack.django.answer", "score": 22, "up_vote_count": 22, "is_accepted": false, "last_activity_date": 1374228817, "last_edit_date": 1374228817, "body_markdown": "Render is\r\n\r\n    def render(request, *args, **kwargs):\r\n        &quot;&quot;&quot; Simple wrapper for render_to_response. &quot;&quot;&quot;\r\n        kwargs[&#39;context_instance&#39;] = RequestContext(request)\r\n        return render_to_response(*args, **kwargs)\r\n\r\nSo there is really no difference between `render_to_response` except it wraps your context making the template pre-processors work.\r\n\r\nDirect to template is a [generic view](https://docs.djangoproject.com/en/1.4/ref/generic-views/#django-views-generic-simple-direct-to-template).\r\n\r\nThere is really no sense in using it here because there is overhead over `render_to_response` in the form of view function.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1298984379, "answer_id": 5154816, "path": "stack.django.answer", "score": 35, "up_vote_count": 35, "is_accepted": false, "last_activity_date": 1417112377, "last_edit_date": 1417112377, "body_markdown": "Rephrasing Yuri, F&#225;bio, and Frosts answers for the Django noob (i.e. me) - almost certainly a simplification, but a good starting point?\r\n\r\n -  `render_to_response()` is the &quot;original&quot;, but requires you putting `context_instance=RequestContext(request)` in nearly all the time, a PITA.\r\n \r\n\r\n - `direct_to_template()` is designed to be used just in urls.py without a view defined in views.py but it [can be used in views.py to avoid having to type RequestContext][1]\r\n\r\n\r\n - `render()` is a shortcut for `render_to_response()` that automatically supplies `context_instance=Request`....\r\nIts available in the django development version (1.2.1) but many have created their own shortcuts such as [this one][2], [this one][3] or the one that threw me initially, Nathans [basic.tools.shortcuts.py][4] \r\n\r\n\r\n  [1]: https://web.archive.org/web/20130527012805/http://www.import-awesome.com/youre-using-rendertoresponse-psh-heres-direct\r\n  [2]: http://fi.am/entry/shortcutting-render_to_response/\r\n  [3]: http://djangosnippets.org/snippets/133/\r\n  [4]: https://github.com/nathanborror/django-basic-apps/blob/master/basic/tools/shortcuts.py"}, {"tags": [], "down_vote_count": 0, "creation_date": 1364594564, "answer_id": 15712111, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1364594564, "body_markdown": "Just one note I could not find in the answers above. In this code:\r\n\r\n    context_instance = RequestContext(request)\r\n    return render_to_response(template_name, user_context, context_instance)\r\n\r\nWhat the third parameter `context_instance` actually does? Being [RequestContext][1] it sets up some basic context which is then added to `user_context`. So the template gets this extended context. What variables are added is given by `TEMPLATE_CONTEXT_PROCESSORS` in settings.py. For instance django.contrib.auth.context_processors.auth adds variable `user` and variable `perm` which are then accessible in the template.\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.3/ref/templates/api/#django.template.RequestContext"}], "title": "Django - what is the difference between render(), render_to_response() and direct_to_template()?", "view_count": 78308, "answer_count": 5, "code_snippet": ["<code>render()</code>", "<code>render_to_response()</code>", "<code>direct_to_template()</code>", "<code>def comment_edit(request, object_id, template_name='comments/edit.html'):\n    comment = get_object_or_404(Comment, pk=object_id, user=request.user)\n    # ...\n    return render(request, template_name, {\n        'form': form,\n        'comment': comment,\n    })\n</code>", "<code>    return render_to_response(template_name, my_data_dictionary,\n              context_instance=RequestContext(request))\n</code>", "<code>    return direct_to_template(request, template_name, my_data_dictionary)\n</code>", "<code>render(request, template[, dictionary][, context_instance][, content_type][, status][, current_app])\n</code>", "<code>render()</code>", "<code>render_to_response</code>", "<code>RequestContext</code>", "<code>render_to_response(template[, dictionary][, context_instance][, mimetype])\u00b6\n</code>", "<code>render_to_response</code>", "<code>RequestContext</code>", "<code>context_instance=RequestContext(request)</code>", "<code>direct_to_template</code>", "<code>render()</code>", "<code>RequestContext</code>", "<code>context_processor</code>", "<code>direct_to_template</code>", "<code>render</code>", "<code>RequestContext</code>", "<code>render()</code>", "<code>render_to_response()</code>", "<code>context_instance=RequestContext(request)</code>", "<code>direct_to_template()</code>", "<code>render()</code>", "<code>render_to_response()</code>", "<code>context_instance=Request</code>", "<code>def render(request, *args, **kwargs):\n    \"\"\" Simple wrapper for render_to_response. \"\"\"\n    kwargs['context_instance'] = RequestContext(request)\n    return render_to_response(*args, **kwargs)\n</code>", "<code>render_to_response</code>", "<code>render_to_response</code>", "<code>direct_to_template</code>", "<code>context_instance = RequestContext(request)\nreturn render_to_response(template_name, user_context, context_instance)\n</code>", "<code>context_instance</code>", "<code>user_context</code>", "<code>TEMPLATE_CONTEXT_PROCESSORS</code>", "<code>user</code>", "<code>perm</code>"], "path": "stack.django"}, {"tags": ["python", "module", "pip"], "creation_date": 1239453258, "body_markdown": "I would like to get a list of Python modules, which are in my Python installation (UNIX server).\r\n\r\n**How can you get a list of Python modules installed in your computer?**", "last_edit_date": 1416870260, "up_vote_count": 700, "link": "https://stackoverflow.com/questions/739993/how-can-i-get-a-list-of-locally-installed-python-modules", "_childDocuments_": [{"tags": [], "down_vote_count": 12, "creation_date": 1239453487, "answer_id": 740000, "path": "stack.django.answer", "score": -9, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1239475107, "last_edit_date": 1239475107, "body_markdown": "From the shell\r\n\r\n    ls site-packages\r\n\r\nIf that&#39;s not helpful, you can do this.\r\n\r\n    import sys\r\n    import os\r\n    for p in sys.path:\r\n        print os.listdir( p )\r\n\r\nAnd see what that produces."}, {"tags": [], "down_vote_count": 3, "creation_date": 1239453945, "answer_id": 740018, "path": "stack.django.answer", "score": 766, "up_vote_count": 769, "is_accepted": false, "last_activity_date": 1239453945, "body_markdown": "    help(&#39;modules&#39;)\r\n\r\nin a Python shell/prompt."}, {"tags": [], "down_vote_count": 0, "creation_date": 1295149335, "answer_id": 4703670, "path": "stack.django.answer", "score": 211, "up_vote_count": 211, "is_accepted": false, "last_activity_date": 1295150478, "last_edit_date": 1295150478, "body_markdown": "Now, these methods I tried myself, and I got exactly what was advertised:  All the modules.\r\n\r\nAlas, really you don&#39;t care much about the stdlib, you know what you get with a python install.  \r\n\r\nReally, I want the stuff that _I_ installed. \r\n\r\nWhat actually, surprisingly, worked just fine was:\r\n\r\n    pip freeze\r\n\r\nWhich returned:\r\n\r\n    Fabric==0.9.3\r\n    apache-libcloud==0.4.0\r\n    bzr==2.3b4\r\n    distribute==0.6.14\r\n    docutils==0.7\r\n    greenlet==0.3.1\r\n    ipython==0.10.1\r\n    iterpipes==0.4\r\n    libxml2-python==2.6.21\r\n\r\nI say &quot;surprisingly&quot; because the package install tool is the exact place one would expect to find this functionality, although not under the name &#39;freeze&#39; but python packaging is so weird, that I am flabbergasted that this tool makes sense.  Pip 0.8.2, Python 2.7.  \r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1328707467, "answer_id": 9194180, "path": "stack.django.answer", "score": 67, "up_vote_count": 67, "is_accepted": false, "last_activity_date": 1328707804, "last_edit_date": 1328707804, "body_markdown": "- In [`ipython`][1] you can type &quot;`import `&lt;kbd&gt;Tab&lt;/kbd&gt;&quot;.\r\n\r\n- In the standard Python interpreter, you can type &quot;`help(&#39;modules&#39;)`&quot;.\r\n\r\n- At the command-line, you can use [`pydoc`](http://docs.python.org/library/pydoc.html) `modules`.\r\n\r\n- In a script, call [`pkgutil.iter_modules()`](http://docs.python.org/library/pkgutil.html#pkgutil.iter_modules).\r\n\r\n\r\n  [1]: http://ipython.org/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1336826084, "answer_id": 10563781, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1336826084, "body_markdown": "Very simple searching using [pkgutil.iter_modules][1]\r\n\r\n\r\n  [1]: http://docs.python.org/library/pkgutil.html#pkgutil.iter_modules\r\n\r\n    from pkgutil import iter_modules\r\n    a=iter_modules()\r\n    while True:\r\n        try: x=a.next()\r\n        except: break\r\n        if &#39;searchstr&#39; in x[1]: print x[1]\r\n\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1340402526, "answer_id": 11164710, "path": "stack.django.answer", "score": 44, "up_vote_count": 45, "is_accepted": false, "last_activity_date": 1389609835, "last_edit_date": 1389609835, "body_markdown": "I just use this to see currently used modules:\r\n\r\n    import sys as s\r\n    s.modules.keys()\r\n\r\nwhich shows all modules running on your python.\r\n\r\nFor all built-in modules use:\r\n\r\n    s.modules\r\n\r\nWhich is a dict containing all modules and import objects.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1345804085, "answer_id": 12107636, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1345804085, "body_markdown": "I ran into a custom installed python 2.7 on OS X. It required X11 to list modules installed (both using help and pydoc).\r\n\r\nTo be able to list all modules without installing X11 I ran pydoc as http-server, i.e.:\r\n\r\n    pydoc -p 12345\r\n\r\nThen it&#39;s possible to direct Safari to `http://localhost:12345/` to see all modules."}, {"tags": [], "down_vote_count": 0, "creation_date": 1359145206, "answer_id": 14529730, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1449089767, "last_edit_date": 1449089767, "body_markdown": "Aside from using `pip freeze` I have been installing [yolk][1] in my virtual environments.\r\n\r\n\r\n  [1]: http://pypi.python.org/pypi/yolk"}, {"tags": [], "down_vote_count": 0, "creation_date": 1374792992, "answer_id": 17870160, "path": "stack.django.answer", "score": 57, "up_vote_count": 57, "is_accepted": false, "last_activity_date": 1374795057, "last_edit_date": 1374795057, "body_markdown": "Since pip version 1.3, you&#39;ve got access to:\r\n\r\n    pip list\r\n\r\nWhich seems to be syntactic sugar for &quot;pip freeze&quot;.  It will list all of the modules particular to your installation or virtualenv, along with their version numbers.  Unfortunately it does not display the current version number of any module, nor does it wash your dishes or shine your shoes."}, {"tags": [], "down_vote_count": 1, "creation_date": 1377251131, "answer_id": 18399722, "path": "stack.django.answer", "score": 50, "up_vote_count": 51, "is_accepted": false, "last_activity_date": 1377251131, "body_markdown": "In normal shell just use\r\n\r\n    pydoc modules"}, {"tags": [], "down_vote_count": 0, "creation_date": 1386286683, "answer_id": 20413093, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1386286683, "body_markdown": "In case you have an [anaconda python distribution][1] installed, you could also use\r\n\r\n    $conda list\r\n\r\nin addition to solutions described above.\r\n\r\n  [1]: https://store.continuum.io/cshop/anaconda/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1388654800, "answer_id": 20879819, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1449089713, "last_edit_date": 1449089713, "body_markdown": "If we need to know list of installed packages in python , we can use &#39;help&#39; command like given below (in python shell)\r\n\r\n\r\n    &gt;&gt;help(&#39;modules package&#39;)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1390286532, "answer_id": 21250992, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1390286532, "body_markdown": "1. to get all available modules, run `sys.modules`\r\n2. to get all _installed_ modules (read: installed by `pip`), you may look at `pip.get_installed_distributions()`\r\n\r\nFor the second purpose, example code:\r\n\r\n    import pip\r\n    for package in pip.get_installed_distributions():\r\n        name = package.project_name # SQLAlchemy, Django, Flask-OAuthlib\r\n        key = package.key # sqlalchemy, django, flask-oauthlib\r\n        module_name = package._get_metadata(&quot;top_level.txt&quot;) # sqlalchemy, django, flask_oauthlib\r\n        location = package.location # virtualenv lib directory etc.\r\n        version = package.version # version number\r\n    "}, {"tags": [], "down_vote_count": 4, "creation_date": 1401181542, "answer_id": 23885252, "path": "stack.django.answer", "score": 445, "up_vote_count": 449, "is_accepted": true, "last_activity_date": 1405674324, "last_edit_date": 1495535498, "body_markdown": "## Solution\r\n\r\nMy 50 cents for getting a `pip freeze`-like list from a Python script:\r\n\r\n&lt;!-- language: lang-python --&gt;\r\n\r\n    import pip\r\n    installed_packages = pip.get_installed_distributions()\r\n    installed_packages_list = sorted([&quot;%s==%s&quot; % (i.key, i.version)\r\n         for i in installed_packages])\r\n    print(installed_packages_list)\r\n\r\nAs a (too long) one liner:\r\n\r\n&lt;!-- language: lang-python --&gt;\r\n\r\n    sorted([&quot;%s==%s&quot; % (i.key, i.version) for i in pip.get_installed_distributions()])\r\n\r\nGiving:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    [&#39;behave==1.2.4&#39;, &#39;enum34==1.0&#39;, &#39;flask==0.10.1&#39;, &#39;itsdangerous==0.24&#39;, \r\n     &#39;jinja2==2.7.2&#39;, &#39;jsonschema==2.3.0&#39;, &#39;markupsafe==0.23&#39;, &#39;nose==1.3.3&#39;, \r\n     &#39;parse-type==0.3.4&#39;, &#39;parse==1.6.4&#39;, &#39;prettytable==0.7.2&#39;, &#39;requests==2.3.0&#39;,\r\n     &#39;six==1.6.1&#39;, &#39;vioozer-metadata==0.1&#39;, &#39;vioozer-users-server==0.1&#39;, \r\n     &#39;werkzeug==0.9.4&#39;]\r\n\r\n## Scope\r\n\r\nThis solution applies to the system scope or to a virtual environment scope, and covers packages installed by `setuptools`, `pip` and ([god forbid][1]) `easy_install`.\r\n\r\n## My use case\r\n\r\nI added the result of this call to my flask server, so when I call it with `http://example.com/exampleServer/environment` I get the list of packages installed on the server&#39;s virtualenv. It makes debugging a whole lot easier.\r\n\r\n## Caveats\r\n\r\nI have noticed a strange behaviour of this technique - when the Python interpreter is invoked in the same directory as a `setup.py` file, it does not list the package installed by `setup.py`.\r\n\r\n### Steps to reproduce:\r\n\r\n#### Create a virtual environment\r\n\r\n    $ cd /tmp\r\n    $ virtualenv test_env\r\n    New python executable in test_env/bin/python\r\n    Installing setuptools, pip...done.\r\n    $ source test_env/bin/activate\r\n    (test_env) $ \r\n\r\n#### Clone a git repo with `setup.py`\r\n\r\n    (test_env) $ git clone https://github.com/behave/behave.git\r\n    Cloning into &#39;behave&#39;...\r\n    remote: Reusing existing pack: 4350, done.\r\n    remote: Total 4350 (delta 0), reused 0 (delta 0)\r\n    Receiving objects: 100% (4350/4350), 1.85 MiB | 418.00 KiB/s, done.\r\n    Resolving deltas: 100% (2388/2388), done.\r\n    Checking connectivity... done.\r\n\r\nWe have behave&#39;s `setup.py` in `/tmp/behave`:\r\n\r\n    (test_env) $ ls /tmp/behave/setup.py\r\n    /tmp/behave/setup.py\r\n\r\n#### Install the python package from the git repo\r\n\r\n    (test_env) $ cd /tmp/behave &amp;&amp; python setup.py install\r\n    running install\r\n    ...\r\n    Installed /private/tmp/test_env/lib/python2.7/site-packages/enum34-1.0-py2.7.egg\r\n    Finished processing dependencies for behave==1.2.5a1\r\n\r\n### If we run the aforementioned solution from `/tmp`\r\n\r\n    &gt;&gt;&gt; import pip\r\n    &gt;&gt;&gt; sorted([&quot;%s==%s&quot; % (i.key, i.version) for i in pip.get_installed_distributions()])\r\n    [&#39;behave==1.2.5a1&#39;, &#39;enum34==1.0&#39;, &#39;parse-type==0.3.4&#39;, &#39;parse==1.6.4&#39;, &#39;six==1.6.1&#39;]\r\n    &gt;&gt;&gt; import os\r\n    &gt;&gt;&gt; os.getcwd()\r\n    &#39;/private/tmp&#39;\r\n\r\n### If we run the aforementioned solution from `/tmp/behave`\r\n\r\n    &gt;&gt;&gt; import pip\r\n    &gt;&gt;&gt; sorted([&quot;%s==%s&quot; % (i.key, i.version) for i in pip.get_installed_distributions()])\r\n    [&#39;enum34==1.0&#39;, &#39;parse-type==0.3.4&#39;, &#39;parse==1.6.4&#39;, &#39;six==1.6.1&#39;]\r\n    &gt;&gt;&gt; import os\r\n    &gt;&gt;&gt; os.getcwd()\r\n    &#39;/private/tmp/behave&#39;\r\n\r\n`behave==1.2.5a1` is missing from the second example, because the working directory contains `behave`&#39;s `setup.py` file.\r\n\r\nI could not find any reference to this issue in the documentation. Perhaps I shall open a bug for it.\r\n\r\n  [1]: https://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install"}, {"tags": [], "down_vote_count": 0, "creation_date": 1449840387, "answer_id": 34224653, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1449845691, "last_edit_date": 1449845691, "body_markdown": "on windows, Enter this in cmd\r\n\r\n    c:\\python\\libs&gt;python -m pip freeze"}, {"tags": [], "down_vote_count": 0, "creation_date": 1461235922, "answer_id": 36767383, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1461235922, "body_markdown": "**pip freeze** does it all finding packages however one can simply write the following command to list all paths where python packages are.\r\n    \r\n    &gt;&gt;&gt; import site; site.getsitepackages()\r\n    [&#39;/usr/local/lib/python2.7/dist-packages&#39;, &#39;/usr/lib/python2.7/dist-packages&#39;]"}, {"tags": [], "down_vote_count": 0, "creation_date": 1488983143, "answer_id": 42673938, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1488983143, "last_edit_date": 1495542887, "body_markdown": "This solution is primary based on modules `importlib` and `pkgutil` and work with CPython 3.4 and CPython 3.5, but has no support for the CPython 2.\r\n\r\n\r\n----------\r\n**Explanation**\r\n\r\n 1. `sys.builtin_module_names` - names all built-in modules (look my answer [here][1])\r\n 2. `pkgutil.iter_modules()` - returns an information about all available modules\r\n 3. `importlib.util.find_spec()` - returns an information about importing module, if exists\r\n 4. `BuiltinImporter` - an importer for built-in modules ([docs][2])\r\n 5. `SourceFileLoader` - an importer for a standard Python module (by default has extension *.py) ([docs][3])\r\n 6. `ExtensionFileLoader` - an importer for modules as [shared library][4] (written on the C or C++)\r\n\r\n----------\r\n\r\n\r\n**Full code**\r\n\r\n\r\n    import sys\r\n    import os\r\n    import shutil\r\n    import pkgutil\r\n    import importlib\r\n    import collections\r\n    \r\n    if sys.version_info.major == 2:\r\n        raise NotImplementedError(&#39;CPython 2 is not supported yet&#39;)\r\n    \r\n    \r\n    def main():\r\n    \r\n        # name this file (module)\r\n        this_module_name = os.path.basename(__file__).rsplit(&#39;.&#39;)[0]\r\n    \r\n        # dict for loaders with their modules\r\n        loaders = collections.OrderedDict()\r\n    \r\n        # names`s of build-in modules\r\n        for module_name in sys.builtin_module_names:\r\n    \r\n            # find an information about a module by name\r\n            module = importlib.util.find_spec(module_name)\r\n    \r\n            # add a key about a loader in the dict, if not exists yet\r\n            if module.loader not in loaders:\r\n                loaders[module.loader] = []\r\n    \r\n            # add a name and a location about imported module in the dict\r\n            loaders[module.loader].append((module.name, module.origin))\r\n    \r\n        # all available non-build-in modules\r\n        for module_name in pkgutil.iter_modules():\r\n    \r\n            # ignore this module\r\n            if this_module_name == module_name[1]:\r\n                continue\r\n    \r\n            # find an information about a module by name\r\n            module = importlib.util.find_spec(module_name[1])\r\n    \r\n            # add a key about a loader in the dict, if not exists yet\r\n            loader = type(module.loader)\r\n            if loader not in loaders:\r\n                loaders[loader] = []\r\n    \r\n            # add a name and a location about imported module in the dict\r\n            loaders[loader].append((module.name, module.origin))\r\n    \r\n        # pretty print\r\n        line = &#39;-&#39; * shutil.get_terminal_size().columns\r\n        for loader, modules in loaders.items():\r\n            print(&#39;{0}\\n{1}: {2}\\n{0}&#39;.format(line, len(modules), loader))\r\n            for module in modules:\r\n                print(&#39;{0:30} | {1}&#39;.format(module[0], module[1]))\r\n    \r\n    \r\n    if __name__ == &#39;__main__&#39;:\r\n        main()\r\n\r\n\r\n----------\r\n\r\n\r\n**Usage**\r\n\r\nFor the CPython3.5 (truncated)\r\n\r\n    $ python3.5 python_modules_info.py \r\n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    30: &lt;class &#39;_frozen_importlib.BuiltinImporter&#39;&gt;\r\n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    _ast                           | built-in\r\n    _codecs                        | built-in\r\n    _collections                   | built-in\r\n    _functools                     | built-in\r\n    _imp                           | None\r\n    _io                            | built-in\r\n    _locale                        | built-in\r\n    _operator                      | built-in\r\n    _signal                        | built-in\r\n    _sre                           | built-in\r\n    _stat                          | built-in\r\n    _string                        | built-in\r\n    _symtable                      | built-in\r\n    _thread                        | built-in\r\n    (****************************truncated*******************************)\r\n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    227: &lt;class &#39;_frozen_importlib_external.SourceFileLoader&#39;&gt;\r\n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    __future__                     | /usr/local/lib/python3.5/__future__.py\r\n    _bootlocale                    | /usr/local/lib/python3.5/_bootlocale.py\r\n    _collections_abc               | /usr/local/lib/python3.5/_collections_abc.py\r\n    _compat_pickle                 | /usr/local/lib/python3.5/_compat_pickle.py\r\n    _compression                   | /usr/local/lib/python3.5/_compression.py\r\n    _dummy_thread                  | /usr/local/lib/python3.5/_dummy_thread.py\r\n    _markupbase                    | /usr/local/lib/python3.5/_markupbase.py\r\n    _osx_support                   | /usr/local/lib/python3.5/_osx_support.py\r\n    _pydecimal                     | /usr/local/lib/python3.5/_pydecimal.py\r\n    _pyio                          | /usr/local/lib/python3.5/_pyio.py\r\n    _sitebuiltins                  | /usr/local/lib/python3.5/_sitebuiltins.py\r\n    (****************************truncated*******************************)\r\n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    64: &lt;class &#39;_frozen_importlib_external.ExtensionFileLoader&#39;&gt;\r\n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    _bisect                        | /usr/local/lib/python3.5/lib-dynload/_bisect.cpython-35m-x86_64-linux-gnu.so\r\n    _bz2                           | /usr/local/lib/python3.5/lib-dynload/_bz2.cpython-35m-x86_64-linux-gnu.so\r\n    _codecs_cn                     | /usr/local/lib/python3.5/lib-dynload/_codecs_cn.cpython-35m-x86_64-linux-gnu.so\r\n    _codecs_hk                     | /usr/local/lib/python3.5/lib-dynload/_codecs_hk.cpython-35m-x86_64-linux-gnu.so\r\n    _codecs_iso2022                | /usr/local/lib/python3.5/lib-dynload/_codecs_iso2022.cpython-35m-x86_64-linux-gnu.so\r\n    (****************************truncated*******************************)\r\n\r\nFor the CPython3.4 (truncated)\r\n\r\n    $ python3.4 python_modules_info.py\r\n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    54: &lt;class &#39;_frozen_importlib.BuiltinImporter&#39;&gt;\r\n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    _ast                           | built-in\r\n    _bisect                        | built-in\r\n    _codecs                        | built-in\r\n    _collections                   | built-in\r\n    _datetime                      | built-in\r\n    _elementtree                   | built-in\r\n    _functools                     | built-in\r\n    _heapq                         | built-in\r\n    _imp                           | None\r\n    _io                            | built-in\r\n    _locale                        | built-in\r\n    _md5                           | built-in\r\n    _operator                      | built-in\r\n    _pickle                        | built-in\r\n    _posixsubprocess               | built-in\r\n    _random                        | built-in\r\n    (****************************truncated*******************************)\r\n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    246: &lt;class &#39;_frozen_importlib.SourceFileLoader&#39;&gt;\r\n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    __future__                     | /usr/lib/python3.4/__future__.py\r\n    _bootlocale                    | /usr/lib/python3.4/_bootlocale.py\r\n    _collections_abc               | /usr/lib/python3.4/_collections_abc.py\r\n    _compat_pickle                 | /usr/lib/python3.4/_compat_pickle.py\r\n    _dummy_thread                  | /usr/lib/python3.4/_dummy_thread.py\r\n    _markupbase                    | /usr/lib/python3.4/_markupbase.py\r\n    _osx_support                   | /usr/lib/python3.4/_osx_support.py\r\n    _pyio                          | /usr/lib/python3.4/_pyio.py\r\n    (****************************truncated*******************************)\r\n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    44: &lt;class &#39;_frozen_importlib.ExtensionFileLoader&#39;&gt;\r\n    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    _bz2                           | /usr/lib/python3.4/lib-dynload/_bz2.cpython-34m-x86_64-linux-gnu.so\r\n    _codecs_cn                     | /usr/lib/python3.4/lib-dynload/_codecs_cn.cpython-34m-x86_64-linux-gnu.so\r\n    _codecs_hk                     | /usr/lib/python3.4/lib-dynload/_codecs_hk.cpython-34m-x86_64-linux-gnu.so\r\n    _codecs_iso2022                | /usr/lib/python3.4/lib-dynload/_codecs_iso2022.cpython-34m-x86_64-linux-gnu.so\r\n    _codecs_jp                     | /usr/lib/python3.4/lib-dynload/_codecs_jp.cpython-34m-x86_64-linux-gnu.so\r\n    _codecs_kr                     | /usr/lib/python3.4/lib-dynload/_codecs_kr.cpython-34m-x86_64-linux-gnu.so\r\n    _codecs_tw                     | /usr/lib/python3.4/lib-dynload/_codecs_tw.cpython-34m-x86_64-linux-gnu.so\r\n    _crypt                         | /usr/lib/python3.4/lib-dynload/_crypt.cpython-34m-x86_64-linux-gnu.so\r\n    (****************************truncated*******************************)\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/42673644/6003870\r\n  [2]: https://docs.python.org/3/library/importlib.html#importlib.machinery.BuiltinImporter\r\n  [3]: https://docs.python.org/3/library/importlib.html#importlib.machinery.SourceFileLoader\r\n  [4]: http://www.cprogramming.com/tutorial/shared-libraries-linux-gcc.html"}], "title": "How can I get a list of locally installed Python modules?", "view_count": 748152, "answer_count": 17, "code_snippet": ["<code>pip freeze</code>", "<code>import pip\ninstalled_packages = pip.get_installed_distributions()\ninstalled_packages_list = sorted([\"%s==%s\" % (i.key, i.version)\n     for i in installed_packages])\nprint(installed_packages_list)\n</code>", "<code>sorted([\"%s==%s\" % (i.key, i.version) for i in pip.get_installed_distributions()])\n</code>", "<code>['behave==1.2.4', 'enum34==1.0', 'flask==0.10.1', 'itsdangerous==0.24', \n 'jinja2==2.7.2', 'jsonschema==2.3.0', 'markupsafe==0.23', 'nose==1.3.3', \n 'parse-type==0.3.4', 'parse==1.6.4', 'prettytable==0.7.2', 'requests==2.3.0',\n 'six==1.6.1', 'vioozer-metadata==0.1', 'vioozer-users-server==0.1', \n 'werkzeug==0.9.4']\n</code>", "<code>setuptools</code>", "<code>pip</code>", "<code>easy_install</code>", "<code>http://example.com/exampleServer/environment</code>", "<code>setup.py</code>", "<code>setup.py</code>", "<code>$ cd /tmp\n$ virtualenv test_env\nNew python executable in test_env/bin/python\nInstalling setuptools, pip...done.\n$ source test_env/bin/activate\n(test_env) $ \n</code>", "<code>setup.py</code>", "<code>(test_env) $ git clone https://github.com/behave/behave.git\nCloning into 'behave'...\nremote: Reusing existing pack: 4350, done.\nremote: Total 4350 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (4350/4350), 1.85 MiB | 418.00 KiB/s, done.\nResolving deltas: 100% (2388/2388), done.\nChecking connectivity... done.\n</code>", "<code>setup.py</code>", "<code>/tmp/behave</code>", "<code>(test_env) $ ls /tmp/behave/setup.py\n/tmp/behave/setup.py\n</code>", "<code>(test_env) $ cd /tmp/behave &amp;&amp; python setup.py install\nrunning install\n...\nInstalled /private/tmp/test_env/lib/python2.7/site-packages/enum34-1.0-py2.7.egg\nFinished processing dependencies for behave==1.2.5a1\n</code>", "<code>/tmp</code>", "<code>&gt;&gt;&gt; import pip\n&gt;&gt;&gt; sorted([\"%s==%s\" % (i.key, i.version) for i in pip.get_installed_distributions()])\n['behave==1.2.5a1', 'enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1']\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.getcwd()\n'/private/tmp'\n</code>", "<code>/tmp/behave</code>", "<code>&gt;&gt;&gt; import pip\n&gt;&gt;&gt; sorted([\"%s==%s\" % (i.key, i.version) for i in pip.get_installed_distributions()])\n['enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1']\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.getcwd()\n'/private/tmp/behave'\n</code>", "<code>behave==1.2.5a1</code>", "<code>behave</code>", "<code>setup.py</code>", "<code>help('modules')\n</code>", "<code>pydoc modules</code>", "<code>pydoc modules</code>", "<code>pip freeze\n</code>", "<code>Fabric==0.9.3\napache-libcloud==0.4.0\nbzr==2.3b4\ndistribute==0.6.14\ndocutils==0.7\ngreenlet==0.3.1\nipython==0.10.1\niterpipes==0.4\nlibxml2-python==2.6.21\n</code>", "<code>ipython</code>", "<code>import</code>", "<code>help('modules')</code>", "<code>pydoc</code>", "<code>modules</code>", "<code>pkgutil.iter_modules()</code>", "<code>pkgutil.iter_modules()</code>", "<code>python -c 'import pkgutil;print [x[1] for x in list(pkgutil.iter_modules())]'</code>", "<code>x[1]</code>", "<code>pkgutil.iter_modules()</code>", "<code>pip list\n</code>", "<code>pip list --local</code>", "<code>virtualenv</code>", "<code>pydoc modules\n</code>", "<code>import sys as s\ns.modules.keys()\n</code>", "<code>s.modules\n</code>", "<code>pydoc</code>", "<code>pip</code>", "<code>&gt;&gt;help('modules package')\n</code>", "<code>pydoc -p 12345\n</code>", "<code>http://localhost:12345/</code>", "<code>from pkgutil import iter_modules\na=iter_modules()\nwhile True:\n    try: x=a.next()\n    except: break\n    if 'searchstr' in x[1]: print x[1]\n</code>", "<code>pip freeze</code>", "<code>sys.modules</code>", "<code>pip</code>", "<code>pip.get_installed_distributions()</code>", "<code>import pip\nfor package in pip.get_installed_distributions():\n    name = package.project_name # SQLAlchemy, Django, Flask-OAuthlib\n    key = package.key # sqlalchemy, django, flask-oauthlib\n    module_name = package._get_metadata(\"top_level.txt\") # sqlalchemy, django, flask_oauthlib\n    location = package.location # virtualenv lib directory etc.\n    version = package.version # version number\n</code>", "<code>/usr/bin/python</code>", "<code>sys.modules</code>", "<code>system.modules</code>", "<code>sys.modules</code>", "<code>c:\\python\\libs&gt;python -m pip freeze\n</code>", "<code>importlib</code>", "<code>pkgutil</code>", "<code>sys.builtin_module_names</code>", "<code>pkgutil.iter_modules()</code>", "<code>importlib.util.find_spec()</code>", "<code>BuiltinImporter</code>", "<code>SourceFileLoader</code>", "<code>ExtensionFileLoader</code>", "<code>import sys\nimport os\nimport shutil\nimport pkgutil\nimport importlib\nimport collections\n\nif sys.version_info.major == 2:\n    raise NotImplementedError('CPython 2 is not supported yet')\n\n\ndef main():\n\n    # name this file (module)\n    this_module_name = os.path.basename(__file__).rsplit('.')[0]\n\n    # dict for loaders with their modules\n    loaders = collections.OrderedDict()\n\n    # names`s of build-in modules\n    for module_name in sys.builtin_module_names:\n\n        # find an information about a module by name\n        module = importlib.util.find_spec(module_name)\n\n        # add a key about a loader in the dict, if not exists yet\n        if module.loader not in loaders:\n            loaders[module.loader] = []\n\n        # add a name and a location about imported module in the dict\n        loaders[module.loader].append((module.name, module.origin))\n\n    # all available non-build-in modules\n    for module_name in pkgutil.iter_modules():\n\n        # ignore this module\n        if this_module_name == module_name[1]:\n            continue\n\n        # find an information about a module by name\n        module = importlib.util.find_spec(module_name[1])\n\n        # add a key about a loader in the dict, if not exists yet\n        loader = type(module.loader)\n        if loader not in loaders:\n            loaders[loader] = []\n\n        # add a name and a location about imported module in the dict\n        loaders[loader].append((module.name, module.origin))\n\n    # pretty print\n    line = '-' * shutil.get_terminal_size().columns\n    for loader, modules in loaders.items():\n        print('{0}\\n{1}: {2}\\n{0}'.format(line, len(modules), loader))\n        for module in modules:\n            print('{0:30} | {1}'.format(module[0], module[1]))\n\n\nif __name__ == '__main__':\n    main()\n</code>", "<code>$ python3.5 python_modules_info.py \n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n30: &lt;class '_frozen_importlib.BuiltinImporter'&gt;\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n_ast                           | built-in\n_codecs                        | built-in\n_collections                   | built-in\n_functools                     | built-in\n_imp                           | None\n_io                            | built-in\n_locale                        | built-in\n_operator                      | built-in\n_signal                        | built-in\n_sre                           | built-in\n_stat                          | built-in\n_string                        | built-in\n_symtable                      | built-in\n_thread                        | built-in\n(****************************truncated*******************************)\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n227: &lt;class '_frozen_importlib_external.SourceFileLoader'&gt;\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n__future__                     | /usr/local/lib/python3.5/__future__.py\n_bootlocale                    | /usr/local/lib/python3.5/_bootlocale.py\n_collections_abc               | /usr/local/lib/python3.5/_collections_abc.py\n_compat_pickle                 | /usr/local/lib/python3.5/_compat_pickle.py\n_compression                   | /usr/local/lib/python3.5/_compression.py\n_dummy_thread                  | /usr/local/lib/python3.5/_dummy_thread.py\n_markupbase                    | /usr/local/lib/python3.5/_markupbase.py\n_osx_support                   | /usr/local/lib/python3.5/_osx_support.py\n_pydecimal                     | /usr/local/lib/python3.5/_pydecimal.py\n_pyio                          | /usr/local/lib/python3.5/_pyio.py\n_sitebuiltins                  | /usr/local/lib/python3.5/_sitebuiltins.py\n(****************************truncated*******************************)\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n64: &lt;class '_frozen_importlib_external.ExtensionFileLoader'&gt;\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n_bisect                        | /usr/local/lib/python3.5/lib-dynload/_bisect.cpython-35m-x86_64-linux-gnu.so\n_bz2                           | /usr/local/lib/python3.5/lib-dynload/_bz2.cpython-35m-x86_64-linux-gnu.so\n_codecs_cn                     | /usr/local/lib/python3.5/lib-dynload/_codecs_cn.cpython-35m-x86_64-linux-gnu.so\n_codecs_hk                     | /usr/local/lib/python3.5/lib-dynload/_codecs_hk.cpython-35m-x86_64-linux-gnu.so\n_codecs_iso2022                | /usr/local/lib/python3.5/lib-dynload/_codecs_iso2022.cpython-35m-x86_64-linux-gnu.so\n(****************************truncated*******************************)\n</code>", "<code>$ python3.4 python_modules_info.py\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n54: &lt;class '_frozen_importlib.BuiltinImporter'&gt;\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n_ast                           | built-in\n_bisect                        | built-in\n_codecs                        | built-in\n_collections                   | built-in\n_datetime                      | built-in\n_elementtree                   | built-in\n_functools                     | built-in\n_heapq                         | built-in\n_imp                           | None\n_io                            | built-in\n_locale                        | built-in\n_md5                           | built-in\n_operator                      | built-in\n_pickle                        | built-in\n_posixsubprocess               | built-in\n_random                        | built-in\n(****************************truncated*******************************)\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n246: &lt;class '_frozen_importlib.SourceFileLoader'&gt;\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n__future__                     | /usr/lib/python3.4/__future__.py\n_bootlocale                    | /usr/lib/python3.4/_bootlocale.py\n_collections_abc               | /usr/lib/python3.4/_collections_abc.py\n_compat_pickle                 | /usr/lib/python3.4/_compat_pickle.py\n_dummy_thread                  | /usr/lib/python3.4/_dummy_thread.py\n_markupbase                    | /usr/lib/python3.4/_markupbase.py\n_osx_support                   | /usr/lib/python3.4/_osx_support.py\n_pyio                          | /usr/lib/python3.4/_pyio.py\n(****************************truncated*******************************)\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n44: &lt;class '_frozen_importlib.ExtensionFileLoader'&gt;\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n_bz2                           | /usr/lib/python3.4/lib-dynload/_bz2.cpython-34m-x86_64-linux-gnu.so\n_codecs_cn                     | /usr/lib/python3.4/lib-dynload/_codecs_cn.cpython-34m-x86_64-linux-gnu.so\n_codecs_hk                     | /usr/lib/python3.4/lib-dynload/_codecs_hk.cpython-34m-x86_64-linux-gnu.so\n_codecs_iso2022                | /usr/lib/python3.4/lib-dynload/_codecs_iso2022.cpython-34m-x86_64-linux-gnu.so\n_codecs_jp                     | /usr/lib/python3.4/lib-dynload/_codecs_jp.cpython-34m-x86_64-linux-gnu.so\n_codecs_kr                     | /usr/lib/python3.4/lib-dynload/_codecs_kr.cpython-34m-x86_64-linux-gnu.so\n_codecs_tw                     | /usr/lib/python3.4/lib-dynload/_codecs_tw.cpython-34m-x86_64-linux-gnu.so\n_crypt                         | /usr/lib/python3.4/lib-dynload/_crypt.cpython-34m-x86_64-linux-gnu.so\n(****************************truncated*******************************)\n</code>", "<code>pip</code>", "<code>pip.get_installed_distributions()</code>", "<code>**truncated**</code>", "<code>$conda list\n</code>", "<code>conda install</code>", "<code>&gt;&gt;&gt; import site; site.getsitepackages()\n['/usr/local/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages']\n</code>", "<code>ls site-packages\n</code>", "<code>import sys\nimport os\nfor p in sys.path:\n    print os.listdir( p )\n</code>"], "path": "stack.django"}, {"tags": ["django", "nginx", "fastcgi", "error-log"], "creation_date": 1257836965, "body_markdown": "I&#39;m using django with fastcgi + nginx. I want to know where the logs (error) are stored in this case", "last_edit_date": 1446653279, "up_vote_count": 221, "link": "https://stackoverflow.com/questions/1706111/where-can-i-find-the-error-logs-of-nginx-using-fastcgi-and-django", "_childDocuments_": [{"tags": [], "down_vote_count": 5, "creation_date": 1257852608, "answer_id": 1707300, "path": "stack.django.answer", "score": 291, "up_vote_count": 296, "is_accepted": true, "last_activity_date": 1257852608, "body_markdown": "errors are stored in nginx log file. you can specify it in root of nginx config file.\r\n\r\n    error_log  /var/log/nginx/nginx_error.log  warn;\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1378026652, "answer_id": 18556928, "path": "stack.django.answer", "score": 237, "up_vote_count": 239, "is_accepted": false, "last_activity_date": 1402586743, "last_edit_date": 1402586743, "body_markdown": "I was looking for a different solution. \r\n\r\nError logs, by default, before any config is set, on my system (x86 Arch), was found in:\r\n\r\n    /var/log/nginx/error.log\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1418219086, "answer_id": 27402568, "path": "stack.django.answer", "score": 18, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1466096173, "last_edit_date": 1466096173, "body_markdown": "My ngninx logs are located here:\r\n\r\n    /usr/local/var/log/nginx/*\r\n\r\nYou can also check your `nginx.conf` to see if you have any directives dumping to custom log. \r\n\r\nrun `nginx -t` to locate your `nginx.conf`. \r\n\r\n    # in ngingx.conf\r\n    error_log  /usr/local/var/log/nginx/error.log;\r\n    error_log  /usr/local/var/log/nginx/error.log  notice;\r\n    error_log  /usr/local/var/log/nginx/error.log  info;\r\n\r\n\r\nNginx is usually set up in `/usr/local` or `/etc/`. The server could be configured to dump logs to `/var/log` as well. \r\n\r\nIf you have an alternate location for your nginx install and all else fails, you could use the `find` command to locate your file of choice.\r\n\r\n`find /usr/ -path &quot;*/nginx/*&quot; -type f -name &#39;*.log&#39;`, where `/usr/` is the folder you wish to start searching from."}, {"tags": [], "down_vote_count": 0, "creation_date": 1418227606, "answer_id": 27405591, "path": "stack.django.answer", "score": 98, "up_vote_count": 98, "is_accepted": false, "last_activity_date": 1519342675, "last_edit_date": 1519342675, "body_markdown": "You can use `lsof` (list of open files) in most cases to find open log files without knowing the configuration.\r\n\r\n**Example:**\r\n\r\nFind the PID of httpd (same concept applies for nginx and other programs):\r\n\r\n    $ ps aux | grep httpd\r\n    ...\r\n    root     17970  0.0  0.3 495964 64388 ?        Ssl  Oct29   3:45 /usr/sbin/httpd\r\n    ...\r\n\r\nThen search for open log files using `lsof` with the PID:\r\n\r\n    $ lsof -p 17970 | grep log\r\n    httpd   17970 root    2w   REG             253,15     2278      6723 /var/log/httpd/error_log\r\n    httpd   17970 root   12w   REG             253,15        0      1387 /var/log/httpd/access_log\r\n\r\nIf `lsof` prints nothing, even though you expected the log files to be found, issue the same command using `sudo`.\r\n\r\nYou can read a little more [here][1].\r\n\r\n\r\n  [1]: http://slash4.net/blog/howto/find-log-file-location-of-linux-process-with-lsof.html"}, {"tags": [], "down_vote_count": 2, "creation_date": 1433830349, "answer_id": 30724234, "path": "stack.django.answer", "score": 2, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1433840064, "last_edit_date": 1433840064, "body_markdown": "    cd /var/log/nginx/\r\n    cat error.log"}, {"tags": [], "down_vote_count": 1, "creation_date": 1444059472, "answer_id": 32952461, "path": "stack.django.answer", "score": 46, "up_vote_count": 47, "is_accepted": false, "last_activity_date": 1519342685, "last_edit_date": 1519342685, "body_markdown": "   Run this command, to check error logs:\r\n\r\n    tail -f /var/log/nginx/error.log"}, {"tags": [], "down_vote_count": 0, "creation_date": 1515045915, "answer_id": 48089567, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1515045915, "body_markdown": "type in terminal \r\nsudo cat  /var/log/nginx/error.log"}, {"tags": [], "down_vote_count": 0, "creation_date": 1517516915, "answer_id": 48571197, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1517516915, "body_markdown": "I&#39;m with [MarthyM][1]. by default in Ubuntu, both the `access.log` and `error.log` are in `/var/log/nginx/`. But you can change them in  `/etc/nginx/nginx.conf` or `/etc/nginx/sites-available/your-site-file`.\r\n\r\n\r\n  [1]: https://stackoverflow.com/users/4846659/marthym"}], "title": "Where can I find the error logs of nginx, using fastcgi and django", "view_count": 329701, "answer_count": 8, "code_snippet": ["<code>error_log  /var/log/nginx/nginx_error.log  warn;\n</code>", "<code>/opt/nginx/logs/error.log</code>", "<code>/var/log/nginx/error.log</code>", "<code>nginx.conf</code>", "<code>error_log</code>", "<code>/var/log/nginx/error.log\n</code>", "<code>--error-log-path</code>", "<code>lsof</code>", "<code>$ ps aux | grep httpd\n...\nroot     17970  0.0  0.3 495964 64388 ?        Ssl  Oct29   3:45 /usr/sbin/httpd\n...\n</code>", "<code>lsof</code>", "<code>$ lsof -p 17970 | grep log\nhttpd   17970 root    2w   REG             253,15     2278      6723 /var/log/httpd/error_log\nhttpd   17970 root   12w   REG             253,15        0      1387 /var/log/httpd/access_log\n</code>", "<code>lsof</code>", "<code>sudo</code>", "<code>tail -f /var/log/nginx/error.log\n</code>", "<code>/usr/local/var/log/nginx/*\n</code>", "<code>nginx.conf</code>", "<code>nginx -t</code>", "<code>nginx.conf</code>", "<code># in ngingx.conf\nerror_log  /usr/local/var/log/nginx/error.log;\nerror_log  /usr/local/var/log/nginx/error.log  notice;\nerror_log  /usr/local/var/log/nginx/error.log  info;\n</code>", "<code>/usr/local</code>", "<code>/etc/</code>", "<code>/var/log</code>", "<code>find</code>", "<code>find /usr/ -path \"*/nginx/*\" -type f -name '*.log'</code>", "<code>/usr/</code>", "<code>cd /var/log/nginx/\ncat error.log\n</code>", "<code>access.log</code>", "<code>error.log</code>", "<code>/var/log/nginx/</code>", "<code>/etc/nginx/nginx.conf</code>", "<code>/etc/nginx/sites-available/your-site-file</code>"], "path": "stack.django"}, {"tags": ["python", "performance", "profiling", "time-complexity"], "creation_date": 1235491286, "body_markdown": "Project Euler and other coding contests often have a maximum time to run or people boast of how fast their particular solution runs.  With python, sometimes the approaches are somewhat kludgey - i.e., adding timing code to `__main__`.\r\n\r\nWhat is a good way to profile how long a python program takes to run?", "last_edit_date": 1498228716, "up_vote_count": 915, "link": "https://stackoverflow.com/questions/582336/how-can-you-profile-a-script", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1235491300, "answer_id": 582337, "path": "stack.django.answer", "score": 985, "up_vote_count": 986, "is_accepted": true, "last_activity_date": 1515617157, "last_edit_date": 1515617157, "body_markdown": "Python includes a profiler called [cProfile][1]. It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations.\r\n\r\nYou can call it from within your code, or from the interpreter, like this:\r\n\r\n    import cProfile\r\n    cProfile.run(&#39;foo()&#39;)\r\n\r\nEven more usefully, you can invoke the cProfile when running a script:\r\n\r\n    python -m cProfile myscript.py\r\n\r\nTo make it even easier, I made a little batch file called &#39;profile.bat&#39;:\r\n\r\n    python -m cProfile %1\r\n\r\nSo all I have to do is run:\r\n\r\n    profile euler048.py\r\n\r\nAnd I get this:\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    1007 function calls in 0.061 CPU seconds\r\n    \r\n    Ordered by: standard name\r\n    ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    0.061    0.061 &lt;string&gt;:1(&lt;module&gt;)\r\n     1000    0.051    0.000    0.051    0.000 euler048.py:2(&lt;lambda&gt;)\r\n        1    0.005    0.005    0.061    0.061 euler048.py:2(&lt;module&gt;)\r\n        1    0.000    0.000    0.061    0.061 {execfile}\r\n        1    0.002    0.002    0.053    0.053 {map}\r\n        1    0.000    0.000    0.000    0.000 {method &#39;disable&#39; of &#39;_lsprof.Profiler objects}\r\n        1    0.000    0.000    0.000    0.000 {range}\r\n        1    0.003    0.003    0.003    0.003 {sum}\r\n\r\nEDIT: Updated link to a good video resource from PyCon 2013 titled \r\n[**_Python Profiling_**](http://lanyrd.com/2013/pycon/scdywg/).\r\n\r\n\r\n  [1]: https://docs.python.org/3/library/profile.html#module-cProfile"}, {"tags": [], "down_vote_count": 0, "creation_date": 1235507470, "answer_id": 583452, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1509384492, "last_edit_date": 1509384492, "body_markdown": "In Virtaal&#39;s [source][1] there&#39;s a very useful class and decorator that can make profiling (even for specific methods/functions) very easy. The output can then be viewed very comfortably in KCacheGrind.\r\n\r\n\r\n  [1]: https://github.com/translate/virtaal/blob/master/devsupport/profiling.py"}, {"tags": [], "down_vote_count": 0, "creation_date": 1261067434, "answer_id": 1922945, "path": "stack.django.answer", "score": 162, "up_vote_count": 162, "is_accepted": false, "last_activity_date": 1394902913, "last_edit_date": 1394902913, "body_markdown": "It&#39;s worth pointing out that using the profiler only works (by default) on the main thread, and you won&#39;t get any information from other threads if you use them.  This can be a bit of a gotcha as it is completely unmentioned in the [profiler documentation][1].\r\n\r\nIf you also want to profile threads, you&#39;ll want to look at the [`threading.setprofile()` function][2] in the docs.\r\n\r\nYou could also create your own `threading.Thread` subclass to do it:\r\n\r\n    class ProfiledThread(threading.Thread):\r\n        # Overrides threading.Thread.run()\r\n        def run(self):\r\n            profiler = cProfile.Profile()\r\n            try:\r\n                return profiler.runcall(threading.Thread.run, self)\r\n            finally:\r\n                profiler.dump_stats(&#39;myprofile-%d.profile&#39; % (self.ident,))\r\n\r\nand use that `ProfiledThread` class instead of the standard one.  It might give you more flexibility, but I&#39;m not sure it&#39;s worth it, especially if you are using third-party code which wouldn&#39;t use your class.\r\n\r\n\r\n  [1]: http://docs.python.org/library/profile.html\r\n  [2]: http://docs.python.org/library/threading.html#threading.setprofile &quot;threading.setprofile() function&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1318032252, "answer_id": 7693928, "path": "stack.django.answer", "score": 123, "up_vote_count": 123, "is_accepted": false, "last_activity_date": 1420424204, "last_edit_date": 1420424204, "body_markdown": "The python wiki is a great page for profiling resources:\r\nhttp://wiki.python.org/moin/PythonSpeed/PerformanceTips#Profiling_Code\r\n\r\nas is the python docs:\r\nhttp://docs.python.org/library/profile.html\r\n\r\nas shown by Chris Lawlor cProfile is a great tool and can easily be used to print to the screen:\r\n\r\n    python -m cProfile -s time mine.py &lt;args&gt;\r\n\r\nor to file:\r\n\r\n    python -m cProfile -o output.file mine.py &lt;args&gt;\r\n\r\nPS&gt; If you are using Ubuntu, make sure to install python-profile\r\n\r\n    sudo apt-get install python-profiler \r\n\r\nIf you output to file you can get nice visualizations using the following tools\r\n\r\nPyCallGraph : a tool to create call graph images &lt;br&gt;\r\n  install:&lt;br&gt;\r\n\r\n     sudo pip install pycallgraph\r\n \r\n  run:\r\n\r\n     pycallgraph mine.py args\r\n\r\n  view:\r\n\r\n     gimp pycallgraph.png\r\n\r\n*You can use whatever you like to view the png file, I used gimp*&lt;br&gt;\r\nUnfortunately I often get \r\n\r\n   dot: graph is too large for cairo-renderer bitmaps. Scaling by 0.257079 to fit\r\n\r\nwhich makes my images unusably small.  So I generally create svg files:\r\n\r\n    pycallgraph -f svg -o pycallgraph.svg mine.py &lt;args&gt;\r\n\r\n\r\nPS&gt; make sure to install graphviz (which provides the dot program):\r\n\r\n    sudo pip install graphviz\r\n\r\nAlternative Graphing using gprof2dot via @maxy / @quodlibetor :\r\n\r\n    sudo pip install gprof2dot\r\n    python -m cProfile -o profile.pstats mine.py\r\n    gprof2dot -f pstats profile.pstats | dot -Tsvg -o mine.svg\r\n\r\n "}, {"tags": [], "down_vote_count": 0, "creation_date": 1319126734, "answer_id": 7838845, "path": "stack.django.answer", "score": 26, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1319126734, "body_markdown": "A nice profiling module is the line_profiler (called using the script kernprof.py).  It can be downloaded [here][1].\r\n\r\nMy understanding is that cProfile only gives information about total time spent in each function.  So individual lines of code are not timed.  This is an issue in scientific computing since often one single line can take a lot of time.  Also, as I remember, cProfile didn&#39;t catch the time I was spending in say numpy.dot.\r\n\r\n  [1]: http://packages.python.org/line_profiler/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1320843544, "answer_id": 8065384, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1320843544, "body_markdown": "Following Joe Shaw&#39;s answer about multi-threaded code not to work as expected, I figured that the `runcall` method in cProfile is merely doing `self.enable()` and `self.disable()` calls around the profiled function call, so you can simply do that yourself and have whatever code you want in-between with minimal interference with existing code."}, {"tags": [], "down_vote_count": 2, "creation_date": 1344231427, "answer_id": 11822995, "path": "stack.django.answer", "score": 335, "up_vote_count": 337, "is_accepted": false, "last_activity_date": 1447869275, "last_edit_date": 1447869275, "body_markdown": "A while ago I made [`pycallgraph`][1] which generates a visualisation from your Python code. **Edit:** I&#39;ve updated the example to work with the latest release.\r\n\r\nAfter a `pip install pycallgraph` and installing [GraphViz][gv] you can run it from the command line:\r\n\r\n    pycallgraph graphviz -- ./mypythonscript.py\r\n\r\nOr, you can profile particular parts of your code:\r\n\r\n    from pycallgraph import PyCallGraph\r\n    from pycallgraph.output import GraphvizOutput\r\n    \r\n    with PyCallGraph(output=GraphvizOutput()):\r\n        code_to_profile()\r\n\r\nEither of these will generate a `pycallgraph.png` file similar to the image below:\r\n\r\n![enter image description here][2]\r\n\r\n  [1]: http://pycallgraph.slowchop.com/\r\n  [2]: http://i.stack.imgur.com/aiNEA.png\r\n  [gv]: http://www.graphviz.org/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1350141682, "answer_id": 12874474, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1350917535, "last_edit_date": 1350917535, "body_markdown": "&gt; Ever want to know what the hell that python script is doing? Enter the\r\n&gt; Inspect Shell. Inspect Shell lets you print/alter globals and run\r\n&gt; functions without interrupting the running script. Now with\r\n&gt; auto-complete and command history (only on linux).\r\n&gt; \r\n&gt; Inspect Shell is not a pdb-style debugger.\r\n\r\nhttps://github.com/amoffat/Inspect-Shell\r\n\r\nYou could use that (and your wristwatch)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1355267799, "answer_id": 13830132, "path": "stack.django.answer", "score": 113, "up_vote_count": 113, "is_accepted": false, "last_activity_date": 1467822255, "last_edit_date": 1495542403, "body_markdown": "@Maxy&#39;s comment on [this answer](https://stackoverflow.com/a/7693928/25616) helped me out enough that I think it deserves its own answer: I already had cProfile-generated .pstats files and I didn&#39;t want to re-run things with pycallgraph, so I used [gprof2dot](http://code.google.com/p/jrfonseca/wiki/Gprof2Dot), and got pretty svgs:\r\n\r\n    $ sudo apt-get install graphviz\r\n    $ git clone https://github.com/jrfonseca/gprof2dot\r\n    $ ln -s &quot;$PWD&quot;/gprof2dot/gprof2dot.py ~/bin\r\n    $ cd $PROJECT_DIR\r\n    $ gprof2dot.py -f pstats profile.pstats | dot -Tsvg -o callgraph.svg\r\n\r\nand BLAM!\r\n\r\nIt uses dot (the same thing that pycallgraph uses) so output looks similar. I get the impression that gprof2dot loses less information though:\r\n\r\n![gprof2dot example output][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/JjSvt.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1392824338, "answer_id": 21885286, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1392824734, "last_edit_date": 1392824734, "body_markdown": "My way is to use yappi ([https://code.google.com/p/yappi/][1]). It&#39;s especially useful combined with an RPC server where (even just for debugging) you register method to start, stop and print profiling information, e.g. in this way: \r\n\r\n    @staticmethod\r\n    def startProfiler():\r\n        yappi.start()\r\n\r\n    @staticmethod\r\n    def stopProfiler():\r\n        yappi.stop()\r\n\r\n    @staticmethod\r\n    def printProfiler():\r\n        stats = yappi.get_stats(yappi.SORTTYPE_TTOT, yappi.SORTORDER_DESC, 20)\r\n        statPrint = &#39;\\n&#39;\r\n        namesArr = [len(str(stat[0])) for stat in stats.func_stats]\r\n        log.debug(&quot;namesArr %s&quot;, str(namesArr))\r\n        maxNameLen = max(namesArr)\r\n        log.debug(&quot;maxNameLen: %s&quot;, maxNameLen)\r\n\r\n        for stat in stats.func_stats:\r\n            nameAppendSpaces = [&#39; &#39; for i in range(maxNameLen - len(stat[0]))]\r\n            log.debug(&#39;nameAppendSpaces: %s&#39;, nameAppendSpaces)\r\n            blankSpace = &#39;&#39;\r\n            for space in nameAppendSpaces:\r\n                blankSpace += space\r\n\r\n            log.debug(&quot;adding spaces: %s&quot;, len(nameAppendSpaces))\r\n            statPrint = statPrint + str(stat[0]) + blankSpace + &quot; &quot; + str(stat[1]).ljust(8) + &quot;\\t&quot; + str(\r\n                round(stat[2], 2)).ljust(8 - len(str(stat[2]))) + &quot;\\t&quot; + str(round(stat[3], 2)) + &quot;\\n&quot;\r\n\r\n        log.log(1000, &quot;\\nname&quot; + &#39;&#39;.ljust(maxNameLen - 4) + &quot; ncall \\tttot \\ttsub&quot;)\r\n        log.log(1000, statPrint)\r\n\r\n\r\nThen when your program work you can start profiler at any time by calling the `startProfiler` RPC method and dump profiling information to a log file by calling `printProfiler` (or modify the rpc method to return it to the caller) and get such output:\r\n\r\n    2014-02-19 16:32:24,128-|SVR-MAIN  |-(Thread-3   )-Level 1000: \r\n    name                                                                                                                                      ncall \tttot \ttsub\r\n    2014-02-19 16:32:24,128-|SVR-MAIN  |-(Thread-3   )-Level 1000: \r\n    C:\\Python27\\lib\\sched.py.run:80                                                                                                           22      \t0.11\t0.05\r\n    M:\\02_documents\\_repos\\09_aheadRepos\\apps\\ahdModbusSrv\\pyAheadRpcSrv\\xmlRpc.py.iterFnc:293                                                22      \t0.11\t0.0\r\n    M:\\02_documents\\_repos\\09_aheadRepos\\apps\\ahdModbusSrv\\serverMain.py.makeIteration:515                                                    22      \t0.11\t0.0\r\n    M:\\02_documents\\_repos\\09_aheadRepos\\apps\\ahdModbusSrv\\pyAheadRpcSrv\\PicklingXMLRPC.py._dispatch:66                                       1       \t0.0  \t0.0\r\n    C:\\Python27\\lib\\BaseHTTPServer.py.date_time_string:464                                                                                    1       \t0.0  \t0.0\r\n    c:\\users\\zasiec~1\\appdata\\local\\temp\\easy_install-hwcsr1\\psutil-1.1.2-py2.7-win32.egg.tmp\\psutil\\_psmswindows.py._get_raw_meminfo:243     4       \t0.0  \t0.0\r\n    C:\\Python27\\lib\\SimpleXMLRPCServer.py.decode_request_content:537                                                                          1       \t0.0  \t0.0\r\n    c:\\users\\zasiec~1\\appdata\\local\\temp\\easy_install-hwcsr1\\psutil-1.1.2-py2.7-win32.egg.tmp\\psutil\\_psmswindows.py.get_system_cpu_times:148 4       \t0.0  \t0.0\r\n    &lt;string&gt;.__new__:8                                                                                                                        220     \t0.0  \t0.0\r\n    C:\\Python27\\lib\\socket.py.close:276                                                                                                       4       \t0.0  \t0.0\r\n    C:\\Python27\\lib\\threading.py.__init__:558                                                                                                 1       \t0.0  \t0.0\r\n    &lt;string&gt;.__new__:8                                                                                                                        4       \t0.0  \t0.0\r\n    C:\\Python27\\lib\\threading.py.notify:372                                                                                                   1       \t0.0  \t0.0\r\n    C:\\Python27\\lib\\rfc822.py.getheader:285                                                                                                   4       \t0.0  \t0.0\r\n    C:\\Python27\\lib\\BaseHTTPServer.py.handle_one_request:301                                                                                  1       \t0.0  \t0.0\r\n    C:\\Python27\\lib\\xmlrpclib.py.end:816                                                                                                      3       \t0.0  \t0.0\r\n    C:\\Python27\\lib\\SimpleXMLRPCServer.py.do_POST:467                                                                                         1       \t0.0  \t0.0\r\n    C:\\Python27\\lib\\SimpleXMLRPCServer.py.is_rpc_path_valid:460                                                                               1       \t0.0  \t0.0\r\n    C:\\Python27\\lib\\SocketServer.py.close_request:475                                                                                         1       \t0.0  \t0.0\r\n    c:\\users\\zasiec~1\\appdata\\local\\temp\\easy_install-hwcsr1\\psutil-1.1.2-py2.7-win32.egg.tmp\\psutil\\__init__.py.cpu_times:1066               4       \t0.0  \t0.0 \r\n\r\nIt may not be very useful for short scripts but helps to optimize server-type processes especially given the `printProfiler` method can be called multiple times over time to profile and compare e.g. different program usage scenarios. \r\n\r\n  \r\n\r\n  [1]: https://code.google.com/p/yappi/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1424621885, "answer_id": 28660109, "path": "stack.django.answer", "score": 32, "up_vote_count": 32, "is_accepted": false, "last_activity_date": 1424887125, "last_edit_date": 1424887125, "body_markdown": "Also worth mentioning is the GUI cProfile dump viewer [RunSnakeRun][1].  It allows you to sort and select, thereby zooming in on the relevant parts of the program.  The sizes of the rectangles in the picture is proportional to the time taken.  If you mouse over a rectangle it highlights that call in the table and everywhere on the map.  When you double-click on a rectangle it zooms in on that portion.  It will show you who calls that portion and what that portion calls.\r\n\r\nThe descriptive information is very helpful.  It shows you the code for that bit which can be helpful when you are dealing with built-in library calls.  It tells you what file and what line to find the code.\r\n\r\nAlso want to point at that the OP said &#39;profiling&#39; but it appears he meant &#39;timing&#39;.  Keep in mind programs will run slower when profiled.\r\n\r\n![enter image description here][2]\r\n\r\n\r\n  [1]: http://www.vrplumber.com/programming/runsnakerun/\r\n  [2]: http://i.stack.imgur.com/2GahD.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1425296207, "answer_id": 28808860, "path": "stack.django.answer", "score": 27, "up_vote_count": 27, "is_accepted": false, "last_activity_date": 1463957298, "last_edit_date": 1463957298, "body_markdown": "# pprofile\r\n\r\n`line_profiler` (already presented here) also inspired  [`pprofile`](https://github.com/vpelletier/pprofile), which is described as:\r\n\r\n&gt; Line-granularity, thread-aware deterministic and statistic pure-python\r\n&gt; profiler\r\n\r\nIt provides line-granularity as `line_profiler`, is pure Python, can be used as a standalone command or a module, and can even generate callgrind-format files that can be easily analyzed with `[k|q]cachegrind`.\r\n\r\n# vprof\r\n\r\nThere is also [vprof](https://github.com/nvdv/vprof), a Python package described as:\r\n\r\n&gt; [...] providing rich and interactive visualizations for various Python program characteristics such as running time and memory usage.\r\n\r\n\r\n[![heatmap][1]][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/uafO3.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1426945812, "answer_id": 29183471, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1426945812, "last_edit_date": 1495539212, "body_markdown": "To add on to https://stackoverflow.com/a/582337/1070617,\r\n\r\nI wrote this module that allows you to use cProfile and view its output easily. More here: https://github.com/ymichael/cprofilev\r\n\r\n    $ python -m cprofilev /your/python/program\r\n    # Go to http://localhost:4000 to view collected statistics.\r\n\r\nAlso see: http://ymichael.com/2014/03/08/profiling-python-with-cprofile.html on how to make sense of the collected statistics."}, {"tags": [], "down_vote_count": 0, "creation_date": 1427713873, "answer_id": 29344687, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1427713873, "body_markdown": "cProfile is great for quick profiling but most of the time it was ending for me with the errors. Function runctx solves this problem by initializing correctly the environment and variables, hope it can be useful for someone:\r\n\r\n    import cProfile\r\n    cProfile.runctx(&#39;foo()&#39;, None, locals())"}, {"tags": [], "down_vote_count": 0, "creation_date": 1430261408, "answer_id": 29931325, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1430261408, "body_markdown": "A new tool to handle profiling in Python is PyVmMonitor: http://www.pyvmmonitor.com/\r\n\r\nIt has some unique features such as\r\n\r\n- Attach profiler to a running (CPython) program\r\n- On demand profiling with Yappi integration\r\n- Profile on a different machine\r\n- Multiple processes support (multiprocessing, django...)\r\n- Live sampling/CPU view (with time range selection)\r\n- Deterministic profiling through cProfile/profile integration\r\n- Analyze existing PStats results\r\n- Open DOT files\r\n- Programatic API access\r\n- Group samples by method or line\r\n- PyDev integration\r\n- PyCharm integration\r\n\r\nNote: it&#39;s commercial, but free for open source."}, {"tags": [], "down_vote_count": 0, "creation_date": 1440158383, "answer_id": 32139774, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1440158383, "body_markdown": "There&#39;s a lot of great answers but they either use command line or some external program for profiling and/or sorting the results.\r\n\r\nI really missed some way I could use in my IDE (eclipse-PyDev) without touching the command line or installing anything. So here it is.\r\n\r\n#Profiling without command line\r\n\r\n    def count():\r\n        from math import sqrt\r\n        for x in range(10**5):\r\n            sqrt(x)\r\n    \r\n    if __name__ == &#39;__main__&#39;:\r\n        import cProfile, pstats\r\n        cProfile.run(&quot;count()&quot;, &quot;{}.profile&quot;.format(__file__))\r\n        s = pstats.Stats(&quot;{}.profile&quot;.format(__file__))\r\n        s.strip_dirs()\r\n        s.sort_stats(&quot;time&quot;).print_stats(10)\r\n\r\nSee [docs][1] or other answers for more info.\r\n\r\n\r\n  [1]: https://docs.python.org/3.4/library/profile.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1455231049, "answer_id": 35351674, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1460327234, "last_edit_date": 1495540056, "body_markdown": "There&#39;s also a statistical profiler called [`statprof`][1]. It&#39;s a sampling profiler, so it adds minimal overhead to your code and gives line-based (not just function-based) timings. It&#39;s more suited to soft real-time applications like games, but may be have less precision than cProfile.\r\n\r\nThe [version in pypi][1] is a bit old, so can install it with `pip` by specifying [the git repository][2]:\r\n\r\n    pip install git+git://github.com/bos/statprof.py@1a33eba91899afe17a8b752c6dfdec6f05dd0c01\r\n\r\nYou can run it like this:\r\n\r\n    import statprof\r\n\r\n    with statprof.profile():\r\n        my_questionable_function()\r\n\r\nSee also https://stackoverflow.com/a/10333592/320036\r\n\r\n\r\n  [1]: https://pypi.python.org/pypi/statprof/\r\n  [2]: https://github.com/bos/statprof.py"}, {"tags": [], "down_vote_count": 0, "creation_date": 1462955570, "answer_id": 37157132, "path": "stack.django.answer", "score": 25, "up_vote_count": 25, "is_accepted": false, "last_activity_date": 1510845118, "last_edit_date": 1510845118, "body_markdown": "I think that [`cProfile`][1] is great for profiling, while [`kcachegrind`][2] is great for visualizing the results. The [`pyprof2calltree`][3] in between handles the file conversion.\r\n\r\n    python -m cProfile -o script.profile script.py\r\n    pyprof2calltree -i script.profile -o script.calltree\r\n    kcachegrind script.calltree\r\n\r\nTo install the required tools (on Ubuntu, at least):\r\n\r\n    apt-get install kcachegrind\r\n    pip install pyprof2calltree\r\n\r\nThe result:\r\n\r\n[![Screenshot of the result][4]][4]\r\n\r\n\r\n  [1]: https://docs.python.org/2/library/profile.html\r\n  [2]: https://kcachegrind.github.io/html/Home.html\r\n  [3]: https://pypi.python.org/pypi/pyprof2calltree\r\n  [4]: https://i.stack.imgur.com/1TFZe.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1464163573, "answer_id": 37431235, "path": "stack.django.answer", "score": 32, "up_vote_count": 32, "is_accepted": false, "last_activity_date": 1464163573, "body_markdown": "I ran into a handy tool called [SnakeViz][1] when researching this topic. SnakeViz is a web-based profiling visualization tool. It is very easy to install and use. The usual way I use it is to generate a stat file with `%prun` and then do analysis in SnakeViz.\r\n\r\nThe main viz technique used is **Sunburst chart** as shown below, in which the hierarchy of function calls is arranged as layers of arcs and time info encoded in their angular widths.\r\n\r\nThe best thing is you can interact with the chart. For example, to zoom in one can click on an arc, and the arc and its descendants will be enlarged as a new sunburst to display more details.\r\n\r\n[![enter image description here][2]][2]\r\n\r\n\r\n  [1]: https://jiffyclub.github.io/snakeviz/\r\n  [2]: http://i.stack.imgur.com/kCmSY.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1486030721, "answer_id": 41999525, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1486030721, "body_markdown": "When i&#39;m not root on the server, I use \r\n[lsprofcalltree.py][1] and run my program like this:\r\n\r\n    python lsprofcalltree.py -o callgrind.1 test.py\r\n\r\nThen I can open the report with any callgrind-compatible software, like [qcachegrind][2]\r\n\r\n\r\n  [1]: https://people.gnome.org/~johan/lsprofcalltree.py\r\n  [2]: https://sourceforge.net/projects/qcachegrindwin/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1492630952, "answer_id": 43504738, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1510069369, "last_edit_date": 1510069369, "body_markdown": "It would depend on what you want to see out of profiling. Simple time \r\nmetrics can be given by (bash). \r\n\r\n    time python python_prog.py\r\n\r\nEven &#39;/usr/bin/time&#39; can output detailed metrics by using &#39;--verbose&#39; flag.\r\n\r\nTo check time metrics given by each function and to better understand how much time is spent on functions, you can use the inbuilt cProfile in python. \r\n\r\nGoing into more detailed metrics like performance, time is not the only metric. You can worry about memory, threads etc.   \r\nProfiling options:  \r\n1. **line_profiler** is another profiler used commonly to find out timing metrics line-by-line.  \r\n2. **memory_profiler** is a tool to profile memory usage.  \r\n3. **heapy (from project Guppy)** Profile how objects in the heap are used. \r\n\r\nThese are some of the common ones I tend to use. But if you want to find out more, try reading this [book][1]\r\nIt is a pretty good book on starting out with performance in mind. You can move onto advanced topics on using Cython and JIT(Just-in-time) compiled python. \r\n\r\n\r\n  [1]: http://shop.oreilly.com/product/0636920028963.do"}], "title": "How can you profile a script?", "view_count": 331270, "answer_count": 21, "code_snippet": ["<code>__main__</code>", "<code>time</code>", "<code>import cProfile\ncProfile.run('foo()')\n</code>", "<code>python -m cProfile myscript.py\n</code>", "<code>python -m cProfile %1\n</code>", "<code>profile euler048.py\n</code>", "<code>1007 function calls in 0.061 CPU seconds\n\nOrdered by: standard name\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    1    0.000    0.000    0.061    0.061 &lt;string&gt;:1(&lt;module&gt;)\n 1000    0.051    0.000    0.051    0.000 euler048.py:2(&lt;lambda&gt;)\n    1    0.005    0.005    0.061    0.061 euler048.py:2(&lt;module&gt;)\n    1    0.000    0.000    0.061    0.061 {execfile}\n    1    0.002    0.002    0.053    0.053 {map}\n    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler objects}\n    1    0.000    0.000    0.000    0.000 {range}\n    1    0.003    0.003    0.003    0.003 {sum}\n</code>", "<code>python -m cProfile -o &lt;out.profile&gt; &lt;script&gt;</code>", "<code>runsnake &lt;out.profile&gt;</code>", "<code>cprofile</code>", "<code>profile</code>", "<code>pycallgraph</code>", "<code>pip install pycallgraph</code>", "<code>pycallgraph graphviz -- ./mypythonscript.py\n</code>", "<code>from pycallgraph import PyCallGraph\nfrom pycallgraph.output import GraphvizOutput\n\nwith PyCallGraph(output=GraphvizOutput()):\n    code_to_profile()\n</code>", "<code>pycallgraph.png</code>", "<code>apt-get install graphviz</code>", "<code>Traceback (most recent call last): /pycallgraph.py\", line 90, in generate     output.done()   File \"/net_downloaded/pycallgraph-develop/pycallgraph/output/graphviz.py\", line 94, in done     source = self.generate()   File \"/net_downloaded/pycallgraph-develop/pycallgraph/output/graphviz.py\", line 143, in generate     indent_join.join(self.generate_attributes()),   File \"/net_downloaded/pycallgraph-develop/pycallgraph/output/graphviz.py\", line 169, in generate_attributes     section, self.attrs_from_dict(attrs), ValueError: zero length field name in format</code>", "<code>sudo apt-get install graphviz</code>", "<code>threading.setprofile()</code>", "<code>threading.Thread</code>", "<code>class ProfiledThread(threading.Thread):\n    # Overrides threading.Thread.run()\n    def run(self):\n        profiler = cProfile.Profile()\n        try:\n            return profiler.runcall(threading.Thread.run, self)\n        finally:\n            profiler.dump_stats('myprofile-%d.profile' % (self.ident,))\n</code>", "<code>ProfiledThread</code>", "<code>target</code>", "<code>threading.Thread.run()</code>", "<code>threading.setprofile()</code>", "<code>python -m cProfile -s time mine.py &lt;args&gt;\n</code>", "<code>python -m cProfile -o output.file mine.py &lt;args&gt;\n</code>", "<code>sudo apt-get install python-profiler \n</code>", "<code> sudo pip install pycallgraph\n</code>", "<code> pycallgraph mine.py args\n</code>", "<code> gimp pycallgraph.png\n</code>", "<code>pycallgraph -f svg -o pycallgraph.svg mine.py &lt;args&gt;\n</code>", "<code>sudo pip install graphviz\n</code>", "<code>sudo pip install gprof2dot\npython -m cProfile -o profile.pstats mine.py\ngprof2dot -f pstats profile.pstats | dot -Tsvg -o mine.svg\n</code>", "<code>sudo apt-get install gprof2dot</code>", "<code>E: Unable to locate package gprof2dot</code>", "<code>sudo pip install gprof2dot</code>", "<code>apt-get</code>", "<code>pip install</code>", "<code>pip install</code>", "<code>apt-get install</code>", "<code>$ sudo apt-get install graphviz\n$ git clone https://github.com/jrfonseca/gprof2dot\n$ ln -s \"$PWD\"/gprof2dot/gprof2dot.py ~/bin\n$ cd $PROJECT_DIR\n$ gprof2dot.py -f pstats profile.pstats | dot -Tsvg -o callgraph.svg\n</code>", "<code>pwd</code>", "<code>ln</code>", "<code>%prun</code>", "<code>line_profiler</code>", "<code>pprofile</code>", "<code>line_profiler</code>", "<code>[k|q]cachegrind</code>", "<code>cProfile</code>", "<code>kcachegrind</code>", "<code>pyprof2calltree</code>", "<code>python -m cProfile -o script.profile script.py\npyprof2calltree -i script.profile -o script.calltree\nkcachegrind script.calltree\n</code>", "<code>apt-get install kcachegrind\npip install pyprof2calltree\n</code>", "<code>brew install qcachegrind</code>", "<code>kcachegrind</code>", "<code>qcachegrind </code>", "<code>runcall</code>", "<code>self.enable()</code>", "<code>self.disable()</code>", "<code>cprofile.py</code>", "<code>runcall()</code>", "<code>prof = cprofile.Profile()</code>", "<code>prof.disable()</code>", "<code>prof.enable()</code>", "<code>prof.disable()</code>", "<code>def count():\n    from math import sqrt\n    for x in range(10**5):\n        sqrt(x)\n\nif __name__ == '__main__':\n    import cProfile, pstats\n    cProfile.run(\"count()\", \"{}.profile\".format(__file__))\n    s = pstats.Stats(\"{}.profile\".format(__file__))\n    s.strip_dirs()\n    s.sort_stats(\"time\").print_stats(10)\n</code>", "<code>import cProfile\ncProfile.runctx('foo()', None, locals())\n</code>", "<code>@staticmethod\ndef startProfiler():\n    yappi.start()\n\n@staticmethod\ndef stopProfiler():\n    yappi.stop()\n\n@staticmethod\ndef printProfiler():\n    stats = yappi.get_stats(yappi.SORTTYPE_TTOT, yappi.SORTORDER_DESC, 20)\n    statPrint = '\\n'\n    namesArr = [len(str(stat[0])) for stat in stats.func_stats]\n    log.debug(\"namesArr %s\", str(namesArr))\n    maxNameLen = max(namesArr)\n    log.debug(\"maxNameLen: %s\", maxNameLen)\n\n    for stat in stats.func_stats:\n        nameAppendSpaces = [' ' for i in range(maxNameLen - len(stat[0]))]\n        log.debug('nameAppendSpaces: %s', nameAppendSpaces)\n        blankSpace = ''\n        for space in nameAppendSpaces:\n            blankSpace += space\n\n        log.debug(\"adding spaces: %s\", len(nameAppendSpaces))\n        statPrint = statPrint + str(stat[0]) + blankSpace + \" \" + str(stat[1]).ljust(8) + \"\\t\" + str(\n            round(stat[2], 2)).ljust(8 - len(str(stat[2]))) + \"\\t\" + str(round(stat[3], 2)) + \"\\n\"\n\n    log.log(1000, \"\\nname\" + ''.ljust(maxNameLen - 4) + \" ncall \\tttot \\ttsub\")\n    log.log(1000, statPrint)\n</code>", "<code>startProfiler</code>", "<code>printProfiler</code>", "<code>2014-02-19 16:32:24,128-|SVR-MAIN  |-(Thread-3   )-Level 1000: \nname                                                                                                                                      ncall     ttot    tsub\n2014-02-19 16:32:24,128-|SVR-MAIN  |-(Thread-3   )-Level 1000: \nC:\\Python27\\lib\\sched.py.run:80                                                                                                           22        0.11    0.05\nM:\\02_documents\\_repos\\09_aheadRepos\\apps\\ahdModbusSrv\\pyAheadRpcSrv\\xmlRpc.py.iterFnc:293                                                22        0.11    0.0\nM:\\02_documents\\_repos\\09_aheadRepos\\apps\\ahdModbusSrv\\serverMain.py.makeIteration:515                                                    22        0.11    0.0\nM:\\02_documents\\_repos\\09_aheadRepos\\apps\\ahdModbusSrv\\pyAheadRpcSrv\\PicklingXMLRPC.py._dispatch:66                                       1         0.0     0.0\nC:\\Python27\\lib\\BaseHTTPServer.py.date_time_string:464                                                                                    1         0.0     0.0\nc:\\users\\zasiec~1\\appdata\\local\\temp\\easy_install-hwcsr1\\psutil-1.1.2-py2.7-win32.egg.tmp\\psutil\\_psmswindows.py._get_raw_meminfo:243     4         0.0     0.0\nC:\\Python27\\lib\\SimpleXMLRPCServer.py.decode_request_content:537                                                                          1         0.0     0.0\nc:\\users\\zasiec~1\\appdata\\local\\temp\\easy_install-hwcsr1\\psutil-1.1.2-py2.7-win32.egg.tmp\\psutil\\_psmswindows.py.get_system_cpu_times:148 4         0.0     0.0\n&lt;string&gt;.__new__:8                                                                                                                        220       0.0     0.0\nC:\\Python27\\lib\\socket.py.close:276                                                                                                       4         0.0     0.0\nC:\\Python27\\lib\\threading.py.__init__:558                                                                                                 1         0.0     0.0\n&lt;string&gt;.__new__:8                                                                                                                        4         0.0     0.0\nC:\\Python27\\lib\\threading.py.notify:372                                                                                                   1         0.0     0.0\nC:\\Python27\\lib\\rfc822.py.getheader:285                                                                                                   4         0.0     0.0\nC:\\Python27\\lib\\BaseHTTPServer.py.handle_one_request:301                                                                                  1         0.0     0.0\nC:\\Python27\\lib\\xmlrpclib.py.end:816                                                                                                      3         0.0     0.0\nC:\\Python27\\lib\\SimpleXMLRPCServer.py.do_POST:467                                                                                         1         0.0     0.0\nC:\\Python27\\lib\\SimpleXMLRPCServer.py.is_rpc_path_valid:460                                                                               1         0.0     0.0\nC:\\Python27\\lib\\SocketServer.py.close_request:475                                                                                         1         0.0     0.0\nc:\\users\\zasiec~1\\appdata\\local\\temp\\easy_install-hwcsr1\\psutil-1.1.2-py2.7-win32.egg.tmp\\psutil\\__init__.py.cpu_times:1066               4         0.0     0.0 \n</code>", "<code>printProfiler</code>", "<code>$ python -m cprofilev /your/python/program\n# Go to http://localhost:4000 to view collected statistics.\n</code>", "<code>statprof</code>", "<code>pip</code>", "<code>pip install git+git://github.com/bos/statprof.py@1a33eba91899afe17a8b752c6dfdec6f05dd0c01\n</code>", "<code>import statprof\n\nwith statprof.profile():\n    my_questionable_function()\n</code>", "<code>time python python_prog.py\n</code>", "<code>python lsprofcalltree.py -o callgrind.1 test.py\n</code>"], "path": "stack.django"}, {"tags": ["bash", "alias"], "creation_date": 1313842301, "body_markdown": "I used to use CShell ([tag:csh]), which lets you make an alias that takes a parameter. The notation was something like\r\n    \r\n    alias junk=&quot;mv \\\\!* ~/.Trash&quot;\r\n\r\nIn Bash, this does not seem to work. Given that Bash has a multitude of useful features, I would assume that this one has been implemented but I am wondering how.\r\n", "last_edit_date": 1488396720, "up_vote_count": 772, "link": "https://stackoverflow.com/questions/7131670/make-a-bash-alias-that-takes-a-parameter", "_childDocuments_": [{"tags": [], "down_vote_count": 3, "creation_date": 1313842504, "answer_id": 7131683, "path": "stack.django.answer", "score": 1364, "up_vote_count": 1367, "is_accepted": true, "last_activity_date": 1492279989, "last_edit_date": 1492279989, "body_markdown": "Bash alias does not directly accept parameters. You will have to create a function and alias that.\r\n\r\n`alias` does not accept parameters but a function can be called just like an alias. For example:\r\n\r\n    myfunction() {\r\n        #do things with parameters like $1 such as\r\n        mv &quot;$1&quot; &quot;$1.bak&quot;\r\n        cp &quot;$2&quot; &quot;$1&quot;\r\n    }\r\n\r\n\r\n    myFunction xyz #calls `myfunction`\r\n\r\nBy the way, Bash functions defined in your `.bashrc` and other files are available as commands within your shell. So for instance you can call the earlier function like this \r\n\r\n    $ myfunction original.conf my.conf"}, {"tags": [], "down_vote_count": 0, "creation_date": 1400082412, "answer_id": 23659385, "path": "stack.django.answer", "score": 122, "up_vote_count": 122, "is_accepted": false, "last_activity_date": 1400083813, "last_edit_date": 1400083813, "body_markdown": "Refining the answer above, you can get 1-line syntax like you can for aliases, which is more convenient for ad-hoc definitions in a shell or .bashrc files:\r\n\r\n    bash$ myfunction() { mv &quot;$1&quot; &quot;$1.bak&quot;; cp &quot;$2&quot; &quot;$1&quot;; }\r\n    \r\n    bash$ myfunction original.conf my.conf\r\n\r\nDon&#39;t forget the semi-colon before the closing right-bracket. Similarly, for the actual question:\r\n\r\n    csh% alias junk=&quot;mv \\\\!* ~/.Trash&quot;\r\n    \r\n    bash$ junk() { mv &quot;$@&quot; ~/.Trash/; }\r\n\r\nOr:\r\n\r\n    bash$ junk() { for item in &quot;$@&quot; ; do echo &quot;Trashing: $item&quot; ; mv &quot;$item&quot; ~/.Trash/; done; }"}, {"tags": [], "down_vote_count": 2, "creation_date": 1421121439, "answer_id": 27914640, "path": "stack.django.answer", "score": 5, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1421450645, "last_edit_date": 1495540503, "body_markdown": "Here&#39;s are three examples of functions I have in my `~/.bashrc`, that are *essentially* aliases that accept a parameter:\r\n\r\n    #Utility required by all below functions.\r\n    #https://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-bash-variable#comment21953456_3232433\r\n    alias trim=&quot;sed -e &#39;s/^[[:space:]]*//g&#39; -e &#39;s/[[:space:]]*\\$//g&#39;&quot;\r\n\r\n.\r\n\r\n    :&lt;&lt;COMMENT\r\n    \tAlias function for recursive deletion, with are-you-sure prompt.\r\n\r\n    \tExample:\r\n    \t\tsrf /home/myusername/django_files/rest_tutorial/rest_venv/\r\n\r\n    \tParameter is required, and must be at least one non-whitespace character.\r\n\r\n    \tShort description: Stored in SRF_DESC\r\n\r\n    \tWith the following setting, this is *not* added to the history:\r\n    \t\texport HISTIGNORE=&quot;*rm -r*:srf *&quot;\r\n    \t- https://superuser.com/questions/232885/can-you-share-wisdom-on-using-histignore-in-bash\r\n\r\n    \tSee:\r\n    \t- y/n prompt: https://stackoverflow.com/a/3232082/2736496\r\n    \t- Alias w/param: https://stackoverflow.com/a/7131683/2736496\r\n    COMMENT\r\n    #SRF_DESC: For &quot;aliaf&quot; command (with an &#39;f&#39;). Must end with a newline.\r\n    SRF_DESC=&quot;srf [path]: Recursive deletion, with y/n prompt\\n&quot;\r\n    srf()  {\r\n    \t#Exit if no parameter is provided (if it&#39;s the empty string)\r\n    \t\tparam=$(echo &quot;$1&quot; | trim)\r\n    \t\techo &quot;$param&quot;\r\n    \t\tif [ -z &quot;$param&quot; ]  #http://tldp.org/LDP/abs/html/comparison-ops.html\r\n    \t\tthen\r\n    \t\t  echo &quot;Required parameter missing. Cancelled&quot;; return\r\n    \t\tfi\r\n\r\n    \t#Actual line-breaks required in order to expand the variable.\r\n    \t#- https://stackoverflow.com/a/4296147/2736496\r\n    \tread -r -p &quot;About to\r\n    \tsudo rm -rf \\&quot;$param\\&quot;\r\n    Are you sure? [y/N] &quot; response\r\n    \tresponse=${response,,}    # tolower\r\n    \tif [[ $response =~ ^(yes|y)$ ]]\r\n    \tthen\r\n    \t\tsudo rm -rf &quot;$param&quot;\r\n    \telse\r\n    \t\techo &quot;Cancelled.&quot;\r\n    \tfi\r\n    }\r\n\r\n.\r\n\r\n    :&lt;&lt;COMMENT\r\n    \tDelete item from history based on its line number. No prompt.\r\n\r\n    \tShort description: Stored in HX_DESC\r\n\r\n    \tExamples\r\n    \t\thx 112\r\n    \t\thx 3\r\n\r\n    \tSee:\r\n    \t- https://unix.stackexchange.com/questions/57924/how-to-delete-commands-in-history-matching-a-given-string\r\n    COMMENT\r\n    #HX_DESC: For &quot;aliaf&quot; command (with an &#39;f&#39;). Must end with a newline.\r\n    HX_DESC=&quot;hx [linenum]: Delete history item at line number\\n&quot;\r\n    hx()  {\r\n    \thistory -d &quot;$1&quot;\r\n    }\r\n\r\n.\r\n\r\n    :&lt;&lt;COMMENT\r\n    \tDeletes all lines from the history that match a search string, with a\r\n    \tprompt. The history file is then reloaded into memory.\r\n\r\n    \tShort description: Stored in HXF_DESC\r\n\r\n    \tExamples\r\n    \t\thxf &quot;rm -rf&quot;\r\n    \t\thxf ^source\r\n\r\n    \tParameter is required, and must be at least one non-whitespace character.\r\n\r\n    \tWith the following setting, this is *not* added to the history:\r\n    \t\texport HISTIGNORE=&quot;*hxf *&quot;\r\n    \t- https://superuser.com/questions/232885/can-you-share-wisdom-on-using-histignore-in-bash\r\n\r\n    \tSee:\r\n    \t- https://unix.stackexchange.com/questions/57924/how-to-delete-commands-in-history-matching-a-given-string\r\n    COMMENT\r\n    #HXF_DESC: For &quot;aliaf&quot; command (with an &#39;f&#39;). Must end with a newline.\r\n    HXF_DESC=&quot;hxf [searchterm]: Delete all history items matching search term, with y/n prompt\\n&quot;\r\n    hxf()  {\r\n    \t#Exit if no parameter is provided (if it&#39;s the empty string)\r\n    \t\tparam=$(echo &quot;$1&quot; | trim)\r\n    \t\techo &quot;$param&quot;\r\n    \t\tif [ -z &quot;$param&quot; ]  #http://tldp.org/LDP/abs/html/comparison-ops.html\r\n    \t\tthen\r\n    \t\t  echo &quot;Required parameter missing. Cancelled&quot;; return\r\n    \t\tfi\r\n\r\n    \tread -r -p &quot;About to delete all items from history that match \\&quot;$param\\&quot;. Are you sure? [y/N] &quot; response\r\n    \tresponse=${response,,}    # tolower\r\n    \tif [[ $response =~ ^(yes|y)$ ]]\r\n    \tthen\r\n    \t\t#Delete all matched items from the file, and duplicate it to a temp\r\n    \t\t#location.\r\n    \t\tgrep -v &quot;$param&quot; &quot;$HISTFILE&quot; &gt; /tmp/history\r\n\r\n    \t\t#Clear all items in the current sessions history (in memory). This\r\n    \t\t#empties out $HISTFILE.\r\n    \t\thistory -c\r\n\r\n    \t\t#Overwrite the actual history file with the temp one.\r\n    \t\tmv /tmp/history &quot;$HISTFILE&quot;\r\n\r\n    \t\t#Now reload it.\r\n    \t\thistory -r &quot;$HISTFILE&quot;     #Alternative: exec bash\r\n    \telse\r\n    \t\techo &quot;Cancelled.&quot;\r\n    \tfi\r\n    }\r\n\r\nReferences:\r\n\r\n- **Trimming whitespace from strings:** https://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-bash-variable#comment21953456_3232433\r\n- **Actual line breaks:** https://stackoverflow.com/a/4296147/2736496\r\n- **Alias w/param:** https://stackoverflow.com/a/7131683/2736496  *(another answer in this question)*\r\n- **HISTIGNORE:** https://superuser.com/questions/232885/can-you-share-wisdom-on-using-histignore-in-bash\r\n- **Y/N prompt:** https://stackoverflow.com/a/3232082/2736496\r\n- **Delete all matching items from history:** https://unix.stackexchange.com/questions/57924/how-to-delete-commands-in-history-matching-a-given-string\r\n- **Is string null/empty:** http://tldp.org/LDP/abs/html/comparison-ops.html\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1432147177, "answer_id": 30357877, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1432213728, "last_edit_date": 1432213728, "body_markdown": "NB: In case the idea isn&#39;t obvious, it is a bad idea to use aliases for anything but aliases, the first one being the &#39;function in an alias&#39; and the second one being the &#39;hard to read redirect/source&#39;. Also, there are flaws (which i *thought* would be obvious, but just in case you are confused: I do not mean them to actually be used... anywhere!)\r\n\r\n................................................................................................................................................\r\n\r\nI&#39;ve answered this before, and it has always been like this in the past:\r\n\r\n    alias foo=&#39;__foo() { unset -f $0; echo &quot;arg1 for foo=$1&quot;; }; __foo()&#39;\r\n\r\nwhich is fine and good, unless you are avoiding the use of functions all together. in which case you can take advantage of bash&#39;s vast ability to redirect text:\r\n\r\n    alias bar=&#39;cat &lt;&lt;&lt; &#39;\\&#39;&#39;echo arg1 for bar=$1&#39;\\&#39;&#39; | source /dev/stdin&#39;\r\n\r\nThey are both about the same length give or take a few characters. \r\n\r\n   The *real* kicker is the time difference, the top being the &#39;function method&#39; and the bottom being the &#39;redirect-source&#39; method. To prove this theory, the timing speaks for itself:\r\n\r\n    arg1 for foo=FOOVALUE\r\n     real 0m0.011s user 0m0.004s sys 0m0.008s  # &lt;--time spent in foo\r\n     real 0m0.000s user 0m0.000s sys 0m0.000s  # &lt;--time spent in bar\r\n    arg1 for bar=BARVALUE\r\n    ubuntu@localhost /usr/bin# time foo FOOVALUE; time bar BARVALUE\r\n    arg1 for foo=FOOVALUE\r\n     real 0m0.010s user 0m0.004s sys 0m0.004s\r\n     real 0m0.000s user 0m0.000s sys 0m0.000s\r\n    arg1 for bar=BARVALUE\r\n    ubuntu@localhost /usr/bin# time foo FOOVALUE; time bar BARVALUE\r\n    arg1 for foo=FOOVALUE\r\n     real 0m0.011s user 0m0.000s sys 0m0.012s\r\n     real 0m0.000s user 0m0.000s sys 0m0.000s\r\n    arg1 for bar=BARVALUE\r\n    ubuntu@localhost /usr/bin# time foo FOOVALUE; time bar BARVALUE\r\n    arg1 for foo=FOOVALUE\r\n     real 0m0.012s user 0m0.004s sys 0m0.004s\r\n     real 0m0.000s user 0m0.000s sys 0m0.000s\r\n    arg1 for bar=BARVALUE\r\n    ubuntu@localhost /usr/bin# time foo FOOVALUE; time bar BARVALUE\r\n    arg1 for foo=FOOVALUE\r\n     real 0m0.010s user 0m0.008s sys 0m0.004s\r\n     real 0m0.000s user 0m0.000s sys 0m0.000s\r\n    arg1 for bar=BARVALUE\r\n\r\nThis is the bottom part of about 200 results, done at random intervals. It seems that function creation/destruction takes more time than redirection. Hopefully this will help future visitors to this question (didn&#39;t want to keep it to myself)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1432298383, "answer_id": 30396973, "path": "stack.django.answer", "score": 26, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1432301064, "last_edit_date": 1432301064, "body_markdown": "An alternative solution is to use [marker][1], a tool I&#39;ve created recently that allows you to &quot;bookmark&quot; command templates and easily place cursor at command place-holders:  \r\n\r\n![commandline marker][2]\r\n\r\nI found that most of time, I&#39;m using shell functions so I don&#39;t have to write frequently used commands again and again in the command-line. The issue of using functions for this use case, is adding new terms to my command vocabulary and having to remember what functions parameters refer to in the real-command. Marker goal is to eliminate that mental burden.\r\n\r\n\r\n  [1]: https://github.com/pindexis/marker\r\n  [2]: http://i.stack.imgur.com/0fyiS.gif"}, {"tags": [], "down_vote_count": 3, "creation_date": 1440881686, "answer_id": 32290579, "path": "stack.django.answer", "score": 1, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1440881686, "body_markdown": "If you&#39;re looking for a generic way to apply all params to a function, not just one or two or some other hardcoded amount, you can do that this way:\r\n\r\n\r\n    #!/usr/bin/env bash\r\n    \r\n    # you would want to `source` this file, maybe in your .bash_profile?\r\n    function runjar_fn(){\r\n    \tjava -jar myjar.jar &quot;$@&quot;;\r\n    }\r\n    \r\n    alias runjar=runjar_fn;\r\n\r\nSo in the example above, i pass all parameters from when i run `runjar` to the alias.\r\n\r\nFor example, if i did `runjar hi there` it would end up actually running `java -jar myjar.jar hi there`. If i did `runjar one two three` it would  run `java -jar myjar.jar one two three`.\r\n\r\nI like this `$@` - based solution because it works with any number of params. \r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1452234930, "answer_id": 34670873, "path": "stack.django.answer", "score": 63, "up_vote_count": 65, "is_accepted": false, "last_activity_date": 1502341872, "last_edit_date": 1502341872, "body_markdown": "The question is simply asked wrong.  You don&#39;t make an alias that takes parameters because `alias` just adds a second name for something that already exists.  The functionality the OP wants is the `function` command to create a new function.  You do not need to alias the function as the function already has a name.\r\n\r\nI think you want something like this :\r\n\r\n    function trash() { mv &quot;$@&quot; ~/.Trash; }\r\n\r\nThat&#39;s it!  You can use parameters $1, $2, $3, etc, or just stuff them all with $@\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1458382758, "answer_id": 36100444, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1458382758, "body_markdown": "Functions are indeed almost always the answer as already amply contributed and confirmed by this quote from the man page: _&quot;For almost every purpose, aliases are superseded by shell functions.&quot;_\r\n\r\nFor completeness and because this can be useful (marginally more lightweight syntax) it could be noted that when the parameter(s) follow the alias, they can still be used (although this wouldn&#39;t address the OP&#39;s requirement).  This is probably easiest to demonstrate with an example:\r\n\r\n    alias ssh_disc=&#39;ssh -O stop&#39;\r\n\r\nallows me to type smth like `ssh_disc myhost`, which gets expanded as expected as: `ssh -O stop myhost` \r\n\r\nThis can be useful for commands which take complex arguments (my memory isn&#39;t what it use t be anymore...)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1469697337, "answer_id": 38632027, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1469697337, "body_markdown": "For taking parameters, you should use functions!\r\n\r\nHowever $@ get interpreted when creating the alias instead of during the execution of the alias and escaping the $ doesn\u2019t work either. How do I solve this problem?\r\n\r\nYou need to use shell function instead of an alias to get rid of this problem. You can define foo as follows:\r\n\r\n    function foo() { /path/to/command &quot;$@&quot; ;}\r\n\r\nOR\r\n\r\n    foo() { /path/to/command &quot;$@&quot; ;}\r\n\r\nFinally, call your foo() using the following syntax:\r\n\r\n    foo arg1 arg2 argN\r\n\r\nMake sure you add your foo() to `~/.bash_profile` or `~/.zshrc` file.\r\n\r\nIn your case, this will work\r\n\r\n    function trash() { mv $@ ~/.Trash; }"}, {"tags": [], "down_vote_count": 1, "creation_date": 1488098455, "answer_id": 42466441, "path": "stack.django.answer", "score": 43, "up_vote_count": 44, "is_accepted": false, "last_activity_date": 1495508571, "last_edit_date": 1495508571, "body_markdown": "## TL;DR: Do this instead\r\nIts far easier and more readable  to use a function than an alias to put arguments in the middle of a command. \r\n\r\n    $ wrap_args() { echo &quot;before $@ after&quot;; }\r\n    $ wrap_args 1 2 3\r\n    before 1 2 3 after\r\n\r\nIf you read on, you&#39;ll learn things that you don&#39;t need to know about shell argument processing. Knowledge is dangerous. Just get the outcome you want, before the dark side forever controls your destiny.\r\n\r\n##Clarification\r\n`bash` aliases *do* accept arguments, but only at the *end*:\r\n\r\n    $ alias speak=echo\r\n    $ speak hello world\r\n    hello world\r\n\r\nPutting arguments into the *middle* of command via `alias` is indeed possible but it gets ugly.\r\n\r\n## Don&#39;t try this at home, kiddies!\r\n\r\nIf you like circumventing limitations and doing what others say is impossible, here&#39;s the recipe. Just don&#39;t blame me if your hair gets frazzled and your face ends up covered in soot mad-scientist-style.\r\n\r\nThe workaround is to pass the arguments that `alias` accepts only at the end to a wrapper that will insert them in the middle and then execute your command.\r\n\r\n###Solution 1\r\n\r\nIf you&#39;re really against using a function per se, you can use:\r\n\r\n    $ alias wrap_args=&#39;f(){ echo before &quot;$@&quot; after;  unset -f f; }; f&#39;\r\n    $ wrap_args x y z\r\n    before x y z after\r\n\r\nYou can replace `$@` with `$1` if you only want the first argument.\r\n\r\n**Explanation 1**\r\n\r\nThis creates a temporary function `f`, which is passed the arguments (note that `f` is called at the very end). The `unset -f` removes the function definition as the alias is executed so it doesn&#39;t hang around afterwards.\r\n\r\n###Solution 2\r\n\r\nYou can also use a subshell:\r\n\r\n    $ alias wrap_args=&#39;sh -c &#39;\\&#39;&#39;echo before &quot;$@&quot; after&#39;\\&#39;&#39; _&#39;\r\n\r\n**Explanation 2**\r\n\r\nThe alias builds a command like:\r\n\r\n    sh -c &#39;echo before &quot;$@&quot; after&#39; _\r\n\r\nComments: \r\n\r\n * The placeholder `_` is required, but it could be anything. It gets set to `sh`&#39;s `$0`, and is required so that the first of the user-given arguments don&#39;t get consumed. Demonstration:\r\n\r\n        sh -c &#39;echo Consumed: &quot;$0&quot; Printing: &quot;$@&quot;&#39; alcohol drunken babble\r\n        Consumed: alcohol Printing: drunken babble\r\n\r\n * The single-quotes inside single-quotes are required. Here&#39;s an example of it not working with double quotes:\r\n\r\n        $ sh -c &quot;echo Consumed: $0 Printing: $@&quot; alcohol drunken babble\r\n        Consumed: -bash Printing:\r\n\r\n    Here the values of the interactive shell&#39;s `$0` and `$@` are replaced into the double quoted *before* it is passed to `sh`. Here&#39;s proof:\r\n\r\n        echo &quot;Consumed: $0 Printing: $@&quot;\r\n        Consumed: -bash Printing:\r\n\r\n    The single quotes ensure that these variables are not interpreted by interactive shell, and are passed literally to `sh -c`.\r\n    \r\n    You could use double-quotes and `\\$@`, but best practice is to quote your arguments (as they may contain spaces), and `\\&quot;\\$@\\&quot;` looks even uglier, but may help you win an obfuscation contest where frazzled hair is a prerequisite for entry."}, {"tags": [], "down_vote_count": 0, "creation_date": 1508348133, "answer_id": 46816035, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1508348529, "last_edit_date": 1508348529, "body_markdown": "There are legitimate technical reasons to want a generalized solution to the problem of bash alias not having a mechanism to take a reposition arbitrary arguments.  One reason is if the command you wish to execute would be adversely affected by the changes to the environment that result from executing a function.  In all *other* cases, functions should be used.\r\n\r\nWhat recently compelled me to attempt a solution to this is that I wanted to create some abbreviated commands for printing the definitions of variables and functions.  So I wrote some functions for that purpose.  However, there are certain variables which are (or may be) changed by a function call itself.  Among them are:\r\n\r\nFUNCNAME\r\nBASH_SOURCE\r\nBASH_LINENO\r\nBASH_ARGC\r\nBASH_ARGV\r\n\r\nThe basic command I had been using (in a function) to print variable defns. in the form output by the set command was:\r\n\r\n    sv () { set | grep --color=never -- &quot;^$1=.*&quot;; }\r\n\r\nE.g.:\r\n\r\n    &gt; V=voodoo\r\n    sv V\r\n    V=voodoo\r\n\r\nProblem:  This won&#39;t print the definitions of the variables mentioned above as they are in the *current context*, e.g., if in an interactive shell prompt (or not in any function calls), FUNCNAME isn&#39;t defined.  But my function tells me the wrong information:\r\n\r\n    &gt; sv FUNCNAME\r\n    FUNCNAME=([0]=&quot;sv&quot;)\r\n\r\nOne solution I came up with has been mentioned by others in other posts on this topic.  For this specific command to print variable defns., and which requires only one argument, I did this:\r\n\r\n    alias asv=&#39;(grep -- &quot;^$(cat -)=.*&quot; &lt;(set)) &lt;&lt;&lt;&#39;\r\n\r\nWhich gives the correct output (none), and result status (false):\r\n\r\n    &gt; asv FUNCNAME\r\n    &gt; echo $?\r\n    1\r\n\r\nHowever, I still felt compelled to find a solution that works for arbitrary numbers of arguments.\r\n\r\n**A General Solution To Passing Arbitrary Arguments To A Bash Aliased Command:**\r\n\r\n    # (I put this code in a file &quot;alias-arg.sh&quot;):\r\n\r\n    # cmd [arg1 ...] \u2013 an experimental command that optionally takes args,\r\n    # which are printed as &quot;cmd(arg1 ...)&quot;\r\n    #\r\n    # Also sets global variable &quot;CMD_DONE&quot; to &quot;true&quot;.\r\n    #\r\n    cmd () { echo &quot;cmd($@)&quot;; declare -g CMD_DONE=true; }\r\n\r\n    # Now set up an alias &quot;ac2&quot; that passes to cmd two arguments placed\r\n    # after the alias, but passes them to cmd with their order reversed:\r\n    #\r\n    # ac2 cmd_arg2 cmd_arg1 \u2013 calls &quot;cmd&quot; as: &quot;cmd cmd_arg1 cmd_arg2&quot;\r\n    #\r\n    alias ac2=&#39;\r\n        # Set up cmd to be execed after f() finishes:\r\n        #\r\n        trap &#39;\\&#39;&#39;cmd &quot;${CMD_ARGV[1]}&quot; &quot;${CMD_ARGV[0]}&quot;&#39;\\&#39;&#39; SIGUSR1;\r\n        #        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n        #       (^This is the actually execed command^)\r\n        #\r\n        # f [arg0 arg1 ...] \u2013 acquires args and sets up trap to run cmd:\r\n        f () {\r\n            declare -ag CMD_ARGV=(&quot;$@&quot;);  # array to give args to cmd\r\n            kill -SIGUSR1 $$;             # this causes cmd to be run\r\n            trap SIGUSR1;                 # unset the trap for SIGUSR1\r\n            unset CMD_ARGV;               # clean up env...\r\n            unset f;                      # incl. this function!\r\n        };\r\n        f&#39;  # Finally, exec f, which will receive the args following &quot;ac2&quot;.\r\n\r\nE.g.:\r\n\r\n    &gt; . alias-arg.sh\r\n    &gt; ac2 one two\r\n    cmd(two one)\r\n    &gt;\r\n    &gt; # Check to see that command run via trap affects this environment:\r\n    &gt; asv CMD_DONE\r\n    CMD_DONE=true\r\n\r\nA nice thing about this solution is that all the special tricks used to handle positional parameters (arguments) to commands will work when composing the trapped command.  The only difference is that array syntax must be used.\r\n\r\nE.g.,\r\n\r\nIf you want &quot;$@&quot;, use &quot;${CMD_ARGV[@]}&quot;.\r\n\r\nIf you want &quot;$#&quot;, use &quot;${#CMD_ARGV[@]}&quot;.\r\n\r\nEtc.\r\n"}, {"tags": [], "down_vote_count": 3, "creation_date": 1510285483, "answer_id": 47215343, "path": "stack.django.answer", "score": -1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1510285483, "body_markdown": "You however don&#39;t need functions when creating aliases in `.bashrc` file.\r\nFor example\r\n\r\n    # create an alias that takes port-number by the user\r\n    alias serve=&quot;python -m SimpleHTTPServer $1&quot;\r\n\r\nAfter making the change in the .bashrc file, make sure you enter the following command.\r\n\r\n    ~$ source .bashrc\r\n\r\nYou should be able to use this like so\r\n\r\n    ~$ serve 8998"}], "title": "Make a Bash alias that takes a parameter?", "view_count": 292380, "answer_count": 12, "code_snippet": ["<code>alias junk=\"mv \\\\!* ~/.Trash\"\n</code>", "<code>\"$1\"</code>", "<code>ls</code>", "<code>ls -la</code>", "<code>ls foo bar</code>", "<code>ls -la foo bar</code>", "<code>alias</code>", "<code>myfunction() {\n    #do things with parameters like $1 such as\n    mv \"$1\" \"$1.bak\"\n    cp \"$2\" \"$1\"\n}\n\n\nmyFunction xyz #calls `myfunction`\n</code>", "<code>.bashrc</code>", "<code>$ myfunction original.conf my.conf\n</code>", "<code>$1</code>", "<code>source</code>", "<code>unalias &lt;name&gt;</code>", "<code>exec bash</code>", "<code>bash</code>", "<code>mv \"$1\" \"$1.bak\"</code>", "<code>mv hello world hello world.bak</code>", "<code>mv \"hello world\" \"hello world.bak\"</code>", "<code>bash$ myfunction() { mv \"$1\" \"$1.bak\"; cp \"$2\" \"$1\"; }\n\nbash$ myfunction original.conf my.conf\n</code>", "<code>csh% alias junk=\"mv \\\\!* ~/.Trash\"\n\nbash$ junk() { mv \"$@\" ~/.Trash/; }\n</code>", "<code>bash$ junk() { for item in \"$@\" ; do echo \"Trashing: $item\" ; mv \"$item\" ~/.Trash/; done; }\n</code>", "<code>mv \"$1\" \"$1.bak\"; cp \"$2\" \"$1\"</code>", "<code>mv \"$1\" \"$1.bak\" &amp;&amp; cp \"$2\" \"$1\"</code>", "<code>mv</code>", "<code>alias</code>", "<code>function</code>", "<code>function trash() { mv \"$@\" ~/.Trash; }\n</code>", "<code>echo -e '#!/bin/bash\\nshopt -s expand_aliases\\nalias asrc='\\''echo \"${BASH_SOURCE[0]}\"'\\'' # note the '\\''s\\nfunction fsrc(){ echo \"${BASH_SOURCE[0]}\";}'&gt;&gt;file2&amp;&amp;echo -e '#!/bin/bash\\n. file2\\nalias rl='\\''readlink -f'\\''\\nrl $(asrc)\\nrl $(fsrc)'&gt;&gt;file1&amp;&amp;chmod +x file1&amp;&amp;./file1;rm -f file1 file2</code>", "<code>$@</code>", "<code>$ wrap_args() { echo \"before $@ after\"; }\n$ wrap_args 1 2 3\nbefore 1 2 3 after\n</code>", "<code>bash</code>", "<code>$ alias speak=echo\n$ speak hello world\nhello world\n</code>", "<code>alias</code>", "<code>alias</code>", "<code>$ alias wrap_args='f(){ echo before \"$@\" after;  unset -f f; }; f'\n$ wrap_args x y z\nbefore x y z after\n</code>", "<code>$@</code>", "<code>$1</code>", "<code>f</code>", "<code>f</code>", "<code>unset -f</code>", "<code>$ alias wrap_args='sh -c '\\''echo before \"$@\" after'\\'' _'\n</code>", "<code>sh -c 'echo before \"$@\" after' _\n</code>", "<code>_</code>", "<code>sh</code>", "<code>$0</code>", "<code>sh -c 'echo Consumed: \"$0\" Printing: \"$@\"' alcohol drunken babble\nConsumed: alcohol Printing: drunken babble\n</code>", "<code>$ sh -c \"echo Consumed: $0 Printing: $@\" alcohol drunken babble\nConsumed: -bash Printing:\n</code>", "<code>$0</code>", "<code>$@</code>", "<code>sh</code>", "<code>echo \"Consumed: $0 Printing: $@\"\nConsumed: -bash Printing:\n</code>", "<code>sh -c</code>", "<code>\\$@</code>", "<code>\\\"\\$@\\\"</code>", "<code>~/.bashrc</code>", "<code>#Utility required by all below functions.\n#https://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-bash-variable#comment21953456_3232433\nalias trim=\"sed -e 's/^[[:space:]]*//g' -e 's/[[:space:]]*\\$//g'\"\n</code>", "<code>:&lt;&lt;COMMENT\n    Alias function for recursive deletion, with are-you-sure prompt.\n\n    Example:\n        srf /home/myusername/django_files/rest_tutorial/rest_venv/\n\n    Parameter is required, and must be at least one non-whitespace character.\n\n    Short description: Stored in SRF_DESC\n\n    With the following setting, this is *not* added to the history:\n        export HISTIGNORE=\"*rm -r*:srf *\"\n    - https://superuser.com/questions/232885/can-you-share-wisdom-on-using-histignore-in-bash\n\n    See:\n    - y/n prompt: https://stackoverflow.com/a/3232082/2736496\n    - Alias w/param: https://stackoverflow.com/a/7131683/2736496\nCOMMENT\n#SRF_DESC: For \"aliaf\" command (with an 'f'). Must end with a newline.\nSRF_DESC=\"srf [path]: Recursive deletion, with y/n prompt\\n\"\nsrf()  {\n    #Exit if no parameter is provided (if it's the empty string)\n        param=$(echo \"$1\" | trim)\n        echo \"$param\"\n        if [ -z \"$param\" ]  #http://tldp.org/LDP/abs/html/comparison-ops.html\n        then\n          echo \"Required parameter missing. Cancelled\"; return\n        fi\n\n    #Actual line-breaks required in order to expand the variable.\n    #- https://stackoverflow.com/a/4296147/2736496\n    read -r -p \"About to\n    sudo rm -rf \\\"$param\\\"\nAre you sure? [y/N] \" response\n    response=${response,,}    # tolower\n    if [[ $response =~ ^(yes|y)$ ]]\n    then\n        sudo rm -rf \"$param\"\n    else\n        echo \"Cancelled.\"\n    fi\n}\n</code>", "<code>:&lt;&lt;COMMENT\n    Delete item from history based on its line number. No prompt.\n\n    Short description: Stored in HX_DESC\n\n    Examples\n        hx 112\n        hx 3\n\n    See:\n    - https://unix.stackexchange.com/questions/57924/how-to-delete-commands-in-history-matching-a-given-string\nCOMMENT\n#HX_DESC: For \"aliaf\" command (with an 'f'). Must end with a newline.\nHX_DESC=\"hx [linenum]: Delete history item at line number\\n\"\nhx()  {\n    history -d \"$1\"\n}\n</code>", "<code>:&lt;&lt;COMMENT\n    Deletes all lines from the history that match a search string, with a\n    prompt. The history file is then reloaded into memory.\n\n    Short description: Stored in HXF_DESC\n\n    Examples\n        hxf \"rm -rf\"\n        hxf ^source\n\n    Parameter is required, and must be at least one non-whitespace character.\n\n    With the following setting, this is *not* added to the history:\n        export HISTIGNORE=\"*hxf *\"\n    - https://superuser.com/questions/232885/can-you-share-wisdom-on-using-histignore-in-bash\n\n    See:\n    - https://unix.stackexchange.com/questions/57924/how-to-delete-commands-in-history-matching-a-given-string\nCOMMENT\n#HXF_DESC: For \"aliaf\" command (with an 'f'). Must end with a newline.\nHXF_DESC=\"hxf [searchterm]: Delete all history items matching search term, with y/n prompt\\n\"\nhxf()  {\n    #Exit if no parameter is provided (if it's the empty string)\n        param=$(echo \"$1\" | trim)\n        echo \"$param\"\n        if [ -z \"$param\" ]  #http://tldp.org/LDP/abs/html/comparison-ops.html\n        then\n          echo \"Required parameter missing. Cancelled\"; return\n        fi\n\n    read -r -p \"About to delete all items from history that match \\\"$param\\\". Are you sure? [y/N] \" response\n    response=${response,,}    # tolower\n    if [[ $response =~ ^(yes|y)$ ]]\n    then\n        #Delete all matched items from the file, and duplicate it to a temp\n        #location.\n        grep -v \"$param\" \"$HISTFILE\" &gt; /tmp/history\n\n        #Clear all items in the current sessions history (in memory). This\n        #empties out $HISTFILE.\n        history -c\n\n        #Overwrite the actual history file with the temp one.\n        mv /tmp/history \"$HISTFILE\"\n\n        #Now reload it.\n        history -r \"$HISTFILE\"     #Alternative: exec bash\n    else\n        echo \"Cancelled.\"\n    fi\n}\n</code>", "<code>alias foo='__foo() { unset -f $0; echo \"arg1 for foo=$1\"; }; __foo()'\n</code>", "<code>alias bar='cat &lt;&lt;&lt; '\\''echo arg1 for bar=$1'\\'' | source /dev/stdin'\n</code>", "<code>arg1 for foo=FOOVALUE\n real 0m0.011s user 0m0.004s sys 0m0.008s  # &lt;--time spent in foo\n real 0m0.000s user 0m0.000s sys 0m0.000s  # &lt;--time spent in bar\narg1 for bar=BARVALUE\nubuntu@localhost /usr/bin# time foo FOOVALUE; time bar BARVALUE\narg1 for foo=FOOVALUE\n real 0m0.010s user 0m0.004s sys 0m0.004s\n real 0m0.000s user 0m0.000s sys 0m0.000s\narg1 for bar=BARVALUE\nubuntu@localhost /usr/bin# time foo FOOVALUE; time bar BARVALUE\narg1 for foo=FOOVALUE\n real 0m0.011s user 0m0.000s sys 0m0.012s\n real 0m0.000s user 0m0.000s sys 0m0.000s\narg1 for bar=BARVALUE\nubuntu@localhost /usr/bin# time foo FOOVALUE; time bar BARVALUE\narg1 for foo=FOOVALUE\n real 0m0.012s user 0m0.004s sys 0m0.004s\n real 0m0.000s user 0m0.000s sys 0m0.000s\narg1 for bar=BARVALUE\nubuntu@localhost /usr/bin# time foo FOOVALUE; time bar BARVALUE\narg1 for foo=FOOVALUE\n real 0m0.010s user 0m0.008s sys 0m0.004s\n real 0m0.000s user 0m0.000s sys 0m0.000s\narg1 for bar=BARVALUE\n</code>", "<code>function foo() { /path/to/command \"$@\" ;}\n</code>", "<code>foo() { /path/to/command \"$@\" ;}\n</code>", "<code>foo arg1 arg2 argN\n</code>", "<code>~/.bash_profile</code>", "<code>~/.zshrc</code>", "<code>function trash() { mv $@ ~/.Trash; }\n</code>", "<code>#!/usr/bin/env bash\n\n# you would want to `source` this file, maybe in your .bash_profile?\nfunction runjar_fn(){\n    java -jar myjar.jar \"$@\";\n}\n\nalias runjar=runjar_fn;\n</code>", "<code>runjar</code>", "<code>runjar hi there</code>", "<code>java -jar myjar.jar hi there</code>", "<code>runjar one two three</code>", "<code>java -jar myjar.jar one two three</code>", "<code>$@</code>", "<code>runjar</code>", "<code>alias</code>", "<code>alias</code>", "<code>alias runjar='java -jar myjar.jar'</code>", "<code>sv () { set | grep --color=never -- \"^$1=.*\"; }\n</code>", "<code>&gt; V=voodoo\nsv V\nV=voodoo\n</code>", "<code>&gt; sv FUNCNAME\nFUNCNAME=([0]=\"sv\")\n</code>", "<code>alias asv='(grep -- \"^$(cat -)=.*\" &lt;(set)) &lt;&lt;&lt;'\n</code>", "<code>&gt; asv FUNCNAME\n&gt; echo $?\n1\n</code>", "<code># (I put this code in a file \"alias-arg.sh\"):\n\n# cmd [arg1 ...] \u2013 an experimental command that optionally takes args,\n# which are printed as \"cmd(arg1 ...)\"\n#\n# Also sets global variable \"CMD_DONE\" to \"true\".\n#\ncmd () { echo \"cmd($@)\"; declare -g CMD_DONE=true; }\n\n# Now set up an alias \"ac2\" that passes to cmd two arguments placed\n# after the alias, but passes them to cmd with their order reversed:\n#\n# ac2 cmd_arg2 cmd_arg1 \u2013 calls \"cmd\" as: \"cmd cmd_arg1 cmd_arg2\"\n#\nalias ac2='\n    # Set up cmd to be execed after f() finishes:\n    #\n    trap '\\''cmd \"${CMD_ARGV[1]}\" \"${CMD_ARGV[0]}\"'\\'' SIGUSR1;\n    #        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    #       (^This is the actually execed command^)\n    #\n    # f [arg0 arg1 ...] \u2013 acquires args and sets up trap to run cmd:\n    f () {\n        declare -ag CMD_ARGV=(\"$@\");  # array to give args to cmd\n        kill -SIGUSR1 $$;             # this causes cmd to be run\n        trap SIGUSR1;                 # unset the trap for SIGUSR1\n        unset CMD_ARGV;               # clean up env...\n        unset f;                      # incl. this function!\n    };\n    f'  # Finally, exec f, which will receive the args following \"ac2\".\n</code>", "<code>&gt; . alias-arg.sh\n&gt; ac2 one two\ncmd(two one)\n&gt;\n&gt; # Check to see that command run via trap affects this environment:\n&gt; asv CMD_DONE\nCMD_DONE=true\n</code>", "<code>alias ssh_disc='ssh -O stop'\n</code>", "<code>ssh_disc myhost</code>", "<code>ssh -O stop myhost</code>", "<code>.bashrc</code>", "<code># create an alias that takes port-number by the user\nalias serve=\"python -m SimpleHTTPServer $1\"\n</code>", "<code>~$ source .bashrc\n</code>", "<code>~$ serve 8998\n</code>", "<code>$1</code>", "<code>python -m SimpleHTTPServer</code>"], "path": "stack.django"}, {"tags": ["python", "django", "forms", "model"], "creation_date": 1236032298, "body_markdown": "I have a Model as follows.\r\n\r\n    class TankJournal(models.Model):\r\n      user = models.ForeignKey(User)\r\n      tank = models.ForeignKey(TankProfile)\r\n      ts = models.IntegerField(max_length=15)\r\n      title = models.CharField(max_length=50)\r\n      body = models.TextField()\r\n\r\nI also have a model form for the above model as follows.\r\n\r\n\r\n    class JournalForm(ModelForm):\r\n        tank = forms.IntegerField(widget=forms.HiddenInput()) \r\n        \r\n        class Meta:\r\n            model = TankJournal\r\n            exclude = (&#39;user&#39;,&#39;ts&#39;)\r\n\r\nI want to know how to set the default value for that tank hidden field.. Here is my function to show/save the form so far\r\n\r\n    def addJournal(request, id=0):\r\n        if not request.user.is_authenticated():\r\n            return HttpResponseRedirect(&#39;/&#39;)\r\n        \r\n        #\r\n        # checking if they own the tank\r\n        #\r\n        from django.contrib.auth.models import User\r\n        user = User.objects.get(pk=request.session[&#39;id&#39;])\r\n        \r\n        if request.method == &#39;POST&#39;:\r\n            form = JournalForm(request.POST)\r\n            if form.is_valid():\r\n                obj = form.save(commit=False)\r\n                \r\n                #\r\n                # setting the user and ts\r\n                #\r\n                from time import time\r\n                obj.ts = int(time())\r\n                obj.user = user\r\n    \r\n                obj.tank = TankProfile.objects.get(pk=form.cleaned_data[&#39;tank_id&#39;])\r\n                    \r\n                #\r\n                # saving the test\r\n                #\r\n                obj.save()\r\n                \r\n        else:\r\n            form = JournalForm()\r\n        \r\n        try:\r\n            tank = TankProfile.objects.get(user=user, id=id)\r\n        except TankProfile.DoesNotExist:\r\n            return HttpResponseRedirect(&#39;/error/&#39;)\r\n        \r\n        form.tank = id\r\n        return render_to_response(&#39;ajax/tank_addJournal.html&#39;, {&#39;form&#39;: form}, context_instance=RequestContext(request))\r\n\r\nThanks.\r\n", "last_edit_date": 1514403872, "up_vote_count": 174, "link": "https://stackoverflow.com/questions/604266/django-set-default-form-values", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1236032986, "answer_id": 604325, "path": "stack.django.answer", "score": 310, "up_vote_count": 311, "is_accepted": true, "last_activity_date": 1505165391, "last_edit_date": 1505165391, "body_markdown": "You can use _initial_ which is explained [here][1]\r\n\r\n\r\nYou have two options either populate the value when calling form constructor:\r\n\r\n    form = JournalForm(initial={&#39;tank&#39;: 123})\r\n\r\n\r\n\r\nor set the value in the form definition:\r\n\r\n    tank = forms.IntegerField(widget=forms.HiddenInput(), initial=123) \r\n\r\n\r\n  [1]: https://djangobook.com/tying-forms-views/#setting-initial-values"}, {"tags": [], "down_vote_count": 0, "creation_date": 1423765107, "answer_id": 28484879, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1475667207, "last_edit_date": 1475667207, "body_markdown": "If you are creating modelform from POST values initial can be assigned this way:\r\n\r\n    form = SomeModelForm(request.POST or None, initial={&quot;option&quot;: &quot;10&quot;})\r\n\r\nhttps://docs.djangoproject.com/en/1.10/topics/forms/modelforms/#providing-initial-values"}], "title": "Django set default form values", "view_count": 158597, "answer_count": 2, "code_snippet": ["<code>class TankJournal(models.Model):\n  user = models.ForeignKey(User)\n  tank = models.ForeignKey(TankProfile)\n  ts = models.IntegerField(max_length=15)\n  title = models.CharField(max_length=50)\n  body = models.TextField()\n</code>", "<code>class JournalForm(ModelForm):\n    tank = forms.IntegerField(widget=forms.HiddenInput()) \n\n    class Meta:\n        model = TankJournal\n        exclude = ('user','ts')\n</code>", "<code>def addJournal(request, id=0):\n    if not request.user.is_authenticated():\n        return HttpResponseRedirect('/')\n\n    #\n    # checking if they own the tank\n    #\n    from django.contrib.auth.models import User\n    user = User.objects.get(pk=request.session['id'])\n\n    if request.method == 'POST':\n        form = JournalForm(request.POST)\n        if form.is_valid():\n            obj = form.save(commit=False)\n\n            #\n            # setting the user and ts\n            #\n            from time import time\n            obj.ts = int(time())\n            obj.user = user\n\n            obj.tank = TankProfile.objects.get(pk=form.cleaned_data['tank_id'])\n\n            #\n            # saving the test\n            #\n            obj.save()\n\n    else:\n        form = JournalForm()\n\n    try:\n        tank = TankProfile.objects.get(user=user, id=id)\n    except TankProfile.DoesNotExist:\n        return HttpResponseRedirect('/error/')\n\n    form.tank = id\n    return render_to_response('ajax/tank_addJournal.html', {'form': form}, context_instance=RequestContext(request))\n</code>", "<code>form = JournalForm(initial={'tank': 123})\n</code>", "<code>tank = forms.IntegerField(widget=forms.HiddenInput(), initial=123) \n</code>", "<code>initial</code>", "<code>View.get_form</code>", "<code>initial</code>", "<code>FormMixin.get_initial()</code>", "<code>form = SomeModelForm(request.POST or None, initial={\"option\": \"10\"})\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "django-models"], "creation_date": 1265303070, "body_markdown": "Is there a way to define a couple of fields as unique in Django?\r\n\r\nI have a table of volumes (of journals) and I don&#39;t want more then one volume number for the same journal.\r\n\r\n    class Volume(models.Model):\r\n        id = models.AutoField(primary_key=True)\r\n        journal_id = models.ForeignKey(Journals, db_column=&#39;jid&#39;, null=True, verbose_name = &quot;Journal&quot;)\r\n        volume_number = models.CharField(&#39;Volume Number&#39;, max_length=100)\r\n        comments = models.TextField(&#39;Comments&#39;, max_length=4000, blank=True)\r\n\r\n\r\nI tried to put `unique = True` as attribute in the fields `journal_id` and `volume_number` but it doesn&#39;t work.", "last_edit_date": 1450510161, "up_vote_count": 232, "link": "https://stackoverflow.com/questions/2201598/how-to-define-two-fields-unique-as-couple", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1265303794, "answer_id": 2201687, "path": "stack.django.answer", "score": 417, "up_vote_count": 417, "is_accepted": true, "last_activity_date": 1402951811, "last_edit_date": 1402951811, "body_markdown": "There is a simple solution for you called [unique_together][1] which does exactly what you want.\r\n\r\n**For example:**\r\n\r\n    class MyModel(models.Model):\r\n      field1 = models.CharField(max_length=50)\r\n      field2 = models.CharField(max_length=50)\r\n\r\n      class Meta:\r\n        unique_together = (&#39;field1&#39;, &#39;field2&#39;,)\r\n\r\n**And in your case:**\r\n\r\n    class Volume(models.Model):\r\n      id = models.AutoField(primary_key=True)\r\n      journal_id = models.ForeignKey(Journals, db_column=&#39;jid&#39;, null=True, verbose_name = &quot;Journal&quot;)\r\n      volume_number = models.CharField(&#39;Volume Number&#39;, max_length=100)\r\n      comments = models.TextField(&#39;Comments&#39;, max_length=4000, blank=True)\r\n\r\n      class Meta:\r\n        unique_together = (&#39;journal_id&#39;, &#39;volume_number&#39;,)\r\n\r\n  [1]: https://docs.djangoproject.com/en/dev/ref/models/options/#unique-together"}], "title": "How to define two fields &quot;unique&quot; as couple", "view_count": 60284, "answer_count": 1, "code_snippet": ["<code>class Volume(models.Model):\n    id = models.AutoField(primary_key=True)\n    journal_id = models.ForeignKey(Journals, db_column='jid', null=True, verbose_name = \"Journal\")\n    volume_number = models.CharField('Volume Number', max_length=100)\n    comments = models.TextField('Comments', max_length=4000, blank=True)\n</code>", "<code>unique = True</code>", "<code>journal_id</code>", "<code>volume_number</code>", "<code>class MyModel(models.Model):\n  field1 = models.CharField(max_length=50)\n  field2 = models.CharField(max_length=50)\n\n  class Meta:\n    unique_together = ('field1', 'field2',)\n</code>", "<code>class Volume(models.Model):\n  id = models.AutoField(primary_key=True)\n  journal_id = models.ForeignKey(Journals, db_column='jid', null=True, verbose_name = \"Journal\")\n  volume_number = models.CharField('Volume Number', max_length=100)\n  comments = models.TextField('Comments', max_length=4000, blank=True)\n\n  class Meta:\n    unique_together = ('journal_id', 'volume_number',)\n</code>", "<code>UNIQUE</code>", "<code>NULL</code>", "<code>NULL</code>", "<code>NULL</code>", "<code>unique_together</code>", "<code>unique_together = (('journal_id', 'volume_number',),)</code>"], "path": "stack.django"}, {"tags": ["python", "django", "django-models", "django-south"], "creation_date": 1279014782, "body_markdown": "I would like to change a name of specific fields in a model:\r\n\r\n    class Foo(models.Model):\r\n        name = models.CharField()\r\n        rel  = models.ForeignKey(Bar)\r\n\r\nshould change to:\r\n\r\n    class Foo(models.Model):\r\n        full_name     = models.CharField()\r\n        odd_relation  = models.ForeignKey(Bar)\r\n\r\nWhat&#39;s the easiest way to do this using South?\r\n", "last_edit_date": 1450515525, "up_vote_count": 206, "link": "https://stackoverflow.com/questions/3235995/django-how-to-rename-a-model-field-using-south", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1279016816, "answer_id": 3236197, "path": "stack.django.answer", "score": 227, "up_vote_count": 227, "is_accepted": true, "last_activity_date": 1449658080, "last_edit_date": 1449658080, "body_markdown": "You can use the [`db.rename_column`][1] function.\r\n\r\n    class Migration:\r\n    \r\n        def forwards(self, orm):\r\n            # Rename &#39;name&#39; field to &#39;full_name&#39;\r\n            db.rename_column(&#39;app_foo&#39;, &#39;name&#39;, &#39;full_name&#39;)\r\n        \r\n        \r\n    \r\n    \r\n        def backwards(self, orm):\r\n            # Rename &#39;full_name&#39; field to &#39;name&#39;\r\n            db.rename_column(&#39;app_foo&#39;, &#39;full_name&#39;, &#39;name&#39;)\r\n\r\n\r\nThe first argument of `db.rename_column` is the table name, so it&#39;s important to remember how [Django creates table names][2]:\r\n\r\n&gt; Django automatically derives the name of the database table from the name of your model class and the app that contains it. A model&#39;s database table name is constructed by joining the model&#39;s &quot;app label&quot; -- the name you used in manage.py startapp -- to the model&#39;s class name, with an underscore between them.\r\n\r\nIn the case where you have a multi-worded, camel-cased model name, such as ProjectItem, the table name will be `app_projectitem` (i.e., an underscore will not be inserted between `project` and `item` even though they are camel-cased).\r\n\r\n  [1]: http://south.readthedocs.org/en/latest/databaseapi.html#db-rename-column\r\n\r\n  [2]: https://docs.djangoproject.com/en/stable/ref/models/options/#table-names"}, {"tags": [], "down_vote_count": 0, "creation_date": 1279039770, "answer_id": 3239421, "path": "stack.django.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1279039770, "body_markdown": "I didn&#39;t know about db.rename column, sounds handy, however in the past I have added the new column as one schemamigration, then created a datamigration to move values into the new field, then a second schemamigration to remove the old column\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1385827055, "answer_id": 20302278, "path": "stack.django.answer", "score": 38, "up_vote_count": 38, "is_accepted": false, "last_activity_date": 1396474192, "last_edit_date": 1396474192, "body_markdown": "Here&#39;s what I do: \r\n\r\n 1. Make the column name change in your model (in this example it would be `myapp/models.py`)\r\n 2. Run `./manage.py schemamigration myapp renaming_column_x --auto`\r\n\r\nNote `renaming_column_x` can be anything you like, it&#39;s just a way of giving a descriptive name to the migration file. \r\n \r\nThis will generate you a file called `myapp/migrations/000x_renaming_column_x.py` which will delete your old column and add a new column.\r\n\r\nModify the code in this file to change the migration behaviour to a simple rename:\r\n\r\n    class Migration(SchemaMigration):\r\n    \r\n        def forwards(self, orm):\r\n            # Renaming column &#39;mymodel.old_column_name&#39; to &#39;mymodel.new_column_name&#39;\r\n            db.rename_column(u&#39;myapp_mymodel&#39;, &#39;old_column_name&#39;, &#39;new_column_name&#39;)\r\n    \r\n        def backwards(self, orm):\r\n            # Renaming column &#39;mymodel.new_column_name&#39; to &#39;mymodel.old_column_name&#39;\r\n            db.rename_column(u&#39;myapp_mymodel&#39;, &#39;new_column_name&#39;, &#39;old_column_name&#39;)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1409311372, "answer_id": 25567287, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1409835415, "last_edit_date": 1409835415, "body_markdown": " 1. Add `south` to your installed apps in project setting file.\r\n 2. Comment out the added/modified field/table.\r\n 3. `$ manage.py Schemamigration &lt;app_name&gt; --initial`\r\n 4. `$ manage.py migrate &lt;app_name&gt; --Fake`\r\n 5. Un-comment the field and write the modified one\r\n 6. `$ manage.py Schemamigration --auto`\r\n 7. `$ manage.py migrate &lt;app_name&gt;`\r\n\r\nIf you are using &#39;pycharm&#39;, then you can use &#39;ctrl+shift+r&#39; instead of &#39;manage.py&#39; , and &#39;shift &lt;enter&gt;&#39; for parameters."}, {"tags": [], "down_vote_count": 0, "creation_date": 1427185761, "answer_id": 29227945, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1427185761, "body_markdown": "Django 1.7 introduced [Migrations][1] so now you don&#39;t even need to install extra package to manage your migrations.\r\n\r\nTo rename your model you need to create empty migration first:\r\n\r\n    $ manage.py makemigrations &lt;app_name&gt; --empty\r\n\r\nThen you need to edit your migration&#39;s code like this:\r\n\r\n    from django.db import models, migrations\r\n\r\n    class Migration(migrations.Migration):\r\n    \r\n    dependencies = [\r\n        (&#39;yourapp&#39;, &#39;XXXX_your_previous_migration&#39;),\r\n    ]\r\n    \r\n    operations = [\r\n        migrations.RenameField(\r\n            model_name=&#39;Foo&#39;,\r\n            old_name=&#39;name&#39;,\r\n            new_name=&#39;full_name&#39;\r\n        ),\r\n        migrations.RenameField(\r\n            model_name=&#39;Foo&#39;,\r\n            old_name=&#39;rel&#39;,\r\n            new_name=&#39;odd_relation&#39;\r\n        ),\r\n    ]\r\n\r\nAnd after that you need to run:\r\n\r\n    $ manage.py migrate &lt;app_name&gt;\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.7/topics/migrations/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1463317678, "answer_id": 37238680, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1496036762, "last_edit_date": 1496036762, "body_markdown": "**Just change the model and run `makemigrations` in 1.9**\r\n\r\nDjango automatically detects that you&#39;ve deleted and created a single field, and asks:\r\n\r\n    Did you rename model.old to model.new (a IntegerField)? [y/N]\r\n\r\nSay yes, and the right migration gets created. Magic."}], "title": "Django - How to rename a model field using South?", "view_count": 35709, "answer_count": 6, "code_snippet": ["<code>class Foo(models.Model):\n    name = models.CharField()\n    rel  = models.ForeignKey(Bar)\n</code>", "<code>class Foo(models.Model):\n    full_name     = models.CharField()\n    odd_relation  = models.ForeignKey(Bar)\n</code>", "<code>db.rename_column</code>", "<code>class Migration:\n\n    def forwards(self, orm):\n        # Rename 'name' field to 'full_name'\n        db.rename_column('app_foo', 'name', 'full_name')\n\n\n\n\n    def backwards(self, orm):\n        # Rename 'full_name' field to 'name'\n        db.rename_column('app_foo', 'full_name', 'name')\n</code>", "<code>db.rename_column</code>", "<code>app_projectitem</code>", "<code>project</code>", "<code>item</code>", "<code>myapp/models.py</code>", "<code>./manage.py schemamigration myapp renaming_column_x --auto</code>", "<code>renaming_column_x</code>", "<code>myapp/migrations/000x_renaming_column_x.py</code>", "<code>class Migration(SchemaMigration):\n\n    def forwards(self, orm):\n        # Renaming column 'mymodel.old_column_name' to 'mymodel.new_column_name'\n        db.rename_column(u'myapp_mymodel', 'old_column_name', 'new_column_name')\n\n    def backwards(self, orm):\n        # Renaming column 'mymodel.new_column_name' to 'mymodel.old_column_name'\n        db.rename_column(u'myapp_mymodel', 'new_column_name', 'old_column_name')\n</code>", "<code>x</code>", "<code>column_x</code>", "<code>--auto</code>", "<code>forwards</code>", "<code>backwards</code>", "<code>model</code>", "<code>db.rename_column</code>", "<code>db.delete_unique</code>", "<code>db.create_unique</code>", "<code>db.rename_column</code>", "<code>$ manage.py makemigrations &lt;app_name&gt; --empty\n</code>", "<code>from django.db import models, migrations\n\nclass Migration(migrations.Migration):\n\ndependencies = [\n    ('yourapp', 'XXXX_your_previous_migration'),\n]\n\noperations = [\n    migrations.RenameField(\n        model_name='Foo',\n        old_name='name',\n        new_name='full_name'\n    ),\n    migrations.RenameField(\n        model_name='Foo',\n        old_name='rel',\n        new_name='odd_relation'\n    ),\n]\n</code>", "<code>$ manage.py migrate &lt;app_name&gt;\n</code>", "<code>makemigrations</code>", "<code>Did you rename model.old to model.new (a IntegerField)? [y/N]\n</code>", "<code>south</code>", "<code>$ manage.py Schemamigration &lt;app_name&gt; --initial</code>", "<code>$ manage.py migrate &lt;app_name&gt; --Fake</code>", "<code>$ manage.py Schemamigration --auto</code>", "<code>$ manage.py migrate &lt;app_name&gt;</code>"], "path": "stack.django"}, {"tags": ["python", "dictionary", "order"], "creation_date": 1260287615, "body_markdown": "I have a dictionary that I declared in a particular order and want to keep it in that order all the time. The keys/values can&#39;t really be kept in order based on their value, I just want it in the order that I declared it.\r\n\r\nSo if I have the dictionary:\r\n\r\n    d = {&#39;ac&#39;: 33, &#39;gw&#39;: 20, &#39;ap&#39;: 102, &#39;za&#39;: 321, &#39;bs&#39;: 10}\r\n\r\nIt isn&#39;t in that order if I view it or iterate through it, is there any way to make sure Python will keep the explicit order that I declared the keys/values in?", "last_edit_date": 1518280765, "up_vote_count": 179, "link": "https://stackoverflow.com/questions/1867861/python-dictionary-how-to-keep-keys-values-in-same-order-as-declared", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1260287863, "answer_id": 1867890, "path": "stack.django.answer", "score": 9, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1260287863, "body_markdown": "Dictionaries will use an order that makes searching efficient, and you cant change that,\r\n\r\nYou could just use a list of objects (a 2 element tuple in a simple case, or even a class), and append items to the end. You can then use linear search to find items in it.\r\n\r\nAlternatively you could create or use a different data structure created with the intention of maintaining order."}, {"tags": [], "down_vote_count": 0, "creation_date": 1260288567, "answer_id": 1867967, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1260288567, "body_markdown": "Generally, you can design a class that behaves like a dictionary, mainly be implementing the methods `__contains__`, `__getitem__`, `__delitem__`, `__setitem__` and some more.  That class can have any behaviour you like, for example prividing a sorted iterator over the keys ..."}, {"tags": [], "down_vote_count": 0, "creation_date": 1307029591, "answer_id": 6216877, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1307029591, "body_markdown": "I had a similar problem when developing a Django project. I couldn&#39;t use OrderedDict, because I was running an old version of python, so the simple solution was to use Django&#39;s SortedDict class:\r\n\r\nhttps://code.djangoproject.com/wiki/SortedDict"}, {"tags": [], "down_vote_count": 0, "creation_date": 1339424710, "answer_id": 10982022, "path": "stack.django.answer", "score": 19, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1393019761, "last_edit_date": 1393019761, "body_markdown": "python dictionaries are unordered.  If you want an ordered dictionary, try [collections.OrderedDict][1].\r\n\r\n\r\nNote that OrderedDict was introduced into the standard library in python 2.7.  If you have an older version of python, you can find recipes for ordered dictionaries on [ActiveState][2].\r\n\r\n\r\n  [1]: http://docs.python.org/library/collections.html#collections.OrderedDict\r\n  [2]: http://code.activestate.com/recipes/576693-ordered-dictionary-for-py24/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1339424762, "answer_id": 10982037, "path": "stack.django.answer", "score": 119, "up_vote_count": 119, "is_accepted": false, "last_activity_date": 1339424762, "body_markdown": "    from collections import OrderedDict\r\n    OrderedDict((word, True) for word in words)\r\n\r\ncontains \r\n\r\n    OrderedDict([(&#39;He&#39;, True), (&#39;will&#39;, True), (&#39;be&#39;, True), (&#39;the&#39;, True), (&#39;winner&#39;, True)])\r\n\r\nIf the values are `True` (or any other immutable object), you can also use:\r\n\r\n    OrderedDict.fromkeys(words, True)"}, {"tags": [], "down_vote_count": 2, "creation_date": 1372970831, "answer_id": 17477904, "path": "stack.django.answer", "score": 2, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1372974521, "last_edit_date": 1372974521, "body_markdown": "if you would like to have a dictionary  in a specific order, you can also create a list of lists, where the first item will be the key, and the second item will be the value\r\nand will look like this\r\nexample \r\n\r\n    &gt;&gt;&gt; list =[[1,2],[2,3]]\r\n    &gt;&gt;&gt; for i in list:\r\n    ...     print i[0]\r\n    ...     print i[1]\r\n    \r\n    1\r\n    2\r\n    2\r\n    3"}, {"tags": [], "down_vote_count": 1, "creation_date": 1402953424, "answer_id": 24252364, "path": "stack.django.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1403835822, "last_edit_date": 1403835822, "body_markdown": "I came across this post while trying to figure out how to get OrderedDict to work. PyDev for Eclipse couldn&#39;t find OrderedDict at all, so I ended up deciding to make a tuple of my dictionary&#39;s key values as I would like them to be ordered. When I needed to output my list, I just iterated through the tuple&#39;s values and plugged the iterated &#39;key&#39; from the tuple into the dictionary to retrieve my values in the order I needed them.\r\n\r\nexample:\r\n\r\n    test_dict = dict( val1 = &quot;hi&quot;, val2 = &quot;bye&quot;, val3 = &quot;huh?&quot;, val4 = &quot;what....&quot;)\r\n    test_tuple = ( &#39;val1&#39;, &#39;val2&#39;, &#39;val3&#39;, &#39;val4&#39;)\r\n    for key in test_tuple: print(test_dict[key])\r\n\r\nIt&#39;s a tad cumbersome, but I&#39;m pressed for time and it&#39;s the workaround I came up with.\r\n\r\nnote: the list of lists approach that somebody else suggested does not really make sense to me, because lists are ordered and indexed (and are also a different structure than dictionaries)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1422602973, "answer_id": 28231217, "path": "stack.django.answer", "score": 111, "up_vote_count": 111, "is_accepted": false, "last_activity_date": 1462301983, "last_edit_date": 1462301983, "body_markdown": "Rather than explaining the theoretical part, I&#39;ll give a simple example.\r\n\r\n\r\n    &gt;&gt;&gt; from collections import OrderedDict\r\n    &gt;&gt;&gt; my_dictionary=OrderedDict()\r\n    &gt;&gt;&gt; my_dictionary[&#39;foo&#39;]=3\r\n    &gt;&gt;&gt; my_dictionary[&#39;aol&#39;]=1\r\n    &gt;&gt;&gt; my_dictionary\r\n    OrderedDict([(&#39;foo&#39;, 3), (&#39;aol&#39;, 1)])\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1472778358, "answer_id": 39282935, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1472778358, "body_markdown": "You can&#39;t really do what you want with a dictionary. You already have the dictionary `d = {&#39;ac&#39;:33, &#39;gw&#39;:20, &#39;ap&#39;:102, &#39;za&#39;:321, &#39;bs&#39;:10}`created. I found there was no way to keep in order once it is already created. What I did was make a json file instead with the object:\r\n\r\n    {&quot;ac&quot;:33,&quot;gw&quot;:20,&quot;ap&quot;:102,&quot;za&quot;:321,&quot;bs&quot;:10}\r\n\r\nI used:\r\n\r\n    r = json.load(open(&#39;file.json&#39;), object_pairs_hook=OrderedDict)\r\n\r\nthen used:\r\n\r\n    print json.dumps(r)\r\n\r\nto verify."}, {"tags": [], "down_vote_count": 1, "creation_date": 1474047658, "answer_id": 39537308, "path": "stack.django.answer", "score": 55, "up_vote_count": 56, "is_accepted": false, "last_activity_date": 1514888539, "last_edit_date": 1514888539, "body_markdown": "From Python 3.6 onwards, the standard `dict` type maintains insertion order by default.\r\n\r\nDefining\r\n\r\n    d = {&#39;ac&#39;:33, &#39;gw&#39;:20, &#39;ap&#39;:102, &#39;za&#39;:321, &#39;bs&#39;:10}\r\n\r\nwill result in a dictionary with the keys in the order listed in the source code.\r\n\r\nThis was achieved by using a simple array with integers for the sparse hash table, where those integers index into another array that stores the key-value pairs (plus the calculated hash). That latter array just happens to store the items in insertion order, and the whole combination actually uses less memory than the implementation used in Python 3.5 and before. See the [original idea post by Raymond Hettinger](https://mail.python.org/pipermail/python-dev/2012-December/123028.html) for details.\r\n\r\nIn 3.6 this  was still considered an implementation detail; see the [*What&#39;s New in Python 3.6* documentation](https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-compactdict):\r\n\r\n&gt; The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon (this may change in the future, but it is desired to have this new dict implementation in the language for a few releases before changing the language spec to mandate order-preserving semantics for all current and future Python implementations; this also helps preserve backwards-compatibility with older versions of the language where random iteration order is still in effect, e.g. Python 3.5).\r\n\r\nPython 3.7 elevates this implementation detail to a *language specification*, so  it is now mandatory that `dict` preserves order in all Python implementations compatible with that version or newer. See the [pronouncement by the BDFL](https://mail.python.org/pipermail/python-dev/2017-December/151283.html)."}], "title": "Python dictionary, how to keep keys/values in same order as declared?", "view_count": 180457, "answer_count": 10, "code_snippet": ["<code>d = {'ac': 33, 'gw': 20, 'ap': 102, 'za': 321, 'bs': 10}\n</code>", "<code>OrderedDict</code>", "<code>from collections import OrderedDict\nOrderedDict((word, True) for word in words)\n</code>", "<code>OrderedDict([('He', True), ('will', True), ('be', True), ('the', True), ('winner', True)])\n</code>", "<code>True</code>", "<code>OrderedDict.fromkeys(words, True)\n</code>", "<code>OrderedDict(FUTURE=[], TODAY=[], PAST=[])</code>", "<code>OrderedDict([('FUTURE', []), ('TODAY', []), ('PAST', [])])</code>", "<code>&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; my_dictionary=OrderedDict()\n&gt;&gt;&gt; my_dictionary['foo']=3\n&gt;&gt;&gt; my_dictionary['aol']=1\n&gt;&gt;&gt; my_dictionary\nOrderedDict([('foo', 3), ('aol', 1)])\n</code>", "<code>OrderedDict</code>", "<code>{'aol': 1, 'foo': 3}</code>", "<code>dict</code>", "<code>d = {'ac':33, 'gw':20, 'ap':102, 'za':321, 'bs':10}\n</code>", "<code>dict</code>", "<code>pypy</code>", "<code>dict</code>", "<code>test_dict = dict( val1 = \"hi\", val2 = \"bye\", val3 = \"huh?\", val4 = \"what....\")\ntest_tuple = ( 'val1', 'val2', 'val3', 'val4')\nfor key in test_tuple: print(test_dict[key])\n</code>", "<code>d = {'ac':33, 'gw':20, 'ap':102, 'za':321, 'bs':10}</code>", "<code>{\"ac\":33,\"gw\":20,\"ap\":102,\"za\":321,\"bs\":10}\n</code>", "<code>r = json.load(open('file.json'), object_pairs_hook=OrderedDict)\n</code>", "<code>print json.dumps(r)\n</code>", "<code>__contains__</code>", "<code>__getitem__</code>", "<code>__delitem__</code>", "<code>__setitem__</code>", "<code>&gt;&gt;&gt; list =[[1,2],[2,3]]\n&gt;&gt;&gt; for i in list:\n...     print i[0]\n...     print i[1]\n\n1\n2\n2\n3\n</code>"], "path": "stack.django"}, {"tags": ["python", "django"], "creation_date": 1273049304, "body_markdown": "I have such db model:\r\n\r\n    from datetime import datetime    \r\n\r\n    class TermPayment(models.Model):\r\n        # cut out some fields, non relevant to the question\r\n        date = models.DateTimeField(default=datetime.now(), blank=True)\r\n    \r\nAnd when new instance is added:\r\n\r\n    tp = TermPayment.objects.create(**kwargs)\r\n\r\nI&#39;ve an issue: all records in database have the same value in date field - the date of the first payment. After server restart - one record have new date and others have the same as the first. It&#39;s look like some data cache is used but I can&#39;t find where.\r\n\r\ndatabase: mysql 5.1.25\r\n\r\ndjango v1.1.1\r\n\r\n", "last_edit_date": 1437980624, "up_vote_count": 193, "link": "https://stackoverflow.com/questions/2771676/django-datetime-issues-default-datetime-now", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1273049522, "answer_id": 2771701, "path": "stack.django.answer", "score": 432, "up_vote_count": 432, "is_accepted": true, "last_activity_date": 1273050079, "last_edit_date": 1273050079, "body_markdown": "it looks like `datetime.now()` is being evaluated when the model is defined, and not each time you add a record.\r\n\r\nDjango has a feature to accomplish what you are trying to do already:\r\n\r\n    date = models.DateTimeField(auto_now_add=True, blank=True)\r\n\r\nor\r\n\r\n    date = models.DateTimeField(default=datetime.now, blank=True)\r\n\r\nThe difference between the second example and what you currently have is the lack of parentheses. By passing `datetime.now` without the parentheses, you are passing the actual function, which will be called each time a record is added. If you pass it `datetime.now()`, then you are just evaluating the function and passing it the return value.\r\n\r\nMore information is available at Django&#39;s [model field reference][1]\r\n\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/ref/models/fields/#datetimefield"}, {"tags": [], "down_vote_count": 0, "creation_date": 1273049965, "answer_id": 2771746, "path": "stack.django.answer", "score": 22, "up_vote_count": 22, "is_accepted": false, "last_activity_date": 1273049965, "body_markdown": "From the &lt;a href=&quot;http://docs.djangoproject.com/en/dev/ref/models/fields/#default&quot;&gt;documentation&lt;/a&gt; on the django model default field:\r\n\r\n*The default value for the field. This can be a value or a callable object. If callable it will be called every time a new object is created.*\r\n\r\nTherefore following should work:\r\n\r\n    date = models.DateTimeField(default=datetime.now,blank=True)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1273050126, "answer_id": 2771766, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1273050126, "body_markdown": "The `datetime.now()` is evaluated when the class is created, not when new record is being added to the database.\r\n\r\nTo achieve what you want define this field as:\r\n\r\n    date = models.DateTimeField(auto_now_add=True)\r\n\r\nThis way the `date` field will be set to current date for each new record.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1273050294, "answer_id": 2771785, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1273050294, "body_markdown": "From the Python language reference, under [Function definitions][1]:\r\n\r\n&gt; Default parameter values are evaluated when the function definition is executed. This means that the expression is evaluated once, when the function is defined, and that that same \u201cpre-computed\u201d value is used for each call.\r\n\r\nFortunately, Django has a way to do what you want, if you use the `auto_now` argument for the `DateTimeField`:\r\n\r\n    date = models.DateTimeField(auto_now=True)\r\n\r\nSee the Django docs for [DateTimeField][2].\r\n\r\n  [1]: http://docs.python.org/reference/compound_stmts.html#function-definitions\r\n  [2]: http://docs.djangoproject.com/en/dev/ref/models/fields/#datetimefield\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1323191365, "answer_id": 8403870, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1455649070, "last_edit_date": 1455649070, "body_markdown": "`datetime.now()` is being evaluated once, when your class is instantiated. Try removing the parenthesis so that the function `datetime.now` is returned and THEN evaluated. I had the same issue with setting default values for my `DateTimeField`s and wrote up my solution [here][1].\r\n\r\n\r\n  [1]: http://david.feinzeig.com/blog/2011/12/06/how-to-properly-set-a-default-value-for-a-datetimefield-in-django/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1376977314, "answer_id": 18327724, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1376977314, "body_markdown": "The answer to this one is actually wrong.\r\n\r\nAuto filling in the value (auto_now/auto_now_add isn&#39;t the same as default).  The default value will actually be what the user sees if its a brand new object.  What I typically do is:    \r\n\r\n    date = models.DateTimeField(default=datetime.now, editable=False,)\r\n\r\nMake sure, if your trying to represent this in an Admin page, that you list it as &#39;read_only&#39; and reference the field name\r\n\r\n    read_only = &#39;date&#39;\r\n\r\nAgain, I do this since my default value isn&#39;t typically editable, and Admin pages ignore non-editables unless specified otherwise.  There is certainly a difference however between setting a default value and implementing the auto_add which is key here.  Test it out!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1427778199, "answer_id": 29360937, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1427778199, "body_markdown": "David had the right answer. The parenthesis () makes it so that the *callable* timezone.now() is called every time the model is evaluated. If you remove the () from timezone.now() (or datetime.now(), if using the naive datetime object) to make it just this:\r\n\r\n    default=timezone.now\r\n\r\nThen it will work as you expect:  \r\n    New objects will receive the current date when they are created, but the date won&#39;t be overridden every time you do manage.py makemigrations/migrate.\r\n\r\nI just encountered this. Much thanks to David."}, {"tags": [], "down_vote_count": 0, "creation_date": 1440072461, "answer_id": 32117864, "path": "stack.django.answer", "score": 39, "up_vote_count": 39, "is_accepted": false, "last_activity_date": 1487596257, "last_edit_date": 1487596257, "body_markdown": "Instead of using `datetime.now` you should be really using `from django.utils.timezone import now`\r\n\r\n### Reference:\r\n\r\n- Documentation for [`django.utils.timezone.now`][1]\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/stable/ref/utils/#django.utils.timezone.now"}], "title": "Django datetime issues (default=datetime.now())", "view_count": 165030, "answer_count": 8, "code_snippet": ["<code>from datetime import datetime    \n\nclass TermPayment(models.Model):\n    # cut out some fields, non relevant to the question\n    date = models.DateTimeField(default=datetime.now(), blank=True)\n</code>", "<code>tp = TermPayment.objects.create(**kwargs)\n</code>", "<code>default=datetime.now</code>", "<code>now()</code>", "<code>datetime.now()</code>", "<code>date = models.DateTimeField(auto_now_add=True, blank=True)\n</code>", "<code>date = models.DateTimeField(default=datetime.now, blank=True)\n</code>", "<code>datetime.now</code>", "<code>datetime.now()</code>", "<code>expiry = models.DateTimeField(default=datetime.now + timedelta(days=30))</code>", "<code>def now_plus_30(): return datetime.now() + timedelta(days = 30)</code>", "<code>models.DateTimeField(default=now_plus_30)</code>", "<code>default=lambda: datetime.now()+timedelta(days=30)</code>", "<code>datetime.now</code>", "<code>from django.utils.timezone import now</code>", "<code>django.utils.timezone.now</code>", "<code>auto_now_add</code>", "<code>date = models.DateTimeField(default=datetime.now,blank=True)\n</code>", "<code>default</code>", "<code>default=timezone.now\n</code>", "<code>datetime.now()</code>", "<code>date = models.DateTimeField(auto_now_add=True)\n</code>", "<code>date</code>", "<code>date = models.DateTimeField(default=datetime.now, editable=False,)\n</code>", "<code>read_only = 'date'\n</code>", "<code>datetime.now()</code>", "<code>datetime.now</code>", "<code>DateTimeField</code>", "<code>auto_now</code>", "<code>DateTimeField</code>", "<code>date = models.DateTimeField(auto_now=True)\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "namespaces", "project-organization"], "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1296676471, "answer_id": 4879169, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1296676471, "body_markdown": "I&#39;ve found the following blog posts very useful about django applications and projects: \r\n\r\n - http://www.b-list.org/weblog/2006/sep/10/django-tips-laying-out-application/\r\n - http://web.archive.org/web/20080302205555/www.pointy-stick.com/blog/2007/11/09/django-tip-developing-without-projects/\r\n\r\nIn principle, you have a lot of freedom with django for organizing the source code of your product. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1296676701, "answer_id": 4879205, "path": "stack.django.answer", "score": 49, "up_vote_count": 49, "is_accepted": true, "last_activity_date": 1296676701, "body_markdown": "What is to stop you using `myproduct.myproduct`? What you need to achieve that roughly consists of doing this:\r\n\r\n    django-admin.py startproject myproduct\r\n    cd myproduct\r\n    mkdir myproduct\r\n    touch myproduct/__init__.py\r\n    touch myproduct/models.py\r\n    touch myproduct/views.py\r\n\r\nand so on. Would it help if I said `views.py` doesn&#39;t have to be called `views.py`? Provided you can name, on the python path, a function (usually package.package.views.function_name) it will get handled. Simple as that. All this &quot;project&quot;/&quot;app&quot; stuff is just python packages.\r\n\r\nNow, how are you supposed to do it? Or rather, how might I do it? Well, if you create a significant piece of reusable functionality, like say a markup editor, that&#39;s when you create a &quot;top level app&quot; which might contain `widgets.py`, `fields.py`, `context_processors.py` etc - all things you might want to import.\r\n\r\nSimilarly, if you can create something like a blog in a format that is pretty generic across installs, you can wrap it up in an app, with its own template, static content folder etc, and configure an instance of a django project to use that app&#39;s content.\r\n\r\nThere are no hard and fast rules saying you must do this, but it is one of the goals of the framework. The fact that everything, templates included, allows you to include from some common base means your blog should fit snugly into any other setup, simply by looking after its own part.\r\n\r\nHowever, to address your actual concern, yes, nothing says you can&#39;t work with the top level project folder. *That&#39;s what apps do* and you can do it if you really want to. I tend not to, however, for several reasons:\r\n\r\n - Django&#39;s default setup doesn&#39;t do it.\r\n - Often, I want to create a main app, so I create one, usually called `website`. However, at a later date I might want to develop original functionality just for this site. With a view to making it removable (whether or not I ever do) I tend to then create a separate directory. This also means I can drop said functionality just by unlinking that package from the config and removing the folder, rather than a complex delete the right urls from a global urls.py folder.\r\n - Very often, even when I want to make something independent, it needs somewhere to live whilst I look after it / make it independent. Basically the above case, but for stuff I do intend to make generic.\r\n - My top level folder often contains a few other things, including but not limited to wsgi scripts, sql scripts etc.\r\n - django&#39;s [management extensions][1] rely on subdirectories. So it makes sense to name packages appropriately.\r\n\r\nIn short, the reason there is a convention is the same as any other convention - it helps when it comes to others working with your project. If I see `fields.py` I immediately expect code in it to subclass django&#39;s field, whereas if I see `inputtypes.py` I might not be so clear on what that means without looking at it.\r\n\r\n\r\n  [1]: http://docs.djangoproject.com/en/1.2/howto/custom-management-commands/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1296676863, "answer_id": 4879235, "path": "stack.django.answer", "score": 66, "up_vote_count": 66, "is_accepted": false, "last_activity_date": 1430149608, "last_edit_date": 1430149608, "body_markdown": "&gt; Try to answer question: &quot;What does my\r\n&gt; application do?&quot;. If you cannot answer\r\n&gt; in a single sentence, then maybe you can\r\n&gt; split it into several apps with cleaner\r\n&gt; logic.\r\n\r\nI read this thought somewhere soon after I&#39;ve started to work with django and I find that I ask this question of myself quite often and it helps me. \r\n\r\nYour apps don&#39;t have to be reusable, they can depend on each other, but they should do one thing."}, {"tags": [], "down_vote_count": 0, "creation_date": 1296681757, "answer_id": 4880013, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1296681757, "body_markdown": "&gt;If so... in terms of Django&#39;s project.app namespace, my inclination is to usemyproduct.myproduct, but of course this isn&#39;t allowed  \r\n\r\nThere is nothing like not allowed. Its your project, no one is restricting you. It is advisable to keep a reasonable name.\r\n\r\n&gt; I don&#39;t see any portion of my product being reusable in any context. Intuitively, I would call this one &quot;application.&quot; Do I then do all my work in a single &quot;app&quot; folder?  \r\n\r\nIn a general django project there are many apps (contrib apps) which are used really in every project. \r\n  \r\nLet us say that your project does only one task and has only a single app (I name it `main` as thethe project revolves around it and is hardly pluggable). This project too still uses some other apps generally.   \r\n\r\nNow if you say that your project is using just the one app (`INSTALLED_APPS=&#39;myproduct&#39;`) so what is use of `project` defining the project as `project.app`, I think you should consider some points: \r\n\r\n - There are many other things that the code other than the app in a project handles (base static files, base templates, settings....i.e. provides the base). \r\n - In the general project.app approach django automatically defines sql schema from models. \r\n - Your project would be much easier to be built with the conventional approach. \r\n - You may define some different names for urls, views and other files as you wish, but I don&#39;t see the need. \r\n - You might need to add some applications in future which would be real easy with the conventional django projects which otherwise it may become equally or more difficult and tedious to do.  \r\n\r\n\r\nAs far as most of the work being done in the app is concerned, I think that is the case with most of django projects."}, {"tags": [], "down_vote_count": 0, "creation_date": 1363359517, "answer_id": 15435556, "path": "stack.django.answer", "score": 78, "up_vote_count": 78, "is_accepted": false, "last_activity_date": 1508018215, "last_edit_date": 1508018215, "body_markdown": "Once you graduate from using `startproject` and `startapp`, there&#39;s nothing to stop you from combining a &quot;project&quot; and &quot;app&quot; in the same Python package. A project is really nothing more than a `settings` module, and an app is really nothing more than a `models` module\u2014everything else is optional.\r\n\r\nFor small sites, it&#39;s entirely reasonable to have something like:\r\n\r\n    site/\r\n        models.py\r\n        settings.py\r\n        tests.py\r\n        urls.py\r\n        views.py\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1512470000, "answer_id": 47651439, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1512470000, "body_markdown": "[Here Django creators points out that difference themselves][1].\r\nI think that thinking about Apps as they have to be **reusable** in other projects is **good**. Also a good way of thinking about Apps in Django provide modern web applications. \r\n\r\nImagine that you are creating big **dynamic** web app basing on **JavaScript**. \r\n\r\nYou can create then in django App named e.g &quot;FrontEnd&quot; &lt;-- in thins app you will display content.\r\n\r\nThen you create some backend Apps. E.g App named &quot;Comments&quot; that will store user comments. And &quot;Comments&quot; App will not display anything itself. It will be just API for AJAX requests of your **dynamic** **JS** **website**.\r\n\r\nIn this way you can always reuse your &quot;Comments&quot; app. You can make it open source without opening source of whole project. And you keep clean **logic** of your project.\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.11/ref/applications/#projects-and-applications"}], "creation_date": 1296675709, "body_markdown": "I have a fairly complex &quot;product&quot; I&#39;m getting ready to build using Django. I&#39;m going to avoid using the terms &quot;project&quot; and &quot;application&quot; in this context, because I&#39;m not clear on their specific meaning in Django.\r\n\r\nProjects can have many apps. Apps can be shared among many projects. Fine.\r\n\r\nI&#39;m not reinventing the blog or forum - I don&#39;t see any portion of my product being reusable in any context. Intuitively, I would call this one &quot;application.&quot; Do I then do all my work in a single &quot;app&quot; folder?\r\n\r\n*If so*... in terms of Django&#39;s `project.app` namespace, my inclination is to use `myproduct.myproduct`, but of course this isn&#39;t allowed (but the application I&#39;m building is my project, and my project is an application!). I&#39;m therefore lead to believe that perhaps I&#39;m supposed to approach Django by building one app per &quot;significant&quot; model, but I don&#39;t know where to draw the boundaries in my schema to separate it into apps - I have a lot of models with relatively complex relationships.\r\n\r\nI&#39;m hoping there&#39;s a common solution to this...", "title": "Django: &quot;projects&quot; vs &quot;apps&quot;", "view_count": 39181, "up_vote_count": 177, "answer_count": 6, "link": "https://stackoverflow.com/questions/4879036/django-projects-vs-apps", "code_snippet": ["<code>project.app</code>", "<code>myproduct.myproduct</code>", "<code>myproduct.myproduct</code>", "<code>django-admin.py startproject myproduct\ncd myproduct\nmkdir myproduct\ntouch myproduct/__init__.py\ntouch myproduct/models.py\ntouch myproduct/views.py\n</code>", "<code>views.py</code>", "<code>views.py</code>", "<code>widgets.py</code>", "<code>fields.py</code>", "<code>context_processors.py</code>", "<code>website</code>", "<code>fields.py</code>", "<code>inputtypes.py</code>", "<code>manage.py</code>", "<code>myproduct_app</code>", "<code>startproject</code>", "<code>startapp</code>", "<code>settings</code>", "<code>models</code>", "<code>site/\n    models.py\n    settings.py\n    tests.py\n    urls.py\n    views.py\n</code>", "<code>main</code>", "<code>INSTALLED_APPS='myproduct'</code>", "<code>project</code>", "<code>project.app</code>", "<code>main</code>"], "path": "stack.django"}, {"tags": ["django", "url", "rest"], "creation_date": 1222720195, "body_markdown": "I am currently defining regular expressions in order to capture parameters in a url, as described in the tutorial. How do I access parameters from the url as part the `HttpRequest` object? My `HttpRequest.GET` currently returns an empty `QueryDict` object. \r\n\r\nI&#39;d like to learn how to do this without a library so I can get to know Django better. ", "last_edit_date": 1444498978, "up_vote_count": 315, "link": "https://stackoverflow.com/questions/150505/capturing-url-parameters-in-request-get", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1222720303, "answer_id": 150518, "path": "stack.django.answer", "score": 481, "up_vote_count": 482, "is_accepted": true, "last_activity_date": 1354330351, "last_edit_date": 1354330351, "body_markdown": "If your url is something like `domain/search/?q=haha`, Then you would use `request.GET.get(&#39;q&#39;, &#39;&#39;)`.\r\n\r\n`q` is the parameter you want, And `&#39;&#39;` is the default value if `q` isn&#39;t found.\r\n\r\nIf you are instead just configuring your `URLconf`, Then your captures from the `regex` are passed to the function as arguments (or named arguments).\r\n\r\nSuch as:\r\n\r\n    (r&#39;^user/(?P&lt;username&gt;\\w{0,50})/$&#39;, views.profile_page,),\r\n\r\nThen in your `views.py` you would have \r\n\r\n    def profile_page(request, username):\r\n        # Rest of the method"}, {"tags": [], "down_vote_count": 1, "creation_date": 1222766361, "answer_id": 152349, "path": "stack.django.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1354329312, "last_edit_date": 1354329312, "body_markdown": "This is not exactly what you asked for, but [this snippet][1] is helpful for managing ``query_strings`` in ``templates``.\r\n\r\n\r\n  [1]: http://www.djangosnippets.org/snippets/826/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1222863110, "answer_id": 157295, "path": "stack.django.answer", "score": 267, "up_vote_count": 267, "is_accepted": false, "last_activity_date": 1222863613, "last_edit_date": 1222863613, "body_markdown": "To clarify camflan&#39;s explanation, let&#39;s suppose you have\r\n\r\n  - the rule ``url(regex=r&#39;^user/(?P&lt;username&gt;\\w{1,50})/$&#39;, view=&#39;views.profile_page&#39;)``\r\n  - a in incoming request for ``http://domain/user/thaiyoshi/?message=Hi``\r\n\r\nThe URL dispatcher rule will catch parts of the URL *path* (here ``&quot;user/thaiyoshi/&quot;``) and pass them to the view function along with the request object.\r\n\r\nThe query string (here ``message=Hi``) is parsed and parameters are stored as a ``QueryDict`` in ``request.GET``. No further matching or processing for HTTP GET parameters is done.\r\n\r\nThis view function would use both parts extracted from the URL path and a query parameter:\r\n\r\n    def profile_page(request, username=None):\r\n        user = User.objects.get(username=username)\r\n        message = request.GET.get(&#39;message&#39;)\r\n\r\nAs a side note, you&#39;ll find the request method (in this case ``&quot;GET&quot;``, and for submitted forms usually ``&quot;POST&quot;``) in ``request.method``. In some cases it&#39;s useful to check that it matches what you&#39;re expecting.\r\n\r\n**Update:** When deciding whether to use the URL path or the query parameters for passing information, the following may help:\r\n\r\n  - use the URL path for uniquely identifying resources, e.g. ``/blog/post/15/`` (not ``/blog/posts/?id=15``)\r\n  - use query parameters for changing the way the resource is displayed, e.g. ``/blog/post/15/?show_comments=1`` or ``/blog/posts/2008/?sort_by=date&amp;direction=desc``\r\n  - to make human friendly URLs, avoid using ID numbers and use e.g. dates, categories and/or slugs: ``/blog/post/2008/09/30/django-urls/``"}, {"tags": [], "down_vote_count": 0, "creation_date": 1290105602, "answer_id": 4218313, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1354329363, "last_edit_date": 1354329363, "body_markdown": "    def some_view(request, *args, **kwargs):\r\n        if kwargs.get(&#39;q&#39;, None):\r\n            # Do something here .."}, {"tags": [], "down_vote_count": 0, "creation_date": 1360029925, "answer_id": 14699001, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1392340389, "last_edit_date": 1392340389, "body_markdown": "I would like to share a tip that may save you some time.&lt;br/&gt;\r\nIf you plan to use something like this in your `urls.py` file:\r\n\r\n    url(r&#39;^(?P&lt;username&gt;\\w+)/$&#39;, views.profile_page,),\r\n\r\nWhich basically means `www.example.com/&lt;username&gt;`. Be sure to place it at the end of your URL entries, because otherwise, it is prone to cause conflicts with the URL entries that follow below, i.e. accessing one of them **will** give you the nice error: `User matching query does not exist.`&lt;br&gt; &lt;br&gt;\r\nI&#39;ve just experienced it myself; hope it helps!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1421827730, "answer_id": 28062342, "path": "stack.django.answer", "score": 34, "up_vote_count": 34, "is_accepted": false, "last_activity_date": 1421827730, "body_markdown": "Using GET\r\n\r\n    request.GET[&quot;id&quot;]\r\n\r\nUsing POST\r\n\r\n    request.POST[&quot;id&quot;]"}, {"tags": [], "down_vote_count": 2, "creation_date": 1493992455, "answer_id": 43806831, "path": "stack.django.answer", "score": 3, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1493992455, "body_markdown": "For situations where you only have the `request` object you can use `request.parser_context[&#39;kwargs&#39;][&#39;your_param&#39;]`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1507118731, "answer_id": 46564448, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1507118731, "body_markdown": "You have two common ways to do that in case your url looks like that:\r\n\r\n    https://domain/method/?a=x&amp;b=y\r\n\r\nv1:\r\n\r\nIf specific key is mandatory you can use:\r\n\r\n    key_a = request.GET[&#39;a&#39;]\r\n\r\nThis will return a value of `a` if key exists and an Exception if not.\r\n\r\nv2:\r\n\r\nIf your keys are optional:\r\n\r\n    request.GET.get(&#39;a&#39;)\r\n\r\nYou can try that without any argument this will not crash.\r\nSo you can wrap it with `try: except:` and return `HttpResponseBadRequest()` in example.\r\nThis is a simple way to make your code less complex, without using special Exceptions handling. "}], "title": "Capturing url parameters in request.GET", "view_count": 323815, "answer_count": 8, "code_snippet": ["<code>HttpRequest</code>", "<code>HttpRequest.GET</code>", "<code>QueryDict</code>", "<code>domain/search/?q=haha</code>", "<code>request.GET.get('q', '')</code>", "<code>q</code>", "<code>''</code>", "<code>q</code>", "<code>URLconf</code>", "<code>regex</code>", "<code>(r'^user/(?P&lt;username&gt;\\w{0,50})/$', views.profile_page,),\n</code>", "<code>views.py</code>", "<code>def profile_page(request, username):\n    # Rest of the method\n</code>", "<code>url(regex=r'^user/(?P&lt;username&gt;\\w{1,50})/$', view='views.profile_page')</code>", "<code>http://domain/user/thaiyoshi/?message=Hi</code>", "<code>\"user/thaiyoshi/\"</code>", "<code>message=Hi</code>", "<code>QueryDict</code>", "<code>request.GET</code>", "<code>def profile_page(request, username=None):\n    user = User.objects.get(username=username)\n    message = request.GET.get('message')\n</code>", "<code>\"GET\"</code>", "<code>\"POST\"</code>", "<code>request.method</code>", "<code>/blog/post/15/</code>", "<code>/blog/posts/?id=15</code>", "<code>/blog/post/15/?show_comments=1</code>", "<code>/blog/posts/2008/?sort_by=date&amp;direction=desc</code>", "<code>/blog/post/2008/09/30/django-urls/</code>", "<code>request.GET[\"id\"]\n</code>", "<code>request.POST[\"id\"]\n</code>", "<code>KeyError</code>", "<code>request.POST.get('id', '')</code>", "<code>def some_view(request, *args, **kwargs):\n    if kwargs.get('q', None):\n        # Do something here ..\n</code>", "<code>urls.py</code>", "<code>url(r'^(?P&lt;username&gt;\\w+)/$', views.profile_page,),\n</code>", "<code>www.example.com/&lt;username&gt;</code>", "<code>User matching query does not exist.</code>", "<code>query_strings</code>", "<code>templates</code>", "<code>request</code>", "<code>request.parser_context['kwargs']['your_param']</code>", "<code>https://domain/method/?a=x&amp;b=y\n</code>", "<code>key_a = request.GET['a']\n</code>", "<code>a</code>", "<code>request.GET.get('a')\n</code>", "<code>try: except:</code>", "<code>HttpResponseBadRequest()</code>"], "path": "stack.django"}, {"tags": ["javascript", "jquery", "ssl", "google-ajax-libraries"], "creation_date": 1234554211, "body_markdown": "There are a few ways to include jQuery and jQuery UI and I&#39;m wondering what people are using?\r\n\r\n - Google JSAPI\r\n - jQuery&#39;s site\r\n - your own site/server\r\n - another CDN\r\n\r\nI have recently been using Google JSAPI, but have found that it takes a long time to setup an SSL connection or even only to resolve google.com. I have been using the following for Google:\r\n\r\n    &lt;script src=&quot;https://www.google.com/jsapi&quot;&gt;&lt;/script&gt;\r\n    &lt;script&gt;\r\n    google.load(&#39;jquery&#39;, &#39;1.3.1&#39;);\r\n    &lt;/script&gt;\r\n\r\nI like the idea of using Google so it&#39;s cached when visiting other sites and to save bandwidth from our server, but if it keeps being the slow portion of the site, I may change the include.\r\n\r\nWhat do you use? Have you had any issues?\r\n\r\n**Edit:** Just visited jQuery&#39;s site and they use the following method:\r\n\r\n    &lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.3/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n**Edit2:** Here&#39;s how I&#39;ve been including jQuery without any problems for the last year:\r\n\r\n    &lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.4.3/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n\r\nThe difference is the removal of `http:`. By removing this, you don&#39;t need to worry about switching between http and https.", "last_edit_date": 1374623937, "up_vote_count": 236, "link": "https://stackoverflow.com/questions/547384/where-do-you-include-the-jquery-library-from-google-jsapi-cdn", "_childDocuments_": [{"tags": [], "down_vote_count": 3, "creation_date": 1234554462, "answer_id": 547401, "path": "stack.django.answer", "score": 14, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1234554462, "body_markdown": "jQuery 1.3.1 min is only 18k in size. I don&#39;t think that&#39;s too much of a hit to ask on the initial page load. It&#39;ll be cached after that. As a result, I host it myself."}, {"tags": [], "down_vote_count": 1, "creation_date": 1234554465, "answer_id": 547403, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1234555859, "last_edit_date": 1234555859, "body_markdown": "I just include the latest version from the jQuery site: [http://code.jquery.com/jquery-latest.pack.js][1]  It suits my needs and I never have to worry about updating.\r\n\r\nEDIT:For a major web app, certainly control it; download it and serve it yourself. But for my personal site, I could not care less. Things don&#39;t magically disappear, they are usually deprecated first. I keep up with it enough to know what to change for future releases.\r\n\r\n\r\n  [1]: http://code.jquery.com/jquery-latest.pack.js"}, {"tags": [], "down_vote_count": 1, "creation_date": 1234554478, "answer_id": 547404, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1234561072, "last_edit_date": 1234561072, "body_markdown": "I might be old-school about this, but I still frown on hotlinking.  Maybe Google is the exception, but in general, it&#39;s really just good manners to host the files on your own server.  "}, {"tags": [], "down_vote_count": 0, "creation_date": 1234555066, "answer_id": 547440, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1234555066, "body_markdown": "If you want to use Google, the direct link may be more responsive.  Each library has the path listed for the direct file.  This is the jQuery path\r\n\r\n    &lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n\r\n\r\nJust reread your question, is there a reason your are using https?  This is the script tag Google lists in their example\r\n\r\n    &lt;script src=&quot;http://www.google.com/jsapi&quot;&gt;&lt;/script&gt;\r\n    &lt;script&gt;\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234555101, "answer_id": 547444, "path": "stack.django.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1234555101, "body_markdown": "One reason you might want to host on an external server is to work around the browser limitations of concurent connections to particular server.\r\n\r\nHowever, given that the jQuery file you are using will likely not change very often, the browser cache will kick in and make that point moot for the most part.\r\n\r\nSecond reason to host it on external server is to lower the traffic to your own server.\r\n\r\nHowever, given the size of jQuery, chances are it will be a small part of your traffic. You should probably try to optimize your actual content."}, {"tags": [], "down_vote_count": 1, "creation_date": 1234555950, "answer_id": 547482, "path": "stack.django.answer", "score": 149, "up_vote_count": 150, "is_accepted": true, "last_activity_date": 1283978705, "last_edit_date": 1283978705, "body_markdown": "Without a doubt I choose to have JQuery served by Google API servers.  I didn&#39;t go with the jsapi method since I don&#39;t leverage any other Google API&#39;s, however if that ever changed then I would consider it...\r\n\r\n**First:** The Google api servers are distributed across the world instead of my single server location:  Closer servers usually means faster response times for the visitor.\r\n\r\n**Second:** Many people choose to have JQuery hosted on Google, so when a visitor comes to my site they may already have the JQuery script in their local cache.  Pre-cached content usually means faster load times for the visitor.\r\n\r\n**Third:** My web hosting company charges me for the bandwidth used.  No sense consuming 18k per user session if the visitor can get the same file elsewhere.\r\n\r\nI understand that I place a portion of trust on Google to serve the correct script file, and to be online and available.  Up to this point I haven&#39;t been disappointed with using Google and will continue this configuration until it makes sense not to.\r\n\r\n**One thing worth pointing out...** If you have a mixture of secure and insecure pages on your site you might want to dynamically change the Google source to avoid the usual warning you see when loading insecure content in a secure page:\r\n\r\nHere&#39;s what I came up with:\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n        document.write([\r\n            &quot;\\&lt;script src=&#39;&quot;,\r\n            (&quot;https:&quot; == document.location.protocol) ? &quot;https://&quot; : &quot;http://&quot;,\r\n            &quot;ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js&#39; type=&#39;text/javascript&#39;&gt;\\&lt;\\/script&gt;&quot; \r\n        ].join(&#39;&#39;));\r\n    &lt;/script&gt;\r\n\r\n**UPDATE 9/8/2010** -\r\nSome suggestions have been made to reduce the complexity of the code by removing the HTTP and HTTPS and simply use the following syntax:\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n        document.write(&quot;\\&lt;script src=&#39;//ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js&#39; type=&#39;text/javascript&#39;&gt;\\&lt;\\/script&gt;&quot;);\r\n    &lt;/script&gt;\r\n\r\nIn addition you could also change the url to reflect the jQuery major number if you wanted to make sure that the latest Major version of the jQuery libraries were loaded:\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n        document.write(&quot;\\&lt;script src=&#39;//ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js&#39; type=&#39;text/javascript&#39;&gt;\\&lt;\\/script&gt;&quot;);\r\n    &lt;/script&gt;\r\n\r\nFinally, if you don&#39;t want to use Google and would prefer jQuery you could use the following source path (keep in mind that jQuery doesn&#39;t support SSL connections):\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n        document.write(&quot;\\&lt;script src=&#39;http://code.jquery.com/jquery-latest.min.js&#39; type=&#39;text/javascript&#39;&gt;\\&lt;\\/script&gt;&quot;);\r\n    &lt;/script&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234556564, "answer_id": 547528, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1234556564, "body_markdown": "In addition to people who advices to host it on own server, I&#39;d proposed to keep it on separate domain (e.g. static.website.com) to allow browsers to load it into separate from other content thread. This tip also works for all static stuff, say images and css."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234557048, "answer_id": 547553, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1234557048, "body_markdown": "I have to vote -1 for the libraries hosted on Google.  They are collecting data, google analytics style, with their wrappers around these libraries.  At a minimum, I don&#39;t want a client browser doing more than I&#39;m asking it to do, much less anything else on the page.  At worse, this is Google&#39;s &quot;new version&quot; of not being evil -- using unobtrusive javascript to gather more usage data.\r\n\r\nNote: if they&#39;ve changed this practice, super.  But the last time I considered using their hosted libraries, I monitored the outbound http traffic on my site, and the periodic calls out to google servers were not something I expected to see."}, {"tags": [], "down_vote_count": 0, "creation_date": 1234557383, "answer_id": 547571, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1234557383, "body_markdown": "Pros: Host on Google has benefits\r\n\r\n - Probably faster (their servers are more optimised)\r\n - They handle the caching correctly - 1 year (we struggle to be allowed to make the changes to get the headers right on our servers)\r\n - Users who have already had a link to the Google-hosted version on another domain already have the file in their cache\r\n\r\nCons:\r\n\r\n - Some browsers may see it as XSS cross-domain and disallow the file.\r\n - Particularly users running the NoScript plugin for Firefox\r\n\r\nI wonder if you can INCLUDE from Google, and then check the presence of some Global variable, or somesuch, and if absence load from your server?"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234561859, "answer_id": 547835, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1234561859, "body_markdown": "If I am responsible for the &#39;live&#39; site I better be aware of everything that is going\r\non and **into** my site. For that reason I host the jquery-min version myself either on the same server or a static/external server but either way a location where only I (or my program/proxy) can update the library after having verified/tested every change"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234563039, "answer_id": 547891, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1234565810, "last_edit_date": 1234565810, "body_markdown": "There are a few issues here.  Firstly, the async load method you specified:\r\n\r\n    &lt;script type=&quot;text/javascript&quot; src=&quot;https://www.google.com/jsapi&quot;&gt;&lt;/script&gt;\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n      google.load(&#39;jquery&#39;, &#39;1.3.1&#39;);\r\n      google.setOnLoadCallback(function() {\r\n        // do stuff\r\n      });\r\n    &lt;/script&gt;\r\n\r\nhas a couple of issues.  Script tags pause the page load while they are retrieved (if necessary).  Now if they&#39;re slow to load this is bad but jQuery is small.  The real problem with the above method is that because the jquery.js load happens independently for many pages, they will finish loading and render before jquery has loaded so any jquery styling you do will be a **visible change for the user**.\r\n\r\nThe other way is:\r\n\r\n    &lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n\r\nTry some simple examples like, have a simple table and change the background of the cells to yellow with the setOnLoadCallback() method vs $(document).ready() with a static jquery.min.js load.  The second method will have no noticeable flicker.  The first will.  Personally I think that&#39;s not a good user experience.\r\n\r\nAs an example run this:\r\n\r\n    &lt;html&gt;\r\n    &lt;head&gt;\r\n      &lt;title&gt;Layout&lt;/title&gt;\r\n      &lt;style type=&quot;text/css&quot;&gt;\r\n        .odd { background-color: yellow; }\r\n      &lt;/style&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n    &lt;table&gt;\r\n      &lt;tr&gt;&lt;th&gt;One&lt;/th&gt;&lt;th&gt;Two&lt;/th&gt;&lt;/tr&gt;\r\n      &lt;tr&gt;&lt;td&gt;Three&lt;/td&gt;&lt;td&gt;Four&lt;/td&gt;&lt;/tr&gt;\r\n      &lt;tr&gt;&lt;td&gt;Five&lt;/td&gt;&lt;td&gt;Six&lt;/td&gt;&lt;/tr&gt;\r\n      &lt;tr&gt;&lt;td&gt;Seven&lt;/td&gt;&lt;td&gt;Nine&lt;/td&gt;&lt;/tr&gt;\r\n      &lt;tr&gt;&lt;td&gt;Nine&lt;/td&gt;&lt;td&gt;Ten&lt;/td&gt;&lt;/tr&gt;\r\n    &lt;/table&gt; \r\n    &lt;script src=&quot;http://www.google.com/jsapi&quot;&gt;&lt;/script&gt;\r\n    &lt;script&gt;\r\n      google.load(&quot;jquery&quot;, &quot;1.3.1&quot;);\r\n      google.setOnLoadCallback(function() {\r\n        $(function() {\r\n          $(&quot;tr:odd&quot;).addClass(&quot;odd&quot;);\r\n        });\r\n      });\r\n    &lt;/script&gt;\r\n    &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\nYou (should) see the table appear and then the rows go yellow.\r\n\r\nThe second problem with the google.load() method is that it only hosts a limited range of files.  This is a problem for jquery since it is extremely plug-in dependent.  If you try and include a jquery plugin with a `&lt;script src=&quot;...&quot;&gt;` tag and `google.load()` the plug-in will probably fail with messages of &quot;jQuery is not defined&quot; because it hasn&#39;t loaded yet.  I don&#39;t really see a way around this.\r\n\r\nThe third problem (with either method) is that they are one external load.  Assuming you have some plugins and your own Javascript code you&#39;re up to a minimum of two external requests to load your Javascript.  You&#39;re probably better off getting jquery, all relevant plug-ins and your own code and putting it into one minified file.\r\n\r\nFrom [Should You Use Google&#39;s Ajax Libraries API for Hosting?][1]:\r\n\r\n&gt; As to load times, you&#39;re actually\r\n&gt; loading two scripts - the jsapi script\r\n&gt; and the mootools script (the\r\n&gt; compressed version from above). So\r\n&gt; that is two connections, rather than\r\n&gt; one. In my experience, I found that\r\n&gt; the load time was actually 2-3 times\r\n&gt; slower than loading from my own\r\n&gt; personal shared server, even though it\r\n&gt; was coming from Google, and my version\r\n&gt; of the compressed file was a couple of\r\n&gt; K larger than Google&#39;s. This, even\r\n&gt; after the file had loaded and\r\n&gt; (presumably) cached. So for me, since\r\n&gt; the bandwidth doesn&#39;t matter much,\r\n&gt; isn&#39;t going to matter.\r\n\r\nLastly you have the potential problem of a paranoid browser flagging the request as some sort of XSS attempt.  It&#39;s not typically a problem with default settings but on corporate networks where the user may not have control over which browser they use let alone the security settings you may have a problem.\r\n\r\nSo in the end I can&#39;t really see me using the Google AJAX API for jQuery at least (the more &quot;complete&quot; APIs are a different story in some ways) much except to post examples here.\r\n\r\n\r\n  [1]: http://cxliv.org/2008/05/27/should_you_use_googles_ajax_libraries_api_for_hosting.php\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1234566463, "answer_id": 548045, "path": "stack.django.answer", "score": 7, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1234566463, "body_markdown": "I wouldn&#39;t want any public site that I developed to depend on any external site, and thus, I&#39;d host jQuery myself.\r\n\r\nAre you willing to have an outage on your site when the other (Google, jquery.com, etc.) goes down?  Less dependencies is the key."}, {"tags": [], "down_vote_count": 1, "creation_date": 1266323319, "answer_id": 2272815, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1266323319, "body_markdown": "In head:\r\n\r\n      (function() {\r\n        var jsapi = document.createElement(&#39;script&#39;); jsapi.type = &#39;text/javascript&#39;; jsapi.async = true;\r\n        jsapi.src = (&#39;https:&#39; == document.location.protocol ? &#39;https://&#39; : &#39;http://&#39;) + &#39;www.google.com/jsapi?key=YOUR KEY&#39;;\r\n        (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;head&#39;)[0]).appendChild(jsapi);\r\n      })();\r\n\r\n\r\nEnd of Body:\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n    google.load(&quot;jquery&quot;, &quot;version&quot;);\r\n    &lt;/script&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1301399696, "answer_id": 5472074, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1301399696, "body_markdown": "Here some useful resource, hope can help you to chose your CDN.\r\nMS has recently add a new domain for delivery Libraries trough their CDN.\r\n\r\nOld Format: http://ajax.microsoft.com/ajax/jQuery/jquery-1.5.1.js\r\nNew Format: http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.5.1.js\r\n\r\nThis should not send all cookies for microsoft.com.\r\nhttp://www.asp.net/ajaxlibrary/cdn.ashx#Using_jQuery_from_the_CDN_11\r\n\r\nHere some statistics about most popular technology used on the web across all technology.\r\nhttp://trends.builtwith.com/\r\n\r\nHope can help you to choose."}, {"tags": [], "down_vote_count": 0, "creation_date": 1435347889, "answer_id": 31080992, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1435347889, "body_markdown": "I will add this as a reason to locally host these files.  \r\n\r\nRecently a node in Southern California on TWC has not been able to resolve the ajax.googleapis.com domain (for users with IPv4) only so we are not getting the external files.  This has been intermittant up until yesterday (now it is persistant.) Because it was intermittant, I was having tons of problems troubleshooting SaaS user issues.  Spent countless hours trying to track why some users were having no issues with the software, and others were tanking.  In my usual debugging process I&#39;m not in the habit of asking a user if they have IPv6 turned off.  \r\n\r\nI stumbled on the issue because I myself was using this particular &quot;route&quot; to the file and also am using only IPV4.  I discovered the issue with developers tools telling me jquery wasn&#39;t loading, then started doing traceroutes etc... to find the real issue. \r\n\r\nAfter this, I will most likely never go back to externally hosted files because:  google doesn&#39;t have to go down for this to become a problem, and... any one of these nodes can be compromised with DNS hijacking and deliver malicious js instead of the actual file.  Always thought I was safe in that a google domain would never go down, now I know any node in between a user and the host can be a fail point."}, {"tags": [], "down_vote_count": 0, "creation_date": 1511277267, "answer_id": 47416441, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1511277267, "body_markdown": "I host it with my other js files on my own server, and, that&#39;s that point, combine and minify them (with django-compresser, here, but that&#39;s not the point) to be served as just one js file, with everything the site needs put into it. You&#39;ll need to serve your own js files anyway, so I see no reason to not add the extra jquery bytes there too - some more kbs are much more cheaper to transfer, than more requests to be made. You are not dependent to anyone, and as soon as your minified js is cached, you&#39;re super fast as well.\r\n\r\nOn first load, a CDN based solution might win, because you must load the additional jquery kilobytes from your own server (but, without an additional request). I doubt the difference is noticable, though. And then, on a first load with cleared cache, your own hosted solution will probably always be much faster, because of more requests (and DNS lookups) needed, to fetch the CDN jquery.\r\n\r\nI wonder how this point is almost never mentioned, and how CDNs seem to take over the world :) "}], "title": "Where do you include the jQuery library from? Google JSAPI? CDN?", "view_count": 272306, "answer_count": 16, "code_snippet": ["<code>&lt;script src=\"https://www.google.com/jsapi\"&gt;&lt;/script&gt;\n&lt;script&gt;\ngoogle.load('jquery', '1.3.1');\n&lt;/script&gt;\n</code>", "<code>&lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.3/jquery.min.js\"&gt;&lt;/script&gt;\n</code>", "<code>&lt;script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.4.3/jquery.min.js\"&gt;&lt;/script&gt;\n</code>", "<code>http:</code>", "<code>src</code>", "<code>&lt;script type=\"text/javascript\"&gt;\n    document.write([\n        \"\\&lt;script src='\",\n        (\"https:\" == document.location.protocol) ? \"https://\" : \"http://\",\n        \"ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js' type='text/javascript'&gt;\\&lt;\\/script&gt;\" \n    ].join(''));\n&lt;/script&gt;\n</code>", "<code>&lt;script type=\"text/javascript\"&gt;\n    document.write(\"\\&lt;script src='//ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js' type='text/javascript'&gt;\\&lt;\\/script&gt;\");\n&lt;/script&gt;\n</code>", "<code>&lt;script type=\"text/javascript\"&gt;\n    document.write(\"\\&lt;script src='//ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js' type='text/javascript'&gt;\\&lt;\\/script&gt;\");\n&lt;/script&gt;\n</code>", "<code>&lt;script type=\"text/javascript\"&gt;\n    document.write(\"\\&lt;script src='http://code.jquery.com/jquery-latest.min.js' type='text/javascript'&gt;\\&lt;\\/script&gt;\");\n&lt;/script&gt;\n</code>", "<code>document.write()</code>", "<code>&lt;script src=\"...\"&gt;&lt;/script&gt;</code>", "<code>http://googleapis</code>", "<code>https://googleapis</code>", "<code>http://googleapis</code>", "<code>&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.3.1/jquery.min.js\"&gt;&lt;/script&gt;\n</code>", "<code>&lt;script src=\"http://www.google.com/jsapi\"&gt;&lt;/script&gt;\n&lt;script&gt;\n</code>", "<code>&lt;script type=\"text/javascript\" src=\"https://www.google.com/jsapi\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n  google.load('jquery', '1.3.1');\n  google.setOnLoadCallback(function() {\n    // do stuff\n  });\n&lt;/script&gt;\n</code>", "<code>&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.3.1/jquery.min.js\"&gt;&lt;/script&gt;\n</code>", "<code>&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Layout&lt;/title&gt;\n  &lt;style type=\"text/css\"&gt;\n    .odd { background-color: yellow; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table&gt;\n  &lt;tr&gt;&lt;th&gt;One&lt;/th&gt;&lt;th&gt;Two&lt;/th&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Three&lt;/td&gt;&lt;td&gt;Four&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Five&lt;/td&gt;&lt;td&gt;Six&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Seven&lt;/td&gt;&lt;td&gt;Nine&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Nine&lt;/td&gt;&lt;td&gt;Ten&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt; \n&lt;script src=\"http://www.google.com/jsapi\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  google.load(\"jquery\", \"1.3.1\");\n  google.setOnLoadCallback(function() {\n    $(function() {\n      $(\"tr:odd\").addClass(\"odd\");\n    });\n  });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code>", "<code>&lt;script src=\"...\"&gt;</code>", "<code>google.load()</code>", "<code>  (function() {\n    var jsapi = document.createElement('script'); jsapi.type = 'text/javascript'; jsapi.async = true;\n    jsapi.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'www.google.com/jsapi?key=YOUR KEY';\n    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('head')[0]).appendChild(jsapi);\n  })();\n</code>", "<code>&lt;script type=\"text/javascript\"&gt;\ngoogle.load(\"jquery\", \"version\");\n&lt;/script&gt;\n</code>"], "path": "stack.django"}, {"tags": ["python", "datetime", "timezone"], "creation_date": 1313412944, "body_markdown": "**What I need to do**\r\n\r\nI have a timezone-unaware datetime object, to which I need to add a time zone in order to be able to compare it with other timezone-aware datetime objects.  I do not want to convert my entire application to timezone unaware for this one legacy case.\r\n\r\n**What I&#39;ve Tried**\r\n\r\nFirst, to demonstrate the problem:\r\n\r\n    Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) \r\n    [GCC 4.2.1 (Apple Inc. build 5646)] on darwin\r\n    Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\r\n    &gt;&gt;&gt; import datetime\r\n    &gt;&gt;&gt; import pytz\r\n    &gt;&gt;&gt; unaware = datetime.datetime(2011,8,15,8,15,12,0)\r\n    &gt;&gt;&gt; unaware\r\n    datetime.datetime(2011, 8, 15, 8, 15, 12)\r\n    &gt;&gt;&gt; aware = datetime.datetime(2011,8,15,8,15,12,0,pytz.UTC)\r\n    &gt;&gt;&gt; aware\r\n    datetime.datetime(2011, 8, 15, 8, 15, 12, tzinfo=&lt;UTC&gt;)\r\n    &gt;&gt;&gt; aware == unaware\r\n    Traceback (most recent call last):\r\n      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    TypeError: can&#39;t compare offset-naive and offset-aware datetimes\r\n\r\nFirst, I tried astimezone:\r\n\r\n    &gt;&gt;&gt; unaware.astimezone(pytz.UTC)\r\n    Traceback (most recent call last):\r\n      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    ValueError: astimezone() cannot be applied to a naive datetime\r\n    &gt;&gt;&gt;\r\n\r\nIt&#39;s not terribly surprising this failed, since it&#39;s actually trying to do a conversion.  Replace seemed like a better choice (as per https://stackoverflow.com/questions/4530069/python-how-to-get-a-value-of-datetime-today-that-is-timezone-aware):\r\n\r\n    &gt;&gt;&gt; unaware.replace(tzinfo=pytz.UTC)\r\n    datetime.datetime(2011, 8, 15, 8, 15, 12, tzinfo=&lt;UTC&gt;)\r\n    &gt;&gt;&gt; unaware == aware\r\n    Traceback (most recent call last):\r\n      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    TypeError: can&#39;t compare offset-naive and offset-aware datetimes\r\n    &gt;&gt;&gt; \r\n\r\nBut as you can see, replace seems to set the tzinfo, but not make the object aware.  I&#39;m getting ready to fall back to doctoring the input string to have a timezone before parsing it (I&#39;m using dateutil for parsing, if that matters), but that seems incredibly kludgy.\r\n\r\nAlso, I&#39;ve tried this in both python 2.6 and python 2.7, with the same results.\r\n\r\n\r\n**Context**\r\n\r\nI am writing a parser for some data files.  There is an old format I need to support where the date string does not have a timezone indicator.  I&#39;ve already fixed the data source, but I still need to support the legacy data format.  A one time conversion of the legacy data is not an option for various business BS reasons.  While in general, I do not like the idea of hard-coding a default timezone, in this case it seems like the best option.  I know with reasonable confidence that all the legacy data in question is in UTC, so I&#39;m prepared to accept the risk of defaulting to that in this case.\r\n", "last_edit_date": 1495540499, "up_vote_count": 304, "link": "https://stackoverflow.com/questions/7065164/how-to-make-an-unaware-datetime-timezone-aware-in-python", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1313413432, "answer_id": 7065242, "path": "stack.django.answer", "score": 362, "up_vote_count": 364, "is_accepted": true, "last_activity_date": 1396925223, "last_edit_date": 1396925223, "body_markdown": "In general, to make a naive datetime timezone-aware, use the [localize method][1]:\r\n\r\n    import datetime\r\n    import pytz\r\n\r\n    unaware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0)\r\n    aware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0, pytz.UTC)\r\n\r\n    now_aware = pytz.utc.localize(unaware)\r\n    assert aware == now_aware\r\n\r\nFor the UTC timezone, it is not really necessary to use `localize` since there is no daylight savings time calculation to handle:\r\n\r\n    now_aware = unaware.replace(tzinfo=pytz.UTC)\r\n\r\nworks. (`.replace` returns a new datetime; it does not modify `unaware`.)\r\n\r\n\r\n  [1]: http://pytz.sourceforge.net/#localized-times-and-date-arithmetic\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1321922072, "answer_id": 8220515, "path": "stack.django.answer", "score": 53, "up_vote_count": 54, "is_accepted": false, "last_activity_date": 1400187612, "last_edit_date": 1400187612, "body_markdown": "I had use from dt_aware to dt_unware\r\n\r\n    dt_unaware = dt_aware.replace(tzinfo=None)\r\n\r\nand dt_unware to dt_aware \r\n\r\n    from pytz import timezone\r\n    localtz = timezone(&#39;Europe/Lisbon&#39;)\r\n    dt_aware = localtz.localize(dt_unware)\r\n\r\nbut answer before is also a good solution."}, {"tags": [], "down_vote_count": 0, "creation_date": 1389812137, "answer_id": 21145908, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1447800144, "last_edit_date": 1495541905, "body_markdown": "This codifies @S&#233;rgio and @unutbu&#39;s [answers](https://stackoverflow.com/a/7065242/623735). It will &quot;just work&quot; with either a `pytz.timezone` object or an [IANA Time Zone](https://en.wikipedia.org/wiki/Tz_database) string.\r\n\r\n    def make_tz_aware(dt, tz=&#39;UTC&#39;, is_dst=None):\r\n        &quot;&quot;&quot;Add timezone information to a datetime object, only if it is naive.&quot;&quot;&quot;\r\n        tz = dt.tzinfo or tz\r\n        try:\r\n            tz = pytz.timezone(tz)\r\n        except AttributeError:\r\n            pass\r\n        return tz.localize(dt, is_dst=is_dst) \r\n\r\nThis seems like what `datetime.localize()` (or `.inform()` or `.awarify()`) should do, accept both strings and timezone objects for the tz argument and default to UTC if no time zone is specified."}, {"tags": [], "down_vote_count": 1, "creation_date": 1422372098, "answer_id": 28173891, "path": "stack.django.answer", "score": 29, "up_vote_count": 30, "is_accepted": false, "last_activity_date": 1476871801, "last_edit_date": 1476871801, "body_markdown": "I use this statement in Django to convert an unaware time to an aware:\r\n\r\n    from django.utils import timezone\r\n\r\n    dt_aware = timezone.make_aware(dt_unaware, timezone.get_current_timezone())"}, {"tags": [], "down_vote_count": 0, "creation_date": 1474846311, "answer_id": 39692814, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1474846311, "body_markdown": "In the format of unutbu&#39;s answer; I made a utility module that handles things like this, with more intuitive syntax. Can be installed with pip.\r\n\r\n\r\n    import datetime\r\n    import saturn\r\n\r\n    unaware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0)\r\n    now_aware = saturn.fix_naive(unaware)\r\n\r\n    now_aware_madrid = saturn.fix_naive(unaware, &#39;Europe/Madrid&#39;)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1484260223, "answer_id": 41624199, "path": "stack.django.answer", "score": 36, "up_vote_count": 36, "is_accepted": false, "last_activity_date": 1512911911, "last_edit_date": 1512911911, "body_markdown": "All of these examples use an external module, but you can achieve the same result using just the datetime module.\r\n\r\n    from datetime import datetime\r\n    from datetime import timezone\r\n    \r\n    dt = datetime.now()\r\n    dt.replace(tzinfo=timezone.utc)\r\n\r\n    print(dt.replace(tzinfo=timezone.utc).isoformat())\r\n    &#39;2017-01-12T22:11:31+00:00&#39;\r\n\r\nFewer dependencies and no pytz issues.\r\n\r\nNOTE: If you wish to use this with python3 and python2, you can use this as well for the timezone import (hardcoded for UTC):\r\n\r\n    try:\r\n        from datetime import timezone\r\n        utc = timezone.utc\r\n    except ImportError:\r\n        #Hi there python2 user\r\n        class UTC(tzinfo):\r\n            def utcoffset(self, dt):\r\n                return timedelta(0)\r\n            def tzname(self, dt):\r\n                return &quot;UTC&quot;\r\n            def dst(self, dt):\r\n                return timedelta(0)\r\n    utc = UTC()\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1490906470, "answer_id": 43127921, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1509658146, "last_edit_date": 1509658146, "body_markdown": "I agree with the previous answers, and is fine if you are ok to start in UTC. But I think it is also a common scenario for people to work with a tz aware value that has a **datetime that has a non UTC local timezone.**\r\n\r\nIf you were to just go by name, one would probably infer replace() will be applicable and produce the right datetime aware object.  This is not the case.\r\n\r\n**the replace( tzinfo=... ) seems to be random in its behaviour**.  It is therefore useless. Do not use this!\r\n\r\nlocalize is the correct function to use. Example:\r\n\r\n    localdatetime_aware = tz.localize(datetime_nonaware)\r\n\r\nOr a more complete example:\r\n\r\n    import pytz\r\n    from datetime import datetime\r\n    pytz.timezone(&#39;Australia/Melbourne&#39;).localize(datetime.now())\r\n\r\ngives me a timezone aware datetime value of the current local time:\r\n\r\n    datetime.datetime(2017, 11, 3, 7, 44, 51, 908574, tzinfo=&lt;DstTzInfo &#39;Australia/Melbourne&#39; AEDT+11:00:00 DST&gt;)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1498309096, "answer_id": 44736636, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1500682514, "last_edit_date": 1500682514, "body_markdown": "In order to add local timezone; (using dateutil)\r\n\r\n    from dateutil import tz\r\n    import datetime\r\n\r\n    dt_unaware = datetime.datetime(2017, 6, 24, 12, 24, 36)\r\n    \r\n    dt_aware = dt_unaware.replace(tzinfo=tz.tzlocal())\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1503370004, "answer_id": 45808157, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1503370004, "body_markdown": "two method I know purely\r\n\r\n    from datetime import datetime\r\n    import pytz\r\n\r\n    naive = datetime.now()\r\n    aware = naive.replace(tzinfo=pytz.UTC)\r\nor\r\n\r\n    aware = pytz.UTC.localize(naive)\r\nof course,you can use any timezone instead of UTC,"}], "title": "How to make an unaware datetime timezone aware in python", "view_count": 160269, "answer_count": 9, "code_snippet": ["<code>Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) \n[GCC 4.2.1 (Apple Inc. build 5646)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; import pytz\n&gt;&gt;&gt; unaware = datetime.datetime(2011,8,15,8,15,12,0)\n&gt;&gt;&gt; unaware\ndatetime.datetime(2011, 8, 15, 8, 15, 12)\n&gt;&gt;&gt; aware = datetime.datetime(2011,8,15,8,15,12,0,pytz.UTC)\n&gt;&gt;&gt; aware\ndatetime.datetime(2011, 8, 15, 8, 15, 12, tzinfo=&lt;UTC&gt;)\n&gt;&gt;&gt; aware == unaware\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can't compare offset-naive and offset-aware datetimes\n</code>", "<code>&gt;&gt;&gt; unaware.astimezone(pytz.UTC)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: astimezone() cannot be applied to a naive datetime\n&gt;&gt;&gt;\n</code>", "<code>&gt;&gt;&gt; unaware.replace(tzinfo=pytz.UTC)\ndatetime.datetime(2011, 8, 15, 8, 15, 12, tzinfo=&lt;UTC&gt;)\n&gt;&gt;&gt; unaware == aware\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can't compare offset-naive and offset-aware datetimes\n&gt;&gt;&gt; \n</code>", "<code>unaware.replace()</code>", "<code>None</code>", "<code>unaware</code>", "<code>.replace()</code>", "<code>datetime</code>", "<code>import datetime; datetime.datetime.now(datetime.timezone.utc)</code>", "<code>import datetime\nimport pytz\n\nunaware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0)\naware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0, pytz.UTC)\n\nnow_aware = pytz.utc.localize(unaware)\nassert aware == now_aware\n</code>", "<code>localize</code>", "<code>now_aware = unaware.replace(tzinfo=pytz.UTC)\n</code>", "<code>.replace</code>", "<code>unaware</code>", "<code>aware = datetime(..., tz)</code>", "<code>.localize()</code>", "<code>tz.localize(..., is_dst=None)</code>", "<code>dt_unaware = dt_aware.replace(tzinfo=None)\n</code>", "<code>from pytz import timezone\nlocaltz = timezone('Europe/Lisbon')\ndt_aware = localtz.localize(dt_unware)\n</code>", "<code>localtz.localize(dt_unware, is_dst=None)</code>", "<code>dt_unware</code>", "<code>localtz</code>", "<code>from datetime import datetime\nfrom datetime import timezone\n\ndt = datetime.now()\ndt.replace(tzinfo=timezone.utc)\n\nprint(dt.replace(tzinfo=timezone.utc).isoformat())\n'2017-01-12T22:11:31+00:00'\n</code>", "<code>try:\n    from datetime import timezone\n    utc = timezone.utc\nexcept ImportError:\n    #Hi there python2 user\n    class UTC(tzinfo):\n        def utcoffset(self, dt):\n            return timedelta(0)\n        def tzname(self, dt):\n            return \"UTC\"\n        def dst(self, dt):\n            return timedelta(0)\nutc = UTC()\n</code>", "<code>pytz</code>", "<code>pytz</code>", "<code>from datetime import timezone</code>", "<code>dt.replace(tzinfo=timezone.utc)</code>", "<code>dt</code>", "<code>from django.utils import timezone\n\ndt_aware = timezone.make_aware(dt_unaware, timezone.get_current_timezone())\n</code>", "<code>pytz.timezone</code>", "<code>def make_tz_aware(dt, tz='UTC', is_dst=None):\n    \"\"\"Add timezone information to a datetime object, only if it is naive.\"\"\"\n    tz = dt.tzinfo or tz\n    try:\n        tz = pytz.timezone(tz)\n    except AttributeError:\n        pass\n    return tz.localize(dt, is_dst=is_dst) \n</code>", "<code>datetime.localize()</code>", "<code>.inform()</code>", "<code>.awarify()</code>", "<code>localdatetime_aware = tz.localize(datetime_nonaware)\n</code>", "<code>import pytz\nfrom datetime import datetime\npytz.timezone('Australia/Melbourne').localize(datetime.now())\n</code>", "<code>datetime.datetime(2017, 11, 3, 7, 44, 51, 908574, tzinfo=&lt;DstTzInfo 'Australia/Melbourne' AEDT+11:00:00 DST&gt;)\n</code>", "<code>replace(tzinfo=...)</code>", "<code>-07:53</code>", "<code>-08:00</code>", "<code>import datetime\nimport saturn\n\nunaware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0)\nnow_aware = saturn.fix_naive(unaware)\n\nnow_aware_madrid = saturn.fix_naive(unaware, 'Europe/Madrid')\n</code>", "<code>from dateutil import tz\nimport datetime\n\ndt_unaware = datetime.datetime(2017, 6, 24, 12, 24, 36)\n\ndt_aware = dt_unaware.replace(tzinfo=tz.tzlocal())\n</code>", "<code>from datetime import datetime\nimport pytz\n\nnaive = datetime.now()\naware = naive.replace(tzinfo=pytz.UTC)\n</code>", "<code>aware = pytz.UTC.localize(naive)\n</code>"], "path": "stack.django"}, {"tags": ["python", "orm"], "creation_date": 1221022172, "body_markdown": "I&#39;m evaluating and looking at using CherryPy for a project that&#39;s basically a JavaScript front-end from the client-side (browser) that talks to a Python web service on the back-end. So, I really need something fast and lightweight on the back-end that I can implement using Python that then speaks to the PostgreSQL DB via an ORM (JSON to the browser).\r\n\r\nI&#39;m also looking at Django, which I like, since its ORM is built-in. However, I think Django might be a little more than I really need (i.e. more features than I really need == slower?).\r\n\r\nAnyone have any experience with different Python ORM solutions that can compare and contrast their features and functionality, speed, efficiency, etc.?", "last_edit_date": 1418081043, "up_vote_count": 184, "link": "https://stackoverflow.com/questions/53428/what-are-some-good-python-orm-solutions", "_childDocuments_": [{"tags": [], "down_vote_count": 3, "creation_date": 1221022613, "answer_id": 53440, "path": "stack.django.answer", "score": 1, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1221022613, "body_markdown": "I think you might look at:\r\n\r\n[Autumn][1]\r\n\r\n[Storm][2]\r\n\r\n\r\n  [1]: http://autumn-orm.org/\r\n  [2]: https://storm.canonical.com/"}, {"tags": [], "down_vote_count": 17, "creation_date": 1221023974, "answer_id": 53463, "path": "stack.django.answer", "score": -5, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1499374661, "last_edit_date": 1499374661, "body_markdown": "I&#39;d check out [SQLAlchemy][1] \r\n\r\nIt&#39;s really easy to use and the models you work with aren&#39;t bad at all. &lt;strike&gt;Django uses SQLAlchemy for it&#39;s ORM&lt;/strike&gt; but using it by itself lets you use it&#39;s full power.\r\n\r\nHere&#39;s a small example on creating and selecting orm objects\r\n\r\n    &gt;&gt;&gt; ed_user = User(&#39;ed&#39;, &#39;Ed Jones&#39;, &#39;edspassword&#39;)\r\n    &gt;&gt;&gt; session.add(ed_user)\r\n    &gt;&gt;&gt; our_user = session.query(User).filter_by(name=&#39;ed&#39;).first() \r\n    &gt;&gt;&gt; our_user\r\n        &lt;User(&#39;ed&#39;,&#39;Ed Jones&#39;, &#39;edspassword&#39;)&gt;\r\n\r\n\r\n  [1]: http://www.sqlalchemy.org/"}, {"tags": [], "down_vote_count": 2, "creation_date": 1221053825, "answer_id": 54046, "path": "stack.django.answer", "score": 79, "up_vote_count": 81, "is_accepted": true, "last_activity_date": 1420815040, "last_edit_date": 1420815040, "body_markdown": "SQLAlchemy is more full-featured and powerful (uses the DataMapper pattern).  Django ORM has a cleaner syntax and is easier to write for (ActiveRecord pattern).  I don&#39;t know about performance differences.\r\n\r\nSQLAlchemy also has a [declarative layer][1] that hides some complexity and gives it a ActiveRecord-style syntax more similar to the Django ORM.\r\n\r\nI wouldn&#39;t worry about Django being &quot;too heavy.&quot;  It&#39;s decoupled enough that you can use the ORM if you want without having to import the rest.\r\n\r\nThat said, if I were already using CherryPy for the web layer and just needed an ORM, I&#39;d probably opt for SQLAlchemy.\r\n\r\n\r\n  [1]: http://docs.sqlalchemy.org/en/rel_0_9/orm/extensions/declarative/index.html"}, {"tags": [], "down_vote_count": 1, "creation_date": 1221058978, "answer_id": 54300, "path": "stack.django.answer", "score": 27, "up_vote_count": 28, "is_accepted": false, "last_activity_date": 1221058978, "body_markdown": "I usually use [SQLAlchemy][1].  It&#39;s pretty powerful and is probably the most mature python ORM.\r\n\r\nIf you&#39;re planning on using CherryPy, you might also look into [dejavu][2] as it&#39;s by Robert Brewer (the guy that is the current CherryPy project leader).  I personally haven&#39;t used it, but I do know some people that love it.\r\n\r\n[SQLObject][3] is a little bit easier to use ORM than SQLAlchemy, but it&#39;s not quite as powerful.\r\n\r\nPersonally, I wouldn&#39;t use the Django ORM unless I was planning on writing the entire project in Django, but that&#39;s just me.\r\n\r\n\r\n  [1]: http://www.sqlalchemy.org/\r\n  [2]: http://www.aminus.net/dejavu\r\n  [3]: http://www.sqlobject.org"}, {"tags": [], "down_vote_count": 2, "creation_date": 1221104694, "answer_id": 55779, "path": "stack.django.answer", "score": 9, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1221104694, "body_markdown": "We use [Elixir][1] alongside SQLAlchemy and have liked it so far. Elixir puts a layer on top of SQLAlchemy that makes it look more like the &quot;ActiveRecord pattern&quot; counter parts.\r\n\r\n\r\n  [1]: http://elixir.ematia.de/trac/wiki"}, {"tags": [], "down_vote_count": 1, "creation_date": 1223534469, "answer_id": 186179, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1379012124, "last_edit_date": 1379012124, "body_markdown": "There is no conceivable way that the unused features in Django will give a performance penalty. Might just come in handy if you ever decide to upscale the project."}, {"tags": [], "down_vote_count": 4, "creation_date": 1229884580, "answer_id": 384781, "path": "stack.django.answer", "score": 76, "up_vote_count": 80, "is_accepted": false, "last_activity_date": 1354725963, "last_edit_date": 1354725963, "body_markdown": "[Storm][1] has arguably the simplest API:\r\n\r\n      from storm.locals import *\r\n      \r\n      class Foo:\r\n          __storm_table__ = &#39;foos&#39;\r\n          id = Int(primary=True)\r\n        \r\n    \r\n      class Thing:\r\n          __storm_table__ = &#39;things&#39;\r\n          id = Int(primary=True)\r\n          name = Unicode()\r\n          description = Unicode()\r\n          foo_id = Int()\r\n          foo = Reference(foo_id, Foo.id)\r\n    \r\n      db = create_database(&#39;sqlite:&#39;)\r\n      store = Store(db)\r\n      \r\n      foo = Foo()\r\n      store.add(foo)\r\n      thing = Thing()\r\n      thing.foo = foo\r\n      store.add(thing)\r\n      store.commit()\r\n\r\nAnd it makes it painless to drop down into raw SQL when you need to:\r\n\r\n    store.execute(&#39;UPDATE bars SET bar_name=? WHERE bar_id like ?&#39;, []) \r\n    store.commit()\r\n \r\n\r\n\r\n  [1]: https://storm.canonical.com/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1230918997, "answer_id": 407556, "path": "stack.django.answer", "score": 17, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1406730322, "last_edit_date": 1406730322, "body_markdown": "SQLAlchemy&#39;s [declarative][1] extension, which is becoming standard in 0.5, provides an all in one interface very much like that of Django or Storm.  It also integrates seamlessly with classes/tables configured using the datamapper style:\r\n\r\n    Base = declarative_base()\r\n\r\n    class Foo(Base):\r\n        __tablename__ = &#39;foos&#39;\r\n        id = Column(Integer, primary_key=True)\r\n\r\n    class Thing(Base):\r\n        __tablename__ = &#39;things&#39;\r\n\r\n        id = Column(Integer, primary_key=True)\r\n        name = Column(Unicode)\r\n        description = Column(Unicode)\r\n        foo_id = Column(Integer, ForeignKey(&#39;foos.id&#39;))\r\n        foo = relation(Foo)\r\n\r\n    engine = create_engine(&#39;sqlite://&#39;)\r\n\r\n    Base.metadata.create_all(engine)  # issues DDL to create tables\r\n\r\n    session = sessionmaker(bind=engine)()\r\n\r\n    foo = Foo()\r\n    session.add(foo)\r\n    thing = Thing(name=&#39;thing1&#39;, description=&#39;some thing&#39;)\r\n    thing.foo = foo  # also adds Thing to session\r\n    session.commit()\r\n\r\n  [1]: http://docs.sqlalchemy.org/en/rel_0_9/orm/extensions/declarative.html\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1269459467, "answer_id": 2510845, "path": "stack.django.answer", "score": 0, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1269459467, "body_markdown": "SQLAlchemy is very, very powerful. However it is not thread safe make sure you keep that in mind when working with cherrypy in thread-pool mode. "}, {"tags": [], "down_vote_count": 2, "creation_date": 1296930520, "answer_id": 4908742, "path": "stack.django.answer", "score": -1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1296930520, "body_markdown": "I used Storm + SQLite for a small project, and was pretty happy with it until I added multiprocessing. Trying to use the database from multiple processes resulted in a &quot;Database is locked&quot; exception. I switched to SQLAlchemy, and the same code worked with no problems."}, {"tags": [], "down_vote_count": 0, "creation_date": 1300750194, "answer_id": 5384974, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1300750194, "body_markdown": "This seems to be the canonical reference point for high-level database interaction in Python:\r\nhttp://wiki.python.org/moin/HigherLevelDatabaseProgramming\r\n\r\nFrom there, it looks like [Dejavu][1] implements Martin Fowler&#39;s DataMapper pattern fairly abstractly in Python.\r\n\r\n\r\n  [1]: http://www.aminus.net/dejavu"}, {"tags": [], "down_vote_count": 0, "creation_date": 1316141928, "answer_id": 7439694, "path": "stack.django.answer", "score": 89, "up_vote_count": 89, "is_accepted": false, "last_activity_date": 1357348813, "last_edit_date": 1357348813, "body_markdown": "If you&#39;re looking for lightweight and are already familiar with django-style declarative models, check out peewee: \r\nhttps://github.com/coleifer/peewee\r\n\r\nExample:\r\n\r\n    import datetime\r\n    from peewee import *\r\n    \r\n    class Blog(Model):\r\n        name = CharField()\r\n    \r\n    class Entry(Model):\r\n        blog = ForeignKeyField(Blog)\r\n        title = CharField()\r\n        body = TextField()\r\n        pub_date = DateTimeField(default=datetime.datetime.now)\r\n\r\n    # query it like django\r\n    Entry.filter(blog__name=&#39;Some great blog&#39;)\r\n\r\n    # or programmatically for finer-grained control\r\n    Entry.select().join(Blog).where(Blog.name == &#39;Some awesome blog&#39;)\r\n\r\nCheck the [docs][1] for more examples.\r\n\r\n\r\n  [1]: http://peewee.readthedocs.org/en/latest/"}], "title": "What are some good Python ORM solutions?", "view_count": 110128, "answer_count": 12, "code_snippet": ["<code>ORDER BY</code>", "<code>DESC</code>", "<code>import datetime\nfrom peewee import *\n\nclass Blog(Model):\n    name = CharField()\n\nclass Entry(Model):\n    blog = ForeignKeyField(Blog)\n    title = CharField()\n    body = TextField()\n    pub_date = DateTimeField(default=datetime.datetime.now)\n\n# query it like django\nEntry.filter(blog__name='Some great blog')\n\n# or programmatically for finer-grained control\nEntry.select().join(Blog).where(Blog.name == 'Some awesome blog')\n</code>", "<code>  from storm.locals import *\n\n  class Foo:\n      __storm_table__ = 'foos'\n      id = Int(primary=True)\n\n\n  class Thing:\n      __storm_table__ = 'things'\n      id = Int(primary=True)\n      name = Unicode()\n      description = Unicode()\n      foo_id = Int()\n      foo = Reference(foo_id, Foo.id)\n\n  db = create_database('sqlite:')\n  store = Store(db)\n\n  foo = Foo()\n  store.add(foo)\n  thing = Thing()\n  thing.foo = foo\n  store.add(thing)\n  store.commit()\n</code>", "<code>store.execute('UPDATE bars SET bar_name=? WHERE bar_id like ?', []) \nstore.commit()\n</code>", "<code>Base = declarative_base()\n\nclass Foo(Base):\n    __tablename__ = 'foos'\n    id = Column(Integer, primary_key=True)\n\nclass Thing(Base):\n    __tablename__ = 'things'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(Unicode)\n    description = Column(Unicode)\n    foo_id = Column(Integer, ForeignKey('foos.id'))\n    foo = relation(Foo)\n\nengine = create_engine('sqlite://')\n\nBase.metadata.create_all(engine)  # issues DDL to create tables\n\nsession = sessionmaker(bind=engine)()\n\nfoo = Foo()\nsession.add(foo)\nthing = Thing(name='thing1', description='some thing')\nthing.foo = foo  # also adds Thing to session\nsession.commit()\n</code>", "<code>&gt;&gt;&gt; ed_user = User('ed', 'Ed Jones', 'edspassword')\n&gt;&gt;&gt; session.add(ed_user)\n&gt;&gt;&gt; our_user = session.query(User).filter_by(name='ed').first() \n&gt;&gt;&gt; our_user\n    &lt;User('ed','Ed Jones', 'edspassword')&gt;\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "model-view-controller", "data-access-layer", "business-logic-layer"], "creation_date": 1348561386, "body_markdown": "I am writing a project in Django and I see that 80% of the code is in the file `models.py`. This code is confusing and, after a certain time, I cease to understand what is really happening.\r\n\r\nHere is what bothers me:\r\n\r\n 1. I find it ugly that my model level (which was supposed to be\r\n    responsible only for the work with data from a database) is also\r\n    sending email, walking on API to other services, etc. \r\n 2. Also, I find it unacceptable to place business logic in the view, because\r\n    this way it becomes difficult to control. For example, in my\r\n    application there are at least three ways to create new\r\n    instances of `User`, but technically it should create them uniformly. \r\n 3. I do not always notice when the methods and\r\n    properties of my models become non-deterministic and when they develop\r\n    side effects.\r\n\r\nHere is a simple example. At first, the `User` model was like this:\r\n\r\n    class User(db.Models):\r\n\r\n        def get_present_name(self):\r\n            return self.name or &#39;Anonymous&#39;\r\n\r\n        def activate(self):\r\n            self.status = &#39;activated&#39;\r\n            self.save()\r\n    \r\nOver time, it turned into this:\r\n\r\n    class User(db.Models):\r\n\r\n        def get_present_name(self): \r\n            # property became non-deterministic in terms of database\r\n            # data is taken from another service by api\r\n            return remote_api.request_user_name(self.uid) or &#39;Anonymous&#39; \r\n\r\n        def activate(self):\r\n            # method now has a side effect (send message to user)\r\n            self.status = &#39;activated&#39;\r\n            self.save()\r\n            send_mail(&#39;Your account is activated!&#39;, &#39;\u2026&#39;, [self.email])\r\n\r\n\r\nWhat I want is to separate entities in my code:\r\n\r\n1. **Entities of my database, database level: What contains my application?**\r\n2. **Entities of my application, business logic level: What can make my application?**\r\n\r\n\r\nWhat are the good practices to implement such an approach that can be applied in Django?", "last_edit_date": 1477138774, "up_vote_count": 295, "link": "https://stackoverflow.com/questions/12578908/separation-of-business-logic-and-data-access-in-django", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1348563501, "answer_id": 12579490, "path": "stack.django.answer", "score": 95, "up_vote_count": 96, "is_accepted": false, "last_activity_date": 1348565137, "last_edit_date": 1348565137, "body_markdown": "I usually implement a service layer in between views and models. This acts like your project&#39;s API and gives you a good helicopter view of what is going on. I inherited this practice from a colleague of mine that uses this layering technique a lot with Java projects (JSF), e.g:\r\n\r\n**models.py** \r\n\r\n    class Book:\r\n       author = models.ForeignKey(User)\r\n       title = models.CharField(max_length=125)\r\n    \r\n       class Meta:\r\n           app_label = &quot;library&quot;\r\n\r\n\r\n**services.py**\r\n\r\n    from library.models import Book\r\n    \r\n    def get_books(limit=None, **filters):\r\n        &quot;&quot;&quot; simple service function for retrieving books can be widely extended &quot;&quot;&quot;\r\n        if limit:\r\n            return Book.objects.filter(**filters)[:limit]\r\n        return Book.objects.filter(**filters)\r\n\r\n**views.py**\r\n\r\n    from library.services import get_books\r\n    \r\n    class BookListView(ListView):\r\n        &quot;&quot;&quot; simple view, e.g. implement a _build and _apply filters function &quot;&quot;&quot;\r\n        queryset = get_books()\r\n\r\n&gt; Mind you, I usually take models, views and services to module level and\r\n&gt; separate even further depending on the project&#39;s size"}, {"tags": [], "down_vote_count": 5, "creation_date": 1348566037, "answer_id": 12580247, "path": "stack.django.answer", "score": -1, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1348566037, "body_markdown": "Django is designed to be easely used to deliver web pages. If you are not confortable with this perhaps you should use another solution.\r\n\r\nI&#39;m writting the root or common operations on the model (to have the same interface) and the others on the controller of the model. If I need an operation from other model I import its controller.\r\n\r\nThis approach it&#39;s enough for me and the complexity of my applications.\r\n\r\nHedde&#39;s response is an example that shows the flexibility of django and python itself.  \r\n\r\nVery interesting question anyway!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1348584012, "answer_id": 12585348, "path": "stack.django.answer", "score": 19, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1348584012, "body_markdown": "Django employs a slightly modified kind of MVC. There&#39;s no concept of a &quot;controller&quot; in Django. The closest proxy is a &quot;view&quot;, which tends to cause confusion with MVC converts because in MVC a view is more like Django&#39;s &quot;template&quot;.\r\n\r\nIn Django, a &quot;model&quot; is not merely a database abstraction. In some respects, it shares duty with the Django&#39;s &quot;view&quot; as the controller of MVC. It holds the entirety of behavior associated with an instance. If that instance needs to interact with an external API as part of it&#39;s behavior, then that&#39;s still model code. In fact, models aren&#39;t required to interact with the database at all, so you could conceivable have models that entirely exist as an interactive layer to an external API. It&#39;s a much more free concept of a &quot;model&quot;."}, {"tags": [], "down_vote_count": 0, "creation_date": 1350026191, "answer_id": 12854081, "path": "stack.django.answer", "score": 48, "up_vote_count": 48, "is_accepted": false, "last_activity_date": 1350421934, "last_edit_date": 1495540499, "body_markdown": "First of all, [Don&#39;t repeat yourself][1].\r\n\r\nThen, please be careful not to overengineer, sometimes it is just a waste of time, and makes someone lose focus on what is important. Review the [zen of python][9] from time to time.\r\n\r\n__Take a look at active projects__\r\n\r\n - more people = more need to organize properly\r\n - the [django repository][6] they have a straightforward structure.\r\n - the [pip repository][5] they have a straigtforward directory structure.\r\n - the [fabric repository][7] is also a good one to look at.\r\n\r\n- you can place all your models under `yourapp/models/logicalgroup.py`\r\n - e.g `User`, `Group` and related models can go under `yourapp/models/users.py`\r\n - e.g `Poll`, `Question`, `Answer` ... could go under `yourapp/models/polls.py`\r\n - load what you need in `__all__` inside of `yourapp/models/__init__.py`\r\n\r\n\r\n[__More about MVC__][12]\r\n\r\n- model is your data\r\n - this includes your actual data\r\n - this also includes your session / cookie / cache / fs / index data\r\n- user interacts with controller to manipulate the model\r\n - this could be an API, or a view that saves/updates your data\r\n - this can be tuned with `request.GET` / `request.POST` ...etc\r\n - think __paging__ or __filtering__ too.\r\n- the data updates the view\r\n - the templates take the data and format it accordingly\r\n - APIs even w/o templates are part of the view; e.g. `tastypie` or `piston`\r\n - this should also account for the middleware.\r\n\r\n\r\n__Take advantage of [middleware][13] / [templatetags][14]__\r\n\r\n- If you need some work to be done for each request, middleware is one way to go.\r\n - e.g. adding timestamps\r\n - e.g. updating metrics about page hits\r\n - e.g. populating a cache\r\n- If you have snippets of code that always reoccur for formatting objects, templatetags are good.\r\n - e.g. active tab / url breadcrumbs\r\n\r\n\r\n__Take advantage of [model managers][2]__\r\n\r\n - creating `User` can go in a `UserManager(models.Manager)`.\r\n - gory details for instances should go on the `models.Model`.\r\n - gory details for `queryset` could go in a `models.Manager`.\r\n - you might want to create a `User` one at a time, so you may think that it should live on the model itself, but when creating the object, you probably don&#39;t have all the details:\r\n\r\nExample:\r\n\r\n    class UserManager(models.Manager):\r\n       def create_user(self, username, ...):\r\n          # plain create\r\n       def create_superuser(self, username, ...):\r\n          # may set is_superuser field.\r\n       def activate(self, username):\r\n          # may use save() and send_mail()\r\n       def activate_in_bulk(self, queryset):\r\n          # may use queryset.update() instead of save()\r\n          # may use send_mass_mail() instead of send_mail()\r\n \r\n__Make use of forms where possible__\r\n\r\nA lot of boilerplate code can be eliminated if you have forms that map to a model. The [`ModelForm documentation`][15] is pretty good. Separating code for forms from model code can be good if you have a lot of customization (or sometimes avoid cyclic import errors for more advanced uses).\r\n \r\n\r\n__Use [management commands][3] when possible__\r\n\r\n - e.g. `yourapp/management/commands/createsuperuser.py`\r\n - e.g. `yourapp/management/commands/activateinbulk.py`\r\n\r\n\r\n__if you have business logic, you can separate it out__\r\n\r\n - `django.contrib.auth` [uses backends][4], just like db has a backend...etc.\r\n - add a `setting` for your business logic (e.g. `AUTHENTICATION_BACKENDS`)\r\n - you could use `django.contrib.auth.backends.RemoteUserBackend`\r\n - you could use `yourapp.backends.remote_api.RemoteUserBackend`\r\n - you could use `yourapp.backends.memcached.RemoteUserBackend`\r\n - delegate the difficult business logic to the backend\r\n - make sure to set the expectation right on the input/output.\r\n - changing business logic is as simple as changing a setting :)\r\n\r\nbackend example:\r\n\r\n    class User(db.Models):\r\n        def get_present_name(self): \r\n            # property became not deterministic in terms of database\r\n            # data is taken from another service by api\r\n            return remote_api.request_user_name(self.uid) or &#39;Anonymous&#39; \r\n\r\ncould become:\r\n\r\n    class User(db.Models):\r\n       def get_present_name(self):\r\n          for backend in get_backends():\r\n             try:\r\n                return backend.get_present_name(self)\r\n             except: # make pylint happy.\r\n                pass\r\n          return None\r\n\r\n\r\n__more about design patterns__\r\n\r\n- there&#39;s already a good question about [design patterns][10]\r\n- a very [good video about practical design patterns][11]\r\n- django&#39;s backends are obvious use of delegation design pattern.\r\n\r\n\r\n__more about interface boundaries__\r\n\r\n- Is the code you want to use really part of the models? -&gt; `yourapp.models`\r\n- Is the code part of business logic? -&gt; `yourapp.vendor`\r\n- Is the code part of generic tools / libs? -&gt; `yourapp.libs`\r\n- Is the code part of business logic libs? -&gt; `yourapp.libs.vendor` or `yourapp.vendor.libs`\r\n- Here is a good one: can you test your code independently?\r\n - yes, good :)\r\n - no, you may have an interface problem\r\n - when there is clear separation, unittest should be a breeze with [the use of mocking][8]\r\n- Is the separation logical?\r\n - yes, good :)\r\n - no, you may have trouble testing those logical concepts separately.\r\n- Do you think you will need to refactor when you get 10x more code?\r\n - yes, no good, no bueno, refactor could be a lot of work\r\n - no, that&#39;s just awesome!\r\n\r\n\r\n\r\n__In short, you could have__\r\n\r\n- `yourapp/core/backends.py`\r\n- `yourapp/core/models/__init__.py`\r\n- `yourapp/core/models/users.py`\r\n- `yourapp/core/models/questions.py`\r\n- `yourapp/core/backends.py`\r\n- `yourapp/core/forms.py`\r\n- `yourapp/core/handlers.py`\r\n- `yourapp/core/management/commands/__init__.py`\r\n- `yourapp/core/management/commands/closepolls.py`\r\n- `yourapp/core/management/commands/removeduplicates.py`\r\n- `yourapp/core/middleware.py`\r\n- `yourapp/core/signals.py`\r\n- `yourapp/core/templatetags/__init__.py`\r\n- `yourapp/core/templatetags/polls_extras.py`\r\n- `yourapp/core/views/__init__.py`\r\n- `yourapp/core/views/users.py`\r\n- `yourapp/core/views/questions.py`\r\n- `yourapp/core/signals.py`\r\n- `yourapp/lib/utils.py`\r\n- `yourapp/lib/textanalysis.py`\r\n- `yourapp/lib/ratings.py`\r\n- `yourapp/vendor/backends.py`\r\n- `yourapp/vendor/morebusinesslogic.py`\r\n- `yourapp/vendor/handlers.py`\r\n- `yourapp/vendor/middleware.py`\r\n- `yourapp/vendor/signals.py`\r\n- `yourapp/tests/test_polls.py`\r\n- `yourapp/tests/test_questions.py`\r\n- `yourapp/tests/test_duplicates.py`\r\n- `yourapp/tests/test_ratings.py`\r\n\r\nor anything else that helps you; finding the __interfaces you need__ and the __boundaries__ will help you.\r\n\r\n\r\n[1]: https://docs.djangoproject.com/en/dev/misc/design-philosophies/\r\n[2]: https://docs.djangoproject.com/en/dev/topics/db/managers/\r\n[3]: https://docs.djangoproject.com/en/dev/howto/custom-management-commands/\r\n[4]: https://docs.djangoproject.com/en/dev/howto/auth-remote-user/\r\n[5]: https://github.com/pypa/pip\r\n[6]: https://github.com/django/django\r\n[7]: https://github.com/fabric/fabric\r\n[8]: http://www.voidspace.org.uk/python/mock/\r\n[9]: http://www.python.org/dev/peps/pep-0020/\r\n[10]: https://stackoverflow.com/questions/606448/python-design-patterns\r\n[11]: http://blip.tv/oreilly-promos/practical-python-patterns-3965008\r\n[12]: http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\r\n[13]: https://docs.djangoproject.com/en/dev/topics/http/middleware/\r\n[14]: https://docs.djangoproject.com/en/dev/howto/custom-template-tags/\r\n[15]: https://docs.djangoproject.com/en/dev/topics/forms/modelforms/"}, {"tags": [], "down_vote_count": 2, "creation_date": 1350039546, "answer_id": 12857584, "path": "stack.django.answer", "score": 406, "up_vote_count": 408, "is_accepted": true, "last_activity_date": 1519828831, "last_edit_date": 1519828831, "body_markdown": "It seems like you are asking about the difference between the *data model* and the *domain model* \u2013&#160;the latter is where you can find the business logic and entities as perceived by your end user, the former is where you actually store your data. \r\n\r\nFurthermore, I&#39;ve interpreted the 3rd part of your question as: how to notice failure to keep these models separate. \r\n\r\nThese are two very different concepts and it&#39;s always hard to keep them separate. However, there are some common patterns and tools that can be used for this purpose. \r\n\r\n## About the Domain Model\r\n\r\nThe first thing you need to recognize is that your domain model is not really about data; it is about *actions* and *questions* such as &quot;activate this user&quot;, &quot;deactivate this user&quot;, &quot;which users are currently activated?&quot;, and &quot;what is this user&#39;s name?&quot;. In classical terms: it&#39;s about *queries* and *commands*. \r\n\r\n\r\n## Thinking in Commands\r\n\r\nLet&#39;s start by looking at the commands in your example: &quot;activate this user&quot; and &quot;deactivate this user&quot;. The nice thing about commands is that they can easily be expressed by small given-when-then scenario&#39;s: \r\n\r\n&gt; **given** an inactive user &lt;br/&gt;\r\n&gt; **when** the admin activates this user &lt;br/&gt;\r\n&gt; **then** the user becomes active &lt;br/&gt;\r\n&gt; **and** a confirmation e-mail is sent to the user &lt;br/&gt;\r\n&gt; **and** an entry is added to the system log&lt;br/&gt;\r\n&gt;  (etc. etc.)\r\n\r\nSuch scenario&#39;s are useful to see how different parts of your infrastructure can be affected by a single command \u2013&#160;in this case your database (some kind of &#39;active&#39; flag), your mail server, your system log, etc. \r\n\r\nSuch scenario&#39;s also really help you in setting up a Test Driven Development environment. \r\n\r\nAnd finally, thinking in commands really helps you create a task-oriented application. Your users will appreciate this :-)\r\n\r\n\r\n## Expressing Commands\r\n\r\nDjango provides two easy ways of expressing commands; they are both valid options and it is not unusual to mix the two approaches. \r\n\r\n### The service layer\r\n\r\nThe *service module* has already been [described by @Hedde](https://stackoverflow.com/a/12579490/383793). Here you define a separate module and each command is represented as a function. \r\n\r\n**services.py**\r\n\r\n    def activate_user(user_id):\r\n        user = User.objects.get(pk=user_id)\r\n\r\n        # set active flag\r\n        user.active = True\r\n        user.save()\r\n\r\n        # mail user\r\n        send_mail(...)\r\n\r\n        # etc etc\r\n\r\n### Using forms\r\n\r\nThe other way is to use a Django Form for each command. I prefer this approach, because it combines multiple closely related aspects:\r\n\r\n- execution of the command (what does it do?)\r\n- validation of the command parameters (can it do this?)\r\n- presentation of the command (how can I do this?)\r\n\r\n**forms.py**\r\n\r\n    class ActivateUserForm(forms.Form):\r\n\r\n        user_id = IntegerField(widget = UsernameSelectWidget, verbose_name=&quot;Select a user to activate&quot;)\r\n        # the username select widget is not a standard Django widget, I just made it up\r\n\r\n        def clean_user_id(self):\r\n            user_id = self.cleaned_data[&#39;user_id&#39;]\r\n            if User.objects.get(pk=user_id).active:\r\n                raise ValidationError(&quot;This user cannot be activated&quot;)\r\n            # you can also check authorizations etc. \r\n            return user_id\r\n\r\n        def execute(self):\r\n            &quot;&quot;&quot;\r\n            This is not a standard method in the forms API; it is intended to replace the \r\n            &#39;extract-data-from-form-in-view-and-do-stuff&#39; pattern by a more testable pattern. \r\n            &quot;&quot;&quot;\r\n            user_id = self.cleaned_data[&#39;user_id&#39;]\r\n\r\n            user = User.objects.get(pk=user_id)\r\n\r\n            # set active flag\r\n            user.active = True\r\n            user.save()\r\n\r\n            # mail user\r\n            send_mail(...)\r\n\r\n            # etc etc\r\n\r\n\r\n## Thinking in Queries\r\n\r\nYou example did not contain any queries, so I took the liberty of making up a few useful queries. I prefer to use the term &quot;question&quot;, but queries is the classical terminology. Interesting queries are: &quot;What is the name of this user?&quot;, &quot;Can this user log in?&quot;, &quot;Show me a list of deactivated users&quot;, and &quot;What is the geographical distribution of deactivated users?&quot; \r\n\r\nBefore embarking on answering these queries, you should always ask yourself two questions: is this a *presentational* query just for my templates, and/or a *business logic* query tied to executing my commands, and/or a *reporting* query. \r\n\r\nPresentational queries are merely made to improve the user interface. The answers to business logic queries directly affect the execution of your commands. Reporting queries are merely for analytical purposes and have looser time constraints. These categories are not mutually exclusive. \r\n\r\nThe other question is: &quot;do I have complete control over the answers?&quot; For example, when querying the user&#39;s name (in this context)  we do not have any control over the outcome, because we rely on an external API. \r\n\r\n\r\n## Making Queries\r\n\r\nThe most basic query in Django is the use of the Manager object: \r\n\r\n    User.objects.filter(active=True)\r\n\r\nOf course, this only works if the data is actually represented in your data model. This is not always the case. In those cases, you can consider the options below. \r\n\r\n### Custom tags and filters\r\n\r\nThe first alternative is useful for queries that are merely presentational: custom tags and template filters. \r\n\r\n**template.html**\r\n\r\n    &lt;h1&gt;Welcome, {{ user|friendly_name }}&lt;/h1&gt;\r\n\r\n**template_tags.py**\r\n\r\n    @register.filter\r\n    def friendly_name(user):\r\n        return remote_api.get_cached_name(user.id)\r\n\r\n### Query methods \r\n\r\nIf your query is not merely presentational, you could add queries to your **services.py** (if you are using that), or introduce a **queries.py** module: \r\n\r\n**queries.py**\r\n\r\n    def inactive_users():\r\n        return User.objects.filter(active=False)\r\n\r\n\r\n    def users_called_publysher():\r\n        for user in User.objects.all():\r\n            if remote_api.get_cached_name(user.id) == &quot;publysher&quot;:\r\n                yield user \r\n\r\n\r\n### Proxy models\r\n\r\nProxy models are very useful in the context of business logic and reporting. You basically define an enhanced subset of your model. You can override a Manager\u2019s base QuerySet by overriding the [``Manager.get_queryset()``][1] method. \r\n\r\n**models.py**\r\n\r\n    class InactiveUserManager(models.Manager):\r\n        def get_queryset(self):\r\n            query_set = super(InactiveUserManager, self).get_queryset()\r\n            return query_set.filter(active=False)\r\n\r\n    class InactiveUser(User):\r\n        &quot;&quot;&quot;\r\n        &gt;&gt;&gt; for user in InactiveUser.objects.all():\r\n        \u2026        assert user.active is False \r\n        &quot;&quot;&quot;\r\n\r\n        objects = InactiveUserManager()\r\n        class Meta:\r\n            proxy = True\r\n\r\n\r\n\r\n### Query models\r\n\r\nFor queries that are inherently complex, but are executed quite often, there is the possibility of query models. A query model is a form of denormalization where relevant data for a single query is stored in a separate model. The trick of course is to keep the denormalized model in sync with the primary model. Query models can only be used if changes are entirely under your control. \r\n\r\n**models.py**\r\n\r\n    class InactiveUserDistribution(models.Model):\r\n        country = CharField(max_length=200)\r\n        inactive_user_count = IntegerField(default=0)\r\n\r\n\r\nThe first option is to update these models in your commands. This is very useful if these models are only changed by one or two commands. \r\n\r\n**forms.py**\r\n\r\n    class ActivateUserForm(forms.Form):\r\n        # see above\r\n       \r\n        def execute(self):\r\n            # see above\r\n            query_model = InactiveUserDistribution.objects.get_or_create(country=user.country)\r\n            query_model.inactive_user_count -= 1\r\n            query_model.save()\r\n\r\n\r\nA better option would be to use custom signals. These signals are of course emitted by your commands. Signals have the advantage that you can keep multiple query models in sync with your original model. Furthermore, signal processing can be offloaded to background tasks, using Celery or similar frameworks. \r\n\r\n**signals.py**\r\n\r\n    user_activated = Signal(providing_args = [&#39;user&#39;])\r\n    user_deactivated = Signal(providing_args = [&#39;user&#39;])\r\n\r\n\r\n**forms.py**\r\n\r\n    class ActivateUserForm(forms.Form):\r\n        # see above\r\n       \r\n        def execute(self):\r\n            # see above\r\n            user_activated.send_robust(sender=self, user=user)\r\n\r\n**models.py**\r\n\r\n    class InactiveUserDistribution(models.Model):\r\n        # see above\r\n\r\n    @receiver(user_activated)\r\n    def on_user_activated(sender, **kwargs):\r\n            user = kwargs[&#39;user&#39;]\r\n            query_model = InactiveUserDistribution.objects.get_or_create(country=user.country)\r\n            query_model.inactive_user_count -= 1\r\n            query_model.save()\r\n        \r\n\r\n## Keeping it clean\r\n\r\nWhen using this approach, it becomes ridiculously easy to determine if your code stays clean. Just follow these guidelines:\r\n\r\n- Does my model contain methods that do more than managing database state? You should extract a command. \r\n- Does my model contain properties that do not map to database fields? You should extract a query. \r\n- Does my model reference infrastructure that is not my database (such as mail)? You should extract a command.\r\n\r\nThe same goes for views (because views often suffer from the same problem). \r\n\r\n- Does my view actively manage database models? You should extract a command.\r\n\r\n\r\n## Some References\r\n\r\n[Django documentation: proxy models](https://docs.djangoproject.com/en/dev/topics/db/models/#proxy-models)\r\n\r\n[Django documentation: signals](https://docs.djangoproject.com/en/dev/topics/signals/)\r\n\r\n[Architecture: Domain Driven Design](http://www.amazon.com/gp/product/0321125215/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321125215&amp;linkCode=as2&amp;tag=dnd05-20)\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/2.0/topics/db/managers/#modifying-a-manager-s-initial-queryset"}, {"tags": [], "down_vote_count": 0, "creation_date": 1350403342, "answer_id": 12918845, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1350458099, "last_edit_date": 1350458099, "body_markdown": "In Django, MVC structure is as Chris Pratt said, different from classical MVC model used in other frameworks, I think the main reason for doing this is avoiding a too strict application structure, like happens in others MVC frameworks like CakePHP.\r\n\r\nIn Django, MVC was implemented in the following way:\r\n\r\nView layer is splitted in two. The views should be used only to manage HTTP requests, they are called and respond to them. Views communicate with the rest of your application (forms, modelforms, custom classes, of in simple cases directly with models).\r\nTo create the interface we use Templates. Templates are string-like to Django, it maps a context into them, and this context was communicated to the view by the application (when view asks).\r\n\r\nModel layer gives encapsulation, abstraction, validation, intelligence and makes your data object-oriented (they say someday DBMS will also). This doesn&#39;t means that you should make huge models.py files (in fact a very good advice is to split your models in different files, put them into a folder called &#39;models&#39;, make an &#39;\\__init__.py&#39; file into this folder where you import all your models and finally use the attribute &#39;app_label&#39; of models.Model class). Model should abstract you from operating with data, it will make your application simpler. You should also, if required, create external classes, like &quot;tools&quot; for your models.You can also use heritage in models, setting the &#39;abstract&#39; attribute of your model&#39;s Meta class to &#39;True&#39;.\r\n\r\nWhere is the rest? Well, small web applications generally are a sort of an interface to data, in some small program cases using views to query or insert data would be enough. More common cases will use Forms or ModelForms, which are actually &quot;controllers&quot;. This is not other than a practical solution to a common problem, and a very fast one. It&#39;s what a website use to do.\r\n\r\nIf Forms are not enogh for you, then you should create your own classes to do the magic, a very good example of this is admin application: you can read ModelAmin code, this actually works as a controller. There is not a standard structure, I suggest you to examine existing Django apps, it depends on each case. This is what Django developers intended, you can add xml parser class, an API connector class, add Celery for performing tasks, twisted for a reactor-based application, use only the ORM, make a web service, modify the admin application and more... It&#39;s your responsability to make good quality code, respect MVC philosophy or not, make it module based and creating your own abstraction layers. It&#39;s very flexible.\r\n\r\nMy advice: read as much code as you can, there are lots of django applications around, but don&#39;t take them so seriously. Each case is different, patterns and theory helps, but not always, this is an imprecise cience, django just provide you good tools that you can use to aliviate some pains (like admin interface, web form validation, i18n, observer pattern implementation, all the previously mentioned and others), but good designs come from experienced designers.\r\n\r\nPS.: use &#39;User&#39; class from auth application (from standard django), you can make for example user profiles, or at least read its code, it will be useful for your case."}, {"tags": [], "down_vote_count": 0, "creation_date": 1395004030, "answer_id": 22443027, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1395004030, "last_edit_date": 1495541901, "body_markdown": "I&#39;m mostly agree with chosen answer (https://stackoverflow.com/a/12857584/871392), but want to add option in Making Queries section.\r\n\r\nOne can define QuerySet classes for models for make filter queries and son on. After that you can proxy this queryset class for model&#39;s manager, like build-in Manager and QuerySet classes do. \r\n\r\nAlthough, if you had to query several data models to get one domain model, it seems more reasonable to me to put this in separate module like suggested before."}, {"tags": [], "down_vote_count": 0, "creation_date": 1490601623, "answer_id": 43040889, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1490601623, "body_markdown": "An old question, but I&#39;d like to offer my solution anyway. It&#39;s based on acceptance that model objects too require some additional functionality while it&#39;s awkward to place it within the *models.py*. Heavy business logic may be written separately depending on personal taste, but I at least like the model to do everything related to itself. This solution also supports those who like to have all the logic placed within models themselves.\r\n\r\nAs such, I devised **a hack** that allows me to separate logic from model definitions and still get all the hinting from my IDE.\r\n\r\nThe advantages should be obvious, but this lists a few that I have observed:\r\n\r\n - DB definitions remain just that - no logic &quot;garbage&quot; attached\r\n - Model-related logic is all placed neatly in one place\r\n - All the services (forms, REST, views) have a single access point to logic\r\n - **Best of all:** I did not have to rewrite any code once I realised that my *models.py* became too cluttered and had to separate the logic away. The separation is smooth and iterative: I could do a function at a time or entire class or the entire models.py.\r\n\r\nI have been using this with Python 3.4 and greater and Django 1.8 and greater.\r\n\r\napp/models.py\r\n\r\n    ....\r\n    from app.logic.user import UserLogic\r\n\r\n    class User(models.Model, UserLogic):\r\n        field1 = models.AnyField(....)\r\n        ... field definitions ...\r\n\r\napp/logic/user.py\r\n\r\n    if False:\r\n        # This allows the IDE to know about the User model and its member fields\r\n        from main.models import User\r\n\r\n    class UserLogic(object):\r\n        def logic_function(self: &#39;User&#39;):\r\n            ... code with hinting working normally ...\r\n\r\nThe only thing I can&#39;t figure out is how to make my IDE (PyCharm in this case) recognise that UserLogic is actually User model. But since this is obviously a hack, I&#39;m quite happy to accept the little nuisance of always specifying type for `self` parameter."}], "title": "Separation of business logic and data access in django", "view_count": 60084, "answer_count": 8, "code_snippet": ["<code>models.py</code>", "<code>User</code>", "<code>User</code>", "<code>class User(db.Models):\n\n    def get_present_name(self):\n        return self.name or 'Anonymous'\n\n    def activate(self):\n        self.status = 'activated'\n        self.save()\n</code>", "<code>class User(db.Models):\n\n    def get_present_name(self): \n        # property became non-deterministic in terms of database\n        # data is taken from another service by api\n        return remote_api.request_user_name(self.uid) or 'Anonymous' \n\n    def activate(self):\n        # method now has a side effect (send message to user)\n        self.status = 'activated'\n        self.save()\n        send_mail('Your account is activated!', '\u2026', [self.email])\n</code>", "<code>def activate_user(user_id):\n    user = User.objects.get(pk=user_id)\n\n    # set active flag\n    user.active = True\n    user.save()\n\n    # mail user\n    send_mail(...)\n\n    # etc etc\n</code>", "<code>class ActivateUserForm(forms.Form):\n\n    user_id = IntegerField(widget = UsernameSelectWidget, verbose_name=\"Select a user to activate\")\n    # the username select widget is not a standard Django widget, I just made it up\n\n    def clean_user_id(self):\n        user_id = self.cleaned_data['user_id']\n        if User.objects.get(pk=user_id).active:\n            raise ValidationError(\"This user cannot be activated\")\n        # you can also check authorizations etc. \n        return user_id\n\n    def execute(self):\n        \"\"\"\n        This is not a standard method in the forms API; it is intended to replace the \n        'extract-data-from-form-in-view-and-do-stuff' pattern by a more testable pattern. \n        \"\"\"\n        user_id = self.cleaned_data['user_id']\n\n        user = User.objects.get(pk=user_id)\n\n        # set active flag\n        user.active = True\n        user.save()\n\n        # mail user\n        send_mail(...)\n\n        # etc etc\n</code>", "<code>User.objects.filter(active=True)\n</code>", "<code>&lt;h1&gt;Welcome, {{ user|friendly_name }}&lt;/h1&gt;\n</code>", "<code>@register.filter\ndef friendly_name(user):\n    return remote_api.get_cached_name(user.id)\n</code>", "<code>def inactive_users():\n    return User.objects.filter(active=False)\n\n\ndef users_called_publysher():\n    for user in User.objects.all():\n        if remote_api.get_cached_name(user.id) == \"publysher\":\n            yield user \n</code>", "<code>Manager.get_queryset()</code>", "<code>class InactiveUserManager(models.Manager):\n    def get_queryset(self):\n        query_set = super(InactiveUserManager, self).get_queryset()\n        return query_set.filter(active=False)\n\nclass InactiveUser(User):\n    \"\"\"\n    &gt;&gt;&gt; for user in InactiveUser.objects.all():\n    \u2026        assert user.active is False \n    \"\"\"\n\n    objects = InactiveUserManager()\n    class Meta:\n        proxy = True\n</code>", "<code>class InactiveUserDistribution(models.Model):\n    country = CharField(max_length=200)\n    inactive_user_count = IntegerField(default=0)\n</code>", "<code>class ActivateUserForm(forms.Form):\n    # see above\n\n    def execute(self):\n        # see above\n        query_model = InactiveUserDistribution.objects.get_or_create(country=user.country)\n        query_model.inactive_user_count -= 1\n        query_model.save()\n</code>", "<code>user_activated = Signal(providing_args = ['user'])\nuser_deactivated = Signal(providing_args = ['user'])\n</code>", "<code>class ActivateUserForm(forms.Form):\n    # see above\n\n    def execute(self):\n        # see above\n        user_activated.send_robust(sender=self, user=user)\n</code>", "<code>class InactiveUserDistribution(models.Model):\n    # see above\n\n@receiver(user_activated)\ndef on_user_activated(sender, **kwargs):\n        user = kwargs['user']\n        query_model = InactiveUserDistribution.objects.get_or_create(country=user.country)\n        query_model.inactive_user_count -= 1\n        query_model.save()\n</code>", "<code>User.objects.inactive_users()</code>", "<code>u = InactiveUser.objects.all()[0]; u.active = True; u.save()</code>", "<code>isinstance(u, InactiveUser) == True</code>", "<code>class Book:\n   author = models.ForeignKey(User)\n   title = models.CharField(max_length=125)\n\n   class Meta:\n       app_label = \"library\"\n</code>", "<code>from library.models import Book\n\ndef get_books(limit=None, **filters):\n    \"\"\" simple service function for retrieving books can be widely extended \"\"\"\n    if limit:\n        return Book.objects.filter(**filters)[:limit]\n    return Book.objects.filter(**filters)\n</code>", "<code>from library.services import get_books\n\nclass BookListView(ListView):\n    \"\"\" simple view, e.g. implement a _build and _apply filters function \"\"\"\n    queryset = get_books()\n</code>", "<code>yourapp/models/logicalgroup.py</code>", "<code>User</code>", "<code>Group</code>", "<code>yourapp/models/users.py</code>", "<code>Poll</code>", "<code>Question</code>", "<code>Answer</code>", "<code>yourapp/models/polls.py</code>", "<code>__all__</code>", "<code>yourapp/models/__init__.py</code>", "<code>request.GET</code>", "<code>request.POST</code>", "<code>tastypie</code>", "<code>piston</code>", "<code>User</code>", "<code>UserManager(models.Manager)</code>", "<code>models.Model</code>", "<code>queryset</code>", "<code>models.Manager</code>", "<code>User</code>", "<code>class UserManager(models.Manager):\n   def create_user(self, username, ...):\n      # plain create\n   def create_superuser(self, username, ...):\n      # may set is_superuser field.\n   def activate(self, username):\n      # may use save() and send_mail()\n   def activate_in_bulk(self, queryset):\n      # may use queryset.update() instead of save()\n      # may use send_mass_mail() instead of send_mail()\n</code>", "<code>ModelForm documentation</code>", "<code>yourapp/management/commands/createsuperuser.py</code>", "<code>yourapp/management/commands/activateinbulk.py</code>", "<code>django.contrib.auth</code>", "<code>setting</code>", "<code>AUTHENTICATION_BACKENDS</code>", "<code>django.contrib.auth.backends.RemoteUserBackend</code>", "<code>yourapp.backends.remote_api.RemoteUserBackend</code>", "<code>yourapp.backends.memcached.RemoteUserBackend</code>", "<code>class User(db.Models):\n    def get_present_name(self): \n        # property became not deterministic in terms of database\n        # data is taken from another service by api\n        return remote_api.request_user_name(self.uid) or 'Anonymous' \n</code>", "<code>class User(db.Models):\n   def get_present_name(self):\n      for backend in get_backends():\n         try:\n            return backend.get_present_name(self)\n         except: # make pylint happy.\n            pass\n      return None\n</code>", "<code>yourapp.models</code>", "<code>yourapp.vendor</code>", "<code>yourapp.libs</code>", "<code>yourapp.libs.vendor</code>", "<code>yourapp.vendor.libs</code>", "<code>yourapp/core/backends.py</code>", "<code>yourapp/core/models/__init__.py</code>", "<code>yourapp/core/models/users.py</code>", "<code>yourapp/core/models/questions.py</code>", "<code>yourapp/core/backends.py</code>", "<code>yourapp/core/forms.py</code>", "<code>yourapp/core/handlers.py</code>", "<code>yourapp/core/management/commands/__init__.py</code>", "<code>yourapp/core/management/commands/closepolls.py</code>", "<code>yourapp/core/management/commands/removeduplicates.py</code>", "<code>yourapp/core/middleware.py</code>", "<code>yourapp/core/signals.py</code>", "<code>yourapp/core/templatetags/__init__.py</code>", "<code>yourapp/core/templatetags/polls_extras.py</code>", "<code>yourapp/core/views/__init__.py</code>", "<code>yourapp/core/views/users.py</code>", "<code>yourapp/core/views/questions.py</code>", "<code>yourapp/core/signals.py</code>", "<code>yourapp/lib/utils.py</code>", "<code>yourapp/lib/textanalysis.py</code>", "<code>yourapp/lib/ratings.py</code>", "<code>yourapp/vendor/backends.py</code>", "<code>yourapp/vendor/morebusinesslogic.py</code>", "<code>yourapp/vendor/handlers.py</code>", "<code>yourapp/vendor/middleware.py</code>", "<code>yourapp/vendor/signals.py</code>", "<code>yourapp/tests/test_polls.py</code>", "<code>yourapp/tests/test_questions.py</code>", "<code>yourapp/tests/test_duplicates.py</code>", "<code>yourapp/tests/test_ratings.py</code>", "<code>....\nfrom app.logic.user import UserLogic\n\nclass User(models.Model, UserLogic):\n    field1 = models.AnyField(....)\n    ... field definitions ...\n</code>", "<code>if False:\n    # This allows the IDE to know about the User model and its member fields\n    from main.models import User\n\nclass UserLogic(object):\n    def logic_function(self: 'User'):\n        ... code with hinting working normally ...\n</code>", "<code>self</code>"], "path": "stack.django"}, {"tags": ["python", "version", "windows-server"], "creation_date": 1326922993, "body_markdown": "I have to run a Python script on a Windows server. How can I know which version of Python I have, and does it even really matter? I was thinking of updating to latest version of Python.", "last_edit_date": 1428056448, "up_vote_count": 263, "link": "https://stackoverflow.com/questions/8917885/which-version-of-python-do-i-have-installed", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1326923151, "answer_id": 8917907, "path": "stack.django.answer", "score": 376, "up_vote_count": 377, "is_accepted": true, "last_activity_date": 1396628543, "last_edit_date": 1396628543, "body_markdown": "    python -V\r\n\r\nhttp://docs.python.org/using/cmdline.html#generic-options\r\n\r\n`--version` may also work (introduced in version 2.5)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1326923152, "answer_id": 8917909, "path": "stack.django.answer", "score": 91, "up_vote_count": 91, "is_accepted": false, "last_activity_date": 1438921415, "last_edit_date": 1438921415, "body_markdown": "Python 2.5+:\r\n\r\n    python --version\r\n\r\nPython 2.4-:\r\n\r\n    python -c &#39;import sys; print(sys.version)&#39;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1326923154, "answer_id": 8917910, "path": "stack.django.answer", "score": 25, "up_vote_count": 25, "is_accepted": false, "last_activity_date": 1326923154, "body_markdown": "At a command prompt type:\r\n\r\n     python -V"}, {"tags": [], "down_vote_count": 0, "creation_date": 1326923251, "answer_id": 8917940, "path": "stack.django.answer", "score": 20, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1326923251, "body_markdown": "When I open `Python (command line)` the first thing it tells me is the version."}, {"tags": [], "down_vote_count": 0, "creation_date": 1388724473, "answer_id": 20896732, "path": "stack.django.answer", "score": 69, "up_vote_count": 69, "is_accepted": false, "last_activity_date": 1388724473, "body_markdown": "in a Python IDE just copy and paste in the following code and run it (the version will come up in the output area)\r\n\r\n    import sys\r\n    print(sys.version)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1431843210, "answer_id": 30283924, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1431843210, "body_markdown": "you can get version of python by using following command\r\n\r\n    python --version\r\n\r\nYou can even get version of any package installed in venv using pip freeze as\r\n    \r\n    pip freeze | grep &quot;package name&quot;\r\n\r\nor using python interpreter as\r\n\r\n    In [1]: import django\r\n    In [2]: django.VERSION\r\n    Out[2]: (1, 6, 1, &#39;final&#39;, 0)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1433071055, "answer_id": 30556752, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1433071055, "body_markdown": "Although the question is &quot;which version am I using?&quot;, this may not actually be everything you need to know. You may have other versions installed and this can cause problems, particularly when installing additional modules. This is my rough-and-ready approach to finding out what versions are installed:\r\n\r\n    updatedb                  #be in root for this\r\n    locate site.py            #all installations I&#39;ve ever seen have this\r\n\r\nThe output for a single Python installation should look something like this:\r\n\r\n    /usr/lib64/python2.7/site.py  \r\n    /usr/lib64/python2.7/site.pyc\r\n    /usr/lib64/python2.7/site.pyo\r\n\r\nMultiple installations will have output something like this:\r\n\r\n    /root/Python-2.7.6/Lib/site.py\r\n    /root/Python-2.7.6/Lib/site.pyc\r\n    /root/Python-2.7.6/Lib/site.pyo\r\n    /root/Python-2.7.6/Lib/test/test_site.py\r\n    /usr/lib/python2.6/site-packages/site.py\r\n    /usr/lib/python2.6/site-packages/site.pyc\r\n    /usr/lib/python2.6/site-packages/site.pyo\r\n    /usr/lib64/python2.6/site.py\r\n    /usr/lib64/python2.6/site.pyc\r\n    /usr/lib64/python2.6/site.pyo\r\n    /usr/local/lib/python2.7/site.py\r\n    /usr/local/lib/python2.7/site.pyc\r\n    /usr/local/lib/python2.7/site.pyo\r\n    /usr/local/lib/python2.7/test/test_site.py\r\n    /usr/local/lib/python2.7/test/test_site.pyc\r\n    /usr/local/lib/python2.7/test/test_site.pyo\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1448066868, "answer_id": 33838406, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1448066868, "body_markdown": "    python -V\r\nor \r\n\r\n    python --version\r\n\r\n\r\n\r\nNOTE :- Please note that the &quot;V&quot; in python-V command is capital V. python -v (small &quot;v&quot;) will launch Python in verbose mode."}, {"tags": [], "down_vote_count": 0, "creation_date": 1451392975, "answer_id": 34511331, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1451392975, "body_markdown": "For me. open CMD and run\r\n        py\r\nit will show something like\r\n       Python 3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:43:06) [MSC v.1600 32 bit (Intel)] on win32\r\n        Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information."}, {"tags": [], "down_vote_count": 0, "creation_date": 1455411403, "answer_id": 35387176, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1455411403, "body_markdown": "just start it at terminal\r\n\r\n    python\r\n    sergio@tarro:\r\n    Python 2.7.6 (default, Jun 22 2015, 17:58:13) \r\n    [GCC 4.8.2] on linux2\r\n    Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\r\n    &gt;&gt;&gt; \r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1464269659, "answer_id": 37462418, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1464269659, "body_markdown": "    In [1]: import sys\r\n    \r\n    In [2]: sys.version\r\n    2.7.11 |Anaconda 2.5.0 (64-bit)| (default, Dec  6 2015, 18:08:32) \r\n    [GCC 4.4.7 20120313 (Red Hat 4.4.7-1)]\r\n    \r\n    In [3]: sys.version_info\r\n    sys.version_info(major=2, minor=7, micro=11, releaselevel=&#39;final&#39;, serial=0)\r\n    \r\n    In [4]: sys.version_info &gt;= (2,7)\r\n    Out[4]: True\r\n    \r\n    In [5]: sys.version_info &gt;= (3,)\r\n    Out[5]: False\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1469172539, "answer_id": 38520618, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1469173357, "last_edit_date": 1469173357, "body_markdown": "    &gt;&gt;&gt; import sys; print(&#39;{0[0]}.{0[1]}&#39;.format(sys.version_info))\r\n    3.5\r\n\r\nso from the command line:\r\n\r\n    python -c &quot;import sys; print(&#39;{0[0]}.{0[1]}&#39;.format(sys.version_info))&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1473692696, "answer_id": 39453410, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1473692696, "body_markdown": "On Windows 10 with Python 3.6\r\n\r\n        python\r\n\r\n    Python 3.6.0a4 (v3.6.0a4:017cf260936b, Aug 16 2016, 00:59:16) [MSC v.1900 64 bit (AMD64)] on win32\r\n\r\n\r\n        python -V\r\n\r\n    Python 3.6.0a4\r\n\r\n\r\n        python --version\r\n\r\n    Python 3.6.0a4"}, {"tags": [], "down_vote_count": 0, "creation_date": 1481795327, "answer_id": 41161052, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1481795327, "body_markdown": "***In Short :***  \r\n\r\n&gt; Type `python` in command prompt\r\n\r\nSimply open command prompt `(Clr + R)` and type `cmd` and and in command prompt then typing  `python` will give you all necessary info regarding versions \r\n\r\n[![python version][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/K5kSC.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1498721292, "answer_id": 44818859, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1498721292, "body_markdown": "\r\nOpen a command prompt window (press Windows+R, type in cmd, and hit enter).\r\nType python.exe "}, {"tags": [], "down_vote_count": 0, "creation_date": 1502664327, "answer_id": 45665525, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1502664327, "body_markdown": "If you have Python installed then the easiest way you can check the version number is by typing &quot;python&quot; in your command prompt. It will show you the version number and if it is running on 32 bit or 64 bit and some other information. For some applications you would want to have a latest version and sometimes not. It depends on what packages you want to install or use."}], "title": "Which version of Python do I have installed?", "view_count": 590726, "answer_count": 16, "code_snippet": ["<code>.py</code>", "<code>python -V\n</code>", "<code>--version</code>", "<code>Python 2.7.10</code>", "<code>-V</code>", "<code>--version</code>", "<code>Python 3.4.3</code>", "<code>sudo find / -iname python</code>", "<code>python --version\n</code>", "<code>python -c 'import sys; print(sys.version)'\n</code>", "<code>#!python3</code>", "<code>python -c \"import sys; print sys.version\"</code>", "<code>import sys\nprint(sys.version)\n</code>", "<code> python -V\n</code>", "<code>Python (command line)</code>", "<code>updatedb                  #be in root for this\nlocate site.py            #all installations I've ever seen have this\n</code>", "<code>/usr/lib64/python2.7/site.py  \n/usr/lib64/python2.7/site.pyc\n/usr/lib64/python2.7/site.pyo\n</code>", "<code>/root/Python-2.7.6/Lib/site.py\n/root/Python-2.7.6/Lib/site.pyc\n/root/Python-2.7.6/Lib/site.pyo\n/root/Python-2.7.6/Lib/test/test_site.py\n/usr/lib/python2.6/site-packages/site.py\n/usr/lib/python2.6/site-packages/site.pyc\n/usr/lib/python2.6/site-packages/site.pyo\n/usr/lib64/python2.6/site.py\n/usr/lib64/python2.6/site.pyc\n/usr/lib64/python2.6/site.pyo\n/usr/local/lib/python2.7/site.py\n/usr/local/lib/python2.7/site.pyc\n/usr/local/lib/python2.7/site.pyo\n/usr/local/lib/python2.7/test/test_site.py\n/usr/local/lib/python2.7/test/test_site.pyc\n/usr/local/lib/python2.7/test/test_site.pyo\n</code>", "<code>In [1]: import sys\n\nIn [2]: sys.version\n2.7.11 |Anaconda 2.5.0 (64-bit)| (default, Dec  6 2015, 18:08:32) \n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)]\n\nIn [3]: sys.version_info\nsys.version_info(major=2, minor=7, micro=11, releaselevel='final', serial=0)\n\nIn [4]: sys.version_info &gt;= (2,7)\nOut[4]: True\n\nIn [5]: sys.version_info &gt;= (3,)\nOut[5]: False\n</code>", "<code>python -V\n</code>", "<code>python --version\n</code>", "<code>&gt;&gt;&gt; import sys; print('{0[0]}.{0[1]}'.format(sys.version_info))\n3.5\n</code>", "<code>python -c \"import sys; print('{0[0]}.{0[1]}'.format(sys.version_info))\"\n</code>", "<code>python --version\n</code>", "<code>pip freeze | grep \"package name\"\n</code>", "<code>In [1]: import django\nIn [2]: django.VERSION\nOut[2]: (1, 6, 1, 'final', 0)\n</code>", "<code>python\nsergio@tarro:\nPython 2.7.6 (default, Jun 22 2015, 17:58:13) \n[GCC 4.8.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; \n</code>", "<code>python</code>", "<code>(Clr + R)</code>", "<code>cmd</code>", "<code>python</code>", "<code>    python\n\nPython 3.6.0a4 (v3.6.0a4:017cf260936b, Aug 16 2016, 00:59:16) [MSC v.1900 64 bit (AMD64)] on win32\n\n\n    python -V\n\nPython 3.6.0a4\n\n\n    python --version\n\nPython 3.6.0a4\n</code>"], "path": "stack.django"}, {"tags": ["html", "web-scraping", "html-parsing", "html-content-extraction"], "creation_date": 1217970551, "body_markdown": "I&#39;m thinking of trying [Beautiful Soup][1], a Python package for HTML scraping. Are there any other HTML scraping packages I should be looking at? Python is not a requirement, I&#39;m actually interested in hearing about other languages as well.\r\n\r\nThe story so far:\r\n\r\n- Python\r\n  - [Beautiful Soup][2]\r\n  - [lxml][3]\r\n  - [HTQL][4]\r\n  - [Scrapy][5]\r\n  - [Mechanize][6]\r\n- Ruby\r\n  - [Nokogiri][7]\r\n  - [Hpricot][8]\r\n  - [Mechanize][9]\r\n  - [scrAPI][10]\r\n  - [scRUBYt!][11]\r\n  - [wombat][12]\r\n  - [Watir][13]\r\n- .NET\r\n  - [Html Agility Pack][14]\r\n  - [WatiN][15]\r\n- Perl\r\n  - [WWW::Mechanize][16]\r\n  - [Web-Scraper][17]\r\n- Java\r\n  - [Tag Soup][18]\r\n  - [HtmlUnit][19]\r\n  - [Web-Harvest][20]\r\n  - [jARVEST] [21]\r\n  - [jsoup][22]\r\n  - [Jericho HTML Parser][23]\r\n- JavaScript\r\n  - [request][24]\r\n  - [cheerio][25]\r\n  - [artoo][26]\r\n  - [node-horseman][27]\r\n  - [phantomjs][28]\r\n- PHP\r\n  - [Goutte] [33]\r\n  - [htmlSQL][29]\r\n  - [PHP Simple HTML DOM Parser][30]\r\n  - [PHP Scraping with CURL][32]\r\n- Most of them\r\n  - [Screen-Scraper][31]\r\n\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Beautiful_Soup\r\n  [2]: http://www.crummy.com/software/BeautifulSoup/\r\n  [3]: http://codespeak.net/lxml/\r\n  [4]: http://htql.net/\r\n  [5]: http://scrapy.org/\r\n  [6]: http://wwwsearch.sourceforge.net/mechanize/\r\n  [7]: http://nokogiri.org/\r\n  [8]: https://github.com/hpricot/hpricot/\r\n  [9]: https://github.com/tenderlove/mechanize\r\n  [10]: http://rubyforge.org/projects/scrapi/\r\n  [11]: http://scrubyt.org/\r\n  [12]: https://github.com/felipecsl/wombat\r\n  [13]: http://watir.com\r\n  [14]: http://html-agility-pack.net/?z=codeplex\r\n  [15]: http://watin.org/\r\n  [16]: http://search.cpan.org/dist/WWW-Mechanize/\r\n  [17]: http://search.cpan.org/dist/Web-Scraper/\r\n  [18]: http://home.ccil.org/~cowan/XML/tagsoup/\r\n  [19]: http://htmlunit.sourceforge.net/\r\n  [20]: http://web-harvest.sourceforge.net/\r\n  [21]: http://sing.ei.uvigo.es/jarvest\r\n  [22]: http://jsoup.org/\r\n  [23]: http://jericho.htmlparser.net/docs/index.html\r\n  [24]: https://github.com/request/request\r\n  [25]: https://github.com/cheeriojs/cheerio\r\n  [26]: http://medialab.github.io/artoo/\r\n  [27]: https://github.com/johntitus/node-horseman\r\n  [28]: http://phantomjs.org/\r\n  [29]: https://github.com/hxseven/htmlSQL\r\n  [30]: http://sourceforge.net/projects/simplehtmldom/\r\n  [31]: http://www.screen-scraper.com/\r\n  [32]: http://www.jacobward.co.uk/web-scraping-with-php-curl-part-1/\r\n  [33]: https://github.com/FriendsOfPHP/Goutte", "last_edit_date": 1511399040, "up_vote_count": 375, "link": "https://stackoverflow.com/questions/2861/options-for-html-scraping", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1217970689, "answer_id": 2865, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1217970689, "body_markdown": "I would first find out if the site(s) in question provide an API server or RSS Feeds for access the data you require."}, {"tags": [], "down_vote_count": 0, "creation_date": 1217970812, "answer_id": 2866, "path": "stack.django.answer", "score": 54, "up_vote_count": 54, "is_accepted": true, "last_activity_date": 1393927005, "last_edit_date": 1393927005, "body_markdown": "The Ruby world&#39;s equivalent to Beautiful Soup is why_the_lucky_stiff&#39;s [Hpricot][1].\r\n\r\n\r\n  [1]: https://github.com/hpricot/hpricot &quot;Hpricot&quot;"}, {"tags": [], "down_vote_count": 2, "creation_date": 1217971791, "answer_id": 2888, "path": "stack.django.answer", "score": 1, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1217971791, "body_markdown": "Regular expressions work pretty well for HTML scraping as well ;-)  Though after looking at Beautiful Soup, I can see why this would be a valuable tool."}, {"tags": [], "down_vote_count": 1, "creation_date": 1217977086, "answer_id": 2952, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1217977086, "body_markdown": "You probably have as much already, but I think this is what you are trying to do:\r\n\r\n    from __future__ import with_statement\r\n    import re, os\r\n    \r\n    profile = &quot;&quot;\r\n    \r\n    os.system(&#39;wget --no-cookies --header &quot;Cookie: soba=(SeCreTCODe)&quot; http://stackoverflow.com/users/30/myProfile.html&#39;)\r\n    with open(&quot;myProfile.html&quot;) as f:\r\n        for line in f:\r\n            profile = profile + line\r\n    f.close()\r\n    p = re.compile(&#39;summarycount&quot;&gt;(\\d+)&lt;/div&gt;&#39;) #Rep is found here\r\n    print p\r\n    m = p.search(profile)\r\n    print m\r\n    print m.group(1)\r\n    os.system(&quot;espeak \\&quot;Rep is at &quot; + m.group(1) + &quot; points\\&quot;&quot;\r\n    os.remove(&quot;myProfile.html&quot;)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1217979464, "answer_id": 2965, "path": "stack.django.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1217979464, "body_markdown": "For Perl, there&#39;s WWW::Mechanize."}, {"tags": [], "down_vote_count": 0, "creation_date": 1218002244, "answer_id": 3115, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1342116919, "last_edit_date": 1342116919, "body_markdown": "I use Hpricot on Ruby. As an example this is a snippet of code that I use to retrieve all book titles from the six pages of my HireThings account (as they don&#39;t seem to provide a single page with this information):\r\n\r\n    pagerange = 1..6\r\n    proxy = Net::HTTP::Proxy(proxy, port, user, pwd)\r\n    proxy.start(&#39;www.hirethings.co.nz&#39;) do |http|\r\n      pagerange.each do |page|\r\n        resp, data = http.get &quot;/perth_dotnet?page=#{page}&quot; \r\n        if resp.class == Net::HTTPOK\r\n          (Hpricot(data)/&quot;h3 a&quot;).each { |a| puts a.innerText }\r\n        end\r\n      end\r\n    end \r\n\r\nIt&#39;s pretty much complete. All that comes before this are library imports and the settings for my proxy.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1218133139, "answer_id": 5093, "path": "stack.django.answer", "score": 32, "up_vote_count": 32, "is_accepted": false, "last_activity_date": 1218133139, "body_markdown": "BeautifulSoup is a great way to go for HTML scraping. My previous job had me doing a lot of scraping and I wish I knew about BeautifulSoup when I started. It&#39;s like the DOM with a lot more useful options and is a lot more pythonic. If you want to try Ruby they ported BeautifulSoup calling it RubyfulSoup but it hasn&#39;t been updated in a while.\r\n\r\nOther useful tools are HTMLParser or sgmllib.SGMLParser which are part of the standard Python library. These work by calling methods every time you enter/exit a tag and encounter html text. They&#39;re like Expat if you&#39;re familiar with that. These libraries are especially useful if you are going to parse very large files and creating a DOM tree would be long and expensive.\r\n\r\nRegular expressions aren&#39;t very necessary. BeautifulSoup handles regular expressions so if you need their power you can utilize it there. I say go with BeautifulSoup unless you need speed and a smaller memory footprint. If you find a better HTML parser on Python, let me know."}, {"tags": [], "down_vote_count": 0, "creation_date": 1218133877, "answer_id": 5117, "path": "stack.django.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1218133877, "body_markdown": "I found &lt;a href=&quot;http://www.jonasjohn.de/lab/htmlsql.htm&quot;&gt;HTMLSQL&lt;/a&gt; to be a ridiculously simple way to screenscrape. It takes literally minutes to get results with it.\r\n\r\nThe queries are super-intuitive - like:\r\n\r\n    SELECT title from img WHERE $class == &#39;userpic&#39;\r\n\r\nThere are now some other alternatives that take the same approach."}, {"tags": [], "down_vote_count": 2, "creation_date": 1218134310, "answer_id": 5126, "path": "stack.django.answer", "score": 38, "up_vote_count": 40, "is_accepted": false, "last_activity_date": 1218134310, "body_markdown": "In the .NET world, I recommend the HTML Agility Pack. Not near as simple as some of the above options (like HTMLSQL), but it&#39;s very flexible. It lets you maniuplate poorly formed HTML as if it were well formed XML, so you can use XPATH or just itereate over nodes.\r\n\r\n[http://www.codeplex.com/htmlagilitypack][1]\r\n\r\n\r\n  [1]: http://www.codeplex.com/htmlagilitypack"}, {"tags": [], "down_vote_count": 0, "creation_date": 1218982394, "answer_id": 13645, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1342117362, "last_edit_date": 1342117362, "body_markdown": "I have used [LWP][1] and [HTML::TreeBuilder][2] with Perl and have found them very useful.\r\n\r\nLWP (short for libwww-perl) lets you connect to websites and scrape the HTML, [you can get the module here][3] and the O&#39;Reilly book [seems to be online here][4].\r\n\r\nTreeBuilder allows you to construct a tree from the HTML, and [documentation and source are available in *HTML::TreeBuilder - Parser that builds a HTML syntax tree*][5].\r\n\r\nThere might be too much heavy-lifting still to do with something like this approach though. I have not looked at the [Mechanize module][6] suggested by another answer, so I may well do that.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Library_for_WWW_in_Perl\r\n  [2]: http://search.cpan.org/~cjm/HTML-Tree-5.02/lib/HTML/TreeBuilder.pm\r\n  [3]: http://search.cpan.org/dist/libwww-perl/\r\n  [4]: http://lwp.interglacial.com/\r\n  [5]: http://search.cpan.org/~petek/HTML-Tree-3.23/lib/HTML/TreeBuilder.pm\r\n  [6]: http://search.cpan.org/dist/WWW-Mechanize/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1219400438, "answer_id": 22031, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1219400438, "body_markdown": "Scraping Stack Overflow is especially easy with [Shoes](http://code.whytheluckystiff.net/shoes/) and [Hpricot](http://code.whytheluckystiff.net/hpricot/).\r\n\r\n    require &#39;hpricot&#39;\r\n    \r\n    Shoes.app :title =&gt; &quot;Ask Stack Overflow&quot;, :width =&gt; 370 do\r\n      SO_URL = &quot;http://stackoverflow.com&quot;\r\n      stack do\r\n        stack do\r\n          caption &quot;What is your question?&quot;\r\n          flow do\r\n            @lookup = edit_line &quot;stackoverflow&quot;, :width =&gt; &quot;-115px&quot;\r\n            button &quot;Ask&quot;, :width =&gt; &quot;90px&quot; do\r\n              download SO_URL + &quot;/search?s=&quot; + @lookup.text do |s|\r\n                doc = Hpricot(s.response.body)\r\n                @rez.clear()\r\n                (doc/:a).each do |l|\r\n                  href = l[&quot;href&quot;]\r\n                  if href.to_s =~ /\\/questions\\/[0-9]+/ then\r\n                    @rez.append do\r\n                      para(link(l.inner_text) { visit(SO_URL + href) })\r\n                    end\r\n                  end\r\n                end\r\n                @rez.show()\r\n              end\r\n            end\r\n          end\r\n        end\r\n        stack :margin =&gt; 25 do\r\n          background white, :radius =&gt; 20\r\n          @rez = stack do\r\n          end\r\n        end\r\n        @rez.hide()\r\n      end\r\n    end\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1219413524, "answer_id": 22420, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1342117460, "last_edit_date": 1342117460, "body_markdown": "I&#39;ve used Beautiful Soup a lot with Python. It is much better than regular expression checking, because it works like using the [DOM][1], even if the HTML is poorly formatted. You can quickly find HTML tags and text with simpler syntax than regular expressions. Once you find an element, you can iterate over it and its children, which is more useful for understanding the contents in code than it is with regular expressions. I wish Beautiful Soup existed years ago when I had to do a lot of screenscraping -- it would have saved me a lot of time and headache since HTML structure was so poor before people started validating it.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Document_Object_Model\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1219573957, "answer_id": 24961, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1474971506, "last_edit_date": 1474971506, "body_markdown": "In Java, you can use [TagSoup][1].\r\n\r\n\r\n  [1]: https://github.com/websdotcom/tagsoup"}, {"tags": [], "down_vote_count": 0, "creation_date": 1219665743, "answer_id": 25911, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1452095720, "last_edit_date": 1452095720, "body_markdown": "[Scrubyt][1] uses Ruby and Hpricot to do nice and easy web scraping. I wrote a scraper for my university&#39;s library service using this in about 30&amp;nbsp;minutes.\r\n\r\n\r\n  [1]: https://github.com/scrubber/scrubyt"}, {"tags": [], "down_vote_count": 0, "creation_date": 1219790797, "answer_id": 29130, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1342116358, "last_edit_date": 1342116358, "body_markdown": "Another option for Perl would be [Web::Scraper][1] which is based on Ruby&#39;s [Scrapi][2]. In a nutshell, with nice and concise syntax, you can get a robust scraper directly into data structures.\r\n\r\n  [1]: http://search.cpan.org/~miyagawa/Web-Scraper/lib/Web/Scraper.pm &quot;Web::Scraper&quot;\r\n  [2]: http://blog.labnotes.org/2006/07/11/scraping-with-style-scrapi-toolkit-for-ruby/ &quot;Scrapi&quot;\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1219830187, "answer_id": 29812, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1342117554, "last_edit_date": 1342117554, "body_markdown": "Although it was designed for [.NET][1] web-testing, I&#39;ve been using the [WatiN][2] framework for this purpose. Since it is DOM-based, it is pretty easy to capture HTML, text, or images. Recentely, I used it to dump a list of links from a [MediaWiki][3] All Pages namespace query into an Excel spreadsheet. The following [VB.NET][4] code fragement is pretty crude, but it works.\r\n\r\n----------\r\n\r\n    Sub GetLinks(ByVal PagesIE As IE, ByVal MyWorkSheet As Excel.Worksheet)\r\n\r\n        Dim PagesLink As Link\r\n        For Each PagesLink In PagesIE.TableBodies(2).Links\r\n            With MyWorkSheet\r\n                .Cells(XLRowCounterInt, 1) = PagesLink.Text\r\n                .Cells(XLRowCounterInt, 2) = PagesLink.Url\r\n            End With\r\n            XLRowCounterInt = XLRowCounterInt + 1\r\n        Next\r\n    End Sub\r\n\r\n  [1]: http://en.wikipedia.org/wiki/.NET_Framework\r\n  [2]: http://en.wikipedia.org/wiki/Watir#Similar_tools\r\n  [3]: http://en.wikipedia.org/wiki/MediaWiki\r\n  [4]: http://en.wikipedia.org/wiki/Visual_Basic_.NET\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1219862993, "answer_id": 30863, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1219862993, "body_markdown": "I&#39;ve had mixed results in .NET using SgmlReader which was originally started by [Chris Lovett][1] and appears to have been updated by [MindTouch][2].\r\n\r\n\r\n  [1]: http://robgarrett.com/cs/blogs/software/archive/2005/08/09/1499.aspx\r\n  [2]: http://wiki.developer.mindtouch.com/Community/SgmlReader"}, {"tags": [], "down_vote_count": 0, "creation_date": 1220184573, "answer_id": 36811, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1220184573, "body_markdown": "I&#39;ve had some success with [HtmlUnit](http://htmlunit.sourceforge.net), in Java. It&#39;s a simple framework for writing unit tests on web UI&#39;s, but equally useful for HTML scraping.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1221655495, "answer_id": 82734, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1336999128, "last_edit_date": 1336999128, "body_markdown": "The Python [lxml][1] library acts as a Pythonic binding for the libxml2 and libxslt libraries. I like particularly its XPath support and pretty-printing of the in-memory XML structure. It also supports parsing broken HTML. And I don&#39;t think you can find other Python libraries/bindings that parse XML faster than lxml.\r\n\r\n\r\n  [1]: http://codespeak.net/lxml/"}, {"tags": [], "down_vote_count": 2, "creation_date": 1221656185, "answer_id": 82843, "path": "stack.django.answer", "score": 3, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1322409836, "last_edit_date": 1322409836, "body_markdown": "You would be a fool not to use Perl.. Here come the flames.. \r\n\r\nBone up on the following modules and ginsu any scrape around.\r\n\r\n    use LWP\r\n    use HTML::TableExtract\r\n    use HTML::TreeBuilder\r\n    use HTML::Form\r\n    use Data::Dumper\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1221768820, "answer_id": 96421, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1221768820, "body_markdown": "The [templatemaker][1] utility from Adrian Holovaty (of [Django][2] fame) uses a very interesting approach: You feed it variations of the same page and it &quot;learns&quot; where the &quot;holes&quot; for variable data are. It&#39;s not HTML specific, so it would be good for scraping any other plaintext content as well. I&#39;ve used it also for PDFs and HTML converted to plaintext (with pdftotext and lynx, respectively).\r\n\r\n\r\n  [1]: http://code.google.com/p/templatemaker/\r\n  [2]: http://www.djangoproject.com/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1223585601, "answer_id": 189170, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1223585601, "body_markdown": "Implementations of the [HTML5 parsing algorithm][1]: [html5lib][2] (Python, Ruby), [Validator.nu HTML Parser][3] (Java, JavaScript; C++ in development), [Hubbub][4] (C), [Twintsam][5] (C#; upcoming).\r\n\r\n\r\n  [1]: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html\r\n  [2]: http://code.google.com/p/html5lib/\r\n  [3]: http://about.validator.nu/htmlparser/\r\n  [4]: http://www.netsurf-browser.org/projects/hubbub/\r\n  [5]: http://code.google.com/p/twintsam/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1227121918, "answer_id": 303001, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1342117668, "last_edit_date": 1342117668, "body_markdown": "I&#39;ve also had great success using Aptana&#39;s Jaxer + jQuery to parse pages. It&#39;s not as fast or &#39;script-like&#39; in nature, but jQuery selectors + real JavaScript/DOM is a lifesaver on more complicated (or malformed) pages.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1234529881, "answer_id": 545816, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1234529881, "body_markdown": "Another tool for .NET is [MhtBuilder][1]\r\n\r\n\r\n  [1]: http://www.codeproject.com/KB/files/MhtBuilder.aspx"}, {"tags": [], "down_vote_count": 0, "creation_date": 1249069197, "answer_id": 1214482, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1249069197, "body_markdown": "&#39;Simple HTML DOM Parser&#39; is a good option for PHP, if your familiar with jQuery or JavaScript selectors then you will find yourself at home.\r\n\r\n[Find it here][1]\r\n\r\n[There is also a blog post about it here.][2]\r\n\r\n\r\n  [1]: http://simplehtmldom.sourceforge.net/\r\n  [2]: http://blog.dougalmatthews.com/2008/08/html-dom-and-easy-screen-scraping-in-php/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1250456183, "answer_id": 1285327, "path": "stack.django.answer", "score": 7, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1342116605, "last_edit_date": 1342116605, "body_markdown": "I know and love [Screen-Scraper][1].\r\n\r\nScreen-Scraper is a tool for extracting data from websites. Screen-Scraper automates:\r\n\r\n    * Clicking links on websites\r\n    * Entering data into forms and submitting\r\n    * Iterating through search result pages\r\n    * Downloading files (PDF, MS Word, images, etc.)\r\n\r\nCommon uses:\r\n\r\n    * Download all products, records from a website\r\n    * Build a shopping comparison site\r\n    * Perform market research\r\n    * Integrate or migrate data\r\n\r\nTechnical:\r\n\r\n    * Graphical interface--easy automation\r\n    * Cross platform (Linux, Mac, Windows, etc.)\r\n    * Integrates with most programming languages (Java, PHP, .NET, ASP, Ruby, etc.)\r\n    * Runs on workstations or servers\r\n\r\nThree editions of screen-scraper:\r\n\r\n    * Enterprise: The most feature-rich edition of screen-scraper. All capabilities are enabled.\r\n    * Professional: Designed to be capable of handling most common scraping projects.\r\n    * Basic: Works great for simple projects, but not nearly as many features as its two older brothers.\r\n\r\n  [1]: http://www.screen-scraper.com\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1262019554, "answer_id": 1970411, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1322410136, "last_edit_date": 1322410136, "body_markdown": "Python has several options for HTML scraping in addition to Beatiful Soup. Here are some others:\r\n\r\n - [mechanize][1]: similar to perl `WWW:Mechanize`. Gives you a browser like object to ineract with web pages\r\n - [lxml][2]: Python binding to `libwww`. Supports various options to traverse and select elements (e.g. [XPath][3] and CSS selection)\r\n - [scrapemark][4]: high level library using templates to extract informations from HTML.\r\n - [pyquery][5]: allows you to make jQuery like queries on XML documents.\r\n - [scrapy][6]: an high level scraping and web crawling framework. It can be used to write spiders, for data mining and for monitoring and automated testing\r\n\r\n  [1]: http://wwwsearch.sourceforge.net/mechanize/\r\n  [2]: http://codespeak.net/lxml/\r\n  [3]: http://en.wikipedia.org/wiki/XPath\r\n  [4]: http://arshaw.com/scrapemark/\r\n  [5]: http://pyquery.org/\r\n  [6]: http://scrapy.org/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1274111919, "answer_id": 2850634, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1274111919, "body_markdown": "For more complex scraping applications, I would recommend the IRobotSoft web scraper.  It is a dedicated free software for screen scraping.  It has a strong query language for HTML pages, and it provides a very simple web recording interface that will free you from many programming effort.  \r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1279773087, "answer_id": 3305789, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1322410610, "last_edit_date": 1322410610, "body_markdown": "I like Google Spreadsheets&#39; ImportXML(URL, XPath) function.\r\n\r\nIt will repeat cells down the column if your XPath expression returns more than one value.\r\n\r\nYou can have up to 50 `importxml()` functions on one spreadsheet.\r\n\r\nRapidMiner&#39;s Web Plugin is also pretty easy to use. It can do posts, accepts cookies, and can set the [user-agent][1].\r\n\r\n  [1]: http://en.wikipedia.org/wiki/User_agent\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1290445469, "answer_id": 4248039, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1322410741, "last_edit_date": 1322410741, "body_markdown": "The recent talk by Dav Glass *[Welcome to the Jungle! (YUIConf 2011 Opening Keynote)][1]* shows how you can use **[YUI][2] 3** on **[Node.js][3]** to do clientside-like programming (with DOM selectors instead of string processing) on the server. It is very impressive.\r\n\r\n  [1]: http://developer.yahoo.com/yui/theater/video.php?v=glass-node\r\n  [2]: http://en.wikipedia.org/wiki/Yahoo!_UI_Library\r\n  [3]: http://en.wikipedia.org/wiki/Nodejs\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1291181300, "answer_id": 4321478, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1322555769, "last_edit_date": 1322555769, "body_markdown": "I&#39;ve been using Feedity - http://feedity.com for some of the scraping work (and conversion into RSS feeds) at my library. It works well for most webpages."}, {"tags": [], "down_vote_count": 1, "creation_date": 1291182107, "answer_id": 4321549, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1322410782, "last_edit_date": 1322410782, "body_markdown": "## [SharpQuery][1]\r\n\r\nIt&#39;s basically jQuery for C#. It depends on [HTML Agility Pack][2] for parsing the HTML.\r\n\r\n  [1]: http://BeautifulSoup\r\n  [2]: http://htmlagilitypack.codeplex.com/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1299068128, "answer_id": 5167300, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1299068128, "body_markdown": "[Yahoo! Query Language or YQL can be used alongwith jQuery, AJAX, JSONP to screen scrape web pages][1]\r\n\r\n\r\n  [1]: http://projects.ischool.washington.edu/tabrooks/343INFOAutumn09/JSONP/jsonpJqueryYQL.htm"}, {"tags": [], "down_vote_count": 0, "creation_date": 1301957075, "answer_id": 5545165, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1301957075, "body_markdown": "For those that would prefer a graphical workflow tool, RapidMiner (FOSS) has a nice web crawling and scraping facility. \r\n\r\nHere&#39;s a series of videos:\r\n\r\nhttp://vancouverdata.blogspot.com/2011/04/rapidminer-web-crawling-rapid-miner-web.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1302567614, "answer_id": 5629017, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1302567614, "body_markdown": "I do a lot of advanced web scraping so wanted to have total control over my stack and understand the limitations. [This webscraping library][1] is the result.\r\n\r\n\r\n  [1]: http://code.google.com/p/webscraping/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1305138509, "answer_id": 5968856, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1314988807, "last_edit_date": 1314988807, "body_markdown": "There is this solution too: [netty HttpClient][1]\r\n\r\n\r\n  [1]: http://docs.jboss.org/netty/3.2/xref/org/jboss/netty/example/http/snoop/HttpClient.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1328902970, "answer_id": 9233824, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1328902970, "body_markdown": "Why has no one mentioned JSOUP yet for Java? [http://jsoup.org/][1]\r\n\r\n\r\n  [1]: http://jsoup.org/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1341398600, "answer_id": 11327491, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1352225665, "last_edit_date": 1352225665, "body_markdown": "I made a very nice library [Internet Tools][1] for web scraping.\r\n\r\nThe idea is to match a template against the web page, which will extract all data from the page and also validate if the page structure is unchanged.\r\n\r\nSo you can just take the HTML of the web page you want to process, remove all dynamical or irrelevant content and annotate the interesting parts.\r\n\r\nE.g. the HTML for a new question on the stackoverflow.com index page is:\r\n\r\n    &lt;div id=&quot;question-summary-11326954&quot; class=&quot;question-summary narrow&quot;&gt;\r\n\r\n        &lt;!-- skipped, this is getting too long --&gt;\r\n\r\n        &lt;div class=&quot;summary&quot;&gt;\r\n\r\n            &lt;h3&gt;&lt;a title=&quot;Some times my tree list have vertical scroll ,then I scrolled very fast and the tree list shivered .Have any solution for this.\r\n    &quot; class=&quot;question-hyperlink&quot; href=&quot;/questions/11326954/about-scroll-bar-issue-in-tree&quot;&gt;About Scroll bar issue in Tree&lt;/a&gt;&lt;/h3&gt;\r\n\r\n        &lt;!-- skipped --&gt;\r\n\r\n        &lt;/div&gt;\r\n    &lt;/div&gt;\r\n\r\nSo you just remove this certain id, title and summary, to create a template that will read all new questions in title, summary, link-arrays:\r\n\r\n     &lt;t:loop&gt;\r\n       &lt;div class=&quot;question-summary narrow&quot;&gt;\r\n         &lt;div class=&quot;summary&quot;&gt;\r\n           &lt;h3&gt;\r\n              &lt;a class=&quot;question-hyperlink&quot;&gt;\r\n                {title:=text(), summary:=@title, link:=@href}\r\n              &lt;/a&gt;\r\n           &lt;/h3&gt;\r\n         &lt;/div&gt;\r\n       &lt;/div&gt;\r\n     &lt;/t:loop&gt;\r\n\r\nAnd of course it also supports the basic techniques, CSS 3 selectors, XPath 2 and  XQuery 1 expressions.\r\n\r\nThe only problem is that I was so stupid to make it a [Free Pascal][2] library. But there is also language independent [web demo][3].\r\n\r\n  [1]: http://www.benibela.de/sources_en.html#internettools\r\n  [2]: http://en.wikipedia.org/wiki/Free_Pascal\r\n  [3]: http://videlibri.sourceforge.net/cgi-bin/xidelcgi\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1351526376, "answer_id": 13125198, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1501520865, "last_edit_date": 1501520865, "body_markdown": "Well, if you want it done from the client side using only a browser you have [jcrawl.com][1]. After having designed your scrapping service from the web application (http://www.jcrawl.com/app.html), you only need to add the generated script to an HTML page to start using/presenting your data.\r\n\r\nAll the scrapping logic happens on the the browser via JavaScript. I hope you find it useful. Click this link for a live example that extracts the [latest news from Yahoo tennis][2].\r\n\r\n  [1]: http://www.jcrawl.com\r\n  [2]: http://www.jcrawl.com/app.html#service=yahoo+tennis+news&amp;resultsview=1&amp;data=%7B%22serviceId%22%3A%22service%20705%22%2C%22service%22%3A%22yahoo%20tennis%20news%22%2C%22host%22%3A%22http%3A%2F%2Fsports.yahoo.com%2Ftennis%2F%22%2C%22renderHtml%22%3Atrue%2C%22height%22%3A394%2C%22dataType%22%3A%22list%22%2C%22dataModel%22%3A%5B%7B%22column%22%3A%5B%7B%22indexPath%22%3A%5B0%2C0%2C1%2C1%2C0%2C0%2C1%2C0%2C1%2C0%2C0%2C0%5D%2C%22attribute%22%3A%22innerHtml%22%2C%22field%22%3A%22title%22%7D%2C%7B%22indexPath%22%3A%5B0%2C0%2C1%2C1%2C0%2C0%2C1%2C0%2C1%2C0%2C0%2C0%2C0%5D%2C%22attribute%22%3A%22href%22%2C%22field%22%3A%22link%22%7D%5D%7D%2C%7B%22column%22%3A%5B%7B%22indexPath%22%3A%5B0%2C0%2C1%2C1%2C0%2C0%2C1%2C0%2C1%2C0%2C1%2C0%5D%2C%22attribute%22%3A%22innerHtml%22%2C%22field%22%3A%22Field%201%22%7D%2C%7B%22indexPath%22%3A%5B0%2C0%2C1%2C1%2C0%2C0%2C1%2C0%2C1%2C0%2C1%2C0%2C0%5D%2C%22attribute%22%3A%22href%22%2C%22field%22%3A%22Field%202%22%7D%5D%7D%5D%7D\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1368210531, "answer_id": 16488658, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1501520937, "last_edit_date": 1501520937, "body_markdown": "When it comes to extracting data from an HTML document on the server-side, [Node.js][1] is a fantastic option. I have used it successfully with two modules called [request][2] and [cheerio][3].\r\n\r\nYou can see an example how it works [here][4].\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Node.js\r\n  [2]: https://github.com/mikeal/request\r\n  [3]: https://github.com/MatthewMueller/cheerio\r\n  [4]: http://procbits.com/2012/04/11/quick-and-dirty-screen-scraping-with-node-js-using-request-and-cheerio\r\n"}], "title": "Options for HTML scraping?", "view_count": 162778, "answer_count": 40, "code_snippet": ["<code>SELECT title from img WHERE $class == 'userpic'\n</code>", "<code>WWW:Mechanize</code>", "<code>libwww</code>", "<code>* Clicking links on websites\n* Entering data into forms and submitting\n* Iterating through search result pages\n* Downloading files (PDF, MS Word, images, etc.)\n</code>", "<code>* Download all products, records from a website\n* Build a shopping comparison site\n* Perform market research\n* Integrate or migrate data\n</code>", "<code>* Graphical interface--easy automation\n* Cross platform (Linux, Mac, Windows, etc.)\n* Integrates with most programming languages (Java, PHP, .NET, ASP, Ruby, etc.)\n* Runs on workstations or servers\n</code>", "<code>* Enterprise: The most feature-rich edition of screen-scraper. All capabilities are enabled.\n* Professional: Designed to be capable of handling most common scraping projects.\n* Basic: Works great for simple projects, but not nearly as many features as its two older brothers.\n</code>", "<code>require 'hpricot'\n\nShoes.app :title =&gt; \"Ask Stack Overflow\", :width =&gt; 370 do\n  SO_URL = \"http://stackoverflow.com\"\n  stack do\n    stack do\n      caption \"What is your question?\"\n      flow do\n        @lookup = edit_line \"stackoverflow\", :width =&gt; \"-115px\"\n        button \"Ask\", :width =&gt; \"90px\" do\n          download SO_URL + \"/search?s=\" + @lookup.text do |s|\n            doc = Hpricot(s.response.body)\n            @rez.clear()\n            (doc/:a).each do |l|\n              href = l[\"href\"]\n              if href.to_s =~ /\\/questions\\/[0-9]+/ then\n                @rez.append do\n                  para(link(l.inner_text) { visit(SO_URL + href) })\n                end\n              end\n            end\n            @rez.show()\n          end\n        end\n      end\n    end\n    stack :margin =&gt; 25 do\n      background white, :radius =&gt; 20\n      @rez = stack do\n      end\n    end\n    @rez.hide()\n  end\nend\n</code>", "<code>pagerange = 1..6\nproxy = Net::HTTP::Proxy(proxy, port, user, pwd)\nproxy.start('www.hirethings.co.nz') do |http|\n  pagerange.each do |page|\n    resp, data = http.get \"/perth_dotnet?page=#{page}\" \n    if resp.class == Net::HTTPOK\n      (Hpricot(data)/\"h3 a\").each { |a| puts a.innerText }\n    end\n  end\nend \n</code>", "<code>Sub GetLinks(ByVal PagesIE As IE, ByVal MyWorkSheet As Excel.Worksheet)\n\n    Dim PagesLink As Link\n    For Each PagesLink In PagesIE.TableBodies(2).Links\n        With MyWorkSheet\n            .Cells(XLRowCounterInt, 1) = PagesLink.Text\n            .Cells(XLRowCounterInt, 2) = PagesLink.Url\n        End With\n        XLRowCounterInt = XLRowCounterInt + 1\n    Next\nEnd Sub\n</code>", "<code>use LWP\nuse HTML::TableExtract\nuse HTML::TreeBuilder\nuse HTML::Form\nuse Data::Dumper\n</code>", "<code>from __future__ import with_statement\nimport re, os\n\nprofile = \"\"\n\nos.system('wget --no-cookies --header \"Cookie: soba=(SeCreTCODe)\" http://stackoverflow.com/users/30/myProfile.html')\nwith open(\"myProfile.html\") as f:\n    for line in f:\n        profile = profile + line\nf.close()\np = re.compile('summarycount\"&gt;(\\d+)&lt;/div&gt;') #Rep is found here\nprint p\nm = p.search(profile)\nprint m\nprint m.group(1)\nos.system(\"espeak \\\"Rep is at \" + m.group(1) + \" points\\\"\"\nos.remove(\"myProfile.html\")\n</code>", "<code>importxml()</code>"], "path": "stack.django"}, {"tags": ["python", "django", "many-to-many", "foreign-key-relationship"], "creation_date": 1271303503, "body_markdown": "What is the `related_name` argument useful for on `ManyToManyField` and `ForeignKey` fields? For example, given the following code, what is the effect of `related_name=&#39;maps&#39;`?\r\n\r\n\r\n    class Map(db.Model):\r\n        members = models.ManyToManyField(User, related_name=&#39;maps&#39;,\r\n                                         verbose_name=_(&#39;members&#39;))", "last_edit_date": 1450513123, "up_vote_count": 194, "link": "https://stackoverflow.com/questions/2642613/what-is-related-name-used-for-in-django", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1271304121, "answer_id": 2642645, "path": "stack.django.answer", "score": 273, "up_vote_count": 273, "is_accepted": true, "last_activity_date": 1379086952, "last_edit_date": 1379086952, "body_markdown": "The `related_name` attribute specifies the name of the reverse relation from the `User` model back to your model.\r\n\r\nIf you don&#39;t specify a `related_name`, Django automatically creates one using the name of your model with the suffix `_set`, for instance `User.map_set.all()`. \r\n\r\nIf you *do* specify, e.g. `related_name=maps` on the `User` model, `User.map_set` will still work, but the `User.maps.` syntax is obviously a bit cleaner and less clunky; so for example, if you had a user object `current_user`, you could use `current_user.maps.all()` to get all instances of your `Map` model that have a relation to `current_user`. \r\n\r\nThe [Django documentation][1] has more details.\r\n\r\n[1]: http://docs.djangoproject.com/en/dev/topics/db/queries/#backwards-related-objects"}, {"tags": [], "down_vote_count": 0, "creation_date": 1461851562, "answer_id": 36916782, "path": "stack.django.answer", "score": 31, "up_vote_count": 31, "is_accepted": false, "last_activity_date": 1461851562, "body_markdown": "To add to existing  answer - related name is a must in case there 2 FKs in the model that point to the same table. For example in case of Bill of material\r\n\r\n    @with_author \r\n    class BOM(models.Model): \r\n        name = models.CharField(max_length=200,null=True, blank=True)\r\n        description = models.TextField(null=True, blank=True)\r\n        tomaterial =  models.ForeignKey(Material, related_name = &#39;tomaterial&#39;)\r\n        frommaterial =  models.ForeignKey(Material, related_name = &#39;frommaterial&#39;)\r\n        creation_time = models.DateTimeField(auto_now_add=True, blank=True)\r\n        quantity = models.DecimalField(max_digits=19, decimal_places=10)\r\n\r\nSo when you will have to access this data \r\nyou only can use related name \r\n\r\n   \r\n\r\n     bom = material.tomaterial.all().order_by(&#39;-creation_time&#39;)\r\n\r\nIt is not working otherwise (at least I was not able to skip the usage of related name in case of 2 FK&#39;s to the same table.)"}], "title": "What is `related_name` used for in Django?", "view_count": 86801, "answer_count": 2, "code_snippet": ["<code>related_name</code>", "<code>ManyToManyField</code>", "<code>ForeignKey</code>", "<code>related_name='maps'</code>", "<code>class Map(db.Model):\n    members = models.ManyToManyField(User, related_name='maps',\n                                     verbose_name=_('members'))\n</code>", "<code>related_name</code>", "<code>related_name</code>", "<code>User</code>", "<code>related_name</code>", "<code>_set</code>", "<code>User.map_set.all()</code>", "<code>related_name=maps</code>", "<code>User</code>", "<code>User.map_set</code>", "<code>User.maps.</code>", "<code>current_user</code>", "<code>current_user.maps.all()</code>", "<code>Map</code>", "<code>current_user</code>", "<code>related_name='maps+'</code>", "<code>@with_author \nclass BOM(models.Model): \n    name = models.CharField(max_length=200,null=True, blank=True)\n    description = models.TextField(null=True, blank=True)\n    tomaterial =  models.ForeignKey(Material, related_name = 'tomaterial')\n    frommaterial =  models.ForeignKey(Material, related_name = 'frommaterial')\n    creation_time = models.DateTimeField(auto_now_add=True, blank=True)\n    quantity = models.DecimalField(max_digits=19, decimal_places=10)\n</code>", "<code> bom = material.tomaterial.all().order_by('-creation_time')\n</code>", "<code>related_name</code>"], "path": "stack.django"}, {"tags": ["python", "web-services", "rest", "frameworks"], "creation_date": 1238764403, "body_markdown": "Is there a list somewhere of recommendations of different Python-based REST frameworks for use on the serverside to write your own RESTful APIs? Preferably with pros and cons.\r\n\r\nPlease feel free to add recommendations here. :)\r\n", "last_edit_date": 1244656801, "up_vote_count": 321, "link": "https://stackoverflow.com/questions/713847/recommendations-of-python-rest-web-services-framework", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1238764559, "answer_id": 713858, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1238764559, "body_markdown": "I am not an expert on the python world but I have been using [django][1] which is an excellent web framework and can be used to create a restful framework.\r\n\r\n\r\n  [1]: http://www.djangoproject.com/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1238765166, "answer_id": 713892, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1238765166, "body_markdown": "See [Python Web Frameworks][1] wiki.\r\n\r\nYou probably do not need the *full stack* frameworks, but the remaining list is still quite long.\r\n\r\n\r\n  [1]: http://wiki.python.org/moin/WebFrameworks"}, {"tags": [], "down_vote_count": 3, "creation_date": 1238765430, "answer_id": 713911, "path": "stack.django.answer", "score": 23, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1238765430, "body_markdown": "We&#39;re using [Django][1] for RESTful web services.\r\n\r\nNote that -- out of the box -- Django did not have fine-grained enough authentication for our needs.  We used the [Django-REST interface][2], which helped a lot.  [We&#39;ve since rolled our own because we&#39;d made so many extensions that it had become a maintenance nightmare.]\r\n\r\nWe have two kinds of URL&#39;s: &quot;html&quot; URL&#39;s which implement the human-oriented HTML pages, and &quot;json&quot; URL&#39;s which implement the web-services oriented processing.  Our view functions often look like this.\r\n\r\n    def someUsefulThing( request, object_id ):\r\n        # do some processing\r\n        return { a dictionary with results }\r\n\r\n    def htmlView( request, object_id ):\r\n        d = someUsefulThing( request, object_id )\r\n        render_to_response( &#39;template.html&#39;, d, ... )\r\n\r\n    def jsonView( request, object_id ):\r\n        d = someUsefulThing( request, object_id )\r\n        data = serializers.serialize( &#39;json&#39;, d[&#39;object&#39;], fields=EXPOSED_FIELDS )\r\n        response = HttpResponse( data, status=200, content_type=&#39;application/json&#39; )\r\n        response[&#39;Location&#39;]= reverse( &#39;some.path.to.this.view&#39;, kwargs={...} )\r\n        return response\r\n\r\nThe point being that the useful functionality is factored out of the two presentations.  The JSON presentation is usually just one object that was requested.  The HTML presentation often includes all kinds of navigation aids and other contextual clues that help people be productive.\r\n\r\nThe `jsonView` functions are all very similar, which can be a bit annoying.  But it&#39;s Python, so make them part of a callable class or write decorators if it helps.\r\n\r\n  [1]: http://www.djangoproject.com/\r\n  [2]: http://code.google.com/p/django-rest-interface/"}, {"tags": [], "down_vote_count": 6, "creation_date": 1238765944, "answer_id": 713950, "path": "stack.django.answer", "score": 8, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1238765944, "body_markdown": "I really like &lt;a href=&quot;http://cherrypy.org/&quot;&gt;CherryPy&lt;/a&gt;.  Here&#39;s an example of a restful web service:\r\n\r\n    import cherrypy\r\n    from cherrypy import expose\r\n    \r\n    class Converter:\r\n        @expose\r\n        def index(self):\r\n            return &quot;Hello World!&quot;\r\n        \r\n        @expose\r\n        def fahr_to_celc(self, degrees):\r\n            temp = (float(degrees) - 32) * 5 / 9\r\n            return &quot;%.01f&quot; % temp\r\n        \r\n        @expose\r\n        def celc_to_fahr(self, degrees):\r\n            temp = float(degrees) * 9 / 5 + 32\r\n            return &quot;%.01f&quot; % temp\r\n    \r\n    cherrypy.quickstart(Converter())\r\n\r\nThis emphasizes what I really like about CherryPy; this is a completely working example that&#39;s very understandable even to someone who doesn&#39;t know the framework.  If you run this code, then you can immediately see the results in your web browser; e.g. visiting http://localhost:8080/celc_to_fahr?degrees=50 will display `122.0` in your web browser."}, {"tags": [], "down_vote_count": 3, "creation_date": 1243506321, "answer_id": 920181, "path": "stack.django.answer", "score": 192, "up_vote_count": 195, "is_accepted": true, "last_activity_date": 1334709706, "last_edit_date": 1334709706, "body_markdown": "Something to be careful about when designing a RESTful API is the conflation of GET and POST, as if they were the same thing. It&#39;s easy to make this mistake with [Django][1]&#39;s [function-based views][2] and [CherryPy][3]&#39;s default dispatcher, although both frameworks now provide a way around this problem ([class-based views][4] and [MethodDispatcher][5], respectively).\r\n\r\n[HTTP-verbs are very important][6] in REST, and unless you&#39;re very careful about this, you&#39;ll end up falling into a [REST anti-pattern][7].\r\n\r\nSome frameworks that get it right are [web.py][8], [Flask][9] and [Bottle][10]. When combined with the [mimerender][11] library (full disclosure: I wrote it), they allow you to write nice RESTful webservices:\r\n\r\n    import web\r\n    import json\r\n    from mimerender import mimerender\r\n    \r\n    render_xml = lambda message: &#39;&lt;message&gt;%s&lt;/message&gt;&#39;%message\r\n    render_json = lambda **args: json.dumps(args)\r\n    render_html = lambda message: &#39;&lt;html&gt;&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;&#39;%message\r\n    render_txt = lambda message: message\r\n    \r\n    urls = (\r\n        &#39;/(.*)&#39;, &#39;greet&#39;\r\n    )\r\n    app = web.application(urls, globals())\r\n    \r\n    class greet:\r\n        @mimerender(\r\n            default = &#39;html&#39;,\r\n            html = render_html,\r\n            xml  = render_xml,\r\n            json = render_json,\r\n            txt  = render_txt\r\n        )\r\n        def GET(self, name):\r\n            if not name: \r\n                name = &#39;world&#39;\r\n            return {&#39;message&#39;: &#39;Hello, &#39; + name + &#39;!&#39;}\r\n    \r\n    if __name__ == &quot;__main__&quot;:\r\n        app.run()\r\n\r\nThe service&#39;s logic is implemented only once, and the correct representation selection (Accept header) + dispatch to the proper render function (or template) is done in a tidy, transparent way.\r\n\r\n    $ curl localhost:8080/x\r\n    &lt;html&gt;&lt;body&gt;Hello, x!&lt;/body&gt;&lt;/html&gt;\r\n    \r\n    $ curl -H &quot;Accept: application/html&quot; localhost:8080/x\r\n    &lt;html&gt;&lt;body&gt;Hello, x!&lt;/body&gt;&lt;/html&gt;\r\n    \r\n    $ curl -H &quot;Accept: application/xml&quot; localhost:8080/x\r\n    &lt;message&gt;Hello, x!&lt;/message&gt;\r\n    \r\n    $ curl -H &quot;Accept: application/json&quot; localhost:8080/x\r\n    {&#39;message&#39;:&#39;Hello, x!&#39;}\r\n    \r\n    $ curl -H &quot;Accept: text/plain&quot; localhost:8080/x\r\n    Hello, x!\r\n\r\n\r\n**Update (April 2012)**: added information about Django&#39;s class-based views, CherryPy&#39;s MethodDispatcher and Flask and Bottle frameworks. Neither existed back when the question was asked.\r\n\r\n\r\n  [1]: http://www.djangoproject.com/\r\n  [2]: https://docs.djangoproject.com/en/dev/topics/http/views/\r\n  [3]: http://www.cherrypy.org/\r\n  [4]: https://docs.djangoproject.com/en/dev/topics/class-based-views/\r\n  [5]: http://docs.cherrypy.org/dev/refman/_cpdispatch.html#cherrypy._cpdispatch.MethodDispatcher\r\n  [6]: http://en.wikipedia.org/wiki/Representational_State_Transfer#RESTful_web_services\r\n  [7]: http://www.infoq.com/articles/rest-anti-patterns\r\n  [8]: http://webpy.org/\r\n  [9]: http://flask.pocoo.org\r\n  [10]: http://bottlepy.org\r\n  [11]: https://github.com/martinblech/mimerender"}, {"tags": [], "down_vote_count": 0, "creation_date": 1249950125, "answer_id": 1257920, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1249950600, "last_edit_date": 1249950600, "body_markdown": "Take a look at\r\n\r\n - [Itty][1] ([blog post][5])\r\n - [Bottle][2]\r\n - [web.py][3]\r\n - [juno][4]\r\n\r\n\r\n  [1]: http://github.com/toastdriven/itty/tree &quot;Itty&quot;\r\n  [2]: http://github.com/defnull/bottle/tree &quot;Bottle&quot;\r\n  [3]: http://webpy.org/\r\n  [4]: http://brianreily.com/project/juno/\r\n  [5]: http://www.toastdriven.com/fresh/itty-sinatra-inspired-micro-framework/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1258038838, "answer_id": 1722910, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1258038838, "body_markdown": "I strongly recommend TurboGears or Bottle:\r\n\r\nTurboGears:\r\n\r\n - less verbose than django\r\n - more flexible, less HTML-oriented \r\n - but: less famous\r\n\r\nBottle:\r\n\r\n - very fast\r\n - very easy to learn\r\n - but: minimalistic and not mature"}, {"tags": [], "down_vote_count": 0, "creation_date": 1286274207, "answer_id": 3862753, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1286274207, "body_markdown": "Here is a discussion in CherryPy docs on REST: http://docs.cherrypy.org/dev/progguide/REST.html\r\n\r\nIn particular it mentions a built in CherryPy dispatcher called MethodDispatcher, which invokes methods based on their HTTP-verb identifiers (GET, POST, etc...)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1291486068, "answer_id": 4354998, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1291486068, "body_markdown": "[Piston][1] is very flexible framework for wirting RESTful APIs for Django applications.\r\n\r\n\r\n  [1]: http://bitbucket.org/jespern/django-piston/wiki/Home"}, {"tags": [], "down_vote_count": 1, "creation_date": 1294469388, "answer_id": 4632784, "path": "stack.django.answer", "score": 71, "up_vote_count": 72, "is_accepted": false, "last_activity_date": 1331682647, "last_edit_date": 1331682647, "body_markdown": "Surprised no one mentioned [flask][1].\r\n\r\n  [1]: http://flask.pocoo.org/\r\n\r\n    from flask import Flask\r\n    app = Flask(__name__)\r\n    \r\n    @app.route(&quot;/&quot;)\r\n    def hello():\r\n        return &quot;Hello World!&quot;\r\n    \r\n    if __name__ == &quot;__main__&quot;:\r\n        app.run()"}, {"tags": [], "down_vote_count": 1, "creation_date": 1301322402, "answer_id": 5460433, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1328281655, "last_edit_date": 1328281655, "body_markdown": "[web2py](http://www.web2py.com) includes support for easily building RESTful API&#39;s, described [here](http://web2py.com/books/default/chapter/29/10#Restful-Web-Services) and [here](http://vimeo.com/21133657) (video). In particular, look at [`parse_as_rest`](http://web2py.com/books/default/chapter/29/10#parse_as_rest-%28experimental%29), which lets you define URL patterns that map request args to database queries; and [`smart_query`](http://web2py.com/books/default/chapter/29/10#smart_query-%28experimental%29), which enables you to pass arbitrary natural language queries in the URL."}, {"tags": [], "down_vote_count": 0, "creation_date": 1301328839, "answer_id": 5461908, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1301328839, "body_markdown": "In 2010, the Pylons and repoze.bfg communities &quot;joined forces&quot; to create &lt;a href=&quot;http://pylonsproject.org/&quot;&gt;Pyramid&lt;/a&gt;, a web framework based most heavily on repoze.bfg. It retains the philosophies of its parent frameworks, and can be used for &lt;a href=&quot;http://zhuoqiang.me/a/restful-pyramid&quot;&gt;RESTful services&lt;/a&gt;.  It&#39;s worth a look."}, {"tags": [], "down_vote_count": 0, "creation_date": 1312195842, "answer_id": 6897383, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1312195842, "body_markdown": "I don&#39;t see any reason to use Django just to expose a REST api, there are lighter and more flexible solutions. Django carries a lot of other things to the table, that are not always needed. For sure not needed if you only want to expose some code as a REST service. \r\n\r\nMy personal experience, fwiw, is that once you have a one-size-fits-all framework, you&#39;ll start to use its ORM, its plugins, etc. just because it&#39;s easy, and in no time you end up having a dependency that is very hard to get rid of.\r\n\r\nChoosing a web framework is a tough decision, and I would avoid picking a full stack solution just to expose a REST api. \r\n\r\nNow, if you really need/want to use Django, then Piston is a nice REST framework for django apps.\r\n\r\nThat being said, CherryPy looks really nice too, but seems more RPC than REST.\r\n\r\nLooking at the samples (I never used it), probably web.py is the best and cleanest if you only need REST."}, {"tags": [], "down_vote_count": 0, "creation_date": 1321922785, "answer_id": 8220601, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1321922785, "body_markdown": "We are working on a framework for strict REST services, check out http://prestans.googlecode.com \r\n\r\nIts in early Alpha at the moment, we are testing against mod_wsgi and Google&#39;s AppEngine.\r\n\r\nLooking for testers and feedback. Thanks."}, {"tags": [], "down_vote_count": 0, "creation_date": 1328860177, "answer_id": 9224424, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1328860177, "body_markdown": "I you are using Django then you can consider [django-tastypie][1] as an alternative to [django-piston][2]. It is easier to tune to non-ORM data sources than piston, and has great [documentation][3].\r\n\r\n\r\n  [1]: https://github.com/toastdriven/django-tastypie\r\n  [2]: https://bitbucket.org/jespern/django-piston/wiki/Home\r\n  [3]: http://tastypieapi.org/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1330176413, "answer_id": 9444396, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1356256204, "last_edit_date": 1356256204, "body_markdown": "Seems all kinds of python web frameworks can implement RESTful interfaces now.\r\n\r\nFor Django, besides tastypie and piston, django-rest-framework is a promising one worth to mention. I&#39;ve already migrated one of my project on it smoothly.\r\n\r\n&gt; Django REST framework is a lightweight REST framework for Django, that\r\n&gt; aims to make it easy to build well-connected, self-describing RESTful\r\n&gt; Web APIs.\r\n\r\nQuick example:\r\n\r\n    from django.conf.urls.defaults import patterns, url\r\n    from djangorestframework.resources import ModelResource\r\n    from djangorestframework.views import ListOrCreateModelView, InstanceModelView\r\n    from myapp.models import MyModel\r\n    \r\n    class MyResource(ModelResource):\r\n        model = MyModel\r\n    \r\n    urlpatterns = patterns(&#39;&#39;,\r\n        url(r&#39;^$&#39;, ListOrCreateModelView.as_view(resource=MyResource)),\r\n        url(r&#39;^(?P&lt;pk&gt;[^/]+)/$&#39;, InstanceModelView.as_view(resource=MyResource)),\r\n    )\r\n\r\nTake the example from official site, all above codes provide api, self explained document(like soap based webservice) and even sandbox to test a bit. Very convenience.\r\n\r\nLinks:\r\nhttp://django-rest-framework.org/  "}], "title": "Recommendations of Python REST (web services) framework?", "view_count": 222720, "answer_count": 16, "code_snippet": ["<code>import web\nimport json\nfrom mimerender import mimerender\n\nrender_xml = lambda message: '&lt;message&gt;%s&lt;/message&gt;'%message\nrender_json = lambda **args: json.dumps(args)\nrender_html = lambda message: '&lt;html&gt;&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;'%message\nrender_txt = lambda message: message\n\nurls = (\n    '/(.*)', 'greet'\n)\napp = web.application(urls, globals())\n\nclass greet:\n    @mimerender(\n        default = 'html',\n        html = render_html,\n        xml  = render_xml,\n        json = render_json,\n        txt  = render_txt\n    )\n    def GET(self, name):\n        if not name: \n            name = 'world'\n        return {'message': 'Hello, ' + name + '!'}\n\nif __name__ == \"__main__\":\n    app.run()\n</code>", "<code>$ curl localhost:8080/x\n&lt;html&gt;&lt;body&gt;Hello, x!&lt;/body&gt;&lt;/html&gt;\n\n$ curl -H \"Accept: application/html\" localhost:8080/x\n&lt;html&gt;&lt;body&gt;Hello, x!&lt;/body&gt;&lt;/html&gt;\n\n$ curl -H \"Accept: application/xml\" localhost:8080/x\n&lt;message&gt;Hello, x!&lt;/message&gt;\n\n$ curl -H \"Accept: application/json\" localhost:8080/x\n{'message':'Hello, x!'}\n\n$ curl -H \"Accept: text/plain\" localhost:8080/x\nHello, x!\n</code>", "<code>from flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\nif __name__ == \"__main__\":\n    app.run()\n</code>", "<code>def someUsefulThing( request, object_id ):\n    # do some processing\n    return { a dictionary with results }\n\ndef htmlView( request, object_id ):\n    d = someUsefulThing( request, object_id )\n    render_to_response( 'template.html', d, ... )\n\ndef jsonView( request, object_id ):\n    d = someUsefulThing( request, object_id )\n    data = serializers.serialize( 'json', d['object'], fields=EXPOSED_FIELDS )\n    response = HttpResponse( data, status=200, content_type='application/json' )\n    response['Location']= reverse( 'some.path.to.this.view', kwargs={...} )\n    return response\n</code>", "<code>jsonView</code>", "<code>y = someUsefulThing(...)</code>", "<code>someUsefulThing(request, object_id)</code>", "<code>someUsefulThing</code>", "<code>paginate(request, Post.objects.filter(deleted=False, owner=request.user).order_by('comment_count'))</code>", "<code>import cherrypy\nfrom cherrypy import expose\n\nclass Converter:\n    @expose\n    def index(self):\n        return \"Hello World!\"\n\n    @expose\n    def fahr_to_celc(self, degrees):\n        temp = (float(degrees) - 32) * 5 / 9\n        return \"%.01f\" % temp\n\n    @expose\n    def celc_to_fahr(self, degrees):\n        temp = float(degrees) * 9 / 5 + 32\n        return \"%.01f\" % temp\n\ncherrypy.quickstart(Converter())\n</code>", "<code>122.0</code>", "<code>from django.conf.urls.defaults import patterns, url\nfrom djangorestframework.resources import ModelResource\nfrom djangorestframework.views import ListOrCreateModelView, InstanceModelView\nfrom myapp.models import MyModel\n\nclass MyResource(ModelResource):\n    model = MyModel\n\nurlpatterns = patterns('',\n    url(r'^$', ListOrCreateModelView.as_view(resource=MyResource)),\n    url(r'^(?P&lt;pk&gt;[^/]+)/$', InstanceModelView.as_view(resource=MyResource)),\n)\n</code>", "<code>parse_as_rest</code>", "<code>smart_query</code>"], "path": "stack.django"}, {"tags": ["javascript", "jquery", "html", "escaping", "html-escape-characters"], "creation_date": 1249247309, "body_markdown": "I\u2019m using JavaScript to pull a value out from a hidden field and display it in a textbox. The value in the hidden field is encoded.\r\n\r\nFor example,\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;input id=&#39;hiddenId&#39; type=&#39;hidden&#39; value=&#39;chalk &amp;amp; cheese&#39; /&gt;\r\n\r\ngets pulled into\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;input type=&#39;text&#39; value=&#39;chalk &amp;amp; cheese&#39; /&gt;\r\n\r\nvia some jQuery to get the value from the hidden field (it\u2019s at this point that I lose the encoding):\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    $(&#39;#hiddenId&#39;).attr(&#39;value&#39;)\r\n\r\nThe problem is that when I read `chalk &amp;amp; cheese` from the hidden field, JavaScript seems to lose the encoding. To escape `&quot;` and `&#39;`, I want the encoding to remain.\r\n\r\nIs there a JavaScript library or a jQuery method that will HTML-encode a string?", "last_edit_date": 1508431998, "up_vote_count": 678, "link": "https://stackoverflow.com/questions/1219860/html-encoding-lost-when-attribute-read-from-input-field", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1249247813, "answer_id": 1219876, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1292584819, "last_edit_date": 1292584819, "body_markdown": "afaik there isn&#39;t any straight forward HTML Encode/Decode methods in javascript.\r\n\r\nHowever, what you can do, is to use JS to create an arbitrary element, set it&#39;s inner text, then read it using innerHTML. \r\n\r\nsay, with jQuery this should work:\r\n\r\n    var helper = $(&#39;chalk &amp; cheese&#39;).hide().appendTo(&#39;body&#39;);\r\n    var htmled = helper.html();\r\n    helper.remove();\r\nor something along these lines\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1249247834, "answer_id": 1219877, "path": "stack.django.answer", "score": 4, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1249247834, "body_markdown": "[Prototype][1] has it built-in the [String class][2]. So if you are using/plan to use Prototype, it does something like:\r\n\r\n    &#39;&lt;div class=&quot;article&quot;&gt;This is an article&lt;/div&gt;&#39;.escapeHTML();\r\n    // -&gt; &quot;&amp;lt;div class=&quot;article&quot;&amp;gt;This is an article&amp;lt;/div&amp;gt;&quot;\r\n\r\n\r\n  [1]: http://prototypejs.org/\r\n  [2]: http://prototypejs.org/api/string"}, {"tags": [], "down_vote_count": 17, "creation_date": 1249250590, "answer_id": 1219983, "path": "stack.django.answer", "score": 1014, "up_vote_count": 1031, "is_accepted": true, "last_activity_date": 1489767590, "last_edit_date": 1489767590, "body_markdown": "I use these functions:\r\n\r\n    function htmlEncode(value){\r\n      // Create a in-memory div, set its inner text (which jQuery automatically encodes)\r\n      // Then grab the encoded contents back out. The div never exists on the page.\r\n      return $(&#39;&lt;div/&gt;&#39;).text(value).html();\r\n    }\r\n     \r\n    function htmlDecode(value){\r\n      return $(&#39;&lt;div/&gt;&#39;).html(value).text();\r\n    }\r\n\r\nBasically a div element is created in memory, but it is never appended to the document.\r\n\r\nOn the `htmlEncode` function I set the `innerText` of the element, and retrieve the encoded `innerHTML`; on the `htmlDecode` function I set the `innerHTML` value of the element and the `innerText` is retrieved.\r\n\r\nCheck a running example [here][1].\r\n\r\n\r\n  [1]: http://jsbin.com/ejuru"}, {"tags": [], "down_vote_count": 1, "creation_date": 1264335208, "answer_id": 2126967, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1264335208, "body_markdown": "FWIW, the encoding is not being lost.  The encoding is used by the markup parser (browser) during the page load.  Once the source is read and parsed and the browser has the DOM loaded into memory, the encoding has been parsed into what it represents. So by the time your JS is execute to read anything in memory, the char it gets is what the encoding represented.\r\n\r\nI may be operating strictly on semantics here, but I wanted you to understand the purpose of encoding.  The word &quot;lost&quot; makes it sound like something isn&#39;t working like it should."}, {"tags": [], "down_vote_count": 1, "creation_date": 1288110763, "answer_id": 4025774, "path": "stack.django.answer", "score": 31, "up_vote_count": 32, "is_accepted": false, "last_activity_date": 1427337689, "last_edit_date": 1495540499, "body_markdown": "I know this is an old one, but I wanted to post a variation of [the accepted answer](https://stackoverflow.com/a/1219983/578288) that will work in IE without removing lines:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function multiLineHtmlEncode(value) {\r\n        var lines = value.split(/\\r\\n|\\r|\\n/);\r\n        for (var i = 0; i &lt; lines.length; i++) {\r\n            lines[i] = htmlEncode(lines[i]);\r\n        }\r\n        return lines.join(&#39;\\r\\n&#39;);\r\n    }\r\n    \r\n    function htmlEncode(value) {\r\n        return $(&#39;&lt;div/&gt;&#39;).text(value).html();\r\n    } \r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1288737613, "answer_id": 4082742, "path": "stack.django.answer", "score": 11, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1288737613, "body_markdown": "Good answer. Note that if the value to encode is `undefined` or `null` with jQuery 1.4.2 you might get errors such as:\r\n\r\n`jQuery(&quot;&lt;div/&gt;&quot;).text(value).html is not a function`\r\n\r\nOR\r\n\r\n`Uncaught TypeError: Object  has no method &#39;html&#39;`\r\n\r\nThe solution is to modify the function to check for an actual value:\r\n\r\n    function htmlEncode(value){ \r\n    \tif (value) {\r\n    \t\treturn jQuery(&#39;&lt;div/&gt;&#39;).text(value).html(); \r\n    \t} else {\r\n    \t\treturn &#39;&#39;;\r\n    \t}\r\n    }\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1313768468, "answer_id": 7124052, "path": "stack.django.answer", "score": 512, "up_vote_count": 513, "is_accepted": false, "last_activity_date": 1468588825, "last_edit_date": 1495540499, "body_markdown": "The jQuery trick doesn&#39;t encode quote marks and in IE it will strip your whitespace.\r\n\r\nBased on the **escape** templatetag in Django, which I guess is heavily used/tested already, I made this function which does what&#39;s needed.\r\n\r\nIt&#39;s arguably simpler (and possibly faster) than any of the workarounds for the whitespace-stripping issue - and it encodes quote marks, which is essential if you&#39;re going to use the result inside an attribute value for example.\r\n\r\n    function htmlEscape(str) {\r\n        return str\r\n            .replace(/&amp;/g, &#39;&amp;amp;&#39;)\r\n            .replace(/&quot;/g, &#39;&amp;quot;&#39;)\r\n            .replace(/&#39;/g, &#39;&amp;#39;&#39;)\r\n            .replace(/&lt;/g, &#39;&amp;lt;&#39;)\r\n            .replace(/&gt;/g, &#39;&amp;gt;&#39;);\r\n    }\r\n\r\n    // I needed the opposite function today, so adding here too:\r\n    function htmlUnescape(str){\r\n        return str\r\n            .replace(/&amp;quot;/g, &#39;&quot;&#39;)\r\n            .replace(/&amp;#39;/g, &quot;&#39;&quot;)\r\n            .replace(/&amp;lt;/g, &#39;&lt;&#39;)\r\n            .replace(/&amp;gt;/g, &#39;&gt;&#39;)\r\n            .replace(/&amp;amp;/g, &#39;&amp;&#39;);\r\n    }\r\n\r\n**Update 2013-06-17:**  \r\nIn the search for the fastest escaping I have found this implementation of a `replaceAll` method:  \r\nhttp://dumpsite.com/forum/index.php?topic=4.msg29#msg29  \r\n(also referenced here: https://stackoverflow.com/questions/2116558/fastest-method-to-replace-all-instances-of-a-character-in-a-string/6714233#6714233)  \r\nSome performance results here:  \r\nhttp://jsperf.com/htmlencoderegex/25\r\n\r\nIt gives identical result string to the builtin `replace` chains above. I&#39;d be very happy if someone could explain why it&#39;s faster!?\r\n\r\n**Update 2015-03-04:**  \r\nI just noticed that AngularJS are using exactly the method above:  \r\nhttps://github.com/angular/angular.js/blob/v1.3.14/src/ngSanitize/sanitize.js#L435\r\n\r\nThey add a couple of refinements - they appear to be handling an [obscure Unicode issue](http://en.wikipedia.org/wiki/UTF-8#Invalid_code_points) as well as converting all non-alphanumeric characters to entities. I was under the impression the latter was not necessary as long as you have an UTF8 charset specified for your document.\r\n\r\nI will note that (4 years later) Django still does not do either of these things, so I&#39;m not sure how important they are:  \r\nhttps://github.com/django/django/blob/1.8b1/django/utils/html.py#L44\r\n\r\n**Update 2016-04-06:**  \r\nYou may also wish to escape forward-slash `/`. This is not required for correct HTML encoding, however it is [recommended by OWASP](https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet#RULE_.231_-_HTML_Escape_Before_Inserting_Untrusted_Data_into_HTML_Element_Content) as an anti-XSS safety measure. (thanks to @JNF for suggesting this in comments)\r\n\r\n            .replace(/\\//g, &#39;&amp;#x2F;&#39;);"}, {"tags": [], "down_vote_count": 0, "creation_date": 1359157842, "answer_id": 14532159, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1405613372, "last_edit_date": 1405613372, "body_markdown": "You shouldn&#39;t have to escape/encode values in order to shuttle them from one input field to another.\r\n\r\n    &lt;form&gt;\r\n     &lt;input id=&quot;button&quot; type=&quot;button&quot; value=&quot;Click me&quot;&gt;\r\n     &lt;input type=&quot;hidden&quot; id=&quot;hiddenId&quot; name=&quot;hiddenId&quot; value=&quot;I like cheese&quot;&gt;\r\n     &lt;input type=&quot;text&quot; id=&quot;output&quot; name=&quot;output&quot;&gt;\r\n    &lt;/form&gt;\r\n    &lt;script&gt;\r\n        $(document).ready(function(e) {\r\n            $(&#39;#button&#39;).click(function(e) {\r\n                $(&#39;#output&#39;).val($(&#39;#hiddenId&#39;).val());\r\n            });\r\n        });\r\n    &lt;/script&gt;\r\n\r\nJS doesn&#39;t go inserting raw HTML or anything; it just tells the DOM to set the `value` property (or attribute; not sure).  Either way, the DOM handles any encoding issues for you.  Unless you&#39;re doing something odd like using `document.write` or `eval`, HTML-encoding will be effectively transparent.\r\n\r\nIf you&#39;re talking about generating a new textbox to hold the result...it&#39;s still as easy.  Just pass the static part of the HTML to jQuery, and then set the rest of the properties/attributes on the object it returns to you.\r\n\r\n    $box = $(&#39;&lt;input type=&quot;text&quot; name=&quot;whatever&quot;&gt;&#39;).val($(&#39;#hiddenId&#39;).val());\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1363034914, "answer_id": 15348311, "path": "stack.django.answer", "score": 71, "up_vote_count": 72, "is_accepted": false, "last_activity_date": 1363035994, "last_edit_date": 1363035994, "body_markdown": "Here&#39;s a non-jQuery version that is considerably faster than both the jQuery `.html()` version and the `.replace()` version. This preserves all whitespace, but like the jQuery version, doesn&#39;t handle quotes.\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function htmlEncode( html ) {\r\n        return document.createElement( &#39;a&#39; ).appendChild( \r\n            document.createTextNode( html ) ).parentNode.innerHTML;\r\n    };\r\n\r\n**Speed:** http://jsperf.com/htmlencoderegex/17\r\n\r\n&gt;![speed test][1]\r\n\r\n**Demo:** &lt;sub&gt;&lt;sub&gt;&lt;sub&gt;[![jsFiddle](http://i.stack.imgur.com/NI3c4.png)](http://jsfiddle.net/ThinkingStiff/FSaU2/)&lt;/sub&gt;&lt;/sub&gt;&lt;/sub&gt;\r\n\r\n###Output:\r\n\r\n![output][2]\r\n\r\n###Script:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function htmlEncode( html ) {\r\n        return document.createElement( &#39;a&#39; ).appendChild( \r\n            document.createTextNode( html ) ).parentNode.innerHTML;\r\n    };\r\n    \r\n    function htmlDecode( html ) {\r\n        var a = document.createElement( &#39;a&#39; ); a.innerHTML = html;\r\n        return a.textContent;\r\n    };\r\n    \r\n    document.getElementById( &#39;text&#39; ).value = htmlEncode( document.getElementById( &#39;hidden&#39; ).value );\r\n    \r\n    //sanity check\r\n    var html = &#39;&lt;div&gt;   &amp;amp; hello&lt;/div&gt;&#39;;\r\n    document.getElementById( &#39;same&#39; ).textContent = \r\n          &#39;html === htmlDecode( htmlEncode( html ) ): &#39; \r\n        + ( html === htmlDecode( htmlEncode( html ) ) );\r\n\r\n###HTML:\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;input id=&quot;hidden&quot; type=&quot;hidden&quot; value=&quot;chalk    &amp;amp; cheese&quot; /&gt;\r\n    &lt;input id=&quot;text&quot; value=&quot;&quot; /&gt;\r\n    &lt;div id=&quot;same&quot;&gt;&lt;/div&gt;\r\n\r\n  [1]: http://i.stack.imgur.com/NAner.png\r\n  [2]: http://i.stack.imgur.com/zE07Z.png\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1366921640, "answer_id": 16224127, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1366922111, "last_edit_date": 1366922111, "body_markdown": "If you want to use jQuery. I found this:\r\n\r\nhttp://www.jquerysdk.com/api/jQuery.htmlspecialchars\r\n\r\n(part of jquery.string plugin offered by jQuery SDK)\r\n\r\n\r\nThe problem with Prototype I believe is that it extends base objects in JavaScript and will be incompatible with any jQuery you may have used. Of course, if you are already using Prototype and not jQuery, it won&#39;t be a problem.\r\n\r\nEDIT: Also there is this, which is a port of Prototype&#39;s string utilities for jQuery:\r\n\r\nhttp://stilldesigning.com/dotstring/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1381612394, "answer_id": 19339260, "path": "stack.django.answer", "score": 7, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1381612394, "body_markdown": "For those who prefer plain javascript, here is the method I have used successfully:\r\n\r\n    function escapeHTML (str)\r\n    {\r\n        var div = document.createElement(&#39;div&#39;);\r\n        var text = document.createTextNode(str);\r\n        div.appendChild(text);\r\n        return div.innerHTML;\r\n    }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1388659322, "answer_id": 20881108, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1388659322, "body_markdown": "    var htmlEnDeCode = (function() {\r\n        var charToEntityRegex,\r\n            entityToCharRegex,\r\n            charToEntity,\r\n            entityToChar;\r\n            \r\n        function resetCharacterEntities() {\r\n            charToEntity = {};\r\n            entityToChar = {};\r\n            // add the default set\r\n            addCharacterEntities({\r\n                &#39;&amp;amp;&#39;     :   &#39;&amp;&#39;,\r\n                &#39;&amp;gt;&#39;      :   &#39;&gt;&#39;,\r\n                &#39;&amp;lt;&#39;      :   &#39;&lt;&#39;,\r\n                &#39;&amp;quot;&#39;    :   &#39;&quot;&#39;,\r\n                &#39;&amp;#39;&#39;     :   &quot;&#39;&quot;\r\n            });\r\n        }\r\n        \r\n        function addCharacterEntities(newEntities) {\r\n            var charKeys = [],\r\n                entityKeys = [],\r\n                key, echar;\r\n            for (key in newEntities) {\r\n                echar = newEntities[key];\r\n                entityToChar[key] = echar;\r\n                charToEntity[echar] = key;\r\n                charKeys.push(echar);\r\n                entityKeys.push(key);\r\n            }\r\n            charToEntityRegex = new RegExp(&#39;(&#39; + charKeys.join(&#39;|&#39;) + &#39;)&#39;, &#39;g&#39;);\r\n            entityToCharRegex = new RegExp(&#39;(&#39; + entityKeys.join(&#39;|&#39;) + &#39;|&amp;#[0-9]{1,5};&#39; + &#39;)&#39;, &#39;g&#39;);\r\n        }\r\n        \r\n        function htmlEncode(value){\r\n            var htmlEncodeReplaceFn = function(match, capture) {\r\n                return charToEntity[capture];\r\n            };\r\n            \r\n            return (!value) ? value : String(value).replace(charToEntityRegex, htmlEncodeReplaceFn);\r\n        }\r\n        \r\n        function htmlDecode(value) {\r\n            var htmlDecodeReplaceFn = function(match, capture) {\r\n                return (capture in entityToChar) ? entityToChar[capture] : String.fromCharCode(parseInt(capture.substr(2), 10));\r\n            };\r\n            \r\n            return (!value) ? value : String(value).replace(entityToCharRegex, htmlDecodeReplaceFn);\r\n        }\r\n        \r\n        resetCharacterEntities();\r\n        \r\n        return {\r\n            htmlEncode: htmlEncode,\r\n            htmlDecode: htmlDecode\r\n        };\r\n    })();\r\n\r\nThis is from ExtJS source code.\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1389366299, "answer_id": 21047597, "path": "stack.django.answer", "score": 26, "up_vote_count": 27, "is_accepted": false, "last_activity_date": 1389366299, "body_markdown": "[Underscore](http://underscorejs.org/) provides [`_.escape()`](http://underscorejs.org/#escape) and [`_.unescape()`](http://underscorejs.org/#unescape) methods that do this.\r\n\r\n    &gt; _.unescape( &quot;chalk &amp;amp; cheese&quot; );\r\n      &quot;chalk &amp; cheese&quot;\r\n\r\n    &gt; _.escape( &quot;chalk &amp; cheese&quot; );\r\n      &quot;chalk &amp;amp; cheese&quot;"}, {"tags": [], "down_vote_count": 2, "creation_date": 1404396699, "answer_id": 24556066, "path": "stack.django.answer", "score": 0, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1404396699, "body_markdown": "    &lt;script&gt;\r\n    String.prototype.htmlEncode = function () {\r\n        return String(this)\r\n            .replace(/&amp;/g, &#39;&amp;amp;&#39;)\r\n            .replace(/&quot;/g, &#39;&amp;quot;&#39;)\r\n            .replace(/&#39;/g, &#39;&amp;#39;&#39;)\r\n            .replace(/&lt;/g, &#39;&amp;lt;&#39;)\r\n            .replace(/&gt;/g, &#39;&amp;gt;&#39;);\r\n    \r\n    }\r\n    \r\n    var aString = &#39;&lt;script&gt;alert(&quot;I hack your site&quot;)&lt;/script&gt;&#39;;\r\n    console.log(aString.htmlEncode());\r\n    &lt;/script&gt;\r\n\r\nWill output: `&amp;lt;script&amp;gt;alert(&amp;quot;I hack your site&amp;quot;)&amp;lt;/script&amp;gt;`\r\n\r\n.htmlEncode() will be accessible on all strings once defined."}, {"tags": [], "down_vote_count": 0, "creation_date": 1420903598, "answer_id": 27877812, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1428820427, "last_edit_date": 1428820427, "body_markdown": "Here is a simple javascript solution. It extends String object with a method &quot;HTMLEncode&quot; which can be used on an object without parameter, or with a parameter.\r\n\r\n    String.prototype.HTMLEncode = function(str) {\r\n      var result = &quot;&quot;;\r\n      var str = (arguments.length===1) ? str : this;\r\n      for(var i=0; i&lt;str.length; i++) {\r\n         var chrcode = str.charCodeAt(i);\r\n         result+=(chrcode&gt;128) ? &quot;&amp;#&quot;+chrcode+&quot;;&quot; : str.substr(i,1)\r\n       }\r\n       return result;\r\n    }\r\n    // TEST\r\n    console.log(&quot;stetaewteaw &#230;&#248;&quot;.HTMLEncode());\r\n    console.log(&quot;stetaewteaw &#230;&#248;&quot;.HTMLEncode(&quot;&#230;&#229;&#248;&#229;&#230;&#229;&quot;))\r\nI have made a [gist &quot;HTMLEncode method for javascript&quot;][1].\r\n\r\n\r\n  [1]: https://gist.github.com/netsi1964/fcc8c0c6f1330d666372"}, {"tags": [], "down_vote_count": 0, "creation_date": 1437918586, "answer_id": 31637709, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1437920205, "last_edit_date": 1437920205, "body_markdown": "Faster without Jquery. You can encode every character in your string:\r\n\r\n    function encode(e){return e.replace(/[^]/g,function(e){return&quot;&amp;#&quot;+e.charCodeAt(0)+&quot;;&quot;})}\r\n\r\nOr just target the main characters to worry about (&amp;, inebreaks, &lt;, &gt;, &quot; and &#39;) like:\r\n\r\n&lt;!-- begin snippet: js hide: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n\tfunction encode(r){\r\nreturn r.replace(/[\\x26\\x0A\\&lt;&gt;&#39;&quot;]/g,function(r){return&quot;&amp;#&quot;+r.charCodeAt(0)+&quot;;&quot;})\r\n}\r\n\r\ntest.value=encode(&#39;Encode HTML entities!\\n\\n&quot;Safe&quot; escape &lt;script id=\\&#39;\\&#39;&gt; &amp; useful in &lt;pre&gt; tags!&#39;);\r\n\r\ntesting.innerHTML=test.value;\r\n\r\n\t/*************\r\n\t* \\x26 is &amp;ampersand (it has to be first),\r\n\t* \\x0A is newline,\r\n\t*************/\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;textarea id=test rows=&quot;9&quot; cols=&quot;55&quot;&gt;&lt;/textarea&gt;\r\n\r\n&lt;div id=&quot;testing&quot;&gt;www.WHAK.com&lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1453259093, "answer_id": 34890835, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1453259093, "body_markdown": "HtmlEncodes the given value\r\n\r\n      var htmlEncodeContainer = $(&#39;&lt;div /&gt;&#39;);\r\n      function htmlEncode(value) {\r\n        if (value) {\r\n          return htmlEncodeContainer.text(value).html();\r\n        } else {\r\n          return &#39;&#39;;\r\n        }\r\n      }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1468436196, "answer_id": 38359638, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1508454072, "last_edit_date": 1508454072, "body_markdown": "Based on [angular&#39;s sanitize](https://github.com/angular/angular.js/blob/v1.3.14/src/ngSanitize/sanitize.js#L435)... (es6 module syntax)\r\n\r\n    // ref: https://github.com/angular/angular.js/blob/v1.3.14/src/ngSanitize/sanitize.js\r\n    const SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\r\n    const NON_ALPHANUMERIC_REGEXP = /([^\\#-~| |!])/g;\r\n\r\n    const decodeElem = document.createElement(&#39;pre&#39;);\r\n\r\n\r\n    /**\r\n     * Decodes html encoded text, so that the actual string may\r\n     * be used.\r\n     * @param value\r\n     * @returns {string} decoded text\r\n     */\r\n    export function decode(value) {\r\n      if (!value) return &#39;&#39;;\r\n      decodeElem.innerHTML = value.replace(/&lt;/g, &#39;&amp;lt;&#39;);\r\n      return decodeElem.textContent;\r\n    }\r\n\r\n\r\n    /**\r\n     * Encodes all potentially dangerous characters, so that the\r\n     * resulting string can be safely inserted into attribute or\r\n     * element text.\r\n     * @param value\r\n     * @returns {string} encoded text\r\n     */\r\n    export function encode(value) {\r\n      if (value === null || value === undefined) return &#39;&#39;;\r\n      return String(value).\r\n        replace(/&amp;/g, &#39;&amp;amp;&#39;).\r\n        replace(SURROGATE_PAIR_REGEXP, value =&gt; {\r\n          var hi = value.charCodeAt(0);\r\n          var low = value.charCodeAt(1);\r\n          return &#39;&amp;#&#39; + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + &#39;;&#39;;\r\n        }).\r\n        replace(NON_ALPHANUMERIC_REGEXP, value =&gt; {\r\n          return &#39;&amp;#&#39; + value.charCodeAt(0) + &#39;;&#39;;\r\n        }).\r\n        replace(/&lt;/g, &#39;&amp;lt;&#39;).\r\n        replace(/&gt;/g, &#39;&amp;gt;&#39;);\r\n    }\r\n\r\n    export default {encode,decode};"}, {"tags": [], "down_vote_count": 0, "creation_date": 1471450470, "answer_id": 39001613, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1471450470, "last_edit_date": 1495541442, "body_markdown": "I ran into some issues with backslash in my Domain\\User string.\r\n\r\nI added this to the other escapes from Anentropic&#39;s answer\r\n\r\n    .replace(/\\\\/g, &#39;&amp;#92;&#39;)\r\n\r\nWhich I found here:\r\nhttps://stackoverflow.com/questions/12866461/how-to-escape-backslash-in-javascript\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1499295630, "answer_id": 44937282, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1499295630, "body_markdown": "I had a similar problem and solve it using the function `encodeURIComponent` from JavaScript ([documentation](https://www.w3schools.com/jsref/jsref_encodeURIComponent.asp))\r\n\r\nFor example, in your case if you use:\r\n\r\n    &lt;input id=&#39;hiddenId&#39; type=&#39;hidden&#39; value=&#39;chalk &amp; cheese&#39; /&gt;\r\n\r\nand\r\n\r\n    encodeURIComponent($(&#39;#hiddenId&#39;).attr(&#39;value&#39;))\r\n\r\nyou will get `chalk%20%26%20cheese`. Even spaces are kept.\r\n\r\nIn my case, I had to encode one backslash and this code works perfectly\r\n\r\n    encodeURIComponent(&#39;name/surname&#39;)\r\n\r\nand I got `name%2Fsurname`"}], "title": "HTML-encoding lost when attribute read from input field", "view_count": 593854, "answer_count": 20, "code_snippet": ["<code>&lt;input id='hiddenId' type='hidden' value='chalk &amp;amp; cheese' /&gt;\n</code>", "<code>&lt;input type='text' value='chalk &amp;amp; cheese' /&gt;\n</code>", "<code>$('#hiddenId').attr('value')\n</code>", "<code>chalk &amp;amp; cheese</code>", "<code>\"</code>", "<code>'</code>", "<code>chalk</code>", "<code>cheese</code>", "<code>function htmlEncode(value){\n  // Create a in-memory div, set its inner text (which jQuery automatically encodes)\n  // Then grab the encoded contents back out. The div never exists on the page.\n  return $('&lt;div/&gt;').text(value).html();\n}\n\nfunction htmlDecode(value){\n  return $('&lt;div/&gt;').html(value).text();\n}\n</code>", "<code>htmlEncode</code>", "<code>innerText</code>", "<code>innerHTML</code>", "<code>htmlDecode</code>", "<code>innerHTML</code>", "<code>innerText</code>", "<code>function htmlEscape(str) {\n    return str\n        .replace(/&amp;/g, '&amp;amp;')\n        .replace(/\"/g, '&amp;quot;')\n        .replace(/'/g, '&amp;#39;')\n        .replace(/&lt;/g, '&amp;lt;')\n        .replace(/&gt;/g, '&amp;gt;');\n}\n\n// I needed the opposite function today, so adding here too:\nfunction htmlUnescape(str){\n    return str\n        .replace(/&amp;quot;/g, '\"')\n        .replace(/&amp;#39;/g, \"'\")\n        .replace(/&amp;lt;/g, '&lt;')\n        .replace(/&amp;gt;/g, '&gt;')\n        .replace(/&amp;amp;/g, '&amp;');\n}\n</code>", "<code>replaceAll</code>", "<code>replace</code>", "<code>/</code>", "<code>        .replace(/\\//g, '&amp;#x2F;');\n</code>", "<code>&amp;apos;</code>", "<code>&amp;#39;</code>", "<code>&amp;apos;</code>", "<code>/g</code>", "<code>.replace()</code>", "<code>.html()</code>", "<code>.replace()</code>", "<code>function htmlEncode( html ) {\n    return document.createElement( 'a' ).appendChild( \n        document.createTextNode( html ) ).parentNode.innerHTML;\n};\n</code>", "<code>function htmlEncode( html ) {\n    return document.createElement( 'a' ).appendChild( \n        document.createTextNode( html ) ).parentNode.innerHTML;\n};\n\nfunction htmlDecode( html ) {\n    var a = document.createElement( 'a' ); a.innerHTML = html;\n    return a.textContent;\n};\n\ndocument.getElementById( 'text' ).value = htmlEncode( document.getElementById( 'hidden' ).value );\n\n//sanity check\nvar html = '&lt;div&gt;   &amp;amp; hello&lt;/div&gt;';\ndocument.getElementById( 'same' ).textContent = \n      'html === htmlDecode( htmlEncode( html ) ): ' \n    + ( html === htmlDecode( htmlEncode( html ) ) );\n</code>", "<code>&lt;input id=\"hidden\" type=\"hidden\" value=\"chalk    &amp;amp; cheese\" /&gt;\n&lt;input id=\"text\" value=\"\" /&gt;\n&lt;div id=\"same\"&gt;&lt;/div&gt;\n</code>", "<code>.replace()</code>", "<code>/g</code>", "<code>.replace()</code>", "<code>replaceAll</code>", "<code>function multiLineHtmlEncode(value) {\n    var lines = value.split(/\\r\\n|\\r|\\n/);\n    for (var i = 0; i &lt; lines.length; i++) {\n        lines[i] = htmlEncode(lines[i]);\n    }\n    return lines.join('\\r\\n');\n}\n\nfunction htmlEncode(value) {\n    return $('&lt;div/&gt;').text(value).html();\n} \n</code>", "<code>_.escape()</code>", "<code>_.unescape()</code>", "<code>&gt; _.unescape( \"chalk &amp;amp; cheese\" );\n  \"chalk &amp; cheese\"\n\n&gt; _.escape( \"chalk &amp; cheese\" );\n  \"chalk &amp;amp; cheese\"\n</code>", "<code>undefined</code>", "<code>null</code>", "<code>jQuery(\"&lt;div/&gt;\").text(value).html is not a function</code>", "<code>Uncaught TypeError: Object  has no method 'html'</code>", "<code>function htmlEncode(value){ \n    if (value) {\n        return jQuery('&lt;div/&gt;').text(value).html(); \n    } else {\n        return '';\n    }\n}\n</code>", "<code>jQuery('&lt;div/&gt;').text(value || '').html()</code>", "<code>value</code>", "<code>if</code>", "<code>htmlEncode</code>", "<code>value</code>", "<code>?:</code>", "<code>function escapeHTML (str)\n{\n    var div = document.createElement('div');\n    var text = document.createTextNode(str);\n    div.appendChild(text);\n    return div.innerHTML;\n}\n</code>", "<code>'&lt;div class=\"article\"&gt;This is an article&lt;/div&gt;'.escapeHTML();\n// -&gt; \"&amp;lt;div class=\"article\"&amp;gt;This is an article&amp;lt;/div&amp;gt;\"\n</code>", "<code>.replace(/&amp;/g,'&amp;amp;').replace(/&lt;/g,'&amp;lt;').replace(/&gt;/g,'&amp;gt;');</code>", "<code>String.prototype.HTMLEncode = function(str) {\n  var result = \"\";\n  var str = (arguments.length===1) ? str : this;\n  for(var i=0; i&lt;str.length; i++) {\n     var chrcode = str.charCodeAt(i);\n     result+=(chrcode&gt;128) ? \"&amp;#\"+chrcode+\";\" : str.substr(i,1)\n   }\n   return result;\n}\n// TEST\nconsole.log(\"stetaewteaw \u00e6\u00f8\".HTMLEncode());\nconsole.log(\"stetaewteaw \u00e6\u00f8\".HTMLEncode(\"\u00e6\u00e5\u00f8\u00e5\u00e6\u00e5\"))\n</code>", "<code>function encode(e){return e.replace(/[^]/g,function(e){return\"&amp;#\"+e.charCodeAt(0)+\";\"})}\n</code>", "<code>function encode(r){\r\nreturn r.replace(/[\\x26\\x0A\\&lt;&gt;'\"]/g,function(r){return\"&amp;#\"+r.charCodeAt(0)+\";\"})\r\n}\r\n\r\ntest.value=encode('Encode HTML entities!\\n\\n\"Safe\" escape &lt;script id=\\'\\'&gt; &amp; useful in &lt;pre&gt; tags!');\r\n\r\ntesting.innerHTML=test.value;\r\n\r\n/*************\r\n* \\x26 is &amp;ampersand (it has to be first),\r\n* \\x0A is newline,\r\n*************/</code>", "<code>&lt;textarea id=test rows=\"9\" cols=\"55\"&gt;&lt;/textarea&gt;\r\n\r\n&lt;div id=\"testing\"&gt;www.WHAK.com&lt;/div&gt;</code>", "<code>encodeURIComponent</code>", "<code>&lt;input id='hiddenId' type='hidden' value='chalk &amp; cheese' /&gt;\n</code>", "<code>encodeURIComponent($('#hiddenId').attr('value'))\n</code>", "<code>chalk%20%26%20cheese</code>", "<code>encodeURIComponent('name/surname')\n</code>", "<code>name%2Fsurname</code>", "<code>&lt;form&gt;\n &lt;input id=\"button\" type=\"button\" value=\"Click me\"&gt;\n &lt;input type=\"hidden\" id=\"hiddenId\" name=\"hiddenId\" value=\"I like cheese\"&gt;\n &lt;input type=\"text\" id=\"output\" name=\"output\"&gt;\n&lt;/form&gt;\n&lt;script&gt;\n    $(document).ready(function(e) {\n        $('#button').click(function(e) {\n            $('#output').val($('#hiddenId').val());\n        });\n    });\n&lt;/script&gt;\n</code>", "<code>value</code>", "<code>document.write</code>", "<code>eval</code>", "<code>$box = $('&lt;input type=\"text\" name=\"whatever\"&gt;').val($('#hiddenId').val());\n</code>", "<code>// ref: https://github.com/angular/angular.js/blob/v1.3.14/src/ngSanitize/sanitize.js\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~| |!])/g;\n\nconst decodeElem = document.createElement('pre');\n\n\n/**\n * Decodes html encoded text, so that the actual string may\n * be used.\n * @param value\n * @returns {string} decoded text\n */\nexport function decode(value) {\n  if (!value) return '';\n  decodeElem.innerHTML = value.replace(/&lt;/g, '&amp;lt;');\n  return decodeElem.textContent;\n}\n\n\n/**\n * Encodes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n * @returns {string} encoded text\n */\nexport function encode(value) {\n  if (value === null || value === undefined) return '';\n  return String(value).\n    replace(/&amp;/g, '&amp;amp;').\n    replace(SURROGATE_PAIR_REGEXP, value =&gt; {\n      var hi = value.charCodeAt(0);\n      var low = value.charCodeAt(1);\n      return '&amp;#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    }).\n    replace(NON_ALPHANUMERIC_REGEXP, value =&gt; {\n      return '&amp;#' + value.charCodeAt(0) + ';';\n    }).\n    replace(/&lt;/g, '&amp;lt;').\n    replace(/&gt;/g, '&amp;gt;');\n}\n\nexport default {encode,decode};\n</code>", "<code>if (value === null | value === undefined) return '';</code>", "<code>||</code>", "<code>var helper = $('chalk &amp; cheese').hide().appendTo('body');\nvar htmled = helper.html();\nhelper.remove();\n</code>", "<code>var htmlEnDeCode = (function() {\n    var charToEntityRegex,\n        entityToCharRegex,\n        charToEntity,\n        entityToChar;\n\n    function resetCharacterEntities() {\n        charToEntity = {};\n        entityToChar = {};\n        // add the default set\n        addCharacterEntities({\n            '&amp;amp;'     :   '&amp;',\n            '&amp;gt;'      :   '&gt;',\n            '&amp;lt;'      :   '&lt;',\n            '&amp;quot;'    :   '\"',\n            '&amp;#39;'     :   \"'\"\n        });\n    }\n\n    function addCharacterEntities(newEntities) {\n        var charKeys = [],\n            entityKeys = [],\n            key, echar;\n        for (key in newEntities) {\n            echar = newEntities[key];\n            entityToChar[key] = echar;\n            charToEntity[echar] = key;\n            charKeys.push(echar);\n            entityKeys.push(key);\n        }\n        charToEntityRegex = new RegExp('(' + charKeys.join('|') + ')', 'g');\n        entityToCharRegex = new RegExp('(' + entityKeys.join('|') + '|&amp;#[0-9]{1,5};' + ')', 'g');\n    }\n\n    function htmlEncode(value){\n        var htmlEncodeReplaceFn = function(match, capture) {\n            return charToEntity[capture];\n        };\n\n        return (!value) ? value : String(value).replace(charToEntityRegex, htmlEncodeReplaceFn);\n    }\n\n    function htmlDecode(value) {\n        var htmlDecodeReplaceFn = function(match, capture) {\n            return (capture in entityToChar) ? entityToChar[capture] : String.fromCharCode(parseInt(capture.substr(2), 10));\n        };\n\n        return (!value) ? value : String(value).replace(entityToCharRegex, htmlDecodeReplaceFn);\n    }\n\n    resetCharacterEntities();\n\n    return {\n        htmlEncode: htmlEncode,\n        htmlDecode: htmlDecode\n    };\n})();\n</code>", "<code>&lt;script&gt;\nString.prototype.htmlEncode = function () {\n    return String(this)\n        .replace(/&amp;/g, '&amp;amp;')\n        .replace(/\"/g, '&amp;quot;')\n        .replace(/'/g, '&amp;#39;')\n        .replace(/&lt;/g, '&amp;lt;')\n        .replace(/&gt;/g, '&amp;gt;');\n\n}\n\nvar aString = '&lt;script&gt;alert(\"I hack your site\")&lt;/script&gt;';\nconsole.log(aString.htmlEncode());\n&lt;/script&gt;\n</code>", "<code>&amp;lt;script&amp;gt;alert(&amp;quot;I hack your site&amp;quot;)&amp;lt;/script&amp;gt;</code>", "<code>  var htmlEncodeContainer = $('&lt;div /&gt;');\n  function htmlEncode(value) {\n    if (value) {\n      return htmlEncodeContainer.text(value).html();\n    } else {\n      return '';\n    }\n  }\n</code>", "<code>.replace(/\\\\/g, '&amp;#92;')\n</code>"], "path": "stack.django"}, {"tags": ["python", "django"], "creation_date": 1383999101, "body_markdown": "I am new to django-1.6. When I run the django server with `DEBUG = True`, it&#39;s running perfectly. But when I change `DEBUG` to `False` in the settings file, then the server stopped and it gives the following error on the command prompt:\r\n\r\n    CommandError: You must set settings.ALLOWED_HOSTS if DEBUG is False.\r\n\r\nAfter I changed `ALLOWED_HOSTS` to `[&quot;http://127.0.0.1:8000&quot;,]`, in the browser I get the error:\r\n\r\n    Bad Request (400)\r\n\r\nIs it possible to run Django without debug mode?", "last_edit_date": 1393470443, "up_vote_count": 205, "link": "https://stackoverflow.com/questions/19875789/django-gives-bad-request-400-when-debug-false", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1383999262, "answer_id": 19875816, "path": "stack.django.answer", "score": 348, "up_vote_count": 348, "is_accepted": true, "last_activity_date": 1467239065, "last_edit_date": 1467239065, "body_markdown": "The [`ALLOWED_HOSTS` list](https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts) should contain fully qualified *host names*, **not** urls. Leave out the port and the protocol. If you are using `127.0.0.1`, I would add `localhost` to the list too:\r\n\r\n    ALLOWED_HOSTS = [&#39;127.0.0.1&#39;, &#39;localhost&#39;]\r\n\r\nYou could also use `*` to match *any* host:\r\n\r\n    ALLOWED_HOSTS = [&#39;*&#39;]\r\n\r\nQuoting the documentation:\r\n\r\n&gt; Values in this list can be fully qualified names (e.g. `&#39;www.example.com&#39;`), in which case they will be matched **against the request\u2019s `Host` header** exactly (case-insensitive, **not including port**). A value beginning with a period can be used as a subdomain wildcard: `&#39;.example.com&#39;` will match `example.com`, `www.example.com`, and any other subdomain of `example.com`. A value of `&#39;*&#39;` will match anything; in this case you are responsible to provide your own validation of the `Host` header (perhaps in a middleware; if so this middleware must be listed first in `MIDDLEWARE_CLASSES`).\r\n\r\n*Bold emphasis mine*.\r\n\r\nThe status 400 response you get is due to a [`SuspiciousOperation` exception](https://docs.djangoproject.com/en/1.5/ref/exceptions/#django.core.exceptions.SuspiciousOperation) being raised when your host header doesn&#39;t match any values in that list."}, {"tags": [], "down_vote_count": 0, "creation_date": 1437856641, "answer_id": 31630877, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1519890269, "last_edit_date": 1519890269, "body_markdown": "I have same problem and i fixed it to set `ALLOWED_HOSTS = [&#39;*&#39;]` and to solve the problem with the static images you have to change the virtual paths in the environment configuration like this:\r\n\r\n**Virtual Path** \r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;**Directory**&lt;br&gt;                              \r\n/static/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/opt/python/current/app/yourpj/static/&lt;br&gt;\r\n/media/ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; /opt/python/current/app/Nuevo/media/&lt;br&gt;\r\n\r\nI hope it helps you.\r\n\r\nPD: sorry for my bad english."}, {"tags": [], "down_vote_count": 2, "creation_date": 1447484912, "answer_id": 33706047, "path": "stack.django.answer", "score": -1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1447484912, "body_markdown": "Navigate to settings and locate the base.py file\r\nSet the allowed hosts to \r\n ALLOWED_HOSTS = [&#39;*&#39;]\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1469918508, "answer_id": 38679144, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1469918508, "body_markdown": "For me, I got this error by not setting [`USE_X_FORWARDED_HOST`](https://docs.djangoproject.com/en/1.9/ref/settings/#std:setting-USE_X_FORWARDED_HOST) to true.  From the docs: \r\n\r\n&gt; This should only be enabled if a proxy which sets this header is in use.\r\n\r\nMy hosting service [wrote](https://wiki.uberspace.de/cool:django#django-projekt_anlegen_und_konfigurieren) explicitly in their documentation that this setting *must* be used, and I get this 400 error if I forget it.  "}, {"tags": [], "down_vote_count": 0, "creation_date": 1492591840, "answer_id": 43490843, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1492591840, "body_markdown": "With `DEBUG = False` in you settings file, you also need ALLOWED_HOST list set up.\r\nTry including `ALLOWED_HOST = [&#39;127.0.0.1&#39;, &#39;localhost&#39;, &#39;www.yourdomain.com&#39;]`\r\n\r\nOtherwise you might receive a Bad Request(400) error from django."}], "title": "Django gives Bad Request (400) when DEBUG = False", "view_count": 71809, "answer_count": 5, "code_snippet": ["<code>DEBUG = True</code>", "<code>DEBUG</code>", "<code>False</code>", "<code>CommandError: You must set settings.ALLOWED_HOSTS if DEBUG is False.\n</code>", "<code>ALLOWED_HOSTS</code>", "<code>[\"http://127.0.0.1:8000\",]</code>", "<code>Bad Request (400)\n</code>", "<code>ALLOWED_HOSTS</code>", "<code>ALLOWED_HOSTS</code>", "<code>127.0.0.1</code>", "<code>localhost</code>", "<code>ALLOWED_HOSTS = ['127.0.0.1', 'localhost']\n</code>", "<code>*</code>", "<code>ALLOWED_HOSTS = ['*']\n</code>", "<code>'www.example.com'</code>", "<code>Host</code>", "<code>'.example.com'</code>", "<code>example.com</code>", "<code>www.example.com</code>", "<code>example.com</code>", "<code>'*'</code>", "<code>Host</code>", "<code>MIDDLEWARE_CLASSES</code>", "<code>SuspiciousOperation</code>", "<code>False</code>", "<code>./manage.py collectstatic</code>", "<code>USE_X_FORWARDED_HOST</code>", "<code>ALLOWED_HOSTS = ['*']</code>", "<code>DEBUG = False</code>", "<code>ALLOWED_HOST = ['127.0.0.1', 'localhost', 'www.yourdomain.com']</code>"], "path": "stack.django"}, {"tags": ["python", "datetime"], "creation_date": 1232560829, "body_markdown": "Short and simple. I&#39;ve got a huge list of date-times like this as strings:\r\n\r\n    Jun 1 2005  1:33PM\r\n    Aug 28 1999 12:00AM\r\n\r\nI&#39;m going to be shoving these back into proper datetime fields in a database so I need to magic them into real datetime objects. \r\n\r\nAny help (even if it&#39;s just a kick in the right direction) would be appreciated.\r\n\r\nEdit: This is going through Django&#39;s ORM so I can&#39;t use SQL to do the conversion on insert.", "last_edit_date": 1465659192, "up_vote_count": 1290, "link": "https://stackoverflow.com/questions/466345/converting-string-into-datetime", "_childDocuments_": [{"tags": [], "down_vote_count": 22, "creation_date": 1232561237, "answer_id": 466366, "path": "stack.django.answer", "score": 451, "up_vote_count": 473, "is_accepted": false, "last_activity_date": 1483037418, "last_edit_date": 1483037418, "body_markdown": "Check out [strptime][1] in the [time][2] module.  It is the inverse of [strftime][3].\r\n\r\n    $ python\r\n    &gt;&gt;&gt; import time\r\n    &gt;&gt;&gt; time.strptime(&#39;Jun 1 2005  1:33PM&#39;, &#39;%b %d %Y %I:%M%p&#39;)\r\n    time.struct_time(tm_year=2005, tm_mon=6, tm_mday=1,\r\n                     tm_hour=13, tm_min=33, tm_sec=0,\r\n                     tm_wday=2, tm_yday=152, tm_isdst=-1)\r\n\r\n  [1]: http://docs.python.org/3/library/time.html#time.strptime\r\n  [2]: http://docs.python.org/3/library/time.html\r\n  [3]: http://docs.python.org/3/library/time.html#time.strftime"}, {"tags": [], "down_vote_count": 0, "creation_date": 1232561332, "answer_id": 466376, "path": "stack.django.answer", "score": 2121, "up_vote_count": 2121, "is_accepted": true, "last_activity_date": 1511060288, "last_edit_date": 1511060288, "body_markdown": "    from datetime import datetime\r\n    \r\n    datetime_object = datetime.strptime(&#39;Jun 1 2005  1:33PM&#39;, &#39;%b %d %Y %I:%M%p&#39;)\r\n\r\nThe resulting `datetime` object is timezone-naive.\r\n\r\nLinks:\r\n\r\n- Python documentation for `strptime`: [Python 2][1], [Python 3][2]\r\n\r\n- Python documentation for `strftime` format mask: [Python 2][3], [Python 3][4]\r\n\r\n- [strftime.org][5] is also a really nice reference for strftime\r\n\r\nNotes:\r\n\r\n- `strptime` = &quot;string parse time&quot;\r\n- `strftime` = &quot;string format time&quot;\r\n- Pronounce it out loud today &amp; you won&#39;t have to search for it again in 6 months.\r\n\r\n  [1]: https://docs.python.org/2/library/datetime.html#datetime.datetime.strptime &quot;datetime.datetime.strptime&quot;\r\n  [2]: https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime\r\n  [3]: https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior &quot;strftime-and-strptime-behavior&quot;\r\n  [4]: https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior\r\n  [5]: http://strftime.org/"}, {"tags": [], "down_vote_count": 2, "creation_date": 1232648838, "answer_id": 470303, "path": "stack.django.answer", "score": 559, "up_vote_count": 561, "is_accepted": false, "last_activity_date": 1458750954, "last_edit_date": 1458750954, "body_markdown": "Use the third party [dateutil][1] library:\r\n\r\n    from dateutil import parser\r\n    dt = parser.parse(&quot;Aug 28 1999 12:00AM&quot;)\r\n\r\nIt can handle most date formats, including the one you need to parse. It&#39;s more convenient than strptime as it can guess the correct format most of the time.\r\n\r\nIt very useful for writing tests, where readability is more important that performance.\r\n\r\nYou can install it with:\r\n\r\n    pip install python-dateutil\r\n\r\n\r\n  [1]: http://labix.org/python-dateutil"}, {"tags": [], "down_vote_count": 2, "creation_date": 1318551208, "answer_id": 7761860, "path": "stack.django.answer", "score": 20, "up_vote_count": 22, "is_accepted": false, "last_activity_date": 1318552120, "last_edit_date": 1318552120, "body_markdown": "Something that isn&#39;t mentioned here and is useful: adding a suffix to the day. I decoupled the suffix logic so you can use it for any number you like, not just dates.\r\n\r\n    import time\r\n        \r\n    def num_suffix(n):\r\n        &#39;&#39;&#39;\r\n        Returns the suffix for any given int\r\n        &#39;&#39;&#39;\r\n        suf = (&#39;th&#39;,&#39;st&#39;, &#39;nd&#39;, &#39;rd&#39;)\r\n        n = abs(n) # wise guy\r\n        tens = int(str(n)[-2:])\r\n        units = n % 10\r\n        if tens &gt; 10 and tens &lt; 20:\r\n            return suf[0] # teens with &#39;th&#39;\r\n        elif units &lt;= 3:\r\n            return suf[units]\r\n        else:\r\n            return suf[0] # &#39;th&#39;\r\n    \r\n    def day_suffix(t):\r\n        &#39;&#39;&#39;\r\n        Returns the suffix of the given struct_time day\r\n        &#39;&#39;&#39;\r\n        return num_suffix(t.tm_mday)\r\n    \r\n    # Examples\r\n    print num_suffix(123)\r\n    print num_suffix(3431)\r\n    print num_suffix(1234)\r\n    print &#39;&#39;\r\n    print day_suffix(time.strptime(&quot;1 Dec 00&quot;, &quot;%d %b %y&quot;))\r\n    print day_suffix(time.strptime(&quot;2 Nov 01&quot;, &quot;%d %b %y&quot;))\r\n    print day_suffix(time.strptime(&quot;3 Oct 02&quot;, &quot;%d %b %y&quot;))\r\n    print day_suffix(time.strptime(&quot;4 Sep 03&quot;, &quot;%d %b %y&quot;))\r\n    print day_suffix(time.strptime(&quot;13 Nov 90&quot;, &quot;%d %b %y&quot;))\r\n    print day_suffix(time.strptime(&quot;14 Oct 10&quot;, &quot;%d %b %y&quot;))\u200b\u200b\u200b\u200b\u200b\u200b\u200b\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1393770164, "answer_id": 22128786, "path": "stack.django.answer", "score": 79, "up_vote_count": 79, "is_accepted": false, "last_activity_date": 1483039982, "last_edit_date": 1483039982, "body_markdown": "I have put together a project that can convert some really neat expressions. Check out **[timestring](http://github.com/stevepeak/timestring)**. \r\n\r\n## Here are some examples below:\r\n####`pip install timestring`\r\n\r\n\r\n    &gt;&gt;&gt; import timestring\r\n    &gt;&gt;&gt; timestring.Date(&#39;monday, aug 15th 2015 at 8:40 pm&#39;)\r\n    &lt;timestring.Date 2015-08-15 20:40:00 4491909392&gt;\r\n    &gt;&gt;&gt; timestring.Date(&#39;monday, aug 15th 2015 at 8:40 pm&#39;).date\r\n    datetime.datetime(2015, 8, 15, 20, 40)\r\n    &gt;&gt;&gt; timestring.Range(&#39;next week&#39;)\r\n    &lt;timestring.Range From 03/10/14 00:00:00 to 03/03/14 00:00:00 4496004880&gt;\r\n    &gt;&gt;&gt; (timestring.Range(&#39;next week&#39;).start.date, timestring.Range(&#39;next week&#39;).end.date)\r\n    (datetime.datetime(2014, 3, 10, 0, 0), datetime.datetime(2014, 3, 14, 0, 0))"}, {"tags": [], "down_vote_count": 2, "creation_date": 1394106785, "answer_id": 22223725, "path": "stack.django.answer", "score": 29, "up_vote_count": 31, "is_accepted": false, "last_activity_date": 1433507698, "last_edit_date": 1433507698, "body_markdown": "Many timestamps have an implied timezone. To ensure that your code will work in every timezone, you should use UTC internally and attach a timezone each time a foreign object enters the system.\r\n\r\nPython 3.2+:\r\n\r\n    &gt;&gt;&gt; datetime.datetime.strptime(\r\n    ...     &quot;March 5, 2014, 20:13:50&quot;, &quot;%B %d, %Y, %H:%M:%S&quot;\r\n    ... ).replace(tzinfo=datetime.timezone(datetime.timedelta(hours=-3)))"}, {"tags": [], "down_vote_count": 1, "creation_date": 1416506281, "answer_id": 27046382, "path": "stack.django.answer", "score": 9, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1457012680, "last_edit_date": 1457012680, "body_markdown": "Django Timezone aware datetime object example.\r\n\r\n    import datetime\r\n    from django.utils.timezone import get_current_timezone\r\n    tz = get_current_timezone()\r\n    \r\n    format = &#39;%b %d %Y %I:%M%p&#39;\r\n    date_object = datetime.datetime.strptime(&#39;Jun 1 2005  1:33PM&#39;, format)\r\n    date_obj = tz.localize(date_object)\r\n\r\nThis conversion is very important for Django and Python when you have `USE_TZ = True`:\r\n\r\n    RuntimeWarning: DateTimeField MyModel.created received a naive datetime (2016-03-04 00:00:00) while time zone support is active."}, {"tags": [], "down_vote_count": 0, "creation_date": 1418216449, "answer_id": 27401685, "path": "stack.django.answer", "score": 27, "up_vote_count": 27, "is_accepted": false, "last_activity_date": 1485760819, "last_edit_date": 1485760819, "body_markdown": "Remember this and you didn&#39;t need to get confused in datetime conversion again.\r\n\r\nString to datetime object = `strptime`\r\n\r\ndatetime object to other formats = `strftime`\r\n\r\n\r\n\r\n`Jun 1 2005  1:33PM`\r\n\r\nis equals to\r\n\r\n`%b %d %Y %I:%M%p`\r\n\r\n&gt; %b\tMonth as locale\u2019s abbreviated name(Jun)\r\n&gt; \r\n&gt; %d\tDay of the month as a zero-padded decimal number(1)\r\n&gt; \r\n&gt; %Y\tYear with century as a decimal number(2015)\r\n&gt; \r\n&gt; %I\tHour (12-hour clock) as a zero-padded decimal number(01)\r\n&gt; \r\n&gt; %M\tMinute as a zero-padded decimal number(33)\r\n&gt; \r\n&gt; %p\tLocale\u2019s equivalent of either AM or PM(PM)\r\n\r\nso you need strptime i-e converting `string` to \r\n\r\n\r\n    &gt;&gt;&gt; dates = []\r\n    &gt;&gt;&gt; dates.append(&#39;Jun 1 2005  1:33PM&#39;)\r\n    &gt;&gt;&gt; dates.append(&#39;Aug 28 1999 12:00AM&#39;)\r\n    &gt;&gt;&gt; from datetime import datetime\r\n    &gt;&gt;&gt; for d in dates:\r\n    ...     date = datetime.strptime(d, &#39;%b %d %Y %I:%M%p&#39;)\r\n    ...     print type(date)\r\n    ...     print date\r\n    ... \r\n\r\nOutput\r\n\r\n    &lt;type &#39;datetime.datetime&#39;&gt;\r\n    2005-06-01 13:33:00\r\n    &lt;type &#39;datetime.datetime&#39;&gt;\r\n    1999-08-28 00:00:00\r\n\r\n\r\nWhat if you have different format of dates you can use panda or dateutil.parse\r\n\r\n    &gt;&gt;&gt; import dateutil\r\n    &gt;&gt;&gt; dates = []\r\n    &gt;&gt;&gt; dates.append(&#39;12 1 2017&#39;)\r\n    &gt;&gt;&gt; dates.append(&#39;1 1 2017&#39;)\r\n    &gt;&gt;&gt; dates.append(&#39;1 12 2017&#39;)\r\n    &gt;&gt;&gt; dates.append(&#39;June 1 2017 1:30:00AM&#39;)\r\n    &gt;&gt;&gt; [parser.parse(x) for x in dates]\r\n\r\nOutPut\r\n\r\n    [datetime.datetime(2017, 12, 1, 0, 0), datetime.datetime(2017, 1, 1, 0, 0), datetime.datetime(2017, 1, 12, 0, 0), datetime.datetime(2017, 6, 1, 1, 30)]\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1433171702, "answer_id": 30577110, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1433171702, "body_markdown": "You can use [easy_date][1] to make it easy:\r\n\r\n    import date_converter\r\n    converted_date = date_converter.string_to_datetime(&#39;Jun 1 2005  1:33PM&#39;, &#39;%b %d %Y %I:%M%p&#39;)\r\n\r\n\r\n  [1]: https://github.com/ralphavalon/easy_date"}, {"tags": [], "down_vote_count": 0, "creation_date": 1450580605, "answer_id": 34377575, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1512198529, "last_edit_date": 1512198529, "body_markdown": "Here are two solutions using Pandas to convert dates formatted as strings into datetime.date objects.\r\n\r\n    import pandas as pd\r\n\r\n    dates = [&#39;2015-12-25&#39;, &#39;2015-12-26&#39;]\r\n    \r\n    # 1) Use a list comprehension.\r\n    &gt;&gt;&gt; [d.date() for d in pd.to_datetime(dates)]\r\n    [datetime.date(2015, 12, 25), datetime.date(2015, 12, 26)]\r\n\r\n    # 2) Convert the dates to a DatetimeIndex and extract the python dates.\r\n    &gt;&gt;&gt; pd.DatetimeIndex(dates).date.tolist()\r\n    [datetime.date(2015, 12, 25), datetime.date(2015, 12, 26)]\r\n\r\n**Timings**\r\n\r\n    dates = pd.DatetimeIndex(start=&#39;2000-1-1&#39;, end=&#39;2010-1-1&#39;, freq=&#39;d&#39;).date.tolist()\r\n\r\n    &gt;&gt;&gt; %timeit [d.date() for d in pd.to_datetime(dates)]\r\n    # 100 loops, best of 3: 3.11 ms per loop\r\n\r\n    &gt;&gt;&gt; %timeit pd.DatetimeIndex(dates).date.tolist()\r\n    # 100 loops, best of 3: 6.85 ms per loop\r\n\r\nAnd here is how to convert the OP&#39;s original date-time examples:\r\n\r\n    datetimes = [&#39;Jun 1 2005  1:33PM&#39;, &#39;Aug 28 1999 12:00AM&#39;]\r\n\r\n    &gt;&gt;&gt; pd.to_datetime(datetimes).to_pydatetime().tolist()\r\n    [datetime.datetime(2005, 6, 1, 13, 33), \r\n     datetime.datetime(1999, 8, 28, 0, 0)]\r\n\r\nThere are many options for converting from the strings to Pandas Timestamps using `to_datetime`, so check the [docs][1] if you need anything special.\r\n\r\nLikewise, Timestamps have many [properties and methods][2] that can be accessed in addition to `.date`\r\n\r\n\r\n  [1]: http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html\r\n  [2]: http://pandas.pydata.org/pandas-docs/stable/api.html#datetimelike-properties"}, {"tags": [], "down_vote_count": 0, "creation_date": 1453189727, "answer_id": 34871180, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1453189727, "body_markdown": "    In [34]: import datetime\r\n    \r\n    In [35]: _now = datetime.datetime.now()\r\n    \r\n    In [36]: _now\r\n    Out[36]: datetime.datetime(2016, 1, 19, 9, 47, 0, 432000)\r\n    \r\n    In [37]: print _now\r\n    2016-01-19 09:47:00.432000\r\n    \r\n    In [38]: _parsed = datetime.datetime.strptime(str(_now),&quot;%Y-%m-%d %H:%M:%S.%f&quot;)\r\n    \r\n    In [39]: _parsed\r\n    Out[39]: datetime.datetime(2016, 1, 19, 9, 47, 0, 432000)\r\n    \r\n    In [40]: assert _now == _parsed"}, {"tags": [], "down_vote_count": 0, "creation_date": 1454593387, "answer_id": 35202640, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1454593387, "body_markdown": "Create a small utility function like:\r\n\r\n    def date(datestr=&quot;&quot;, format=&quot;%Y-%m-%d&quot;):\r\n    \tfrom datetime import datetime\r\n    \tif not datestr:\r\n    \t\treturn datetime.today().date()\r\n    \treturn datetime.strptime(datestr, format).date()\r\n\r\nThis is versatile enough:\r\n\r\n - If you dont pass any arguments it will return today&#39;s date.\r\n - theres a date format as default that you can override.\r\n - You can easily modify it to return a datetime."}, {"tags": [], "down_vote_count": 0, "creation_date": 1466741247, "answer_id": 38005442, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1466741247, "body_markdown": "The [datetime][1] python module is good for get date time and convert date time formats.\r\n\r\n    import datetime\r\n    \r\n    new_date_format1 = datetime.datetime.strptime(&#39;Jun 1 2005  1:33PM&#39;, &#39;%b %d %Y %I:%M%p&#39;)\r\n    new_date_format2 = datetime.datetime.strptime(&#39;Jun 1 2005  1:33PM&#39;, &#39;%b %d %Y %I:%M%p&#39;).strftime(&#39;%Y/%m/%d %I:%M%p&#39;)\r\n    print new_date_format1\r\n    print new_date_format2\r\n\r\noutput :\r\n\r\n    2005-06-01 13:33:00\r\n    2005/06/01 01:33PM\r\n\r\n  [1]: https://docs.python.org/2/library/datetime.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1488303459, "answer_id": 42515333, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1488303459, "body_markdown": "This question has been visited many times but **arrow** hasn&#39;t been mentioned, and it offers many useful functions for dates and times. This bit of code provides an answer to the question and shows that arrow is also capable of formatting dates easily and displaying information for other locales.\r\n\r\n    &gt;&gt;&gt; import arrow\r\n    &gt;&gt;&gt; dateStrings = [ &#39;Jun 1  2005 1:33PM&#39;, &#39;Aug 28 1999 12:00AM&#39; ]\r\n    &gt;&gt;&gt; for dateString in dateStrings:\r\n    ... \tdateString\r\n    ... \tarrow.get(dateString.replace(&#39;  &#39;,&#39; &#39;), &#39;MMM D YYYY H:mmA&#39;).datetime\r\n    ... \tarrow.get(dateString.replace(&#39;  &#39;,&#39; &#39;), &#39;MMM D YYYY H:mmA&#39;).format(&#39;ddd, Do MMM YYYY HH:mm&#39;)\r\n    ... \tarrow.get(dateString.replace(&#39;  &#39;,&#39; &#39;), &#39;MMM D YYYY H:mmA&#39;).humanize(locale=&#39;de&#39;)\r\n    ... \t\r\n    &#39;Jun 1  2005 1:33PM&#39;\r\n    datetime.datetime(2005, 6, 1, 13, 33, tzinfo=tzutc())\r\n    &#39;Wed, 1st Jun 2005 13:33&#39;\r\n    &#39;vor 11 Jahren&#39;\r\n    &#39;Aug 28 1999 12:00AM&#39;\r\n    datetime.datetime(1999, 8, 28, 0, 0, tzinfo=tzutc())\r\n    &#39;Sat, 28th Aug 1999 00:00&#39;\r\n    &#39;vor 17 Jahren&#39;\r\n\r\nSee http://arrow.readthedocs.io/en/latest/ for more."}, {"tags": [], "down_vote_count": 1, "creation_date": 1513631523, "answer_id": 47876476, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1513655177, "last_edit_date": 1513655177, "body_markdown": "See [my answer](https://stackoverflow.com/questions/6615533/is-there-a-python-equivalent-to-cs-datetime-tryparse/47876446#47876446).\r\n\r\nIn real-world data this is a real problem: multiple, mismatched, incomplete, inconsistent and multilanguage/region date formats, often mixed freely in one dataset. It&#39;s not ok for production code to fail, let alone go exception-happy like a fox.\r\n\r\nWe need to try...catch multiple datetime formats fmt1,fmt2,...,fmtn and suppress/handle the exceptions (from `strptime()`) for all those that mismatch (and in particular, avoid needing a yukky n-deep indented ladder of try..catch clauses). See [my solution](https://stackoverflow.com/questions/6615533/is-there-a-python-equivalent-to-cs-datetime-tryparse/47876446#47876446)"}, {"tags": [], "down_vote_count": 1, "creation_date": 1513860251, "answer_id": 47925290, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1513860251, "body_markdown": "if you want only date format then you can manually convert it my passing your individual fields like:\r\n     \r\n    &gt;&gt;&gt; import datetime\r\n    &gt;&gt;&gt; date = datetime.date(int(&#39;2017&#39;),int(&#39;12&#39;),int(&#39;21&#39;))\r\n    &gt;&gt;&gt; date\r\n    datetime.date(2017, 12, 21)\r\n    &gt;&gt;&gt; type(date)\r\n    &lt;type &#39;datetime.date&#39;&gt;\r\n\r\nyou can pass your splited string values to convert it into date type like:\r\n\r\n    selected_month_rec = &#39;2017-09-01&#39;\r\n    date_formate = datetime.date(int(selected_month_rec.split(&#39;-&#39;)[0]),int(selected_month_rec.split(&#39;-&#39;)[1]),int(selected_month_rec.split(&#39;-&#39;)[2]))\r\n\r\nyou will get the resultent value in date formate."}, {"tags": [], "down_vote_count": 0, "creation_date": 1514851459, "answer_id": 48054268, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1515209405, "last_edit_date": 1515209405, "body_markdown": "I personally like the solution using the `parser` module, which is the second Answer to this Question and is beautiful, as you don&#39;t have to construct any string literals to get it working. However, one downside,  it is `90%` slower then the accepted answer with `strptime`. \r\n\r\n    from dateutil import parser\r\n    from datetime import datetime\r\n    import timeit\r\n    \r\n    def dt():\r\n    \tdt = parser.parse(&quot;Jun 1 2005  1:33PM&quot;)\r\n    def strptime():\r\n    \tdatetime_object = datetime.strptime(&#39;Jun 1 2005  1:33PM&#39;, &#39;%b %d %Y %I:%M%p&#39;)\r\n    \r\n    print(timeit.timeit(stmt=dt, number=10**5))\r\n    print(timeit.timeit(stmt=strptime, number=10**5))\r\n    &gt;10.70296801342902\r\n    &gt;1.3627995655316933\r\n\r\nAs long as you are not doing this `a million` times over and over again, i stil ll  think the `parser` method is more convenient and will handle most of the time formats automatically. "}], "title": "Converting string into datetime", "view_count": 1532664, "answer_count": 17, "code_snippet": ["<code>Jun 1 2005  1:33PM\nAug 28 1999 12:00AM\n</code>", "<code>strptime()</code>", "<code>from datetime import datetime\n\ndatetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\n</code>", "<code>datetime</code>", "<code>strptime</code>", "<code>strftime</code>", "<code>strptime</code>", "<code>strftime</code>", "<code>date</code>", "<code>datetime</code>", "<code>datetime</code>", "<code>datetime.strptime('Jun 1 2005', '%b %d %Y').date() == date(2005, 6, 1)</code>", "<code>datetime</code>", "<code>from datetime import timezone; datetime_object = datetime_object.replace(tzinfo=timezone.utc)</code>", "<code>\"%Y-%m-%d %H:%M:%S\"</code>", "<code>from dateutil import parser\ndt = parser.parse(\"Aug 28 1999 12:00AM\")\n</code>", "<code>pip install python-dateutil\n</code>", "<code>$ python\n&gt;&gt;&gt; import time\n&gt;&gt;&gt; time.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\ntime.struct_time(tm_year=2005, tm_mon=6, tm_mday=1,\n                 tm_hour=13, tm_min=33, tm_sec=0,\n                 tm_wday=2, tm_yday=152, tm_isdst=-1)\n</code>", "<code>parse</code>", "<code>format</code>", "<code>pip install timestring</code>", "<code>&gt;&gt;&gt; import timestring\n&gt;&gt;&gt; timestring.Date('monday, aug 15th 2015 at 8:40 pm')\n&lt;timestring.Date 2015-08-15 20:40:00 4491909392&gt;\n&gt;&gt;&gt; timestring.Date('monday, aug 15th 2015 at 8:40 pm').date\ndatetime.datetime(2015, 8, 15, 20, 40)\n&gt;&gt;&gt; timestring.Range('next week')\n&lt;timestring.Range From 03/10/14 00:00:00 to 03/03/14 00:00:00 4496004880&gt;\n&gt;&gt;&gt; (timestring.Range('next week').start.date, timestring.Range('next week').end.date)\n(datetime.datetime(2014, 3, 10, 0, 0), datetime.datetime(2014, 3, 14, 0, 0))\n</code>", "<code>import timestring</code>", "<code>timestring.Date('27 Mar 2014 12:32:29 GMT').year</code>", "<code>&gt;&gt;&gt; datetime.datetime.strptime(\n...     \"March 5, 2014, 20:13:50\", \"%B %d, %Y, %H:%M:%S\"\n... ).replace(tzinfo=datetime.timezone(datetime.timedelta(hours=-3)))\n</code>", "<code>mktime()</code>", "<code>datetime.strptime()</code>", "<code>calendar.timegm</code>", "<code>(datetime(1970,1,1)+timedelta(seconds=timegm(time.strptime(..)))).replace(tzinfo=timezone(timedelta(-3)))</code>", "<code>strptime</code>", "<code>strftime</code>", "<code>Jun 1 2005  1:33PM</code>", "<code>%b %d %Y %I:%M%p</code>", "<code>string</code>", "<code>&gt;&gt;&gt; dates = []\n&gt;&gt;&gt; dates.append('Jun 1 2005  1:33PM')\n&gt;&gt;&gt; dates.append('Aug 28 1999 12:00AM')\n&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; for d in dates:\n...     date = datetime.strptime(d, '%b %d %Y %I:%M%p')\n...     print type(date)\n...     print date\n... \n</code>", "<code>&lt;type 'datetime.datetime'&gt;\n2005-06-01 13:33:00\n&lt;type 'datetime.datetime'&gt;\n1999-08-28 00:00:00\n</code>", "<code>&gt;&gt;&gt; import dateutil\n&gt;&gt;&gt; dates = []\n&gt;&gt;&gt; dates.append('12 1 2017')\n&gt;&gt;&gt; dates.append('1 1 2017')\n&gt;&gt;&gt; dates.append('1 12 2017')\n&gt;&gt;&gt; dates.append('June 1 2017 1:30:00AM')\n&gt;&gt;&gt; [parser.parse(x) for x in dates]\n</code>", "<code>[datetime.datetime(2017, 12, 1, 0, 0), datetime.datetime(2017, 1, 1, 0, 0), datetime.datetime(2017, 1, 12, 0, 0), datetime.datetime(2017, 6, 1, 1, 30)]\n</code>", "<code>import time\n\ndef num_suffix(n):\n    '''\n    Returns the suffix for any given int\n    '''\n    suf = ('th','st', 'nd', 'rd')\n    n = abs(n) # wise guy\n    tens = int(str(n)[-2:])\n    units = n % 10\n    if tens &gt; 10 and tens &lt; 20:\n        return suf[0] # teens with 'th'\n    elif units &lt;= 3:\n        return suf[units]\n    else:\n        return suf[0] # 'th'\n\ndef day_suffix(t):\n    '''\n    Returns the suffix of the given struct_time day\n    '''\n    return num_suffix(t.tm_mday)\n\n# Examples\nprint num_suffix(123)\nprint num_suffix(3431)\nprint num_suffix(1234)\nprint ''\nprint day_suffix(time.strptime(\"1 Dec 00\", \"%d %b %y\"))\nprint day_suffix(time.strptime(\"2 Nov 01\", \"%d %b %y\"))\nprint day_suffix(time.strptime(\"3 Oct 02\", \"%d %b %y\"))\nprint day_suffix(time.strptime(\"4 Sep 03\", \"%d %b %y\"))\nprint day_suffix(time.strptime(\"13 Nov 90\", \"%d %b %y\"))\nprint day_suffix(time.strptime(\"14 Oct 10\", \"%d %b %y\"))\u200b\u200b\u200b\u200b\u200b\u200b\u200b\n</code>", "<code>import pandas as pd\n\ndates = ['2015-12-25', '2015-12-26']\n\n# 1) Use a list comprehension.\n&gt;&gt;&gt; [d.date() for d in pd.to_datetime(dates)]\n[datetime.date(2015, 12, 25), datetime.date(2015, 12, 26)]\n\n# 2) Convert the dates to a DatetimeIndex and extract the python dates.\n&gt;&gt;&gt; pd.DatetimeIndex(dates).date.tolist()\n[datetime.date(2015, 12, 25), datetime.date(2015, 12, 26)]\n</code>", "<code>dates = pd.DatetimeIndex(start='2000-1-1', end='2010-1-1', freq='d').date.tolist()\n\n&gt;&gt;&gt; %timeit [d.date() for d in pd.to_datetime(dates)]\n# 100 loops, best of 3: 3.11 ms per loop\n\n&gt;&gt;&gt; %timeit pd.DatetimeIndex(dates).date.tolist()\n# 100 loops, best of 3: 6.85 ms per loop\n</code>", "<code>datetimes = ['Jun 1 2005  1:33PM', 'Aug 28 1999 12:00AM']\n\n&gt;&gt;&gt; pd.to_datetime(datetimes).to_pydatetime().tolist()\n[datetime.datetime(2005, 6, 1, 13, 33), \n datetime.datetime(1999, 8, 28, 0, 0)]\n</code>", "<code>to_datetime</code>", "<code>.date</code>", "<code>In [34]: import datetime\n\nIn [35]: _now = datetime.datetime.now()\n\nIn [36]: _now\nOut[36]: datetime.datetime(2016, 1, 19, 9, 47, 0, 432000)\n\nIn [37]: print _now\n2016-01-19 09:47:00.432000\n\nIn [38]: _parsed = datetime.datetime.strptime(str(_now),\"%Y-%m-%d %H:%M:%S.%f\")\n\nIn [39]: _parsed\nOut[39]: datetime.datetime(2016, 1, 19, 9, 47, 0, 432000)\n\nIn [40]: assert _now == _parsed\n</code>", "<code>import datetime\nfrom django.utils.timezone import get_current_timezone\ntz = get_current_timezone()\n\nformat = '%b %d %Y %I:%M%p'\ndate_object = datetime.datetime.strptime('Jun 1 2005  1:33PM', format)\ndate_obj = tz.localize(date_object)\n</code>", "<code>USE_TZ = True</code>", "<code>RuntimeWarning: DateTimeField MyModel.created received a naive datetime (2016-03-04 00:00:00) while time zone support is active.\n</code>", "<code>def date(datestr=\"\", format=\"%Y-%m-%d\"):\n    from datetime import datetime\n    if not datestr:\n        return datetime.today().date()\n    return datetime.strptime(datestr, format).date()\n</code>", "<code>format</code>", "<code>import datetime\n\nnew_date_format1 = datetime.datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\nnew_date_format2 = datetime.datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p').strftime('%Y/%m/%d %I:%M%p')\nprint new_date_format1\nprint new_date_format2\n</code>", "<code>2005-06-01 13:33:00\n2005/06/01 01:33PM\n</code>", "<code>&gt;&gt;&gt; import arrow\n&gt;&gt;&gt; dateStrings = [ 'Jun 1  2005 1:33PM', 'Aug 28 1999 12:00AM' ]\n&gt;&gt;&gt; for dateString in dateStrings:\n...     dateString\n...     arrow.get(dateString.replace('  ',' '), 'MMM D YYYY H:mmA').datetime\n...     arrow.get(dateString.replace('  ',' '), 'MMM D YYYY H:mmA').format('ddd, Do MMM YYYY HH:mm')\n...     arrow.get(dateString.replace('  ',' '), 'MMM D YYYY H:mmA').humanize(locale='de')\n...     \n'Jun 1  2005 1:33PM'\ndatetime.datetime(2005, 6, 1, 13, 33, tzinfo=tzutc())\n'Wed, 1st Jun 2005 13:33'\n'vor 11 Jahren'\n'Aug 28 1999 12:00AM'\ndatetime.datetime(1999, 8, 28, 0, 0, tzinfo=tzutc())\n'Sat, 28th Aug 1999 00:00'\n'vor 17 Jahren'\n</code>", "<code>import date_converter\nconverted_date = date_converter.string_to_datetime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\n</code>", "<code>parser</code>", "<code>90%</code>", "<code>strptime</code>", "<code>from dateutil import parser\nfrom datetime import datetime\nimport timeit\n\ndef dt():\n    dt = parser.parse(\"Jun 1 2005  1:33PM\")\ndef strptime():\n    datetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\n\nprint(timeit.timeit(stmt=dt, number=10**5))\nprint(timeit.timeit(stmt=strptime, number=10**5))\n&gt;10.70296801342902\n&gt;1.3627995655316933\n</code>", "<code>a million</code>", "<code>parser</code>", "<code>strptime()</code>", "<code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; date = datetime.date(int('2017'),int('12'),int('21'))\n&gt;&gt;&gt; date\ndatetime.date(2017, 12, 21)\n&gt;&gt;&gt; type(date)\n&lt;type 'datetime.date'&gt;\n</code>", "<code>selected_month_rec = '2017-09-01'\ndate_formate = datetime.date(int(selected_month_rec.split('-')[0]),int(selected_month_rec.split('-')[1]),int(selected_month_rec.split('-')[2]))\n</code>"], "path": "stack.django"}, {"tags": ["python"], "creation_date": 1270340913, "body_markdown": "I&#39;ve been learning, working, and playing with Python for a year and a half now. As a biologist slowly making the turn to bio-informatics, this language has been at the very core of all the major contributions I have made in the lab. I more or less fell in love with the way Python permits me to express beautiful solutions and also with the semantics of the language that allows such a natural flow from thoughts to workable code.\r\n\r\nWhat I would like to know is your answer to a kind of question I have seldom seen in this or other forums. This question seems central to me for anyone on the path to Python improvement but who wonders what his next steps should be.\r\n\r\nLet me sum up what I do NOT want to ask first ;)\r\n\r\n- I don&#39;t want to know how to QUICKLY learn Python\r\n- Nor do I want to find out the best way to get acquainted with the language\r\n- Finally, I don&#39;t want to know a &#39;one trick that does it all&#39; approach.\r\n\r\nWhat I do want to know your opinion about, is:\r\n\r\n**What are the steps YOU would recommend to a Python journeyman, from apprenticeship to guru status (feel free to stop wherever your expertise dictates it), in order that one IMPROVES CONSTANTLY, becoming a better and better Python coder, one step at a time. Some of the people on SO almost seem worthy of worship for their Python prowess, please enlighten us :)**\r\n\r\nThe kind of answers I would enjoy (but feel free to surprise the readership :P ), is formatted more or less like this:\r\n\r\n- Read this (eg: python tutorial), pay attention to that kind of details\r\n- Code for so manytime/problems/lines of code\r\n- Then, read this (eg: this or that book), but this time, pay attention to this\r\n- Tackle a few real-life problems\r\n- Then, proceed to reading Y.\r\n- Be sure to grasp these concepts\r\n- Code for X time\r\n- Come back to such and such basics or move further to...\r\n- (you get the point :)\r\n\r\nI really care about knowing your opinion on what exactly one should pay attention to, at various stages, in order to progress CONSTANTLY (with due efforts, of course). If you come from a specific field of expertise, discuss the path you see as appropriate in this field.\r\n\r\nEDIT: Thanks to your great input, I&#39;m back on the Python improvement track! I really appreciate!", "last_edit_date": 1369161539, "up_vote_count": 667, "link": "https://stackoverflow.com/questions/2573135/python-progression-path-from-apprentice-to-guru", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1270341130, "answer_id": 2573141, "path": "stack.django.answer", "score": 23, "up_vote_count": 23, "is_accepted": false, "last_activity_date": 1270341130, "body_markdown": "Google just recently released an online Python class (&quot;class&quot; as in &quot;a course of study&quot;).\r\n\r\nhttp://code.google.com/edu/languages/google-python-class/\r\n\r\nI know this doesn&#39;t answer your full question, but I think it&#39;s a great place to start!\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1270343613, "answer_id": 2573225, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1270343613, "body_markdown": "Not precisely what you&#39;re asking for, but I think it&#39;s good advice.\r\n\r\nLearn another language, doesn&#39;t matter too much which.  Each language has it&#39;s own ideas and conventions that you can learn from.  Learn about the differences in the languages and more importantly `why` they&#39;re different.  Try a purely functional language like Haskell and see some of the benefits (and challenges) of functions free of side-effects.  See how you can apply some of the things you learn from other languages to Python.  "}, {"tags": [], "down_vote_count": 0, "creation_date": 1270343800, "answer_id": 2573229, "path": "stack.django.answer", "score": 108, "up_vote_count": 108, "is_accepted": false, "last_activity_date": 1270343800, "body_markdown": "One good way to further your Python knowledge is to **dig into the source code of the libraries, platforms, and frameworks you use already.**\r\n\r\nFor example if you&#39;re building a site on [Django](http://www.djangoproject.com/), many questions that might stump you can be answered by looking at how Django implements the feature in question.\r\n\r\nThis way you&#39;ll continue to **pick up new idioms, coding styles, and Python tricks**.  (Some will be good and some will be bad.)\r\n\r\nAnd when you see something Pythony that you don&#39;t understand in the source, **hop over to the #python IRC channel** and you&#39;ll find plenty of &quot;language lawyers&quot; happy to explain.\r\n\r\nAn accumulation of these little clarifications over years leads to a much deeper understanding of the language and all of its ins and outs.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1270345136, "answer_id": 2573269, "path": "stack.django.answer", "score": 20, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1270345136, "body_markdown": "Download [Twisted][1] and look at the source code. They employ some pretty advanced techniques.\r\n\r\n\r\n  [1]: http://twistedmatrix.com/trac/wiki/Downloads"}, {"tags": [], "down_vote_count": 0, "creation_date": 1270348341, "answer_id": 2573362, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1270348341, "body_markdown": "I learned python first by myself over a summer just by doing the tutorial on the python site (sadly, I don&#39;t seem to be able to find that anymore, so I can&#39;t post a link). \r\n\r\nLater, python was taught to me in one of my first year courses at university. In the summer that followed, I practiced with [PythonChallenge](http://www.pythonchallenge.com/) and with problems from [Google Code Jam](http://code.google.com/codejam/).\r\nSolving these problems help from an algorithmic perspective as well as from the perspective of learning what Python can do as well as how to manipulate it to get the fullest out of python.\r\n\r\nFor similar reasons, I have heard that [code golf](http://codegolf.com/) works as well, but i have never tried it for myself."}, {"tags": [], "down_vote_count": 0, "creation_date": 1270353971, "answer_id": 2573526, "path": "stack.django.answer", "score": 59, "up_vote_count": 59, "is_accepted": false, "last_activity_date": 1316799947, "last_edit_date": 1316799947, "body_markdown": "**Understand Introspection**\r\n\r\n- write a `dir()` equivalent\r\n- write a `type()` equivalent\r\n- figure out how to [&quot;monkey-patch&quot;][1]\r\n- use the `dis` module to see how various language constructs work\r\n\r\nDoing these things will\r\n\r\n- give you some good theoretical knowledge about how python is implemented\r\n- give you some good practical experience in lower-level programming\r\n- give you a good intuitive feel for python data structures\r\n\r\n[1]:http://en.wikipedia.org/wiki/Monkey_patch"}, {"tags": [], "down_vote_count": 0, "creation_date": 1270354134, "answer_id": 2573531, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1270354134, "body_markdown": "**Thoroughly Understand All Data Types and Structures**\r\n\r\nFor every type and structure, write a series of demo programs that exercise every aspect of the type or data structure.  If you do this, it might be worthwhile to blog notes on each one... it might be useful to lots of people!\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1270363197, "answer_id": 2573761, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1270363197, "body_markdown": "Have you seen the book &quot;[Bioinformatics Programming using Python][1]&quot;? Looks like you&#39;re an exact member of its focus group.\r\n\r\n  [1]: http://oreilly.com/catalog/9780596154516/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1270371511, "answer_id": 2573965, "path": "stack.django.answer", "score": 92, "up_vote_count": 93, "is_accepted": false, "last_activity_date": 1286212740, "last_edit_date": 1286212740, "body_markdown": "**Understand (more deeply) Python&#39;s data types and their roles with regards to memory mgmt**\r\n\r\nAs some of you in the community are aware, [I teach Python courses][1], the most popular ones being the comprehensive Intro+Intermediate course as well as an &quot;advanced&quot; course which introduces a variety of areas of application development.\r\n\r\nQuite often, I get asked a question quite similar to, &quot;Should I take your intro or advanced course? I&#39;ve already been programming Python for 1-2 years, and I think the intro one is too simple for me so I&#39;d like to jump straight to the advanced... which course would *you* recommend?&quot;\r\n\r\nTo answer their question, I probe to see how strong they are in this area -- not that it&#39;s really the best way to measure whether they&#39;re ready for any advanced course, but to see how well their basic knowledge is of Python&#39;s objects and memory model, which is a cause of *many* Python bugs written by those who are not only beginners but those who have gone beyond that.\r\n\r\nTo do this, I point them at this simple 2-part quiz question:\r\n![Ex1: x=42; y=x; x+=1; print x,y Ex2: x=\\[1,2,3\\];y=x;x\\[0\\]=4;print x,y][2]\r\n\r\nMany times, they are able to get the output, but the *why* is more difficult and much more important of an response... I would weigh the output as 20% of the answer while the &quot;why&quot; gets 80% credit. If they can&#39;t get the why, regardless how Python experience they have, I will always steer people to the comprehensive intro+intermediate course because I spend one lecture on objects and memory management to the point where you should be able to answer with the output and the why with sufficient confidence. (Just because you know Python&#39;s syntax after 1-2 years doesn&#39;t make you ready to move beyond a &quot;beginner&quot; label until you have a much better understanding as far as how Python works under the covers.)\r\n\r\nA succeeding inquiry requiring a similar answer is even tougher, e.g.,\r\n\r\n**Example 3**\r\n\r\n    x = [&#39;foo&#39;, [1,2,3], 10.4]\r\n    y = list(x) # or x[:]\r\n    y[0] = &#39;fooooooo&#39;\r\n    y[1][0] = 4\r\n    print x\r\n    print y\r\n\r\nThe next topics I recommend are to understanding reference counting well, learning what &quot;interning&quot; means (but not necessarily using it), learning about shallow and deep copies (as in Example 3 above), and finally, the interrelationships between the various types and constructs in the language, i.e. lists vs. tuples, dicts vs. sets, list comprehensions vs. generator expressions, iterators vs. generators, etc.; however all those other suggestions are another post for another time. Hope this helps in the meantime! :-)\r\n\r\nps. I agree with the other responses for getting more intimate with introspection as well as studying other projects&#39; source code and add a strong &quot;+1&quot; to both suggestions!\r\n\r\npps. Great question BTW. I wish I was smart enough in the beginning to have asked something like this, but that was a long time ago, and now I&#39;m trying to help others with my many years of full-time Python programming!!\r\n\r\n\r\n  [1]: http://cyberwebconsulting.com\r\n  [2]: http://imgur.com/6dxRh.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1270415661, "answer_id": 2575917, "path": "stack.django.answer", "score": 67, "up_vote_count": 67, "is_accepted": false, "last_activity_date": 1270415661, "body_markdown": "Check out Peter Norvig&#39;s essay on becoming a master programmer in 10 years: http://norvig.com/21-days.html. I&#39;d wager it holds true for any language. \r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1270422874, "answer_id": 2576226, "path": "stack.django.answer", "score": 41, "up_vote_count": 42, "is_accepted": false, "last_activity_date": 1270422874, "body_markdown": "I&#39;ll give you the simplest and most effective piece of advice I think anybody could give you: **code**.\r\n\r\nYou can only be better at using a language (which implies understanding it) by *coding*. You have to actively enjoy coding, be inspired, ask questions, and find answers by yourself.\r\n\r\nGot a an hour to spare? Write code that will reverse a string, and find out the most optimum solution. A free evening? Why not try some web-scraping. Read other peoples code. See how they do things. Ask yourself what you would do.\r\n\r\nWhen I&#39;m bored at my computer, I open my IDE and code-storm. I jot down ideas that sound interesting, and challenging. An URL shortener? Sure, I can do that. Oh, I learnt how to convert numbers from one base to another as a side effect!\r\n\r\nThis is valid whatever your skill level. *You never stop learning.* By actively coding in your spare time you will, with little additional effort, come to understand the language, and ultimately, become a guru. You will build up knowledge and reusable code and memorise idioms."}, {"tags": [], "down_vote_count": 4, "creation_date": 1270423193, "answer_id": 2576240, "path": "stack.django.answer", "score": 471, "up_vote_count": 475, "is_accepted": true, "last_activity_date": 1359368920, "last_edit_date": 1359368920, "body_markdown": "I thought the process of Python mastery went something like:\r\n\r\n1.  Discover [list comprehensions][1]\r\n2.  Discover [generators][2]\r\n3.  Incorporate [map, reduce, filter, iter, range, xrange][3] often into your code\r\n4.  Discover [Decorators][4]\r\n5.  Write recursive functions, a lot\r\n6.  Discover [itertools][5] and [functools][6]\r\n7.  Read [Real World Haskell][7] ([read free online][10])\r\n8.  Rewrite all your old Python code with tons of higher order functions, recursion, and whatnot.\r\n10.  Annoy your cubicle mates every time they present you with a Python class.  Claim it could be &quot;better&quot; implemented as a dictionary plus some functions.  Embrace functional programming.\r\n11.  Rediscover the [Strategy][8] pattern and then [all those things][9] from imperative code you tried so hard to forget after Haskell.\r\n12.  Find a balance.\r\n\r\n\r\n  [1]: http://en.wikipedia.org/wiki/List_comprehension#Python\r\n  [2]: http://en.wikipedia.org/wiki/Python_syntax_and_semantics#Generators\r\n  [3]: http://docs.python.org/library/functions.html\r\n  [4]: http://wiki.python.org/moin/PythonDecorators\r\n  [5]: http://docs.python.org/library/itertools.html\r\n  [6]: http://docs.python.org/library/functools.html\r\n  [7]: http://www.amazon.com/Real-World-Haskell-Bryan-OSullivan/dp/0596514980/ref=wl_it_dp_o?ie=UTF8&amp;coliid=I17I0KVG1JBW7X&amp;colid=3O60XYEAF3V3K\r\n  [8]: http://en.wikipedia.org/wiki/Strategy_pattern#Python\r\n  [9]: http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124/ref=sr_1_3?ie=UTF8&amp;s=books&amp;qid=1270423017&amp;sr=1-3\r\n  [10]: http://book.realworldhaskell.org/read/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1270860041, "answer_id": 2611783, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1270860041, "body_markdown": "You already have a lot of reading material, but if you can handle more, I recommend you\r\nlearn about the evolution of python by reading the Python Enhancement Proposals,  especially the &quot;Finished&quot; PEPs and the &quot;Deferred, Abandoned, Withdrawn, and Rejected&quot; PEPs.\r\n\r\nBy seeing how the language has changed, the decisions that were made and their rationales, you will absorb the philosophy of Python and understand how &quot;idiomatic Python&quot; comes about.\r\n\r\nhttp://www.python.org/dev/peps/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1289410696, "answer_id": 4147303, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1378187194, "last_edit_date": 1378187194, "body_markdown": "I recommend starting with something that forces you to explore the expressive power of the syntax. Python allows many different ways of writing the same functionality, but there is often a single most elegant and fastest approach. If you&#39;re used to the idioms of other languages, you might never otherwise find or accept these better ways. I spent a weekend trudging through the first 20 or so [Project Euler][1] problems and made a simple webapp with Django on Google App Engine. This will only take you from apprentice to novice, maybe, but you can then continue to making somewhat more advanced webapps and solve more advanced Project Euler problems. After a few months I went back and solved the first 20 PE problems from scratch in an hour instead of a weekend.\r\n\r\n\r\n  [1]: http://projecteuler.net"}, {"tags": [], "down_vote_count": 0, "creation_date": 1289415371, "answer_id": 4147969, "path": "stack.django.answer", "score": 24, "up_vote_count": 24, "is_accepted": false, "last_activity_date": 1337963472, "last_edit_date": 1337963472, "body_markdown": "If you&#39;re in and using python for science (which it seems you are)  part of that will be learning and understanding scientific libraries, for me these would be \r\n\r\n- numpy\r\n- scipy\r\n- matplotlib\r\n- mayavi/mlab\r\n- chaco\r\n- Cython\r\n\r\nknowing how to use the right libraries and vectorize your code is essential for scientific computing.\r\n\r\nI wanted to add that, handling large numeric datasets in common pythonic ways(object oriented approaches, lists, iterators) can be extremely inefficient.  In scientific computing, it can be necessary to structure your code in ways that differ drastically from how most conventional python coders approach data. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1289542974, "answer_id": 4162150, "path": "stack.django.answer", "score": 48, "up_vote_count": 48, "is_accepted": false, "last_activity_date": 1289542974, "body_markdown": "    def apprentice():\r\n      read(diveintopython)\r\n      experiment(interpreter)\r\n      read(python_tutorial)\r\n      experiment(interpreter, modules/files)\r\n      watch(pycon)\r\n\r\n    def master():\r\n      refer(python-essential-reference)\r\n      refer(PEPs/language reference)\r\n      experiment()\r\n      read(good_python_code) # Eg. twisted, other libraries\r\n      write(basic_library)   # reinvent wheel and compare to existing wheels\r\n      if have_interesting_ideas:\r\n         give_talk(pycon)\r\n\r\n    def guru():\r\n      pass # Not qualified to comment. Fix the GIL perhaps?"}, {"tags": [], "down_vote_count": 0, "creation_date": 1289600739, "answer_id": 4169614, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1289600739, "body_markdown": "Teaching to someone else who is starting to learn Python is always a great way to get your ideas clear and sometimes, I usually get a lot of neat questions from students that have me to re-think conceptual things about Python."}, {"tags": [], "down_vote_count": 0, "creation_date": 1305717308, "answer_id": 6043780, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1305717308, "body_markdown": "Learning algorithms/maths/file IO/Pythonic optimisation\r\n----------------------------------------\r\n\r\nThis won&#39;t get you guru-hood but to start out, try working through the [Project Euler problems][1] \r\nThe first 50 or so shouldn&#39;t tax you if you have decent high-school mathematics and know how to Google. When you solve one you get into the forum where you can look through other people&#39;s solutions which will teach you even more. Be decent though and don&#39;t post up your solutions as the idea is to encourage people to work it out for themselves. \r\n\r\nForcing yourself to work in Python will be unforgiving if you use brute-force algorithms.\r\nThis will teach you how to lay out large datasets in memory and access them efficiently with the fast language features such as dictionaries.\r\n\r\n**From doing this myself I learnt:**\r\n\r\n - File IO\r\n - Algorithms and techniques such as Dynamic Programming\r\n - Python data layout\r\n  - Dictionaries/hashmaps\r\n  - Lists\r\n  - Tuples\r\n  - Various combinations thereof, e.g. dictionaries to lists of tuples\r\n - Generators\r\n - Recursive functions\r\n - Developing Python libraries \r\n  - Filesystem layout\r\n  - Reloading them during an interpreter session\r\n\r\n**And also very importantly**\r\n\r\n - When to give up and use C or C++!\r\n\r\n\r\n**All of this should be relevant to Bioinformatics**\r\n\r\nAdmittedly I didn&#39;t learn about the OOP features of Python from that experience.\r\n\r\n  [1]: http://projecteuler.net/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1322999455, "answer_id": 8375074, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1322999455, "body_markdown": "Attempt http://challenge.greplin.com/ using Python "}], "title": "Python progression path - From apprentice to guru", "view_count": 305130, "answer_count": 19, "code_snippet": ["<code>x = ['foo', [1,2,3], 10.4]\ny = list(x) # or x[:]\ny[0] = 'fooooooo'\ny[1][0] = 4\nprint x\nprint y\n</code>", "<code>print</code>", "<code>dir()</code>", "<code>type()</code>", "<code>dis</code>", "<code>type()</code>", "<code>type</code>", "<code>def apprentice():\n  read(diveintopython)\n  experiment(interpreter)\n  read(python_tutorial)\n  experiment(interpreter, modules/files)\n  watch(pycon)\n\ndef master():\n  refer(python-essential-reference)\n  refer(PEPs/language reference)\n  experiment()\n  read(good_python_code) # Eg. twisted, other libraries\n  write(basic_library)   # reinvent wheel and compare to existing wheels\n  if have_interesting_ideas:\n     give_talk(pycon)\n\ndef guru():\n  pass # Not qualified to comment. Fix the GIL perhaps?\n</code>", "<code>why</code>"], "path": "stack.django"}, {"tags": ["python", "virtualenv"], "creation_date": 1304200588, "body_markdown": "I&#39;ve been hearing the buzz about virtualenv lately, and I&#39;m interested. But all I&#39;ve heard is a smattering of praise, and don&#39;t have a clear understanding of what it is or how to use it.\r\n\r\nI&#39;m looking for (ideally) a follow-along tutorial that can take me from Windows or Linux with no Python on it, and explain every step of (in no particular order):\r\n\r\n * what I should do to be able to start using `virtualenv`\r\n * specific reasons why using `virtualenv` is a good idea\r\n * situations where I can/can&#39;t use `virtualenv`\r\n * situations where I should/shouldn&#39;t use `virtualenv`\r\n\r\nAnd step through (comprehensively) a couple sample situations of the should+can variety.\r\n\r\nSo what are some good tutorials to cover this stuff? Or if you have the time and interest, perhaps you can answer a few of those questions here. Either in your answer, or as a link to tutorials that answer it, these are the things I&#39;d like to know.", "last_edit_date": 1440690962, "up_vote_count": 336, "link": "https://stackoverflow.com/questions/5844869/comprehensive-beginners-virtualenv-tutorial", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1304201276, "answer_id": 5844931, "path": "stack.django.answer", "score": 230, "up_vote_count": 231, "is_accepted": true, "last_activity_date": 1440689793, "last_edit_date": 1440689793, "body_markdown": "This is very good: http://simononsoftware.com/virtualenv-tutorial-part-2/\r\n\r\nAnd this is a slightly more practical one: http://iamzed.com/2009/05/07/a-primer-on-virtualenv/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1330439358, "answer_id": 9483742, "path": "stack.django.answer", "score": 7, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1336663396, "last_edit_date": 1495542380, "body_markdown": "Here&#39;s another good one: http://www.saltycrane.com/blog/2009/05/notes-using-pip-and-virtualenv-django/\r\n\r\nThis one shows how to use `pip` and a pip requirements file with virtualenv; **Scobal**&#39;s two suggested tutorials are both very helpful but are both `easy_install`-centric.\r\n\r\nNote that none of these tutorials explain how to run a different version of Python within a virtualenv - for this, see this SO question: https://stackoverflow.com/questions/1534210/use-different-python-version-with-virtualenv"}, {"tags": [], "down_vote_count": 1, "creation_date": 1352244543, "answer_id": 13261064, "path": "stack.django.answer", "score": 28, "up_vote_count": 29, "is_accepted": false, "last_activity_date": 1460231423, "last_edit_date": 1460231423, "body_markdown": "Virtualenv is a tool to create **isolated** Python environments.\r\n\r\nLet&#39;s say you&#39;re working in 2 different projects, A and B.\r\nProject A is a web project and the team is using the following packages:\r\n\r\n - Python 2.8.x\r\n - Django 1.6.x\r\n\r\nThe project B is also a web project but your team is using:\r\n\r\n- Python 2.7.x\r\n- Django 1.4.x\r\n\r\nThe machine that you&#39;re working doesn&#39;t have any version of django, what should you do? Install django 1.4? django 1.6? If you install django 1.4 globally would be easy to point to django 1.6 to work in project A?\r\n\r\nVirtualenv is your solution! You can create 2 different virtualenv&#39;s, one for project A and another for project B. Now, when you need to work in project A, just activate the virtualenv for project A, and vice-versa. \r\n\r\nA better tip when using virtualenv is to install virtualenvwrapper to manage all the virtualenv&#39;s that you have, easily. It&#39;s a wrapper for creating, working, removing virtualenv&#39;s.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1360100777, "answer_id": 14717552, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1360100777, "body_markdown": "For setting up virtualenv on a clean Ubuntu installation, I found this [zookeeper tutorial][1] to be the best - you can ignore the parts about zookeper itself. The [virtualenvwrapper documentation][2] offers similar content, but it&#39;s a bit scarce on telling you what exactly to put into your `.bashrc` file.\r\n\r\n\r\n  [1]: https://github.com/zookeepr/zookeepr/wiki/Creating-a-Development-Environment-with-pip-and-virtualenv\r\n  [2]: http://virtualenvwrapper.readthedocs.org/en/latest/"}], "title": "Comprehensive beginner&#39;s virtualenv tutorial?", "view_count": 135835, "answer_count": 4, "code_snippet": ["<code>virtualenv</code>", "<code>virtualenv</code>", "<code>virtualenv</code>", "<code>virtualenv</code>", "<code>activate</code>", "<code>deactivate</code>", "<code>virtualenv</code>", "<code>virtualenvwrapper</code>", "<code>virtualenv</code>", "<code>pip</code>", "<code>easy_install</code>", "<code>.bashrc</code>"], "path": "stack.django"}, {"tags": ["django", "image", "caching", "django-models"], "creation_date": 1251672987, "body_markdown": "In my model I have :\r\n\r\n    class Alias(MyBaseModel):\r\n        remote_image = models.URLField(max_length=500, null=True, help_text=&quot;A URL that is downloaded and cached for the image. Only\r\n     used when the alias is made&quot;)\r\n        image = models.ImageField(upload_to=&#39;alias&#39;, default=&#39;alias-default.png&#39;, help_text=&quot;An image representing the alias&quot;)\r\n\r\n        \r\n        def save(self, *args, **kw):\r\n            if (not self.image or self.image.name == &#39;alias-default.png&#39;) and self.remote_image :\r\n                try :\r\n                    data = utils.fetch(self.remote_image)\r\n                    image = StringIO.StringIO(data)\r\n                    image = Image.open(image)\r\n                    buf = StringIO.StringIO()\r\n                    image.save(buf, format=&#39;PNG&#39;)\r\n                    self.image.save(hashlib.md5(self.string_id).hexdigest() + &quot;.png&quot;, ContentFile(buf.getvalue()))\r\n                except IOError :\r\n                    pass\r\n\r\nWhich works great for the first time the `remote_image` changes. \r\n\r\nHow can I fetch a new image when someone has modified the `remote_image` on the alias? And secondly, is there a better way to cache a remote image?\r\n\r\n", "last_edit_date": 1251675809, "up_vote_count": 205, "link": "https://stackoverflow.com/questions/1355150/django-when-saving-how-can-you-check-if-a-field-has-changed", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1251674511, "answer_id": 1355193, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1251674511, "body_markdown": "While this doesn&#39;t actually answer your question, I&#39;d go about this in a different way.\r\n\r\nSimply clear the `remote_image` field after successfully saving the local copy. Then in your save method you can always update the image whenever `remote_image` isn&#39;t empty.\r\n\r\nIf you&#39;d like to keep a reference to the url, you could use an non-editable boolean field to handle the caching flag rather than `remote_image` field itself."}, {"tags": [], "down_vote_count": 0, "creation_date": 1251730576, "answer_id": 1357873, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1251730576, "body_markdown": "as an extension of SmileyChris&#39; answer, you can add a datetime field to the model for last_updated, and set some sort of limit for the max age you&#39;ll let it get to before checking for a change"}, {"tags": [], "down_vote_count": 5, "creation_date": 1251798363, "answer_id": 1361547, "path": "stack.django.answer", "score": 127, "up_vote_count": 132, "is_accepted": false, "last_activity_date": 1425939607, "last_edit_date": 1425939607, "body_markdown": "And now for direct answer: one way to check if the value for the field has changed is to fetch original data from database before saving instance. Consider this example:\r\n\r\n    class MyModel(models.Model):\r\n        f1 = models.CharField(max_length=1)\r\n    \r\n        def save(self, *args, **kw):\r\n            if self.pk is not None:\r\n                orig = MyModel.objects.get(pk=self.pk)\r\n                if orig.f1 != self.f1:\r\n                    print &#39;f1 changed&#39;\r\n            super(MyModel, self).save(*args, **kw)\r\n\r\nThe same thing applies when working with a form. You can detect it at the clean or save method of a ModelForm:\r\n\r\n    class MyModelForm(forms.ModelForm):\r\n    \r\n        def clean(self):\r\n            cleaned_data = super(ProjectForm, self).clean()\r\n            #if self.has_changed():  # new instance or existing updated (form has data to save)\r\n            if self.instance.pk is not None:  # new instance only\r\n                if self.instance.f1 != cleaned_data[&#39;f1&#39;]:\r\n                    print &#39;f1 changed&#39;\r\n            return cleaned_data\r\n    \r\n        class Meta:\r\n            model = MyModel\r\n            exclude = []"}, {"tags": [], "down_vote_count": 5, "creation_date": 1259101134, "answer_id": 1793323, "path": "stack.django.answer", "score": 328, "up_vote_count": 333, "is_accepted": true, "last_activity_date": 1353361876, "last_edit_date": 1353361876, "body_markdown": "Though it&#39;s a bit late, let me throw out this solution for others that come across this post.  Essentially, you want to override the `__init__` method of `models.Model` so that you keep a copy of the original value.  This makes it so that you don&#39;t have to do another DB lookup (which is always a good thing).\r\n\r\n    class Person(models.Model):\r\n      name = models.CharField()\r\n\r\n      __original_name = None\r\n\r\n      def __init__(self, *args, **kwargs):\r\n        super(Person, self).__init__(*args, **kwargs)\r\n        self.__original_name = self.name\r\n\r\n      def save(self, force_insert=False, force_update=False, *args, **kwargs):\r\n        if self.name != self.__original_name:\r\n          # name changed - do something here\r\n\r\n        super(Person, self).save(force_insert, force_update, *args, **kwargs)\r\n        self.__original_name = self.name"}, {"tags": [], "down_vote_count": 2, "creation_date": 1319836146, "answer_id": 7934958, "path": "stack.django.answer", "score": 118, "up_vote_count": 120, "is_accepted": false, "last_activity_date": 1426085518, "last_edit_date": 1426085518, "body_markdown": "Best way is with a `pre_save` signal. May not have been an option back in &#39;09 when this question was asked and answered, but anyone seeing this today should do it this way:\r\n\r\n    @receiver(pre_save, sender=MyModel)\r\n    def do_something_if_changed(sender, instance, **kwargs):\r\n        try:\r\n            obj = sender.objects.get(pk=instance.pk)\r\n        except sender.DoesNotExist:\r\n            pass # Object is new, so field hasn&#39;t technically changed, but you may want to do something else here.\r\n        else:\r\n            if not obj.some_field == instance.some_field: # Field has changed\r\n                # do something\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1355323673, "answer_id": 13842223, "path": "stack.django.answer", "score": 137, "up_vote_count": 137, "is_accepted": false, "last_activity_date": 1447735063, "last_edit_date": 1447735063, "body_markdown": "I use following mixin:\r\n\r\n    from django.forms.models import model_to_dict\r\n\r\n\r\n    class ModelDiffMixin(object):\r\n        &quot;&quot;&quot;\r\n        A model mixin that tracks model fields&#39; values and provide some useful api\r\n        to know what fields have been changed.\r\n        &quot;&quot;&quot;\r\n    \r\n        def __init__(self, *args, **kwargs):\r\n            super(ModelDiffMixin, self).__init__(*args, **kwargs)\r\n            self.__initial = self._dict\r\n    \r\n        @property\r\n        def diff(self):\r\n            d1 = self.__initial\r\n            d2 = self._dict\r\n            diffs = [(k, (v, d2[k])) for k, v in d1.items() if v != d2[k]]\r\n            return dict(diffs)\r\n    \r\n        @property\r\n        def has_changed(self):\r\n            return bool(self.diff)\r\n    \r\n        @property\r\n        def changed_fields(self):\r\n            return self.diff.keys()\r\n    \r\n        def get_field_diff(self, field_name):\r\n            &quot;&quot;&quot;\r\n            Returns a diff for field if it&#39;s changed and None otherwise.\r\n            &quot;&quot;&quot;\r\n            return self.diff.get(field_name, None)\r\n    \r\n        def save(self, *args, **kwargs):\r\n            &quot;&quot;&quot;\r\n            Saves model and set initial state.\r\n            &quot;&quot;&quot;\r\n            super(ModelDiffMixin, self).save(*args, **kwargs)\r\n            self.__initial = self._dict\r\n    \r\n        @property\r\n        def _dict(self):\r\n            return model_to_dict(self, fields=[field.name for field in\r\n                                 self._meta.fields])\r\n\r\nUsage:\r\n\r\n    &gt;&gt;&gt; p = Place()\r\n    &gt;&gt;&gt; p.has_changed\r\n    False\r\n    &gt;&gt;&gt; p.changed_fields\r\n    []\r\n    &gt;&gt;&gt; p.rank = 42\r\n    &gt;&gt;&gt; p.has_changed\r\n    True\r\n    &gt;&gt;&gt; p.changed_fields\r\n    [&#39;rank&#39;]\r\n    &gt;&gt;&gt; p.diff\r\n    {&#39;rank&#39;: (0, 42)}\r\n    &gt;&gt;&gt; p.categories = [1, 3, 5]\r\n    &gt;&gt;&gt; p.diff\r\n    {&#39;categories&#39;: (None, [1, 3, 5]), &#39;rank&#39;: (0, 42)}\r\n    &gt;&gt;&gt; p.get_field_diff(&#39;categories&#39;)\r\n    (None, [1, 3, 5])\r\n    &gt;&gt;&gt; p.get_field_diff(&#39;rank&#39;)\r\n    (0, 42)\r\n    &gt;&gt;&gt;\r\n____\r\nNote\r\n----\r\nPlease note that this solution works well in context of current request only. Thus it&#39;s suitable primarily for simple cases. In concurrent environment where multiple requests can manipulate the same model instance at the same time, you definitely need a different approach."}, {"tags": [], "down_vote_count": 0, "creation_date": 1362660095, "answer_id": 15271528, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1362660095, "body_markdown": "I had this situation before my solution was to override the &lt;code&gt;pre_save()&lt;/code&gt; method of the target field class it will be called only if the field has been changed &lt;br/&gt;\r\nuseful with FileField\r\nexample: &lt;br/&gt;\r\n&lt;!-- language: lang-py --&gt;\r\n    \r\n    class PDFField(FileField):\r\n        def pre_save(self, model_instance, add):\r\n            # do some operations on your file \r\n            # if and only if you have changed the filefield\r\n\r\ndisadvantage:&lt;br/&gt;\r\nnot useful if you want to do any (post_save) operation like using the created object in some job (if certain field has changed)"}, {"tags": [], "down_vote_count": 1, "creation_date": 1362910938, "answer_id": 15321187, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1362912452, "last_edit_date": 1362912452, "body_markdown": "I have extended the mixin of @livskiy as follows:\r\n\r\n&lt;!-- language: lang-py --&gt;\r\n\r\n\r\n    class ModelDiffMixin(models.Model):\r\n        &quot;&quot;&quot;\r\n        A model mixin that tracks model fields&#39; values and provide some useful api\r\n        to know what fields have been changed.\r\n        &quot;&quot;&quot;\r\n        _dict = DictField(editable=False)\r\n        def __init__(self, *args, **kwargs):\r\n            super(ModelDiffMixin, self).__init__(*args, **kwargs)\r\n            self._initial = self._dict\r\n    \r\n        @property\r\n        def diff(self):\r\n            d1 = self._initial\r\n            d2 = self._dict\r\n            diffs = [(k, (v, d2[k])) for k, v in d1.items() if v != d2[k]]\r\n            return dict(diffs)\r\n    \r\n        @property\r\n        def has_changed(self):\r\n            return bool(self.diff)\r\n    \r\n        @property\r\n        def changed_fields(self):\r\n            return self.diff.keys()\r\n    \r\n        def get_field_diff(self, field_name):\r\n            &quot;&quot;&quot;\r\n            Returns a diff for field if it&#39;s changed and None otherwise.\r\n            &quot;&quot;&quot;\r\n            return self.diff.get(field_name, None)\r\n    \r\n        def save(self, *args, **kwargs):\r\n            &quot;&quot;&quot;\r\n            Saves model and set initial state.\r\n            &quot;&quot;&quot;\r\n            object_dict = model_to_dict(self,\r\n                   fields=[field.name for field in self._meta.fields])\r\n            for field in object_dict:\r\n                # for FileFields\r\n                if issubclass(object_dict[field].__class__, FieldFile):\r\n                    try:\r\n                        object_dict[field] = object_dict[field].path\r\n                    except :\r\n                        object_dict[field] = object_dict[field].name\r\n    \r\n                # TODO: add other non-serializable field types\r\n            self._dict = object_dict\r\n            super(ModelDiffMixin, self).save(*args, **kwargs)\r\n    \r\n        class Meta:\r\n            abstract = True\r\n\r\nand the DictField is:\r\n\r\n\r\n&lt;!-- language: lang-py --&gt;\r\n\r\n    class DictField(models.TextField):\r\n        __metaclass__ = models.SubfieldBase\r\n        description = &quot;Stores a python dict&quot;\r\n    \r\n        def __init__(self, *args, **kwargs):\r\n            super(DictField, self).__init__(*args, **kwargs)\r\n    \r\n        def to_python(self, value):\r\n            if not value:\r\n                value = {}\r\n    \r\n            if isinstance(value, dict):\r\n                return value\r\n    \r\n            return json.loads(value)\r\n    \r\n        def get_prep_value(self, value):\r\n            if value is None:\r\n                return value\r\n            return json.dumps(value)\r\n    \r\n        def value_to_string(self, obj):\r\n            value = self._get_val_from_obj(obj)\r\n            return self.get_db_prep_value(value)\r\n\r\nit can be used by extending it in your models\r\na _dict field will be added when you sync/migrate and that field will store the state of your objects"}, {"tags": [], "down_vote_count": 1, "creation_date": 1378939163, "answer_id": 18752465, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1396282274, "last_edit_date": 1396282274, "body_markdown": "improving @josh answer for all fields:\r\n\r\n    class Person(models.Model):\r\n      name = models.CharField()\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super(Person, self).__init__(*args, **kwargs)\r\n        self._original_fields = dict([(field.attname, getattr(self, field.attname))\r\n            for field in self._meta.local_fields if not isinstance(field, models.ForeignKey)])\r\n\r\n    def save(self, *args, **kwargs):\r\n      if self.id:\r\n        for field in self._meta.local_fields:\r\n          if not isinstance(field, models.ForeignKey) and\\\r\n            self._original_fields[field.name] != getattr(self, field.name):\r\n            # Do Something    \r\n      super(Person, self).save(*args, **kwargs)\r\n\r\njust to clarify, the getattr works to get fields like `person.name` with strings (i.e. `getattr(person, &quot;name&quot;)`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1381610787, "answer_id": 19339049, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1381762258, "last_edit_date": 1381762258, "body_markdown": "You can use [django-model-changes][1] to do this without an additional database lookup:\r\n\r\n    from django.dispatch import receiver\r\n    from django_model_changes import ChangesMixin\r\n\r\n    class Alias(ChangesMixin, MyBaseModel):\r\n       # your model\r\n    \r\n    @receiver(pre_save, sender=Alias)\r\n    def do_something_if_changed(sender, instance, **kwargs):\r\n        if &#39;remote_image&#39; in instance.changes():\r\n            # do something\r\n\r\n\r\n  [1]: https://github.com/kajic/django-model-changes"}, {"tags": [], "down_vote_count": 0, "creation_date": 1389982126, "answer_id": 21192864, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1505225974, "last_edit_date": 1505225974, "body_markdown": "Another late answer, but if you&#39;re just trying to see if a new file has been uploaded to a file field, try this: (adapted from Christopher Adams&#39;s comment on the link http://zmsmith.com/2010/05/django-check-if-a-field-has-changed/ in zach&#39;s comment here)\r\n\r\nUpdated link: https://web.archive.org/web/20130101010327/http://zmsmith.com:80/2010/05/django-check-if-a-field-has-changed/\r\n\r\n    def save(self, *args, **kw):\r\n        from django.core.files.uploadedfile import UploadedFile\r\n        if hasattr(self.image, &#39;file&#39;) and isinstance(self.image.file, UploadedFile) :\r\n            # Handle FileFields as special cases, because the uploaded filename could be\r\n            # the same as the filename that&#39;s already there even though there may\r\n            # be different file contents.\r\n\r\n            # if a file was just uploaded, the storage model with be UploadedFile\r\n            # Do new file stuff here\r\n            pass\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1409422807, "answer_id": 25585480, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1409422807, "body_markdown": "The mixin from @ivanlivski is great. \r\n\r\nI&#39;ve extended it to\r\n\r\n - Ensure it works with Decimal fields.\r\n - Expose properties to simplify usage\r\n\r\nThe updated code is available here:\r\nhttps://github.com/sknutsonsf/python-contrib/blob/master/src/django/utils/ModelDiffMixin.py\r\n\r\nTo help people new to Python or Django, I&#39;ll give a more complete example.\r\nThis particular usage is to take a file from a data provider and ensure the records in the database reflect the file.  \r\n\r\nMy model object:\r\n\r\n    class Station(ModelDiffMixin.ModelDiffMixin, models.Model):\r\n        station_name = models.CharField(max_length=200)\r\n        nearby_city = models.CharField(max_length=200)\r\n        \r\n        precipitation = models.DecimalField(max_digits=5, decimal_places=2)\r\n        # &lt;list of many other fields&gt;\r\n    \r\n       def is_float_changed (self,v1, v2):\r\n            &#39;&#39;&#39; Compare two floating values to just two digit precision\r\n            Override Default precision is 5 digits\r\n            &#39;&#39;&#39;\r\n            return abs (round (v1 - v2, 2)) &gt; 0.01\r\n\r\nThe class that loads the file has these methods:\r\n\r\n    class UpdateWeather (object)\r\n        # other methods omitted\r\n    \r\n        def update_stations (self, filename):\r\n            # read all existing data \r\n            all_stations = models.Station.objects.all()\r\n            self._existing_stations = {}\r\n            \r\n            # insert into a collection for referencing while we check if data exists\r\n            for stn in all_stations.iterator():\r\n                self._existing_stations[stn.id] = stn\r\n    \r\n            # read the file. result is array of objects in known column order\r\n            data = read_tabbed_file(filename)\r\n            \r\n            # iterate rows from file and insert or update where needed\r\n            for rownum in range(sh.nrows):\r\n                self._update_row(sh.row(rownum));\r\n\r\n            # now anything remaining in the collection is no longer active\r\n            # since it was not found in the newest file\r\n            # for now, delete that record\r\n            # there should never be any of these if the file was created properly\r\n            for stn in self._existing_stations.values():\r\n                stn.delete()\r\n                self._num_deleted = self._num_deleted+1\r\n\r\n                            \r\n        def _update_row (self, rowdata):\r\n            stnid = int(rowdata[0].value) \r\n            name = rowdata[1].value.strip()\r\n    \r\n            # skip the blank names where data source has ids with no data today\r\n            if len(name) &lt; 1:\r\n                return\r\n    \r\n            # fetch rest of fields and do sanity test\r\n            nearby_city = rowdata[2].value.strip()\r\n            precip = rowdata[3].value\r\n                \r\n            if stnid in self._existing_stations:\r\n                stn = self._existing_stations[stnid]\r\n                del self._existing_stations[stnid]\r\n                is_update = True;\r\n            else:\r\n                stn = models.Station()\r\n                is_update = False;\r\n    \r\n            # object is new or old, don&#39;t care here            \r\n            stn.id = stnid\r\n            stn.station_name = name;\r\n            stn.nearby_city = nearby_city\r\n            stn.precipitation = precip\r\n            \r\n            # many other fields updated from the file \r\n                    \r\n            if is_update == True:\r\n    \r\n                # we use a model mixin to simplify detection of changes\r\n                # at the cost of extra memory to store the objects            \r\n                if stn.has_changed == True:\r\n                    self._num_updated = self._num_updated + 1;\r\n                    stn.save();\r\n            else:\r\n                self._num_created = self._num_created + 1;\r\n                stn.save()\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1411593265, "answer_id": 26026613, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1411593265, "body_markdown": "Note that field change tracking is available in django-model-utils.\r\n\r\nhttps://django-model-utils.readthedocs.org/en/latest/index.html\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1421945857, "answer_id": 28094442, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1421945857, "body_markdown": "How about using David Cramer&#39;s solution:\r\n\r\nhttp://cramer.io/2010/12/06/tracking-changes-to-fields-in-django/\r\n\r\nI&#39;ve had success using it like this:\r\n\r\n    @track_data(&#39;name&#39;)\r\n    class Mode(models.Model):\r\n        name = models.CharField(max_length=5)\r\n        mode = models.CharField(max_length=5)\r\n\r\n        def save(self, *args, **kwargs):\r\n            if self.has_changed(&#39;name&#39;):\r\n                print &#39;name changed&#39;\r\n\r\n        # OR #\r\n\r\n        @classmethod\r\n        def post_save(cls, sender, instance, created, **kwargs):\r\n            if instance.has_changed(&#39;name&#39;):\r\n                print &quot;Hooray!&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1435914641, "answer_id": 31202901, "path": "stack.django.answer", "score": 43, "up_vote_count": 43, "is_accepted": false, "last_activity_date": 1465434403, "last_edit_date": 1465434403, "body_markdown": "Since Django 1.8 released, you can use *from_db* classmethod to cache old value of remote_image. Then in *save* method you can compare old and new value of field to check if the value has changed.\r\n\r\n    @classmethod\r\n    def from_db(cls, db, field_names, values):\r\n        new = super(Alias, cls).from_db(db, field_names, values)\r\n        # cache value went from the base\r\n        new._loaded_remote_image = values[field_names.index(&#39;remote_image&#39;)]\r\n        return new\r\n    \r\n    def save(self, force_insert=False, force_update=False, using=None,\r\n             update_fields=None):\r\n        if (self._state.adding and self.remote_image) or \\\r\n            (not self._state.adding and self._loaded_remote_image != self.remote_image):\r\n            # If it is first save and there is no cached remote_image but there is new one, \r\n            # or the value of remote_image has changed - do your stuff!\r\n\r\n\r\n\r\n   \r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1442401656, "answer_id": 32606897, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1442401656, "body_markdown": "As of Django 1.8, there&#39;s the `from_db` method, as Serge mentions. In fact, the Django docs include this specific use case as an example:\r\n\r\nhttps://docs.djangoproject.com/en/dev/ref/models/instances/#customizing-model-loading\r\n\r\n&gt; Below is an example showing how to record the initial values of fields that are loaded from the database\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1446738873, "answer_id": 33549119, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1446738873, "body_markdown": "This works for me in Django 1.8\r\n\r\n    def clean(self):\r\n        if self.cleaned_data[&#39;name&#39;] != self.initial[&#39;name&#39;]:\r\n            # Do something\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1468555350, "answer_id": 38387667, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1478052653, "last_edit_date": 1478052653, "body_markdown": "If you are using a form, you can use Form&#39;s **changed_data** ([docs][1]):\r\n\r\n    class AliasForm(ModelForm):\r\n    \r\n        def save(self, commit=True):\r\n            if &#39;remote_image&#39; in self.changed_data:\r\n                # do things\r\n                remote_image = self.cleaned_data[&#39;remote_image&#39;]\r\n                do_things(remote_image)\r\n            super(AliasForm, self).save(commit)\r\n\r\n        class Meta:\r\n            model = Alias\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/dev/ref/forms/api/#django.forms.Form.changed_data"}, {"tags": [], "down_vote_count": 0, "creation_date": 1478255218, "answer_id": 40420323, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1478255810, "last_edit_date": 1478255810, "body_markdown": "The optimal solution is probably one that does not include an additional database read operation prior to saving the model instance, nor any further django-library. This is why laffuste&#39;s solutions is preferable. In the context of an admin site, one can simply override the save_model-method, and invoke the form&#39;s has_changed method there, just as in Sion&#39;s answer above. You arrive at something like this, drawing on Sion&#39;s example setting but using &quot;changed_data&quot; to get every possible change:\r\n\r\n    class ModelAdmin(admin.ModelAdmin):\r\n       fields=[&#39;name&#39;,&#39;mode&#39;]\r\n       def save_model(self, request, obj, form, change):\r\n         form.changed_data #output could be [&#39;name&#39;]\r\n         #do somethin the changed name value...\r\n         #call the super method\r\n         super(self,ModelAdmin).save_model(request, obj, form, change)\r\n    \r\n\r\n - Overwrite save_model:\r\n\r\nhttps://docs.djangoproject.com/en/1.10/ref/contrib/admin/#django.contrib.admin.ModelAdmin.save_model\r\n\r\n - Built-in changed_data-method for a Field:\r\n\r\nhttps://docs.djangoproject.com/en/1.10/ref/forms/api/#django.forms.Form.changed_data"}, {"tags": [], "down_vote_count": 0, "creation_date": 1484811421, "answer_id": 41736248, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1484811421, "body_markdown": "I am a bit late to the party but I found this solution also:\r\n[Django Dirty Fields][1]\r\n\r\n\r\n  [1]: http://code.activestate.com/pypm/django-dirtyfields/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1486418182, "answer_id": 42077958, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1486418182, "body_markdown": "A modification to @ivanperelivskiy&#39;s answer:\r\n\r\n    @property\r\n    def _dict(self):\r\n        ret = {}\r\n        for field in self._meta.get_fields():\r\n            if isinstance(field, ForeignObjectRel):\r\n                # foreign objects might not have corresponding objects in the database.\r\n                if hasattr(self, field.get_accessor_name()):\r\n                    ret[field.get_accessor_name()] = getattr(self, field.get_accessor_name())\r\n                else:\r\n                    ret[field.get_accessor_name()] = None\r\n            else:\r\n                ret[field.attname] = getattr(self, field.attname)\r\n        return ret\r\n\r\nThis uses django 1.10&#39;s public method `get_fields` instead. This makes the code more future proof, but more importantly also includes foreign keys and fields where editable=False.\r\n\r\nFor reference, here is the implementation of `.fields`\r\n\r\n    @cached_property\r\n    def fields(self):\r\n        &quot;&quot;&quot;\r\n        Returns a list of all forward fields on the model and its parents,\r\n        excluding ManyToManyFields.\r\n\r\n        Private API intended only to be used by Django itself; get_fields()\r\n        combined with filtering of field properties is the public API for\r\n        obtaining this field list.\r\n        &quot;&quot;&quot;\r\n        # For legacy reasons, the fields property should only contain forward\r\n        # fields that are not private or with a m2m cardinality. Therefore we\r\n        # pass these three filters as filters to the generator.\r\n        # The third lambda is a longwinded way of checking f.related_model - we don&#39;t\r\n        # use that property directly because related_model is a cached property,\r\n        # and all the models may not have been loaded yet; we don&#39;t want to cache\r\n        # the string reference to the related_model.\r\n        def is_not_an_m2m_field(f):\r\n            return not (f.is_relation and f.many_to_many)\r\n\r\n        def is_not_a_generic_relation(f):\r\n            return not (f.is_relation and f.one_to_many)\r\n\r\n        def is_not_a_generic_foreign_key(f):\r\n            return not (\r\n                f.is_relation and f.many_to_one and not (hasattr(f.remote_field, &#39;model&#39;) and f.remote_field.model)\r\n            )\r\n\r\n        return make_immutable_fields_list(\r\n            &quot;fields&quot;,\r\n            (f for f in self._get_fields(reverse=False)\r\n             if is_not_an_m2m_field(f) and is_not_a_generic_relation(f) and is_not_a_generic_foreign_key(f))\r\n        )\r\n"}], "title": "Django: When saving, how can you check if a field has changed?", "view_count": 101952, "answer_count": 21, "code_snippet": ["<code>class Alias(MyBaseModel):\n    remote_image = models.URLField(max_length=500, null=True, help_text=\"A URL that is downloaded and cached for the image. Only\n used when the alias is made\")\n    image = models.ImageField(upload_to='alias', default='alias-default.png', help_text=\"An image representing the alias\")\n\n\n    def save(self, *args, **kw):\n        if (not self.image or self.image.name == 'alias-default.png') and self.remote_image :\n            try :\n                data = utils.fetch(self.remote_image)\n                image = StringIO.StringIO(data)\n                image = Image.open(image)\n                buf = StringIO.StringIO()\n                image.save(buf, format='PNG')\n                self.image.save(hashlib.md5(self.string_id).hexdigest() + \".png\", ContentFile(buf.getvalue()))\n            except IOError :\n                pass\n</code>", "<code>remote_image</code>", "<code>remote_image</code>", "<code>__init__</code>", "<code>models.Model</code>", "<code>class Person(models.Model):\n  name = models.CharField()\n\n  __original_name = None\n\n  def __init__(self, *args, **kwargs):\n    super(Person, self).__init__(*args, **kwargs)\n    self.__original_name = self.name\n\n  def save(self, force_insert=False, force_update=False, *args, **kwargs):\n    if self.name != self.__original_name:\n      # name changed - do something here\n\n    super(Person, self).save(force_insert, force_update, *args, **kwargs)\n    self.__original_name = self.name\n</code>", "<code>from django.forms.models import model_to_dict\n\n\nclass ModelDiffMixin(object):\n    \"\"\"\n    A model mixin that tracks model fields' values and provide some useful api\n    to know what fields have been changed.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super(ModelDiffMixin, self).__init__(*args, **kwargs)\n        self.__initial = self._dict\n\n    @property\n    def diff(self):\n        d1 = self.__initial\n        d2 = self._dict\n        diffs = [(k, (v, d2[k])) for k, v in d1.items() if v != d2[k]]\n        return dict(diffs)\n\n    @property\n    def has_changed(self):\n        return bool(self.diff)\n\n    @property\n    def changed_fields(self):\n        return self.diff.keys()\n\n    def get_field_diff(self, field_name):\n        \"\"\"\n        Returns a diff for field if it's changed and None otherwise.\n        \"\"\"\n        return self.diff.get(field_name, None)\n\n    def save(self, *args, **kwargs):\n        \"\"\"\n        Saves model and set initial state.\n        \"\"\"\n        super(ModelDiffMixin, self).save(*args, **kwargs)\n        self.__initial = self._dict\n\n    @property\n    def _dict(self):\n        return model_to_dict(self, fields=[field.name for field in\n                             self._meta.fields])\n</code>", "<code>&gt;&gt;&gt; p = Place()\n&gt;&gt;&gt; p.has_changed\nFalse\n&gt;&gt;&gt; p.changed_fields\n[]\n&gt;&gt;&gt; p.rank = 42\n&gt;&gt;&gt; p.has_changed\nTrue\n&gt;&gt;&gt; p.changed_fields\n['rank']\n&gt;&gt;&gt; p.diff\n{'rank': (0, 42)}\n&gt;&gt;&gt; p.categories = [1, 3, 5]\n&gt;&gt;&gt; p.diff\n{'categories': (None, [1, 3, 5]), 'rank': (0, 42)}\n&gt;&gt;&gt; p.get_field_diff('categories')\n(None, [1, 3, 5])\n&gt;&gt;&gt; p.get_field_diff('rank')\n(0, 42)\n&gt;&gt;&gt;\n</code>", "<code>class MyModel(models.Model):\n    f1 = models.CharField(max_length=1)\n\n    def save(self, *args, **kw):\n        if self.pk is not None:\n            orig = MyModel.objects.get(pk=self.pk)\n            if orig.f1 != self.f1:\n                print 'f1 changed'\n        super(MyModel, self).save(*args, **kw)\n</code>", "<code>class MyModelForm(forms.ModelForm):\n\n    def clean(self):\n        cleaned_data = super(ProjectForm, self).clean()\n        #if self.has_changed():  # new instance or existing updated (form has data to save)\n        if self.instance.pk is not None:  # new instance only\n            if self.instance.f1 != cleaned_data['f1']:\n                print 'f1 changed'\n        return cleaned_data\n\n    class Meta:\n        model = MyModel\n        exclude = []\n</code>", "<code>pk is not None</code>", "<code>@transaction.atomic</code>", "<code>pre_save</code>", "<code>@receiver(pre_save, sender=MyModel)\ndef do_something_if_changed(sender, instance, **kwargs):\n    try:\n        obj = sender.objects.get(pk=instance.pk)\n    except sender.DoesNotExist:\n        pass # Object is new, so field hasn't technically changed, but you may want to do something else here.\n    else:\n        if not obj.some_field == instance.some_field: # Field has changed\n            # do something\n</code>", "<code>@classmethod\ndef from_db(cls, db, field_names, values):\n    new = super(Alias, cls).from_db(db, field_names, values)\n    # cache value went from the base\n    new._loaded_remote_image = values[field_names.index('remote_image')]\n    return new\n\ndef save(self, force_insert=False, force_update=False, using=None,\n         update_fields=None):\n    if (self._state.adding and self.remote_image) or \\\n        (not self._state.adding and self._loaded_remote_image != self.remote_image):\n        # If it is first save and there is no cached remote_image but there is new one, \n        # or the value of remote_image has changed - do your stuff!\n</code>", "<code>new._loaded_remote_image = new.remote_image</code>", "<code>from_db</code>", "<code>refresh_from_db</code>", "<code>__init__</code>", "<code>__init__</code>", "<code>from_db</code>", "<code>refresh_from_db</code>", "<code>save</code>", "<code>class AliasForm(ModelForm):\n\n    def save(self, commit=True):\n        if 'remote_image' in self.changed_data:\n            # do things\n            remote_image = self.cleaned_data['remote_image']\n            do_things(remote_image)\n        super(AliasForm, self).save(commit)\n\n    class Meta:\n        model = Alias\n</code>", "<code>from_db</code>", "<code>remote_image</code>", "<code>remote_image</code>", "<code>remote_image</code>", "<code>pre_save()</code>", "<code>class PDFField(FileField):\n    def pre_save(self, model_instance, add):\n        # do some operations on your file \n        # if and only if you have changed the filefield\n</code>", "<code>from django.dispatch import receiver\nfrom django_model_changes import ChangesMixin\n\nclass Alias(ChangesMixin, MyBaseModel):\n   # your model\n\n@receiver(pre_save, sender=Alias)\ndef do_something_if_changed(sender, instance, **kwargs):\n    if 'remote_image' in instance.changes():\n        # do something\n</code>", "<code>class Person(models.Model):\n  name = models.CharField()\n\ndef __init__(self, *args, **kwargs):\n    super(Person, self).__init__(*args, **kwargs)\n    self._original_fields = dict([(field.attname, getattr(self, field.attname))\n        for field in self._meta.local_fields if not isinstance(field, models.ForeignKey)])\n\ndef save(self, *args, **kwargs):\n  if self.id:\n    for field in self._meta.local_fields:\n      if not isinstance(field, models.ForeignKey) and\\\n        self._original_fields[field.name] != getattr(self, field.name):\n        # Do Something    \n  super(Person, self).save(*args, **kwargs)\n</code>", "<code>person.name</code>", "<code>getattr(person, \"name\")</code>", "<code>def clean(self):\n    if self.cleaned_data['name'] != self.initial['name']:\n        # Do something\n</code>", "<code>class ModelAdmin(admin.ModelAdmin):\n   fields=['name','mode']\n   def save_model(self, request, obj, form, change):\n     form.changed_data #output could be ['name']\n     #do somethin the changed name value...\n     #call the super method\n     super(self,ModelAdmin).save_model(request, obj, form, change)\n</code>", "<code>def save(self, *args, **kw):\n    from django.core.files.uploadedfile import UploadedFile\n    if hasattr(self.image, 'file') and isinstance(self.image.file, UploadedFile) :\n        # Handle FileFields as special cases, because the uploaded filename could be\n        # the same as the filename that's already there even though there may\n        # be different file contents.\n\n        # if a file was just uploaded, the storage model with be UploadedFile\n        # Do new file stuff here\n        pass\n</code>", "<code>class ModelDiffMixin(models.Model):\n    \"\"\"\n    A model mixin that tracks model fields' values and provide some useful api\n    to know what fields have been changed.\n    \"\"\"\n    _dict = DictField(editable=False)\n    def __init__(self, *args, **kwargs):\n        super(ModelDiffMixin, self).__init__(*args, **kwargs)\n        self._initial = self._dict\n\n    @property\n    def diff(self):\n        d1 = self._initial\n        d2 = self._dict\n        diffs = [(k, (v, d2[k])) for k, v in d1.items() if v != d2[k]]\n        return dict(diffs)\n\n    @property\n    def has_changed(self):\n        return bool(self.diff)\n\n    @property\n    def changed_fields(self):\n        return self.diff.keys()\n\n    def get_field_diff(self, field_name):\n        \"\"\"\n        Returns a diff for field if it's changed and None otherwise.\n        \"\"\"\n        return self.diff.get(field_name, None)\n\n    def save(self, *args, **kwargs):\n        \"\"\"\n        Saves model and set initial state.\n        \"\"\"\n        object_dict = model_to_dict(self,\n               fields=[field.name for field in self._meta.fields])\n        for field in object_dict:\n            # for FileFields\n            if issubclass(object_dict[field].__class__, FieldFile):\n                try:\n                    object_dict[field] = object_dict[field].path\n                except :\n                    object_dict[field] = object_dict[field].name\n\n            # TODO: add other non-serializable field types\n        self._dict = object_dict\n        super(ModelDiffMixin, self).save(*args, **kwargs)\n\n    class Meta:\n        abstract = True\n</code>", "<code>class DictField(models.TextField):\n    __metaclass__ = models.SubfieldBase\n    description = \"Stores a python dict\"\n\n    def __init__(self, *args, **kwargs):\n        super(DictField, self).__init__(*args, **kwargs)\n\n    def to_python(self, value):\n        if not value:\n            value = {}\n\n        if isinstance(value, dict):\n            return value\n\n        return json.loads(value)\n\n    def get_prep_value(self, value):\n        if value is None:\n            return value\n        return json.dumps(value)\n\n    def value_to_string(self, obj):\n        value = self._get_val_from_obj(obj)\n        return self.get_db_prep_value(value)\n</code>", "<code>class Station(ModelDiffMixin.ModelDiffMixin, models.Model):\n    station_name = models.CharField(max_length=200)\n    nearby_city = models.CharField(max_length=200)\n\n    precipitation = models.DecimalField(max_digits=5, decimal_places=2)\n    # &lt;list of many other fields&gt;\n\n   def is_float_changed (self,v1, v2):\n        ''' Compare two floating values to just two digit precision\n        Override Default precision is 5 digits\n        '''\n        return abs (round (v1 - v2, 2)) &gt; 0.01\n</code>", "<code>class UpdateWeather (object)\n    # other methods omitted\n\n    def update_stations (self, filename):\n        # read all existing data \n        all_stations = models.Station.objects.all()\n        self._existing_stations = {}\n\n        # insert into a collection for referencing while we check if data exists\n        for stn in all_stations.iterator():\n            self._existing_stations[stn.id] = stn\n\n        # read the file. result is array of objects in known column order\n        data = read_tabbed_file(filename)\n\n        # iterate rows from file and insert or update where needed\n        for rownum in range(sh.nrows):\n            self._update_row(sh.row(rownum));\n\n        # now anything remaining in the collection is no longer active\n        # since it was not found in the newest file\n        # for now, delete that record\n        # there should never be any of these if the file was created properly\n        for stn in self._existing_stations.values():\n            stn.delete()\n            self._num_deleted = self._num_deleted+1\n\n\n    def _update_row (self, rowdata):\n        stnid = int(rowdata[0].value) \n        name = rowdata[1].value.strip()\n\n        # skip the blank names where data source has ids with no data today\n        if len(name) &lt; 1:\n            return\n\n        # fetch rest of fields and do sanity test\n        nearby_city = rowdata[2].value.strip()\n        precip = rowdata[3].value\n\n        if stnid in self._existing_stations:\n            stn = self._existing_stations[stnid]\n            del self._existing_stations[stnid]\n            is_update = True;\n        else:\n            stn = models.Station()\n            is_update = False;\n\n        # object is new or old, don't care here            \n        stn.id = stnid\n        stn.station_name = name;\n        stn.nearby_city = nearby_city\n        stn.precipitation = precip\n\n        # many other fields updated from the file \n\n        if is_update == True:\n\n            # we use a model mixin to simplify detection of changes\n            # at the cost of extra memory to store the objects            \n            if stn.has_changed == True:\n                self._num_updated = self._num_updated + 1;\n                stn.save();\n        else:\n            self._num_created = self._num_created + 1;\n            stn.save()\n</code>", "<code>@track_data('name')\nclass Mode(models.Model):\n    name = models.CharField(max_length=5)\n    mode = models.CharField(max_length=5)\n\n    def save(self, *args, **kwargs):\n        if self.has_changed('name'):\n            print 'name changed'\n\n    # OR #\n\n    @classmethod\n    def post_save(cls, sender, instance, created, **kwargs):\n        if instance.has_changed('name'):\n            print \"Hooray!\"\n</code>", "<code>@property\ndef _dict(self):\n    ret = {}\n    for field in self._meta.get_fields():\n        if isinstance(field, ForeignObjectRel):\n            # foreign objects might not have corresponding objects in the database.\n            if hasattr(self, field.get_accessor_name()):\n                ret[field.get_accessor_name()] = getattr(self, field.get_accessor_name())\n            else:\n                ret[field.get_accessor_name()] = None\n        else:\n            ret[field.attname] = getattr(self, field.attname)\n    return ret\n</code>", "<code>get_fields</code>", "<code>.fields</code>", "<code>@cached_property\ndef fields(self):\n    \"\"\"\n    Returns a list of all forward fields on the model and its parents,\n    excluding ManyToManyFields.\n\n    Private API intended only to be used by Django itself; get_fields()\n    combined with filtering of field properties is the public API for\n    obtaining this field list.\n    \"\"\"\n    # For legacy reasons, the fields property should only contain forward\n    # fields that are not private or with a m2m cardinality. Therefore we\n    # pass these three filters as filters to the generator.\n    # The third lambda is a longwinded way of checking f.related_model - we don't\n    # use that property directly because related_model is a cached property,\n    # and all the models may not have been loaded yet; we don't want to cache\n    # the string reference to the related_model.\n    def is_not_an_m2m_field(f):\n        return not (f.is_relation and f.many_to_many)\n\n    def is_not_a_generic_relation(f):\n        return not (f.is_relation and f.one_to_many)\n\n    def is_not_a_generic_foreign_key(f):\n        return not (\n            f.is_relation and f.many_to_one and not (hasattr(f.remote_field, 'model') and f.remote_field.model)\n        )\n\n    return make_immutable_fields_list(\n        \"fields\",\n        (f for f in self._get_fields(reverse=False)\n         if is_not_an_m2m_field(f) and is_not_a_generic_relation(f) and is_not_a_generic_foreign_key(f))\n    )\n</code>"], "path": "stack.django"}, {"tags": ["linux", "gnu-screen"], "creation_date": 1296448874, "body_markdown": "I `screen -r`&#39;d into a django server that&#39;s running and I can&#39;t simply `Ctrl-C` and `exit` out of it. \r\n\r\nAre there any alternative ways to get out of `screen`?\r\n\r\nCurrently, I manually close the tab on my local PC and `ssh` back in, but that&#39;s becoming tiresome.", "last_edit_date": 1320870187, "up_vote_count": 218, "link": "https://stackoverflow.com/questions/4847691/how-do-i-get-out-of-a-screen-without-typing-exit", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1296449062, "answer_id": 4847705, "path": "stack.django.answer", "score": 408, "up_vote_count": 408, "is_accepted": true, "last_activity_date": 1296449062, "body_markdown": "&lt;kbd&gt;Ctrl-a&lt;/kbd&gt; &lt;kbd&gt;d&lt;/kbd&gt; or &lt;kbd&gt;Ctrl-a&lt;/kbd&gt; &lt;kbd&gt;Ctrl-d&lt;/kbd&gt;.  See the [screen manual # Detach](http://www.gnu.org/software/screen/manual/screen.html#Detach)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1296449078, "answer_id": 4847709, "path": "stack.django.answer", "score": 71, "up_vote_count": 71, "is_accepted": false, "last_activity_date": 1439353770, "last_edit_date": 1439353770, "body_markdown": " - &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;A&lt;/kbd&gt; then &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;D&lt;/kbd&gt;. Doing this will detach you from the `screen` session which you can later resume by doing `screen -r`.\r\n\r\n - You can also do: &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;A&lt;/kbd&gt; then type &lt;kbd&gt;:&lt;/kbd&gt;, this will put you in screen command mode. Type the command `detach` to be detached from the running screen session."}, {"tags": [], "down_vote_count": 0, "creation_date": 1443442917, "answer_id": 32822886, "path": "stack.django.answer", "score": 60, "up_vote_count": 60, "is_accepted": false, "last_activity_date": 1443442917, "body_markdown": "- &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;a&lt;/kbd&gt;+&lt;kbd&gt;\\&lt;/kbd&gt; - Exit screen and terminate all programs in this screen. It is helpful, for example, if you need to close tty connection.\r\n- &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;a&lt;/kbd&gt;+&lt;kbd&gt;d&lt;/kbd&gt; - &quot;minimize&quot; screen, `screen -r` to restore it."}], "title": "How do I get out of a screen without typing &#39;exit&#39;?", "view_count": 255135, "answer_count": 3, "code_snippet": ["<code>screen -r</code>", "<code>Ctrl-C</code>", "<code>exit</code>", "<code>screen</code>", "<code>ssh</code>", "<code>man screen</code>", "<code>man</code>", "<code>man command_name</code>", "<code>man screen</code>", "<code>--help</code>", "<code>command_name --help</code>", "<code>screen --help</code>", "<code>tmux --help</code>", "<code>screen</code>", "<code>screen -r</code>", "<code>detach</code>", "<code>screen -r</code>"], "path": "stack.django"}, {"tags": ["python", "capitalization", "capitalize"], "creation_date": 1255226634, "body_markdown": "    s = &#39;the brown fox&#39;\r\n\r\n...do something here...\r\n\r\n`s` should be :\r\n\r\n    &#39;The Brown Fox&#39;\r\n\r\nWhat&#39;s the easiest way to do this?\r\n", "last_edit_date": 1429662241, "up_vote_count": 387, "link": "https://stackoverflow.com/questions/1549641/how-to-capitalize-the-first-letter-of-each-word-in-a-string-python", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1255226675, "answer_id": 1549644, "path": "stack.django.answer", "score": 658, "up_vote_count": 659, "is_accepted": true, "last_activity_date": 1255268701, "last_edit_date": 1255268701, "body_markdown": "The [`.title()`][1] method of a string (either ASCII or Unicode is fine) does this:\r\n\r\n    &gt;&gt;&gt; &quot;hello world&quot;.title()\r\n    &#39;Hello World&#39;\r\n    &gt;&gt;&gt; u&quot;hello world&quot;.title()\r\n    u&#39;Hello World&#39;\r\n\r\nHowever, look out for strings with embedded apostrophes, as noted in the docs.\r\n\r\n&gt; The algorithm uses a simple language-independent definition of a word as groups of consecutive letters. The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result:\r\n\r\n&gt;     &gt;&gt;&gt; &quot;they&#39;re bill&#39;s friends from the UK&quot;.title()\r\n&gt;     &quot;They&#39;Re Bill&#39;S Friends From The Uk&quot;\r\n\r\n\r\n  [1]: http://docs.python.org/library/stdtypes.html#str.title\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1255241051, "answer_id": 1549983, "path": "stack.django.answer", "score": 76, "up_vote_count": 77, "is_accepted": false, "last_activity_date": 1354515930, "last_edit_date": 1354515930, "body_markdown": "Just because this sort of thing is fun for me, here are two more solutions.\r\n\r\nSplit into words, initial-cap each word from the split groups, and rejoin.  This will change the white space separating the words into a single white space, no matter what it was.\r\n\r\n    s = &#39;the brown fox&#39;\r\n    lst = [word[0].upper() + word[1:] for word in s.split()]\r\n    s = &quot; &quot;.join(lst)\r\n\r\n---\r\nEDIT: I don&#39;t remember what I was thinking back when I wrote the above code, but there is no need to build an explicit list; we can use a generator expression to do it in lazy fashion.  So here is a better solution:\r\n\r\n    s = &#39;the brown fox&#39;\r\n    s = &#39; &#39;.join(word[0].upper() + word[1:] for word in s.split())\r\n\r\n---\r\n\r\n\r\n\r\nUse a regular expression to match the beginning of the string, or white space separating words, plus a single non-whitespace character; use parentheses to mark &quot;match groups&quot;.  Write a function that takes a match object, and returns the white space match group unchanged and the non-whitespace character match group in upper case.  Then use `re.sub()` to replace the patterns.  This one does not have the punctuation problems of the first solution, nor does it redo the white space like my first solution.  This one produces the best result.\r\n\r\n    import re\r\n    s = &#39;the brown fox&#39;\r\n    \r\n    def repl_func(m):\r\n        &quot;&quot;&quot;process regular expression match groups for word upper-casing problem&quot;&quot;&quot;\r\n        return m.group(1) + m.group(2).upper()\r\n    \r\n    s = re.sub(&quot;(^|\\s)(\\S)&quot;, repl_func, s)\r\n\r\n\r\n    &gt;&gt;&gt; re.sub(&quot;(^|\\s)(\\S)&quot;, repl_func, s)\r\n    &quot;They&#39;re Bill&#39;s Friends From The UK&quot;\r\n\r\nI&#39;m glad I researched this answer.  I had no idea that `re.sub()` could take a function!  You can do nontrivial processing inside `re.sub()` to produce the final result!\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1255241141, "answer_id": 1549985, "path": "stack.django.answer", "score": 10, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1255241141, "body_markdown": "If str.title() doesn&#39;t work for you, do the capitalization yourself.\r\n\r\n 1. Split the string into a list of words\r\n 2. Capitalize the first letter of each word\r\n 3. Join the words into a single string\r\n\r\nOne-liner:\r\n\r\n    &gt;&gt;&gt; &#39; &#39;.join([s[0].upper() + s[1:] for s in &quot;they&#39;re bill&#39;s friends from the UK&quot;.split(&#39; &#39;)])\r\n    &quot;They&#39;re Bill&#39;s Friends From The UK&quot;\r\n\r\nClear example:\r\n\r\n    input = &quot;they&#39;re bill&#39;s friends from the UK&quot;\r\n    words = input.split(&#39; &#39;)\r\n    capitalized_words = []\r\n    for word in words:\r\n        title_case_word = word[0].upper() + word[1:]\r\n        capitalized_words.append(title_case_word)\r\n    output = &#39; &#39;.join(capitalized_words)\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1333550831, "answer_id": 10013565, "path": "stack.django.answer", "score": 12, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1510478627, "last_edit_date": 1510478627, "body_markdown": "Copy-paste-ready version of @jibberia anwser:\r\n\r\n    def capitalize(line):\r\n        return &#39; &#39;.join(s[:1].upper() + s[1:] for s in line.split(&#39; &#39;))"}, {"tags": [], "down_vote_count": 0, "creation_date": 1347170616, "answer_id": 12336911, "path": "stack.django.answer", "score": 133, "up_vote_count": 133, "is_accepted": false, "last_activity_date": 1433870258, "last_edit_date": 1433870258, "body_markdown": "the &#39;title&#39; method can&#39;t work well, \r\n\r\n    &gt;&gt;&gt; &quot;they&#39;re bill&#39;s friends from the UK&quot;.title()\r\n    &quot;They&#39;Re Bill&#39;S Friends From The Uk&quot;\r\n\r\nTry string.capwords, \r\n\r\n    import string\r\n    string.capwords(&quot;they&#39;re bill&#39;s friends from the UK&quot;)\r\n    &gt;&gt;&gt;&quot;They&#39;re Bill&#39;s Friends From The Uk&quot;\r\n\r\nFrom the [python docs on capwords](https://docs.python.org/2/library/string.html#string.capwords):\r\n\r\n&gt; Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join(). If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words.\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1384115950, "answer_id": 19894900, "path": "stack.django.answer", "score": -2, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1478860917, "last_edit_date": 1478860917, "body_markdown": "I really like this answer:\r\n\r\nCopy-paste-ready version of @jibberia anwser:\r\n \r\n\r\n    def capitalize(line):\r\n        return &#39; &#39;.join([s[0].upper() + s[1:] for s in line.split(&#39; &#39;)])\r\n\r\n\r\nBut some of the lines that I was sending split off some blank &#39;&#39; characters that caused errors when trying to do s[1:].  There is probably a better way to do this, but I had to add in a if len(s)&gt;0, as in\r\n\r\n    return &#39; &#39;.join([s[0].upper() + s[1:] for s in line.split(&#39; &#39;) if len(s)&gt;0])\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1391003278, "answer_id": 21432975, "path": "stack.django.answer", "score": 2, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1515317617, "last_edit_date": 1515317617, "body_markdown": "To capitalize words...\r\n\r\n\r\n    str = &quot;this is string example....  wow!!!&quot;;\r\n    print &quot;str.title() : &quot;, str.title();\r\n\r\n\r\n\r\n@Gary02127 comment, below solution work  title with apostrophe \r\n\r\n    import re\r\n    \r\n    def titlecase(s):\r\n        return re.sub(r&quot;[A-Za-z]+(&#39;[A-Za-z]+)?&quot;, lambda mo: mo.group(0)[0].upper() + mo.group(0)[1:].lower(), s)\r\n    \r\n    text = &quot;He&#39;s an engineer, isn&#39;t he? SnippetBucket.com &quot;\r\n    print(titlecase(text))\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1394975089, "answer_id": 22437210, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1394975089, "body_markdown": "As Mark pointed out you should use [`.title()`][1]:\r\n\r\n    &quot;MyAwesomeString&quot;.title()\r\n\r\nHowever, if would like to make the first letter uppercase **inside a django template**, you could use this:\r\n\r\n    {{ &quot;MyAwesomeString&quot;|title }}\r\n\r\nor using a variable:\r\n\r\n    {{ myvar|title }}\r\n\r\n  [1]: http://docs.python.org/2/library/stdtypes.html#str.title"}, {"tags": [], "down_vote_count": 4, "creation_date": 1409307226, "answer_id": 25566187, "path": "stack.django.answer", "score": 9, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1409411751, "last_edit_date": 1409411751, "body_markdown": "Why do you complicate your life with joins and for loops when the solution is simple and safe??\r\n\r\nJust do this:\r\n\r\n    string = &quot;the brown fox&quot;\r\n    string[0].upper()+string[1:]"}, {"tags": [], "down_vote_count": 0, "creation_date": 1478887037, "answer_id": 40553628, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1478887037, "body_markdown": "The suggested method str.title() does not work in all cases.\r\nFor example:\r\n\r\n    string = &quot;a b 3c&quot;\r\n    string.title()\r\n    &gt; &quot;A B 3C&quot;\r\ninstead of `&quot;A B 3c&quot;`. \r\n\r\nI think, it is better to do something like this:\r\n\r\n    def capitalize_words(string):\r\n        words = string.split()\r\n        return &#39; &#39;.join([word.capitalize() for word in words])\r\n\r\n    capitalize_words(string)\r\n    &gt;&#39;A B 3c&#39;\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1488259743, "answer_id": 42500863, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1515362632, "last_edit_date": 1515362632, "body_markdown": "**Here&#39;s a summary of different ways to do it:**\r\n\r\nThe simplest solution is to split the sentence into words and capitalize the first letter then join it back together.\r\n \r\n    # Be careful with multiple spaces, and empty strings\r\n    # for empty words w[0] would cause an index error, \r\n    # but with w[:1] we get an empty string as desired\r\n    def cap_sentence(s):\r\n      return &#39; &#39;.join(w[:1].upper() + w[1:] for w in s.split(&#39; &#39;)) \r\n\r\nIf you don&#39;t want to split the input string into words first, and using fancy generators:\r\n\r\n    # Iterate through each of the characters in the string and capitalize \r\n    # the first char and any char after a blank space\r\n    from itertools import chain \r\n    def cap_sentence(s):\r\n      return &#39;&#39;.join( (c.upper() if prev == &#39; &#39; else c) for c, prev in zip(s, chain(&#39; &#39;, s)) )\r\n\r\nor without importing itertools\r\n\r\n    def cap_sentence(s):\r\n      return &#39;&#39;.join( (c.upper() if i == 0 or s[i-1] == &#39; &#39; else c) for i, c in enumerate(s) )\r\n\r\nor you can use regular expressions, from [steveha&#39;s answer][1] \r\n\r\n    # match the beginning of the string or a space, followed by a non-space\r\n    import re\r\n    def cap_sentence(s):\r\n      return re.sub(&quot;(^|\\s)(\\S)&quot;, lambda m: m.group(1) + m.group(2).upper(), s)\r\n\r\n**These will work for all these inputs:**\r\n\r\n    &quot;&quot;           =&gt; &quot;&quot;       \r\n    &quot;a b c&quot;      =&gt; &quot;A B C&quot;             \r\n    &quot;foO baR&quot;    =&gt; &quot;FoO BaR&quot;      \r\n    &quot;foo    bar&quot; =&gt; &quot;Foo    Bar&quot;   \r\n    &quot;foo&#39;s bar&quot;  =&gt; &quot;Foo&#39;s Bar&quot;    \r\n    &quot;foo&#39;s1bar&quot;  =&gt; &quot;Foo&#39;s1bar&quot;    \r\n    &quot;foo 1bar&quot;   =&gt; &quot;Foo 1bar&quot;     \r\n\r\n\r\n_________________________________\r\n\r\nNow, these are some **other answers** that were posted, and inputs for which they don&#39;t work as expected if we are using the definition of a word being the start of the sentence or anything after a blank space:\r\n\r\n      return s.title()\r\n\r\n    # Undesired outputs: \r\n    &quot;foO baR&quot;    =&gt; &quot;Foo Bar&quot;\t\t\r\n    &quot;foo&#39;s bar&quot;  =&gt; &quot;Foo&#39;S Bar&quot;\t\r\n    &quot;foo&#39;s1bar&quot;  =&gt; &quot;Foo&#39;S1Bar&quot;\t\t\r\n    &quot;foo 1bar&quot;   =&gt; &quot;Foo 1Bar&quot;\t\t\r\n\r\n_________________________________\r\n\r\n\r\n      return &#39; &#39;.join(w.capitalize() for w in s.split())    \r\n      # or\r\n      import string\r\n      return string.capwords(s)\r\n\r\n    # Undesired outputs:\r\n    &quot;foO baR&quot;    =&gt; &quot;Foo Bar&quot;      \r\n    &quot;foo    bar&quot; =&gt; &quot;Foo Bar&quot;      \r\nusing &#39; &#39; for the split will fix the second output, but capwords() still won&#39;t work for the first\r\n\r\n      return &#39; &#39;.join(w.capitalize() for w in s.split(&#39; &#39;))    \r\n      # or\r\n      import string\r\n      return string.capwords(s, &#39; &#39;)\r\n\r\n    # Undesired outputs:\r\n    &quot;foO baR&quot;    =&gt; &quot;Foo Bar&quot;      \r\n\r\n_________________________________\r\nBe careful with multiple blank spaces\r\n\r\n      return &#39; &#39;.join(w[0].upper() + w[1:] for w in s.split())\r\n    # Undesired outputs:\r\n    &quot;foo    bar&quot; =&gt; &quot;Foo Bar&quot;                 \r\n\r\n\r\n  [1]: https://stackoverflow.com/a/1549983/3577695"}, {"tags": [], "down_vote_count": 0, "creation_date": 1495025697, "answer_id": 44025491, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1515600875, "last_edit_date": 1515600875, "body_markdown": " An empty string will raise an Error if you access [1:], therefore I would use:\r\n\r\n    def my_uppercase(title):\r\n        if not title:\r\n           return &#39;&#39;\r\n        return title[0].upper() + title[1:]\r\n\r\nto uppercase the first letter only.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1511560454, "answer_id": 47480453, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1514668116, "last_edit_date": 1514668116, "body_markdown": "Don&#39;t overlook the preservation of white space. If you want to process `&#39;fred   flinstone&#39;` and you get `&#39;Fred Flinstone&#39;` instead of `&#39;Fred   Flinstone&#39;`, you&#39;ve corrupted your white space. Some of the above solutions will lose white space.  Here&#39;s a solution that&#39;s good for Python 2 and 3 and preserves white space.\r\n\r\n    def propercase(s):\r\n        return &#39;&#39;.join(map(&#39;&#39;.capitalize, re.split(r&#39;(\\s+)&#39;, s)))\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1517778678, "answer_id": 48613052, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1517778678, "body_markdown": "If only you want the first letter:\r\n&#39;hello world&#39;.capitalize()\r\nOutput:\r\nHello world\r\n\r\nBut to capitalize each word:\r\n&#39;hello world&#39;.title()\r\nOutput:\r\nHello world\r\n\r\n"}], "title": "How to capitalize the first letter of each word in a string (Python)?", "view_count": 336696, "answer_count": 14, "code_snippet": ["<code>s = 'the brown fox'\n</code>", "<code>s</code>", "<code>'The Brown Fox'\n</code>", "<code>.title()</code>", "<code>&gt;&gt;&gt; \"hello world\".title()\n'Hello World'\n&gt;&gt;&gt; u\"hello world\".title()\nu'Hello World'\n</code>", "<code>&gt;&gt;&gt; \"they're bill's friends from the UK\".title()\n\"They'Re Bill'S Friends From The Uk\"\n</code>", "<code>str.title()</code>", "<code>string.title()</code>", "<code>unicode.title()</code>", "<code>\" \".join(w.capitalize() for w in s.split())</code>", "<code>\"e g 3b\"</code>", "<code>\"E G 3b\"</code>", "<code>\"e g 3b\".title()</code>", "<code>\"E G 3B\"</code>", "<code>In [2]: 'tEst'.title() Out[2]: 'Test' </code>", "<code>&gt;&gt;&gt; \"they're bill's friends from the UK\".title()\n\"They'Re Bill'S Friends From The Uk\"\n</code>", "<code>import string\nstring.capwords(\"they're bill's friends from the UK\")\n&gt;&gt;&gt;\"They're Bill's Friends From The Uk\"\n</code>", "<code>\"There once was a string with an 'that had words right after it and then closed'\"</code>", "<code>that</code>", "<code>\"There Once Was A String With An 'that Had Words Right After It And Then Closed'\"</code>", "<code>title()</code>", "<code>title()</code>", "<code>capwords()</code>", "<code>title()</code>", "<code>s = 'the brown fox'\nlst = [word[0].upper() + word[1:] for word in s.split()]\ns = \" \".join(lst)\n</code>", "<code>s = 'the brown fox'\ns = ' '.join(word[0].upper() + word[1:] for word in s.split())\n</code>", "<code>re.sub()</code>", "<code>import re\ns = 'the brown fox'\n\ndef repl_func(m):\n    \"\"\"process regular expression match groups for word upper-casing problem\"\"\"\n    return m.group(1) + m.group(2).upper()\n\ns = re.sub(\"(^|\\s)(\\S)\", repl_func, s)\n\n\n&gt;&gt;&gt; re.sub(\"(^|\\s)(\\S)\", repl_func, s)\n\"They're Bill's Friends From The UK\"\n</code>", "<code>re.sub()</code>", "<code>re.sub()</code>", "<code>title()</code>", "<code>def capitalize(line):\n    return ' '.join(s[:1].upper() + s[1:] for s in line.split(' '))\n</code>", "<code>str.join</code>", "<code>join</code>", "<code>str.join</code>", "<code>join</code>", "<code>&gt;&gt;&gt; ' '.join([s[0].upper() + s[1:] for s in \"they're bill's friends from the UK\".split(' ')])\n\"They're Bill's Friends From The UK\"\n</code>", "<code>input = \"they're bill's friends from the UK\"\nwords = input.split(' ')\ncapitalized_words = []\nfor word in words:\n    title_case_word = word[0].upper() + word[1:]\n    capitalized_words.append(title_case_word)\noutput = ' '.join(capitalized_words)\n</code>", "<code># Be careful with multiple spaces, and empty strings\n# for empty words w[0] would cause an index error, \n# but with w[:1] we get an empty string as desired\ndef cap_sentence(s):\n  return ' '.join(w[:1].upper() + w[1:] for w in s.split(' ')) \n</code>", "<code># Iterate through each of the characters in the string and capitalize \n# the first char and any char after a blank space\nfrom itertools import chain \ndef cap_sentence(s):\n  return ''.join( (c.upper() if prev == ' ' else c) for c, prev in zip(s, chain(' ', s)) )\n</code>", "<code>def cap_sentence(s):\n  return ''.join( (c.upper() if i == 0 or s[i-1] == ' ' else c) for i, c in enumerate(s) )\n</code>", "<code># match the beginning of the string or a space, followed by a non-space\nimport re\ndef cap_sentence(s):\n  return re.sub(\"(^|\\s)(\\S)\", lambda m: m.group(1) + m.group(2).upper(), s)\n</code>", "<code>\"\"           =&gt; \"\"       \n\"a b c\"      =&gt; \"A B C\"             \n\"foO baR\"    =&gt; \"FoO BaR\"      \n\"foo    bar\" =&gt; \"Foo    Bar\"   \n\"foo's bar\"  =&gt; \"Foo's Bar\"    \n\"foo's1bar\"  =&gt; \"Foo's1bar\"    \n\"foo 1bar\"   =&gt; \"Foo 1bar\"     \n</code>", "<code>  return s.title()\n\n# Undesired outputs: \n\"foO baR\"    =&gt; \"Foo Bar\"       \n\"foo's bar\"  =&gt; \"Foo'S Bar\" \n\"foo's1bar\"  =&gt; \"Foo'S1Bar\"     \n\"foo 1bar\"   =&gt; \"Foo 1Bar\"      \n</code>", "<code>  return ' '.join(w.capitalize() for w in s.split())    \n  # or\n  import string\n  return string.capwords(s)\n\n# Undesired outputs:\n\"foO baR\"    =&gt; \"Foo Bar\"      \n\"foo    bar\" =&gt; \"Foo Bar\"      \n</code>", "<code>  return ' '.join(w.capitalize() for w in s.split(' '))    \n  # or\n  import string\n  return string.capwords(s, ' ')\n\n# Undesired outputs:\n\"foO baR\"    =&gt; \"Foo Bar\"      \n</code>", "<code>  return ' '.join(w[0].upper() + w[1:] for w in s.split())\n# Undesired outputs:\n\"foo    bar\" =&gt; \"Foo Bar\"                 \n</code>", "<code>lower 123 upper</code>", "<code>lower 123 Upper</code>", "<code>upper</code>", "<code>\"([0-9]+)(\\s+.)\"</code>", "<code>\"(^|\\s)(\\S)\"</code>", "<code>\"([0-9]+)(\\s*.)\"</code>", "<code>WW1 - the great war</code>", "<code>WW1 - The Great War</code>", "<code>Ww1 ...</code>", "<code>WW1</code>", "<code>WW1</code>", "<code>string = \"the brown fox\"\nstring[0].upper()+string[1:]\n</code>", "<code>\"the brown fox\".capitalize()</code>", "<code>'this is John'</code>", "<code>'This is john'</code>", "<code>def my_uppercase(title):\n    if not title:\n       return ''\n    return title[0].upper() + title[1:]\n</code>", "<code>str.capitalize</code>", "<code>return title[:1].upper() + title[1:]</code>", "<code>.title()</code>", "<code>\"MyAwesomeString\".title()\n</code>", "<code>{{ \"MyAwesomeString\"|title }}\n</code>", "<code>{{ myvar|title }}\n</code>", "<code>string = \"a b 3c\"\nstring.title()\n&gt; \"A B 3C\"\n</code>", "<code>\"A B 3c\"</code>", "<code>def capitalize_words(string):\n    words = string.split()\n    return ' '.join([word.capitalize() for word in words])\n\ncapitalize_words(string)\n&gt;'A B 3c'\n</code>", "<code>str = \"this is string example....  wow!!!\";\nprint \"str.title() : \", str.title();\n</code>", "<code>import re\n\ndef titlecase(s):\n    return re.sub(r\"[A-Za-z]+('[A-Za-z]+)?\", lambda mo: mo.group(0)[0].upper() + mo.group(0)[1:].lower(), s)\n\ntext = \"He's an engineer, isn't he? SnippetBucket.com \"\nprint(titlecase(text))\n</code>", "<code>'fred   flinstone'</code>", "<code>'Fred Flinstone'</code>", "<code>'Fred   Flinstone'</code>", "<code>def propercase(s):\n    return ''.join(map(''.capitalize, re.split(r'(\\s+)', s)))\n</code>", "<code>def capitalize(line):\n    return ' '.join([s[0].upper() + s[1:] for s in line.split(' ')])\n</code>", "<code>return ' '.join([s[0].upper() + s[1:] for s in line.split(' ') if len(s)&gt;0])\n</code>"], "path": "stack.django"}, {"tags": ["mysql", "sql", "django"], "creation_date": 1363701838, "body_markdown": "Is it possible to temporarily disable constraints in MySQL?\r\n\r\nI have two Django models, each with a ForeignKey to the other one. Deleting instances of a model returns an error because of the ForeignKey constraint:\r\n\r\n    cursor.execute(&quot;DELETE FROM myapp_item WHERE n = %s&quot;, n)\r\n    transaction.commit_unless_managed()  #a foreign key constraint fails here\r\n\r\n    cursor.execute(&quot;DELETE FROM myapp_style WHERE n = %s&quot;, n)\r\n    transaction.commit_unless_managed()\r\n\r\n\r\nIs it possible to temporarily disable constraints and delete anyway?", "last_edit_date": 1389466229, "up_vote_count": 389, "link": "https://stackoverflow.com/questions/15501673/how-to-temporarily-disable-a-foreign-key-constraint-in-mysql", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1363702065, "answer_id": 15501754, "path": "stack.django.answer", "score": 914, "up_vote_count": 915, "is_accepted": true, "last_activity_date": 1363702788, "last_edit_date": 1363702788, "body_markdown": "Try `DISABLE KEYS` or    \r\n\r\n\r\n    SET FOREIGN_KEY_CHECKS=0;\r\n\r\nmake sure to\r\n\r\n    SET FOREIGN_KEY_CHECKS=1;\r\n\r\nafter.\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1363703609, "answer_id": 15502333, "path": "stack.django.answer", "score": 21, "up_vote_count": 23, "is_accepted": false, "last_activity_date": 1363703609, "body_markdown": "Instead of disabling your constraint, permanently modify it to ON DELETE SET NULL. That will accomplish a similar thing and you wouldn&#39;t have to turn key checking on and off. Like so:\r\n\r\n    ALTER TABLE tablename1 DROP FOREIGN KEY fk_name1; //get rid of current constraints\r\n    ALTER TABLE tablename2 DROP FOREIGN KEY fk_name2;\r\n    \r\n    ALTER TABLE tablename1 \r\n      ADD FOREIGN KEY (table2_id) \r\n            REFERENCES table2(id)\r\n            ON DELETE SET NULL  //add back constraint\r\n    \r\n    ALTER TABLE tablename2 \r\n      ADD FOREIGN KEY (table1_id) \r\n            REFERENCES table1(id)\r\n            ON DELETE SET NULL //add back other constraint\r\n\r\n\r\n\r\n\r\nHave a read of this (http://dev.mysql.com/doc/refman/5.5/en/alter-table.html) and this (http://dev.mysql.com/doc/refman/5.5/en/create-table-foreign-keys.html)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1398892702, "answer_id": 23398207, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1398892702, "body_markdown": "If the key field is nullable, then you can also set the value to null before attempting to delete it:\r\n\r\n    cursor.execute(&quot;UPDATE myapp_item SET myapp_style_id = NULL WHERE n = %s&quot;, n)\r\n    transaction.commit_unless_managed() \r\n\r\n    cursor.execute(&quot;UPDATE myapp_style SET myapp_item_id = NULL WHERE n = %s&quot;, n)\r\n    transaction.commit_unless_managed()\r\n\r\n    cursor.execute(&quot;DELETE FROM myapp_item WHERE n = %s&quot;, n)\r\n    transaction.commit_unless_managed()\r\n\r\n    cursor.execute(&quot;DELETE FROM myapp_style WHERE n = %s&quot;, n)\r\n    transaction.commit_unless_managed()"}, {"tags": [], "down_vote_count": 3, "creation_date": 1404698719, "answer_id": 24602164, "path": "stack.django.answer", "score": 86, "up_vote_count": 89, "is_accepted": false, "last_activity_date": 1411759255, "last_edit_date": 1411759255, "body_markdown": "To turn off foreign key constraint globally, do the following:\r\n\r\n    SET GLOBAL FOREIGN_KEY_CHECKS=0;\r\n\r\nand remember to set it back when you are done\r\n\r\n    SET GLOBAL FOREIGN_KEY_CHECKS=1;\r\n\r\n\r\nWARNING: You should only do this when you are doing single user mode maintenance.  As it might resulted in data inconsistency.  For example, it will be very helpful when you are uploading large amount of data  using a mysqldump output."}, {"tags": [], "down_vote_count": 5, "creation_date": 1421230897, "answer_id": 27940614, "path": "stack.django.answer", "score": 1, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1478856265, "last_edit_date": 1478856265, "body_markdown": "It&#39;s not a good idea to set a foreign key constraint to 0, because if you do, your database would not ensure it is not violating referential integrity.  This could lead to inaccurate, misleading, or incomplete data.\r\n\r\nYou make a foreign key for a reason:  because all the values in the child column shall be the same as a value in the parent column.  If there are no foreign key constraints, a child row can have a value that is not in the parent row, which would lead to inaccurate data.\r\n\r\nFor instance, let&#39;s say you have a website for students to login and every student must register for an account as a user.  You have one table for user ids, with user id as a primary key; and another table for student accounts, with student id as a column.  Since every student must have a user id, it would make sense to make the student id from the student accounts table a foreign key that references the primary key user id in the user ids table.  If there are no foreign key checks, a student could end up having a student id and no user id, which means a student can get an account without being a user, which is wrong.\r\n\r\nImagine if it happens to a large amount of data.  That&#39;s why you need the foreign key check.\r\n\r\nIt&#39;s best to figure out what is causing the error.  Most likely, you are trying to delete from a parent row without deleting from a child row. Try deleting from the child row before deleting from the parent row. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1427302122, "answer_id": 29261661, "path": "stack.django.answer", "score": 29, "up_vote_count": 29, "is_accepted": false, "last_activity_date": 1427302122, "body_markdown": "I normally only disable foreign key constraints when I want to truncate a table, and since I keep coming back to this answer this is for future me:\r\n\r\n    SET FOREIGN_KEY_CHECKS=0;\r\n    TRUNCATE TABLE table;\r\n    SET FOREIGN_KEY_CHECKS=1;\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1451559467, "answer_id": 34545395, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1451559467, "body_markdown": "In phpMyAdmin you can select multiple rows then click the delete action. You&#39;ll enter a screen which lists the delete queries, you can uncheck the Foreign key check, and click on Yes to execute them. \r\n\r\nThis will enable you to delete rows even if there is a ON DELETE restriction constrain. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1492575969, "answer_id": 43486372, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1492575969, "body_markdown": "A very simple solution with phpmyadmin : in your table, go to SQL tab, after you edit the SQL command that you want to run, next to GO there is a check box &#39;Enable foreign key checks&#39; .Disable this check box and run your SQL . It will be then automatically re-checked."}, {"tags": [], "down_vote_count": 0, "creation_date": 1515664164, "answer_id": 48204024, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1515664164, "body_markdown": "To turn off foreign key constraint globally:\r\n\r\n    SET GLOBAL FOREIGN_KEY_CHECKS = 0;\r\n\r\nand for active foreign key constraint\r\n\r\n    SET GLOBAL FOREIGN_KEY_CHECKS = 1;"}], "title": "How to temporarily disable a foreign key constraint in MySQL?", "view_count": 382093, "answer_count": 9, "code_snippet": ["<code>cursor.execute(\"DELETE FROM myapp_item WHERE n = %s\", n)\ntransaction.commit_unless_managed()  #a foreign key constraint fails here\n\ncursor.execute(\"DELETE FROM myapp_style WHERE n = %s\", n)\ntransaction.commit_unless_managed()\n</code>", "<code>ON DELETE SET NULL</code>", "<code>DISABLE KEYS</code>", "<code>SET FOREIGN_KEY_CHECKS=0;\n</code>", "<code>SET FOREIGN_KEY_CHECKS=1;\n</code>", "<code>disable keys</code>", "<code>SET GLOBAL FOREIGN_KEY_CHECKS=0;\n</code>", "<code>SET GLOBAL FOREIGN_KEY_CHECKS=1;\n</code>", "<code>SET FOREIGN_KEY_CHECKS</code>", "<code>SET GLOBAL ..</code>", "<code>SET FOREIGN..</code>", "<code>GLOBAL</code>", "<code>ERROR 1228 (HY000): Variable 'foreign_key_checks' is a SESSION variable and can't be used with SET GLOBAL</code>", "<code>SET FOREIGN_KEY_CHECKS=0;\nTRUNCATE TABLE table;\nSET FOREIGN_KEY_CHECKS=1;\n</code>", "<code>ALTER TABLE tablename1 DROP FOREIGN KEY fk_name1; //get rid of current constraints\nALTER TABLE tablename2 DROP FOREIGN KEY fk_name2;\n\nALTER TABLE tablename1 \n  ADD FOREIGN KEY (table2_id) \n        REFERENCES table2(id)\n        ON DELETE SET NULL  //add back constraint\n\nALTER TABLE tablename2 \n  ADD FOREIGN KEY (table1_id) \n        REFERENCES table1(id)\n        ON DELETE SET NULL //add back other constraint\n</code>", "<code>FOREIGN_KEY_CHECKS</code>", "<code>cursor.execute(\"UPDATE myapp_item SET myapp_style_id = NULL WHERE n = %s\", n)\ntransaction.commit_unless_managed() \n\ncursor.execute(\"UPDATE myapp_style SET myapp_item_id = NULL WHERE n = %s\", n)\ntransaction.commit_unless_managed()\n\ncursor.execute(\"DELETE FROM myapp_item WHERE n = %s\", n)\ntransaction.commit_unless_managed()\n\ncursor.execute(\"DELETE FROM myapp_style WHERE n = %s\", n)\ntransaction.commit_unless_managed()\n</code>", "<code>SET FOREIGN_KEY_CHECKS=0; ..... SET FOREIGN_KEY_CHECKS=1;</code>", "<code>SET GLOBAL FOREIGN_KEY_CHECKS = 0;\n</code>", "<code>SET GLOBAL FOREIGN_KEY_CHECKS = 1;\n</code>"], "path": "stack.django"}, {"tags": ["php", "http", "comet"], "creation_date": 1228216487, "body_markdown": "I can find lots of information on how Long Polling works (For example, [this][weblogsjava], and [this][cometwiki]), but no *simple* examples of how to implement this in code.\r\n\r\nAll I can find is [cometd][cometd], which relies on the Dojo JS framework, and a fairly complex server system..\r\n\r\nBasically, how would I use Apache to serve the requests, and how would I write a simple script (say, in PHP) which would &quot;long-poll&quot; the server for new messages?\r\n\r\nThe example doesn&#39;t have to be scaleable, secure or complete, it just needs to work!\r\n\r\n[weblogsjava]: http://jfarcand.wordpress.com/2007/05/15/new-adventures-in-comet-polling-long-polling-or-http-streaming-with-ajax-which-one-to-choose/\r\n[cometwiki]: http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\r\n[cometd]: http://code.google.com/p/cometd/", "last_edit_date": 1453714438, "up_vote_count": 728, "link": "https://stackoverflow.com/questions/333664/how-do-i-implement-basic-long-polling", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1228216894, "answer_id": 333677, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1228216894, "body_markdown": "I used [this][1] to get to grips with Comet, I have also set up Comet using the Java Glassfish server and found lots of other examples by subscribing to cometdaily.com\r\n\r\n  [1]: http://ajaxian.com/archives/comet-with-php"}, {"tags": [], "down_vote_count": 1, "creation_date": 1228217977, "answer_id": 333702, "path": "stack.django.answer", "score": 24, "up_vote_count": 25, "is_accepted": false, "last_activity_date": 1228217977, "body_markdown": "I think the client looks like a normal asynchronous AJAX request, but you expect it to take a &quot;long time&quot; to come back.\r\n\r\nThe server then looks like this.\r\n\r\n    while (!hasNewData())\r\n        usleep(50);\r\n    \r\n    outputNewData();\r\n\r\nSo, the AJAX request goes to the server, probably including a timestamp of when it was last update so that your `hasNewData()` knows what data you have already got.\r\nThe server then sits in a loop sleeping until new data is available.  All the while, your AJAX request is still connected, just hanging there waiting for data.\r\nFinally, when new data is available, the server gives it to your AJAX request and closes the connection."}, {"tags": [], "down_vote_count": 3, "creation_date": 1228223717, "answer_id": 333884, "path": "stack.django.answer", "score": 484, "up_vote_count": 487, "is_accepted": true, "last_activity_date": 1349090687, "last_edit_date": 1349090687, "body_markdown": "It&#39;s simpler than I initially thought.. Basically you have a page that does nothing, until the data you want to send is available (say, a new message arrives).\r\n\r\nHere is a really basic example, which sends a simple string after 2-10 seconds. 1 in 3 chance of returning an error 404 (to show error handling in the coming Javascript example)\r\n\r\n`msgsrv.php`\r\n\r\n&lt;!-- language: lang-php --&gt;\r\n\r\n    &lt;?php\r\n    if(rand(1,3) == 1){\r\n        /* Fake an error */\r\n        header(&quot;HTTP/1.0 404 Not Found&quot;);\r\n        die();\r\n    }\r\n    \r\n    /* Send a string after a random number of seconds (2-10) */\r\n    sleep(rand(2,10));\r\n    echo(&quot;Hi! Have a random number: &quot; . rand(1,10));\r\n    ?&gt;\r\n\r\nNote: With a real site, running this on a regular web-server like Apache will quickly tie up all the &quot;worker threads&quot; and leave it unable to respond to other requests.. There are ways around this, but it is recommended to write a &quot;long-poll server&quot; in something like Python&#39;s [twisted](http://twistedmatrix.com/trac/), which does not rely on one thread per request. [cometD](http://cometdproject.dojotoolkit.org/) is an popular one (which is available in several languages), and [Tornado](http://www.tornadoweb.org/) is a new framework made specifically for such tasks (it was built for FriendFeed&#39;s long-polling code)... but as a simple example, Apache is more than adequate! This script could easily be written in any language (I chose Apache/PHP as they are very common, and I happened to be running them locally)\r\n\r\nThen, in Javascript, you request the above file (`msg_srv.php`), and wait for a response.  When you get one, you act upon the data. Then you request the file and wait again, act upon the data (and repeat)\r\n\r\nWhat follows is an example of such a page.. When the page is loaded, it sends the initial request for the `msgsrv.php` file.. If it succeeds, we append the message to the `#messages` div, then after 1 second we call the waitForMsg function again, which triggers the wait.\r\n\r\nThe 1 second `setTimeout()` is a really basic rate-limiter, it works fine without this, but if `msgsrv.php` *always* returns instantly (with a syntax error, for example) - you flood the browser and it can quickly freeze up. This would better be done checking if the file contains a valid JSON response, and/or keeping a running total of requests-per-minute/second, and pausing appropriately.\r\n\r\nIf the page errors, it appends the error to the `#messages` div, waits 15 seconds and then tries again (identical to how we wait 1 second after each message)\r\n\r\nThe nice thing about this approach is it is very resilient. If the clients internet connection dies, it will timeout, then try and reconnect - this is inherent in how long polling works, no complicated error-handling is required\r\n\r\nAnyway, the `long_poller.htm` code, using the jQuery framework:\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;html&gt;\r\n    &lt;head&gt;\r\n        &lt;title&gt;BargePoller&lt;/title&gt;\r\n        &lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;\r\n        \r\n        &lt;style type=&quot;text/css&quot; media=&quot;screen&quot;&gt;\r\n          body{ background:#000;color:#fff;font-size:.9em; }\r\n          .msg{ background:#aaa;padding:.2em; border-bottom:1px #000 solid}\r\n          .old{ background-color:#246499;}\r\n          .new{ background-color:#3B9957;}\r\n        .error{ background-color:#992E36;}\r\n        &lt;/style&gt;\r\n        \r\n        &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;\r\n        function addmsg(type, msg){\r\n            /* Simple helper to add a div.\r\n            type is the name of a CSS class (old/new/error).\r\n            msg is the contents of the div */\r\n            $(&quot;#messages&quot;).append(\r\n                &quot;&lt;div class=&#39;msg &quot;+ type +&quot;&#39;&gt;&quot;+ msg +&quot;&lt;/div&gt;&quot;\r\n            );\r\n        }\r\n        \r\n        function waitForMsg(){\r\n            /* This requests the url &quot;msgsrv.php&quot;\r\n            When it complete (or errors)*/\r\n            $.ajax({\r\n                type: &quot;GET&quot;,\r\n                url: &quot;msgsrv.php&quot;,\r\n                \r\n                async: true, /* If set to non-async, browser shows page as &quot;Loading..&quot;*/\r\n                cache: false,\r\n                timeout:50000, /* Timeout in ms */\r\n            \r\n                success: function(data){ /* called when request to barge.php completes */\r\n                    addmsg(&quot;new&quot;, data); /* Add response to a .msg div (with the &quot;new&quot; class)*/\r\n                    setTimeout(\r\n                        waitForMsg, /* Request next message */\r\n                        1000 /* ..after 1 seconds */\r\n                    );\r\n                },\r\n                error: function(XMLHttpRequest, textStatus, errorThrown){\r\n                    addmsg(&quot;error&quot;, textStatus + &quot; (&quot; + errorThrown + &quot;)&quot;);\r\n                    setTimeout(\r\n                        waitForMsg, /* Try again after.. */\r\n                        15000); /* milliseconds (15seconds) */\r\n                }\r\n            });\r\n        };\r\n        \r\n        $(document).ready(function(){\r\n            waitForMsg(); /* Start the inital request */\r\n        });\r\n        &lt;/script&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n        &lt;div id=&quot;messages&quot;&gt;\r\n            &lt;div class=&quot;msg old&quot;&gt;\r\n                BargePoll message requester!\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n    &lt;/body&gt;\r\n    &lt;/html&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1228338491, "answer_id": 338685, "path": "stack.django.answer", "score": 41, "up_vote_count": 41, "is_accepted": false, "last_activity_date": 1338798164, "last_edit_date": 1338798164, "body_markdown": "I&#39;ve got a really simple chat example as part of [slosh][1].\r\n\r\n**Edit**: (since everyone&#39;s pasting their code in here)\r\n\r\nThis is the complete JSON-based multi-user chat using long-polling and [slosh][1].  This is a **demo** of how to do the calls, so please ignore the XSS problems.  Nobody should deploy this without sanitizing it first.\r\n\r\nNotice that the client *always* has a connection to the server, and as soon as anyone sends a message, everyone should see it roughly instantly.\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\r\n    &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;\r\n      &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;\r\n    &lt;!-- Copyright (c) 2008 Dustin Sallings &lt;dustin+html@spy.net&gt; --&gt;\r\n    &lt;html lang=&quot;en&quot;&gt;\r\n      &lt;head&gt;\r\n        &lt;title&gt;slosh chat&lt;/title&gt;\r\n        &lt;script type=&quot;text/javascript&quot;\r\n          src=&quot;http://code.jquery.com/jquery-latest.js&quot;&gt;&lt;/script&gt;\r\n        &lt;link title=&quot;Default&quot; rel=&quot;stylesheet&quot; media=&quot;screen&quot; href=&quot;style.css&quot; /&gt;\r\n      &lt;/head&gt;\r\n     \r\n      &lt;body&gt;\r\n        &lt;h1&gt;Welcome to Slosh Chat&lt;/h1&gt;\r\n     \r\n        &lt;div id=&quot;messages&quot;&gt;\r\n          &lt;div&gt;\r\n            &lt;span class=&quot;from&quot;&gt;First!:&lt;/span&gt;\r\n            &lt;span class=&quot;msg&quot;&gt;Welcome to chat. Please don&#39;t hurt each other.&lt;/span&gt;\r\n          &lt;/div&gt;\r\n        &lt;/div&gt;\r\n     \r\n        &lt;form method=&quot;post&quot; action=&quot;#&quot;&gt;\r\n          &lt;div&gt;Nick: &lt;input id=&#39;from&#39; type=&quot;text&quot; name=&quot;from&quot;/&gt;&lt;/div&gt;\r\n          &lt;div&gt;Message:&lt;/div&gt;\r\n          &lt;div&gt;&lt;textarea id=&#39;msg&#39; name=&quot;msg&quot;&gt;&lt;/textarea&gt;&lt;/div&gt;\r\n          &lt;div&gt;&lt;input type=&quot;submit&quot; value=&quot;Say it&quot; id=&quot;submit&quot;/&gt;&lt;/div&gt;\r\n        &lt;/form&gt;\r\n     \r\n        &lt;script type=&quot;text/javascript&quot;&gt;\r\n          function gotData(json, st) {\r\n            var msgs=$(&#39;#messages&#39;);\r\n            $.each(json.res, function(idx, p) {\r\n              var from = p.from[0]\r\n              var msg = p.msg[0]\r\n              msgs.append(&quot;&lt;div&gt;&lt;span class=&#39;from&#39;&gt;&quot; + from + &quot;:&lt;/span&gt;&quot; +\r\n                &quot; &lt;span class=&#39;msg&#39;&gt;&quot; + msg + &quot;&lt;/span&gt;&lt;/div&gt;&quot;);\r\n            });\r\n            // The jQuery wrapped msgs above does not work here.\r\n            var msgs=document.getElementById(&quot;messages&quot;);\r\n            msgs.scrollTop = msgs.scrollHeight;\r\n          }\r\n     \r\n          function getNewComments() {\r\n            $.getJSON(&#39;/topics/chat.json&#39;, gotData);\r\n          }\r\n     \r\n          $(document).ready(function() {\r\n            $(document).ajaxStop(getNewComments);\r\n            $(&quot;form&quot;).submit(function() {\r\n              $.post(&#39;/topics/chat&#39;, $(&#39;form&#39;).serialize());\r\n              return false;\r\n            });\r\n            getNewComments();\r\n          });\r\n        &lt;/script&gt;\r\n      &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\n  [1]: http://github.com/dustin/slosh"}, {"tags": [], "down_vote_count": 1, "creation_date": 1253017850, "answer_id": 1426901, "path": "stack.django.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1253017850, "body_markdown": "Thanks for the code, **dbr**. Just a small typo in *long_poller.htm* around the line\r\n\r\n    1000 /* ..after 1 seconds */\r\n\r\nI think it should be\r\n\r\n    &quot;1000&quot;); /* ..after 1 seconds */\r\n\r\nfor it to work.\r\n\r\nFor those interested, I tried a Django equivalent. Start a new Django project, say ***lp*** for long polling:\r\n\r\n    django-admin.py startproject lp\r\n\r\nCall the app ***msgsrv*** for message server:\r\n\r\n    python manage.py startapp msgsrv\r\n\r\nAdd the following lines to *settings.py* to have a ***templates*** directory:\r\n\r\n    import os.path\r\n    PROJECT_DIR = os.path.dirname(__file__)\r\n    TEMPLATE_DIRS = (\r\n        os.path.join(PROJECT_DIR, &#39;templates&#39;),\r\n    )\r\n\r\nDefine your URL patterns in *urls.py* as such:\r\n\r\n    from django.views.generic.simple import direct_to_template\r\n    from lp.msgsrv.views import retmsg\r\n    \r\n    urlpatterns = patterns(&#39;&#39;,\r\n        (r&#39;^msgsrv\\.php$&#39;, retmsg),\r\n        (r&#39;^long_poller\\.htm$&#39;, direct_to_template, {&#39;template&#39;: &#39;long_poller.htm&#39;}),\r\n    )\r\n\r\nAnd msgsrv/*views.py* should look like:\r\n\r\n    from random import randint\r\n    from time import sleep\r\n    from django.http import HttpResponse, HttpResponseNotFound\r\n    \r\n    def retmsg(request):\r\n        if randint(1,3) == 1:\r\n            return HttpResponseNotFound(&#39;&lt;h1&gt;Page not found&lt;/h1&gt;&#39;)\r\n        else:\r\n            sleep(randint(2,10))\r\n            return HttpResponse(&#39;Hi! Have a random number: %s&#39; % str(randint(1,10)))\r\n\r\nLastly, templates/*long_poller.htm* should be the same as above with typo corrected. Hope this helps."}, {"tags": [], "down_vote_count": 0, "creation_date": 1256053298, "answer_id": 1595551, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1256053298, "body_markdown": "This is a nice 5-minute screencast on how to do long polling using PHP &amp; jQuery:\r\n[http://screenr.com/SNH][1]\r\n\r\nCode is quite similar to **dbr**&#39;s example above.\r\n\r\n\r\n  [1]: http://screenr.com/SNH"}, {"tags": [], "down_vote_count": 0, "creation_date": 1258652205, "answer_id": 1765124, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1280448445, "last_edit_date": 1280448445, "body_markdown": "Take a look at [this blog post][1] which has code for a simple chat app in Python/Django/[gevent][2].\r\n\r\n\r\n  [1]: http://blog.gevent.org/2009/10/10/simpler-long-polling-with-django-and-gevent/\r\n  [2]: http://www.gevent.org"}, {"tags": [], "down_vote_count": 0, "creation_date": 1299250381, "answer_id": 5195276, "path": "stack.django.answer", "score": 31, "up_vote_count": 31, "is_accepted": false, "last_activity_date": 1368711239, "last_edit_date": 1368711239, "body_markdown": "[Tornado][1] is designed for long-polling, and includes a very minimal (few hundred lines of Python) [chat app][2] in /**examples/chatdemo** , including server code and JS client code. It works like this:\r\n\r\n - Clients use JS to ask for an updates since (number of last message), server URLHandler receives these and adds a callback to respond to the client to a queue. \r\n\r\n - When the server gets a new message, the onmessage event fires, loops through the callbacks, and sends the messages.\r\n\r\n - The client-side JS receives the message, adds it to the page, then asks for updates since this new message ID.\r\n\r\n\r\n  [1]: http://www.tornadoweb.org/\r\n  [2]: https://github.com/facebook/tornado/blob/stable/demos/chat/chatdemo.py"}, {"tags": [], "down_vote_count": 0, "creation_date": 1303264266, "answer_id": 5724712, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1303264266, "last_edit_date": 1495540039, "body_markdown": "The WS-I group published something called [&quot;Reliable Secure Profile&quot;][1] that has a Glass Fish and [.NET implementation][2] that apparently [inter-operate][3] well.\r\n\r\nWith any luck there is a [Javascript][4] implementation out there as well.\r\n\r\nThere is also a Silverlight implementation that uses [HTTP Duplex.][5]  You can [connect javascript to the Silverlight][6] object to get callbacks when a push occurs.\r\n\r\nThere are also [commercial paid versions][7] as well.\r\n\r\n\r\n  [1]: http://www.ws-i.org/deliverables/workinggroup.aspx?wg=reliablesecure\r\n  [2]: http://msdn.microsoft.com/en-us/library/ee818238.aspx\r\n  [3]: http://msdn.microsoft.com/en-us/library/ff842400.aspx#requestResponse\r\n  [4]: https://stackoverflow.com/questions/5724558/is-there-a-javascript-implementation-for-ws-i-reliable-secure-profile\r\n  [5]: http://msdn.microsoft.com/en-us/library/cc645027%28v=vs.95%29.aspx\r\n  [6]: https://stackoverflow.com/questions/5449642/http-push-comet-reverse-ajaxusing-silverlight-to-javascript-bridge\r\n  [7]: https://stackoverflow.com/questions/5427681/how-do-modern-implementations-of-comet-reverse-ajax-work-any-stable-c-wcf-or-as"}, {"tags": [], "down_vote_count": 0, "creation_date": 1303356300, "answer_id": 5739159, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1304591964, "last_edit_date": 1304591964, "body_markdown": "Below is a long polling solution I have developed for Inform8 Web. Basically you override the class and implement the loadData method. When the loadData returns a value or the operation times out it will print the result and return. \r\n\r\nIf the processing of your script may take longer than 30 seconds you may need to alter the set_time_limit() call to something longer.\r\n\r\nApache 2.0 license. Latest version on github \r\nhttps://github.com/ryanhend/Inform8/blob/master/Inform8-web/src/config/lib/Inform8/longpoll/LongPoller.php\r\n\r\nRyan\r\n\r\n    abstract class LongPoller {\r\n    \r\n      protected $sleepTime = 5;\r\n      protected $timeoutTime = 30;\r\n    \r\n      function __construct() {\r\n      }\r\n    \r\n    \r\n      function setTimeout($timeout) {\r\n        $this-&gt;timeoutTime = $timeout;\r\n      }\r\n    \r\n      function setSleep($sleep) {\r\n        $this-&gt;sleepTime = $sleepTime;\r\n      }\r\n    \r\n    \r\n      public function run() {\r\n        $data = NULL;\r\n        $timeout = 0;\r\n    \r\n        set_time_limit($this-&gt;timeoutTime + $this-&gt;sleepTime + 15);\r\n    \r\n        //Query database for data\r\n        while($data == NULL &amp;&amp; $timeout &lt; $this-&gt;timeoutTime) {\r\n          $data = $this-&gt;loadData();\r\n          if($data == NULL){\r\n    \r\n            //No new orders, flush to notify php still alive\r\n            flush();\r\n    \r\n            //Wait for new Messages\r\n            sleep($this-&gt;sleepTime);\r\n            $timeout += $this-&gt;sleepTime;\r\n          }else{\r\n            echo $data;\r\n            flush();\r\n          }\r\n        }\r\n    \r\n      }\r\n    \r\n    \r\n      protected abstract function loadData();\r\n    \r\n    }"}, {"tags": [], "down_vote_count": 1, "creation_date": 1309931968, "answer_id": 6592156, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1362368230, "last_edit_date": 1362368230, "body_markdown": "[Here is a node.js example][1] that comes with a jquery client. There&#39;s also instructions on setting it up on heroku.\r\n\r\n\r\n\r\n  [1]: https://github.com/ckhsponge/long-noodle"}, {"tags": [], "down_vote_count": 3, "creation_date": 1314886800, "answer_id": 7271705, "path": "stack.django.answer", "score": 18, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1483731920, "last_edit_date": 1495540481, "body_markdown": "[**Here**][1] are some classes I use for long-polling in C#. There are basically 6 classes (see below).\r\n\r\n 1. **Controller**: Processes actions required to create a valid response (db operations etc.)\r\n 2. **Processor**: Manages asynch communication with the web page (itself)\r\n 3. **IAsynchProcessor**: The service processes instances that implement this interface\r\n 4. **Sevice**: Processes request objects that implement IAsynchProcessor\r\n 5. **Request**: The IAsynchProcessor wrapper containing your response (object)\r\n 6. **Response**: Contains custom objects or fields\r\n\r\n  [1]: https://stackoverflow.com/a/7271441/429949"}, {"tags": [], "down_vote_count": 0, "creation_date": 1328807653, "answer_id": 9215507, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1328807653, "body_markdown": "For a ASP.NET MVC implementation, look at SignalR [which is available on NuGet][1].. note that the NuGet is often out of date from the [Git source][2] which gets very frequent commits.\r\n\r\nRead more about SignalR on a [blog on by Scott Hanselman][3] \r\n\r\n\r\n  [1]: http://nuget.org/packages/SignalR\r\n  [2]: https://github.com/SignalR\r\n  [3]: http://www.hanselman.com/blog/AsynchronousScalableWebApplicationsWithRealtimePersistentLongrunningConnectionsWithSignalR.aspx"}, {"tags": [], "down_vote_count": 1, "creation_date": 1354969393, "answer_id": 13777448, "path": "stack.django.answer", "score": 12, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1354969761, "last_edit_date": 1354969761, "body_markdown": "Here is [a simple long-polling example in PHP by Erik Dubbelboer](http://blog.dubbelboer.com/2012/01/08/x-mixed-replace.html) using the `Content-type: multipart/x-mixed-replace` header:\r\n\r\n    &lt;?\r\n    \r\n    header(&#39;Content-type: multipart/x-mixed-replace; boundary=endofsection&#39;);\r\n    \r\n    // Keep in mind that the empty line is important to separate the headers\r\n    // from the content.\r\n    echo &#39;Content-type: text/plain\r\n    \r\n    After 5 seconds this will go away and a cat will appear...\r\n    --endofsection\r\n    &#39;;\r\n    flush(); // Don&#39;t forget to flush the content to the browser.\r\n    \r\n    \r\n    sleep(5);\r\n    \r\n    \r\n    echo &#39;Content-type: image/jpg\r\n    \r\n    &#39;;\r\n    \r\n    $stream = fopen(&#39;cat.jpg&#39;, &#39;rb&#39;);\r\n    fpassthru($stream);\r\n    fclose($stream);\r\n    \r\n    echo &#39;\r\n    --endofsection\r\n    &#39;;\r\n\r\nAnd here is a demo:\r\n\r\nhttp://dubbelboer.com/multipart.php"}, {"tags": [], "down_vote_count": 0, "creation_date": 1380593996, "answer_id": 19106928, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1380593996, "body_markdown": "You can try icomet(https://github.com/ideawu/icomet), a C1000K C++ comet server built with libevent. icomet also provides a JavaScript library, it is easy to use as simple as\r\n\r\n    var comet = new iComet({\r\n        sign_url: &#39;http://&#39; + app_host + &#39;/sign?obj=&#39; + obj,\r\n        sub_url: &#39;http://&#39; + icomet_host + &#39;/sub&#39;,\r\n        callback: function(msg){\r\n            // on server push\r\n            alert(msg.content);\r\n        }\r\n    });\r\n\r\nicomet supports a wide range of Browsers and OSes, including Safari(iOS, Mac), IEs(Windows), Firefox, Chrome, etc. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1389880078, "answer_id": 21163575, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1389880078, "last_edit_date": 1495541894, "body_markdown": "Why not consider the web sockets instead of long polling? They are much efficient and easy to setup. However they are supported only in modern browsers. Here is a [**quick reference**][1].\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/10028770/html5-websocket-vs-long-polling-vs-ajax"}, {"tags": [], "down_vote_count": 0, "creation_date": 1397066074, "answer_id": 22970341, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1397066074, "body_markdown": "This is one of the scenarios that PHP is a very bad choice for. As previously mentioned, you can tie up all of your Apache workers very quickly doing something like this. PHP is built for start, execute, stop. It&#39;s not built for start, wait...execute, stop. You&#39;ll bog down your server very quickly and find that you have incredible scaling problems.\r\n\r\nThat said, you can still do this with PHP and have it not kill your server using the nginx HttpPushStreamModule: http://wiki.nginx.org/HttpPushStreamModule\r\n\r\nYou setup nginx in front of Apache (or whatever else) and it will take care of holding open the concurrent connections. You just respond with payload by sending data to an internal address which you could do with a background job or just have the messages fired off to people that were waiting whenever the new requests come in. This keeps PHP processes from sitting open during long polling.\r\n\r\nThis is not exclusive to PHP and can be done using nginx with any backend language. The concurrent open connections load is equal to Node.js so the biggest perk is that it gets you out of NEEDING Node for something like this. \r\n\r\nYou see a lot of other people mentioning other language libraries for accomplishing long polling and that&#39;s with good reason. PHP is just not well built for this type of behavior naturally."}], "title": "How do I implement basic &quot;Long Polling&quot;?", "view_count": 253356, "answer_count": 17, "code_snippet": ["<code>msgsrv.php</code>", "<code>&lt;?php\nif(rand(1,3) == 1){\n    /* Fake an error */\n    header(\"HTTP/1.0 404 Not Found\");\n    die();\n}\n\n/* Send a string after a random number of seconds (2-10) */\nsleep(rand(2,10));\necho(\"Hi! Have a random number: \" . rand(1,10));\n?&gt;\n</code>", "<code>msg_srv.php</code>", "<code>msgsrv.php</code>", "<code>#messages</code>", "<code>setTimeout()</code>", "<code>msgsrv.php</code>", "<code>#messages</code>", "<code>long_poller.htm</code>", "<code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;BargePoller&lt;/title&gt;\n    &lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n\n    &lt;style type=\"text/css\" media=\"screen\"&gt;\n      body{ background:#000;color:#fff;font-size:.9em; }\n      .msg{ background:#aaa;padding:.2em; border-bottom:1px #000 solid}\n      .old{ background-color:#246499;}\n      .new{ background-color:#3B9957;}\n    .error{ background-color:#992E36;}\n    &lt;/style&gt;\n\n    &lt;script type=\"text/javascript\" charset=\"utf-8\"&gt;\n    function addmsg(type, msg){\n        /* Simple helper to add a div.\n        type is the name of a CSS class (old/new/error).\n        msg is the contents of the div */\n        $(\"#messages\").append(\n            \"&lt;div class='msg \"+ type +\"'&gt;\"+ msg +\"&lt;/div&gt;\"\n        );\n    }\n\n    function waitForMsg(){\n        /* This requests the url \"msgsrv.php\"\n        When it complete (or errors)*/\n        $.ajax({\n            type: \"GET\",\n            url: \"msgsrv.php\",\n\n            async: true, /* If set to non-async, browser shows page as \"Loading..\"*/\n            cache: false,\n            timeout:50000, /* Timeout in ms */\n\n            success: function(data){ /* called when request to barge.php completes */\n                addmsg(\"new\", data); /* Add response to a .msg div (with the \"new\" class)*/\n                setTimeout(\n                    waitForMsg, /* Request next message */\n                    1000 /* ..after 1 seconds */\n                );\n            },\n            error: function(XMLHttpRequest, textStatus, errorThrown){\n                addmsg(\"error\", textStatus + \" (\" + errorThrown + \")\");\n                setTimeout(\n                    waitForMsg, /* Try again after.. */\n                    15000); /* milliseconds (15seconds) */\n            }\n        });\n    };\n\n    $(document).ready(function(){\n        waitForMsg(); /* Start the inital request */\n    });\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"messages\"&gt;\n        &lt;div class=\"msg old\"&gt;\n            BargePoll message requester!\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code>", "<code>sleep(rand(2,10));</code>", "<code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;\n&lt;!-- Copyright (c) 2008 Dustin Sallings &lt;dustin+html@spy.net&gt; --&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;slosh chat&lt;/title&gt;\n    &lt;script type=\"text/javascript\"\n      src=\"http://code.jquery.com/jquery-latest.js\"&gt;&lt;/script&gt;\n    &lt;link title=\"Default\" rel=\"stylesheet\" media=\"screen\" href=\"style.css\" /&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;h1&gt;Welcome to Slosh Chat&lt;/h1&gt;\n\n    &lt;div id=\"messages\"&gt;\n      &lt;div&gt;\n        &lt;span class=\"from\"&gt;First!:&lt;/span&gt;\n        &lt;span class=\"msg\"&gt;Welcome to chat. Please don't hurt each other.&lt;/span&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;form method=\"post\" action=\"#\"&gt;\n      &lt;div&gt;Nick: &lt;input id='from' type=\"text\" name=\"from\"/&gt;&lt;/div&gt;\n      &lt;div&gt;Message:&lt;/div&gt;\n      &lt;div&gt;&lt;textarea id='msg' name=\"msg\"&gt;&lt;/textarea&gt;&lt;/div&gt;\n      &lt;div&gt;&lt;input type=\"submit\" value=\"Say it\" id=\"submit\"/&gt;&lt;/div&gt;\n    &lt;/form&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n      function gotData(json, st) {\n        var msgs=$('#messages');\n        $.each(json.res, function(idx, p) {\n          var from = p.from[0]\n          var msg = p.msg[0]\n          msgs.append(\"&lt;div&gt;&lt;span class='from'&gt;\" + from + \":&lt;/span&gt;\" +\n            \" &lt;span class='msg'&gt;\" + msg + \"&lt;/span&gt;&lt;/div&gt;\");\n        });\n        // The jQuery wrapped msgs above does not work here.\n        var msgs=document.getElementById(\"messages\");\n        msgs.scrollTop = msgs.scrollHeight;\n      }\n\n      function getNewComments() {\n        $.getJSON('/topics/chat.json', gotData);\n      }\n\n      $(document).ready(function() {\n        $(document).ajaxStop(getNewComments);\n        $(\"form\").submit(function() {\n          $.post('/topics/chat', $('form').serialize());\n          return false;\n        });\n        getNewComments();\n      });\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code>", "<code>getNewComments</code>", "<code>while (!hasNewData())\n    usleep(50);\n\noutputNewData();\n</code>", "<code>hasNewData()</code>", "<code>Content-type: multipart/x-mixed-replace</code>", "<code>&lt;?\n\nheader('Content-type: multipart/x-mixed-replace; boundary=endofsection');\n\n// Keep in mind that the empty line is important to separate the headers\n// from the content.\necho 'Content-type: text/plain\n\nAfter 5 seconds this will go away and a cat will appear...\n--endofsection\n';\nflush(); // Don't forget to flush the content to the browser.\n\n\nsleep(5);\n\n\necho 'Content-type: image/jpg\n\n';\n\n$stream = fopen('cat.jpg', 'rb');\nfpassthru($stream);\nfclose($stream);\n\necho '\n--endofsection\n';\n</code>", "<code>abstract class LongPoller {\n\n  protected $sleepTime = 5;\n  protected $timeoutTime = 30;\n\n  function __construct() {\n  }\n\n\n  function setTimeout($timeout) {\n    $this-&gt;timeoutTime = $timeout;\n  }\n\n  function setSleep($sleep) {\n    $this-&gt;sleepTime = $sleepTime;\n  }\n\n\n  public function run() {\n    $data = NULL;\n    $timeout = 0;\n\n    set_time_limit($this-&gt;timeoutTime + $this-&gt;sleepTime + 15);\n\n    //Query database for data\n    while($data == NULL &amp;&amp; $timeout &lt; $this-&gt;timeoutTime) {\n      $data = $this-&gt;loadData();\n      if($data == NULL){\n\n        //No new orders, flush to notify php still alive\n        flush();\n\n        //Wait for new Messages\n        sleep($this-&gt;sleepTime);\n        $timeout += $this-&gt;sleepTime;\n      }else{\n        echo $data;\n        flush();\n      }\n    }\n\n  }\n\n\n  protected abstract function loadData();\n\n}\n</code>", "<code>1000 /* ..after 1 seconds */\n</code>", "<code>\"1000\"); /* ..after 1 seconds */\n</code>", "<code>django-admin.py startproject lp\n</code>", "<code>python manage.py startapp msgsrv\n</code>", "<code>import os.path\nPROJECT_DIR = os.path.dirname(__file__)\nTEMPLATE_DIRS = (\n    os.path.join(PROJECT_DIR, 'templates'),\n)\n</code>", "<code>from django.views.generic.simple import direct_to_template\nfrom lp.msgsrv.views import retmsg\n\nurlpatterns = patterns('',\n    (r'^msgsrv\\.php$', retmsg),\n    (r'^long_poller\\.htm$', direct_to_template, {'template': 'long_poller.htm'}),\n)\n</code>", "<code>from random import randint\nfrom time import sleep\nfrom django.http import HttpResponse, HttpResponseNotFound\n\ndef retmsg(request):\n    if randint(1,3) == 1:\n        return HttpResponseNotFound('&lt;h1&gt;Page not found&lt;/h1&gt;')\n    else:\n        sleep(randint(2,10))\n        return HttpResponse('Hi! Have a random number: %s' % str(randint(1,10)))\n</code>", "<code>\"15000\"</code>", "<code>var comet = new iComet({\n    sign_url: 'http://' + app_host + '/sign?obj=' + obj,\n    sub_url: 'http://' + icomet_host + '/sub',\n    callback: function(msg){\n        // on server push\n        alert(msg.content);\n    }\n});\n</code>"], "path": "stack.django"}, {"tags": ["python", "padding", "strftime"], "creation_date": 1243210309, "body_markdown": "When using Python `strftime`, is there a way to remove the first 0 of the date if it&#39;s before the 10th, ie. so `01` is `1`? Can&#39;t find a `%`thingy for that?\r\n\r\nThanks!", "last_edit_date": 1333444125, "up_vote_count": 169, "link": "https://stackoverflow.com/questions/904928/python-strftime-date-without-leading-0", "_childDocuments_": [{"tags": [], "down_vote_count": 83, "creation_date": 1243210541, "answer_id": 904941, "path": "stack.django.answer", "score": -27, "up_vote_count": 56, "is_accepted": true, "last_activity_date": 1243210541, "body_markdown": "You can use [left strip][1] to remove the leading zero&#39;s\r\n\r\n    day = day.lstrip(&#39;0&#39;)\r\n\r\n    &gt;&gt;&gt; day = &#39;01&#39;\r\n    &gt;&gt;&gt; day.lstrip(&#39;0&#39;)\r\n    &#39;1&#39;\r\n\r\n\r\n\r\n  [1]: http://docs.python.org/library/stdtypes.html#str.lstrip"}, {"tags": [], "down_vote_count": 2, "creation_date": 1243210963, "answer_id": 904954, "path": "stack.django.answer", "score": 32, "up_vote_count": 34, "is_accepted": false, "last_activity_date": 1243210963, "body_markdown": "Some platforms may support width and precision specification between `%` and the letter (such as &#39;d&#39; for day of month), according to http://docs.python.org/library/time.html -- but it&#39;s definitely a non-portable solution (e.g. doesn&#39;t work on my Mac;-).  Maybe you can use a string replace (or RE, for really nasty format) after the `strftime` to remedy that? e.g.:\r\n\r\n    &gt;&gt;&gt; y\r\n    (2009, 5, 7, 17, 17, 17, 3, 127, 1)\r\n    &gt;&gt;&gt; time.strftime(&#39;%Y %m %d&#39;, y)\r\n    &#39;2009 05 07&#39;\r\n    &gt;&gt;&gt; time.strftime(&#39;%Y %m %d&#39;, y).replace(&#39; 0&#39;, &#39; &#39;)\r\n    &#39;2009 5 7&#39;\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1243211001, "answer_id": 904958, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1333444344, "last_edit_date": 1333444344, "body_markdown": "Because Python really just calls the C language `strftime(3)` function on your platform, it might be that there are format characters you could use to control the leading zero; try `man strftime` and take a look. But, of course, the result will not be portable, as the Python manual will remind you. :-)\r\n\r\nI would try using a new-style `datetime` object instead, which has attributes like `t.year` and `t.month` and `t.day`, and put those through the normal, high-powered formatting of the `%` operator, which does support control of leading zeros. See http://docs.python.org/library/datetime.html for details. Better yet, use the `&quot;&quot;.format()` operator if your Python has it and be even more modern; it has lots of format options for numbers as well. See: http://docs.python.org/library/string.html#string-formatting."}, {"tags": [], "down_vote_count": 1, "creation_date": 1243275216, "answer_id": 907607, "path": "stack.django.answer", "score": 16, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1243275216, "body_markdown": "[Here][1] is the documentation of the modifiers supported by `strftime()` in the GNU C library. (Like people said before, it might not be portable.) Of interest to you might be:\r\n\r\n - `%e` instead of `%d` will replace leading zero in day of month with a space\r\n\r\nIt works on my Python (on Linux). I don&#39;t know if it will work on yours.\r\n\r\n  [1]: http://www.gnu.org/software/libc/manual/html_node/Formatting-Calendar-Time.html#index-strftime-2660"}, {"tags": [], "down_vote_count": 1, "creation_date": 1253032283, "answer_id": 1428227, "path": "stack.django.answer", "score": 9, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1253032283, "body_markdown": "I find the Django template date formatting filter to be quick and easy. It strips out leading zeros. If you don&#39;t mind importing the Django module, check it out.\r\n\r\nhttp://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\r\n\r\n    from django.template.defaultfilters import date as django_date_filter\r\n    print django_date_filter(mydate, &#39;P, D M j, Y&#39;)    \r\n"}, {"tags": [], "down_vote_count": 8, "creation_date": 1263573521, "answer_id": 2073189, "path": "stack.django.answer", "score": 386, "up_vote_count": 394, "is_accepted": false, "last_activity_date": 1491637339, "last_edit_date": 1491637339, "body_markdown": "Actually I had the same problem and I realized that, if you add a hyphen between the `%` and the letter, you can remove the leading zero.\r\n\r\nFor example `%Y/%-m/%-d`.\r\n\r\nThis only works on Unix (Linux, OS X), not Windows (including Cygwin).  On Windows, you would use `#`, e.g. `%Y/%#m/%#d`.\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1279582390, "answer_id": 3285938, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1333444384, "last_edit_date": 1333444384, "body_markdown": "For `%d` you can convert to integer using `int()` then it&#39;ll automatically remove leading 0 and becomes integer. You can then convert back to string using `str()`."}, {"tags": [], "down_vote_count": 0, "creation_date": 1304610384, "answer_id": 5900593, "path": "stack.django.answer", "score": 23, "up_vote_count": 23, "is_accepted": false, "last_activity_date": 1304610384, "body_markdown": "\r\n\r\n    &gt;&gt;&gt; import datetime\r\n    &gt;&gt;&gt; d = datetime.datetime.now()\r\n    &gt;&gt;&gt; d.strftime(&#39;X%d/X%m/%Y&#39;).replace(&#39;X0&#39;,&#39;X&#39;).replace(&#39;X&#39;,&#39;&#39;)\r\n    &#39;5/5/2011&#39;\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1318097759, "answer_id": 7698783, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1333444162, "last_edit_date": 1333444162, "body_markdown": "Take a look at `-` bellow:\r\n\r\n    &gt;&gt;&gt; from datetime import datetime\r\n    &gt;&gt;&gt; datetime.now().strftime(&#39;%d-%b-%Y&#39;)\r\n    &gt;&gt;&gt; &#39;08-Oct-2011&#39;\r\n    &gt;&gt;&gt; datetime.now().strftime(&#39;%-d-%b-%Y&#39;)\r\n    &gt;&gt;&gt; &#39;8-Oct-2011&#39;\r\n    &gt;&gt;&gt; today = datetime.date.today()\r\n    &gt;&gt;&gt; today.strftime(&#39;%d-%b-%Y&#39;)\r\n    &gt;&gt;&gt; print(today)"}, {"tags": [], "down_vote_count": 1, "creation_date": 1366346882, "answer_id": 16097385, "path": "stack.django.answer", "score": 152, "up_vote_count": 153, "is_accepted": false, "last_activity_date": 1472486911, "last_edit_date": 1472486911, "body_markdown": "We can do this sort of thing with the advent of the [`format`][1] method since python2.6:\r\n\r\n    &gt;&gt;&gt; import datetime\r\n    &gt;&gt;&gt; &#39;{dt.year}/{dt.month}/{dt.day}&#39;.format(dt = datetime.datetime.now())\r\n    &#39;2013/4/19&#39;\r\n\r\nThough perhaps beyond the scope of the original question, for more interesting formats, you can do stuff like:\r\n\r\n    &gt;&gt;&gt; &#39;{dt:%A} {dt:%B} {dt.day}, {dt.year}&#39;.format(dt=datetime.datetime.now())\r\n    &#39;Wednesday December 3, 2014&#39;\r\n\r\nAnd as of python3.6, this can be expressed as an [inline formatted string](https://www.python.org/dev/peps/pep-0498/):\r\n\r\n    Python 3.6.0a2 (v3.6.0a2:378893423552, Jun 13 2016, 14:44:21) \r\n    [GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\r\n    Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\r\n    &gt;&gt;&gt; import datetime\r\n    &gt;&gt;&gt; dt = datetime.datetime.now()\r\n    &gt;&gt;&gt; f&#39;{dt:%A} {dt:%B} {dt.day}, {dt.year}&#39;\r\n    &#39;Monday August 29, 2016&#39;\r\n\r\n  [1]: https://docs.python.org/2/library/functions.html#format\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1416248371, "answer_id": 26979224, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1416248371, "body_markdown": "Based on Alex&#39;s method, this will work for both the start-of-string and after-spaces cases:\r\n\r\n\r\n    re.sub(&#39;^0|(?&lt;= )0&#39;, &#39;&#39;, &quot;01 January 2000 08:00am&quot;)\r\n\r\nI like this better than .format or %-d because this is cross-platform and allows me to keep using strftime (to get things like &quot;November&quot; and &quot;Monday&quot;)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1416913683, "answer_id": 27125022, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1416913683, "body_markdown": "quite late to the party but `%-d` works on my end.\r\n\r\n`datetime.now().strftime(&#39;%B %-d, %Y&#39;)` produces something like **&quot;November 5, 2014&quot;**\r\n\r\ncheers :)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1438351973, "answer_id": 31748295, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1438351973, "body_markdown": "On Windows, add a &#39;#&#39;, as in &#39;%#m/%#d/%Y %#I:%M:%S %p&#39;\r\n\r\nFor reference: https://msdn.microsoft.com/en-us/library/fe06s4ak.aspx"}, {"tags": [], "down_vote_count": 0, "creation_date": 1469806175, "answer_id": 38662476, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1469806175, "body_markdown": "Old question, but %l (lower-case L) worked for me in strftime: this may not work for everyone, though, as it&#39;s not listed in the Python documentation I found"}, {"tags": [], "down_vote_count": 0, "creation_date": 1485989614, "answer_id": 41991351, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1485989790, "last_edit_date": 1485989790, "body_markdown": "    import datetime\r\n    now = datetime.datetime.now()\r\n    print now.strftime(&quot;%b %_d&quot;)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1500655900, "answer_id": 45242883, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1500661004, "last_edit_date": 1500661004, "body_markdown": "simply use `replace` like this:\r\n\r\n`(datetime.date.now()).strftime(&quot;%Y/%m/%d&quot;).replace(&quot;/0&quot;, &quot;/&quot;)`\r\n\r\nit will output:\r\n\r\n    &#39;2017/7/21&#39;"}], "title": "Python strftime - date without leading 0?", "view_count": 69097, "answer_count": 16, "code_snippet": ["<code>strftime</code>", "<code>01</code>", "<code>1</code>", "<code>%</code>", "<code>day = day.lstrip('0')\n\n&gt;&gt;&gt; day = '01'\n&gt;&gt;&gt; day.lstrip('0')\n'1'\n</code>", "<code>lstrip</code>", "<code>strip</code>", "<code>strip</code>", "<code>%y-%m-%d %I:%M %p</code>", "<code>replace(' 0', ' ')</code>", "<code>%</code>", "<code>%Y/%-m/%-d</code>", "<code>#</code>", "<code>%Y/%#m/%#d</code>", "<code>format</code>", "<code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; '{dt.year}/{dt.month}/{dt.day}'.format(dt = datetime.datetime.now())\n'2013/4/19'\n</code>", "<code>&gt;&gt;&gt; '{dt:%A} {dt:%B} {dt.day}, {dt.year}'.format(dt=datetime.datetime.now())\n'Wednesday December 3, 2014'\n</code>", "<code>Python 3.6.0a2 (v3.6.0a2:378893423552, Jun 13 2016, 14:44:21) \n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; dt = datetime.datetime.now()\n&gt;&gt;&gt; f'{dt:%A} {dt:%B} {dt.day}, {dt.year}'\n'Monday August 29, 2016'\n</code>", "<code>time.strftime('%A %B %d, %Y')</code>", "<code>Tuesday October 07, 2014</code>", "<code>__format__</code>", "<code>'{dt.hour}'</code>", "<code>'{%#I}'</code>", "<code>'{%-I}'</code>", "<code>%</code>", "<code>strftime</code>", "<code>&gt;&gt;&gt; y\n(2009, 5, 7, 17, 17, 17, 3, 127, 1)\n&gt;&gt;&gt; time.strftime('%Y %m %d', y)\n'2009 05 07'\n&gt;&gt;&gt; time.strftime('%Y %m %d', y).replace(' 0', ' ')\n'2009 5 7'\n</code>", "<code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; d = datetime.datetime.now()\n&gt;&gt;&gt; d.strftime('X%d/X%m/%Y').replace('X0','X').replace('X','')\n'5/5/2011'\n</code>", "<code>.replace('X0','X').replace('X','')</code>", "<code>.replace('X0', '')</code>", "<code>strftime()</code>", "<code>%e</code>", "<code>%d</code>", "<code>%-d</code>", "<code>%-d</code>", "<code>datetime.now().strftime('%B %-d, %Y')</code>", "<code>ValueError: Invalid format string</code>", "<code>from django.template.defaultfilters import date as django_date_filter\nprint django_date_filter(mydate, 'P, D M j, Y')    \n</code>", "<code>import django.conf</code>", "<code>django.conf.settings.configure()</code>", "<code>-</code>", "<code>&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; datetime.now().strftime('%d-%b-%Y')\n&gt;&gt;&gt; '08-Oct-2011'\n&gt;&gt;&gt; datetime.now().strftime('%-d-%b-%Y')\n&gt;&gt;&gt; '8-Oct-2011'\n&gt;&gt;&gt; today = datetime.date.today()\n&gt;&gt;&gt; today.strftime('%d-%b-%Y')\n&gt;&gt;&gt; print(today)\n</code>", "<code>re.sub('^0|(?&lt;= )0', '', \"01 January 2000 08:00am\")\n</code>", "<code>strftime(3)</code>", "<code>man strftime</code>", "<code>datetime</code>", "<code>t.year</code>", "<code>t.month</code>", "<code>t.day</code>", "<code>%</code>", "<code>\"\".format()</code>", "<code>%d</code>", "<code>int()</code>", "<code>str()</code>", "<code>import datetime\nnow = datetime.datetime.now()\nprint now.strftime(\"%b %_d\")\n</code>", "<code>ValueError: '_' is a bad directive in format '%a %b %_d %H:%M:%S %Y'</code>", "<code>replace</code>", "<code>(datetime.date.now()).strftime(\"%Y/%m/%d\").replace(\"/0\", \"/\")</code>", "<code>'2017/7/21'\n</code>"], "path": "stack.django"}, {"tags": ["sql", "django", "database", "storage"], "creation_date": 1315516427, "body_markdown": "What is the difference between `CharField()` and `TextField()` in Django?  The [documentation][1] says that `CharField()` should be used for smaller strings and `TextField()` should be used for larger strings.  Okay, but where is the line drawn between &quot;small&quot; and &quot;large&quot;?  What&#39;s going on under the hood here that makes this the case?\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.10/ref/models/fields/#django.db.models.CharField", "last_edit_date": 1505493734, "up_vote_count": 184, "link": "https://stackoverflow.com/questions/7354588/django-charfield-vs-textfield", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1315517019, "answer_id": 7354680, "path": "stack.django.answer", "score": 213, "up_vote_count": 213, "is_accepted": true, "last_activity_date": 1315517019, "body_markdown": "It&#39;s a difference between RDBMS&#39;s `varchar` (or similar) \u2014 those are usually specified with a maximum length, and might be more efficient in terms of performance or storage \u2014 and `text` (or similar) types \u2014 those are usually limited only by hardcoded implementation limits (not a DB schema).\r\n\r\nPostgreSQL 9, specifically, states that [&quot;There is no performance difference among these three types&quot;](http://www.postgresql.org/docs/9.0/static/datatype-character.html), but AFAIK there are some differences in e.g. MySQL, so this is something to keep in mind.\r\n\r\nA good rule of thumb is that you use `CharField` when you need to limit the maximum length, `TextField` otherwise.\r\n\r\nThis is not really Django-specific, also."}, {"tags": [], "down_vote_count": 0, "creation_date": 1325488182, "answer_id": 8698298, "path": "stack.django.answer", "score": 22, "up_vote_count": 22, "is_accepted": false, "last_activity_date": 1325488182, "body_markdown": "In some cases it is tied to how the field is used.  In some DB engines the field differences determine how (and if) you search for text in the field.  CharFields are typically used for things that are searchable, like if you want to search for &quot;one&quot; in the string &quot;one plus two&quot;.  Since the strings are shorter they are less time consuming for the engine to search through.  TextFields are typically not meant to be searched through (like maybe the body of a blog) but are meant to hold large chunks of text.  Now most of this depends on the DB Engine and like in Postgres it does not matter.\r\n\r\nEven if it does not matter, if you use ModelForms you get a different type of editing field in the form.  The ModelForm will generate an HTML form the size of one line of text for a CharField and multiline for a TextField."}, {"tags": [], "down_vote_count": 0, "creation_date": 1491818955, "answer_id": 43320380, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1503631889, "last_edit_date": 1503631889, "body_markdown": "For eg.,. 2 fields are added in a model like below..\r\n\r\n\tdescription = models.TextField(blank=True, null=True)\r\n\ttitle = models.CharField(max_length=64, blank=True, null=True)\r\n\r\nBelow are the mysql queries executed when migrations are applied.\r\n\r\n for `TextField`(description) the field is defined as a `longtext`\r\n    \r\n    ALTER TABLE `sometable_sometable` ADD COLUMN `description` longtext NULL;\r\n\r\n for `CharField`(title) the max_length(required) is defined as `varchar(64)`\r\n\r\n    ALTER TABLE `sometable_sometable` ADD COLUMN `title` varchar(64) NULL;\r\n    ALTER TABLE `sometable_sometable` ALTER COLUMN `title` DROP DEFAULT;"}], "title": "Django CharField vs TextField", "view_count": 68848, "answer_count": 3, "code_snippet": ["<code>CharField()</code>", "<code>TextField()</code>", "<code>CharField()</code>", "<code>TextField()</code>", "<code>varchar</code>", "<code>text</code>", "<code>CharField</code>", "<code>TextField</code>", "<code>TextField</code>", "<code>CLOB</code>", "<code>CharField</code>", "<code>max_length</code>", "<code>ORA-00910: specified length too long for its datatype</code>", "<code>description = models.TextField(blank=True, null=True)\ntitle = models.CharField(max_length=64, blank=True, null=True)\n</code>", "<code>TextField</code>", "<code>longtext</code>", "<code>ALTER TABLE `sometable_sometable` ADD COLUMN `description` longtext NULL;\n</code>", "<code>CharField</code>", "<code>varchar(64)</code>", "<code>ALTER TABLE `sometable_sometable` ADD COLUMN `title` varchar(64) NULL;\nALTER TABLE `sometable_sometable` ALTER COLUMN `title` DROP DEFAULT;\n</code>"], "path": "stack.django"}, {"tags": ["django", "templates"], "creation_date": 1274448896, "body_markdown": "I was wondering how to get the current URL within a template.\r\n\r\nSay my URL was\r\n\r\n\t/user/profile/\r\n\t\r\nHow do I return this to the template?\r\n", "last_edit_date": 1480526203, "up_vote_count": 225, "link": "https://stackoverflow.com/questions/2882490/how-to-get-the-current-url-within-a-django-template", "_childDocuments_": [{"tags": [], "down_vote_count": 4, "creation_date": 1323352406, "answer_id": 8432018, "path": "stack.django.answer", "score": 101, "up_vote_count": 105, "is_accepted": true, "last_activity_date": 1509967044, "last_edit_date": 1509967044, "body_markdown": "Django 1.9 and above:\r\n\r\n    ## template\r\n    {{ request.path }}\r\n    {{ request.get_full_path }}\r\n\r\nOld:\r\n\r\n    ## settings.py\r\n    TEMPLATE_CONTEXT_PROCESSORS = (\r\n        &#39;django.core.context_processors.request&#39;,\r\n    )\r\n    \r\n    ## views.py\r\n    from django.template import *\r\n    \r\n    def home(request):\r\n        return render_to_response(&#39;home.html&#39;, {}, context_instance=RequestContext(request))\r\n    \r\n    ## template\r\n    {{ request.path }}\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1334498584, "answer_id": 10162700, "path": "stack.django.answer", "score": 264, "up_vote_count": 265, "is_accepted": false, "last_activity_date": 1436212846, "last_edit_date": 1495540481, "body_markdown": "You can fetch the URL in your template like this:\r\n\r\n    &lt;p&gt;URL of this page: {{ request.get_full_path }}&lt;/p&gt;\r\n\r\nor by \r\n\r\n`{{ request.path }}` if you don&#39;t need the extra parameters.\r\n\r\n\r\nSome precisions and corrections should be brought to [hypete&#39;s](https://stackoverflow.com/a/8432018/183575) and [Igancio&#39;s](https://stackoverflow.com/a/2882511/183575) answers, I&#39;ll just summarize the whole idea here, for future reference.\r\n\r\nIf you need the `request` variable in the template, you **must** add the &#39;django.core.context_processors.request&#39; to the [`TEMPLATE_CONTEXT_PROCESSORS`](https://docs.djangoproject.com/en/dev/ref/settings/#template-context-processors) settings, it&#39;s not by default (Django 1.4).\r\n\r\nYou must also **not forget** the other context processors used by your applications. So, to add the request to the other default processors, you could add this in your settings, to avoid hard-coding the default processor list (that may very well change in later versions):\r\n\r\n    from django.conf.global_settings import TEMPLATE_CONTEXT_PROCESSORS as TCP\r\n    \r\n    TEMPLATE_CONTEXT_PROCESSORS = TCP + (\r\n        &#39;django.core.context_processors.request&#39;,\r\n    )\r\n\r\nThen, provided you [send the `request` contents in your response](https://docs.djangoproject.com/en/1.4/ref/templates/api/#subclassing-context-requestcontext), for example as this:\r\n\r\n    from django.shortcuts import render_to_response\r\n    from django.template import RequestContext\r\n    \r\n    def index(request):\r\n        return render_to_response(\r\n            &#39;user/profile.html&#39;,\r\n            { &#39;title&#39;: &#39;User profile&#39; },\r\n            context_instance=RequestContext(request)\r\n        )"}, {"tags": [], "down_vote_count": 1, "creation_date": 1421614132, "answer_id": 28014657, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1451569510, "last_edit_date": 1451569510, "body_markdown": "This is an old question but it can be summed up as easily as this if you&#39;re using django-registration.  \r\n\r\nIn your Log In and Log Out link (lets say in your page header) add the next parameter to the link which will go to login or logout.  Your link should look like this. \r\n\r\n    &lt;li&gt;&lt;a href=&quot;http://www.noobmovies.com/accounts/login/?next={{ request.path | urlencode }}&quot;&gt;Log In&lt;/a&gt;&lt;/li&gt;\r\n    \r\n    &lt;li&gt;&lt;a href=&quot;http://www.noobmovies.com/accounts/logout/?next={{ request.path | urlencode }}&quot;&gt;Log Out&lt;/a&gt;&lt;/li&gt;\r\n\r\nThat&#39;s simply it, nothing else needs to be done, upon logout they will immediately be redirected to the page they are at, for log in, they will fill out the form and it will then redirect to the page that they were on.  Even if they incorrectly try to log in it still works. "}, {"tags": [], "down_vote_count": 1, "creation_date": 1452842747, "answer_id": 34806146, "path": "stack.django.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1452842747, "body_markdown": "In django template &lt;br&gt;\r\nSimply get current url from `{{request.path}}`&lt;br&gt;\r\nFor getting full url  with parameters `{{request.get_full_path}}`\r\n\r\n**Note**:\r\nYou must add `request` in django `TEMPLATE_CONTEXT_PROCESSORS`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1476894186, "answer_id": 40136829, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1495093017, "last_edit_date": 1495093017, "body_markdown": "I suppose send to template full request is little bit redundant. I do it this way\r\n\r\n    def home(request):\r\n        app_url = request.path\r\n        return render(request, &#39;home.html&#39;, {&#39;app_url&#39;: app_url})\r\n\r\n    ##template\r\n    {{ app_url }}"}, {"tags": [], "down_vote_count": 0, "creation_date": 1497317589, "answer_id": 44511036, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1497317589, "body_markdown": "The other answers were incorrect, at least in my case. `request.path` does not provide the full url, only the relative url, e.g. `/paper/53`. I did not find any proper solution, so I ended up hardcoding the constant part of the url in the View before concatenating it with `request.path`."}, {"tags": [], "down_vote_count": 0, "creation_date": 1514682249, "answer_id": 48039149, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1514682249, "body_markdown": "Above answers are correct and they give great and short answer. \r\n\r\nI was also looking for getting the current page&#39;s url in Django template as my intention was to activate `HOME page`, `MEMBERS page`, `CONTACT page`, `ALL POSTS page` when they are requested.\r\n\r\nI am pasting the part of the HTML code snippet that you can see below to understand the use of `request.path`. You can see it in my `live website` at [http://pmtboyshostelraipur.pythonanywhere.com/][1]\r\n\r\n    &lt;div id=&quot;navbar&quot; class=&quot;navbar-collapse collapse&quot;&gt;\r\n      &lt;ul class=&quot;nav navbar-nav&quot;&gt;\r\n            &lt;!--HOME--&gt;\r\n            {% if &quot;/&quot; == request.path %}\r\n          &lt;li class=&quot;active text-center&quot;&gt;\r\n              &lt;a href=&quot;/&quot; data-toggle=&quot;tooltip&quot; title=&quot;Home&quot; data-placement=&quot;bottom&quot;&gt;\r\n                &lt;i class=&quot;fa fa-home&quot; style=&quot;font-size:25px; padding-left: 5px; padding-right: 5px&quot; aria-hidden=&quot;true&quot;&gt;\r\n                &lt;/i&gt;\r\n              &lt;/a&gt;\r\n          &lt;/li&gt;\r\n          {% else %}\r\n          &lt;li class=&quot;text-center&quot;&gt;\r\n              &lt;a href=&quot;/&quot; data-toggle=&quot;tooltip&quot; title=&quot;Home&quot; data-placement=&quot;bottom&quot;&gt;\r\n                &lt;i class=&quot;fa fa-home&quot; style=&quot;font-size:25px; padding-left: 5px; padding-right: 5px&quot; aria-hidden=&quot;true&quot;&gt;\r\n                &lt;/i&gt;\r\n              &lt;/a&gt;\r\n          &lt;/li&gt;\r\n          {% endif %}\r\n\r\n          &lt;!--MEMBERS--&gt;\r\n          {% if &quot;/members/&quot; == request.path %}\r\n          &lt;li class=&quot;active text-center&quot;&gt;\r\n            &lt;a href=&quot;/members/&quot; data-toggle=&quot;tooltip&quot; title=&quot;Members&quot;  data-placement=&quot;bottom&quot;&gt;\r\n              &lt;i class=&quot;fa fa-users&quot; style=&quot;font-size:25px; padding-left: 5px; padding-right: 5px&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;\r\n            &lt;/a&gt;\r\n          &lt;/li&gt;\r\n          {% else %}\r\n          &lt;li class=&quot;text-center&quot;&gt;\r\n            &lt;a href=&quot;/members/&quot; data-toggle=&quot;tooltip&quot; title=&quot;Members&quot;  data-placement=&quot;bottom&quot;&gt;\r\n              &lt;i class=&quot;fa fa-users&quot; style=&quot;font-size:25px; padding-left: 5px; padding-right: 5px&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;\r\n            &lt;/a&gt;\r\n          &lt;/li&gt;\r\n          {% endif %}\r\n\r\n          &lt;!--CONTACT--&gt;\r\n          {% if &quot;/contact/&quot; == request.path %}\r\n          &lt;li class=&quot;active text-center&quot;&gt;\r\n            &lt;a class=&quot;nav-link&quot; href=&quot;/contact/&quot;  data-toggle=&quot;tooltip&quot; title=&quot;Contact&quot;  data-placement=&quot;bottom&quot;&gt;\r\n                &lt;i class=&quot;fa fa-volume-control-phone&quot; style=&quot;font-size:25px; padding-left: 5px; padding-right: 5px&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;\r\n              &lt;/a&gt;\r\n          &lt;/li&gt;\r\n          {% else %}\r\n          &lt;li class=&quot;text-center&quot;&gt;\r\n            &lt;a class=&quot;nav-link&quot; href=&quot;/contact/&quot;  data-toggle=&quot;tooltip&quot; title=&quot;Contact&quot;  data-placement=&quot;bottom&quot;&gt;\r\n                &lt;i class=&quot;fa fa-volume-control-phone&quot; style=&quot;font-size:25px; padding-left: 5px; padding-right: 5px&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;\r\n              &lt;/a&gt;\r\n          &lt;/li&gt;\r\n          {% endif %}\r\n\r\n          &lt;!--ALL POSTS--&gt;\r\n          {% if &quot;/posts/&quot; == request.path %}\r\n          &lt;li class=&quot;text-center&quot;&gt;\r\n            &lt;a class=&quot;nav-link&quot; href=&quot;/posts/&quot;  data-toggle=&quot;tooltip&quot; title=&quot;All posts&quot;  data-placement=&quot;bottom&quot;&gt;\r\n                &lt;i class=&quot;fa fa-folder-open&quot; style=&quot;font-size:25px; padding-left: 5px; padding-right: 5px&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;\r\n              &lt;/a&gt;\r\n          &lt;/li&gt;\r\n          {% else %}\r\n          &lt;li class=&quot;text-center&quot;&gt;\r\n            &lt;a class=&quot;nav-link&quot; href=&quot;/posts/&quot;  data-toggle=&quot;tooltip&quot; title=&quot;All posts&quot;  data-placement=&quot;bottom&quot;&gt;\r\n                &lt;i class=&quot;fa fa-folder-open&quot; style=&quot;font-size:25px; padding-left: 5px; padding-right: 5px&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;\r\n              &lt;/a&gt;\r\n          &lt;/li&gt;\r\n          {% endif %}\r\n    &lt;/ul&gt;\r\n  &lt;/div&gt;\r\n\r\n\r\n  [1]: http://pmtboyshostelraipur.pythonanywhere.com/"}], "title": "How to get the current URL within a Django template?", "view_count": 166863, "answer_count": 7, "code_snippet": ["<code>/user/profile/\n</code>", "<code>request</code>", "<code>{{request.path}}</code>", "<code>django.core.context_processors.request</code>", "<code>startproject</code>", "<code>## template\n{{ request.path }}\n{{ request.get_full_path }}\n</code>", "<code>## settings.py\nTEMPLATE_CONTEXT_PROCESSORS = (\n    'django.core.context_processors.request',\n)\n\n## views.py\nfrom django.template import *\n\ndef home(request):\n    return render_to_response('home.html', {}, context_instance=RequestContext(request))\n\n## template\n{{ request.path }}\n</code>", "<code>render_to_response</code>", "<code>render_to_request</code>", "<code>TEMPLATE_CONTEXT_PROCESSORS</code>", "<code>request.path</code>", "<code>?foo=bar</code>", "<code>request.get_full_path</code>", "<code>&lt;p&gt;URL of this page: {{ request.get_full_path }}&lt;/p&gt;\n</code>", "<code>{{ request.path }}</code>", "<code>request</code>", "<code>TEMPLATE_CONTEXT_PROCESSORS</code>", "<code>from django.conf.global_settings import TEMPLATE_CONTEXT_PROCESSORS as TCP\n\nTEMPLATE_CONTEXT_PROCESSORS = TCP + (\n    'django.core.context_processors.request',\n)\n</code>", "<code>request</code>", "<code>from django.shortcuts import render_to_response\nfrom django.template import RequestContext\n\ndef index(request):\n    return render_to_response(\n        'user/profile.html',\n        { 'title': 'User profile' },\n        context_instance=RequestContext(request)\n    )\n</code>", "<code>request</code>", "<code>Note that a settings file should not import from global_settings, because that\u2019s redundant</code>", "<code>return render(request, 'user/profile.html', {'title': 'User profile'})</code>", "<code>{{request.get_full_path|urlenode}}</code>", "<code>{{request.path}}</code>", "<code>{{request.get_full_path}}</code>", "<code>request</code>", "<code>TEMPLATE_CONTEXT_PROCESSORS</code>", "<code>def home(request):\n    app_url = request.path\n    return render(request, 'home.html', {'app_url': app_url})\n\n##template\n{{ app_url }}\n</code>", "<code>request.path</code>", "<code>/paper/53</code>", "<code>request.path</code>", "<code>&lt;li&gt;&lt;a href=\"http://www.noobmovies.com/accounts/login/?next={{ request.path | urlencode }}\"&gt;Log In&lt;/a&gt;&lt;/li&gt;\n\n&lt;li&gt;&lt;a href=\"http://www.noobmovies.com/accounts/logout/?next={{ request.path | urlencode }}\"&gt;Log Out&lt;/a&gt;&lt;/li&gt;\n</code>", "<code>{{ request.path|urlencode }}</code>", "<code>HOME page</code>", "<code>MEMBERS page</code>", "<code>CONTACT page</code>", "<code>ALL POSTS page</code>", "<code>request.path</code>", "<code>live website</code>", "<code>&lt;div id=\"navbar\" class=\"navbar-collapse collapse\"&gt;\n  &lt;ul class=\"nav navbar-nav\"&gt;\n        &lt;!--HOME--&gt;\n        {% if \"/\" == request.path %}\n      &lt;li class=\"active text-center\"&gt;\n          &lt;a href=\"/\" data-toggle=\"tooltip\" title=\"Home\" data-placement=\"bottom\"&gt;\n            &lt;i class=\"fa fa-home\" style=\"font-size:25px; padding-left: 5px; padding-right: 5px\" aria-hidden=\"true\"&gt;\n            &lt;/i&gt;\n          &lt;/a&gt;\n      &lt;/li&gt;\n      {% else %}\n      &lt;li class=\"text-center\"&gt;\n          &lt;a href=\"/\" data-toggle=\"tooltip\" title=\"Home\" data-placement=\"bottom\"&gt;\n            &lt;i class=\"fa fa-home\" style=\"font-size:25px; padding-left: 5px; padding-right: 5px\" aria-hidden=\"true\"&gt;\n            &lt;/i&gt;\n          &lt;/a&gt;\n      &lt;/li&gt;\n      {% endif %}\n\n      &lt;!--MEMBERS--&gt;\n      {% if \"/members/\" == request.path %}\n      &lt;li class=\"active text-center\"&gt;\n        &lt;a href=\"/members/\" data-toggle=\"tooltip\" title=\"Members\"  data-placement=\"bottom\"&gt;\n          &lt;i class=\"fa fa-users\" style=\"font-size:25px; padding-left: 5px; padding-right: 5px\" aria-hidden=\"true\"&gt;&lt;/i&gt;\n        &lt;/a&gt;\n      &lt;/li&gt;\n      {% else %}\n      &lt;li class=\"text-center\"&gt;\n        &lt;a href=\"/members/\" data-toggle=\"tooltip\" title=\"Members\"  data-placement=\"bottom\"&gt;\n          &lt;i class=\"fa fa-users\" style=\"font-size:25px; padding-left: 5px; padding-right: 5px\" aria-hidden=\"true\"&gt;&lt;/i&gt;\n        &lt;/a&gt;\n      &lt;/li&gt;\n      {% endif %}\n\n      &lt;!--CONTACT--&gt;\n      {% if \"/contact/\" == request.path %}\n      &lt;li class=\"active text-center\"&gt;\n        &lt;a class=\"nav-link\" href=\"/contact/\"  data-toggle=\"tooltip\" title=\"Contact\"  data-placement=\"bottom\"&gt;\n            &lt;i class=\"fa fa-volume-control-phone\" style=\"font-size:25px; padding-left: 5px; padding-right: 5px\" aria-hidden=\"true\"&gt;&lt;/i&gt;\n          &lt;/a&gt;\n      &lt;/li&gt;\n      {% else %}\n      &lt;li class=\"text-center\"&gt;\n        &lt;a class=\"nav-link\" href=\"/contact/\"  data-toggle=\"tooltip\" title=\"Contact\"  data-placement=\"bottom\"&gt;\n            &lt;i class=\"fa fa-volume-control-phone\" style=\"font-size:25px; padding-left: 5px; padding-right: 5px\" aria-hidden=\"true\"&gt;&lt;/i&gt;\n          &lt;/a&gt;\n      &lt;/li&gt;\n      {% endif %}\n\n      &lt;!--ALL POSTS--&gt;\n      {% if \"/posts/\" == request.path %}\n      &lt;li class=\"text-center\"&gt;\n        &lt;a class=\"nav-link\" href=\"/posts/\"  data-toggle=\"tooltip\" title=\"All posts\"  data-placement=\"bottom\"&gt;\n            &lt;i class=\"fa fa-folder-open\" style=\"font-size:25px; padding-left: 5px; padding-right: 5px\" aria-hidden=\"true\"&gt;&lt;/i&gt;\n          &lt;/a&gt;\n      &lt;/li&gt;\n      {% else %}\n      &lt;li class=\"text-center\"&gt;\n        &lt;a class=\"nav-link\" href=\"/posts/\"  data-toggle=\"tooltip\" title=\"All posts\"  data-placement=\"bottom\"&gt;\n            &lt;i class=\"fa fa-folder-open\" style=\"font-size:25px; padding-left: 5px; padding-right: 5px\" aria-hidden=\"true\"&gt;&lt;/i&gt;\n          &lt;/a&gt;\n      &lt;/li&gt;\n      {% endif %}\n&lt;/ul&gt;\n</code>"], "path": "stack.django"}, {"tags": ["handlebars.js", "mustache", "client-side-templating", "templating-engine"], "creation_date": 1336756545, "body_markdown": "Major differences I&#39;ve seen are:\r\n\r\n* Handlebars adds #if, #unless, #with, and #each\r\n* Handlebars adds helpers\r\n* Handlebars templates are compiled (Mustache can be too)\r\n* Handlebars supports [paths](https://github.com/wycats/handlebars.js#paths)\r\n* Allows use of {{this}} in blocks (which outputs the current item&#39;s string value)\r\n* Handlebars.SafeString() (and maybe some other methods)\r\n* Handlebars is [2 to 7 times faster][1]\r\n* Mustache supports [inverted sections](https://github.com/janl/mustache.js#inverted-sections) (i.e. `if !x ...`)\r\n\r\n(Please correct me if I&#39;m wrong with the above.)\r\n\r\nAre there any other major differences I am missing?\r\n\r\n[1]: https://github.com/wycats/handlebars.js/#performance", "last_edit_date": 1508000030, "up_vote_count": 278, "link": "https://stackoverflow.com/questions/10555820/what-are-the-differences-between-mustache-js-and-handlebars-js", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1343851016, "answer_id": 11766634, "path": "stack.django.answer", "score": 108, "up_vote_count": 108, "is_accepted": false, "last_activity_date": 1408030289, "last_edit_date": 1408030289, "body_markdown": "You&#39;ve pretty much nailed it, however Mustache templates can also be compiled.\r\n\r\nMustache is missing helpers and the more advanced blocks because it strives to be logicless.  Handlebars&#39; custom helpers can be very useful, but often end up introducing logic into your templates.\r\n\r\nMustache has many different compilers (JavaScript, Ruby, Python, C, etc.). Handlebars began in JavaScript, now there are projects like [django-handlebars][1], [handlebars.java][2], [handlebars-ruby][3], [lightncandy (PHP)][4], and [handlebars-objc][5].\r\n\r\n\r\n  [1]: https://github.com/yavorskiy/django-handlebars\r\n  [2]: https://github.com/jknack/handlebars.java\r\n  [3]: https://github.com/MSch/handlebars-ruby\r\n  [4]: https://github.com/zordius/lightncandy\r\n  [5]: https://github.com/Bertrand/handlebars-objc"}, {"tags": [], "down_vote_count": 1, "creation_date": 1388226091, "answer_id": 20813423, "path": "stack.django.answer", "score": 57, "up_vote_count": 58, "is_accepted": false, "last_activity_date": 1448896634, "last_edit_date": 1448896634, "body_markdown": "**Mustache pros:**\r\n\r\n+ Very popular choice with a large, active community.\r\n+ Server side support in many languages, including Java.\r\n+ Logic-less templates do a great job of forcing you to separate presentation from logic.\r\n+ Clean syntax leads to templates that are easy to build, read, and maintain.\r\n\r\n**Mustache cons:**\r\n\r\n   - A little too logic-less: basic tasks (e.g. label alternate rows with different CSS classes) are difficult.\r\n   - View logic is often pushed back to the server or implemented as a &quot;lambda&quot; (callable function).\r\n   - For lambdas to work on client and server, you must write them in JavaScript.\r\n\r\n\r\n\r\n**Handlebars pros:**\r\n\r\n   + Logic-less templates do a great job of forcing you to separate presentation from logic.\r\n   + Clean syntax leads to templates that are easy to build, read, and maintain.\r\n   + Compiled rather than interpreted templates.\r\n   + Better support for paths than mustache (ie, reaching deep into a context object).\r\n   + Better support for global helpers than mustache.\r\n\r\n**Handlebars cons:**\r\n\r\n   - Requires server-side JavaScript to render on the server.\r\n\r\n\r\nSource: [The client-side templating throwdown: mustache, handlebars, dust.js, and more][1]\r\n\r\n\r\n  [1]: http://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more"}, {"tags": [], "down_vote_count": 4, "creation_date": 1390064968, "answer_id": 21207212, "path": "stack.django.answer", "score": 17, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1502994120, "last_edit_date": 1502994120, "body_markdown": "**NOTE:** _This answer is outdated. It was true at the time it was posted, but no longer is._\r\n\r\nMustache has interpreters in many languages, while Handlebars is Javascript only."}, {"tags": [], "down_vote_count": 0, "creation_date": 1414946592, "answer_id": 26701752, "path": "stack.django.answer", "score": 19, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1465235007, "last_edit_date": 1465235007, "body_markdown": "One subtle but significant difference is in the way the two libraries approach scope. Mustache will fall back to parent scope if it can&#39;t find a variable within the current context; Handlebars will return a blank string.\r\n\r\nThis is barely mentioned in the GitHub README, where there&#39;s one line for it:\r\n\r\n&gt; Handlebars deviates from Mustache slightly in that it does not perform recursive lookup by default.\r\n\r\nHowever, as noted there, there is a flag to make Handlebars behave in the same way as Mustache -- but it affects performance.\r\n\r\nThis has an effect on the way you can use `#` variables as conditionals.\r\n\r\nFor example in Mustache you can do this:\r\n\r\n    {{#variable}}&lt;span class=&quot;text&quot;&gt;{{variable}}&lt;/span&gt;{{/variable}}\r\n\r\nIt basically means &quot;if variable exists and is truthy, print a span with the variable in it&quot;. But in Handlebars, you would either have to:\r\n\r\n - use `{{this}}` instead\r\n - use a parent path, i.e., `{{../variable}}` to get back out to relevant scope\r\n - define a child `variable` value within the parent `variable` object\r\n\r\nMore details on this, if you want them, [here](http://guypursey.com/blog/201411022009-mustache-vs-handlebars-scoping)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1433183498, "answer_id": 30580684, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1433183498, "body_markdown": "\u2014In addition to using &quot;this&quot; for handlebars, and the nested variable within variable block for mustache, you can also use the nested dot in a block for mustache:\r\n\r\n        {{#variable}}&lt;span class=&quot;text&quot;&gt;{{.}}&lt;/span&gt;{{/variable}}"}, {"tags": [], "down_vote_count": 0, "creation_date": 1447929310, "answer_id": 33801437, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1447929310, "body_markdown": "One more subtle difference is the treatment of falsy values in `{{#property}}...{{/property}}` blocks. Most mustache implementations will just obey JS falsiness here, not rendering the block if `property` is `&#39;&#39;` or &#39;0&#39;.\r\n\r\nHandlebars *will* render the block for `&#39;&#39;` and `0`, but not other falsy values. This can cause some trouble when migrating templates."}, {"tags": [], "down_vote_count": 0, "creation_date": 1470225019, "answer_id": 38742789, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1470225019, "body_markdown": "Another difference between them is the size of the file:\r\n\r\n* Mustache.js has 9kb,\r\n* Handlebars.js has 86kb, or 18kb if using [precompiled templates][1].\r\n\r\nTo see the performance benefits of Handlebars.js we must use precompiled templates.\r\n\r\nSource: [An Overview of JavaScript Templating Engines][2]\r\n\r\n\r\n  [1]: http://handlebarsjs.com/precompilation.html\r\n  [2]: https://www.sitepoint.com/overview-javascript-templating-engines/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1479419969, "answer_id": 40665806, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1479419969, "body_markdown": "I feel that one of the mentioned cons for &quot;Handlebars&quot; isnt&#39; really valid anymore.\r\n\r\nHandlebars.java now allows us to share the same template languages for both client and server which is a big win for large projects with 1000+ components that require serverside rendering for SEO\r\n\r\nTake a look at https://github.com/jknack/handlebars.java "}], "title": "What are the differences between Mustache.js and Handlebars.js?", "view_count": 95471, "answer_count": 8, "code_snippet": ["<code>if !x ...</code>", "<code>tr:nth-child(even)</code>", "<code>tr:nth-child(odd)</code>", "<code>tr:nth-child(2n)</code>", "<code>#</code>", "<code>{{#variable}}&lt;span class=\"text\"&gt;{{variable}}&lt;/span&gt;{{/variable}}\n</code>", "<code>{{this}}</code>", "<code>{{../variable}}</code>", "<code>variable</code>", "<code>variable</code>", "<code>{{#property}}...{{/property}}</code>", "<code>property</code>", "<code>''</code>", "<code>''</code>", "<code>0</code>", "<code>    {{#variable}}&lt;span class=\"text\"&gt;{{.}}&lt;/span&gt;{{/variable}}\n</code>"], "path": "stack.django"}, {"tags": ["python", "django"], "creation_date": 1236679830, "body_markdown": "I query a model, \r\n\r\n    Members.objects.all()\r\n\r\nand it returns say\r\n\r\n    Eric, Salesman, X-Shop\r\n    Freddie, Manager, X2-Shop\r\n    Teddy, Salesman, X2-Shop\r\n    Sean, Manager, X2-Shop\r\n\r\nWhat i want is, to know the best Django way to fire\r\na group_by query to my db, as like,\r\n\r\n    Members.objects.all().group_by(&#39;designation&#39;)\r\n\r\nWhich doesn&#39;t work of course.\r\nI know we can do some tricks on &quot;django/db/models/query.py&quot;, \r\nbut i am just curious to know how to do it without patching.\r\n", "last_edit_date": 1470311181, "up_vote_count": 212, "link": "https://stackoverflow.com/questions/629551/how-to-query-as-group-by-in-django", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1236680697, "answer_id": 629584, "path": "stack.django.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1236680697, "body_markdown": "You need to do custom SQL as exemplified in this snippet:\r\n\r\n[Custom SQL via subquery][1]\r\n\r\nOr in a custom manager as shown in the online Django docs:\r\n\r\n[Adding extra Manager methods][2]\r\n\r\n\r\n  [1]: http://www.djangosnippets.org/snippets/236/\r\n  [2]: http://docs.djangoproject.com/en/dev/topics/db/managers/#adding-extra-manager-methods"}, {"tags": [], "down_vote_count": 2, "creation_date": 1236681044, "answer_id": 629600, "path": "stack.django.answer", "score": 35, "up_vote_count": 37, "is_accepted": false, "last_activity_date": 1342189301, "last_edit_date": 1342189301, "body_markdown": "An easy solution, but not in a proper way is to use RAW-SQL:\r\n\r\n[http://docs.djangoproject.com/en/dev/topics/db/sql/#topics-db-sql][1]\r\n\r\nAnother solution is to use the group_by property:\r\n\r\n    query = Members.objects.all().query\r\n    query.group_by = [&#39;designation&#39;]\r\n    results = QuerySet(query=query, model=Members)\r\n\r\nYou can now iterate over the results variable to retrieve your results. Note that group_by is not documented and may be changed in future version of Django.\r\n\r\nAnd... why do you want to use group_by? If you don&#39;t use aggregation, you can use order_by to achieve an alike result.\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/topics/db/sql/#topics-db-sql\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1236683308, "answer_id": 629691, "path": "stack.django.answer", "score": 323, "up_vote_count": 324, "is_accepted": true, "last_activity_date": 1487342868, "last_edit_date": 1487342868, "body_markdown": "If you mean to do aggregation you can use the [aggregation features of the ORM][1]:\r\n\r\n    from django.db.models import Count\r\n    Members.objects.values(&#39;designation&#39;).annotate(dcount=Count(&#39;designation&#39;))\r\n\r\nThis results in a query similar to\r\n\r\n    SELECT designation, COUNT(designation) AS dcount\r\n    FROM members GROUP BY designation\r\n\r\nand the output would be of the form\r\n\r\n    [{&#39;designation&#39;: &#39;Salesman&#39;, &#39;dcount&#39;: 2}, \r\n     {&#39;designation&#39;: &#39;Manager&#39;, &#39;dcount&#39;: 2}]\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/topics/db/aggregation/#topics-db-aggregation"}, {"tags": [], "down_vote_count": 3, "creation_date": 1415622135, "answer_id": 26843739, "path": "stack.django.answer", "score": -1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1415622135, "body_markdown": "If I&#39;m not mistaking you can use, *whatever-query-set*.group_by=[&#39;*field*&#39;] "}, {"tags": [], "down_vote_count": 0, "creation_date": 1447351580, "answer_id": 33678300, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1447351580, "body_markdown": "**Django does not support free group by queries**. I learned it in the very bad way. ORM is not designed to support stuff like what you want to do, without using custom SQL. You are limited to:\r\n\r\n  - RAW sql (i.e. MyModel.objects.raw())\r\n  - `cr.execute` sentences (and a hand-made parsing of the result).\r\n  - `.annotate()` (the group by sentences are performed in the child model for .annotate(), in examples like aggregating lines_count=Count(&#39;lines&#39;))).\r\n\r\nOver a queryset `qs` you can call `qs.query.group_by = [&#39;field1&#39;, &#39;field2&#39;, ...]` but it is risky if you don&#39;t know what query are you editing and have no guarantee that it will work and not break internals of the QuerySet object. Besides, it is an internal (undocumented) API you should not access directly without risking the code not being anymore compatible with future Django versions."}, {"tags": [], "down_vote_count": 1, "creation_date": 1475163211, "answer_id": 39774497, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1475165644, "last_edit_date": 1475165644, "body_markdown": "There is module that allows you to group Django models and still work with a QuerySet in the result: https://github.com/kako-nawao/django-group-by\r\n\r\nFor example:\r\n\r\n    from django_group_by import GroupByMixin\r\n\r\n    class BookQuerySet(QuerySet, GroupByMixin):\r\n        pass\r\n\r\n    class Book(Model):\r\n        title = TextField(...)\r\n        author = ForeignKey(User, ...)\r\n        shop = ForeignKey(Shop, ...)\r\n        price = DecimalField(...)\r\n\r\n---\r\n\r\n    class GroupedBookListView(PaginationMixin, ListView):\r\n        template_name = &#39;book/books.html&#39;\r\n        model = Book\r\n        paginate_by = 100\r\n    \r\n        def get_queryset(self):\r\n            return Book.objects.group_by(&#39;title&#39;, &#39;author&#39;).annotate(\r\n                shop_count=Count(&#39;shop&#39;), price_avg=Avg(&#39;price&#39;)).order_by(\r\n                &#39;name&#39;, &#39;author&#39;).distinct()\r\n    \r\n        def get_context_data(self, **kwargs):\r\n            return super().get_context_data(total_count=self.get_queryset().count(), **kwargs)\r\n\r\n\r\n&#39;book/books.html&#39;\r\n\r\n    &lt;ul&gt;\r\n    {% for book in object_list %}\r\n        &lt;li&gt;\r\n            &lt;h2&gt;{{ book.title }}&lt;/td&gt;\r\n            &lt;p&gt;{{ book.author.last_name }}, {{ book.author.first_name }}&lt;/p&gt;\r\n            &lt;p&gt;{{ book.shop_count }}&lt;/p&gt;\r\n            &lt;p&gt;{{ book.price_avg }}&lt;/p&gt;\r\n        &lt;/li&gt;\r\n    {% endfor %}\r\n    &lt;/ul&gt;\r\n\r\nThe difference to the `annotate`/`aggregate` basic Django queries is the use of the attributes of a related field, e.g. `book.author.last_name`.\r\n\r\nIf you need the PKs of the instances that have been grouped together, add the following annotation:\r\n\r\n    .annotate(pks=ArrayAgg(&#39;id&#39;))\r\n\r\nNOTE: `ArrayAgg` is a Postgres specific function, available from Django 1.9 onwards: https://docs.djangoproject.com/en/1.10/ref/contrib/postgres/aggregates/#arrayagg "}, {"tags": [], "down_vote_count": 0, "creation_date": 1510049466, "answer_id": 47155186, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1510050380, "last_edit_date": 1510050380, "body_markdown": "The [document](https://docs.djangoproject.com/en/1.11/topics/db/aggregation/#values) says that you can use values to group the queryset .  \r\n\r\n    class Travel(models.Model):\r\n        interest = models.ForeignKey(Interest)\r\n        user = models.ForeignKey(User)\r\n        time = models.DateTimeField(auto_now_add=True)\r\n\r\n    # Find the travel and group by the interest:\r\n\r\n    &gt;&gt;&gt; Travel.objects.values(&#39;interest&#39;).annotate(Count(&#39;user&#39;))\r\n    &lt;QuerySet [{&#39;interest&#39;: 5, &#39;user__count&#39;: 2}, {&#39;interest&#39;: 6, &#39;user__count&#39;: 1}]&gt;\r\n    # the interest(id=5) had been visited for 2 times, \r\n    # and the interest(id=6) had only been visited for 1 time.\r\n\r\n    &gt;&gt;&gt; Travel.objects.values(&#39;interest&#39;).annotate(Count(&#39;user&#39;, distinct=True)) \r\n    &lt;QuerySet [{&#39;interest&#39;: 5, &#39;user__count&#39;: 1}, {&#39;interest&#39;: 6, &#39;user__count&#39;: 1}]&gt;\r\n    # the interest(id=5) had been visited by only one person (but this person had \r\n    #  visited the interest for 2 times\r\n\r\nYou can find all the books and group them by name using this code:\r\n\r\n    Book.objects.values(&#39;name&#39;).annotate(Count(&#39;id&#39;)).order_by() # ensure you add the order_by()\r\n\r\nYou can watch some cheet sheet [here](https://github.com/ramwin/django_reference/blob/master/models_action%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C.md#groupby).\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1510787286, "answer_id": 47318855, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1510793657, "last_edit_date": 1510793657, "body_markdown": "You can also use the `regroup` template tag to group by attributes. From the docs:\r\n\r\n    cities = [\r\n        {&#39;name&#39;: &#39;Mumbai&#39;, &#39;population&#39;: &#39;19,000,000&#39;, &#39;country&#39;: &#39;India&#39;},\r\n        {&#39;name&#39;: &#39;Calcutta&#39;, &#39;population&#39;: &#39;15,000,000&#39;, &#39;country&#39;: &#39;India&#39;},\r\n        {&#39;name&#39;: &#39;New York&#39;, &#39;population&#39;: &#39;20,000,000&#39;, &#39;country&#39;: &#39;USA&#39;},\r\n        {&#39;name&#39;: &#39;Chicago&#39;, &#39;population&#39;: &#39;7,000,000&#39;, &#39;country&#39;: &#39;USA&#39;},\r\n        {&#39;name&#39;: &#39;Tokyo&#39;, &#39;population&#39;: &#39;33,000,000&#39;, &#39;country&#39;: &#39;Japan&#39;},\r\n    ]\r\n    \r\n    ...\r\n\r\n    {% regroup cities by country as country_list %}\r\n\r\n    &lt;ul&gt;\r\n        {% for country in country_list %}\r\n            &lt;li&gt;{{ country.grouper }}\r\n                &lt;ul&gt;\r\n                {% for city in country.list %}\r\n                    &lt;li&gt;{{ city.name }}: {{ city.population }}&lt;/li&gt;\r\n                {% endfor %}\r\n                &lt;/ul&gt;\r\n            &lt;/li&gt;\r\n        {% endfor %}\r\n    &lt;/ul&gt;\r\n\r\nLooks like this:\r\n\r\n - India\r\n       - Mumbai: 19,000,000\r\n       - Calcutta: 15,000,000 \r\n - USA\r\n       - New York: 20,000,000\r\n       - Chicago: 7,000,000\r\n - Japan\r\n       - Tokyo: 33,000,000\r\n\r\nIt also works on `QuerySet`s I believe.\r\n\r\nsource: https://docs.djangoproject.com/en/1.11/ref/templates/builtins/#regroup"}], "title": "How to query as GROUP BY in django?", "view_count": 180845, "answer_count": 8, "code_snippet": ["<code>Members.objects.all()\n</code>", "<code>Eric, Salesman, X-Shop\nFreddie, Manager, X2-Shop\nTeddy, Salesman, X2-Shop\nSean, Manager, X2-Shop\n</code>", "<code>Members.objects.all().group_by('designation')\n</code>", "<code>from django.db.models import Count\nMembers.objects.values('designation').annotate(dcount=Count('designation'))\n</code>", "<code>SELECT designation, COUNT(designation) AS dcount\nFROM members GROUP BY designation\n</code>", "<code>[{'designation': 'Salesman', 'dcount': 2}, \n {'designation': 'Manager', 'dcount': 2}]\n</code>", "<code>Members.objects.filter(date=some_date).values('designation').annotate(dcount=Count('designation'))</code>", "<code>Members.objects.order_by('disignation').values('designation').annotate(dcount=Count('designation'))</code>", "<code>query = Members.objects.all().query\nquery.group_by = ['designation']\nresults = QuerySet(query=query, model=Members)\n</code>", "<code>from django_group_by import GroupByMixin\n\nclass BookQuerySet(QuerySet, GroupByMixin):\n    pass\n\nclass Book(Model):\n    title = TextField(...)\n    author = ForeignKey(User, ...)\n    shop = ForeignKey(Shop, ...)\n    price = DecimalField(...)\n</code>", "<code>class GroupedBookListView(PaginationMixin, ListView):\n    template_name = 'book/books.html'\n    model = Book\n    paginate_by = 100\n\n    def get_queryset(self):\n        return Book.objects.group_by('title', 'author').annotate(\n            shop_count=Count('shop'), price_avg=Avg('price')).order_by(\n            'name', 'author').distinct()\n\n    def get_context_data(self, **kwargs):\n        return super().get_context_data(total_count=self.get_queryset().count(), **kwargs)\n</code>", "<code>&lt;ul&gt;\n{% for book in object_list %}\n    &lt;li&gt;\n        &lt;h2&gt;{{ book.title }}&lt;/td&gt;\n        &lt;p&gt;{{ book.author.last_name }}, {{ book.author.first_name }}&lt;/p&gt;\n        &lt;p&gt;{{ book.shop_count }}&lt;/p&gt;\n        &lt;p&gt;{{ book.price_avg }}&lt;/p&gt;\n    &lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code>", "<code>annotate</code>", "<code>aggregate</code>", "<code>book.author.last_name</code>", "<code>.annotate(pks=ArrayAgg('id'))\n</code>", "<code>ArrayAgg</code>", "<code>values</code>", "<code>values</code>", "<code>select</code>", "<code>group_by</code>", "<code>group by</code>", "<code>group_by</code>", "<code>group_by</code>", "<code>GROUP BY</code>", "<code>GROUP BY</code>", "<code>values</code>", "<code>values</code>", "<code>itertools.groupby</code>", "<code>values</code>", "<code>group by</code>", "<code>values</code>", "<code>annotate</code>", "<code>itertools.groupby</code>", "<code>regroup</code>", "<code>cities = [\n    {'name': 'Mumbai', 'population': '19,000,000', 'country': 'India'},\n    {'name': 'Calcutta', 'population': '15,000,000', 'country': 'India'},\n    {'name': 'New York', 'population': '20,000,000', 'country': 'USA'},\n    {'name': 'Chicago', 'population': '7,000,000', 'country': 'USA'},\n    {'name': 'Tokyo', 'population': '33,000,000', 'country': 'Japan'},\n]\n\n...\n\n{% regroup cities by country as country_list %}\n\n&lt;ul&gt;\n    {% for country in country_list %}\n        &lt;li&gt;{{ country.grouper }}\n            &lt;ul&gt;\n            {% for city in country.list %}\n                &lt;li&gt;{{ city.name }}: {{ city.population }}&lt;/li&gt;\n            {% endfor %}\n            &lt;/ul&gt;\n        &lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</code>", "<code>QuerySet</code>", "<code>cr.execute</code>", "<code>.annotate()</code>", "<code>qs</code>", "<code>qs.query.group_by = ['field1', 'field2', ...]</code>", "<code>class Travel(models.Model):\n    interest = models.ForeignKey(Interest)\n    user = models.ForeignKey(User)\n    time = models.DateTimeField(auto_now_add=True)\n\n# Find the travel and group by the interest:\n\n&gt;&gt;&gt; Travel.objects.values('interest').annotate(Count('user'))\n&lt;QuerySet [{'interest': 5, 'user__count': 2}, {'interest': 6, 'user__count': 1}]&gt;\n# the interest(id=5) had been visited for 2 times, \n# and the interest(id=6) had only been visited for 1 time.\n\n&gt;&gt;&gt; Travel.objects.values('interest').annotate(Count('user', distinct=True)) \n&lt;QuerySet [{'interest': 5, 'user__count': 1}, {'interest': 6, 'user__count': 1}]&gt;\n# the interest(id=5) had been visited by only one person (but this person had \n#  visited the interest for 2 times\n</code>", "<code>Book.objects.values('name').annotate(Count('id')).order_by() # ensure you add the order_by()\n</code>"], "path": "stack.django"}, {"tags": ["django", "django-authentication", "django-users"], "creation_date": 1220545189, "body_markdown": "What&#39;s the best way to extend the User model (bundled with Django&#39;s authentication app) with custom fields? I would also possibly like to use the email as the username (for authentication purposes).\r\n\r\nI&#39;ve already seen a [few][1] [ways][2] to do it, but can&#39;t decide on which one is the best.\r\n\r\n\r\n  [1]: http://scottbarnham.com/blog/2008/08/21/extending-the-django-user-model-with-inheritance/\r\n  [2]: http://www.b-list.org/weblog/2006/jun/06/django-tips-extending-user-model/", "last_edit_date": 1405683386, "up_vote_count": 353, "link": "https://stackoverflow.com/questions/44109/extending-the-user-model-with-custom-fields-in-django", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1220546139, "answer_id": 44133, "path": "stack.django.answer", "score": 41, "up_vote_count": 41, "is_accepted": false, "last_activity_date": 1274104344, "last_edit_date": 1274104344, "body_markdown": "There is an official recommendation on [storing additional information about users][1].\r\nThe Django Book also discusses this problem in section [Profiles][2].\r\n\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users\r\n  [2]: http://www.djangobook.com/en/1.0/chapter12/#cn222"}, {"tags": [], "down_vote_count": 3, "creation_date": 1220547738, "answer_id": 44178, "path": "stack.django.answer", "score": 201, "up_vote_count": 204, "is_accepted": true, "last_activity_date": 1434155924, "last_edit_date": 1434155924, "body_markdown": "The least painful and indeed Django-recommended way of doing this is through a `OneToOneField(User)` property.\r\n\r\n&gt; ##[Extending the existing User model][dj_extending_user]\r\n\r\n&gt; &amp;hellip;\r\n\r\n&gt; If you wish to store information related to `User`, you can use a [one-to-one relationship][dj_121] to a model containing the fields for additional information. This one-to-one model is often called a profile model, as it might store non-auth related information about a site user.\r\n\r\nThat said, extending `django.contrib.auth.models.User` and supplanting it also works...\r\n\r\n&gt; ##[Substituting a custom User model][dj_subst_user]\r\n\r\n&gt; Some kinds of projects may have authentication requirements for which Django\u2019s built-in `User` model is not always appropriate. For instance, on some sites it makes more sense to use an email address as your identification token instead of a username.\r\n\r\n&gt; *[Ed: **Two warnings and a notification follow**, mentioning that this is **pretty drastic**.]*\r\n\r\nI would definitely stay away from changing the actual User class in your Django source tree and/or copying and altering the auth module.\r\n\r\n[dj_extending_user]: https://docs.djangoproject.com/en/dev/topics/auth/customizing/#extending-the-existing-user-model\r\n[dj_121]: https://docs.djangoproject.com/en/dev/ref/models/fields/#ref-onetoone\r\n[dj_subst_user]:https://docs.djangoproject.com/en/dev/topics/auth/customizing/#substituting-a-custom-user-model"}, {"tags": [], "down_vote_count": 0, "creation_date": 1238590869, "answer_id": 705389, "path": "stack.django.answer", "score": 21, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1238590869, "body_markdown": "The below one is another approach to extend an User.\r\nI feel it is more clear,easy,readable  then above two approaches.\r\n\r\n[http://scottbarnham.com/blog/2008/08/21/extending-the-django-user-model-with-inheritance/][1]\r\n\r\nUsing above approach:\r\n\r\n 1. you don&#39;t need to use\r\n    *user.get_profile().newattribute* to access the additional information\r\n    related to the user\r\n 2. you can just directly access\r\n    additional new attributes via \r\n    *user.newattribute*\r\n\r\n  [1]: http://scottbarnham.com/blog/2008/08/21/extending-the-django-user-model-with-inheritance/"}, {"tags": [], "down_vote_count": 2, "creation_date": 1244479994, "answer_id": 965883, "path": "stack.django.answer", "score": 212, "up_vote_count": 214, "is_accepted": false, "last_activity_date": 1481716174, "last_edit_date": 1481716174, "body_markdown": "**Note: this answer is deprecated. see other answers if you are using Django 1.7 or later.**\r\n\r\nThis is how I do it.\r\n\r\n    #in models.py\r\n    from django.contrib.auth.models import User\r\n    from django.db.models.signals import post_save\r\n    \r\n    class UserProfile(models.Model):  \r\n        user = models.OneToOneField(User)  \r\n        #other fields here\r\n\r\n        def __str__(self):  \r\n\t          return &quot;%s&#39;s profile&quot; % self.user  \r\n  \r\n    def create_user_profile(sender, instance, created, **kwargs):  \r\n        if created:  \r\n           profile, created = UserProfile.objects.get_or_create(user=instance)  \r\n  \r\n    post_save.connect(create_user_profile, sender=User) \r\n\r\n    #in settings.py\r\n    AUTH_PROFILE_MODULE = &#39;YOURAPP.UserProfile&#39;\r\nThis will create a userprofile each time a user is saved if it is created. \r\nYou can then use\r\n\r\n      user.get_profile().whatever\r\n\r\nHere is some more info from the docs\r\n\r\n[http://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users][1]\r\n\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users\r\n\r\n**Update:** Please note that `AUTH_PROFILE_MODULE` is deprecated since v1.5: https://docs.djangoproject.com/en/1.5/ref/settings/#auth-profile-module\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1348870962, "answer_id": 12648124, "path": "stack.django.answer", "score": 176, "up_vote_count": 176, "is_accepted": false, "last_activity_date": 1403624478, "last_edit_date": 1403624478, "body_markdown": "Well, some time passed since 2008 and it&#39;s time for some fresh answer. Since Django 1.5 you will be able to create custom User class. Actually, at the time I&#39;m writing this, it&#39;s already merged into master, so you can try it out.\r\n\r\nThere&#39;s some information about it in [docs][1] or if you want to dig deeper into it, in [this commit][2].\r\n\r\nAll you have to do is add `AUTH_USER_MODEL` to settings with path to custom user class, which extends either `AbstractBaseUser` (more customizable version) or `AbstractUser` (more or less old User class you can extend).\r\n\r\nFor people that are lazy to click, here&#39;s code example (taken from [docs][3]):\r\n\r\n    from django.db import models\r\n    from django.contrib.auth.models import (\r\n        BaseUserManager, AbstractBaseUser\r\n    )\r\n    \r\n    \r\n    class MyUserManager(BaseUserManager):\r\n        def create_user(self, email, date_of_birth, password=None):\r\n            &quot;&quot;&quot;\r\n            Creates and saves a User with the given email, date of\r\n            birth and password.\r\n            &quot;&quot;&quot;\r\n            if not email:\r\n                raise ValueError(&#39;Users must have an email address&#39;)\r\n    \r\n            user = self.model(\r\n                email=MyUserManager.normalize_email(email),\r\n                date_of_birth=date_of_birth,\r\n            )\r\n    \r\n            user.set_password(password)\r\n            user.save(using=self._db)\r\n            return user\r\n    \r\n        def create_superuser(self, username, date_of_birth, password):\r\n            &quot;&quot;&quot;\r\n            Creates and saves a superuser with the given email, date of\r\n            birth and password.\r\n            &quot;&quot;&quot;\r\n            u = self.create_user(username,\r\n                            password=password,\r\n                            date_of_birth=date_of_birth\r\n                        )\r\n            u.is_admin = True\r\n            u.save(using=self._db)\r\n            return u\r\n    \r\n    \r\n    class MyUser(AbstractBaseUser):\r\n        email = models.EmailField(\r\n                            verbose_name=&#39;email address&#39;,\r\n                            max_length=255,\r\n                            unique=True,\r\n                        )\r\n        date_of_birth = models.DateField()\r\n        is_active = models.BooleanField(default=True)\r\n        is_admin = models.BooleanField(default=False)\r\n    \r\n        objects = MyUserManager()\r\n    \r\n        USERNAME_FIELD = &#39;email&#39;\r\n        REQUIRED_FIELDS = [&#39;date_of_birth&#39;]\r\n    \r\n        def get_full_name(self):\r\n            # The user is identified by their email address\r\n            return self.email\r\n    \r\n        def get_short_name(self):\r\n            # The user is identified by their email address\r\n            return self.email\r\n    \r\n        def __unicode__(self):\r\n            return self.email\r\n    \r\n        def has_perm(self, perm, obj=None):\r\n            &quot;Does the user have a specific permission?&quot;\r\n            # Simplest possible answer: Yes, always\r\n            return True\r\n    \r\n        def has_module_perms(self, app_label):\r\n            &quot;Does the user have permissions to view the app `app_label`?&quot;\r\n            # Simplest possible answer: Yes, always\r\n            return True\r\n    \r\n        @property\r\n        def is_staff(self):\r\n            &quot;Is the user a member of staff?&quot;\r\n            # Simplest possible answer: All admins are staff\r\n            return self.is_admin\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/dev/topics/auth/customizing/#a-full-example\r\n  [2]: https://github.com/django/django/commit/70a0de37d132e5f1514fb939875f69649f103124\r\n  [3]: https://docs.djangoproject.com/en/dev/topics/auth/#a-full-example"}, {"tags": [], "down_vote_count": 1, "creation_date": 1363082479, "answer_id": 15358142, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1363083013, "last_edit_date": 1363083013, "body_markdown": "New in Django 1.5, now you can create your own Custom User Model (which seems to be good thing to do in above case). Refer to [&#39;Customizing authentication in Django&#39;][1]\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/dev/topics/auth/customizing/#substituting-a-custom-user-model\r\n\r\nProbably the coolest new feature on 1.5 release."}, {"tags": [], "down_vote_count": 0, "creation_date": 1366495003, "answer_id": 16125609, "path": "stack.django.answer", "score": 37, "up_vote_count": 37, "is_accepted": false, "last_activity_date": 1366495003, "body_markdown": "Since Django 1.5 you may easily extend the user model and keep a single table on the database.\r\n\r\n    from django.contrib.auth.models import AbstractUser\r\n    from django.db import models\r\n    from django.utils.translation import ugettext_lazy as _\r\n    \r\n    class UserProfile(AbstractUser):\r\n        age = models.PositiveIntegerField(_(&quot;age&quot;))\r\n\r\nYou must also configure it as current user class in your settings file\r\n    \r\n    # supposing you put it in apps/profiles/models.py\r\n    AUTH_USER_MODEL = &quot;profiles.UserProfile&quot;\r\n\r\nIf you want to add a lot of users&#39; preferences the OneToOneField option may be a better choice thought.\r\n\r\nA note for people developing third party libraries: if you need to access the user class remember that people can change it. Use the official helper to get the right class\r\n\r\n    from django.contrib.auth import get_user_model\r\n    \r\n    User = get_user_model()"}, {"tags": [], "down_vote_count": 0, "creation_date": 1460534991, "answer_id": 36592330, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1460558298, "last_edit_date": 1460558298, "body_markdown": "**Extending Django User Model (UserProfile) like a Pro**\r\n\r\nI&#39;ve found this very useful: [link][1]\r\n\r\n**An extract:**\r\n\r\nfrom django.contrib.auth.models import User\r\n\r\n    class Employee(models.Model):\r\n        user = models.OneToOneField(User)\r\n        department = models.CharField(max_length=100)\r\n    \r\n    &gt;&gt;&gt; u = User.objects.get(username=&#39;fsmith&#39;)\r\n    &gt;&gt;&gt; freds_department = u.employee.department\r\n\r\n\r\n  [1]: https://blog.khophi.co/extending-django-user-model-userprofile-like-a-pro/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1466824177, "answer_id": 38024560, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1475595865, "last_edit_date": 1475595865, "body_markdown": "You can Simply extend user profile by creating a new entry each time when user is created by using django post save signals\r\n#models.py\r\n\r\n    from django.db.models.signals import *\r\n    from __future__ import unicode_literals\r\n\r\n    class userProfile(models.Model):\r\n\r\n        userName = models.OneToOneField(User, related_name=&#39;profile&#39;)\r\n        city = models.CharField(max_length=100, null=True)\r\n        \r\n        def __unicode__(self):  # __str__\r\n            return unicode(self.userName)\r\n    \r\n    def create_user_profile(sender, instance, created, **kwargs):\r\n        if created:\r\n        userProfile.objects.create(userName=instance)\r\n\r\n    post_save.connect(create_user_profile, sender=User)\r\n\r\nThis will automatically create a employee instance when new user is created.\r\n\r\nIf you wish to extend user model and want to add further information while creating user you can use django-betterforms (http://django-betterforms.readthedocs.io/en/latest/multiform.html). This will create a user add form with all fields defined in userProfile model.\r\n\r\n#models.py\r\n\r\n    from django.db.models.signals import *\r\n    from __future__ import unicode_literals\r\n\r\n    class userProfile(models.Model):\r\n\r\n        userName = models.OneToOneField(User)\r\n        city = models.CharField(max_length=100)\r\n        \r\n        def __unicode__(self):  # __str__\r\n            return unicode(self.userName)\r\n     \r\n#forms.py\r\n\r\n    from django import forms\r\n    from django.forms import ModelForm\r\n    from betterforms.multiform import MultiModelForm\r\n    from django.contrib.auth.forms import UserCreationForm\r\n    from .models import *\r\n\r\n    class profileForm(ModelForm):\r\n\r\n        class Meta:\r\n            model = Employee\r\n            exclude = (&#39;userName&#39;,)\r\n\r\n\r\n    class addUserMultiForm(MultiModelForm):\r\n        form_classes = {\r\n            &#39;user&#39;:UserCreationForm,\r\n            &#39;profile&#39;:profileForm,\r\n        }\r\n\r\n#views.py\r\n\r\n    from django.shortcuts import redirect\r\n    from .models import *\r\n    from .forms import *\r\n    from django.views.generic import CreateView\r\n\r\n    class addUser(CreateView):\r\n        form_class = addUserMultiForm\r\n        template_name = &quot;addUser.html&quot;\r\n        success_url = &#39;/your url after user created&#39;\r\n\r\n        def form_valid(self, form):\r\n            user = form[&#39;user&#39;].save()\r\n            profile = form[&#39;profile&#39;].save(commit=False)\r\n            profile.userName = User.objects.get(username= user.username)\r\n            profile.save()\r\n            return redirect(self.success_url)\r\n\r\n#addUser.html\r\n\r\n    &lt;!DOCTYPE html&gt;\r\n    &lt;html lang=&quot;en&quot;&gt;\r\n        &lt;head&gt;\r\n            &lt;meta charset=&quot;UTF-8&quot;&gt;\r\n            &lt;title&gt;Title&lt;/title&gt;\r\n        &lt;/head&gt;\r\n        &lt;body&gt;\r\n            &lt;form action=&quot;.&quot; method=&quot;post&quot;&gt;\r\n                {% csrf_token %}\r\n                {{ form }}     \r\n                &lt;button type=&quot;submit&quot;&gt;Add&lt;/button&gt;\r\n            &lt;/form&gt;\r\n         &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\n#urls.py\r\n\r\n    from django.conf.urls import url, include\r\n    from appName.views import *\r\n    urlpatterns = [\r\n            url(r&#39;^add-user/$&#39;, addUser.as_view(), name=&#39;addDistributor&#39;),\r\n    ]\r\n"}], "title": "Extending the User model with custom fields in Django", "view_count": 169308, "answer_count": 9, "code_snippet": ["<code>OneToOneField(User)</code>", "<code>User</code>", "<code>django.contrib.auth.models.User</code>", "<code>User</code>", "<code>user = models.ForeignKey(User, unique=True)</code>", "<code>user = models.OneToOneField(User)</code>", "<code>#in models.py\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import post_save\n\nclass UserProfile(models.Model):  \n    user = models.OneToOneField(User)  \n    #other fields here\n\n    def __str__(self):  \n          return \"%s's profile\" % self.user  \n\ndef create_user_profile(sender, instance, created, **kwargs):  \n    if created:  \n       profile, created = UserProfile.objects.get_or_create(user=instance)  \n\npost_save.connect(create_user_profile, sender=User) \n\n#in settings.py\nAUTH_PROFILE_MODULE = 'YOURAPP.UserProfile'\n</code>", "<code>  user.get_profile().whatever\n</code>", "<code>AUTH_PROFILE_MODULE</code>", "<code>user = models.ForeignKey( User )</code>", "<code>user.get_profile()</code>", "<code>from django.contrib.admin.models import User</code>", "<code>User</code>", "<code>AUTH_USER_MODEL</code>", "<code>AbstractBaseUser</code>", "<code>AbstractUser</code>", "<code>from django.db import models\nfrom django.contrib.auth.models import (\n    BaseUserManager, AbstractBaseUser\n)\n\n\nclass MyUserManager(BaseUserManager):\n    def create_user(self, email, date_of_birth, password=None):\n        \"\"\"\n        Creates and saves a User with the given email, date of\n        birth and password.\n        \"\"\"\n        if not email:\n            raise ValueError('Users must have an email address')\n\n        user = self.model(\n            email=MyUserManager.normalize_email(email),\n            date_of_birth=date_of_birth,\n        )\n\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, username, date_of_birth, password):\n        \"\"\"\n        Creates and saves a superuser with the given email, date of\n        birth and password.\n        \"\"\"\n        u = self.create_user(username,\n                        password=password,\n                        date_of_birth=date_of_birth\n                    )\n        u.is_admin = True\n        u.save(using=self._db)\n        return u\n\n\nclass MyUser(AbstractBaseUser):\n    email = models.EmailField(\n                        verbose_name='email address',\n                        max_length=255,\n                        unique=True,\n                    )\n    date_of_birth = models.DateField()\n    is_active = models.BooleanField(default=True)\n    is_admin = models.BooleanField(default=False)\n\n    objects = MyUserManager()\n\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = ['date_of_birth']\n\n    def get_full_name(self):\n        # The user is identified by their email address\n        return self.email\n\n    def get_short_name(self):\n        # The user is identified by their email address\n        return self.email\n\n    def __unicode__(self):\n        return self.email\n\n    def has_perm(self, perm, obj=None):\n        \"Does the user have a specific permission?\"\n        # Simplest possible answer: Yes, always\n        return True\n\n    def has_module_perms(self, app_label):\n        \"Does the user have permissions to view the app `app_label`?\"\n        # Simplest possible answer: Yes, always\n        return True\n\n    @property\n    def is_staff(self):\n        \"Is the user a member of staff?\"\n        # Simplest possible answer: All admins are staff\n        return self.is_admin\n</code>", "<code>email</code>", "<code>unique=True</code>", "<code>USERNAME_FIELD</code>", "<code>from django.contrib.auth.models import AbstractUser\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\nclass UserProfile(AbstractUser):\n    age = models.PositiveIntegerField(_(\"age\"))\n</code>", "<code># supposing you put it in apps/profiles/models.py\nAUTH_USER_MODEL = \"profiles.UserProfile\"\n</code>", "<code>from django.contrib.auth import get_user_model\n\nUser = get_user_model()\n</code>", "<code>django_social_auth</code>", "<code>django_social_auth</code>", "<code>Changing this setting after you have tables created is not supported by makemigrations and will result in you having to manually write a set of migrations to fix your schema</code>", "<code>from django.db.models.signals import *\nfrom __future__ import unicode_literals\n\nclass userProfile(models.Model):\n\n    userName = models.OneToOneField(User, related_name='profile')\n    city = models.CharField(max_length=100, null=True)\n\n    def __unicode__(self):  # __str__\n        return unicode(self.userName)\n\ndef create_user_profile(sender, instance, created, **kwargs):\n    if created:\n    userProfile.objects.create(userName=instance)\n\npost_save.connect(create_user_profile, sender=User)\n</code>", "<code>from django.db.models.signals import *\nfrom __future__ import unicode_literals\n\nclass userProfile(models.Model):\n\n    userName = models.OneToOneField(User)\n    city = models.CharField(max_length=100)\n\n    def __unicode__(self):  # __str__\n        return unicode(self.userName)\n</code>", "<code>from django import forms\nfrom django.forms import ModelForm\nfrom betterforms.multiform import MultiModelForm\nfrom django.contrib.auth.forms import UserCreationForm\nfrom .models import *\n\nclass profileForm(ModelForm):\n\n    class Meta:\n        model = Employee\n        exclude = ('userName',)\n\n\nclass addUserMultiForm(MultiModelForm):\n    form_classes = {\n        'user':UserCreationForm,\n        'profile':profileForm,\n    }\n</code>", "<code>from django.shortcuts import redirect\nfrom .models import *\nfrom .forms import *\nfrom django.views.generic import CreateView\n\nclass addUser(CreateView):\n    form_class = addUserMultiForm\n    template_name = \"addUser.html\"\n    success_url = '/your url after user created'\n\n    def form_valid(self, form):\n        user = form['user'].save()\n        profile = form['profile'].save(commit=False)\n        profile.userName = User.objects.get(username= user.username)\n        profile.save()\n        return redirect(self.success_url)\n</code>", "<code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;title&gt;Title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form action=\".\" method=\"post\"&gt;\n            {% csrf_token %}\n            {{ form }}     \n            &lt;button type=\"submit\"&gt;Add&lt;/button&gt;\n        &lt;/form&gt;\n     &lt;/body&gt;\n&lt;/html&gt;\n</code>", "<code>from django.conf.urls import url, include\nfrom appName.views import *\nurlpatterns = [\n        url(r'^add-user/$', addUser.as_view(), name='addDistributor'),\n]\n</code>", "<code>class Employee(models.Model):\n    user = models.OneToOneField(User)\n    department = models.CharField(max_length=100)\n\n&gt;&gt;&gt; u = User.objects.get(username='fsmith')\n&gt;&gt;&gt; freds_department = u.employee.department\n</code>"], "path": "stack.django"}, {"tags": ["python", "design-patterns", "dependency-injection", "inversion-of-control", "architecture"], "creation_date": 1268824233, "body_markdown": "In Java [IoC][1] / [DI][2] is a very common practice which is extensively used in web applications, nearly all available frameworks and Java EE. On the other hand, there are also lots of big Python web applications, but beside of Zope (which I&#39;ve heard should be really horrible to code) IoC doesn&#39;t seem to be very common in the Python world. (Please name some examples if you think that I&#39;m wrong).\r\n\r\nThere are of course several clones of popular Java IoC frameworks available for Python, [springpython][3] for example. But none of them seems to get used practically. At least, I&#39;ve never stumpled upon a [Django][4] or [sqlalchemy][5]+`&lt;insert your favorite wsgi toolkit here&gt;` based web application which uses something like that.\r\n\r\nIn my opinion IoC has reasonable advantages and would make it easy to replace the django-default-user-model for example, but extensive usage of interface classes and IoC in Python looks a bit odd and not &#187;pythonic&#171;. But maybe someone has a better explanation, why IoC isn&#39;t widely used in Python.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Inversion_of_Control\r\n  [2]: http://en.wikipedia.org/wiki/Dependency_Injection\r\n  [3]: http://springpython.webfactional.com/\r\n  [4]: http://www.djangoproject.com/\r\n  [5]: http://www.sqlalchemy.org/", "last_edit_date": 1303108599, "up_vote_count": 196, "link": "https://stackoverflow.com/questions/2461702/why-is-ioc-di-not-common-in-python", "_childDocuments_": [{"tags": [], "down_vote_count": 15, "creation_date": 1268826080, "answer_id": 2461861, "path": "stack.django.answer", "score": 1, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1268826080, "body_markdown": "In my opinion, things like dependency injection are symptoms of a rigid and over-complex framework. When the main body of code becomes much too weighty to change easily, you find yourself having to pick small parts of it, define interfaces for them, and then allowing people to change behaviour via the objects that plug into those interfaces. That&#39;s all well and good, but it&#39;s better to avoid that sort of complexity in the first place.\r\n\r\nIt&#39;s also the symptom of a statically-typed language. When the only tool you have to express abstraction is inheritance, then that&#39;s pretty much what you use everywhere. Having said that, C++ is pretty similar but never picked up the fascination with Builders and Interfaces everywhere that Java developers did. It is easy to get over-exuberant with the dream of being flexible and extensible at the cost of writing [far too much generic code with little real benefit][1]. I think it&#39;s a cultural thing.\r\n\r\nTypically I think Python people are used to picking the right tool for the job, which is a coherent and simple whole, rather than the One True Tool (With A Thousand Possible Plugins) that can do anything but offers a bewildering array of possible configuration permutations. There are still interchangeable parts where necessary, but with no need for the big formalism of defining fixed interfaces, due to the flexibility of duck-typing and the relative simplicity of the language.\r\n\r\n\r\n\r\n  [1]: http://discuss.joelonsoftware.com/default.asp?joel.3.219431"}, {"tags": [], "down_vote_count": 0, "creation_date": 1268827816, "answer_id": 2462042, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1268827816, "body_markdown": "Haven&#39;t used Python in several years, but I would say that it has more to do with it being a dynamically typed language than anything else. For a simple example, in Java, if I wanted to test that something wrote to standard out appropriately I could use DI and pass in any PrintStream to capture the text being written and verify it. When I&#39;m working in Ruby, however, I can dynamically replace the &#39;puts&#39; method on STDOUT to do the verify, leaving DI completely out of the picture. If the only reason I&#39;m creating an abstraction is to test the class that&#39;s using it (think File system operations or the clock in Java) then DI/IoC creates unnecessary complexity in the solution."}, {"tags": [], "down_vote_count": 3, "creation_date": 1268828185, "answer_id": 2462076, "path": "stack.django.answer", "score": 33, "up_vote_count": 36, "is_accepted": false, "last_activity_date": 1268828185, "body_markdown": "Part of it is the way the module system works in Python.  You can get a sort of &quot;singleton&quot; for free, just by importing it from a module.  Define an actual instance of an object in a module, and then any client code can import it and actually get a working, fully constructed / populated object.\r\n\r\nThis is in contrast to Java, where you don&#39;t import actual instances of objects.  This means you are always having to instantiate them yourself, (or use some sort of IoC/DI style approach).  You can mitigate the hassle of having to instantiate everything yourself by having static factory methods (or actual factory classes), but then you still incur the resource overhead of actually creating new ones each time."}, {"tags": [], "down_vote_count": 72, "creation_date": 1268852357, "answer_id": 2465052, "path": "stack.django.answer", "score": 141, "up_vote_count": 213, "is_accepted": true, "last_activity_date": 1495463646, "last_edit_date": 1495463646, "body_markdown": "I don&#39;t actually think that DI/IoC are *that* uncommon in Python. What *is* uncommon, however, are DI/IoC *frameworks/containers*.\r\n\r\nThink about it: what does a DI container do? It allows you to \r\n\r\n1. wire together independent components into a complete application ...\r\n2. ... at runtime.\r\n\r\nWe have names for &quot;wiring together&quot; and &quot;at runtime&quot;:\r\n\r\n1. scripting\r\n2. dynamic\r\n\r\nSo, a DI container is nothing but an interpreter for a dynamic scripting language. Actually, let me rephrase that: a typical Java/.NET DI container is nothing but a crappy interpreter for a really bad dynamic scripting language with butt-ugly, sometimes XML-based, syntax.\r\n\r\nWhen you program in Python, why would you want to use an ugly, bad scripting language when you have a beautiful, brilliant scripting language at your disposal? Actually, that&#39;s a more general question: when you program in pretty much any language, why would you want to use an ugly, bad scripting language when you have Jython and IronPython at your disposal?\r\n\r\nSo, to recap: the *practice* of DI/IoC is just as important in Python as it is in Java, for exactly the same reasons. The *implementation* of DI/IoC however, is built into the language and often so lightweight that it completely vanishes. \r\n\r\n(Here&#39;s a brief aside for an analogy: in assembly, a subroutine call is a pretty major deal - you have to save your local variables and registers to memory, save your return address somewhere, change the instruction pointer to the subroutine you are calling, arrange for it to somehow jump back into your subroutine when it is finished, put the arguments somewhere where the callee can find them, and so on. IOW: in assembly, &quot;subroutine call&quot; is a Design Pattern, and before there were languages like Fortran which had subroutine calls built in, people were building their own &quot;subroutine frameworks&quot;. Would you say that subroutine calls are &quot;uncommon&quot; in Python, just because you don&#39;t use subroutine frameworks?)\r\n\r\nBTW: for an example of what it looks like to take DI to its logical conclusion, take a look at [Gilad Bracha][1]&#39;s [Newspeak Programming Language][2] and his writings on the subject:\r\n\r\n* [Constructors Considered Harmful][3]\r\n* [Lethal Injection][4]\r\n* [A Ban on Imports][5] ([continued][6])\r\n  [1]: http://GBracha.BlogSpot.Com/\r\n  [2]: http://NewspeakLanguage.Org/\r\n  [3]: http://GBracha.BlogSpot.Com/2007/06/constructors-considered-harmful.html\r\n  [4]: http://GBracha.BlogSpot.Com/2007/12/some-months-ago-i-wrote-couple-of-posts.html\r\n  [5]: http://GBracha.BlogSpot.Com/2009/06/ban-on-imports.html\r\n  [6]: http://GBracha.BlogSpot.Com/2009/07/ban-on-imports-continued.html"}, {"tags": [], "down_vote_count": 8, "creation_date": 1268855216, "answer_id": 2465344, "path": "stack.django.answer", "score": 34, "up_vote_count": 42, "is_accepted": false, "last_activity_date": 1268855216, "body_markdown": "Django makes great use of inversion of control.  For instance, the database server is selected by the configuration file, then the framework provides appropriate database wrapper instances to database clients.\r\n\r\nThe difference is that Python has first-class types.  Data types, including classes, are themselves objects.  If you want something to use a particular class, simply name the class.  For example:\r\n\r\n    if config_dbms_name == &#39;postgresql&#39;:\r\n        import psycopg\r\n        self.database_interface = psycopg\r\n    elif config_dbms_name == &#39;mysql&#39;:\r\n        ...\r\n\r\nLater code can then create a database interface by writing:\r\n\r\n    my_db_connection = self.database_interface()\r\n    # Do stuff with database.\r\n\r\nInstead of the boilerplate factory functions that Java and C++ need, Python does it with one or two lines of ordinary code.  This is the strength of functional versus imperative programming."}, {"tags": [], "down_vote_count": 1, "creation_date": 1268938347, "answer_id": 2472529, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1400338761, "last_edit_date": 1495541443, "body_markdown": "Actually, it is quite easy to write sufficiently clean and compact code with DI (I wonder, will it be/stay _pythonic_ then, but anyway :) ), for example I actually perefer this way of coding:\r\n\r\n    def polite(name_str):\r\n        return &quot;dear &quot; + name_str\r\n\r\n    def rude(name_str):\r\n        return name_str + &quot;, you, moron&quot;\r\n\r\n    def greet(name_str, call=polite):\r\n        print &quot;Hello, &quot; + call(name_str) + &quot;!&quot;\r\n\r\n_\r\n\r\n    &gt;&gt;greet(&quot;Peter&quot;)\r\n    Hello, dear Peter!\r\n    &gt;&gt;greet(&quot;Jack&quot;, rude)\r\n    Hello, Jack, you, moron!\r\n\r\nYes, this can be viewed as just a simple form of parameterizing functions/classes, but it does its work. So, maybe Python&#39;s default-included batteries are enough here too.\r\n\r\nP.S. I have also posted a larger example of this naive approach at [Dynamically evaluating simple boolean logic in Python](https://stackoverflow.com/questions/2467590/dynamically-evaluating-simple-boolean-logic-in-python/2472414#2472414).\r\n"}, {"tags": [], "down_vote_count": 8, "creation_date": 1315228764, "answer_id": 7308688, "path": "stack.django.answer", "score": 6, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1445337232, "last_edit_date": 1445337232, "body_markdown": "I back &quot;J&#246;rg W Mittag&quot; answer: &quot;The Python implementation of DI/IoC is so lightweight that it completely vanishes&quot;.\r\n\r\nTo back up this statement, take a look at the famous Martin Fowler&#39;s example ported from Java to Python: [Python:Design_Patterns:Inversion_of_Control][1]\r\n\r\nAs you can see from the above link, a &quot;Container&quot; in Python can be written in 8 lines of code:\r\n\r\n    class Container:\r\n        def __init__(self, system_data):\r\n            for component_name, component_class, component_args in system_data:\r\n                if type(component_class) == types.ClassType:\r\n                    args = [self.__dict__[arg] for arg in component_args]\r\n                    self.__dict__[component_name] = component_class(*args)\r\n                else:\r\n                    self.__dict__[component_name] = component_class\r\n\r\n\r\n\r\n\r\n  [1]: https://web.archive.org/web/20130703221553/http://www.emilmont.net/doku.php?id=python:design_patterns:inversion_of_control"}, {"tags": [], "down_vote_count": 1, "creation_date": 1334950776, "answer_id": 10252523, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1334950776, "body_markdown": "I agree with @Jorg in the point that DI/IoC is possible, easier and even more beautiful in Python. What&#39;s missing is the frameworks supporting it, but there are a few exceptions. To point a couple of examples that come to my mind:\r\n\r\n* Django comments let you wire your own Comment class with your custom logic and forms. [\\[More Info\\]][1]\r\n\r\n* Django let you use a custom Profile object to attach to your User model. This is not completely IoC but is a good approach. Personally I&#39;d like to replace the hole User model as the comments framework does. [\\[More Info\\]][2]\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/dev/ref/contrib/comments/custom/\r\n  [2]: https://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users"}, {"tags": [], "down_vote_count": 0, "creation_date": 1419401004, "answer_id": 27632254, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1419401004, "body_markdown": "IoC/DI is a design concept, but unfortunately it&#39;s often taken as a concept that applies to certain languages (or typing systems). I&#39;d love to see dependency injection containers become far more popular in Python. There&#39;s Spring, but that&#39;s a super-framework and seems to be a direct port of the Java concepts without much consideration for &quot;The Python Way.&quot;\r\n\r\nGiven Annotations in Python 3, I decided to have a crack at a full featured, but simple, dependency injection container: https://github.com/zsims/dic . It&#39;s based on some concepts from a .NET dependency injection container (which IMO is fantastic if you&#39;re ever playing in that space), but mutated with Python concepts."}, {"tags": [], "down_vote_count": 1, "creation_date": 1443449991, "answer_id": 32825348, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1443449991, "body_markdown": "I think due to the dynamic nature of python people don&#39;t often see the need for another dynamic framework. When a class inherits from the new-style &#39;object&#39; you  can create a new variable dynamically (https://wiki.python.org/moin/NewClassVsClassicClass). \r\n\r\n**i.e.**\r\nIn plain python:\r\n\r\n    #application.py\r\n    class Application(object):\r\n        def __init__(self):\r\n            pass\r\n\r\n    #main.py\r\n    Application.postgres_connection = PostgresConnection()\r\n    \r\n    #other.py\r\n    postgres_connection = Application.postgres_connection\r\n    db_data = postgres_connection.fetchone()\r\n\r\nHowever have a look at https://github.com/noodleflake/pyioc this might be what you are looking for. \r\n\r\n**i.e.** In pyioc\r\n\r\n    from libs.service_locator import ServiceLocator\r\n    \r\n    #main.py\r\n    ServiceLocator.register(PostgresConnection)\r\n    \r\n    #other.py\r\n    postgres_connection = ServiceLocator.resolve(PostgresConnection)\r\n    db_data = postgres_connection.fetchone()\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1475759424, "answer_id": 39896946, "path": "stack.django.answer", "score": 0, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1475759424, "body_markdown": "Unlike the strong typed nature in Java.  Python&#39;s duck typing behavior makes it so easy to pass objects around.  \r\n\r\nJava developers are focusing on the constructing the class strcuture and relation between objects, while keeping things flexible.  IoC is extremely important for achieving this.\r\n\r\nPython developers are focusing on getting the work done.  They just wire up classes when they need it.  They don&#39;t even have to worry about the type of the class.  As long as it can quack, it&#39;s a duck!  This nature leaves no room for IoC."}, {"tags": [], "down_vote_count": 0, "creation_date": 1517487619, "answer_id": 48562656, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1517496154, "last_edit_date": 1517496154, "body_markdown": "My 2cents is that in most Python applications you don&#39;t need it and, even if you needed it, chances are that many Java haters (and incompetent fiddlers who believe to be developers) consider it as something bad, because it&#39;s popular in Java.\r\n\r\nAn IoC system is actually useful when you have complex networks of objects, where each object may be a dependency for several others and, in turn, be itself a dependant on other objects. In such a case you&#39;ll want to define all these objects once and have a mechanism to put them together automatically, based on as many implicit rules as possible. If you also have configuration to be defined once and for all and a way to inject it without having to write too much code (eg., without having to setup config values explicitly), that&#39;s an additional reason to desire IoC.\r\n\r\nThe typical Python application is much simpler, just a bunch of scripts, without such complex architecture. Personally I&#39;m aware of what an IoC actually is (contrary to those who wrote certain answers here) and I&#39;ve never felt the need for it in my limited Python experience (also I don&#39;t use Spring everywhere, not when the advantages it gives don&#39;t justify its development overhead).\r\n\r\nThat said. there are Python situations where the IoC approach is actually useful and, in fact, I read here that Django uses it.\r\n\r\nThe same reasoning above could be applied to Aspect Oriented Programming in the Java world, with the difference that the number of cases where AOP is really worthwhile is even more limited.\r\n"}], "title": "Why is IoC / DI not common in Python?", "view_count": 58151, "answer_count": 12, "code_snippet": ["<code>&lt;insert your favorite wsgi toolkit here&gt;</code>", "<code>if config_dbms_name == 'postgresql':\n    import psycopg\n    self.database_interface = psycopg\nelif config_dbms_name == 'mysql':\n    ...\n</code>", "<code>my_db_connection = self.database_interface()\n# Do stuff with database.\n</code>", "<code>import psycopg2 as database_interface</code>", "<code>injections.py</code>", "<code>self.database_interface</code>", "<code>MyClassInstances</code>", "<code>MyClass</code>", "<code>from framework.auth.user import User</code>", "<code>User = lookup('UserImplentation', 'framework.auth.user.User')</code>", "<code>User</code>", "<code>class Container:\n    def __init__(self, system_data):\n        for component_name, component_class, component_args in system_data:\n            if type(component_class) == types.ClassType:\n                args = [self.__dict__[arg] for arg in component_args]\n                self.__dict__[component_name] = component_class(*args)\n            else:\n                self.__dict__[component_name] = component_class\n</code>", "<code>def polite(name_str):\n    return \"dear \" + name_str\n\ndef rude(name_str):\n    return name_str + \", you, moron\"\n\ndef greet(name_str, call=polite):\n    print \"Hello, \" + call(name_str) + \"!\"\n</code>", "<code>&gt;&gt;greet(\"Peter\")\nHello, dear Peter!\n&gt;&gt;greet(\"Jack\", rude)\nHello, Jack, you, moron!\n</code>", "<code>#application.py\nclass Application(object):\n    def __init__(self):\n        pass\n\n#main.py\nApplication.postgres_connection = PostgresConnection()\n\n#other.py\npostgres_connection = Application.postgres_connection\ndb_data = postgres_connection.fetchone()\n</code>", "<code>from libs.service_locator import ServiceLocator\n\n#main.py\nServiceLocator.register(PostgresConnection)\n\n#other.py\npostgres_connection = ServiceLocator.resolve(PostgresConnection)\ndb_data = postgres_connection.fetchone()\n</code>", "<code>EmailSender</code>", "<code>DesktopNotifier</code>", "<code>INotifier</code>"], "path": "stack.django"}, {"tags": ["django", "search", "django-queryset", "django-q"], "creation_date": 1231617103, "body_markdown": "I am trying to build the search for a Django site I am building, and in the search I am searching in 3 different models. And to get pagination on the search result list I would like to use a generic object_list view to display the results. But to do that i have to merge 3 querysets into one.\r\n\r\nHow can i do that? I&#39;ve tried this:\r\n\r\n\r\n    result_list = []\t\t\t\r\n    page_list = Page.objects.filter(Q(title__icontains=cleaned_search_term) | Q(body__icontains=cleaned_search_term))\r\n    article_list = Article.objects.filter(Q(title__icontains=cleaned_search_term) | Q(body__icontains=cleaned_search_term) | Q(tags__icontains=cleaned_search_term))\r\n    post_list = Post.objects.filter(Q(title__icontains=cleaned_search_term) | Q(body__icontains=cleaned_search_term) | Q(tags__icontains=cleaned_search_term))\r\n    \r\n    for x in page_list:\r\n        result_list.append(x)\r\n    for x in article_list:\r\n        result_list.append(x)\r\n    for x in post_list:\r\n        result_list.append(x)\r\n    \r\n    return object_list(request, queryset=result_list, template_object_name=&#39;result&#39;,\r\n                       paginate_by=10, extra_context={&#39;search_term&#39;: search_term},\r\n                       template_name=&quot;search/result_list.html&quot;)\r\n\r\nBut this doesn&#39;t work I get an error when I try to use that list in the generic view. The list is missing the clone attribute.\r\n\r\nAnybody know how I can merge the three lists, `page_list`, `article_list` and `post_list`?", "last_edit_date": 1450118863, "up_vote_count": 477, "link": "https://stackoverflow.com/questions/431628/how-to-combine-2-or-more-querysets-in-a-django-view", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1231627405, "answer_id": 431900, "path": "stack.django.answer", "score": 23, "up_vote_count": 23, "is_accepted": false, "last_activity_date": 1231627405, "body_markdown": "The big downside of your current approach is its inefficiency with large search result sets, as you have to pull down the entire result set from the database each time, even though you only intend to display one page of results.\r\n\r\nIn order to only pull down the objects you actually need from the database, you have to use pagination on a QuerySet, not a list.  If you do this, Django actually slices the QuerySet before the query is executed, so the SQL query will use OFFSET and LIMIT to only get the records you will actually display.  But you can&#39;t do this unless you can cram your search into a single query somehow.\r\n\r\nGiven that all three of your models have title and body fields, why not use [model inheritance][1]?  Just have all three models inherit from a common ancestor that has title and body, and perform the search as a single query on the ancestor model.\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/topics/db/models/#model-inheritance"}, {"tags": [], "down_vote_count": 0, "creation_date": 1231667483, "answer_id": 432666, "path": "stack.django.answer", "score": 65, "up_vote_count": 65, "is_accepted": false, "last_activity_date": 1231937842, "last_edit_date": 1231937842, "body_markdown": "You can use the `QuerySetChain` class below. When using it with Django&#39;s paginator, it should only hit the database with `COUNT(*)` queries for all querysets and `SELECT()` queries only for those querysets whose records are displayed on the current page.\r\n\r\nNote that you need to specify `template_name=` if using a `QuerySetChain` with generic views, even if the chained querysets all use the same model.\r\n\r\n    from itertools import islice, chain\r\n\r\n    class QuerySetChain(object):\r\n        &quot;&quot;&quot;\r\n        Chains multiple subquerysets (possibly of different models) and behaves as\r\n        one queryset.  Supports minimal methods needed for use with\r\n        django.core.paginator.\r\n        &quot;&quot;&quot;\r\n\r\n        def __init__(self, *subquerysets):\r\n            self.querysets = subquerysets\r\n\r\n        def count(self):\r\n            &quot;&quot;&quot;\r\n            Performs a .count() for all subquerysets and returns the number of\r\n            records as an integer.\r\n            &quot;&quot;&quot;\r\n            return sum(qs.count() for qs in self.querysets)\r\n\r\n        def _clone(self):\r\n            &quot;Returns a clone of this queryset chain&quot;\r\n            return self.__class__(*self.querysets)\r\n\r\n        def _all(self):\r\n            &quot;Iterates records in all subquerysets&quot;\r\n            return chain(*self.querysets)\r\n\r\n        def __getitem__(self, ndx):\r\n            &quot;&quot;&quot;\r\n            Retrieves an item or slice from the chained set of results from all\r\n            subquerysets.\r\n            &quot;&quot;&quot;\r\n            if type(ndx) is slice:\r\n                return list(islice(self._all(), ndx.start, ndx.stop, ndx.step or 1))\r\n            else:\r\n                return islice(self._all(), ndx, ndx+1).next()\r\n\r\nIn your example, the usage would be:\r\n\r\n    pages = Page.objects.filter(Q(title__icontains=cleaned_search_term) |\r\n                                Q(body__icontains=cleaned_search_term))\r\n    articles = Article.objects.filter(Q(title__icontains=cleaned_search_term) |\r\n                                      Q(body__icontains=cleaned_search_term) |\r\n                                      Q(tags__icontains=cleaned_search_term))\r\n    posts = Post.objects.filter(Q(title__icontains=cleaned_search_term) |\r\n                                Q(body__icontains=cleaned_search_term) | \r\n                                Q(tags__icontains=cleaned_search_term))\r\n    matches = QuerySetChain(pages, articles, posts)\r\n\r\nThen use `matches` with the paginator like you used `result_list` in your example.\r\n\r\nThe `itertools` module was introduced in Python 2.3, so it should be available in all Python versions Django runs on."}, {"tags": [], "down_vote_count": 1, "creation_date": 1231747246, "answer_id": 434755, "path": "stack.django.answer", "score": 827, "up_vote_count": 828, "is_accepted": true, "last_activity_date": 1231747246, "body_markdown": "Concatenating the querysets into a list is the simplest approach. If the database will be hit for all querysets anyway (e.g. because the result needs to be sorted), this won&#39;t add further cost.\r\n\r\n    from itertools import chain\r\n    result_list = list(chain(page_list, article_list, post_list))\r\n\r\nUsing `itertools.chain` is faster than looping each list and appending elements one by one, since `itertools` is implemented in C. It also consumes less memory than converting each queryset into a list before concatenating.\r\n\r\nNow it&#39;s possible to sort the resulting list e.g. by date (as requested in hasen j&#39;s comment to another answer). The `sorted()` function conveniently accepts a generator and returns a list:\r\n\r\n    result_list = sorted(\r\n        chain(page_list, article_list, post_list),\r\n        key=lambda instance: instance.date_created)\r\n\r\nIf you&#39;re using Python 2.4 or later, you can use `attrgetter` instead of a lambda. I remember reading about it being faster, but I didn&#39;t see a noticeable speed difference for a million item list.\r\n\r\n    from operator import attrgetter\r\n    result_list = sorted(\r\n        chain(page_list, article_list, post_list),\r\n        key=attrgetter(&#39;date_created&#39;))\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1231866721, "answer_id": 439868, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1231866721, "body_markdown": "here&#39;s an idea... just pull down one full page of results from each of the three and then throw out the 20 least useful ones... this eliminates the large querysets and that way you only sacrifice a little performance instead of a lot"}, {"tags": [], "down_vote_count": 1, "creation_date": 1240897713, "answer_id": 796381, "path": "stack.django.answer", "score": 369, "up_vote_count": 370, "is_accepted": false, "last_activity_date": 1241145919, "last_edit_date": 1241145919, "body_markdown": "Try this:\r\n\r\n    matches = pages | articles | posts\r\n\r\nRetains all the functions of the querysets which is nice if you want to order_by or similar.\r\n\r\nOops, please note that this doesn&#39;t work on querysets from two different models..."}, {"tags": [], "down_vote_count": 0, "creation_date": 1269195441, "answer_id": 2488144, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1269195441, "body_markdown": "Looks like t_rybik has created a comprehensive solution at http://www.djangosnippets.org/snippets/1933/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1270803127, "answer_id": 2606086, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1270803127, "body_markdown": "For searching it&#39;s better to use dedicated solutions like [Haystack][1] - it&#39;s very flexible.\r\n\r\n\r\n  [1]: http://haystacksearch.org/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1353966141, "answer_id": 13573622, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1353966141, "body_markdown": "In case you want to chain a lot of querysets, try this:\r\n\r\n    from itertools import chain\r\n    result = list(chain(*docs))\r\n\r\nwhere: docs is a list of querysets\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1387802520, "answer_id": 20743844, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1387802520, "body_markdown": "    DATE_FIELD_MAPPING = {\r\n        Model1: &#39;date&#39;,\r\n        Model2: &#39;pubdate&#39;,\r\n    }\r\n    \r\n    def my_key_func(obj):\r\n        return getattr(obj, DATE_FIELD_MAPPING[type(obj)])\r\n    \r\n    And then sorted(chain(Model1.objects.all(), Model2.objects.all()), key=my_key_func)\r\n\r\nQuoted from [https://groups.google.com/forum/#!topic/django-users/6wUNuJa4jVw][1]. See **Alex Gaynor** \r\n\r\n\r\n  [1]: https://groups.google.com/forum/#!topic/django-users/6wUNuJa4jVw"}, {"tags": [], "down_vote_count": 0, "creation_date": 1486898608, "answer_id": 42186970, "path": "stack.django.answer", "score": 44, "up_vote_count": 44, "is_accepted": false, "last_activity_date": 1493106467, "last_edit_date": 1493106467, "body_markdown": "Related, for mixing querysets from the same model, or for similar fields from a few models, Starting with **Django 1.11** a [`qs.union()` method][1] is also available:\r\n\r\n&gt; **`union()`**\r\n&gt; \r\n&gt;     union(*other_qs, all=False)\r\n&gt;\r\n&gt; **New in Django 1.11**. Uses SQL\u2019s UNION operator to combine the results of two or more QuerySets. For example:\r\n&gt; \r\n&gt;     &gt;&gt;&gt; qs1.union(qs2, qs3)\r\n&gt; The UNION operator selects only distinct values by default. To allow duplicate values, use the all=True\r\n&gt; argument.\r\n&gt; \r\n&gt; union(), intersection(), and difference() return model instances of\r\n&gt; the type of the first QuerySet even if the arguments are QuerySets of\r\n&gt; other models. Passing different models works as long as the SELECT\r\n&gt; list is the same in all QuerySets (at least the types, the names don\u2019t\r\n&gt; matter as long as the types in the same order).\r\n&gt; \r\n&gt; In addition, only LIMIT, OFFSET, and ORDER BY (i.e. slicing and\r\n&gt; order_by()) are allowed on the resulting QuerySet. Further, **databases\r\n&gt; place restrictions on what operations are allowed in the combined\r\n&gt; queries.** For example, most databases don\u2019t allow LIMIT or OFFSET in\r\n&gt; the combined queries.\r\n\r\n \r\n\r\nhttps://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.union\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.11/ref/models/querysets/#django.db.models.query.QuerySet.union"}, {"tags": [], "down_vote_count": 0, "creation_date": 1518439786, "answer_id": 48746922, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1518440097, "last_edit_date": 1518440097, "body_markdown": "**Requirements:**\r\n`Django==2.0.2`, `django-querysetsequence==0.8`\r\n\r\nI know this question is kinda old but I&#39;ll put up my solution in case it helps someone.\r\n\r\nIn case you want to combine `querysets` and still come out with a `QuerySet`, you might want to check out [django-queryset-sequence][1].\r\n\r\nBut one note about it. It only takes two `querysets` as it&#39;s argument. But with python `reduce` you can always apply it to multiple `queryset`s.\r\n\r\n    from functools import reduce\r\n    from queryset_sequence import QuerySetSequence\r\n    \r\n    combined_queryset = reduce(QuerySetSequence, list_of_queryset)\r\n\r\nAnd that&#39;s it. Below is a situation I ran into and how I employed `list comprehension`, `reduce` and `django-queryset-sequence`\r\n\r\n    from functools import reduce\r\n    from django.shortcuts import render    \r\n    from queryset_sequence import QuerySetSequence\r\n        \r\n    class People(models.Model):\r\n        user = models.OneToOneField(User, on_delete=models.CASCADE)\r\n        mentor = models.ForeignKey(&#39;self&#39;, null=True, on_delete=models.SET_NULL, related_name=&#39;my_mentees&#39;)\r\n    \r\n    class Book(models.Model):\r\n        name = models.CharField(max_length=20)\r\n        owner = models.ForeignKey(Student, on_delete=models.CASCADE)\r\n    \r\n    # as a mentor, I want to see all the books owned by all my mentees in one view.\r\n    def mentee_books(request):\r\n        template = &quot;my_mentee_books.html&quot;\r\n        mentor = People.objects.get(user=request.user)\r\n        my_mentees = mentor.my_mentees.all() # returns QuerySet of all my mentees\r\n        mentee_books = reduce(QuerySetSequence, [each.book_set.all() for each in my_mentees])\r\n        \r\n        return render(request, template, {&#39;mentee_books&#39; : mentee_books})\r\n\r\n  [1]: https://github.com/percipient/django-querysetsequence\r\n"}], "title": "How to combine 2 or more querysets in a Django view?", "view_count": 177453, "answer_count": 11, "code_snippet": ["<code>result_list = []            \npage_list = Page.objects.filter(Q(title__icontains=cleaned_search_term) | Q(body__icontains=cleaned_search_term))\narticle_list = Article.objects.filter(Q(title__icontains=cleaned_search_term) | Q(body__icontains=cleaned_search_term) | Q(tags__icontains=cleaned_search_term))\npost_list = Post.objects.filter(Q(title__icontains=cleaned_search_term) | Q(body__icontains=cleaned_search_term) | Q(tags__icontains=cleaned_search_term))\n\nfor x in page_list:\n    result_list.append(x)\nfor x in article_list:\n    result_list.append(x)\nfor x in post_list:\n    result_list.append(x)\n\nreturn object_list(request, queryset=result_list, template_object_name='result',\n                   paginate_by=10, extra_context={'search_term': search_term},\n                   template_name=\"search/result_list.html\")\n</code>", "<code>page_list</code>", "<code>article_list</code>", "<code>post_list</code>", "<code>from itertools import chain\nresult_list = list(chain(page_list, article_list, post_list))\n</code>", "<code>itertools.chain</code>", "<code>itertools</code>", "<code>sorted()</code>", "<code>result_list = sorted(\n    chain(page_list, article_list, post_list),\n    key=lambda instance: instance.date_created)\n</code>", "<code>attrgetter</code>", "<code>from operator import attrgetter\nresult_list = sorted(\n    chain(page_list, article_list, post_list),\n    key=attrgetter('date_created'))\n</code>", "<code>from itertools import groupby</code>", "<code>unique_results = [rows.next() for (key, rows) in groupby(result_list, key=lambda obj: obj.id)]</code>", "<code>matches = pages | articles | posts\n</code>", "<code>|</code>", "<code>QuerySetChain</code>", "<code>COUNT(*)</code>", "<code>SELECT()</code>", "<code>template_name=</code>", "<code>QuerySetChain</code>", "<code>from itertools import islice, chain\n\nclass QuerySetChain(object):\n    \"\"\"\n    Chains multiple subquerysets (possibly of different models) and behaves as\n    one queryset.  Supports minimal methods needed for use with\n    django.core.paginator.\n    \"\"\"\n\n    def __init__(self, *subquerysets):\n        self.querysets = subquerysets\n\n    def count(self):\n        \"\"\"\n        Performs a .count() for all subquerysets and returns the number of\n        records as an integer.\n        \"\"\"\n        return sum(qs.count() for qs in self.querysets)\n\n    def _clone(self):\n        \"Returns a clone of this queryset chain\"\n        return self.__class__(*self.querysets)\n\n    def _all(self):\n        \"Iterates records in all subquerysets\"\n        return chain(*self.querysets)\n\n    def __getitem__(self, ndx):\n        \"\"\"\n        Retrieves an item or slice from the chained set of results from all\n        subquerysets.\n        \"\"\"\n        if type(ndx) is slice:\n            return list(islice(self._all(), ndx.start, ndx.stop, ndx.step or 1))\n        else:\n            return islice(self._all(), ndx, ndx+1).next()\n</code>", "<code>pages = Page.objects.filter(Q(title__icontains=cleaned_search_term) |\n                            Q(body__icontains=cleaned_search_term))\narticles = Article.objects.filter(Q(title__icontains=cleaned_search_term) |\n                                  Q(body__icontains=cleaned_search_term) |\n                                  Q(tags__icontains=cleaned_search_term))\nposts = Post.objects.filter(Q(title__icontains=cleaned_search_term) |\n                            Q(body__icontains=cleaned_search_term) | \n                            Q(tags__icontains=cleaned_search_term))\nmatches = QuerySetChain(pages, articles, posts)\n</code>", "<code>matches</code>", "<code>result_list</code>", "<code>itertools</code>", "<code>qs.union()</code>", "<code>union()</code>", "<code>union(*other_qs, all=False)\n</code>", "<code>&gt;&gt;&gt; qs1.union(qs2, qs3)\n</code>", "<code>from itertools import chain\nresult = list(chain(*docs))\n</code>", "<code>DATE_FIELD_MAPPING = {\n    Model1: 'date',\n    Model2: 'pubdate',\n}\n\ndef my_key_func(obj):\n    return getattr(obj, DATE_FIELD_MAPPING[type(obj)])\n\nAnd then sorted(chain(Model1.objects.all(), Model2.objects.all()), key=my_key_func)\n</code>", "<code>Django==2.0.2</code>", "<code>django-querysetsequence==0.8</code>", "<code>querysets</code>", "<code>QuerySet</code>", "<code>querysets</code>", "<code>reduce</code>", "<code>queryset</code>", "<code>from functools import reduce\nfrom queryset_sequence import QuerySetSequence\n\ncombined_queryset = reduce(QuerySetSequence, list_of_queryset)\n</code>", "<code>list comprehension</code>", "<code>reduce</code>", "<code>django-queryset-sequence</code>", "<code>from functools import reduce\nfrom django.shortcuts import render    \nfrom queryset_sequence import QuerySetSequence\n\nclass People(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    mentor = models.ForeignKey('self', null=True, on_delete=models.SET_NULL, related_name='my_mentees')\n\nclass Book(models.Model):\n    name = models.CharField(max_length=20)\n    owner = models.ForeignKey(Student, on_delete=models.CASCADE)\n\n# as a mentor, I want to see all the books owned by all my mentees in one view.\ndef mentee_books(request):\n    template = \"my_mentee_books.html\"\n    mentor = People.objects.get(user=request.user)\n    my_mentees = mentor.my_mentees.all() # returns QuerySet of all my mentees\n    mentee_books = reduce(QuerySetSequence, [each.book_set.all() for each in my_mentees])\n\n    return render(request, template, {'mentee_books' : mentee_books})\n</code>"], "path": "stack.django"}, {"tags": ["python", "sql", "django", "django-queryset", "django-orm"], "creation_date": 1309759456, "body_markdown": "I want to write a Django query equivalent to this SQL query:\r\n\r\n    SELECT * from user where income &gt;= 5000 or income is NULL.\r\n\r\nHow to construct the Djagno queryset filter?\r\n\r\n    User.objects.filter(income__gte=5000, income=0)\r\n\r\nThis doesn&#39;t work, because it `AND`s the filters. I want to `OR` the filters to get union of individual querysets.", "last_edit_date": 1432877016, "up_vote_count": 192, "link": "https://stackoverflow.com/questions/6567831/how-to-perform-or-condition-in-django-queryset", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1309760103, "answer_id": 6567918, "path": "stack.django.answer", "score": 376, "up_vote_count": 376, "is_accepted": true, "last_activity_date": 1382753582, "last_edit_date": 1382753582, "body_markdown": "    from django.db.models import Q\r\n    User.objects.filter(Q(income__gte=5000) | Q(income__isnull=True))\r\n\r\n[via Documentation](https://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects)"}, {"tags": [], "down_vote_count": 1, "creation_date": 1349926203, "answer_id": 12831751, "path": "stack.django.answer", "score": 34, "up_vote_count": 35, "is_accepted": false, "last_activity_date": 1495026011, "last_edit_date": 1495026011, "body_markdown": "Because [QuerySets implement](https://docs.djangoproject.com/en/stable/_modules/django/db/models/query/#QuerySet) the Python `__or__` operator (`|`), or union, it just works. As you&#39;d expect, the `|` binary operator returns a `QuerySet` so `order_by()`, `.distinct()`, and other queryset filters can be tacked on to the end.\r\n\r\n    combined_queryset = User.objects.filter(income__gte=5000) | User.objects.filter(income__isnull=True)\r\n    ordered_queryset = combined_queryset.order_by(&#39;-income&#39;)"}], "title": "How to perform OR condition in django queryset?", "view_count": 87125, "answer_count": 2, "code_snippet": ["<code>SELECT * from user where income &gt;= 5000 or income is NULL.\n</code>", "<code>User.objects.filter(income__gte=5000, income=0)\n</code>", "<code>AND</code>", "<code>OR</code>", "<code>from django.db.models import Q\nUser.objects.filter(Q(income__gte=5000) | Q(income__isnull=True))\n</code>", "<code>__or__</code>", "<code>|</code>", "<code>|</code>", "<code>QuerySet</code>", "<code>order_by()</code>", "<code>.distinct()</code>", "<code>combined_queryset = User.objects.filter(income__gte=5000) | User.objects.filter(income__isnull=True)\nordered_queryset = combined_queryset.order_by('-income')\n</code>"], "path": "stack.django"}, {"tags": ["javascript", "css", "caching", "auto-versioning"], "creation_date": 1222139233, "body_markdown": "I have noticed that some browsers (in particular, Firefox and Opera) are very zealous in using cached copies of **.css** and **.js** files, even between browser sessions. This leads to a problem when you update one of these files but the user&#39;s browser keeps on using the cached copy.\r\n\r\nThe question is: what is the most elegant way of forcing the user&#39;s browser to reload the file when it has changed?\r\n\r\nIdeally the solution would not force the browser to reload the file on every visit to the page.  I will post my own solution as an answer, but I am curious if anyone has a better solution and I&#39;ll let your votes decide.\r\n\r\n**Update:**\r\n\r\nAfter allowing discussion here for a while, I have found **John Millikin** and **da5id**&#39;s suggestion to be useful. It turns out there is a term for this: **auto-versioning**.\r\n\r\nI have posted a new answer below which is a combination of my original solution and John&#39;s suggestion.\r\n\r\nAnother idea which was suggested by **SCdF** would be to append a bogus query string to the file. (Some Python code to automatically use the timestamp as a bogus query string was submitted by **pi**.).  However, there is some discussion as to whether or not the browser would cache a file with a query string. (Remember, we want the browser to cache the file and use it on future visits. We only want it to fetch the file again when it has changed.)\r\n\r\nSince it is not clear what happens with a bogus query string, I am not accepting that answer.", "last_edit_date": 1451109209, "up_vote_count": 834, "link": "https://stackoverflow.com/questions/118884/how-to-force-browser-to-reload-cached-css-js-files", "_childDocuments_": [{"tags": [], "down_vote_count": 3, "creation_date": 1222139269, "answer_id": 118886, "path": "stack.django.answer", "score": 398, "up_vote_count": 401, "is_accepted": false, "last_activity_date": 1386345684, "last_edit_date": 1386345684, "body_markdown": "**Update:**  Rewritten to incorporate suggestions from **John Millikin** and **da5id**.  This solution is written in PHP, but should be easily adapted to other languages.\r\n\r\n**Update 2:** Incorporating comments from **Nick Johnson** that the original `.htaccess` regex can cause problems with files like `json-1.3.js`. Solution is to only rewrite if there are exactly 10 digits at the end. (Because 10 digits covers all timestamps from 9/9/2001 to 11/20/2286.)\r\n\r\nFirst, we use the following rewrite rule in .htaccess:\r\n\r\n    RewriteEngine on\r\n    RewriteRule ^(.*)\\.[\\d]{10}\\.(css|js)$ $1.$2 [L]\r\n\r\nNow, we write the following PHP function:\r\n\r\n&lt;!-- language: lang-php --&gt;\r\n\r\n    /**\r\n     *  Given a file, i.e. /css/base.css, replaces it with a string containing the\r\n     *  file&#39;s mtime, i.e. /css/base.1221534296.css.\r\n     *  \r\n     *  @param $file  The file to be loaded.  Must be an absolute path (i.e.\r\n     *                starting with slash).\r\n     */\r\n    function auto_version($file)\r\n    {\r\n      if(strpos($file, &#39;/&#39;) !== 0 || !file_exists($_SERVER[&#39;DOCUMENT_ROOT&#39;] . $file))\r\n        return $file;\r\n      \r\n      $mtime = filemtime($_SERVER[&#39;DOCUMENT_ROOT&#39;] . $file);\r\n      return preg_replace(&#39;{\\\\.([^./]+)$}&#39;, &quot;.$mtime.\\$1&quot;, $file);\r\n    }\r\n\r\nNow, wherever you include your CSS, change it from this:\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/base.css&quot; type=&quot;text/css&quot; /&gt;\r\n\r\nTo this:\r\n\r\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;?php echo auto_version(&#39;/css/base.css&#39;); ?&gt;&quot; type=&quot;text/css&quot; /&gt;\r\n\r\nThis way, you never have to modify the link tag again, and the user will always see the latest CSS.  The browser will be able to cache the CSS file, but when you make any changes to your CSS the browser will see this as a new URL, so it won&#39;t use the cached copy.\r\n\r\nThis can also work with images, favicons, and JavaScript. Basically anything that is not dynamically generated."}, {"tags": [], "down_vote_count": 7, "creation_date": 1222139569, "answer_id": 118902, "path": "stack.django.answer", "score": 49, "up_vote_count": 56, "is_accepted": false, "last_activity_date": 1222199268, "last_edit_date": 1222199268, "body_markdown": "You can just put `?foo=1234` at the end of your css / js import, changing 1234 to be whatever you like. Have a look at the SO html source for an example.\r\n\r\nThe idea there being that the ? parameters are discarded / ignored on the request anyway and you can change that number when you roll out a new version.\r\n\r\n----------\r\n\r\n**Note:** There is some argument with regard to exactly how this affects caching. I believe the general gist of it is that GET requests, with or without parameters *should* be cachable, so the above solution should work.\r\n\r\nHowever, it is down to both the web server to decide if it wants to adhere to that part of the spec and the browser the user uses, as it can just go right ahead and ask for a fresh version anyway."}, {"tags": [], "down_vote_count": 0, "creation_date": 1222140115, "answer_id": 118921, "path": "stack.django.answer", "score": 36, "up_vote_count": 36, "is_accepted": false, "last_activity_date": 1222140115, "body_markdown": "I&#39;ve heard this called &quot;auto versioning&quot;. The most common method is to include the static file&#39;s mtime somewhere in the URL, and strip it out using rewrite handlers or URL confs:\r\n\r\nSee also:\r\n\r\n* [Automatic asset versioning in Django](http://muffinresearch.co.uk/archives/2008/04/08/automatic-asset-versioning-in-django/)\r\n* [Automatically Version Your CSS and JavaScript Files](http://particletree.com/notebook/automatically-version-your-css-and-javascript-files/)\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1222140228, "answer_id": 118930, "path": "stack.django.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1222140228, "body_markdown": "You can force a &quot;session-wide caching&quot; if you add the session-id as a spureous parameter of the js/css file:\r\n\r\n    &lt;link rel=&quot;stylesheet&quot; src=&quot;myStyles.css?ABCDEF12345sessionID&quot; /&gt;\r\n    &lt;script language=&quot;javascript&quot; src=&quot;myCode.js?ABCDEF12345sessionID&quot;&gt;&lt;/script&gt;\r\n\r\nIf you want a version-wide caching you could add some code to print the file date or similar. If you&#39;re using Java you can use a custom-tag to generate the link in an elegant way.\r\n\r\n\r\n    &lt;link rel=&quot;stylesheet&quot; src=&quot;myStyles.css?20080922_1020&quot; /&gt;\r\n    &lt;script language=&quot;javascript&quot; src=&quot;myCode.js?20080922_1120&quot;&gt;&lt;/script&gt;\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1222142697, "answer_id": 119056, "path": "stack.django.answer", "score": 150, "up_vote_count": 151, "is_accepted": false, "last_activity_date": 1357673140, "last_edit_date": 1357673140, "body_markdown": "**Simple Client-side Technique**\r\n\r\nIn general, caching is good.. So there are a couple of techniques, depending on whether you&#39;re fixing the problem for yourself as you develop a website, or whether you&#39;re trying to control cache in a production environment.\r\n\r\nGeneral visitors to your website won&#39;t have the same experience that you&#39;re having when you&#39;re developing the site.  Since the average visitor comes to the site less frequently (maybe only a few times each month, unless you&#39;re a Google or hi5 Networks), then they are less likely to have your files in cache, and that may be enough.  If you want to force a new version into the browser, you can always add a query string to the request, and bump up the version number when you make major changes: \r\n\r\n    &lt;script src=&quot;/myJavascript.js?version=4&quot;&gt;&lt;/script&gt;\r\n\r\nThis will ensure that everyone gets the new file.  It works because the browser looks at the URL of the file to determine whether it has a copy in cache.  If your server isn&#39;t set up to do anything with the query string, it will be ignored, but the name will look like a new file to the browser.\r\n\r\nOn the other hand, if you&#39;re developing a website, you don&#39;t want to change the version number every time you save a change to your development version.  That would be tedious.\r\n\r\nSo while you&#39;re developing your site, a good trick would be to automatically generate a query string parameter:\r\n\r\n    &lt;!-- Development version: --&gt;\r\n    &lt;script&gt;document.write(&#39;&lt;script src=&quot;/myJavascript.js?dev=&#39; + Math.floor(Math.random() * 100) + &#39;&quot;\\&gt;&lt;\\/script&gt;&#39;);&lt;/script&gt;\r\n\r\nAdding a query string to the request is a good way to version a resource, but for a simple website this may be unnecessary.  And remember, caching is a good thing.\r\n\r\nIt&#39;s also worth noting that the browser isn&#39;t necessarily stingy about keeping files in cache.  Browsers have policies for this sort of thing, and they are usually playing by the rules laid down in the HTTP specification.  When a browser makes a request to a server, part of the response is an EXPIRES header.. a date which tells the browser how long it should be kept in cache.  The next time the browser comes across a request for the same file, it sees that it has a copy in cache and looks to the EXPIRES date to decide whether it should be used.  \r\n\r\nSo believe it or not, it&#39;s actually your server that is making that browser cache so persistent.  You could adjust your server settings and change the EXPIRES headers, but the little technique I&#39;ve written above is probably a much simpler way for you to go about it. Since caching is good, you usually want to set that date far into the future (a &quot;Far-future Expires Header&quot;), and use the technique described above to force a change.\r\n\r\nIf you&#39;re interested in more info on HTTP or how these requests are made, a good book is &quot;High Performance Web Sites&quot; by Steve Souders.  It&#39;s a very good introduction to the subject."}, {"tags": [], "down_vote_count": 6, "creation_date": 1222149291, "answer_id": 119319, "path": "stack.django.answer", "score": -3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1222149291, "body_markdown": "Changing the filename will work.  But that&#39;s not usually the simplest solution.\r\n\r\nAn HTTP cache-control header of &#39;no-cache&#39; doesn&#39;t always work, as you&#39;ve noticed.  The HTTP 1.1 spec allows wiggle-room for user-agents to decide whether or not to request a new copy.  (It&#39;s non-intuitive if you just look at the names of the directives.  Go read the actual [HTTP 1.1 spec for cache][1]... it makes a little more sense in context.)\r\n\r\nIn a nutshell, if you want iron-tight cache-control use\r\n\r\n    Cache-Control: no-cache, no-store, must-revalidate\r\n in your response headers.\r\n  [1]: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9"}, {"tags": [], "down_vote_count": 3, "creation_date": 1222149764, "answer_id": 119326, "path": "stack.django.answer", "score": 14, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1222149764, "body_markdown": "Dont use foo.css?version=1! Browsers aren&#39;t supposed to cache URLs with GET variables. According to http://www.thinkvitamin.com/features/webapps/serving-javascript-fast, though IE and Firefox ignore this, Opera and Safari don&#39;t! Instead, use foo.v1234.css, and use rewrite rules to strip out the version number."}, {"tags": [], "down_vote_count": 0, "creation_date": 1222176304, "answer_id": 120960, "path": "stack.django.answer", "score": 88, "up_vote_count": 88, "is_accepted": false, "last_activity_date": 1222176304, "body_markdown": "Instead of changing the version manually, I would recommend you use an MD5 hash of the actual CSS file.\r\n\r\nSo your URL would be something like\r\n\r\n    http://mysite.com/css/[md5_hash_here]/style.css\r\n\r\nYou could still use the rewrite rule to strip out the hash, but the advantage is that now you can set your cache policy to &quot;cache forever&quot;, since if the URL is the same, that means that the file is unchanged.\r\n\r\nYou can then write a simple shell script that would compute the hash of the file and update your &lt;link&gt; tag (you&#39;d probably want to move it to a separate file for inclusion).\r\n\r\nSimply run that script every time CSS changes and you&#39;re good. The browser will ONLY reload your files when they are altered. If you make an edit and then undo it, there&#39;s no pain in figuring out which version you need to return to in order for your visitors not to re-download."}, {"tags": [], "down_vote_count": 1, "creation_date": 1222178080, "answer_id": 121143, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1222178080, "body_markdown": "I recently solved this using Python. Here the code (should be easy to adopt to other languages):\r\n\r\n    def import_tag(pattern, name, **kw):\r\n        if name[0] == &quot;/&quot;:\r\n            name = name[1:]\r\n        # Additional HTML attributes\r\n        attrs = &#39; &#39;.join([&#39;%s=&quot;%s&quot;&#39; % item for item in kw.items()])\r\n        try:\r\n            # Get the files modification time\r\n            mtime = os.stat(os.path.join(&#39;/documentroot&#39;, name)).st_mtime\r\n            include = &quot;%s?%d&quot; % (name, mtime)\r\n            # this is the same as sprintf(pattern, attrs, include) in other\r\n            # languages\r\n            return pattern % (attrs, include)\r\n        except:\r\n            # In case of error return the include without the added query\r\n            # parameter.\r\n            return pattern % (attrs, name)\r\n\r\n    def script(name, **kw):\r\n        return import_tag(&quot;&quot;&quot;&lt;script type=&quot;text/javascript&quot; &quot;&quot;&quot; +\\\r\n            &quot;&quot;&quot; %s src=&quot;/%s&quot;&gt;&lt;/script&gt;&quot;&quot;&quot;, name, **kw)\r\n\r\n    def stylesheet(name, **kw):\r\n        return import_tag(&#39;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; &#39; +\\\r\n            &quot;&quot;&quot;%s href=&quot;/%s&quot;&gt;&#39;, name, **kw) \r\n\r\n\r\nThis code basically appends the files time-stamp as a query parameter to the URL. The call of the following function\r\n\r\n    script(&quot;/main.css&quot;)\r\n\r\nwill result in\r\n\r\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;  href=&quot;/main.css?1221842734&quot;&gt;\r\n\r\nThe advantage of course is that you do never have to change your html again, touching the CSS file will automatically trigger a cache invalidation. Works very good and the overhead is not noticeable."}, {"tags": [], "down_vote_count": 1, "creation_date": 1222246292, "answer_id": 126086, "path": "stack.django.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1222286336, "last_edit_date": 1222286336, "body_markdown": "Say you have a file available at:\r\n\r\n    /styles/screen.css\r\n\r\nyour can either append a query parameter with version information onto the URI, e.g.:\r\n\r\n    /styles/screen.css?v=1234\r\n\r\nor you can prepend version information, e.g.:\r\n\r\n    /v/1234/styles/screen.css\r\n\r\nIMHO the second method is better for CSS files because they can refer to images using relative URLs which means that if you specify a ``background-image`` like so:\r\n\r\n    body {\r\n        background-image: url(&#39;images/happy.gif&#39;);\r\n    }\r\n\r\nits URL will effectively be:\r\n\r\n    /v/1234/styles/images/happy.gif\r\n\r\nThis means that if you update the version number used the server will treat this as a new resource and not use a cached version. If you base your version number on the Subversion/CVS/etc. revision this means that changes to images referenced in CSS files will be noticed. That isn&#39;t guaranteed with the first scheme, i.e. the URL ``images/happy.gif`` relative to ``/styles/screen.css?v=1235`` is ``/styles/images/happy.gif`` which doesn&#39;t contain any version information.\r\n\r\nI have implemented a caching solution using this technique with Java servlets and simply handle requests to ``/v/*`` with a servlet that delegates to the underlying resource (i.e. ``/styles/screen.css``). In development mode I set caching headers that tell the client to always check the freshness of the resource with the server (this typically results in a 304 if you delegate to Tomcat&#39;s ``DefaultServlet`` and the ``.css``, ``.js``, etc. file hasn&#39;t changed) while in deployment mode I set headers that say &quot;cache forever&quot;."}, {"tags": [], "down_vote_count": 0, "creation_date": 1222256297, "answer_id": 126632, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1222256297, "body_markdown": "I suggest implementing the following process:\r\n\r\n- version your css/js files whenever you deploy, something like: screen.1233.css    (the number can be your SVN revision if you use a versioning system)\r\n\r\n- minify them to optimize loading times"}, {"tags": [], "down_vote_count": 1, "creation_date": 1222286762, "answer_id": 129545, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1222286762, "body_markdown": "if you are using jquery, there is an option called cache that will append a random number \r\nthis is not a complete answer i know but it might save you some time"}, {"tags": [], "down_vote_count": 0, "creation_date": 1222306846, "answer_id": 131037, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1222306846, "body_markdown": "My method to do this is simply to have the link element into a server-side include:\r\n\r\n    &lt;!--#include virtual=&quot;/includes/css-element.txt&quot;--&gt;\r\n\r\nwhere the contents of css-element.txt is\r\n\r\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;mycss.css&quot;/&gt;\r\n\r\nso the day you want to link to my-new-css.css or whatever, you just change the include."}, {"tags": [], "down_vote_count": 1, "creation_date": 1245885610, "answer_id": 1041463, "path": "stack.django.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1245885610, "body_markdown": "Interesting post. Having read all the answers here combined with the fact that I have never had any problems with &quot;bogus&quot; query strings (which I am unsure why everyone is so reluctant to use this) I guess the solution (which removes the need for apache rewrite rules as in the accepted answer) is to compute a short HASH of the CSS file contents (instead of the file datetime) as a bogus querystring.\r\n\r\nThis would result in the following:\r\n\r\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/base.css?[hash-here]&quot; type=&quot;text/css&quot; /&gt;\r\n\r\nOf course the datetime solutions also get the job done in the case of editing a CSS file but I think it is about the css file content and not about the file datetime, so why get these mixed up?"}, {"tags": [], "down_vote_count": 0, "creation_date": 1281027301, "answer_id": 3417141, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1281042023, "last_edit_date": 1281042023, "body_markdown": "The RewriteRule needs a small update for js or css files that contain a dot notation versioning at the end. E.g. json-1.3.js.\r\n\r\nI added a dot negation class [^.] to the regex so .number. is ignored.\r\n\r\n    RewriteRule ^(.*)\\.[^.][\\d]+\\.(css|js)$ $1.$2 [L]"}, {"tags": [], "down_vote_count": 0, "creation_date": 1294379907, "answer_id": 4622905, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1294379907, "body_markdown": "Thanks at Kip for his perfect solution!\r\n\r\nI extended it to use it as an Zend_view_Helper. Because my client run his page on a virtual host I also extended it for that.\r\n\r\nHope it helps someone else too.\r\n\r\n    /**\r\n     * Extend filepath with timestamp to force browser to\r\n     * automatically refresh them if they are updated\r\n     *\r\n     * This is based on Kip&#39;s version, but now\r\n     * also works on virtual hosts\r\n     * @link http://stackoverflow.com/questions/118884/what-is-an-elegant-way-to-force-browsers-to-reload-cached-css-js-files\r\n     *\r\n     * Usage:\r\n     * - extend your .htaccess file with\r\n     * # Route for My_View_Helper_AutoRefreshRewriter\r\n     * # which extends files with there timestamp so if these\r\n     * # are updated a automatic refresh should occur\r\n     * # RewriteRule ^(.*)\\.[^.][\\d]+\\.(css|js)$ $1.$2 [L]\r\n     * - then use it in your view script like\r\n     * $this-&gt;headLink()-&gt;appendStylesheet( $this-&gt;autoRefreshRewriter($this-&gt;cssPath . &#39;default.css&#39;));\r\n     *\r\n     */\r\n    class My_View_Helper_AutoRefreshRewriter extends Zend_View_Helper_Abstract {\r\n\r\n        public function autoRefreshRewriter($filePath) {\r\n\r\n            if (strpos($filePath, &#39;/&#39;) !== 0) {\r\n\r\n                // path has no leading &#39;/&#39;\r\n                return $filePath;\r\n            } elseif (file_exists($_SERVER[&#39;DOCUMENT_ROOT&#39;] . $filePath)) {\r\n\r\n                // file exists under normal path\r\n                // so build path based on this\r\n                $mtime = filemtime($_SERVER[&#39;DOCUMENT_ROOT&#39;] . $filePath);\r\n                return preg_replace(&#39;{\\\\.([^./]+)$}&#39;, &quot;.$mtime.\\$1&quot;, $filePath);\r\n            } else {\r\n\r\n                // fetch directory of index.php file (file from all others are included)\r\n                // and get only the directory\r\n                $indexFilePath = dirname(current(get_included_files()));\r\n\r\n                // check if file exist relativ to index file\r\n                if (file_exists($indexFilePath . $filePath)) {\r\n\r\n                    // get timestamp based on this relativ path\r\n                    $mtime = filemtime($indexFilePath . $filePath);\r\n\r\n                    // write generated timestamp to path\r\n                    // but use old path not the relativ one\r\n                    return preg_replace(&#39;{\\\\.([^./]+)$}&#39;, &quot;.$mtime.\\$1&quot;, $filePath);\r\n                } else {\r\n\r\n                    return $filePath;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\nCheers and thanks.\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1302215171, "answer_id": 5588394, "path": "stack.django.answer", "score": 110, "up_vote_count": 111, "is_accepted": false, "last_activity_date": 1302560001, "last_edit_date": 1302560001, "body_markdown": "Google&#39;s [mod_pagespeed][1] plugin for apache will do auto-versioning for you.  It&#39;s really slick.\r\n\r\nIt parses HTML on its way out of the webserver (works with PHP, rails, python, static HTML -- anything) and rewrites links to CSS, JS, image files so they include an id code.  It serves up the files at the modified URLs with a very long cache control on them.  When the files change, it automatically changes the URLs so the browser has to re-fetch them.  It basically just works, without any changes to your code.  It&#39;ll even minify your code on the way out too.\r\n\r\n  [1]: http://code.google.com/p/modpagespeed/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1308746764, "answer_id": 6440080, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1308746764, "last_edit_date": 1495541903, "body_markdown": "I put an MD5 hash of the file&#39;s contents in its URL.  That way I can set a very long expiration date, and don&#39;t have to worry about users having old JS or CSS.\r\n\r\nI also calculate this once per file at runtime (or on file system changes) so there&#39;s nothing funny to do at design time or during the build process.\r\n\r\nIf you&#39;re using ASP.NET MVC then you can check out the code [in my other answer here](https://stackoverflow.com/questions/936626/how-can-i-force-a-hard-refresh-ctrlf5/6439351#6439351)."}, {"tags": [], "down_vote_count": 5, "creation_date": 1320341682, "answer_id": 7999354, "path": "stack.django.answer", "score": -3, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1320341682, "body_markdown": "The simplest method is to take advantage of the PHP file read functionality. Just have the PHP echo the contents of the file into &lt;style&gt; tags.\r\n\r\n    &lt;?php\r\n    //Replace the &#39;style.css&#39; with the link to the stylesheet.\r\n    echo &quot;&lt;style type=&#39;text/css&#39;&gt;&quot;.file_get_contents(&#39;style.css&#39;).&quot;&lt;/style&gt;&quot;;\r\n    ?&gt;\r\n\r\nIf you&#39;re using something besides PHP, there are some variations depending on the language, but almost all languages have a way to print the contents of a file. Put it in the right location (in the &lt;head&gt; section), and that way, you don&#39;t have to rely on the browser."}, {"tags": [], "down_vote_count": 0, "creation_date": 1341543039, "answer_id": 11355226, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1341543039, "last_edit_date": 1495540510, "body_markdown": "Sorry for bringing back a dead thread. \r\n\r\n@[TomA][1] is right. \r\n\r\nUsing &quot;querystring&quot; method will not be cached as quoted by [Steve Souders][2] below:\r\n\r\n&gt; ...that Squid, a popular proxy, doesn\u2019t cache resources with a\r\n&gt; querystring.\r\n\r\n@[TomA][1] suggestion of using style.TIMESTAMP.css is good, but MD5 would be much better as only when the contents were genuinely changed, the MD5 changes as well.\r\n\r\n  [1]: https://stackoverflow.com/users/35440/toma\r\n  [2]: http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1358438750, "answer_id": 14383167, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1358438750, "body_markdown": "I see a problem with the approach of using a timestamp- or hash-based differentiator in the resource URL which gets stripped out on request at the server. The page that contains the link to e.g. the style sheet *might get cached as well*. So the cached page might request an older version of the style sheet but will be served the latest version, which might or might not work with the requesting page.\r\n\r\nTo fix this, you either have to guard the requesting page with a ``no-cache`` header or meta, to make sure it gets refreshed on every load. Or you have to maintain *all versions* of the style file that you ever deployed on the server, each as an individual file and with their differentiator intact, so that the requesting page can get at the version of the style file it was designed for. In the latter case you basically tie the versions of the HTML page and the style sheet together, which can be done statically and doesn&#39;t require any server logic.\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1359197614, "answer_id": 14536240, "path": "stack.django.answer", "score": 53, "up_vote_count": 54, "is_accepted": false, "last_activity_date": 1374101774, "last_edit_date": 1374101774, "body_markdown": "Not sure why you guys are taking so much pain to implement this solution.\r\n\r\nAll you need to do if get the file&#39;s modified timestamp and append it as a querystring to the file\r\n\r\nIn PHP i would do it as:\r\n\r\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;mycss.css?v=&lt;?php echo filemtime(&#39;mycss.css&#39;) ?&gt;&quot;/&gt;\r\n\r\nfilemtime is a PHP function that returns the file modified timestamp.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1364565064, "answer_id": 15704646, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1364566003, "last_edit_date": 1364566003, "body_markdown": "&quot;Another idea which was suggested by SCdF would be to append a bogus query string to the file. (Some Python code to automatically use the timestamp as a bogus query string was submitted by pi.) However, there is some discussion as to whether or not the browser would cache a file with a query string. (Remember, we want the browser to cache the file and use it on future visits. We only want it to fetch the file again when it has changed.) Since it is not clear what happens with a bogus query string, I am not accepting that answer.&quot;\r\n\r\n&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;file.css?&amp;lt;?=hash_hmac(&#39;sha1&#39;, session_id(), md5_file(&quot;file.css&quot;)); ?&gt;&quot; /&gt;\r\n\r\nHashing the file means when it has changed, the query string will have changed. If it hasn&#39;t, it will remain the same. Each session forces a reload too.\r\n\r\nOptionally, you can also use rewrites to cause the browser to think it&#39;s a new URI"}, {"tags": [], "down_vote_count": 0, "creation_date": 1370953011, "answer_id": 17043892, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1370953011, "body_markdown": "For a Java Servlet environment, you can look at the [Jawr library][1]. The features page explains how it handles caching:\r\n\r\n&gt; Jawr will try its best to force your clients to cache the resources. If a browser asks if a file changed, a 304 (not modified) header is sent back with no content. On the other hand, with Jawr you will be 100% sure that new versions of your bundles are downloaded by all clients. Every URL to your resources will include an automatically generated, content-based prefix that changes automatically whenever a resurce is updated. Once you deploy a new version, the URL to the bundle will change as well so it will be impossible that a client uses an older, cached version.\r\n\r\nThe library also does js/css minification, but you can turn that off if you don&#39;t want it.\r\n\r\n\r\n  [1]: https://jawr.java.net/"}, {"tags": [], "down_vote_count": 2, "creation_date": 1372932111, "answer_id": 17467422, "path": "stack.django.answer", "score": 5, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1372932111, "body_markdown": "You could simply add some random number with the CSS/JS url like\r\n\r\n    example.css?randomNo=Math.random()"}, {"tags": [], "down_vote_count": 0, "creation_date": 1375536529, "answer_id": 18033374, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1375536529, "body_markdown": "For ASP.NET I suppose next solution with advanced options (debug/release mode, versions):\r\n\r\nJs or Css files included by such way:\r\n\r\n    &lt;script type=&quot;text/javascript&quot; src=&quot;Scripts/exampleScript&lt;%=Global.JsPostfix%&gt;&quot; /&gt;\r\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;Css/exampleCss&lt;%=Global.CssPostfix%&gt;&quot; /&gt;\r\n\r\nGlobal.JsPostfix and Global.CssPostfix is calculated by the following way in Global.asax:\r\n\r\n    protected void Application_Start(object sender, EventArgs e)\r\n    {\r\n        ...\r\n\t\tstring jsVersion = ConfigurationManager.AppSettings[&quot;JsVersion&quot;];\r\n\t\tbool updateEveryAppStart = Convert.ToBoolean(ConfigurationManager.AppSettings[&quot;UpdateJsEveryAppStart&quot;]);\r\n        int buildNumber = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.Revision;\r\n        JsPostfix = &quot;&quot;;\r\n    #if !DEBUG\r\n\t\tJsPostfix += &quot;.min&quot;;\r\n    #endif\t\t\r\n\t\tJsPostfix += &quot;.js?&quot; + jsVersion + &quot;_&quot; + buildNumber;\r\n\t\tif (updateEveryAppStart)\r\n\t\t{\r\n\t\t\tRandom rand = new Random();\r\n\t\t\tJsPosfix += &quot;_&quot; + rand.Next();\r\n        }\r\n\t\t...\r\n    }"}, {"tags": [], "down_vote_count": 3, "creation_date": 1391723003, "answer_id": 21614688, "path": "stack.django.answer", "score": -2, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1391723003, "body_markdown": "Another way I have not seen mentioned for js files would be to use the jQuery `$.getScript` in conjunction with `$.ajaxSetup` option `cache: false`.\r\n\r\nInstead of:\r\n\r\n    &lt;script src=&quot;scripts/app.js&quot;&gt;&lt;/script&gt;\r\n\r\nYou can use:\r\n\r\n    $.ajaxSetup({\r\n      cache: false\r\n    });\r\n\r\n    $.getScript(&#39;scripts/app.js&#39;); // GET scripts/app.js?_1391722802668"}, {"tags": [], "down_vote_count": 0, "creation_date": 1407849558, "answer_id": 25265359, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1407849558, "body_markdown": "Another suggestion for ASP.Net websites,\r\n\r\n1. Set different cache-control:max-age values, for different static files. \r\n2. For css/js files, the chances of modifying these files on server is high, so set a minimal cache-control:max-age value of  1 or 2 mins or something that meets your need. \r\n3. For images, set a far date as cache-control:max-age value, say 360 days. \r\n4. By doing so, when we make the first request, all static contents are downloaded to client machine with a 200-OK response.\r\n5. On subsequent requests and after two minutes, we see 304-Not Modified requests on css and js files which avoids us from css/js versioning.\r\n6. Image files will not be requested as they will be used from cached memory til the cache expires.\r\n7. By using below web.config configurations, we can achieve the above described behavior,\r\n    &lt;system.webServer&gt;\r\n        &lt;modules runAllManagedModulesForAllRequests=&quot;true&quot;/&gt;\r\n        &lt;staticContent&gt;\r\n          &lt;clientCache cacheControlMode=&quot;UseMaxAge&quot; cacheControlMaxAge=&quot;00.00:01:00&quot;/&gt;\r\n        &lt;/staticContent&gt;\r\n        &lt;httpProtocol&gt;\r\n          &lt;customHeaders&gt;\r\n            &lt;add name=&quot;ETAG&quot; value=&quot;&quot;/&gt;\r\n          &lt;/customHeaders&gt;\r\n        &lt;/httpProtocol&gt;\r\n      &lt;/system.webServer&gt;\r\n      &lt;location path=&quot;Images&quot;&gt;\r\n        &lt;system.webServer&gt;\r\n          &lt;staticContent&gt;\r\n            &lt;clientCache cacheControlMode=&quot;UseMaxAge&quot; cacheControlMaxAge=&quot;180.00:00:00&quot; /&gt;\r\n          &lt;/staticContent&gt;\r\n        &lt;/system.webServer&gt;\r\n      &lt;/location&gt;\r\n\r\n \r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1410880155, "answer_id": 25872382, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1410880155, "body_markdown": "If you are using a modern browser, you could use a manifest file to inform the browsers which files need to be updated. This requires no headers, no versions in urls etc...\r\n\r\nFor more details, see:\r\nSee: https://developer.mozilla.org/nl/docs/Web/HTML/Applicatie_cache_gebruiken#Introduction"}, {"tags": [], "down_vote_count": 0, "creation_date": 1412107898, "answer_id": 26129241, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1412107898, "body_markdown": "For ASP.NET 4.5 and greater you can use [script bundling](http://www.asp.net/mvc/tutorials/mvc-4/bundling-and-minification).\r\n\r\n&gt;The request `http://localhost/MvcBM_time/bundles/AllMyScripts?v=r0sLDicvP58AIXN_mc3QdyVvVj5euZNzdsa2N1PKvb81` is for the bundle AllMyScripts and contains a query string pair v=r0sLDicvP58AIXN_mc3QdyVvVj5euZNzdsa2N1PKvb81. The query string v has a value token that is a unique identifier used for caching. As long as the bundle doesn&#39;t change, the ASP.NET application will request the AllMyScripts  bundle using this token. If any file in the bundle changes, the ASP.NET optimization framework will generate a new token, guaranteeing that browser requests for the bundle will get the latest bundle.\r\n\r\nThere are other benefits to bundling including increased performance on first time page loads with minification."}, {"tags": [], "down_vote_count": 0, "creation_date": 1418414044, "answer_id": 27451135, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1418414044, "body_markdown": "Many answers here advocate adding a timestamp to the url.  Unless you are modifying your production files directly, the file&#39;s timestamp is not likely to reflect the time when a file was changed.  In most cases this will cause the url to change more frequently than the file itself.  This is why you should use a fast hash of the file&#39;s contents such has MD5 as levik and others have suggested.\r\n\r\nKeep in mind that the value should be calculated once at build or run, rather than each time the file is requested.\r\n\r\nAs an example, here&#39;s a simple bash script that reads a list of filenames from stdin and writes a json file containing hashes to stdout:\r\n\r\n    #!/bin/bash\r\n    # create a json map from filenames to md5s\r\n    # run as hashes.sh &lt; inputfile.list &gt; outputfile.json\r\n    \r\n    echo &quot;{&quot;\r\n    delim=&quot;&quot;\r\n    while read l; do\r\n        echo &quot;$delim\\&quot;$l\\&quot;: \\&quot;`md5 -q $l`\\&quot;&quot;\r\n        delim=&quot;,&quot;\r\n    done\r\n    echo &quot;}&quot;\r\n\r\nThis file could then be loaded at server startup and referenced instead of reading the file system.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1421160372, "answer_id": 27924764, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1421160372, "body_markdown": "Here is a pure JavaScript solution\r\n\r\n    (function(){\r\n    \r\n        // Match this timestamp with the release of your code\r\n        var lastVersioning = Date.UTC(2014, 11, 20, 2, 15, 10);\r\n     \r\n        var lastCacheDateTime = localStorage.getItem(&#39;lastCacheDatetime&#39;);\r\n    \r\n        if(lastCacheDateTime){\r\n            if(lastVersioning &gt; lastCacheDateTime){\r\n                var reload = true;\r\n            }\r\n        }\r\n    \r\n        localStorage.setItem(&#39;lastCacheDatetime&#39;, Date.now());\r\n    \r\n        if(reload){\r\n            location.reload(true);\r\n        }\r\n    \r\n    })();\r\n\r\nThe above will look for the last time the user visited your site.  If the last visit was before you released new code, it uses `location.reload(true)` to force page refresh from server.  \r\n\r\nI usually have this as the very first script within the `&lt;head&gt;` so it&#39;s evaluated before any other content loads.  If a reload needs to occurs, it&#39;s hardly noticeable to the user.\r\n\r\nI am using local storage to store the last visit timestamp on the browser, but you can add cookies to the mix if you&#39;re looking to support older versions of IE.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1437422711, "answer_id": 31525382, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1437422711, "body_markdown": "I&#39;m adding this answer as a SilverStripe http://www.silverstripe.org specific answer which I was looking for and never found but have worked out from reading: http://api.silverstripe.org/3.0/source-class-SS_Datetime.html#98-110\r\n\r\nHopefully this will help someone using a SilverStripe template and trying to force reload a cached image on each page visit / refresh. In my case it is a gif animation which only plays once and therefor did not replay after it was cached. In my template I simply added:\r\n    \r\n    ?$Now.Format(dmYHis)\r\n\r\nto the end of the file path to create a unique time stamp and to force the browser to treat it as a new file. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1437765177, "answer_id": 31618120, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1437765177, "body_markdown": "For my development, I find that chrome has a great solution.\r\n\r\nhttps://developer.chrome.com/devtools/docs/tips-and-tricks#hard-reload\r\n\r\nWith developer tools open, simply long click the refresh button and let go once you hover over &quot;Empty Cache and Hard Reload&quot;.\r\n\r\nThis is my best friend, and is a super light weight way to get what you want!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1438632582, "answer_id": 31795900, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1438632582, "body_markdown": "The 30 or so existing answers are great advice for a circa 2008 website.  However, when it comes to a modern, __single page application__ (SPA), it might be time to re-think some fundamental assumptions\u2026 specifically the idea that it is desirable for the web server to serve only the single, most recent version of a file.\r\n\r\nImagine you&#39;re a user that has version *M* of a SPA loaded into your browser:\r\n\r\n1. Your CD pipeline deploys the new version *N* of the application onto the server\r\n1. You navigate within the SPA, which sends an XHR to the server to get `/some.template`\r\n  - (Your browser hasn&#39;t refreshed the page, so you&#39;re still running version *M*)\r\n1. The server responds with the contents of `/some.template` \u2014 do you want it to return version *M* or *N* of the template?\r\n\r\nIf the format of `/some.template` changed between versions *M* and *N* (or the file was renamed or whatever) __you probably don&#39;t want version *N* of the template sent to the browser that&#39;s running the old version *M* of the parser__.\u2020\r\n\r\nWeb apps run into this issue when two conditions are met:\r\n\r\n- Resources are requested asynchronously sometime after the initial page load\r\n- The app logic assumes things (that may change in future versions) about resource content\r\n\r\nOnce your app needs to serve up multiple versions in parallel, __solving caching and &quot;reloading&quot; becomes trivial:__\r\n\r\n1. Install all site files into versioned dirs: `/v&lt;release_tag_1&gt;/\u2026files\u2026`, `/v&lt;release_tag_2&gt;/\u2026files\u2026`\r\n1. Set HTTP headers to let browsers cache files forever\r\n  - (Or better yet, put everything in a CDN)\r\n1. Update all `&lt;script&gt;` and `&lt;link&gt;` tags, etc. to point to that file in one of the versioned dirs\r\n\r\nThat last step sounds tricky, as it could require calling a URL builder for every URL in your server-side or client-side code.  Or you could just make clever use of the [`&lt;base&gt;` tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base) and change the current version in one place.\r\n\r\n\u2020 One way around this is to be aggressive about forcing the browser to reload everything when a new version is released.  But for the sake of letting any in-progress operations to complete, it may still be easiest to support at least two versions in parallel: v-current and v-previous."}, {"tags": [], "down_vote_count": 0, "creation_date": 1463041243, "answer_id": 37181172, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1463041243, "body_markdown": "I came to this question when looking for a solution for my SPA, which only has a single index.html listing all the necessary files. While I got some leads that helped me, I could not find a quick and easy solution.\r\n\r\nIn the end, I wrote a quick page (including all of the code) necessary to autoversion an html/js index.html as part of the publishing process. It works perfectly and only updates new files based on date last modified. \r\n\r\nYou can see my post at [http://blueskycont.com/wp/2016/05/12/autoversion-your-spa-index-html/][1]. There is a free working winapp there too.\r\n\r\nThe guts of the code is\r\n\r\n\r\n\r\n           private void ParseIndex(string inFile, string addPath, string outFile)\r\n        {\r\n            string path = Path.GetDirectoryName(inFile);\r\n            HtmlAgilityPack.HtmlDocument document = new HtmlAgilityPack.HtmlDocument();\r\n            document.Load(inFile);\r\n            foreach (HtmlNode link in document.DocumentNode.Descendants(&quot;script&quot;))\r\n            {\r\n                if (link.Attributes[&quot;src&quot;]!=null)\r\n                {\r\n                    resetQueryString(path, addPath, link, &quot;src&quot;);\r\n                }\r\n            }\r\n            foreach (HtmlNode link in document.DocumentNode.Descendants(&quot;link&quot;))\r\n            {\r\n                if (link.Attributes[&quot;href&quot;] != null &amp;&amp; link.Attributes[&quot;type&quot;] != null)\r\n                {\r\n                    if (link.Attributes[&quot;type&quot;].Value == &quot;text/css&quot; || link.Attributes[&quot;type&quot;].Value == &quot;text/html&quot;)\r\n                    {\r\n                        resetQueryString(path, addPath, link, &quot;href&quot;);\r\n                    }\r\n                }\r\n            }\r\n            document.Save(outFile);\r\n            MessageBox.Show(&quot;Your file has been processed.&quot;, &quot;Autoversion complete&quot;);\r\n        }\r\n\r\n        private void resetQueryString(string path, string addPath, HtmlNode link, string attrType)\r\n        {\r\n            string currFileName = link.Attributes[attrType].Value;\r\n\r\n            string uripath = currFileName;\r\n            if (currFileName.Contains(&#39;?&#39;)) uripath = currFileName.Substring(0, currFileName.IndexOf(&#39;?&#39;));\r\n            string baseFile = Path.Combine(path, uripath);\r\n            if (!File.Exists(baseFile)) baseFile = Path.Combine(addPath, uripath);\r\n            if (!File.Exists(baseFile)) return;\r\n            DateTime lastModified = System.IO.File.GetLastWriteTime(baseFile);\r\n            link.Attributes[attrType].Value = uripath + &quot;?v=&quot; + lastModified.ToString(&quot;yyyyMMddhhmm&quot;);\r\n        }\r\n\r\n\r\n  [1]: http://blueskycont.com/wp/2016/05/12/autoversion-your-spa-index-html/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1464676986, "answer_id": 37538586, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1464676986, "body_markdown": "Have not found the client sided DOM approach creating the script node (or css) element dynamically:\r\n\r\n    &lt;script&gt;\r\n    \tvar node = document.createElement(&quot;script&quot;); \r\n    \tnode.type = &quot;text/javascript&quot;;\r\n    \tnode.src = &#39;test.js?&#39;+Math.floor(Math.random()*999999999);\r\n    \tdocument.getElementsByTagName(&quot;head&quot;)[0].appendChild(node);\r\n    &lt;/script&gt;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1467910233, "answer_id": 38251122, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1467910233, "body_markdown": "It seems all answers here suggest some sort of versioning in the naming scheme, which has its downsides.\r\n\r\nBrowsers should be well aware of what to cache and what not to cache by reading the webservers response, in particular the http headers - for how long is this resource valid ? was this resource updated since I last retrieved it ? etcetera. \r\n\r\nIf things are configured &#39;correctly&#39;, just updating the files of your application should (at some point) refresh the browsers caches. You can for example configure your web server to tell the browser to never cache files (which is a bad idea). \r\n\r\nA more in-depth explanation of how that works is here\r\nhttps://www.mnot.net/cache_docs/#WORK\r\n\r\n\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1471748341, "answer_id": 39060477, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1471748341, "body_markdown": "Well, i have make it work my way by changing js version each time the page load by adding a random number to js file version as follow:\r\n\r\n    // Add it to the top of the page\r\n    &lt;?php\r\n    srand();\r\n    $random_number = rand();\r\n    ?&gt;\r\n\r\nThen apply the random number to the js version as follow:\r\n\r\n    &lt;script src=&quot;file.js?version=&lt;?php echo $random_number;?&gt;&quot;&gt;&lt;/script&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1482510321, "answer_id": 41304784, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1482510321, "body_markdown": "If you&#39;re using git + php, you can reload the script from cache each time there is a change in the git repo, using the following code:\r\n\r\n    exec(&#39;git rev-parse --verify HEAD 2&gt; /dev/null&#39;, $gitLog);\r\n    echo &#39;  &lt;script src=&quot;/path/to/script.js&quot;?v=&#39;.$gitLog[0].&#39;&gt;&lt;/script&gt;&#39;.PHP_EOL;\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1488536111, "answer_id": 42576123, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1488536111, "body_markdown": "In Laravel (PHP) we can do it in following clear and elegant way (using file modification timestamp):\r\n\r\n    &lt;script src=&quot;{{ asset(&#39;/js/your.js?v=&#39;.filemtime(&#39;js/your.js&#39;)) }}&quot;&gt;&lt;/script&gt;\r\n\r\nAnd similar for CSS\r\n\r\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{asset(&#39;css/your.css?v=&#39;.filemtime(&#39;css/your.css&#39;))}}&quot;&gt;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1505198452, "answer_id": 46169589, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1505198452, "body_markdown": "**Simply add this code, where you want to do hard reload (force browser to reload cached CSS/JS files )**\r\n\r\n    location.reload(true);"}, {"tags": [], "down_vote_count": 0, "creation_date": 1509099385, "answer_id": 46972723, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1509171864, "last_edit_date": 1509171864, "body_markdown": "google chrome has **Hard Reload** as well as **Empty Cache and Hard Reload** option.You can click and hold the reload button (In Inspect Mode) to select one ."}, {"tags": [], "down_vote_count": 0, "creation_date": 1518315930, "answer_id": 48727671, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1518315930, "body_markdown": "Disable cache of script.js **only for local development** in pure JS\r\n\r\ninjects random script.js?wizardry=1231234 and blocks regular script.js\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n      if(document.location.href.indexOf(&#39;localhost&#39;) !== -1) {\r\n        const scr = document.createElement(&#39;script&#39;);\r\n        document.setAttribute(&#39;type&#39;, &#39;text/javascript&#39;);\r\n        document.setAttribute(&#39;src&#39;, &#39;scripts.js&#39; + &#39;?wizardry=&#39; + Math.random());\r\n        document.head.appendChild(scr);\r\n        document.write(&#39;&lt;script type=&quot;application/x-suppress&quot;&gt;&#39;); // prevent next script(from other SO answer)\r\n      }\r\n    &lt;/script&gt;\r\n    &lt;script type=&quot;text/javascript&quot; src=&quot;scripts.js&quot;&gt;\r\n\r\n"}], "title": "How to force browser to reload cached CSS/JS files?", "view_count": 308449, "answer_count": 44, "code_snippet": ["<code>ExpiresActive On ExpiresDefault \"modification\"</code>", "<code>iframe.contentWindow.location.reload(true)</code>", "<code>.htaccess</code>", "<code>json-1.3.js</code>", "<code>RewriteEngine on\nRewriteRule ^(.*)\\.[\\d]{10}\\.(css|js)$ $1.$2 [L]\n</code>", "<code>/**\n *  Given a file, i.e. /css/base.css, replaces it with a string containing the\n *  file's mtime, i.e. /css/base.1221534296.css.\n *  \n *  @param $file  The file to be loaded.  Must be an absolute path (i.e.\n *                starting with slash).\n */\nfunction auto_version($file)\n{\n  if(strpos($file, '/') !== 0 || !file_exists($_SERVER['DOCUMENT_ROOT'] . $file))\n    return $file;\n\n  $mtime = filemtime($_SERVER['DOCUMENT_ROOT'] . $file);\n  return preg_replace('{\\\\.([^./]+)$}', \".$mtime.\\$1\", $file);\n}\n</code>", "<code>&lt;link rel=\"stylesheet\" href=\"/css/base.css\" type=\"text/css\" /&gt;\n</code>", "<code>&lt;link rel=\"stylesheet\" href=\"&lt;?php echo auto_version('/css/base.css'); ?&gt;\" type=\"text/css\" /&gt;\n</code>", "<code>file_exists</code>", "<code>filemtime</code>", "<code>&lt;script src=\"/myJavascript.js?version=4\"&gt;&lt;/script&gt;\n</code>", "<code>&lt;!-- Development version: --&gt;\n&lt;script&gt;document.write('&lt;script src=\"/myJavascript.js?dev=' + Math.floor(Math.random() * 100) + '\"\\&gt;&lt;\\/script&gt;');&lt;/script&gt;\n</code>", "<code>http://mysite.com/css/[md5_hash_here]/style.css\n</code>", "<code>&lt;link rel=\"stylesheet\" href=\"mycss.css?v=&lt;?php echo filemtime('mycss.css') ?&gt;\"/&gt;\n</code>", "<code>mycss.css?1234567890</code>", "<code>&lt;link rel=\"stylesheet\" href=\"mycss.css?&lt;?php echo filemtime('mycss.css') ?&gt;\"/&gt;</code>", "<code>?ver=</code>", "<code>?foo=1234</code>", "<code>/some.template</code>", "<code>/some.template</code>", "<code>/some.template</code>", "<code>/v&lt;release_tag_1&gt;/\u2026files\u2026</code>", "<code>/v&lt;release_tag_2&gt;/\u2026files\u2026</code>", "<code>&lt;script&gt;</code>", "<code>&lt;link&gt;</code>", "<code>&lt;base&gt;</code>", "<code>base</code>", "<code>obsolete</code>", "<code>RewriteRule ^(.*)\\.[^.][\\d]+\\.(css|js)$ $1.$2 [L]\n</code>", "<code>^(.*)\\.[\\d]{10}\\.(css|js)$ $1.$2</code>", "<code>&lt;link rel=\"stylesheet\" href=\"/css/base.css?[hash-here]\" type=\"text/css\" /&gt;\n</code>", "<code>http://localhost/MvcBM_time/bundles/AllMyScripts?v=r0sLDicvP58AIXN_mc3QdyVvVj5euZNzdsa2N1PKvb81</code>", "<code>/**\n * Extend filepath with timestamp to force browser to\n * automatically refresh them if they are updated\n *\n * This is based on Kip's version, but now\n * also works on virtual hosts\n * @link http://stackoverflow.com/questions/118884/what-is-an-elegant-way-to-force-browsers-to-reload-cached-css-js-files\n *\n * Usage:\n * - extend your .htaccess file with\n * # Route for My_View_Helper_AutoRefreshRewriter\n * # which extends files with there timestamp so if these\n * # are updated a automatic refresh should occur\n * # RewriteRule ^(.*)\\.[^.][\\d]+\\.(css|js)$ $1.$2 [L]\n * - then use it in your view script like\n * $this-&gt;headLink()-&gt;appendStylesheet( $this-&gt;autoRefreshRewriter($this-&gt;cssPath . 'default.css'));\n *\n */\nclass My_View_Helper_AutoRefreshRewriter extends Zend_View_Helper_Abstract {\n\n    public function autoRefreshRewriter($filePath) {\n\n        if (strpos($filePath, '/') !== 0) {\n\n            // path has no leading '/'\n            return $filePath;\n        } elseif (file_exists($_SERVER['DOCUMENT_ROOT'] . $filePath)) {\n\n            // file exists under normal path\n            // so build path based on this\n            $mtime = filemtime($_SERVER['DOCUMENT_ROOT'] . $filePath);\n            return preg_replace('{\\\\.([^./]+)$}', \".$mtime.\\$1\", $filePath);\n        } else {\n\n            // fetch directory of index.php file (file from all others are included)\n            // and get only the directory\n            $indexFilePath = dirname(current(get_included_files()));\n\n            // check if file exist relativ to index file\n            if (file_exists($indexFilePath . $filePath)) {\n\n                // get timestamp based on this relativ path\n                $mtime = filemtime($indexFilePath . $filePath);\n\n                // write generated timestamp to path\n                // but use old path not the relativ one\n                return preg_replace('{\\\\.([^./]+)$}', \".$mtime.\\$1\", $filePath);\n            } else {\n\n                return $filePath;\n            }\n        }\n    }\n\n}\n</code>", "<code>(function(){\n\n    // Match this timestamp with the release of your code\n    var lastVersioning = Date.UTC(2014, 11, 20, 2, 15, 10);\n\n    var lastCacheDateTime = localStorage.getItem('lastCacheDatetime');\n\n    if(lastCacheDateTime){\n        if(lastVersioning &gt; lastCacheDateTime){\n            var reload = true;\n        }\n    }\n\n    localStorage.setItem('lastCacheDatetime', Date.now());\n\n    if(reload){\n        location.reload(true);\n    }\n\n})();\n</code>", "<code>location.reload(true)</code>", "<code>&lt;head&gt;</code>", "<code>&lt;link rel=\"stylesheet\" src=\"myStyles.css?ABCDEF12345sessionID\" /&gt;\n&lt;script language=\"javascript\" src=\"myCode.js?ABCDEF12345sessionID\"&gt;&lt;/script&gt;\n</code>", "<code>&lt;link rel=\"stylesheet\" src=\"myStyles.css?20080922_1020\" /&gt;\n&lt;script language=\"javascript\" src=\"myCode.js?20080922_1120\"&gt;&lt;/script&gt;\n</code>", "<code>/styles/screen.css\n</code>", "<code>/styles/screen.css?v=1234\n</code>", "<code>/v/1234/styles/screen.css\n</code>", "<code>background-image</code>", "<code>body {\n    background-image: url('images/happy.gif');\n}\n</code>", "<code>/v/1234/styles/images/happy.gif\n</code>", "<code>images/happy.gif</code>", "<code>/styles/screen.css?v=1235</code>", "<code>/styles/images/happy.gif</code>", "<code>/v/*</code>", "<code>/styles/screen.css</code>", "<code>DefaultServlet</code>", "<code>.css</code>", "<code>.js</code>", "<code>&lt;?php    header( 'Location: folder1/login.phtml' ); ?&gt;</code>", "<code>example.css?randomNo=Math.random()\n</code>", "<code>&lt;script type=\"text/javascript\" src=\"Scripts/exampleScript&lt;%=Global.JsPostfix%&gt;\" /&gt;\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"Css/exampleCss&lt;%=Global.CssPostfix%&gt;\" /&gt;\n</code>", "<code>protected void Application_Start(object sender, EventArgs e)\n{\n    ...\n    string jsVersion = ConfigurationManager.AppSettings[\"JsVersion\"];\n    bool updateEveryAppStart = Convert.ToBoolean(ConfigurationManager.AppSettings[\"UpdateJsEveryAppStart\"]);\n    int buildNumber = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.Revision;\n    JsPostfix = \"\";\n#if !DEBUG\n    JsPostfix += \".min\";\n#endif      \n    JsPostfix += \".js?\" + jsVersion + \"_\" + buildNumber;\n    if (updateEveryAppStart)\n    {\n        Random rand = new Random();\n        JsPosfix += \"_\" + rand.Next();\n    }\n    ...\n}\n</code>", "<code>&lt;script&gt;\n    var node = document.createElement(\"script\"); \n    node.type = \"text/javascript\";\n    node.src = 'test.js?'+Math.floor(Math.random()*999999999);\n    document.getElementsByTagName(\"head\")[0].appendChild(node);\n&lt;/script&gt;\n</code>", "<code>&lt;script src=\"{{ asset('/js/your.js?v='.filemtime('js/your.js')) }}\"&gt;&lt;/script&gt;\n</code>", "<code>&lt;link rel=\"stylesheet\" href=\"{{asset('css/your.css?v='.filemtime('css/your.css'))}}\"&gt;\n</code>", "<code>def import_tag(pattern, name, **kw):\n    if name[0] == \"/\":\n        name = name[1:]\n    # Additional HTML attributes\n    attrs = ' '.join(['%s=\"%s\"' % item for item in kw.items()])\n    try:\n        # Get the files modification time\n        mtime = os.stat(os.path.join('/documentroot', name)).st_mtime\n        include = \"%s?%d\" % (name, mtime)\n        # this is the same as sprintf(pattern, attrs, include) in other\n        # languages\n        return pattern % (attrs, include)\n    except:\n        # In case of error return the include without the added query\n        # parameter.\n        return pattern % (attrs, name)\n\ndef script(name, **kw):\n    return import_tag(\"\"\"&lt;script type=\"text/javascript\" \"\"\" +\\\n        \"\"\" %s src=\"/%s\"&gt;&lt;/script&gt;\"\"\", name, **kw)\n\ndef stylesheet(name, **kw):\n    return import_tag('&lt;link rel=\"stylesheet\" type=\"text/css\" ' +\\\n        \"\"\"%s href=\"/%s\"&gt;', name, **kw) \n</code>", "<code>script(\"/main.css\")\n</code>", "<code>&lt;link rel=\"stylesheet\" type=\"text/css\"  href=\"/main.css?1221842734\"&gt;\n</code>", "<code>ant menu</code>", "<code>More Tools</code>", "<code>Developer Tools</code>", "<code>right click</code>", "<code>Inspect Element</code>", "<code>?$Now.Format(dmYHis)\n</code>", "<code>exec('git rev-parse --verify HEAD 2&gt; /dev/null', $gitLog);\necho '  &lt;script src=\"/path/to/script.js\"?v='.$gitLog[0].'&gt;&lt;/script&gt;'.PHP_EOL;\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "pytz"], "creation_date": 1355426677, "body_markdown": "I would like to know what are all the possible values for the timezone argument in the Python library Pytz.\r\n\r\n\r\n**SOLUTION**\r\n\r\n    for tz in pytz.all_timezones:\r\n        print tz\r\n\r\n\r\n    Africa/Abidjan\r\n    Africa/Accra\r\n    Africa/Addis_Ababa\r\n    Africa/Algiers\r\n    Africa/Asmara\r\n    Africa/Asmera\r\n    Africa/Bamako\r\n    Africa/Bangui\r\n    Africa/Banjul\r\n    Africa/Bissau\r\n    Africa/Blantyre\r\n    Africa/Brazzaville\r\n    Africa/Bujumbura\r\n    Africa/Cairo\r\n    Africa/Casablanca\r\n    Africa/Ceuta\r\n    Africa/Conakry\r\n    Africa/Dakar\r\n    Africa/Dar_es_Salaam\r\n    Africa/Djibouti\r\n    Africa/Douala\r\n    Africa/El_Aaiun\r\n    Africa/Freetown\r\n    Africa/Gaborone\r\n    Africa/Harare\r\n    Africa/Johannesburg\r\n    Africa/Juba\r\n    Africa/Kampala\r\n    Africa/Khartoum\r\n    Africa/Kigali\r\n    Africa/Kinshasa\r\n    Africa/Lagos\r\n    Africa/Libreville\r\n    Africa/Lome\r\n    Africa/Luanda\r\n    Africa/Lubumbashi\r\n    Africa/Lusaka\r\n    Africa/Malabo\r\n    Africa/Maputo\r\n    Africa/Maseru\r\n    Africa/Mbabane\r\n    Africa/Mogadishu\r\n    Africa/Monrovia\r\n    Africa/Nairobi\r\n    Africa/Ndjamena\r\n    Africa/Niamey\r\n    Africa/Nouakchott\r\n    Africa/Ouagadougou\r\n    Africa/Porto-Novo\r\n    Africa/Sao_Tome\r\n    Africa/Timbuktu\r\n    Africa/Tripoli\r\n    Africa/Tunis\r\n    Africa/Windhoek\r\n    America/Adak\r\n    America/Anchorage\r\n    America/Anguilla\r\n    America/Antigua\r\n    America/Araguaina\r\n    America/Argentina/Buenos_Aires\r\n    America/Argentina/Catamarca\r\n    America/Argentina/ComodRivadavia\r\n    America/Argentina/Cordoba\r\n    America/Argentina/Jujuy\r\n    America/Argentina/La_Rioja\r\n    America/Argentina/Mendoza\r\n    America/Argentina/Rio_Gallegos\r\n    America/Argentina/Salta\r\n    America/Argentina/San_Juan\r\n    America/Argentina/San_Luis\r\n    America/Argentina/Tucuman\r\n    America/Argentina/Ushuaia\r\n    America/Aruba\r\n    America/Asuncion\r\n    America/Atikokan\r\n    America/Atka\r\n    America/Bahia\r\n    America/Bahia_Banderas\r\n    America/Barbados\r\n    America/Belem\r\n    America/Belize\r\n    America/Blanc-Sablon\r\n    America/Boa_Vista\r\n    America/Bogota\r\n    America/Boise\r\n    America/Buenos_Aires\r\n    America/Cambridge_Bay\r\n    America/Campo_Grande\r\n    America/Cancun\r\n    America/Caracas\r\n    America/Catamarca\r\n    America/Cayenne\r\n    America/Cayman\r\n    America/Chicago\r\n    America/Chihuahua\r\n    America/Coral_Harbour\r\n    America/Cordoba\r\n    America/Costa_Rica\r\n    America/Creston\r\n    America/Cuiaba\r\n    America/Curacao\r\n    America/Danmarkshavn\r\n    America/Dawson\r\n    America/Dawson_Creek\r\n    America/Denver\r\n    America/Detroit\r\n    America/Dominica\r\n    America/Edmonton\r\n    America/Eirunepe\r\n    America/El_Salvador\r\n    America/Ensenada\r\n    America/Fort_Wayne\r\n    America/Fortaleza\r\n    America/Glace_Bay\r\n    America/Godthab\r\n    America/Goose_Bay\r\n    America/Grand_Turk\r\n    America/Grenada\r\n    America/Guadeloupe\r\n    America/Guatemala\r\n    America/Guayaquil\r\n    America/Guyana\r\n    America/Halifax\r\n    America/Havana\r\n    America/Hermosillo\r\n    America/Indiana/Indianapolis\r\n    America/Indiana/Knox\r\n    America/Indiana/Marengo\r\n    America/Indiana/Petersburg\r\n    America/Indiana/Tell_City\r\n    America/Indiana/Vevay\r\n    America/Indiana/Vincennes\r\n    America/Indiana/Winamac\r\n    America/Indianapolis\r\n    America/Inuvik\r\n    America/Iqaluit\r\n    America/Jamaica\r\n    America/Jujuy\r\n    America/Juneau\r\n    America/Kentucky/Louisville\r\n    America/Kentucky/Monticello\r\n    America/Knox_IN\r\n    America/Kralendijk\r\n    America/La_Paz\r\n    America/Lima\r\n    America/Los_Angeles\r\n    America/Louisville\r\n    America/Lower_Princes\r\n    America/Maceio\r\n    America/Managua\r\n    America/Manaus\r\n    America/Marigot\r\n    America/Martinique\r\n    America/Matamoros\r\n    America/Mazatlan\r\n    America/Mendoza\r\n    America/Menominee\r\n    America/Merida\r\n    America/Metlakatla\r\n    America/Mexico_City\r\n    America/Miquelon\r\n    America/Moncton\r\n    America/Monterrey\r\n    America/Montevideo\r\n    America/Montreal\r\n    America/Montserrat\r\n    America/Nassau\r\n    America/New_York\r\n    America/Nipigon\r\n    America/Nome\r\n    America/Noronha\r\n    America/North_Dakota/Beulah\r\n    America/North_Dakota/Center\r\n    America/North_Dakota/New_Salem\r\n    America/Ojinaga\r\n    America/Panama\r\n    America/Pangnirtung\r\n    America/Paramaribo\r\n    America/Phoenix\r\n    America/Port-au-Prince\r\n    America/Port_of_Spain\r\n    America/Porto_Acre\r\n    America/Porto_Velho\r\n    America/Puerto_Rico\r\n    America/Rainy_River\r\n    America/Rankin_Inlet\r\n    America/Recife\r\n    America/Regina\r\n    America/Resolute\r\n    America/Rio_Branco\r\n    America/Rosario\r\n    America/Santa_Isabel\r\n    America/Santarem\r\n    America/Santiago\r\n    America/Santo_Domingo\r\n    America/Sao_Paulo\r\n    America/Scoresbysund\r\n    America/Shiprock\r\n    America/Sitka\r\n    America/St_Barthelemy\r\n    America/St_Johns\r\n    America/St_Kitts\r\n    America/St_Lucia\r\n    America/St_Thomas\r\n    America/St_Vincent\r\n    America/Swift_Current\r\n    America/Tegucigalpa\r\n    America/Thule\r\n    America/Thunder_Bay\r\n    America/Tijuana\r\n    America/Toronto\r\n    America/Tortola\r\n    America/Vancouver\r\n    America/Virgin\r\n    America/Whitehorse\r\n    America/Winnipeg\r\n    America/Yakutat\r\n    America/Yellowknife\r\n    Antarctica/Casey\r\n    Antarctica/Davis\r\n    Antarctica/DumontDUrville\r\n    Antarctica/Macquarie\r\n    Antarctica/Mawson\r\n    Antarctica/McMurdo\r\n    Antarctica/Palmer\r\n    Antarctica/Rothera\r\n    Antarctica/South_Pole\r\n    Antarctica/Syowa\r\n    Antarctica/Vostok\r\n    Arctic/Longyearbyen\r\n    Asia/Aden\r\n    Asia/Almaty\r\n    Asia/Amman\r\n    Asia/Anadyr\r\n    Asia/Aqtau\r\n    Asia/Aqtobe\r\n    Asia/Ashgabat\r\n    Asia/Ashkhabad\r\n    Asia/Baghdad\r\n    Asia/Bahrain\r\n    Asia/Baku\r\n    Asia/Bangkok\r\n    Asia/Beirut\r\n    Asia/Bishkek\r\n    Asia/Brunei\r\n    Asia/Calcutta\r\n    Asia/Choibalsan\r\n    Asia/Chongqing\r\n    Asia/Chungking\r\n    Asia/Colombo\r\n    Asia/Dacca\r\n    Asia/Damascus\r\n    Asia/Dhaka\r\n    Asia/Dili\r\n    Asia/Dubai\r\n    Asia/Dushanbe\r\n    Asia/Gaza\r\n    Asia/Harbin\r\n    Asia/Hebron\r\n    Asia/Ho_Chi_Minh\r\n    Asia/Hong_Kong\r\n    Asia/Hovd\r\n    Asia/Irkutsk\r\n    Asia/Istanbul\r\n    Asia/Jakarta\r\n    Asia/Jayapura\r\n    Asia/Jerusalem\r\n    Asia/Kabul\r\n    Asia/Kamchatka\r\n    Asia/Karachi\r\n    Asia/Kashgar\r\n    Asia/Kathmandu\r\n    Asia/Katmandu\r\n    Asia/Kolkata\r\n    Asia/Krasnoyarsk\r\n    Asia/Kuala_Lumpur\r\n    Asia/Kuching\r\n    Asia/Kuwait\r\n    Asia/Macao\r\n    Asia/Macau\r\n    Asia/Magadan\r\n    Asia/Makassar\r\n    Asia/Manila\r\n    Asia/Muscat\r\n    Asia/Nicosia\r\n    Asia/Novokuznetsk\r\n    Asia/Novosibirsk\r\n    Asia/Omsk\r\n    Asia/Oral\r\n    Asia/Phnom_Penh\r\n    Asia/Pontianak\r\n    Asia/Pyongyang\r\n    Asia/Qatar\r\n    Asia/Qyzylorda\r\n    Asia/Rangoon\r\n    Asia/Riyadh\r\n    Asia/Saigon\r\n    Asia/Sakhalin\r\n    Asia/Samarkand\r\n    Asia/Seoul\r\n    Asia/Shanghai\r\n    Asia/Singapore\r\n    Asia/Taipei\r\n    Asia/Tashkent\r\n    Asia/Tbilisi\r\n    Asia/Tehran\r\n    Asia/Tel_Aviv\r\n    Asia/Thimbu\r\n    Asia/Thimphu\r\n    Asia/Tokyo\r\n    Asia/Ujung_Pandang\r\n    Asia/Ulaanbaatar\r\n    Asia/Ulan_Bator\r\n    Asia/Urumqi\r\n    Asia/Vientiane\r\n    Asia/Vladivostok\r\n    Asia/Yakutsk\r\n    Asia/Yekaterinburg\r\n    Asia/Yerevan\r\n    Atlantic/Azores\r\n    Atlantic/Bermuda\r\n    Atlantic/Canary\r\n    Atlantic/Cape_Verde\r\n    Atlantic/Faeroe\r\n    Atlantic/Faroe\r\n    Atlantic/Jan_Mayen\r\n    Atlantic/Madeira\r\n    Atlantic/Reykjavik\r\n    Atlantic/South_Georgia\r\n    Atlantic/St_Helena\r\n    Atlantic/Stanley\r\n    Australia/ACT\r\n    Australia/Adelaide\r\n    Australia/Brisbane\r\n    Australia/Broken_Hill\r\n    Australia/Canberra\r\n    Australia/Currie\r\n    Australia/Darwin\r\n    Australia/Eucla\r\n    Australia/Hobart\r\n    Australia/LHI\r\n    Australia/Lindeman\r\n    Australia/Lord_Howe\r\n    Australia/Melbourne\r\n    Australia/NSW\r\n    Australia/North\r\n    Australia/Perth\r\n    Australia/Queensland\r\n    Australia/South\r\n    Australia/Sydney\r\n    Australia/Tasmania\r\n    Australia/Victoria\r\n    Australia/West\r\n    Australia/Yancowinna\r\n    Brazil/Acre\r\n    Brazil/DeNoronha\r\n    Brazil/East\r\n    Brazil/West\r\n    CET\r\n    CST6CDT\r\n    Canada/Atlantic\r\n    Canada/Central\r\n    Canada/East-Saskatchewan\r\n    Canada/Eastern\r\n    Canada/Mountain\r\n    Canada/Newfoundland\r\n    Canada/Pacific\r\n    Canada/Saskatchewan\r\n    Canada/Yukon\r\n    Chile/Continental\r\n    Chile/EasterIsland\r\n    Cuba\r\n    EET\r\n    EST\r\n    EST5EDT\r\n    Egypt\r\n    Eire\r\n    Etc/GMT\r\n    Etc/GMT+0\r\n    Etc/GMT+1\r\n    Etc/GMT+10\r\n    Etc/GMT+11\r\n    Etc/GMT+12\r\n    Etc/GMT+2\r\n    Etc/GMT+3\r\n    Etc/GMT+4\r\n    Etc/GMT+5\r\n    Etc/GMT+6\r\n    Etc/GMT+7\r\n    Etc/GMT+8\r\n    Etc/GMT+9\r\n    Etc/GMT-0\r\n    Etc/GMT-1\r\n    Etc/GMT-10\r\n    Etc/GMT-11\r\n    Etc/GMT-12\r\n    Etc/GMT-13\r\n    Etc/GMT-14\r\n    Etc/GMT-2\r\n    Etc/GMT-3\r\n    Etc/GMT-4\r\n    Etc/GMT-5\r\n    Etc/GMT-6\r\n    Etc/GMT-7\r\n    Etc/GMT-8\r\n    Etc/GMT-9\r\n    Etc/GMT0\r\n    Etc/Greenwich\r\n    Etc/UCT\r\n    Etc/UTC\r\n    Etc/Universal\r\n    Etc/Zulu\r\n    Europe/Amsterdam\r\n    Europe/Andorra\r\n    Europe/Athens\r\n    Europe/Belfast\r\n    Europe/Belgrade\r\n    Europe/Berlin\r\n    Europe/Bratislava\r\n    Europe/Brussels\r\n    Europe/Bucharest\r\n    Europe/Budapest\r\n    Europe/Chisinau\r\n    Europe/Copenhagen\r\n    Europe/Dublin\r\n    Europe/Gibraltar\r\n    Europe/Guernsey\r\n    Europe/Helsinki\r\n    Europe/Isle_of_Man\r\n    Europe/Istanbul\r\n    Europe/Jersey\r\n    Europe/Kaliningrad\r\n    Europe/Kiev\r\n    Europe/Lisbon\r\n    Europe/Ljubljana\r\n    Europe/London\r\n    Europe/Luxembourg\r\n    Europe/Madrid\r\n    Europe/Malta\r\n    Europe/Mariehamn\r\n    Europe/Minsk\r\n    Europe/Monaco\r\n    Europe/Moscow\r\n    Europe/Nicosia\r\n    Europe/Oslo\r\n    Europe/Paris\r\n    Europe/Podgorica\r\n    Europe/Prague\r\n    Europe/Riga\r\n    Europe/Rome\r\n    Europe/Samara\r\n    Europe/San_Marino\r\n    Europe/Sarajevo\r\n    Europe/Simferopol\r\n    Europe/Skopje\r\n    Europe/Sofia\r\n    Europe/Stockholm\r\n    Europe/Tallinn\r\n    Europe/Tirane\r\n    Europe/Tiraspol\r\n    Europe/Uzhgorod\r\n    Europe/Vaduz\r\n    Europe/Vatican\r\n    Europe/Vienna\r\n    Europe/Vilnius\r\n    Europe/Volgograd\r\n    Europe/Warsaw\r\n    Europe/Zagreb\r\n    Europe/Zaporozhye\r\n    Europe/Zurich\r\n    GB\r\n    GB-Eire\r\n    GMT\r\n    GMT+0\r\n    GMT-0\r\n    GMT0\r\n    Greenwich\r\n    HST\r\n    Hongkong\r\n    Iceland\r\n    Indian/Antananarivo\r\n    Indian/Chagos\r\n    Indian/Christmas\r\n    Indian/Cocos\r\n    Indian/Comoro\r\n    Indian/Kerguelen\r\n    Indian/Mahe\r\n    Indian/Maldives\r\n    Indian/Mauritius\r\n    Indian/Mayotte\r\n    Indian/Reunion\r\n    Iran\r\n    Israel\r\n    Jamaica\r\n    Japan\r\n    Kwajalein\r\n    Libya\r\n    MET\r\n    MST\r\n    MST7MDT\r\n    Mexico/BajaNorte\r\n    Mexico/BajaSur\r\n    Mexico/General\r\n    NZ\r\n    NZ-CHAT\r\n    Navajo\r\n    PRC\r\n    PST8PDT\r\n    Pacific/Apia\r\n    Pacific/Auckland\r\n    Pacific/Chatham\r\n    Pacific/Chuuk\r\n    Pacific/Easter\r\n    Pacific/Efate\r\n    Pacific/Enderbury\r\n    Pacific/Fakaofo\r\n    Pacific/Fiji\r\n    Pacific/Funafuti\r\n    Pacific/Galapagos\r\n    Pacific/Gambier\r\n    Pacific/Guadalcanal\r\n    Pacific/Guam\r\n    Pacific/Honolulu\r\n    Pacific/Johnston\r\n    Pacific/Kiritimati\r\n    Pacific/Kosrae\r\n    Pacific/Kwajalein\r\n    Pacific/Majuro\r\n    Pacific/Marquesas\r\n    Pacific/Midway\r\n    Pacific/Nauru\r\n    Pacific/Niue\r\n    Pacific/Norfolk\r\n    Pacific/Noumea\r\n    Pacific/Pago_Pago\r\n    Pacific/Palau\r\n    Pacific/Pitcairn\r\n    Pacific/Pohnpei\r\n    Pacific/Ponape\r\n    Pacific/Port_Moresby\r\n    Pacific/Rarotonga\r\n    Pacific/Saipan\r\n    Pacific/Samoa\r\n    Pacific/Tahiti\r\n    Pacific/Tarawa\r\n    Pacific/Tongatapu\r\n    Pacific/Truk\r\n    Pacific/Wake\r\n    Pacific/Wallis\r\n    Pacific/Yap\r\n    Poland\r\n    Portugal\r\n    ROC\r\n    ROK\r\n    Singapore\r\n    Turkey\r\n    UCT\r\n    US/Alaska\r\n    US/Aleutian\r\n    US/Arizona\r\n    US/Central\r\n    US/East-Indiana\r\n    US/Eastern\r\n    US/Hawaii\r\n    US/Indiana-Starke\r\n    US/Michigan\r\n    US/Mountain\r\n    US/Pacific\r\n    US/Pacific-New\r\n    US/Samoa\r\n    UTC\r\n    Universal\r\n    W-SU\r\n    WET\r\n    Zulu", "last_edit_date": 1449558149, "up_vote_count": 299, "link": "https://stackoverflow.com/questions/13866926/python-pytz-list-of-timezones", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1355428103, "answer_id": 13867305, "path": "stack.django.answer", "score": 15, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1355428103, "body_markdown": "The timezone name is the only reliable way to specify the timezone. \r\n\r\nYou can find a list of timezone names here: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones\r\nNote that this list contains a lot of alias names, such as US/Eastern for the timezone that is properly called America/New_York.\r\n\r\nIf you programatically want to create this list from the zoneinfo database you can compile it from the zone.tab file in the zoneinfo database. I don&#39;t think pytz has an API to get them, and I also don&#39;t think it would be very useful."}, {"tags": [], "down_vote_count": 0, "creation_date": 1355428156, "answer_id": 13867319, "path": "stack.django.answer", "score": 150, "up_vote_count": 150, "is_accepted": true, "last_activity_date": 1355428156, "body_markdown": "You can list all the available timezones with `pytz.all_timezones`:\r\n\r\n    In [40]: import pytz\r\n    In [41]: pytz.all_timezones\r\n    Out[42]: \r\n    [&#39;Africa/Abidjan&#39;,\r\n     &#39;Africa/Accra&#39;,\r\n     &#39;Africa/Addis_Ababa&#39;,\r\n     ...]\r\n\r\nThere is also `pytz.common_timezones`:\r\n\r\n    In [45]: len(pytz.common_timezones)\r\n    Out[45]: 403\r\n    \r\n    In [46]: len(pytz.all_timezones)\r\n    Out[46]: 563\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1415744075, "answer_id": 26875601, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1415744075, "body_markdown": "They appear to be populated by the *tz database time zones* found [here](http://en.wikipedia.org/wiki/List_of_tz_database_time_zones).\r\n\r\n![enter image description here][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/lhwv0.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1468494457, "answer_id": 38372576, "path": "stack.django.answer", "score": 5, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1468502045, "last_edit_date": 1468502045, "body_markdown": "Here, Python list of country codes, names, continents, capitals, and pytz timezones.\r\n\r\n\r\n    countries = [\r\n    {&#39;timezones&#39;: [&#39;Europe/Paris&#39;], &#39;code&#39;: &#39;FR&#39;, &#39;continent&#39;: &#39;Europe&#39;, &#39;name&#39;: &#39;France&#39;, &#39;capital&#39;: &#39;Paris&#39;}\r\n    {&#39;timezones&#39;: [&#39;Africa/Kampala&#39;], &#39;code&#39;: &#39;UG&#39;, &#39;continent&#39;: &#39;Africa&#39;, &#39;name&#39;: &#39;Uganda&#39;, &#39;capital&#39;: &#39;Kampala&#39;},\r\n    {&#39;timezones&#39;: [&#39;Asia/Colombo&#39;], &#39;code&#39;: &#39;LK&#39;, &#39;continent&#39;: &#39;Asia&#39;, &#39;name&#39;: &#39;Sri Lanka&#39;, &#39;capital&#39;: &#39;Sri Jayewardenepura Kotte&#39;},\r\n    {&#39;timezones&#39;: [&#39;Asia/Riyadh&#39;], &#39;code&#39;: &#39;SA&#39;, &#39;continent&#39;: &#39;Asia&#39;, &#39;name&#39;: &#39;Saudi Arabia&#39;, &#39;capital&#39;: &#39;Riyadh&#39;},\r\n    {&#39;timezones&#39;: [&#39;Africa/Luanda&#39;], &#39;code&#39;: &#39;AO&#39;, &#39;continent&#39;: &#39;Africa&#39;, &#39;name&#39;: &#39;Angola&#39;, &#39;capital&#39;: &#39;Luanda&#39;},    \r\n    {&#39;timezones&#39;: [&#39;Europe/Vienna&#39;], &#39;code&#39;: &#39;AT&#39;, &#39;continent&#39;: &#39;Europe&#39;, &#39;name&#39;: &#39;Austria&#39;, &#39;capital&#39;: &#39;Vienna&#39;},\r\n    {&#39;timezones&#39;: [&#39;Asia/Calcutta&#39;], &#39;code&#39;: &#39;IN&#39;, &#39;continent&#39;: &#39;Asia&#39;, &#39;name&#39;: &#39;India&#39;, &#39;capital&#39;: &#39;New Delhi&#39;},\r\n    {&#39;timezones&#39;: [&#39;Asia/Dubai&#39;], &#39;code&#39;: &#39;AE&#39;, &#39;continent&#39;: &#39;Asia&#39;, &#39;name&#39;: &#39;United Arab Emirates&#39;, &#39;capital&#39;: &#39;Abu Dhabi&#39;},\r\n    {&#39;timezones&#39;: [&#39;Europe/London&#39;], &#39;code&#39;: &#39;GB&#39;, &#39;continent&#39;: &#39;Europe&#39;, &#39;name&#39;: &#39;United Kingdom&#39;, &#39;capital&#39;: &#39;London&#39;},\r\n    ]\r\n\r\nFor full list : \r\n[Gist Github][1]\r\n\r\nHope, It helps.\r\n\r\n  [1]: https://gist.github.com/mjrulesamrat/0c1f7de951d3c508fb3a20b4b0b33a98\r\n"}, {"tags": [], "down_vote_count": 3, "creation_date": 1471855723, "answer_id": 39075001, "path": "stack.django.answer", "score": -3, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1471855723, "body_markdown": "In my opinion this is a design flaw of pytz library. It should be more reliable to specify a timezone using the offset, e.g.\r\n\r\n    pytz.construct(&quot;UTC-07:00&quot;)\r\n\r\nwhich gives you Canada/Pacific timezone."}, {"tags": [], "down_vote_count": 0, "creation_date": 1484325251, "answer_id": 41639307, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1490785371, "last_edit_date": 1490785371, "body_markdown": "**Don&#39;t create your own list** - `pytz` has a built-in set:\r\n\r\n \r\n\r\n    import pytz\r\n    set(pytz.all_timezones_set)  \r\n    &gt;&gt;&gt; {&#39;Europe/Vienna&#39;, &#39;America/New_York&#39;, &#39;America/Argentina/Salta&#39;,..}\r\n\r\nYou can then **apply a timezone**:\r\n\r\n    import datetime\r\n    tz = pytz.timezone(&#39;Pacific/Johnston&#39;)\r\n    ct = datetime.datetime.now(tz=tz)\r\n    &gt;&gt;&gt; ct.isoformat()\r\n    2017-01-13T11:29:22.601991-05:00\r\n\r\nOr **if you already have a `datetime` object** that is **TZ aware** (not naive):\r\n\r\n    # This timestamp is in UTC\r\n    my_ct = datetime.datetime.now(tz=pytz.UTC)\r\n    \r\n    # Now convert it to another timezone\r\n    new_ct = my_ct.astimezone(tz)\r\n    &gt;&gt;&gt; new_ct.isoformat()\r\n    2017-01-13T11:29:22.601991-05:00"}, {"tags": [], "down_vote_count": 1, "creation_date": 1517499111, "answer_id": 48566388, "path": "stack.django.answer", "score": -1, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1517539427, "last_edit_date": 1517539427, "body_markdown": "If you are on a Unix-like platform, I would suggest you avoid pytz and look just at /usr/share/zoneinfo. dateutil.tz can utilize the information there.\r\n\r\nThe following piece of code shows the problem pytz can give. I was shocked when I first found it out. (Interestingly enough, the pytz installed by yum on CentOS 7 does not exhibit this problem.)\r\n\r\n    import pytz\r\n    import dateutil.tz\r\n    from datetime import datetime\r\n    print((datetime(2017,2,13,14,29,29, tzinfo=pytz.timezone(&#39;Asia/Shanghai&#39;))\r\n         - datetime(2017,2,13,14,29,29, tzinfo=pytz.timezone(&#39;UTC&#39;)))\r\n         .total_seconds())\r\n    print((datetime(2017,2,13,14,29,29, tzinfo=dateutil.tz.gettz(&#39;Asia/Shanghai&#39;))\r\n         - datetime(2017,2,13,14,29,29, tzinfo=dateutil.tz.tzutc()))\r\n         .total_seconds())\r\n\r\n    -29160.0\r\n    -28800.0\r\n\r\n\r\nI.e. the timezone created by pytz is for the true local time, instead of the standard local time people observe. Shanghai conforms to +0800, not +0806 as suggested by pytz:\r\n\r\n    pytz.timezone(&#39;Asia/Shanghai&#39;)\r\n    &lt;DstTzInfo &#39;Asia/Shanghai&#39; LMT+8:06:00 STD&gt;\r\n\r\n**EDIT:** Thanks to Mark Ransom&#39;s comment and downvote, now I know I am using pytz the wrong way. In summary, you are not supposed to pass the result of `pytz.timezone(\u2026)` to `datetime`, but should pass the `datetime` to its `localize` method.\r\n\r\nDespite his argument (and my bad for not reading the pytz documentation more carefully), I am not deleting the answer, nor am I modifying my suggestions. I was answering the question in one way (how to enumerate the supported timezones, though not with pytz), because I believed pytz did not provide a correct solution. Though my belief was wrong, this answer is still providing some information, IMHO, which is potentially useful to people interested in this question. Pytz&#39;s *correct* way of doing things is counterintuitive. Heck, if the *tzinfo* created by pytz should not be directly used by `datetime`, it should be a different type. The pytz interface is simply badly designed. **The link provided by Mark shows that many people, not just me, are misled by the pytz interface.**"}], "title": "Python - Pytz - List of Timezones?", "view_count": 150175, "answer_count": 7, "code_snippet": ["<code>for tz in pytz.all_timezones:\n    print tz\n\n\nAfrica/Abidjan\nAfrica/Accra\nAfrica/Addis_Ababa\nAfrica/Algiers\nAfrica/Asmara\nAfrica/Asmera\nAfrica/Bamako\nAfrica/Bangui\nAfrica/Banjul\nAfrica/Bissau\nAfrica/Blantyre\nAfrica/Brazzaville\nAfrica/Bujumbura\nAfrica/Cairo\nAfrica/Casablanca\nAfrica/Ceuta\nAfrica/Conakry\nAfrica/Dakar\nAfrica/Dar_es_Salaam\nAfrica/Djibouti\nAfrica/Douala\nAfrica/El_Aaiun\nAfrica/Freetown\nAfrica/Gaborone\nAfrica/Harare\nAfrica/Johannesburg\nAfrica/Juba\nAfrica/Kampala\nAfrica/Khartoum\nAfrica/Kigali\nAfrica/Kinshasa\nAfrica/Lagos\nAfrica/Libreville\nAfrica/Lome\nAfrica/Luanda\nAfrica/Lubumbashi\nAfrica/Lusaka\nAfrica/Malabo\nAfrica/Maputo\nAfrica/Maseru\nAfrica/Mbabane\nAfrica/Mogadishu\nAfrica/Monrovia\nAfrica/Nairobi\nAfrica/Ndjamena\nAfrica/Niamey\nAfrica/Nouakchott\nAfrica/Ouagadougou\nAfrica/Porto-Novo\nAfrica/Sao_Tome\nAfrica/Timbuktu\nAfrica/Tripoli\nAfrica/Tunis\nAfrica/Windhoek\nAmerica/Adak\nAmerica/Anchorage\nAmerica/Anguilla\nAmerica/Antigua\nAmerica/Araguaina\nAmerica/Argentina/Buenos_Aires\nAmerica/Argentina/Catamarca\nAmerica/Argentina/ComodRivadavia\nAmerica/Argentina/Cordoba\nAmerica/Argentina/Jujuy\nAmerica/Argentina/La_Rioja\nAmerica/Argentina/Mendoza\nAmerica/Argentina/Rio_Gallegos\nAmerica/Argentina/Salta\nAmerica/Argentina/San_Juan\nAmerica/Argentina/San_Luis\nAmerica/Argentina/Tucuman\nAmerica/Argentina/Ushuaia\nAmerica/Aruba\nAmerica/Asuncion\nAmerica/Atikokan\nAmerica/Atka\nAmerica/Bahia\nAmerica/Bahia_Banderas\nAmerica/Barbados\nAmerica/Belem\nAmerica/Belize\nAmerica/Blanc-Sablon\nAmerica/Boa_Vista\nAmerica/Bogota\nAmerica/Boise\nAmerica/Buenos_Aires\nAmerica/Cambridge_Bay\nAmerica/Campo_Grande\nAmerica/Cancun\nAmerica/Caracas\nAmerica/Catamarca\nAmerica/Cayenne\nAmerica/Cayman\nAmerica/Chicago\nAmerica/Chihuahua\nAmerica/Coral_Harbour\nAmerica/Cordoba\nAmerica/Costa_Rica\nAmerica/Creston\nAmerica/Cuiaba\nAmerica/Curacao\nAmerica/Danmarkshavn\nAmerica/Dawson\nAmerica/Dawson_Creek\nAmerica/Denver\nAmerica/Detroit\nAmerica/Dominica\nAmerica/Edmonton\nAmerica/Eirunepe\nAmerica/El_Salvador\nAmerica/Ensenada\nAmerica/Fort_Wayne\nAmerica/Fortaleza\nAmerica/Glace_Bay\nAmerica/Godthab\nAmerica/Goose_Bay\nAmerica/Grand_Turk\nAmerica/Grenada\nAmerica/Guadeloupe\nAmerica/Guatemala\nAmerica/Guayaquil\nAmerica/Guyana\nAmerica/Halifax\nAmerica/Havana\nAmerica/Hermosillo\nAmerica/Indiana/Indianapolis\nAmerica/Indiana/Knox\nAmerica/Indiana/Marengo\nAmerica/Indiana/Petersburg\nAmerica/Indiana/Tell_City\nAmerica/Indiana/Vevay\nAmerica/Indiana/Vincennes\nAmerica/Indiana/Winamac\nAmerica/Indianapolis\nAmerica/Inuvik\nAmerica/Iqaluit\nAmerica/Jamaica\nAmerica/Jujuy\nAmerica/Juneau\nAmerica/Kentucky/Louisville\nAmerica/Kentucky/Monticello\nAmerica/Knox_IN\nAmerica/Kralendijk\nAmerica/La_Paz\nAmerica/Lima\nAmerica/Los_Angeles\nAmerica/Louisville\nAmerica/Lower_Princes\nAmerica/Maceio\nAmerica/Managua\nAmerica/Manaus\nAmerica/Marigot\nAmerica/Martinique\nAmerica/Matamoros\nAmerica/Mazatlan\nAmerica/Mendoza\nAmerica/Menominee\nAmerica/Merida\nAmerica/Metlakatla\nAmerica/Mexico_City\nAmerica/Miquelon\nAmerica/Moncton\nAmerica/Monterrey\nAmerica/Montevideo\nAmerica/Montreal\nAmerica/Montserrat\nAmerica/Nassau\nAmerica/New_York\nAmerica/Nipigon\nAmerica/Nome\nAmerica/Noronha\nAmerica/North_Dakota/Beulah\nAmerica/North_Dakota/Center\nAmerica/North_Dakota/New_Salem\nAmerica/Ojinaga\nAmerica/Panama\nAmerica/Pangnirtung\nAmerica/Paramaribo\nAmerica/Phoenix\nAmerica/Port-au-Prince\nAmerica/Port_of_Spain\nAmerica/Porto_Acre\nAmerica/Porto_Velho\nAmerica/Puerto_Rico\nAmerica/Rainy_River\nAmerica/Rankin_Inlet\nAmerica/Recife\nAmerica/Regina\nAmerica/Resolute\nAmerica/Rio_Branco\nAmerica/Rosario\nAmerica/Santa_Isabel\nAmerica/Santarem\nAmerica/Santiago\nAmerica/Santo_Domingo\nAmerica/Sao_Paulo\nAmerica/Scoresbysund\nAmerica/Shiprock\nAmerica/Sitka\nAmerica/St_Barthelemy\nAmerica/St_Johns\nAmerica/St_Kitts\nAmerica/St_Lucia\nAmerica/St_Thomas\nAmerica/St_Vincent\nAmerica/Swift_Current\nAmerica/Tegucigalpa\nAmerica/Thule\nAmerica/Thunder_Bay\nAmerica/Tijuana\nAmerica/Toronto\nAmerica/Tortola\nAmerica/Vancouver\nAmerica/Virgin\nAmerica/Whitehorse\nAmerica/Winnipeg\nAmerica/Yakutat\nAmerica/Yellowknife\nAntarctica/Casey\nAntarctica/Davis\nAntarctica/DumontDUrville\nAntarctica/Macquarie\nAntarctica/Mawson\nAntarctica/McMurdo\nAntarctica/Palmer\nAntarctica/Rothera\nAntarctica/South_Pole\nAntarctica/Syowa\nAntarctica/Vostok\nArctic/Longyearbyen\nAsia/Aden\nAsia/Almaty\nAsia/Amman\nAsia/Anadyr\nAsia/Aqtau\nAsia/Aqtobe\nAsia/Ashgabat\nAsia/Ashkhabad\nAsia/Baghdad\nAsia/Bahrain\nAsia/Baku\nAsia/Bangkok\nAsia/Beirut\nAsia/Bishkek\nAsia/Brunei\nAsia/Calcutta\nAsia/Choibalsan\nAsia/Chongqing\nAsia/Chungking\nAsia/Colombo\nAsia/Dacca\nAsia/Damascus\nAsia/Dhaka\nAsia/Dili\nAsia/Dubai\nAsia/Dushanbe\nAsia/Gaza\nAsia/Harbin\nAsia/Hebron\nAsia/Ho_Chi_Minh\nAsia/Hong_Kong\nAsia/Hovd\nAsia/Irkutsk\nAsia/Istanbul\nAsia/Jakarta\nAsia/Jayapura\nAsia/Jerusalem\nAsia/Kabul\nAsia/Kamchatka\nAsia/Karachi\nAsia/Kashgar\nAsia/Kathmandu\nAsia/Katmandu\nAsia/Kolkata\nAsia/Krasnoyarsk\nAsia/Kuala_Lumpur\nAsia/Kuching\nAsia/Kuwait\nAsia/Macao\nAsia/Macau\nAsia/Magadan\nAsia/Makassar\nAsia/Manila\nAsia/Muscat\nAsia/Nicosia\nAsia/Novokuznetsk\nAsia/Novosibirsk\nAsia/Omsk\nAsia/Oral\nAsia/Phnom_Penh\nAsia/Pontianak\nAsia/Pyongyang\nAsia/Qatar\nAsia/Qyzylorda\nAsia/Rangoon\nAsia/Riyadh\nAsia/Saigon\nAsia/Sakhalin\nAsia/Samarkand\nAsia/Seoul\nAsia/Shanghai\nAsia/Singapore\nAsia/Taipei\nAsia/Tashkent\nAsia/Tbilisi\nAsia/Tehran\nAsia/Tel_Aviv\nAsia/Thimbu\nAsia/Thimphu\nAsia/Tokyo\nAsia/Ujung_Pandang\nAsia/Ulaanbaatar\nAsia/Ulan_Bator\nAsia/Urumqi\nAsia/Vientiane\nAsia/Vladivostok\nAsia/Yakutsk\nAsia/Yekaterinburg\nAsia/Yerevan\nAtlantic/Azores\nAtlantic/Bermuda\nAtlantic/Canary\nAtlantic/Cape_Verde\nAtlantic/Faeroe\nAtlantic/Faroe\nAtlantic/Jan_Mayen\nAtlantic/Madeira\nAtlantic/Reykjavik\nAtlantic/South_Georgia\nAtlantic/St_Helena\nAtlantic/Stanley\nAustralia/ACT\nAustralia/Adelaide\nAustralia/Brisbane\nAustralia/Broken_Hill\nAustralia/Canberra\nAustralia/Currie\nAustralia/Darwin\nAustralia/Eucla\nAustralia/Hobart\nAustralia/LHI\nAustralia/Lindeman\nAustralia/Lord_Howe\nAustralia/Melbourne\nAustralia/NSW\nAustralia/North\nAustralia/Perth\nAustralia/Queensland\nAustralia/South\nAustralia/Sydney\nAustralia/Tasmania\nAustralia/Victoria\nAustralia/West\nAustralia/Yancowinna\nBrazil/Acre\nBrazil/DeNoronha\nBrazil/East\nBrazil/West\nCET\nCST6CDT\nCanada/Atlantic\nCanada/Central\nCanada/East-Saskatchewan\nCanada/Eastern\nCanada/Mountain\nCanada/Newfoundland\nCanada/Pacific\nCanada/Saskatchewan\nCanada/Yukon\nChile/Continental\nChile/EasterIsland\nCuba\nEET\nEST\nEST5EDT\nEgypt\nEire\nEtc/GMT\nEtc/GMT+0\nEtc/GMT+1\nEtc/GMT+10\nEtc/GMT+11\nEtc/GMT+12\nEtc/GMT+2\nEtc/GMT+3\nEtc/GMT+4\nEtc/GMT+5\nEtc/GMT+6\nEtc/GMT+7\nEtc/GMT+8\nEtc/GMT+9\nEtc/GMT-0\nEtc/GMT-1\nEtc/GMT-10\nEtc/GMT-11\nEtc/GMT-12\nEtc/GMT-13\nEtc/GMT-14\nEtc/GMT-2\nEtc/GMT-3\nEtc/GMT-4\nEtc/GMT-5\nEtc/GMT-6\nEtc/GMT-7\nEtc/GMT-8\nEtc/GMT-9\nEtc/GMT0\nEtc/Greenwich\nEtc/UCT\nEtc/UTC\nEtc/Universal\nEtc/Zulu\nEurope/Amsterdam\nEurope/Andorra\nEurope/Athens\nEurope/Belfast\nEurope/Belgrade\nEurope/Berlin\nEurope/Bratislava\nEurope/Brussels\nEurope/Bucharest\nEurope/Budapest\nEurope/Chisinau\nEurope/Copenhagen\nEurope/Dublin\nEurope/Gibraltar\nEurope/Guernsey\nEurope/Helsinki\nEurope/Isle_of_Man\nEurope/Istanbul\nEurope/Jersey\nEurope/Kaliningrad\nEurope/Kiev\nEurope/Lisbon\nEurope/Ljubljana\nEurope/London\nEurope/Luxembourg\nEurope/Madrid\nEurope/Malta\nEurope/Mariehamn\nEurope/Minsk\nEurope/Monaco\nEurope/Moscow\nEurope/Nicosia\nEurope/Oslo\nEurope/Paris\nEurope/Podgorica\nEurope/Prague\nEurope/Riga\nEurope/Rome\nEurope/Samara\nEurope/San_Marino\nEurope/Sarajevo\nEurope/Simferopol\nEurope/Skopje\nEurope/Sofia\nEurope/Stockholm\nEurope/Tallinn\nEurope/Tirane\nEurope/Tiraspol\nEurope/Uzhgorod\nEurope/Vaduz\nEurope/Vatican\nEurope/Vienna\nEurope/Vilnius\nEurope/Volgograd\nEurope/Warsaw\nEurope/Zagreb\nEurope/Zaporozhye\nEurope/Zurich\nGB\nGB-Eire\nGMT\nGMT+0\nGMT-0\nGMT0\nGreenwich\nHST\nHongkong\nIceland\nIndian/Antananarivo\nIndian/Chagos\nIndian/Christmas\nIndian/Cocos\nIndian/Comoro\nIndian/Kerguelen\nIndian/Mahe\nIndian/Maldives\nIndian/Mauritius\nIndian/Mayotte\nIndian/Reunion\nIran\nIsrael\nJamaica\nJapan\nKwajalein\nLibya\nMET\nMST\nMST7MDT\nMexico/BajaNorte\nMexico/BajaSur\nMexico/General\nNZ\nNZ-CHAT\nNavajo\nPRC\nPST8PDT\nPacific/Apia\nPacific/Auckland\nPacific/Chatham\nPacific/Chuuk\nPacific/Easter\nPacific/Efate\nPacific/Enderbury\nPacific/Fakaofo\nPacific/Fiji\nPacific/Funafuti\nPacific/Galapagos\nPacific/Gambier\nPacific/Guadalcanal\nPacific/Guam\nPacific/Honolulu\nPacific/Johnston\nPacific/Kiritimati\nPacific/Kosrae\nPacific/Kwajalein\nPacific/Majuro\nPacific/Marquesas\nPacific/Midway\nPacific/Nauru\nPacific/Niue\nPacific/Norfolk\nPacific/Noumea\nPacific/Pago_Pago\nPacific/Palau\nPacific/Pitcairn\nPacific/Pohnpei\nPacific/Ponape\nPacific/Port_Moresby\nPacific/Rarotonga\nPacific/Saipan\nPacific/Samoa\nPacific/Tahiti\nPacific/Tarawa\nPacific/Tongatapu\nPacific/Truk\nPacific/Wake\nPacific/Wallis\nPacific/Yap\nPoland\nPortugal\nROC\nROK\nSingapore\nTurkey\nUCT\nUS/Alaska\nUS/Aleutian\nUS/Arizona\nUS/Central\nUS/East-Indiana\nUS/Eastern\nUS/Hawaii\nUS/Indiana-Starke\nUS/Michigan\nUS/Mountain\nUS/Pacific\nUS/Pacific-New\nUS/Samoa\nUTC\nUniversal\nW-SU\nWET\nZulu\n</code>", "<code>ssl.cert_time_to_second()</code>", "<code>ASN1_TIME_print()</code>", "<code>pytz.all_timezones</code>", "<code>In [40]: import pytz\nIn [41]: pytz.all_timezones\nOut[42]: \n['Africa/Abidjan',\n 'Africa/Accra',\n 'Africa/Addis_Ababa',\n ...]\n</code>", "<code>pytz.common_timezones</code>", "<code>In [45]: len(pytz.common_timezones)\nOut[45]: 403\n\nIn [46]: len(pytz.all_timezones)\nOut[46]: 563\n</code>", "<code>all_timezones</code>", "<code>common_timezones</code>", "<code>'Asia/Shanghai'</code>", "<code>(datetime(2017,2,13,14,29,29, tzinfo=pytz.timezone('Asia/Shanghai')) - datetime(2017,2,13,14,29,29, tzinfo=pytz.timezone('UTC'))).total_seconds()</code>", "<code>pytz</code>", "<code>import pytz\nset(pytz.all_timezones_set)  \n&gt;&gt;&gt; {'Europe/Vienna', 'America/New_York', 'America/Argentina/Salta',..}\n</code>", "<code>import datetime\ntz = pytz.timezone('Pacific/Johnston')\nct = datetime.datetime.now(tz=tz)\n&gt;&gt;&gt; ct.isoformat()\n2017-01-13T11:29:22.601991-05:00\n</code>", "<code>datetime</code>", "<code># This timestamp is in UTC\nmy_ct = datetime.datetime.now(tz=pytz.UTC)\n\n# Now convert it to another timezone\nnew_ct = my_ct.astimezone(tz)\n&gt;&gt;&gt; new_ct.isoformat()\n2017-01-13T11:29:22.601991-05:00\n</code>", "<code>countries = [\n{'timezones': ['Europe/Paris'], 'code': 'FR', 'continent': 'Europe', 'name': 'France', 'capital': 'Paris'}\n{'timezones': ['Africa/Kampala'], 'code': 'UG', 'continent': 'Africa', 'name': 'Uganda', 'capital': 'Kampala'},\n{'timezones': ['Asia/Colombo'], 'code': 'LK', 'continent': 'Asia', 'name': 'Sri Lanka', 'capital': 'Sri Jayewardenepura Kotte'},\n{'timezones': ['Asia/Riyadh'], 'code': 'SA', 'continent': 'Asia', 'name': 'Saudi Arabia', 'capital': 'Riyadh'},\n{'timezones': ['Africa/Luanda'], 'code': 'AO', 'continent': 'Africa', 'name': 'Angola', 'capital': 'Luanda'},    \n{'timezones': ['Europe/Vienna'], 'code': 'AT', 'continent': 'Europe', 'name': 'Austria', 'capital': 'Vienna'},\n{'timezones': ['Asia/Calcutta'], 'code': 'IN', 'continent': 'Asia', 'name': 'India', 'capital': 'New Delhi'},\n{'timezones': ['Asia/Dubai'], 'code': 'AE', 'continent': 'Asia', 'name': 'United Arab Emirates', 'capital': 'Abu Dhabi'},\n{'timezones': ['Europe/London'], 'code': 'GB', 'continent': 'Europe', 'name': 'United Kingdom', 'capital': 'London'},\n]\n</code>", "<code>pytz</code>", "<code>import pytz\nimport dateutil.tz\nfrom datetime import datetime\nprint((datetime(2017,2,13,14,29,29, tzinfo=pytz.timezone('Asia/Shanghai'))\n     - datetime(2017,2,13,14,29,29, tzinfo=pytz.timezone('UTC')))\n     .total_seconds())\nprint((datetime(2017,2,13,14,29,29, tzinfo=dateutil.tz.gettz('Asia/Shanghai'))\n     - datetime(2017,2,13,14,29,29, tzinfo=dateutil.tz.tzutc()))\n     .total_seconds())\n\n-29160.0\n-28800.0\n</code>", "<code>pytz.timezone('Asia/Shanghai')\n&lt;DstTzInfo 'Asia/Shanghai' LMT+8:06:00 STD&gt;\n</code>", "<code>pytz.timezone(\u2026)</code>", "<code>datetime</code>", "<code>datetime</code>", "<code>localize</code>", "<code>datetime</code>", "<code>pytz</code>", "<code>datetime</code>", "<code>pytz</code>", "<code>datetime</code>", "<code>datetime</code>", "<code>datetime</code>", "<code>pytz</code>", "<code>datetime</code>", "<code>datetime</code>", "<code>pytz.construct(\"UTC-07:00\")\n</code>"], "path": "stack.django"}, {"tags": ["python", "django", "pip"], "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1340897870, "answer_id": 11248097, "path": "stack.django.answer", "score": 12, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1340897870, "body_markdown": "The quickest way is to remake the virtualenv completely.  I&#39;m assuming you have a requirements.txt file that matches production, if not:\r\n\r\n    # On production:\r\n    pip freeze &gt; reqs.txt\r\n    \r\n    # On your machine:\r\n    rmvirtualenv MYENV\r\n    mkvirtualenv MYENV\r\n    pip install -r reqs.txt\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1340908349, "answer_id": 11250821, "path": "stack.django.answer", "score": 459, "up_vote_count": 460, "is_accepted": true, "last_activity_date": 1394719723, "last_edit_date": 1394719723, "body_markdown": "I&#39;ve found this snippet as an alternative solution. It&#39;s a more graceful removal of libraries than remaking the virtualenv:\r\n\r\n    pip freeze | xargs pip uninstall -y\r\n\r\n---\r\n\r\nIn case you have packages installed via VCS, you need to exclude those lines and remove the packages manually (elevated from the comments below):\r\n\r\n    pip freeze | grep -v &quot;^-e&quot; | xargs pip uninstall -y"}, {"tags": [], "down_vote_count": 6, "creation_date": 1343315715, "answer_id": 11672492, "path": "stack.django.answer", "score": 74, "up_vote_count": 80, "is_accepted": false, "last_activity_date": 1343315715, "body_markdown": "I think this works with the latest   \r\n\r\n    virtualenv --clear MYENV"}, {"tags": [], "down_vote_count": 2, "creation_date": 1424490348, "answer_id": 28641862, "path": "stack.django.answer", "score": 3, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1424490348, "body_markdown": "Cross-platform support by using only `pip`:\r\n\r\n    #!/usr/bin/env python\r\n\r\n    from sys import stderr\r\n    from pip.commands.uninstall import UninstallCommand\r\n    from pip import get_installed_distributions\r\n\r\n    pip_uninstall = UninstallCommand()\r\n    options, args = pip_uninstall.parse_args([\r\n        package.project_name\r\n        for package in\r\n        get_installed_distributions()\r\n        if not package.location.endswith(&#39;dist-packages&#39;)\r\n    ])\r\n\r\n    options.yes = True  # Don&#39;t confirm before uninstall\r\n    # set `options.require_venv` to True for virtualenv restriction\r\n\r\n    try:\r\n        print pip_uninstall.run(options, args)\r\n    except OSError as e:\r\n        if e.errno != 13:\r\n            raise e\r\n        print &gt;&gt; stderr, &quot;You lack permissions to uninstall this package.\r\n                          Perhaps run with sudo? Exiting.&quot;\r\n        exit(13)\r\n    # Plenty of other exceptions can be thrown, e.g.: `InstallationError`\r\n    # handle them if you want to."}, {"tags": [], "down_vote_count": 0, "creation_date": 1449410519, "answer_id": 34118237, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1457132761, "last_edit_date": 1457132761, "body_markdown": "On Windows if your `path` is configured correctly, you can use:\r\n\r\n    pip freeze &gt; unins &amp;&amp; pip uninstall -y -r unins &amp;&amp; del unins\r\n\r\nIt should be a similar case for Unix-like systems:\r\n\r\n    pip freeze &gt; unins &amp;&amp; pip uninstall -y -r unins &amp;&amp; rm unins\r\n\r\nJust a warning that this isn&#39;t completely solid as you may run into issues such as &#39;File not found&#39; but it may work in some cases nonetheless \r\n\r\nEDIT: For clarity: `unins` is an arbitrary file which has data written out to it when this command executes: `pip freeze &gt; unins`\r\n\r\nThat file that it written in turn is then used to uninstall the aforementioned packages with implied consent/prior approval via `pip uninstall -y -r unins`\r\n\r\nThe file is finally deleted upon completion."}, {"tags": [], "down_vote_count": 0, "creation_date": 1458743589, "answer_id": 36181047, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1458743589, "body_markdown": "Its an old question I know but I did stumble across it so for future reference you can now do this:\r\n\r\n    pip uninstall [options] &lt;package&gt; ...\r\n    pip uninstall [options] -r &lt;requirements file&gt; ...\r\n\r\n&gt; -r, --requirement file    \r\n&gt;&gt;Uninstall all the packages listed in the given requirements file. This option can be used multiple times.\r\n\r\n\r\nfrom the [pip documentation](https://pip.pypa.io/en/stable/reference/pip_uninstall/) version 8.1"}, {"tags": [], "down_vote_count": 0, "creation_date": 1464905539, "answer_id": 37603000, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1464905539, "body_markdown": "This is the command that works for me:\r\n\r\n    pip list | awk &#39;{print $1}&#39; | xargs pip uninstall -y"}, {"tags": [], "down_vote_count": 0, "creation_date": 1465133134, "answer_id": 37642437, "path": "stack.django.answer", "score": 30, "up_vote_count": 30, "is_accepted": false, "last_activity_date": 1465438498, "last_edit_date": 1465438498, "body_markdown": "### Method 1 (with `pip freeze`)\r\n\r\n    pip freeze | xargs pip uninstall -y\r\n\r\n### Method 2 (with `pip list`)\r\n\r\n    pip list | awk &#39;{print $1}&#39; | xargs pip uninstall -y\r\n\r\n### Method 3 (with `virtualenv`)\r\n\r\n    virtualenv --clear MYENV"}, {"tags": [], "down_vote_count": 1, "creation_date": 1473483048, "answer_id": 39422679, "path": "stack.django.answer", "score": 10, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1479846376, "last_edit_date": 1479846376, "body_markdown": "Using [virtualenvwrapper][1] function:\r\n\r\n    wipeenv\r\n\r\nSee [wipeenv documentation][2]\r\n\r\n  [1]: https://pypi.python.org/pypi/virtualenvwrapper\r\n  [2]: http://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html?highlight=wipeenv#wipeenv"}, {"tags": [], "down_vote_count": 1, "creation_date": 1477605476, "answer_id": 40294860, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1477605476, "body_markdown": "If you&#39;re running `virtualenv`:\r\n\r\n    virtualenv --clear &lt;/path/to/your/virtualenv&gt;\r\n\r\nfor example, if your virtualenv is `/Users/you/.virtualenvs/projectx`, then you&#39;d run: \r\n\r\n    virtualenv --clear /Users/you/.virtualenvs/projectx\r\n\r\nif you don&#39;t know where your virtual env is located, you can run `which python` from within an activated virtual env to get the path"}, {"tags": [], "down_vote_count": 0, "creation_date": 1478974085, "answer_id": 40566052, "path": "stack.django.answer", "score": 70, "up_vote_count": 70, "is_accepted": false, "last_activity_date": 1499256769, "last_edit_date": 1499256769, "body_markdown": "This will work for all Mac, Windows and Linux System.\r\nTo get the list of all pip package in the requirements.txt file (Note: This will overwrite requirements.txt if exist else will create the new one.)\r\n\r\n    pip freeze &gt; requirements.txt\r\n\r\nNow to remove one by one\r\n\r\n    pip uninstall -r requirements.txt\r\n\r\nIf we want to remove all at once then \r\n\r\n    pip uninstall -r requirements.txt -y"}, {"tags": [], "down_vote_count": 1, "creation_date": 1495142934, "answer_id": 44058070, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1495142934, "body_markdown": "In my case, I had accidentally installed a number of packages globally using a Homebrew-installed `pip` on macOS. The easiest way to revert to the default packages was a simple:\r\n\r\n    $ brew reinstall python\r\n\r\nOr, if you were using `pip3`:\r\n\r\n    $ brew reinstall python3"}, {"tags": [], "down_vote_count": 0, "creation_date": 1497816402, "answer_id": 44619070, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1498731335, "last_edit_date": 1498731335, "body_markdown": "This was the easiest way for me to uninstall all python packages.\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-python--&gt;\r\n\r\n\tfrom pip import get_installed_distributions\r\n\tfrom os import system\r\n\tfor i in get_installed_distributions():\r\n        system(&quot;pip3 uninstall {} -y -q&quot;.format(i.key))\r\n\r\n&lt;!-- end snippet --&gt;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1501735765, "answer_id": 45475070, "path": "stack.django.answer", "score": 16, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1512514352, "last_edit_date": 1512514352, "body_markdown": "Other answers that use `pip list` or `pip freeze` **must include `--local`** else it will also uninstall packages that are found in the common namespaces. \r\n\r\n\r\nSo here are the snippets I regularly use\r\n\r\n     pip  freeze --local | xargs pip uninstall -y\r\n\r\nor\r\n\r\n     pip list --local | py -x &quot;print(x.split()[0])&quot; | xargs pip uninstall -y\r\n\r\nLearn more about this behavior by issuing `pip freeze --help`"}, {"tags": [], "down_vote_count": 2, "creation_date": 1507121271, "answer_id": 46565301, "path": "stack.django.answer", "score": -2, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1507121271, "body_markdown": "Pip has no way of knowing what packages were installed by it and what packages were installed by your system&#39;s package manager. For this you would need to do something like this\r\n\r\nfor rpm-based distros (replace python2.7 with your python version you installed pip with):\r\n\r\n    find /usr/lib/python2.7/ |while read f; do\r\n      if ! rpm -qf &quot;$f&quot; &amp;&gt; /dev/null; then\r\n        echo &quot;$f&quot;\r\n      fi\r\n    done |xargs rm -fr\r\n\r\nfor a deb-based distribution:\r\n\r\n    find /usr/lib/python2.7/ |while read f; do\r\n      if ! dpkg-query -S &quot;$f&quot; &amp;&gt; /dev/null; then\r\n        echo &quot;$f&quot;\r\n      fi\r\n    done |xargs rm -fr\r\n\r\nthen to clean up empty directories left over:\r\n\r\n    find /usr/lib/python2.7 -type d -empty |xargs rm -fr\r\n\r\nI found the top answer very misleading since it will remove all (most?) python packages from your distribution and probably leave you with a broken system."}, {"tags": [], "down_vote_count": 0, "creation_date": 1514270342, "answer_id": 47974813, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1514270342, "body_markdown": "&gt;In **Command Shell** of Windows, the command `pip freeze | xargs pip uninstall -y` won&#39;t work. So for those of you using Windows, I&#39;ve figured out an alternative way to do so.\r\n\r\n 1. Copy all the names of the installed packages of **pip** from the `pip freeze` command to a **.txt** file.\r\n 2. Then, go the location of your **.txt** file and run the command `pip uninstall -r *textfile.txt*`"}], "creation_date": 1340897804, "body_markdown": "I&#39;m trying to fix up one of my virtualenvs - I&#39;d like to reset all of the installed libraries back to the ones that match production.\r\n\r\nIs there a quick and easy way to do this with pip?", "title": "What is the easiest way to remove all packages installed by pip?", "view_count": 147089, "up_vote_count": 277, "answer_count": 16, "link": "https://stackoverflow.com/questions/11248073/what-is-the-easiest-way-to-remove-all-packages-installed-by-pip", "code_snippet": ["<code>pip freeze | xargs pip uninstall -y\n</code>", "<code>pip freeze | grep -v \"^-e\" | xargs pip uninstall -y\n</code>", "<code>postactivate</code>", "<code>pip freeze | grep -v \"^-e\" | xargs pip uninstall -y</code>", "<code>setuptools</code>", "<code>virtualenv --clear MYENV\n</code>", "<code>wipeenv</code>", "<code>wipeenv</code>", "<code>pip install -e</code>", "<code>virtualenv --clear MYENV</code>", "<code>pip freeze &gt; requirements.txt\n</code>", "<code>pip uninstall -r requirements.txt\n</code>", "<code>pip uninstall -r requirements.txt -y\n</code>", "<code>pip uninstall -r requirements.txt -y</code>", "<code>pip uninstall -y -r &lt;(pip freeze)</code>", "<code>pip freeze</code>", "<code>pip freeze | xargs pip uninstall -y\n</code>", "<code>pip list</code>", "<code>pip list | awk '{print $1}' | xargs pip uninstall -y\n</code>", "<code>virtualenv</code>", "<code>virtualenv --clear MYENV\n</code>", "<code>pip list</code>", "<code>pip list</code>", "<code>pip freeze</code>", "<code>--local</code>", "<code> pip  freeze --local | xargs pip uninstall -y\n</code>", "<code> pip list --local | py -x \"print(x.split()[0])\" | xargs pip uninstall -y\n</code>", "<code>pip freeze --help</code>", "<code># On production:\npip freeze &gt; reqs.txt\n\n# On your machine:\nrmvirtualenv MYENV\nmkvirtualenv MYENV\npip install -r reqs.txt\n</code>", "<code>path</code>", "<code>pip freeze &gt; unins &amp;&amp; pip uninstall -y -r unins &amp;&amp; del unins\n</code>", "<code>pip freeze &gt; unins &amp;&amp; pip uninstall -y -r unins &amp;&amp; rm unins\n</code>", "<code>unins</code>", "<code>pip freeze &gt; unins</code>", "<code>pip uninstall -y -r unins</code>", "<code>wipeenv\n</code>", "<code>wipeenv</code>", "<code>pip</code>", "<code>#!/usr/bin/env python\n\nfrom sys import stderr\nfrom pip.commands.uninstall import UninstallCommand\nfrom pip import get_installed_distributions\n\npip_uninstall = UninstallCommand()\noptions, args = pip_uninstall.parse_args([\n    package.project_name\n    for package in\n    get_installed_distributions()\n    if not package.location.endswith('dist-packages')\n])\n\noptions.yes = True  # Don't confirm before uninstall\n# set `options.require_venv` to True for virtualenv restriction\n\ntry:\n    print pip_uninstall.run(options, args)\nexcept OSError as e:\n    if e.errno != 13:\n        raise e\n    print &gt;&gt; stderr, \"You lack permissions to uninstall this package.\n                      Perhaps run with sudo? Exiting.\"\n    exit(13)\n# Plenty of other exceptions can be thrown, e.g.: `InstallationError`\n# handle them if you want to.\n</code>", "<code>pip uninstall [options] &lt;package&gt; ...\npip uninstall [options] -r &lt;requirements file&gt; ...\n</code>", "<code>pip list | awk '{print $1}' | xargs pip uninstall -y\n</code>", "<code>from pip import get_installed_distributions\nfrom os import system\nfor i in get_installed_distributions():\n    system(\"pip3 uninstall {} -y -q\".format(i.key))\n</code>", "<code>virtualenv</code>", "<code>virtualenv --clear &lt;/path/to/your/virtualenv&gt;\n</code>", "<code>/Users/you/.virtualenvs/projectx</code>", "<code>virtualenv --clear /Users/you/.virtualenvs/projectx\n</code>", "<code>which python</code>", "<code>pip freeze | xargs pip uninstall -y</code>", "<code>pip freeze</code>", "<code>pip uninstall -r *textfile.txt*</code>", "<code>pip</code>", "<code>$ brew reinstall python\n</code>", "<code>pip3</code>", "<code>$ brew reinstall python3\n</code>", "<code>find /usr/lib/python2.7/ |while read f; do\n  if ! rpm -qf \"$f\" &amp;&gt; /dev/null; then\n    echo \"$f\"\n  fi\ndone |xargs rm -fr\n</code>", "<code>find /usr/lib/python2.7/ |while read f; do\n  if ! dpkg-query -S \"$f\" &amp;&gt; /dev/null; then\n    echo \"$f\"\n  fi\ndone |xargs rm -fr\n</code>", "<code>find /usr/lib/python2.7 -type d -empty |xargs rm -fr\n</code>", "<code>dpkg-query -S '/usr/lib/python2.7/*'</code>", "<code>dpkg-query -L</code>", "<code>pip list -l</code>", "<code>pip install --target=...</code>"], "path": "stack.django"}, {"tags": ["python", "django", "deployment"], "creation_date": 1256580026, "body_markdown": "&lt;!-- A Django newbie question: --&gt;\r\n\r\nWhat is the recommended way of handling settings for local development and the production server? Some of them (like constants, etc) can be changed/accessed in both, but some of them (like paths to static files) need to remain different, and hence should not be overwritten every time the new code is deployed.\r\n\r\nCurrently, I am adding all constants to `settings.py`. But every time I change some constant locally, I have to copy it to the production server and edit the file for production specific changes... :( \r\n\r\n*Edit: looks like there is no standard answer to this question, I&#39;ve accepted the most popular method.*", "last_edit_date": 1476648287, "up_vote_count": 233, "link": "https://stackoverflow.com/questions/1626326/how-to-manage-local-vs-production-settings-in-django", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1256580319, "answer_id": 1626358, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1256580319, "body_markdown": "Remember that settings.py is a live code file. Assuming that you don&#39;t have DEBUG set on production (which is a best practice), you can do something like:\r\n\r\n    if DEBUG:\r\n        STATIC_PATH = /path/to/dev/files\r\n    else:\r\n        STATIC_PATH = /path/to/production/files\r\n\r\nPretty basic, but you could, in theory, go up to any level of complexity based on just the value of DEBUG - or any other variable or code check you wanted to use."}, {"tags": [], "down_vote_count": 1, "creation_date": 1256580440, "answer_id": 1626371, "path": "stack.django.answer", "score": 14, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1256580750, "last_edit_date": 1256580750, "body_markdown": "I use a settings_local.py and a settings_production.py. After trying several options I&#39;ve found that it&#39;s easy to waste time with complex solutions when simply having two settings files feels easy and fast.\r\n\r\nWhen you use mod_python/mod_wsgi for your Django project you need to point it to your settings file. If you point it to app/settings_local.py on your local server and app/settings_production.py on your production server then life becomes easy. Just edit the appropriate settings file and restart the server (Django development server will restart automatically)."}, {"tags": [], "down_vote_count": 1, "creation_date": 1256582044, "answer_id": 1626529, "path": "stack.django.answer", "score": 17, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1256582836, "last_edit_date": 1256582836, "body_markdown": "I use a slightly modified version of the &quot;if DEBUG&quot; style of settings that Harper Shelby posted.  Obviously depending on the environment (win/linux/etc.) the code might need to be tweaked a bit.\r\n\r\nI was in the past using the &quot;if DEBUG&quot; but I found that occasionally I needed to do testing with DEUBG set to False.  What I really wanted to distinguish if the environment was production or development, which gave me the freedom to choose the DEBUG level.\r\n\r\n\r\n    PRODUCTION_SERVERS = [&#39;WEBSERVER1&#39;,&#39;WEBSERVER2&#39;,]\r\n    if os.environ[&#39;COMPUTERNAME&#39;] in PRODUCTION_SERVERS:\r\n        PRODUCTION = True\r\n    else:\r\n        PRODUCTION = False\r\n    \r\n    DEBUG = not PRODUCTION\r\n    TEMPLATE_DEBUG = DEBUG\r\n\r\n    # ...\r\n\r\n    if PRODUCTION:\r\n        DATABASE_HOST = &#39;192.168.1.1&#39;\r\n    else:\r\n        DATABASE_HOST = &#39;localhost&#39;\r\n\r\nI&#39;d still consider this way of settings a work in progress. I haven&#39;t seen any one way to handling Django settings that covered all the bases and at the same time wasn&#39;t a total hassle to setup (I&#39;m not down with the 5x settings files methods)."}, {"tags": [], "down_vote_count": 1, "creation_date": 1256587827, "answer_id": 1627065, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1256587827, "body_markdown": "My solution to that problem is also somewhat of a mix of some solutions already stated here:\r\n\r\n- I keep a file called `local_settings.py` that has the content `USING_LOCAL = True` in dev and `USING_LOCAL = False` in prod\r\n- In `settings.py` I do an import on that file to get the `USING_LOCAL` setting\r\n\r\nI then base all my environment-dependent settings on that one:\r\n\r\n    DEBUG = USING_LOCAL\r\n    if USING_LOCAL:\r\n        # dev database settings\r\n    else:\r\n        # prod database settings\r\n\r\nI prefer this to having two separate settings.py files that I need to maintain as I can keep my settings structured in a single file easier than having them spread across several files. Like this, when I update a setting I don&#39;t forget to do it for both environments.\r\n\r\nOf course that every method has its disadvantages and this one is no exception. The problem here is that I can&#39;t overwrite the `local_settings.py` file whenever I push my changes into production, meaning I can&#39;t just copy all files blindly, but that&#39;s something I can live with."}, {"tags": [], "down_vote_count": 11, "creation_date": 1256637668, "answer_id": 1629770, "path": "stack.django.answer", "score": 108, "up_vote_count": 119, "is_accepted": true, "last_activity_date": 1406630328, "last_edit_date": 1406630328, "body_markdown": "In `settings.py`:\r\n\r\n    try:\r\n        from local_settings import *\r\n    except ImportError as e:\r\n        pass\r\n\r\nYou can override what needed in `local_settings.py`; it should stay out of your version control then. But since you mention copying I&#39;m guessing you use none ;)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1256644342, "answer_id": 1630310, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1256644342, "body_markdown": "I differentiate it in manage.py and created two separate settings file: local_settings.py and prod_settings.py. \r\n\r\nIn manage.py I check whether the server is local server or production server. If it is a local server it would load up local\\_settings.py and it is a production server it would load up prod_settings.py. Basically this is how it would look like:\r\n\r\n    #!/usr/bin/env python\r\n    import sys\r\n    import socket\r\n    from django.core.management import execute_manager \r\n    \r\n    ipaddress = socket.gethostbyname( socket.gethostname() )\r\n    if ipaddress == &#39;127.0.0.1&#39;:\r\n        try:\r\n            import local_settings # Assumed to be in the same directory.\r\n            settings = local_settings\r\n        except ImportError:\r\n            import sys\r\n            sys.stderr.write(&quot;Error: Can&#39;t find the file &#39;local_settings.py&#39; in the directory containing %r. It appears you&#39;ve customized things.\\nYou&#39;ll have to run django-admin.py, passing it your settings module.\\n(If the file local_settings.py does indeed exist, it&#39;s causing an ImportError somehow.)\\n&quot; % __file__)\r\n            sys.exit(1)\r\n    else:\r\n        try:\r\n            import prod_settings # Assumed to be in the same directory.\r\n            settings = prod_settings    \r\n        except ImportError:\r\n            import sys\r\n            sys.stderr.write(&quot;Error: Can&#39;t find the file &#39;prod_settings.py&#39; in the directory containing %r. It appears you&#39;ve customized things.\\nYou&#39;ll have to run django-admin.py, passing it your settings module.\\n(If the file prod_settings.py does indeed exist, it&#39;s causing an ImportError somehow.)\\n&quot; % __file__)\r\n            sys.exit(1)\r\n        \r\n    if __name__ == &quot;__main__&quot;:\r\n        execute_manager(settings)\r\n\r\n\r\nI found it to be easier to separate the settings file into two separate file instead of doing lots of ifs inside the settings file."}, {"tags": [], "down_vote_count": 1, "creation_date": 1301824387, "answer_id": 5528824, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1301824387, "body_markdown": "For most of my projects I use following pattern:\r\n\r\n 1. Create settings_base.py where I store settings that are common for all environments \r\n 2. Whenever I need to use new environment with specific requirements I create new settings file (eg. settings_local.py) which inherits contents of settings_base.py and overrides/adds proper settings variables (`from settings_base import *`)\r\n\r\n(To run manage.py with custom settings file you simply use --settings command option: `manage.py &lt;command&gt; --settings=settings_you_wish_to_use.py`)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1302119332, "answer_id": 5572141, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1302119332, "body_markdown": "I use a variation of what jpartogi mentioned above, that I find a little shorter:\r\n\r\n    import platform\r\n    from django.core.management import execute_manager \r\n\r\n    computername = platform.node()\r\n\r\n    try:\r\n      settings = __import__(computername + &#39;_settings&#39;)\r\n    except ImportError: \r\n      import sys\r\n      sys.stderr.write(&quot;Error: Can&#39;t find the file &#39;%r_settings.py&#39; in the directory containing %r. It appears you&#39;ve customized things.\\nYou&#39;ll have to run django-admin.py, passing it your settings module.\\n(If the file local_settings.py does indeed exist, it&#39;s causing an ImportError somehow.)\\n&quot; % (computername, __file__))\r\n      sys.exit(1)\r\n\r\n    if __name__ == &quot;__main__&quot;:\r\n      execute_manager(settings)\r\n\r\nBasically on each computer (development or production) I have the appropriate hostname_settings.py file that gets dynamically loaded."}, {"tags": [], "down_vote_count": 0, "creation_date": 1330611482, "answer_id": 9517763, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1330611482, "body_markdown": "The problem with most of these solutions is that you either have your local settings applied *before* the common ones, or *after* them.\r\n\r\nSo it&#39;s impossible to override things like\r\n\r\n * the env-specific settings define the addresses for the memcached pool, and in the main settings file this value is used to configure the cache backend\r\n * the env-specific settings add or remove apps/middleware to the default one\r\n\r\nat the same time.\r\n\r\nOne solution can be implemented using &quot;ini&quot;-style config files with the ConfigParser class. It supports multiple files, lazy string interpolation, default values and a lot of other goodies.\r\nOnce a number of files have been loaded, more files can be loaded and their values will override the previous ones, if any.\r\n\r\nYou load one or more config files, depending on the machine address, environment variables and even values in previously loaded config files. Then you just use the parsed values to populate the settings. \r\n\r\nOne strategy I have successfully used has been:\r\n\r\n * Load a default `defaults.ini` file\r\n * Check the machine name, and load all files which matched the reversed FQDN, from the shortest match to the longest match (so, I loaded `net.ini`, then `net.domain.ini`, then `net.domain.webserver01.ini`, each one possibly overriding values of the previous). This account also for developers&#39; machines, so each one could set up its preferred database driver, etc. for local development\r\n * Check if there is a &quot;cluster name&quot; declared, and in that case load `cluster.cluster_name.ini`, which can define things like database and cache IPs\r\n\r\nAs an example of something you can achieve with this, you can define a &quot;subdomain&quot; value per-env, which is then used in the default settings (as `hostname: %(subdomain).whatever.net`) to define all the necessary hostnames and cookie things django needs to work.\r\n\r\nThis is as DRY I could get, most (existing) files had just 3 or 4 settings. On top of this I had to manage customer configuration, so an additional set of configuration files (with things like database names, users and passwords, assigned subdomain etc) existed, one or more per customer.\r\n\r\nOne can scale this as low or as high as necessary, you just put in the config file the keys you want to configure per-environment, and once there&#39;s need for a new config, put the previous value in the default config, and override it where necessary.\r\n\r\nThis system has proven reliable and works well with version control. It has been used for long time managing two separate clusters of applications (15 or more separate instances of the django site per machine), with more than 50 customers, where the clusters were changing size and members depending on the mood of the sysadmin..."}, {"tags": [], "down_vote_count": 1, "creation_date": 1362858506, "answer_id": 15315143, "path": "stack.django.answer", "score": 59, "up_vote_count": 60, "is_accepted": false, "last_activity_date": 1362858506, "body_markdown": "Instead of `settings.py`, use this layout:\r\n\r\n    .\r\n    \u2514\u2500\u2500 settings/\r\n     &#160;&#160; \u251c\u2500\u2500 __init__.py  &lt;= not versioned\r\n     &#160;&#160; \u251c\u2500\u2500 common.py\r\n     &#160;&#160; \u251c\u2500\u2500 dev.py\r\n     &#160;&#160; \u2514\u2500\u2500 prod.py\r\n\r\n`common.py` is where most of your configuration lives.\r\n\r\n`prod.py` imports everything from common, and overrides whatever it needs to override:\r\n\r\n    from __future__ import absolute_import # optional, but I like it\r\n    from .common import *\r\n    \r\n    # Production overrides\r\n    DEBUG = False\r\n    #...\r\n\r\nSimilarly, `dev.py` imports everything from `common.py` and overrides whatever it needs to override.\r\n\r\nFinally, `__init__.py` is where you decide which settings to load, and it&#39;s also where you store secrets (therefore this file should not be versioned):\r\n\r\n    from __future__ import absolute_import\r\n    from .prod import *  # or .dev if you want dev\r\n\r\n    ##### DJANGO SECRETS\r\n    SECRET_KEY = &#39;(3gd6shenud@&amp;57...&#39;\r\n    DATABASES[&#39;default&#39;][&#39;PASSWORD&#39;] = &#39;f9kGH...&#39;\r\n\r\n    ##### OTHER SECRETS\r\n    AWS_SECRET_ACCESS_KEY = &quot;h50fH...&quot;\r\n\r\nWhat I like about this solution is:\r\n\r\n 1. Everything is in your versioning system, except secrets\r\n 2. Most configuration is in one place: `common.py`.\r\n 3. Prod-specific things go in `prod.py`, dev-specific things go in `dev.py`.  It&#39;s simple.\r\n 4. You can override stuff from `common.py` in `prod.py` or `dev.py`, and you can override anything in `__init__.py`.\r\n 5. It&#39;s straightforward python.  No re-import hacks.\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1362940465, "answer_id": 15325966, "path": "stack.django.answer", "score": 246, "up_vote_count": 247, "is_accepted": false, "last_activity_date": 1418864976, "last_edit_date": 1418864976, "body_markdown": "[Two Scoops of Django: Best Practices for Django 1.5](http://twoscoopspress.org/products/two-scoops-of-django-1-5) suggests using version control for your settings files and storing the files in a separate directory:\r\n\r\n    project/\r\n        app1/\r\n        app2/\r\n        project/\r\n            __init__.py\r\n            settings/\r\n                __init__.py\r\n                base.py\r\n                local.py\r\n                production.py\r\n        manage.py\r\n\r\nThe `base.py` file contains common settings (such as MEDIA_ROOT or ADMIN), while `local.py` and `production.py` have site-specific settings:\r\n\r\nIn the base file `settings/base.py`:\r\n\r\n    INSTALLED_APPS = (\r\n        # common apps...\r\n    )\r\n\r\nIn the local development settings file `settings/local.py`:\r\n\r\n    from project.settings.base import *\r\n\r\n    DEBUG = True\r\n    INSTALLED_APPS += (\r\n        &#39;debug_toolbar&#39;, # and other apps for local development\r\n    )\r\n\r\nIn the file production settings file `settings/production.py`:\r\n\r\n    from project.settings.base import *\r\n\r\n    DEBUG = False\r\n    INSTALLED_APPS += (\r\n        # other apps for production site\r\n    )\r\n\r\nThen when you run django, you add the `--settings` option:\r\n\r\n    # Running django for local development\r\n    $ ./manage.py runserver 0:8000 --settings=project.settings.local\r\n\r\n    # Running django shell on the production site\r\n    $ ./manage.py shell --settings=project.settings.production\r\n\r\nThe authors of the book have also put up [a sample project layout template](https://github.com/twoscoops/django-twoscoops-project) on Github."}, {"tags": [], "down_vote_count": 3, "creation_date": 1392619428, "answer_id": 21822440, "path": "stack.django.answer", "score": -3, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1392619789, "last_edit_date": 1392619789, "body_markdown": "I found the responses here very helpful. (Has this been more definitively solved? The last response was a year ago.) After considering all the approaches listed, I came up with a solution that I didn&#39;t see listed here. \r\n\r\nMy criteria were:\r\n\r\n* _Everything_ should be in source control. I don&#39;t like fiddly bits lying around. \r\n* Ideally, keep settings in one file. I forget things if I&#39;m not looking right at them :)\r\n* No manual edits to deploy. Should be able to test/push/deploy with a single fabric command.\r\n* Avoid leaking development settings into production.\r\n* Keep as close as possible to &quot;standard&quot; (\\*cough\\*) Django layout as possible. \r\n\r\nI thought switching on the host machine made some sense, but then figured the real issue here is different settings for different _environments_, and had an aha moment. I put this code at the *end* of my settings.py file:\r\n\r\n    try:\r\n        os.environ[&#39;DJANGO_DEVELOPMENT_SERVER&#39;] # throws error if unset\r\n        DEBUG = True\r\n        TEMPLATE_DEBUG = True\r\n        # This is naive but possible. Could also redeclare full app set to control ordering. \r\n        # Note that it requires a list rather than the generated tuple.\r\n        INSTALLED_APPS.extend([\r\n            &#39;debug_toolbar&#39;,\r\n            &#39;django_nose&#39;,\r\n        ])\r\n        # Production database settings, alternate static/media paths, etc...\r\n    except KeyError: \r\n        print &#39;DJANGO_DEVELOPMENT_SERVER environment var not set; using production settings&#39;\r\n\r\nThis way, the app *defaults* to production settings, which means you are explicitly &quot;whitelisting&quot; your development environment. It is much safer to forget to set the environment variable locally than if it were the other way around and you forgot to set something in production and let some dev settings be used. \r\n\r\nWhen developing locally, either from the shell or in a .bash_profile or wherever:\r\n\r\n    $ export DJANGO_DEVELOPMENT_SERVER=yep\r\n\r\n(Or if you&#39;re developing on Windows, set via the Control Panel or whatever its called these days... Windows always made it so obscure that you could set environment variables.)\r\n\r\nWith this approach, the dev settings are all in one (standard) place, and simply override the production ones where needed. Any mucking around with development settings should be completely safe to commit to source control with no impact on production. "}, {"tags": [], "down_vote_count": 1, "creation_date": 1407141485, "answer_id": 25114673, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1407141485, "body_markdown": "I am also working with Laravel and I like the implementation there. I tried to mimic it and combining it with the solution proposed by T. Stone (look above):\r\n\r\n    PRODUCTION_SERVERS = [&#39;*.webfaction.com&#39;,&#39;*.whatever.com&#39;,]\r\n\r\n    def check_env():\r\n        for item in PRODUCTION_SERVERS:\r\n            match = re.match(r&quot;(^.&quot; + item + &quot;$)&quot;, socket.gethostname())\r\n            if match:\r\n                return True\r\n\r\n    if check_env():\r\n        PRODUCTION = True\r\n    else:\r\n        PRODUCTION = False\r\n\r\n    DEBUG = not PRODUCTION\r\n\r\nMaybe something like this would help you."}, {"tags": [], "down_vote_count": 0, "creation_date": 1446492115, "answer_id": 33485243, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1499509887, "last_edit_date": 1499509887, "body_markdown": "I manage my configurations with the help of [django-split-settings](https://github.com/sobolevn/django-split-settings). \r\n\r\nIt is a drop-in replacement for the default settings. It is simple, yet configurable. And refactoring of your exisitng settings is not required.\r\n\r\nHere&#39;s a small example (file `example/settings/__init__.py`):\r\n\r\n    from split_settings.tools import optional, include\r\n    import os\r\n    \r\n    if os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] == &#39;example.settings&#39;:\r\n        include(\r\n            &#39;components/default.py&#39;,\r\n            &#39;components/database.py&#39;,\r\n            # This file may be missing:\r\n            optional(&#39;local_settings.py&#39;),\r\n        \r\n            scope=globals()\r\n        )\r\n\r\nThat&#39;s it.\r\n\r\n### Update\r\n\r\nI wrote a [blog post](https://medium.com/wemake-services/managing-djangos-settings-e2b7f496120d) about managing `django`&#39;s settings with `django-split-sttings`. Have a look!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1462256130, "answer_id": 36996922, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1462256130, "body_markdown": "As an alternative to maintain different file if you wiil:\r\nIf you are using git or any other VCS to push codes from local to server, what you can do is add the settings file to .gitignore.\r\n\r\nThis will allow you to have different content in both places without any problem. SO on server you can configure an independent version of settings.py and any changes made on the local wont reflect on server and vice versa.\r\n\r\nIn addition, it will remove the settings.py file from github also, the big fault, which i have seen many newbies doing."}, {"tags": [], "down_vote_count": 0, "creation_date": 1478731213, "answer_id": 40517195, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1478731213, "body_markdown": "In order to use different `settings` configuration on different environment, create different settings file. And in your deployment script, start the server using [`--settings=&lt;my-settings.py&gt;`][1] parameter, via which you can use different *settings* on different environment.\r\n\r\n**Benefits of using this approach**:\r\n\r\n 1. Your settings will be modular based on each environment\r\n\r\n 2. You may import the `master_settings.py` containing the base configuration in the `environmnet_configuration.py` and override the values that you want to change in that environment.\r\n\r\n 3. If you have huge team, each developer may have their own `local_settings.py` which they can add to the code repository without any risk of modifying the server configuration. You can add these local settings to `.gitnore` if you use *git* or `.hginore` if you *Mercurial* for *Version Control* (or any other). That way local settings won&#39;t even be the part of actual code base keeping it clean.\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.10/topics/settings/#the-django-admin-utility"}, {"tags": [], "down_vote_count": 0, "creation_date": 1487699780, "answer_id": 42374539, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1487699780, "body_markdown": "There is also Django Classy Settings. I personally am a big fan of it. It&#39;s built by one of the most active people on the Django IRC. You would use environment vars to set things.\r\n\r\nhttp://django-classy-settings.readthedocs.io/en/latest/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1494592956, "answer_id": 43938067, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1494848733, "last_edit_date": 1494848733, "body_markdown": "TL;DR: The trick is to modify `os.environment` before you import `settings/base.py` in any `settings/&lt;purpose&gt;.py`, this will greatly simplify things.\r\n\r\n---\r\n\r\nJust thinking about all these intertwining files gives me a headache. \r\nCombining, importing (sometimes conditionally), overriding, patching of what was already set in case `DEBUG` setting changed later on. \r\nWhat a nightmare!\r\n\r\nThrough the years I went through all different solutions. They all _somewhat_ work, but are so painful to manage. \r\nWTF! Do we really need all that hassle? We started with just one `settings.py` file. \r\nNow we need a documentation just to correctly combine all these together in a correct order!\r\n\r\nI hope I finally hit the (my) sweet spot with the solution below.\r\n\r\n# Let&#39;s recap the goals (some common, some mine)\r\n\r\n 1. Keep secrets a secret \u2014 don&#39;t store them in a repo.\r\n\r\n 2. Set/read keys and secrets through environment settings, [12 factor style](https://12factor.net/).\r\n\r\n 3. Have sensible fallback defaults. Ideally for local development you don&#39;t need anything more beside defaults.\r\n\r\n 2. \u2026but try to keep defaults production safe. It&#39;s better to miss a setting override locally, \r\n than having to remember to adjust default settings safe for production.\r\n\r\n 4. Have the ability to switch `DEBUG` on/off in a way that can have an effect on other settings (eg. using javascript compressed or not).\r\n\r\n 5. Switching between purpose settings, like local/testing/staging/production, should be based only on `DJANGO_SETTINGS_MODULE`, nothing more.\r\n\r\n 6. \u2026but allow further parametrization through environment settings like `DATABASE_URL`.\r\n\r\n 6. \u2026also allow them to use different purpose settings and run them locally side by side, eg. production setup on local developer machine, to access production database or smoke test compressed style sheets.\r\n\r\n 7. Fail if an environment variable is not explicitly set (requiring an empty value at minimum), especially in production, eg. `EMAIL_HOST_PASSWORD`.\r\n\r\n 8. Respond to default `DJANGO_SETTINGS_MODULE` set in manage.py during [django-admin startproject](https://docs.djangoproject.com/en/dev/ref/django-admin/#startproject)\r\n\r\n 9. Keep conditionals to a minimum, if the condition is _the_ purposed environment type (eg. for production set log file and it&#39;s rotation), override settings in associated purposed settings file.   \r\n\r\n# Do not&#39;s\r\n\r\n 1. Do not let django read DJANGO_SETTINGS_MODULE setting form a file.  \r\n    Ugh! Think of how meta this is. If you need to have a file (like docker\r\n    env) read that into the environment before staring up a django process.\r\n \r\n 2. Do not override DJANGO_SETTINGS_MODULE in your project/app code, eg. based on hostname or process name.  \r\n    If you are lazy to set environment variable (like for `setup.py test`) do it in tooling just before you run your project code.\r\n \r\n 4. Avoid magic and patching of how django reads it&#39;s settings, preprocess the settings but do not interfere afterwards. \r\n\r\n 5. No complicated logic based nonsense. Configuration should be fixed and materialized not computed on the fly. \r\n    Providing a fallback defaults is just enough logic here.  \r\n    Do you really want to debug, why locally you have correct set of settings but in production on a remote server, \r\n    on one of hundred machines, something computed differently? Oh! Unit tests? For settings? Seriously?      \r\n\r\n\r\n\r\n# Solution\r\n\r\nMy strategy consists of excellent [django-environ](https://github.com/joke2k/django-environ) used with `ini` style files, \r\nproviding `os.environment` defaults for local development, some minimal and short `settings/&lt;purpose&gt;.py` files that have an \r\n`import settings/base.py` *AFTER* the `os.environment` was set from an `INI` file. This effectively give us a kind of settings injection.\r\n\r\nThe trick here is to modify `os.environment` before you import `settings/base.py`.\r\n\r\nTo see the full example go do the repo: https://github.com/wooyek/django-settings-strategy\r\n\r\n    .\r\n    \u2502   manage.py\r\n    \u251c\u2500\u2500\u2500data\r\n    \u2514\u2500\u2500\u2500website\r\n        \u251c\u2500\u2500\u2500settings\r\n        \u2502   \u2502   __init__.py   &lt;-- imports local for compatybility\r\n        \u2502   \u2502   base.py       &lt;-- almost all the settings, reads from proces environment \r\n        \u2502   \u2502   local.py      &lt;-- a few modifications for local development\r\n        \u2502   \u2502   production.py &lt;-- ideally is empy and everything is in base \r\n        \u2502   \u2502   testing.py    &lt;-- mimics production with a reasonable exeptions\r\n        \u2502   \u2502   .env          &lt;-- for local use, not kept in repo\r\n        \u2502   __init__.py\r\n        \u2502   urls.py\r\n        \u2502   wsgi.py\r\n\r\n\r\n## settings/.env\r\n\r\nA defaults for local development. A secret file, to mostly set required environment variables. \r\nSet them to empty values if they are not required in local development. \r\nWe provide defaults here and not in `settings/base.py` to fail on any other machine if the&#39;re missing from the environment.\r\n\r\n## settings/local.py\r\n\r\nWhat happens in here, is loading environment from `settings/.env`, then importing common settings \r\nfrom `settings/base.py`. After that we can override a few to ease local development.\r\n\r\n    import logging\r\n    import environ\r\n    \r\n    logging.debug(&quot;Settings loading: %s&quot; % __file__)\r\n    \r\n    # This will read missing environment variables from a file\r\n    # We wan to do this before loading a base settings as they may depend on environment\r\n    environ.Env.read_env(DEBUG=&#39;True&#39;)\r\n    \r\n    from .base import *\r\n    \r\n    ALLOWED_HOSTS += [\r\n        &#39;127.0.0.1&#39;,\r\n        &#39;localhost&#39;,\r\n        &#39;.example.com&#39;,\r\n        &#39;vagrant&#39;,\r\n        ]\r\n    \r\n    # https://docs.djangoproject.com/en/1.6/topics/email/#console-backend\r\n    EMAIL_BACKEND = &#39;django.core.mail.backends.console.EmailBackend&#39;\r\n    # EMAIL_BACKEND = &#39;django.core.mail.backends.dummy.EmailBackend&#39;\r\n    \r\n    LOGGING[&#39;handlers&#39;][&#39;mail_admins&#39;][&#39;email_backend&#39;] = &#39;django.core.mail.backends.dummy.EmailBackend&#39;\r\n    \r\n    # Sync task testing\r\n    # http://docs.celeryproject.org/en/2.5/configuration.html?highlight=celery_always_eager#celery-always-eager\r\n    \r\n    CELERY_ALWAYS_EAGER = True\r\n    CELERY_EAGER_PROPAGATES_EXCEPTIONS = True\r\n\r\n## settings/production.py\r\n\r\nFor production we should not expect an environment file, but it&#39;s easier to have one if we&#39;re testing something. \r\nBut anyway, lest&#39;s provide few defaults inline, so `settings/base.py` can respond accordingly. \r\n\r\n    environ.Env.read_env(Path(__file__) / &quot;production.env&quot;, DEBUG=&#39;False&#39;, ASSETS_DEBUG=&#39;False&#39;)\r\n    from .base import *\r\n\r\nThe main point of interest here are `DEBUG` and `ASSETS_DEBUG` overrides, \r\nthey will be applied to the python `os.environ` ONLY if they are MISSING from the environment and the file. \r\n\r\nThese will be our production defaults, no need to put them in the environment or file, but they can be overridden if needed. Neat!\r\n\r\n## settings/base.py\r\n\r\nThese are your mostly vanilla django settings, with a few conditionals and lot&#39;s of reading them from the environment. \r\nAlmost everything is in here, keeping all the purposed environments consistent and as similar as possible.\r\n\r\nThe main differences are below (I hope these are self explanatory):\r\n\r\n    import environ\r\n    \r\n    # https://github.com/joke2k/django-environ\r\n    env = environ.Env()\r\n    \r\n    # Build paths inside the project like this: os.path.join(BASE_DIR, ...)\r\n    BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\r\n    \r\n    # Where BASE_DIR is a django source root, ROOT_DIR is a whole project root\r\n    # It may differ BASE_DIR for eg. when your django project code is in `src` folder\r\n    # This may help to separate python modules and *django apps* from other stuff\r\n    # like documentation, fixtures, docker settings\r\n    ROOT_DIR = BASE_DIR\r\n    \r\n    # Quick-start development settings - unsuitable for production\r\n    # See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/\r\n    \r\n    # SECURITY WARNING: keep the secret key used in production secret!\r\n    SECRET_KEY = env(&#39;SECRET_KEY&#39;)\r\n    \r\n    # SECURITY WARNING: don&#39;t run with debug turned on in production!\r\n    DEBUG = env(&#39;DEBUG&#39;, default=False)\r\n    \r\n    INTERNAL_IPS = [\r\n        &#39;127.0.0.1&#39;,\r\n    ]\r\n    \r\n    ALLOWED_HOSTS = []\r\n    \r\n    if &#39;ALLOWED_HOSTS&#39; in os.environ:\r\n        hosts = os.environ[&#39;ALLOWED_HOSTS&#39;].split(&quot; &quot;)\r\n        BASE_URL = &quot;https://&quot; + hosts[0]\r\n        for host in hosts:\r\n            host = host.strip()\r\n            if host:\r\n                ALLOWED_HOSTS.append(host)\r\n    \r\n    SECURE_SSL_REDIRECT = env.bool(&#39;SECURE_SSL_REDIRECT&#39;, default=False)\r\n\r\n----\r\n\r\n    # Database\r\n    # https://docs.djangoproject.com/en/1.11/ref/settings/#databases\r\n    \r\n    if &quot;DATABASE_URL&quot; in os.environ:  # pragma: no cover\r\n        # Enable database config through environment\r\n        DATABASES = {\r\n            # Raises ImproperlyConfigured exception if DATABASE_URL not in os.environ\r\n            &#39;default&#39;: env.db(),\r\n        }\r\n    \r\n        # Make sure we use have all settings we need\r\n        # DATABASES[&#39;default&#39;][&#39;ENGINE&#39;] = &#39;django.contrib.gis.db.backends.postgis&#39;\r\n        DATABASES[&#39;default&#39;][&#39;TEST&#39;] = {&#39;NAME&#39;: os.environ.get(&quot;DATABASE_TEST_NAME&quot;, None)}\r\n        DATABASES[&#39;default&#39;][&#39;OPTIONS&#39;] = {\r\n            &#39;options&#39;: &#39;-c search_path=gis,public,pg_catalog&#39;,\r\n            &#39;sslmode&#39;: &#39;require&#39;,\r\n        }\r\n    else:\r\n        DATABASES = {\r\n            &#39;default&#39;: {\r\n                &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;,\r\n                # &#39;ENGINE&#39;: &#39;django.contrib.gis.db.backends.spatialite&#39;,\r\n                &#39;NAME&#39;: os.path.join(ROOT_DIR, &#39;data&#39;, &#39;db.dev.sqlite3&#39;),\r\n                &#39;TEST&#39;: {\r\n                    &#39;NAME&#39;: os.path.join(ROOT_DIR, &#39;data&#39;, &#39;db.test.sqlite3&#39;),\r\n                }\r\n            }\r\n        }\r\n\r\n----\r\n\r\n    STATIC_ROOT = os.path.join(ROOT_DIR, &#39;static&#39;)\r\n    \r\n    # django-assets\r\n    # http://django-assets.readthedocs.org/en/latest/settings.html\r\n    \r\n    ASSETS_LOAD_PATH = STATIC_ROOT\r\n    ASSETS_ROOT = os.path.join(ROOT_DIR, &#39;assets&#39;, &quot;compressed&quot;)\r\n    ASSETS_DEBUG = env(&#39;ASSETS_DEBUG&#39;, default=DEBUG)  # Disable when testing compressed file in DEBUG mode\r\n    if ASSETS_DEBUG:\r\n        ASSETS_URL = STATIC_URL\r\n        ASSETS_MANIFEST = &quot;json:{}&quot;.format(os.path.join(ASSETS_ROOT, &quot;manifest.json&quot;))\r\n    else:\r\n        ASSETS_URL = STATIC_URL + &quot;assets/compressed/&quot;\r\n        ASSETS_MANIFEST = &quot;json:{}&quot;.format(os.path.join(STATIC_ROOT, &#39;assets&#39;, &quot;compressed&quot;, &quot;manifest.json&quot;))\r\n    ASSETS_AUTO_BUILD = ASSETS_DEBUG\r\n    ASSETS_MODULES = (&#39;website.assets&#39;,)\r\n\r\nThe last bit shows the power here. `ASSETS_DEBUG` has a sensible default, \r\nwhich can be overridden in `settings/production.py` and even that that can be overridden by an environment setting! Yay! \r\n\r\nIn effect we have a mixed hierarchy of importance:\r\n\r\n1. settings/&lt;purpose&gt;.py - sets defaults based on purpose, does not store secrets\r\n2. settings/base.py - is mostly controlled by environment \r\n3. process environment settings - 12 factor baby!\r\n4. settings/.env - local defaults for easy startup\r\n \r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1497069170, "answer_id": 44469533, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1497069170, "body_markdown": "1 - Create a new folder inside your app and name settings to it.\r\n\r\n2 - Now create a new __init__.py file in it and inside it write\r\n\r\n        from .base import *\r\n\r\n        try:\r\n\r\n from .local import *\r\n\r\n        except:\r\n\r\n  pass\r\n\r\n         try:\r\n\r\n  from .production import *\r\n\r\n         except:\r\n\r\n  pass\r\n\r\n \r\n\r\n3 - Create three new files in the settings folder name local.py and production.py and base.py\r\n\r\n4 - Inside base.py copy all the content of previous settings.p folder and rename it with something different let say old_settings.py\r\n\r\n5 - In base.py change your BASE_DIR path to point to your new path of setting\r\n\r\nOld path-&gt; BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\n\r\nNew path -&gt; BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\n\r\nnow in this way the project dir can be structured and can be manageable among production and local development."}, {"tags": [], "down_vote_count": 0, "creation_date": 1502555987, "answer_id": 45652626, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1502555987, "body_markdown": "I had my settings split as follows  \r\n\r\n    settings/\r\n         |\r\n         |- base.py\r\n         |- dev.py\r\n         |- prod.py  \r\n\r\nWe have 3 environments  \r\n\r\n - dev\r\n - staging\r\n - production  \r\n\r\nNow obviously staging and production should have the maximum possible similar environment. So we kept `prod.py` for both.\r\n\r\nBut there was a case where I had to identify running server is a production server. @T. Stone &#39;s answer helped me write check as follows.  \r\n\r\n    from socket import gethostname, gethostbyname  \r\n    PROD_HOSTS = [&quot;webserver1&quot;, &quot;webserver2&quot;]\r\n    \r\n    DEBUG = False\r\n    ALLOWED_HOSTS = [gethostname(), gethostbyname(gethostname()),]\r\n\r\n\r\n    if any(host in PROD_HOSTS for host in ALLOWED_HOSTS):\r\n        SESSION_COOKIE_SECURE = True\r\n        CSRF_COOKIE_SECURE = True  \r\n"}], "title": "How to manage local vs production settings in Django?", "view_count": 76245, "answer_count": 20, "code_snippet": ["<code>settings.py</code>", "<code>settings.py</code>", "<code>try:\n    from local_settings import *\nexcept ImportError as e:\n    pass\n</code>", "<code>local_settings.py</code>", "<code>settings_local</code>", "<code>local_settings</code>", "<code>settings.py</code>", "<code>settings_local.py</code>", "<code>.gitignore</code>", "<code>settings_local.py.txt</code>", "<code>project/\n    app1/\n    app2/\n    project/\n        __init__.py\n        settings/\n            __init__.py\n            base.py\n            local.py\n            production.py\n    manage.py\n</code>", "<code>base.py</code>", "<code>local.py</code>", "<code>production.py</code>", "<code>settings/base.py</code>", "<code>INSTALLED_APPS = (\n    # common apps...\n)\n</code>", "<code>settings/local.py</code>", "<code>from project.settings.base import *\n\nDEBUG = True\nINSTALLED_APPS += (\n    'debug_toolbar', # and other apps for local development\n)\n</code>", "<code>settings/production.py</code>", "<code>from project.settings.base import *\n\nDEBUG = False\nINSTALLED_APPS += (\n    # other apps for production site\n)\n</code>", "<code>--settings</code>", "<code># Running django for local development\n$ ./manage.py runserver 0:8000 --settings=project.settings.local\n\n# Running django shell on the production site\n$ ./manage.py shell --settings=project.settings.production\n</code>", "<code>--settings</code>", "<code>DJANGO_SETTINGS_MODULE</code>", "<code>DJANGO_SETTINGS_MODULE</code>", "<code>BASE_DIR</code>", "<code>os.path.dirname(os.path.realpath(os.path.dirname(__file__) + \"/..\"))</code>", "<code>from django.conf import settings</code>", "<code>settings.py</code>", "<code>.\n\u2514\u2500\u2500 settings/\n \u00a0\u00a0 \u251c\u2500\u2500 __init__.py  &lt;= not versioned\n \u00a0\u00a0 \u251c\u2500\u2500 common.py\n \u00a0\u00a0 \u251c\u2500\u2500 dev.py\n \u00a0\u00a0 \u2514\u2500\u2500 prod.py\n</code>", "<code>common.py</code>", "<code>prod.py</code>", "<code>from __future__ import absolute_import # optional, but I like it\nfrom .common import *\n\n# Production overrides\nDEBUG = False\n#...\n</code>", "<code>dev.py</code>", "<code>common.py</code>", "<code>__init__.py</code>", "<code>from __future__ import absolute_import\nfrom .prod import *  # or .dev if you want dev\n\n##### DJANGO SECRETS\nSECRET_KEY = '(3gd6shenud@&amp;57...'\nDATABASES['default']['PASSWORD'] = 'f9kGH...'\n\n##### OTHER SECRETS\nAWS_SECRET_ACCESS_KEY = \"h50fH...\"\n</code>", "<code>common.py</code>", "<code>prod.py</code>", "<code>dev.py</code>", "<code>common.py</code>", "<code>prod.py</code>", "<code>dev.py</code>", "<code>__init__.py</code>", "<code>os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"foobar.settings\")</code>", "<code>__init__.py</code>", "<code>__init__.py</code>", "<code>PRODUCTION_SERVERS = ['WEBSERVER1','WEBSERVER2',]\nif os.environ['COMPUTERNAME'] in PRODUCTION_SERVERS:\n    PRODUCTION = True\nelse:\n    PRODUCTION = False\n\nDEBUG = not PRODUCTION\nTEMPLATE_DEBUG = DEBUG\n\n# ...\n\nif PRODUCTION:\n    DATABASE_HOST = '192.168.1.1'\nelse:\n    DATABASE_HOST = 'localhost'\n</code>", "<code>python manage.py runserver</code>", "<code>defaults.ini</code>", "<code>net.ini</code>", "<code>net.domain.ini</code>", "<code>net.domain.webserver01.ini</code>", "<code>cluster.cluster_name.ini</code>", "<code>hostname: %(subdomain).whatever.net</code>", "<code>config = ConfigParser.ConfigParser()</code>", "<code>config.read(array_of_filenames)</code>", "<code>config.get(section, option)</code>", "<code>example/settings/__init__.py</code>", "<code>from split_settings.tools import optional, include\nimport os\n\nif os.environ['DJANGO_SETTINGS_MODULE'] == 'example.settings':\n    include(\n        'components/default.py',\n        'components/database.py',\n        # This file may be missing:\n        optional('local_settings.py'),\n\n        scope=globals()\n    )\n</code>", "<code>django</code>", "<code>django-split-sttings</code>", "<code>uwsgi.ini</code>", "<code>if DEBUG:\n    STATIC_PATH = /path/to/dev/files\nelse:\n    STATIC_PATH = /path/to/production/files\n</code>", "<code>PRODUCTION_SERVERS = ['*.webfaction.com','*.whatever.com',]\n\ndef check_env():\n    for item in PRODUCTION_SERVERS:\n        match = re.match(r\"(^.\" + item + \"$)\", socket.gethostname())\n        if match:\n            return True\n\nif check_env():\n    PRODUCTION = True\nelse:\n    PRODUCTION = False\n\nDEBUG = not PRODUCTION\n</code>", "<code>local_settings.py</code>", "<code>USING_LOCAL = True</code>", "<code>USING_LOCAL = False</code>", "<code>settings.py</code>", "<code>USING_LOCAL</code>", "<code>DEBUG = USING_LOCAL\nif USING_LOCAL:\n    # dev database settings\nelse:\n    # prod database settings\n</code>", "<code>local_settings.py</code>", "<code>from settings_base import *</code>", "<code>manage.py &lt;command&gt; --settings=settings_you_wish_to_use.py</code>", "<code>import platform\nfrom django.core.management import execute_manager \n\ncomputername = platform.node()\n\ntry:\n  settings = __import__(computername + '_settings')\nexcept ImportError: \n  import sys\n  sys.stderr.write(\"Error: Can't find the file '%r_settings.py' in the directory containing %r. It appears you've customized things.\\nYou'll have to run django-admin.py, passing it your settings module.\\n(If the file local_settings.py does indeed exist, it's causing an ImportError somehow.)\\n\" % (computername, __file__))\n  sys.exit(1)\n\nif __name__ == \"__main__\":\n  execute_manager(settings)\n</code>", "<code>os.environment</code>", "<code>settings/base.py</code>", "<code>settings/&lt;purpose&gt;.py</code>", "<code>DEBUG</code>", "<code>settings.py</code>", "<code>DEBUG</code>", "<code>DJANGO_SETTINGS_MODULE</code>", "<code>DATABASE_URL</code>", "<code>EMAIL_HOST_PASSWORD</code>", "<code>DJANGO_SETTINGS_MODULE</code>", "<code>setup.py test</code>", "<code>ini</code>", "<code>os.environment</code>", "<code>settings/&lt;purpose&gt;.py</code>", "<code>import settings/base.py</code>", "<code>os.environment</code>", "<code>INI</code>", "<code>os.environment</code>", "<code>settings/base.py</code>", "<code>.\n\u2502   manage.py\n\u251c\u2500\u2500\u2500data\n\u2514\u2500\u2500\u2500website\n    \u251c\u2500\u2500\u2500settings\n    \u2502   \u2502   __init__.py   &lt;-- imports local for compatybility\n    \u2502   \u2502   base.py       &lt;-- almost all the settings, reads from proces environment \n    \u2502   \u2502   local.py      &lt;-- a few modifications for local development\n    \u2502   \u2502   production.py &lt;-- ideally is empy and everything is in base \n    \u2502   \u2502   testing.py    &lt;-- mimics production with a reasonable exeptions\n    \u2502   \u2502   .env          &lt;-- for local use, not kept in repo\n    \u2502   __init__.py\n    \u2502   urls.py\n    \u2502   wsgi.py\n</code>", "<code>settings/base.py</code>", "<code>settings/.env</code>", "<code>settings/base.py</code>", "<code>import logging\nimport environ\n\nlogging.debug(\"Settings loading: %s\" % __file__)\n\n# This will read missing environment variables from a file\n# We wan to do this before loading a base settings as they may depend on environment\nenviron.Env.read_env(DEBUG='True')\n\nfrom .base import *\n\nALLOWED_HOSTS += [\n    '127.0.0.1',\n    'localhost',\n    '.example.com',\n    'vagrant',\n    ]\n\n# https://docs.djangoproject.com/en/1.6/topics/email/#console-backend\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n# EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'\n\nLOGGING['handlers']['mail_admins']['email_backend'] = 'django.core.mail.backends.dummy.EmailBackend'\n\n# Sync task testing\n# http://docs.celeryproject.org/en/2.5/configuration.html?highlight=celery_always_eager#celery-always-eager\n\nCELERY_ALWAYS_EAGER = True\nCELERY_EAGER_PROPAGATES_EXCEPTIONS = True\n</code>", "<code>settings/base.py</code>", "<code>environ.Env.read_env(Path(__file__) / \"production.env\", DEBUG='False', ASSETS_DEBUG='False')\nfrom .base import *\n</code>", "<code>DEBUG</code>", "<code>ASSETS_DEBUG</code>", "<code>os.environ</code>", "<code>import environ\n\n# https://github.com/joke2k/django-environ\nenv = environ.Env()\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n# Where BASE_DIR is a django source root, ROOT_DIR is a whole project root\n# It may differ BASE_DIR for eg. when your django project code is in `src` folder\n# This may help to separate python modules and *django apps* from other stuff\n# like documentation, fixtures, docker settings\nROOT_DIR = BASE_DIR\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env('SECRET_KEY')\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = env('DEBUG', default=False)\n\nINTERNAL_IPS = [\n    '127.0.0.1',\n]\n\nALLOWED_HOSTS = []\n\nif 'ALLOWED_HOSTS' in os.environ:\n    hosts = os.environ['ALLOWED_HOSTS'].split(\" \")\n    BASE_URL = \"https://\" + hosts[0]\n    for host in hosts:\n        host = host.strip()\n        if host:\n            ALLOWED_HOSTS.append(host)\n\nSECURE_SSL_REDIRECT = env.bool('SECURE_SSL_REDIRECT', default=False)\n</code>", "<code># Database\n# https://docs.djangoproject.com/en/1.11/ref/settings/#databases\n\nif \"DATABASE_URL\" in os.environ:  # pragma: no cover\n    # Enable database config through environment\n    DATABASES = {\n        # Raises ImproperlyConfigured exception if DATABASE_URL not in os.environ\n        'default': env.db(),\n    }\n\n    # Make sure we use have all settings we need\n    # DATABASES['default']['ENGINE'] = 'django.contrib.gis.db.backends.postgis'\n    DATABASES['default']['TEST'] = {'NAME': os.environ.get(\"DATABASE_TEST_NAME\", None)}\n    DATABASES['default']['OPTIONS'] = {\n        'options': '-c search_path=gis,public,pg_catalog',\n        'sslmode': 'require',\n    }\nelse:\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            # 'ENGINE': 'django.contrib.gis.db.backends.spatialite',\n            'NAME': os.path.join(ROOT_DIR, 'data', 'db.dev.sqlite3'),\n            'TEST': {\n                'NAME': os.path.join(ROOT_DIR, 'data', 'db.test.sqlite3'),\n            }\n        }\n    }\n</code>", "<code>STATIC_ROOT = os.path.join(ROOT_DIR, 'static')\n\n# django-assets\n# http://django-assets.readthedocs.org/en/latest/settings.html\n\nASSETS_LOAD_PATH = STATIC_ROOT\nASSETS_ROOT = os.path.join(ROOT_DIR, 'assets', \"compressed\")\nASSETS_DEBUG = env('ASSETS_DEBUG', default=DEBUG)  # Disable when testing compressed file in DEBUG mode\nif ASSETS_DEBUG:\n    ASSETS_URL = STATIC_URL\n    ASSETS_MANIFEST = \"json:{}\".format(os.path.join(ASSETS_ROOT, \"manifest.json\"))\nelse:\n    ASSETS_URL = STATIC_URL + \"assets/compressed/\"\n    ASSETS_MANIFEST = \"json:{}\".format(os.path.join(STATIC_ROOT, 'assets', \"compressed\", \"manifest.json\"))\nASSETS_AUTO_BUILD = ASSETS_DEBUG\nASSETS_MODULES = ('website.assets',)\n</code>", "<code>ASSETS_DEBUG</code>", "<code>settings/production.py</code>", "<code>#!/usr/bin/env python\nimport sys\nimport socket\nfrom django.core.management import execute_manager \n\nipaddress = socket.gethostbyname( socket.gethostname() )\nif ipaddress == '127.0.0.1':\n    try:\n        import local_settings # Assumed to be in the same directory.\n        settings = local_settings\n    except ImportError:\n        import sys\n        sys.stderr.write(\"Error: Can't find the file 'local_settings.py' in the directory containing %r. It appears you've customized things.\\nYou'll have to run django-admin.py, passing it your settings module.\\n(If the file local_settings.py does indeed exist, it's causing an ImportError somehow.)\\n\" % __file__)\n        sys.exit(1)\nelse:\n    try:\n        import prod_settings # Assumed to be in the same directory.\n        settings = prod_settings    \n    except ImportError:\n        import sys\n        sys.stderr.write(\"Error: Can't find the file 'prod_settings.py' in the directory containing %r. It appears you've customized things.\\nYou'll have to run django-admin.py, passing it your settings module.\\n(If the file prod_settings.py does indeed exist, it's causing an ImportError somehow.)\\n\" % __file__)\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    execute_manager(settings)\n</code>", "<code>settings</code>", "<code>--settings=&lt;my-settings.py&gt;</code>", "<code>master_settings.py</code>", "<code>environmnet_configuration.py</code>", "<code>local_settings.py</code>", "<code>.gitnore</code>", "<code>.hginore</code>", "<code>    from .base import *\n\n    try:\n</code>", "<code>    except:\n</code>", "<code>     try:\n</code>", "<code>     except:\n</code>", "<code>settings/\n     |\n     |- base.py\n     |- dev.py\n     |- prod.py  \n</code>", "<code>prod.py</code>", "<code>from socket import gethostname, gethostbyname  \nPROD_HOSTS = [\"webserver1\", \"webserver2\"]\n\nDEBUG = False\nALLOWED_HOSTS = [gethostname(), gethostbyname(gethostname()),]\n\n\nif any(host in PROD_HOSTS for host in ALLOWED_HOSTS):\n    SESSION_COOKIE_SECURE = True\n    CSRF_COOKIE_SECURE = True  \n</code>", "<code>try:\n    os.environ['DJANGO_DEVELOPMENT_SERVER'] # throws error if unset\n    DEBUG = True\n    TEMPLATE_DEBUG = True\n    # This is naive but possible. Could also redeclare full app set to control ordering. \n    # Note that it requires a list rather than the generated tuple.\n    INSTALLED_APPS.extend([\n        'debug_toolbar',\n        'django_nose',\n    ])\n    # Production database settings, alternate static/media paths, etc...\nexcept KeyError: \n    print 'DJANGO_DEVELOPMENT_SERVER environment var not set; using production settings'\n</code>", "<code>$ export DJANGO_DEVELOPMENT_SERVER=yep\n</code>"], "path": "stack.django"}, {"tags": ["python", "unicode", "terminal", "ansi-colors"], "creation_date": 1226602690, "body_markdown": "How can I output colored text to the terminal, in Python?\r\nWhat is the best Unicode symbol to represent a solid block?\r\n\r\n", "last_edit_date": 1510528800, "up_vote_count": 1399, "link": "https://stackoverflow.com/questions/287871/print-in-terminal-with-colors", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1226603183, "answer_id": 287896, "path": "stack.django.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1439994833, "last_edit_date": 1439994833, "body_markdown": "For Windows you cannot print to console with colors unless you&#39;re using the win32api.\r\n\r\nFor Linux it&#39;s as simple as using print, with the escape sequences outlined here:\r\n\r\n[Colors][1]\r\n\r\nFor the character to print like a box, it really depends on what font you are using for the console window. The pound symbol works well, but it depends on the font:\r\n\r\n    #\r\n\r\n  [1]: http://www.linuxhowtos.org/Tips%20and%20Tricks/ansi_escape_sequences.htm"}, {"tags": [], "down_vote_count": 1, "creation_date": 1226603639, "answer_id": 287919, "path": "stack.django.answer", "score": 12, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1226603639, "body_markdown": "You can use the Python implementation of the curses library:\r\n[http://docs.python.org/library/curses.html][1]\r\n\r\nAlso, run this and you&#39;ll find your box:\r\n\r\n    for i in range(255):\r\n        print i, chr(i)\r\n\r\n\r\n  [1]: http://docs.python.org/library/curses.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1226604174, "answer_id": 287934, "path": "stack.django.answer", "score": 65, "up_vote_count": 65, "is_accepted": false, "last_activity_date": 1514300188, "last_edit_date": 1514300188, "body_markdown": "You want to learn about ANSI escape sequences. Here&#39;s a brief example:\r\n\r\n    CSI=&quot;\\x1B[&quot;\r\n    print CSI+&quot;31;40m&quot; + &quot;Colored Text&quot; + CSI + &quot;0m&quot;\r\n\r\nFor more info see http://en.wikipedia.org/wiki/ANSI_escape_code\r\n\r\nFor a block character, try a unicode character like \\u2588:\r\n\r\n    print u&quot;\\u2588&quot;\r\n\r\nPutting it all together:\r\n\r\n    print CSI+&quot;31;40m&quot; + u&quot;\\u2588&quot; + CSI + &quot;0m&quot;\r\n\r\n"}, {"tags": [], "down_vote_count": 5, "creation_date": 1226604307, "answer_id": 287944, "path": "stack.django.answer", "score": 1227, "up_vote_count": 1232, "is_accepted": false, "last_activity_date": 1472774495, "last_edit_date": 1472774495, "body_markdown": "This somewhat depends on what platform you are on. The most common way to do this is by printing ANSI escape sequences. For a simple example, here&#39;s some python code from the [blender build scripts][1]:\r\n\r\n    class bcolors:\r\n        HEADER = &#39;\\033[95m&#39;\r\n        OKBLUE = &#39;\\033[94m&#39;\r\n        OKGREEN = &#39;\\033[92m&#39;\r\n        WARNING = &#39;\\033[93m&#39;\r\n        FAIL = &#39;\\033[91m&#39;\r\n        ENDC = &#39;\\033[0m&#39;\r\n        BOLD = &#39;\\033[1m&#39;\r\n        UNDERLINE = &#39;\\033[4m&#39;\r\n\r\nTo use code like this, you can do something like \r\n\r\n    print bcolors.WARNING + &quot;Warning: No active frommets remain. Continue?&quot; \r\n          + bcolors.ENDC\r\n\r\n\r\nThis will work on unixes including OS X, linux and windows (provided you use [ANSICON][2], or in Windows 10 provided you enable [VT100 emulation][8]). There are ansi codes for setting the color, moving the cursor, and more.\r\n\r\nIf you are going to get complicated with this (and it sounds like you are if you are writing a game), you should look into the &quot;curses&quot; module, which handles a lot of the complicated parts of this for you. The [Python Curses HowTO][3] is a good introduction.\r\n\r\nIf you are not using extended ASCII (i.e. not on a PC), you are stuck with the ascii characters below 127, and &#39;#&#39; or &#39;@&#39; is probably your best bet for a block. If you can ensure your terminal is using a IBM [extended ascii character set][4], you have many more options. Characters 176, 177, 178 and 219 are the &quot;block characters&quot;.\r\n\r\nSome modern text-based programs, such as &quot;Dwarf Fortress&quot;, emulate text mode in a graphical mode, and use images of the classic PC font. You can find some of these bitmaps that you can use on the [Dwarf Fortress Wiki][5] see ([user-made tilesets][6]).\r\n\r\nThe [Text Mode Demo Contest][7] has more resources for doing graphics in text mode.\r\n\r\nHmm.. I think got a little carried away on this answer. I am in the midst of planning an epic text-based adventure game, though. Good luck with your colored text!\r\n\r\n\r\n  [1]: https://svn.blender.org/svnroot/bf-blender/trunk/blender/build_files/scons/tools/bcolors.py\r\n  [2]: https://github.com/adoxa/ansicon\r\n  [3]: http://docs.python.org/howto/curses.html &quot;Python Curses howto&quot;\r\n  [4]: http://telecom.tbi.net/asc-ibm.html\r\n  [5]: http://dwarffortresswiki.org/DF2014:Tilesets\r\n  [6]: http://dwarffortresswiki.org/Tileset_repository\r\n  [7]: http://en.wikipedia.org/wiki/TMDC &quot;text mode demo contest&quot;\r\n  [8]: https://msdn.microsoft.com/en-us/library/mt638032"}, {"tags": [], "down_vote_count": 0, "creation_date": 1226605137, "answer_id": 287987, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1364145118, "last_edit_date": 1364145118, "body_markdown": "If you are programming a game perhaps you would like to change the background color and use only spaces? For example:\r\n\r\n    print &quot; &quot;+ &quot;\\033[01;41m&quot; + &quot; &quot; +&quot;\\033[01;46m&quot;  + &quot;  &quot; + &quot;\\033[01;42m&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1226605983, "answer_id": 288030, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1322070817, "last_edit_date": 1322070817, "body_markdown": "## For the characters\r\n\r\nYour terminal most probably uses Unicode (typically UTF-8 encoded) characters, so it&#39;s only a matter of the appropriate font selection to see your favorite character. Unicode char U+2588, &quot;Full block&quot; is the one I would suggest you use.\r\n\r\nTry the following:\r\n\r\n    import unicodedata\r\n    fp= open(&quot;character_list&quot;, &quot;w&quot;)\r\n    for index in xrange(65536):\r\n        char= unichr(index)\r\n        try: its_name= unicodedata.name(char)\r\n        except ValueError: its_name= &quot;N/A&quot;\r\n        fp.write(&quot;%05d %04x %s %s\\n&quot; % (index, index, char.encode(&quot;UTF-8&quot;), its_name)\r\n    fp.close()\r\n\r\nExamine the file later with your favourite viewer.\r\n\r\n## For the colors\r\n\r\n[curses](http://www.python.org/doc/2.5.2/lib/module-curses.html) is the module you want to use. Check this [tutorial](http://docs.python.org/howto/curses.html).\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1226614950, "answer_id": 288556, "path": "stack.django.answer", "score": 22, "up_vote_count": 22, "is_accepted": false, "last_activity_date": 1226614950, "body_markdown": "On Windows you can use module &#39;win32console&#39; (available in some Python distributions) or module &#39;ctypes&#39; (Python 2.5 and up) to access the Win32 API.\r\n\r\nTo see complete code that supports both ways, see the &lt;a href=&quot;http://code.google.com/p/testoob/source/browse/trunk/src/testoob/reporting/colored.py&quot;&gt;color console reporting code&lt;/a&gt; from &lt;a href=&quot;http://www.testoob.org&quot;&gt;Testoob&lt;/a&gt;.\r\n\r\nctypes example:\r\n\r\n    import ctypes\r\n    \r\n    # Constants from the Windows API\r\n    STD_OUTPUT_HANDLE = -11\r\n    FOREGROUND_RED    = 0x0004 # text color contains red.\r\n    \r\n    def get_csbi_attributes(handle):\r\n        # Based on IPython&#39;s winconsole.py, written by Alexander Belchenko\r\n        import struct\r\n        csbi = ctypes.create_string_buffer(22)\r\n        res = ctypes.windll.kernel32.GetConsoleScreenBufferInfo(handle, csbi)\r\n        assert res\r\n    \r\n        (bufx, bufy, curx, cury, wattr,\r\n        left, top, right, bottom, maxx, maxy) = struct.unpack(&quot;hhhhHhhhhhh&quot;, csbi.raw)\r\n        return wattr\r\n    \r\n    \r\n    handle = ctypes.windll.kernel32.GetStdHandle(STD_OUTPUT_HANDLE)\r\n    reset = get_csbi_attributes(handle)\r\n    \r\n    ctypes.windll.kernel32.SetConsoleTextAttribute(handle, FOREGROUND_RED)\r\n    print &quot;Cherry on top&quot;\r\n    ctypes.windll.kernel32.SetConsoleTextAttribute(handle, reset)\r\n\r\n"}, {"tags": [], "down_vote_count": 5, "creation_date": 1226820699, "answer_id": 293633, "path": "stack.django.answer", "score": 521, "up_vote_count": 526, "is_accepted": false, "last_activity_date": 1226820699, "body_markdown": "I&#39;m surprised no one has mentioned the [Python termcolor module][1]. Usage is pretty simple:\r\n\r\n    from termcolor import colored\r\n\r\n    print colored(&#39;hello&#39;, &#39;red&#39;), colored(&#39;world&#39;, &#39;green&#39;)\r\n\r\nIt may not be sophisticated enough, however, for game programming and the &quot;colored blocks&quot; that you want to do...\r\n\r\n  [1]: http://pypi.python.org/pypi/termcolor"}, {"tags": [], "down_vote_count": 0, "creation_date": 1246535957, "answer_id": 1073959, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1250165141, "last_edit_date": 1250165141, "body_markdown": "Here&#39;s a curses example:\r\n\r\n    import curses\r\n\r\n    def main(stdscr):\r\n        stdscr.clear()\r\n        if curses.has_colors():\r\n            for i in xrange(1, curses.COLORS):\r\n                curses.init_pair(i, i, curses.COLOR_BLACK)\r\n                stdscr.addstr(&quot;COLOR %d! &quot; % i, curses.color_pair(i))\r\n                stdscr.addstr(&quot;BOLD! &quot;, curses.color_pair(i) | curses.A_BOLD)\r\n                stdscr.addstr(&quot;STANDOUT! &quot;, curses.color_pair(i) | curses.A_STANDOUT)\r\n                stdscr.addstr(&quot;UNDERLINE! &quot;, curses.color_pair(i) | curses.A_UNDERLINE)\r\n                stdscr.addstr(&quot;BLINK! &quot;, curses.color_pair(i) | curses.A_BLINK)\r\n                stdscr.addstr(&quot;DIM! &quot;, curses.color_pair(i) | curses.A_DIM)\r\n                stdscr.addstr(&quot;REVERSE! &quot;, curses.color_pair(i) | curses.A_REVERSE)\r\n        stdscr.refresh()\r\n        stdscr.getch()\r\n    \r\n    if __name__ == &#39;__main__&#39;:\r\n        print &quot;init...&quot;\r\n        curses.wrapper(main)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1280128034, "answer_id": 3332860, "path": "stack.django.answer", "score": 398, "up_vote_count": 398, "is_accepted": false, "last_activity_date": 1516384479, "last_edit_date": 1516384479, "body_markdown": "The answer is [Colorama][1] for all cross-platform coloring in Python.\r\n\r\nA Python 3.6 example screenshot:\r\n[![example screenshot][2]][2]\r\n\r\n\r\n  [1]: http://pypi.python.org/pypi/colorama\r\n  [2]: https://i.stack.imgur.com/q3D4W.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1319128477, "answer_id": 7839185, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1319128477, "body_markdown": "I wrote a simple module, available at:\r\nhttp://pypi.python.org/pypi/colorconsole\r\n\r\nIt works with Windows, Mac OS X and Linux.\r\nIt uses ANSI for Linux and Mac, but native calls to console functions on Windows.\r\nYou have colors, cursor positioning and keyboard input. It is not a replacement for curses, but can be very useful if you need to use in simple scripts or ASCII games."}, {"tags": [], "down_vote_count": 0, "creation_date": 1324168369, "answer_id": 8548994, "path": "stack.django.answer", "score": 57, "up_vote_count": 57, "is_accepted": false, "last_activity_date": 1324168369, "body_markdown": "My favorite way is with the [Blessings][1] library (full disclosure: I wrote it). For example:\r\n\r\n    from blessings import Terminal\r\n\r\n    t = Terminal()\r\n    print t.red(&#39;This is red.&#39;)\r\n    print t.bold_bright_red_on_black(&#39;Bright red on black&#39;)\r\n\r\nTo print colored bricks, the most reliable way is to print spaces with background colors. I use this technique to draw the progress bar in [nose-progressive][2]:\r\n\r\n    print t.on_green(&#39; &#39;)\r\n\r\nYou can print in specific locations as well:\r\n\r\n    with t.location(0, 5):\r\n        print t.on_yellow(&#39; &#39;)\r\n\r\nIf you have to muck with other terminal capabilities in the course of your game, you can do that as well. You can use Python&#39;s standard string formatting to keep it readable:\r\n\r\n    print &#39;{t.clear_eol}You just cleared a {t.bold}whole{t.normal} line!&#39;.format(t=t)\r\n\r\nThe nice thing about Blessings is that it does its best to work on all sorts of terminals, not just the (overwhelmingly common) ANSI-color ones. It also keeps unreadable escape sequences out of your code while remaining concise to use. Have fun!\r\n\r\n  [1]: http://pypi.python.org/pypi/blessings/\r\n  [2]: http://pypi.python.org/pypi/nose-progressive/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1325986835, "answer_id": 8774709, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1364144960, "last_edit_date": 1364144960, "body_markdown": "You could use [CLINT][1]:\r\n\r\n    from clint.textui import colored\r\n    print colored.red(&#39;some warning message&#39;)\r\n    print colored.green(&#39;nicely done!&#39;)\r\n\r\n[Get it from GitHub][2].\r\n\r\n\r\n  [1]: http://www.nicosphere.net/clint-command-line-library-for-python/\r\n  [2]: https://github.com/kennethreitz/clint"}, {"tags": [], "down_vote_count": 0, "creation_date": 1340550469, "answer_id": 11178541, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1340584504, "last_edit_date": 1340584504, "body_markdown": "To address this problem I created a mind-numbingly simple package to print strings with interpolated color codes, called [icolor][1].\r\n\r\nicolor includes two functions: `cformat` and `cprint`, each of which takes a string with substrings that are interpolated to map to ANSI escape sequences e.g.\r\n\r\n    from icolor import cformat # there is also cprint\r\n \r\n    cformat(&quot;This is #RED;a red string, partially with a #xBLUE;blue background&quot;)\r\n    &#39;This is \\x1b[31ma red string, partially with a \\x1b[44mblue background\\x1b[0m&#39;\r\n\r\nAll the ANSI colors are included (e.g. `#RED;`, `#BLUE;`, etc.), as well as `#RESET;`, `#BOLD;` and others.\r\n\r\nBackground colors have an `x` prefix, so a green background would be `#xGREEN;`.\r\n\r\nOne can escape `#` with `##`.\r\n\r\nGiven its simplicity, the best documentation is probably [the code itself][2].\r\n\r\nIt is [on PYPI][3], so one can `sudo easy_install icolor`.\r\n\r\n\r\n  [1]: https://github.com/brianmhunt/icolor\r\n  [2]: https://github.com/brianmhunt/icolor/blob/master/icolor.py\r\n  [3]: http://pypi.python.org/pypi/icolor/1.0"}, {"tags": [], "down_vote_count": 0, "creation_date": 1340643579, "answer_id": 11193790, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1364145555, "last_edit_date": 1364145555, "body_markdown": "If you are using Windows, then here you go!\r\n\r\n    # display text on a Windows console\r\n    # Windows XP with Python27 or Python32\r\n    from ctypes import windll\r\n    # needed for Python2/Python3 diff\r\n    try:\r\n        input = raw_input\r\n    except:\r\n        pass\r\n    STD_OUTPUT_HANDLE = -11\r\n    stdout_handle = windll.kernel32.GetStdHandle(STD_OUTPUT_HANDLE)\r\n    # look at the output and select the color you want\r\n    # for instance hex E is yellow on black\r\n    # hex 1E is yellow on blue\r\n    # hex 2E is yellow on green and so on\r\n    for color in range(0, 75):\r\n         windll.kernel32.SetConsoleTextAttribute(stdout_handle, color)\r\n         print(&quot;%X --&gt; %s&quot; % (color, &quot;Have a fine day!&quot;))\r\n         input(&quot;Press Enter to go on ... &quot;)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1341103300, "answer_id": 11278750, "path": "stack.django.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1358628106, "last_edit_date": 1358628106, "body_markdown": "note how well the ``with`` keyword mixes with modifiers like these that need to be reset (using Python 3 and Colorama):\r\n\r\n    from colorama import Fore, Style\r\n    import sys\r\n\r\n    class Highlight:\r\n      def __init__(self, clazz, color):\r\n        self.color = color\r\n        self.clazz = clazz\r\n      def __enter__(self):\r\n        print(self.color, end=&quot;&quot;)\r\n      def __exit__(self, type, value, traceback):\r\n        if self.clazz == Fore:\r\n          print(Fore.RESET, end=&quot;&quot;)\r\n        else:\r\n          assert self.clazz == Style\r\n          print(Style.RESET_ALL, end=&quot;&quot;)\r\n        sys.stdout.flush()\r\n\r\n    with Highlight(Fore, Fore.GREEN):\r\n      print(&quot;this is highlighted&quot;)\r\n    print(&quot;this is not&quot;)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1364332520, "answer_id": 15647557, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1364332520, "body_markdown": "https://raw.github.com/fabric/fabric/master/fabric/colors.py\r\n\r\n    &quot;&quot;&quot;\r\n    .. versionadded:: 0.9.2\r\n    \r\n    Functions for wrapping strings in ANSI color codes.\r\n    \r\n    Each function within this module returns the input string ``text``, wrapped\r\n    with ANSI color codes for the appropriate color.\r\n    \r\n    For example, to print some text as green on supporting terminals::\r\n    \r\n        from fabric.colors import green\r\n    \r\n        print(green(&quot;This text is green!&quot;))\r\n    \r\n    Because these functions simply return modified strings, you can nest them::\r\n    \r\n        from fabric.colors import red, green\r\n    \r\n        print(red(&quot;This sentence is red, except for &quot; + \\\r\n              green(&quot;these words, which are green&quot;) + &quot;.&quot;))\r\n    \r\n    If ``bold`` is set to ``True``, the ANSI flag for bolding will be flipped on\r\n    for that particular invocation, which usually shows up as a bold or brighter\r\n    version of the original color on most terminals.\r\n    &quot;&quot;&quot;\r\n    \r\n    \r\n    def _wrap_with(code):\r\n    \r\n        def inner(text, bold=False):\r\n            c = code\r\n            if bold:\r\n                c = &quot;1;%s&quot; % c\r\n            return &quot;\\033[%sm%s\\033[0m&quot; % (c, text)\r\n        return inner\r\n    \r\n    red = _wrap_with(&#39;31&#39;)\r\n    green = _wrap_with(&#39;32&#39;)\r\n    yellow = _wrap_with(&#39;33&#39;)\r\n    blue = _wrap_with(&#39;34&#39;)\r\n    magenta = _wrap_with(&#39;35&#39;)\r\n    cyan = _wrap_with(&#39;36&#39;)\r\n    white = _wrap_with(&#39;37&#39;)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1371037081, "answer_id": 17064509, "path": "stack.django.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1371037081, "body_markdown": "I have wrapped @joeld answer into a module with global functions that I can use anywhere in my code.\r\n\r\nfile: log.py     \r\n\r\n    HEADER = &#39;\\033[95m&#39;\r\n    OKBLUE = &#39;\\033[94m&#39;\r\n    OKGREEN = &#39;\\033[92m&#39;\r\n    WARNING = &#39;\\033[93m&#39;\r\n    FAIL = &#39;\\033[91m&#39;\r\n    ENDC = &#39;\\033[0m&#39;\r\n    BOLD = &quot;\\033[1m&quot;\r\n    \r\n    def disable():\r\n        HEADER = &#39;&#39;\r\n        OKBLUE = &#39;&#39;\r\n        OKGREEN = &#39;&#39;\r\n        WARNING = &#39;&#39;\r\n        FAIL = &#39;&#39;\r\n        ENDC = &#39;&#39;\r\n    \r\n    def infog( msg):\r\n        print OKGREEN + msg + ENDC\r\n    \r\n    def info( msg):\r\n        print OKBLUE + msg + ENDC\r\n    \r\n    def warn( msg):\r\n        print WARNING + msg + ENDC\r\n    \r\n    def err( msg):\r\n        print FAIL + msg + ENDC\r\n\r\nuse as follows:\r\n\r\n     import log\r\n        log.info(&quot;Hello World&quot;)\r\n        log.err(&quot;System Error&quot;)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1379075090, "answer_id": 18786263, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1418915031, "last_edit_date": 1418915031, "body_markdown": "I use the colorama module for coloured terminal printing in Python. A link is here http://pypi.python.org/pypi/colorama\r\n\r\nSome example code of printing red and green text:\r\n\r\n    from colorama import *\r\n    \r\n    print(Fore.GREEN + &#39;Green text&#39;)\r\n    print(Fore.RED + &#39;Red text&#39;)\r\n\r\nI used colorama to write a basic Matrix program\r\n\r\nInstallation on Ubuntu (your distribution install command may be different)\r\n\r\n    sudo apt-get install python-pip\r\n    sudo pip install colorama"}, {"tags": [], "down_vote_count": 1, "creation_date": 1379700372, "answer_id": 18923126, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1386487057, "last_edit_date": 1386487057, "body_markdown": "My two cents ([PyColorTerm][1]):\r\n\r\nInstallation:\r\n\r\n    sudo apt-get install python-pip\r\n    pip install pycolorterm\r\n\r\nPython script:\r\n\r\n    from pycolorterm import pycolorterm\r\n\r\n    with pycolorterm.pretty_output(pycolorterm.FG_GREEN) as out:\r\n        out.write(&#39;Works OK!&#39;)\r\n\r\n&quot;works OK!&quot; shows in green.\r\n\r\n  [1]: https://github.com/dnmellen/pycolorterm"}, {"tags": [], "down_vote_count": 1, "creation_date": 1392400598, "answer_id": 21786287, "path": "stack.django.answer", "score": 242, "up_vote_count": 243, "is_accepted": false, "last_activity_date": 1473702234, "last_edit_date": 1473702234, "body_markdown": "Print a string that starts a color/style, then the string, then end the color/style change with `&#39;\\x1b[0m&#39;`:\r\n\r\n    print(&#39;\\x1b[6;30;42m&#39; + &#39;Success!&#39; + &#39;\\x1b[0m&#39;)\r\n\r\n[![Success with green background example][1]][1]\r\n\r\nGet a table of format options for shell text with following code:\r\n\r\n    def print_format_table():\r\n        &quot;&quot;&quot;\r\n        prints table of formatted text format options\r\n        &quot;&quot;&quot;\r\n        for style in range(8):\r\n            for fg in range(30,38):\r\n                s1 = &#39;&#39;\r\n                for bg in range(40,48):\r\n                    format = &#39;;&#39;.join([str(style), str(fg), str(bg)])\r\n                    s1 += &#39;\\x1b[%sm %s \\x1b[0m&#39; % (format, format)\r\n                print(s1)\r\n            print(&#39;\\n&#39;)\r\n \r\n    print_format_table()\r\n\r\n#Light-on-dark example (complete)\r\n\r\n[![enter image description here][2]][2]\r\n\r\n#Dark-on-light example (partial)\r\n\r\n![top part of output][3]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/RN3MN.png\r\n  [2]: http://i.stack.imgur.com/6otvY.png\r\n  [3]: http://i.stack.imgur.com/lZr23.png"}, {"tags": [], "down_vote_count": 1, "creation_date": 1413674765, "answer_id": 26445590, "path": "stack.django.answer", "score": 37, "up_vote_count": 38, "is_accepted": false, "last_activity_date": 1494542035, "last_edit_date": 1494542035, "body_markdown": "generated a class with all the colors using a for loop to iterate every combination of color up to 100, then wrote a class with python colors. Copy and paste as you will, GPLv2 by me:\r\n\r\n    class colors:\r\n        &#39;&#39;&#39;Colors class:\r\n        reset all colors with colors.reset\r\n        two subclasses fg for foreground and bg for background.\r\n        use as colors.subclass.colorname.\r\n        i.e. colors.fg.red or colors.bg.green\r\n        also, the generic bold, disable, underline, reverse, strikethrough,\r\n        and invisible work with the main class\r\n        i.e. colors.bold\r\n        &#39;&#39;&#39;\r\n        reset=&#39;\\033[0m&#39;\r\n        bold=&#39;\\033[01m&#39;\r\n        disable=&#39;\\033[02m&#39;\r\n        underline=&#39;\\033[04m&#39;\r\n        reverse=&#39;\\033[07m&#39;\r\n        strikethrough=&#39;\\033[09m&#39;\r\n        invisible=&#39;\\033[08m&#39;\r\n        class fg:\r\n            black=&#39;\\033[30m&#39;\r\n            red=&#39;\\033[31m&#39;\r\n            green=&#39;\\033[32m&#39;\r\n            orange=&#39;\\033[33m&#39;\r\n            blue=&#39;\\033[34m&#39;\r\n            purple=&#39;\\033[35m&#39;\r\n            cyan=&#39;\\033[36m&#39;\r\n            lightgrey=&#39;\\033[37m&#39;\r\n            darkgrey=&#39;\\033[90m&#39;\r\n            lightred=&#39;\\033[91m&#39;\r\n            lightgreen=&#39;\\033[92m&#39;\r\n            yellow=&#39;\\033[93m&#39;\r\n            lightblue=&#39;\\033[94m&#39;\r\n            pink=&#39;\\033[95m&#39;\r\n            lightcyan=&#39;\\033[96m&#39;\r\n        class bg:\r\n            black=&#39;\\033[40m&#39;\r\n            red=&#39;\\033[41m&#39;\r\n            green=&#39;\\033[42m&#39;\r\n            orange=&#39;\\033[43m&#39;\r\n            blue=&#39;\\033[44m&#39;\r\n            purple=&#39;\\033[45m&#39;\r\n            cyan=&#39;\\033[46m&#39;\r\n            lightgrey=&#39;\\033[47m&#39;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1414892674, "answer_id": 26695185, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1414892674, "body_markdown": "I wrote a module that handles colors in Linux/OSX/Windows. It supports all 16 colors on all platforms, you can set foreground and background colors at different times, and the string objects give sane results for things like len() and .capitalize().\r\n\r\nhttps://github.com/Robpol86/colorclass\r\n\r\n![example on Windows cmd.exe][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/j7EjM.png"}, {"tags": [], "down_vote_count": 3, "creation_date": 1417455307, "answer_id": 27233961, "path": "stack.django.answer", "score": 0, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1505987971, "last_edit_date": 1505987971, "body_markdown": "You can use shell escape characters, that are available from any language.\r\nThese escape characters start with the ESC character followed by a number of arguments.\r\n\r\nFor example to output a red `Hello world` string in your terminal:\r\n\r\n    echo &quot;\\e[31m Hello world \\e[0m&quot;\r\n\r\nOr from a python script:\r\n\r\n    print(&quot;\\e[31m Hello world \\e[0m&quot;)\r\n\r\nAlso, I wrote an article about [Escape sequences](http://shiroyasha.github.io/escape-sequences-a-quick-guide.html) that can probably help you get a better grasp of this mechanism. I hope it will help you."}, {"tags": [], "down_vote_count": 1, "creation_date": 1422309024, "answer_id": 28159385, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1505987897, "last_edit_date": 1505987897, "body_markdown": "Use [pyfancy][0] it is a simple way to do color in the terminal!\r\n\r\nExample:\r\n\r\n    print(pyfancy.RED + &quot;Hello Red&quot; + pyfancy.END)\r\n\r\n[0]: https://github.com/ilovecode1/pyfancy"}, {"tags": [], "down_vote_count": 0, "creation_date": 1423349029, "answer_id": 28388343, "path": "stack.django.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1423349029, "last_edit_date": 1495541454, "body_markdown": "## YAY! another version\r\n\r\nwhile i find [this](https://stackoverflow.com/a/26445590/3191896) answer useful, i modified it a bit. this [Github Gist](https://gist.github.com/Jossef/0ee20314577925b4027f) is the result\r\n\r\n**usage**\r\n\r\n    print colors.draw(&quot;i&#39;m yellow&quot;, bold=True, fg_yellow=True)\r\n\r\n![enter image description here][1]\r\n\r\n\r\nin addition you can wrap common usages:\r\n\r\n    print colors.error(&#39;sorry, &#39;)\r\n\r\n\r\n![asd][2]\r\n\r\n\r\n### https://gist.github.com/Jossef/0ee20314577925b4027f\r\n\r\n  [1]: http://i.stack.imgur.com/q1mJ3.png\r\n  [2]: http://i.stack.imgur.com/uGgd7.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1429395515, "answer_id": 29723536, "path": "stack.django.answer", "score": 20, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1429395515, "body_markdown": "Stupidly simple based on @joeld&#39;s answer\r\n\r\n    class PrintInColor:\r\n        RED = &#39;\\033[91m&#39;\r\n        GREEN = &#39;\\033[92m&#39;\r\n        YELLOW = &#39;\\033[93m&#39;\r\n        LIGHT_PURPLE = &#39;\\033[94m&#39;\r\n        PURPLE = &#39;\\033[95m&#39;\r\n        END = &#39;\\033[0m&#39;\r\n\r\n        @classmethod\r\n        def red(cls, s, **kwargs):\r\n            print(cls.RED + s + cls.END, **kwargs)\r\n\r\n        @classmethod\r\n        def green(cls, s, **kwargs):\r\n            print(cls.GREEN + s + cls.END, **kwargs)\r\n\r\n        @classmethod\r\n        def yellow(cls, s, **kwargs):\r\n            print(cls.YELLOW + s + cls.END, **kwargs)\r\n\r\n        @classmethod\r\n        def lightPurple(cls, s, **kwargs):\r\n            print(cls.LIGHT_PURPLE + s + cls.END, **kwargs)\r\n\r\n        @classmethod\r\n        def purple(cls, s, **kwargs):\r\n            print(cls.PURPLE + s + cls.END, **kwargs)\r\n\r\nThen just\r\n\r\n    PrintInColor.red(&#39;hello&#39;, end=&#39; &#39;)\r\n    PrintInColor.green(&#39;world&#39;)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1429729232, "answer_id": 29806601, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1429731020, "last_edit_date": 1429731020, "body_markdown": "If you are using [Django](https://www.djangoproject.com/) \r\n\r\n    &gt;&gt;&gt; from django.utils.termcolors import colorize\r\n    &gt;&gt;&gt; print colorize(&quot;Hello World!&quot;, fg=&quot;blue&quot;, bg=&#39;red&#39;,\r\n    ...                 opts=(&#39;bold&#39;, &#39;blink&#39;, &#39;underscore&#39;,))\r\n    Hello World!\r\n    &gt;&gt;&gt; help(colorize)\r\nsnapshot:\r\n\r\n ![image][1]\r\n\r\n\r\n(I generally use colored output for debugging on runserver terminal so I added it.)\r\n\r\n&lt;sub&gt;\r\nYou can test if it is installed in your machine:  \r\n&lt;code&gt;&lt;sub&gt; $ python -c &quot;import django; print django.VERSION&quot;&lt;/sub&gt;&lt;/code&gt;  \r\nTo install it check: [How to install Django](https://docs.djangoproject.com/en/1.8/topics/install/)\r\n&lt;/sub&gt;\r\n\r\nGive it a Try!!\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/vq4Rs.png"}, {"tags": [], "down_vote_count": 1, "creation_date": 1433126178, "answer_id": 30564892, "path": "stack.django.answer", "score": 16, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1462288305, "last_edit_date": 1462288305, "body_markdown": "uses ANSI  \r\n\r\n    RED = &#39;\\033[91m&#39;\r\n    GREEN = &#39;\\033[92m&#39;\r\n    YELLOW = &#39;\\033[93m&#39;\r\n    LIGHT_PURPLE = &#39;\\033[94m&#39;\r\n    PURPLE = &#39;\\033[95m&#39;\r\n    END = &#39;\\033[0m&#39;\r\n\r\nMake your function :-\r\n\r\n    def red(name):\r\n        print (&quot;\\033[91m {}\\033[00m&quot; .format(name))\r\n\r\nCall function :- \r\n\r\n&gt;red(&quot;Good one&quot;)\r\nGood one  &lt;--  It will print in Red , \r\n\r\nNote :- not required any module \r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1436425088, "answer_id": 31310228, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1506075808, "last_edit_date": 1506075808, "body_markdown": "Yet another pypi module that wraps the python 3 print function:\r\n\r\n  https://pypi.python.org/pypi/colorprint\r\n\r\nIt&#39;s usable in python 2.x if you also `from __future__ import print`. Here is a python 2 example from the modules pypi page:\r\n\r\n    from __future__ import print_function\r\n    from colorprint import *\r\n    \r\n    print(&#39;Hello&#39;, &#39;world&#39;, color=&#39;blue&#39;, end=&#39;&#39;, sep=&#39;, &#39;)\r\n    print(&#39;!&#39;, color=&#39;red&#39;, format=[&#39;bold&#39;, &#39;blink&#39;])\r\n\r\nOutputs &quot;Hello, world!&quot; with the words in blue and the exclamation mark bold red and blinking."}, {"tags": [], "down_vote_count": 0, "creation_date": 1450902049, "answer_id": 34443116, "path": "stack.django.answer", "score": 32, "up_vote_count": 32, "is_accepted": false, "last_activity_date": 1450902049, "body_markdown": "Try this simple code \r\n\r\n    def prRed(prt): print(&quot;\\033[91m {}\\033[00m&quot; .format(prt))\r\n    def prGreen(prt): print(&quot;\\033[92m {}\\033[00m&quot; .format(prt))\r\n    def prYellow(prt): print(&quot;\\033[93m {}\\033[00m&quot; .format(prt))\r\n    def prLightPurple(prt): print(&quot;\\033[94m {}\\033[00m&quot; .format(prt))\r\n    def prPurple(prt): print(&quot;\\033[95m {}\\033[00m&quot; .format(prt))\r\n    def prCyan(prt): print(&quot;\\033[96m {}\\033[00m&quot; .format(prt))\r\n    def prLightGray(prt): print(&quot;\\033[97m {}\\033[00m&quot; .format(prt))\r\n    def prBlack(prt): print(&quot;\\033[98m {}\\033[00m&quot; .format(prt))\r\n\r\n    prGreen(&quot;Hello world&quot;)"}, {"tags": [], "down_vote_count": 1, "creation_date": 1462453705, "answer_id": 37051472, "path": "stack.django.answer", "score": 7, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1462453705, "body_markdown": "[asciimatics](http://asciimatics.readthedocs.io/en/stable/intro.html) provides a portable support for building text UI and animations:\r\n\r\n    #!/usr/bin/env python\r\n    from asciimatics.effects import RandomNoise  # $ pip install asciimatics\r\n    from asciimatics.renderers import SpeechBubble, Rainbow\r\n    from asciimatics.scene import Scene\r\n    from asciimatics.screen import Screen\r\n    from asciimatics.exceptions import ResizeScreenError\r\n    \r\n    \r\n    def demo(screen):\r\n        render = Rainbow(screen, SpeechBubble(&#39;Rainbow&#39;))\r\n        effects = [RandomNoise(screen, signal=render)]\r\n        screen.play([Scene(effects, -1)], stop_on_resize=True)\r\n    \r\n    while True:\r\n        try:\r\n            Screen.wrapper(demo)\r\n            break\r\n        except ResizeScreenError:\r\n            pass\r\n\r\nAsciicast:\r\n\r\n[![rainbow-colored text among ascii noise][1]][2]\r\n\r\n\r\n  [1]: https://asciinema.org/a/06sabwtc1bw5wfiq23a71ccxq.png\r\n  [2]: https://asciinema.org/a/06sabwtc1bw5wfiq23a71ccxq?autoplay=1"}, {"tags": [], "down_vote_count": 0, "creation_date": 1471464116, "answer_id": 39005305, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1471464116, "body_markdown": "I ended up doing this, I felt it was cleanest: \r\n\r\n    formatters = {             \r\n        &#39;RED&#39;: &#39;\\033[91m&#39;,     \r\n        &#39;GREEN&#39;: &#39;\\033[92m&#39;,   \r\n        &#39;END&#39;: &#39;\\033[0m&#39;,      \r\n    }\r\n    \r\n    print &#39;Master is currently {RED}red{END}!&#39;.format(**formatters)\r\n    print &#39;Help make master {GREEN}green{END} again!&#39;.format(**formatters)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1473688832, "answer_id": 39452138, "path": "stack.django.answer", "score": 34, "up_vote_count": 34, "is_accepted": false, "last_activity_date": 1473688832, "body_markdown": "Define a string that starts a color and a string that ends the color, then print your text with the start string at the front and the end string at the end.\r\n\r\n&lt;!-- language: python3 --&gt;\r\n\r\n    CRED = &#39;\\033[91m&#39;\r\n    CEND = &#39;\\033[0m&#39;\r\n    print(CRED + &quot;Error, does not compute!&quot; + CEND)\r\n\r\nThis produces the following in `bash`, in `urxvt` with a Zenburn-style color scheme:\r\n\r\n[![output colors][1]][1]\r\n\r\nThrough experemintation, we can get more colors:\r\n\r\n[![color matrix][2]][2]\r\n\r\nNote: `\\33[5m` and `\\33[6m` are blinking.\r\n\r\nThis way we can create a full color collection:\r\n\r\n    CEND      = &#39;\\33[0m&#39;\r\n    CBOLD     = &#39;\\33[1m&#39;\r\n    CITALIC   = &#39;\\33[3m&#39;\r\n    CURL      = &#39;\\33[4m&#39;\r\n    CBLINK    = &#39;\\33[5m&#39;\r\n    CBLINK2   = &#39;\\33[6m&#39;\r\n    CSELECTED = &#39;\\33[7m&#39;\r\n\r\n    CBLACK  = &#39;\\33[30m&#39;\r\n    CRED    = &#39;\\33[31m&#39;\r\n    CGREEN  = &#39;\\33[32m&#39;\r\n    CYELLOW = &#39;\\33[33m&#39;\r\n    CBLUE   = &#39;\\33[34m&#39;\r\n    CVIOLET = &#39;\\33[35m&#39;\r\n    CBEIGE  = &#39;\\33[36m&#39;\r\n    CWHITE  = &#39;\\33[37m&#39;\r\n\r\n    CBLACKBG  = &#39;\\33[40m&#39;\r\n    CREDBG    = &#39;\\33[41m&#39;\r\n    CGREENBG  = &#39;\\33[42m&#39;\r\n    CYELLOWBG = &#39;\\33[43m&#39;\r\n    CBLUEBG   = &#39;\\33[44m&#39;\r\n    CVIOLETBG = &#39;\\33[45m&#39;\r\n    CBEIGEBG  = &#39;\\33[46m&#39;\r\n    CWHITEBG  = &#39;\\33[47m&#39;\r\n\r\n    CGREY    = &#39;\\33[90m&#39;\r\n    CRED2    = &#39;\\33[91m&#39;\r\n    CGREEN2  = &#39;\\33[92m&#39;\r\n    CYELLOW2 = &#39;\\33[93m&#39;\r\n    CBLUE2   = &#39;\\33[94m&#39;\r\n    CVIOLET2 = &#39;\\33[95m&#39;\r\n    CBEIGE2  = &#39;\\33[96m&#39;\r\n    CWHITE2  = &#39;\\33[97m&#39;\r\n\r\n    CGREYBG    = &#39;\\33[100m&#39;\r\n    CREDBG2    = &#39;\\33[101m&#39;\r\n    CGREENBG2  = &#39;\\33[102m&#39;\r\n    CYELLOWBG2 = &#39;\\33[103m&#39;\r\n    CBLUEBG2   = &#39;\\33[104m&#39;\r\n    CVIOLETBG2 = &#39;\\33[105m&#39;\r\n    CBEIGEBG2  = &#39;\\33[106m&#39;\r\n    CWHITEBG2  = &#39;\\33[107m&#39;\r\n\r\nHere is the code to generate the test:\r\n\r\n&lt;!-- language: python3 --&gt;\r\n\r\n    for i in range(24):\r\n      colors = &quot;&quot;\r\n      for j in range(5):\r\n        colors = colors + &quot;\\33[&quot;+str(x+j)+&quot;m\\\\33[&quot;+str(x+j)+&quot;m\\033[0m &quot;\r\n      print(colors)\r\n      x=x+\r\n\r\n  [1]: http://i.stack.imgur.com/Iu3I1.png\r\n  [2]: http://i.stack.imgur.com/j7e4i.gif"}, {"tags": [], "down_vote_count": 0, "creation_date": 1488362975, "answer_id": 42528796, "path": "stack.django.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1499910699, "last_edit_date": 1499910699, "body_markdown": "Building on @joeld answer, using https://pypi.python.org/pypi/lazyme  `pip install -U lazyme` :\r\n\r\n\r\n    from lazyme.string import color_print\r\n    &gt;&gt;&gt; color_print(&#39;abc&#39;)\r\n    abc\r\n    &gt;&gt;&gt; color_print(&#39;abc&#39;, color=&#39;pink&#39;)\r\n    abc\r\n    &gt;&gt;&gt; color_print(&#39;abc&#39;, color=&#39;red&#39;)\r\n    abc\r\n    &gt;&gt;&gt; color_print(&#39;abc&#39;, color=&#39;yellow&#39;)\r\n    abc\r\n    &gt;&gt;&gt; color_print(&#39;abc&#39;, color=&#39;green&#39;)\r\n    abc\r\n    &gt;&gt;&gt; color_print(&#39;abc&#39;, color=&#39;blue&#39;, underline=True)\r\n    abc\r\n    &gt;&gt;&gt; color_print(&#39;abc&#39;, color=&#39;blue&#39;, underline=True, bold=True)\r\n    abc\r\n    &gt;&gt;&gt; color_print(&#39;abc&#39;, color=&#39;pink&#39;, underline=True, bold=True)\r\n    abc\r\n\r\nScreenshot:\r\n\r\n[![enter image description here][1]][1]\r\n\r\n----\r\n\r\nSome updates to the `color_print` with new formatters, e.g.:\r\n\r\n    &gt;&gt;&gt; from lazyme.string import palette, highlighter, formatter\r\n    &gt;&gt;&gt; from lazyme.string import color_print\r\n    &gt;&gt;&gt; palette.keys() # Available colors.\r\n    [&#39;pink&#39;, &#39;yellow&#39;, &#39;cyan&#39;, &#39;magenta&#39;, &#39;blue&#39;, &#39;gray&#39;, &#39;default&#39;, &#39;black&#39;, &#39;green&#39;, &#39;white&#39;, &#39;red&#39;]\r\n    &gt;&gt;&gt; highlighter.keys() # Available highlights.\r\n    [&#39;blue&#39;, &#39;pink&#39;, &#39;gray&#39;, &#39;black&#39;, &#39;yellow&#39;, &#39;cyan&#39;, &#39;green&#39;, &#39;magenta&#39;, &#39;white&#39;, &#39;red&#39;]\r\n    &gt;&gt;&gt; formatter.keys() # Available formatter, \r\n    [&#39;hide&#39;, &#39;bold&#39;, &#39;italic&#39;, &#39;default&#39;, &#39;fast_blinking&#39;, &#39;faint&#39;, &#39;strikethrough&#39;, &#39;underline&#39;, &#39;blinking&#39;, &#39;reverse&#39;]\r\n\r\nNote: `italic`, `fast blinking` and `strikethrough` may not work on all terminals, doesn&#39;t work on Mac / Ubuntu. \r\n\r\n\r\nE.g. \r\n\r\n    &gt;&gt;&gt; color_print(&#39;foo bar&#39;, color=&#39;pink&#39;, highlight=&#39;white&#39;)\r\n    foo bar\r\n    &gt;&gt;&gt; color_print(&#39;foo bar&#39;, color=&#39;pink&#39;, highlight=&#39;white&#39;, reverse=True)\r\n    foo bar\r\n    &gt;&gt;&gt; color_print(&#39;foo bar&#39;, color=&#39;pink&#39;, highlight=&#39;white&#39;, bold=True)\r\n    foo bar\r\n    &gt;&gt;&gt; color_print(&#39;foo bar&#39;, color=&#39;pink&#39;, highlight=&#39;white&#39;, faint=True)\r\n    foo bar\r\n    &gt;&gt;&gt; color_print(&#39;foo bar&#39;, color=&#39;pink&#39;, highlight=&#39;white&#39;, faint=True, reverse=True)\r\n    foo bar\r\n    &gt;&gt;&gt; color_print(&#39;foo bar&#39;, color=&#39;pink&#39;, highlight=&#39;white&#39;, underline=True, reverse=True)\r\n    foo bar\r\n\r\nScreenshot:\r\n\r\n[![enter image description here][2]][2]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/9NgeB.png\r\n  [2]: https://i.stack.imgur.com/HGNPc.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1518282281, "answer_id": 48723332, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1518450188, "last_edit_date": 1518450188, "body_markdown": "[sty](https://github.com/feluxe/sty) is similar to colorama, but it&#39;s less verbose, supports [8bit](https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit) and [24bit](https://en.wikipedia.org/wiki/ANSI_escape_code#24-bit) (rgb) colors, allows you to register your own colors, is really flexible and well documented. If you don&#39;t care about compatibility with terminal emulators that are stuck in the 90th and like to use new features, you might want to give it a try.\r\n\r\n&lt;!-- language: python --&gt;\r\n\r\n    from sty import fg, bg, ef, rs\r\n\r\n    foo = fg.red + &#39;This is red text!&#39; + fg.rs\r\n    bar = bg.blue + &#39;This has a blue background!&#39; + bg.rs\r\n    baz = ef.italic + &#39;This is italic text&#39; + rs.italic\r\n    qux = fg(201) + &#39;This is pink text using 8bit colors&#39; + fg.rs\r\n    qui = fg(255, 10, 10) + &#39;This is red text using 24bit colors.&#39; + fg.rs\r\n    \r\n    # Add new colors:\r\n\r\n    fg.orange = (&#39;rgb&#39;, (255, 150, 50))\r\n\r\n    buf = fg.orange + &#39;Yay, Im orange.&#39; + fg.rs\r\n\r\n\r\n    print(foo, bar, baz, qux, qui, buf, sep=&#39;\\n&#39;)\r\n\r\nprints:\r\n\r\n[![enter image description here][1]][1]\r\n\r\n**Demo:**\r\n[![enter image description here][2]][2]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/4BIdi.png\r\n  [2]: https://i.stack.imgur.com/S8wtO.png"}], "title": "Print in terminal with colors?", "view_count": 685035, "answer_count": 36, "code_snippet": ["<code>\u2588</code>", "<code>http://stackoverflow.com/questions/8465226/using-extended-ascii-codes-with-python</code>", "<code>class bcolors:\n    HEADER = '\\033[95m'\n    OKBLUE = '\\033[94m'\n    OKGREEN = '\\033[92m'\n    WARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    ENDC = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'\n</code>", "<code>print bcolors.WARNING + \"Warning: No active frommets remain. Continue?\" \n      + bcolors.ENDC\n</code>", "<code>disabled</code>", "<code>bcolors</code>", "<code>bcolors</code>", "<code>disable</code>", "<code>BOLD = \"\\033[1m\"</code>", "<code>tput</code>", "<code>disable</code>", "<code>cat</code>", "<code>from termcolor import colored\n\nprint colored('hello', 'red'), colored('world', 'green')\n</code>", "<code>&lt;b&gt;bold&lt;/b&gt;</code>", "<code>'\\x1b[0m'</code>", "<code>print('\\x1b[6;30;42m' + 'Success!' + '\\x1b[0m')\n</code>", "<code>def print_format_table():\n    \"\"\"\n    prints table of formatted text format options\n    \"\"\"\n    for style in range(8):\n        for fg in range(30,38):\n            s1 = ''\n            for bg in range(40,48):\n                format = ';'.join([str(style), str(fg), str(bg)])\n                s1 += '\\x1b[%sm %s \\x1b[0m' % (format, format)\n            print(s1)\n        print('\\n')\n\nprint_format_table()\n</code>", "<code>CSI=\"\\x1B[\"\nprint CSI+\"31;40m\" + \"Colored Text\" + CSI + \"0m\"\n</code>", "<code>print u\"\\u2588\"\n</code>", "<code>print CSI+\"31;40m\" + u\"\\u2588\" + CSI + \"0m\"\n</code>", "<code>def d(*v): return '\\x1B['+';'.join(map(str, v))+'m'</code>", "<code>print ' '.join([d(k,i)+str(i%10)+d(0) for i in range(30,38)+range(40,48) for k in range(2)])</code>", "<code>from blessings import Terminal\n\nt = Terminal()\nprint t.red('This is red.')\nprint t.bold_bright_red_on_black('Bright red on black')\n</code>", "<code>print t.on_green(' ')\n</code>", "<code>with t.location(0, 5):\n    print t.on_yellow(' ')\n</code>", "<code>print '{t.clear_eol}You just cleared a {t.bold}whole{t.normal} line!'.format(t=t)\n</code>", "<code>getattr</code>", "<code>class colors:\n    '''Colors class:\n    reset all colors with colors.reset\n    two subclasses fg for foreground and bg for background.\n    use as colors.subclass.colorname.\n    i.e. colors.fg.red or colors.bg.green\n    also, the generic bold, disable, underline, reverse, strikethrough,\n    and invisible work with the main class\n    i.e. colors.bold\n    '''\n    reset='\\033[0m'\n    bold='\\033[01m'\n    disable='\\033[02m'\n    underline='\\033[04m'\n    reverse='\\033[07m'\n    strikethrough='\\033[09m'\n    invisible='\\033[08m'\n    class fg:\n        black='\\033[30m'\n        red='\\033[31m'\n        green='\\033[32m'\n        orange='\\033[33m'\n        blue='\\033[34m'\n        purple='\\033[35m'\n        cyan='\\033[36m'\n        lightgrey='\\033[37m'\n        darkgrey='\\033[90m'\n        lightred='\\033[91m'\n        lightgreen='\\033[92m'\n        yellow='\\033[93m'\n        lightblue='\\033[94m'\n        pink='\\033[95m'\n        lightcyan='\\033[96m'\n    class bg:\n        black='\\033[40m'\n        red='\\033[41m'\n        green='\\033[42m'\n        orange='\\033[43m'\n        blue='\\033[44m'\n        purple='\\033[45m'\n        cyan='\\033[46m'\n        lightgrey='\\033[47m'\n</code>", "<code>CRED = '\\033[91m'\nCEND = '\\033[0m'\nprint(CRED + \"Error, does not compute!\" + CEND)\n</code>", "<code>bash</code>", "<code>urxvt</code>", "<code>\\33[5m</code>", "<code>\\33[6m</code>", "<code>CEND      = '\\33[0m'\nCBOLD     = '\\33[1m'\nCITALIC   = '\\33[3m'\nCURL      = '\\33[4m'\nCBLINK    = '\\33[5m'\nCBLINK2   = '\\33[6m'\nCSELECTED = '\\33[7m'\n\nCBLACK  = '\\33[30m'\nCRED    = '\\33[31m'\nCGREEN  = '\\33[32m'\nCYELLOW = '\\33[33m'\nCBLUE   = '\\33[34m'\nCVIOLET = '\\33[35m'\nCBEIGE  = '\\33[36m'\nCWHITE  = '\\33[37m'\n\nCBLACKBG  = '\\33[40m'\nCREDBG    = '\\33[41m'\nCGREENBG  = '\\33[42m'\nCYELLOWBG = '\\33[43m'\nCBLUEBG   = '\\33[44m'\nCVIOLETBG = '\\33[45m'\nCBEIGEBG  = '\\33[46m'\nCWHITEBG  = '\\33[47m'\n\nCGREY    = '\\33[90m'\nCRED2    = '\\33[91m'\nCGREEN2  = '\\33[92m'\nCYELLOW2 = '\\33[93m'\nCBLUE2   = '\\33[94m'\nCVIOLET2 = '\\33[95m'\nCBEIGE2  = '\\33[96m'\nCWHITE2  = '\\33[97m'\n\nCGREYBG    = '\\33[100m'\nCREDBG2    = '\\33[101m'\nCGREENBG2  = '\\33[102m'\nCYELLOWBG2 = '\\33[103m'\nCBLUEBG2   = '\\33[104m'\nCVIOLETBG2 = '\\33[105m'\nCBEIGEBG2  = '\\33[106m'\nCWHITEBG2  = '\\33[107m'\n</code>", "<code>for i in range(24):\n  colors = \"\"\n  for j in range(5):\n    colors = colors + \"\\33[\"+str(x+j)+\"m\\\\33[\"+str(x+j)+\"m\\033[0m \"\n  print(colors)\n  x=x+\n</code>", "<code>\\33[0m</code>", "<code>CEND</code>", "<code>def prRed(prt): print(\"\\033[91m {}\\033[00m\" .format(prt))\ndef prGreen(prt): print(\"\\033[92m {}\\033[00m\" .format(prt))\ndef prYellow(prt): print(\"\\033[93m {}\\033[00m\" .format(prt))\ndef prLightPurple(prt): print(\"\\033[94m {}\\033[00m\" .format(prt))\ndef prPurple(prt): print(\"\\033[95m {}\\033[00m\" .format(prt))\ndef prCyan(prt): print(\"\\033[96m {}\\033[00m\" .format(prt))\ndef prLightGray(prt): print(\"\\033[97m {}\\033[00m\" .format(prt))\ndef prBlack(prt): print(\"\\033[98m {}\\033[00m\" .format(prt))\n\nprGreen(\"Hello world\")\n</code>", "<code>import ctypes\n\n# Constants from the Windows API\nSTD_OUTPUT_HANDLE = -11\nFOREGROUND_RED    = 0x0004 # text color contains red.\n\ndef get_csbi_attributes(handle):\n    # Based on IPython's winconsole.py, written by Alexander Belchenko\n    import struct\n    csbi = ctypes.create_string_buffer(22)\n    res = ctypes.windll.kernel32.GetConsoleScreenBufferInfo(handle, csbi)\n    assert res\n\n    (bufx, bufy, curx, cury, wattr,\n    left, top, right, bottom, maxx, maxy) = struct.unpack(\"hhhhHhhhhhh\", csbi.raw)\n    return wattr\n\n\nhandle = ctypes.windll.kernel32.GetStdHandle(STD_OUTPUT_HANDLE)\nreset = get_csbi_attributes(handle)\n\nctypes.windll.kernel32.SetConsoleTextAttribute(handle, FOREGROUND_RED)\nprint \"Cherry on top\"\nctypes.windll.kernel32.SetConsoleTextAttribute(handle, reset)\n</code>", "<code>class PrintInColor:\n    RED = '\\033[91m'\n    GREEN = '\\033[92m'\n    YELLOW = '\\033[93m'\n    LIGHT_PURPLE = '\\033[94m'\n    PURPLE = '\\033[95m'\n    END = '\\033[0m'\n\n    @classmethod\n    def red(cls, s, **kwargs):\n        print(cls.RED + s + cls.END, **kwargs)\n\n    @classmethod\n    def green(cls, s, **kwargs):\n        print(cls.GREEN + s + cls.END, **kwargs)\n\n    @classmethod\n    def yellow(cls, s, **kwargs):\n        print(cls.YELLOW + s + cls.END, **kwargs)\n\n    @classmethod\n    def lightPurple(cls, s, **kwargs):\n        print(cls.LIGHT_PURPLE + s + cls.END, **kwargs)\n\n    @classmethod\n    def purple(cls, s, **kwargs):\n        print(cls.PURPLE + s + cls.END, **kwargs)\n</code>", "<code>PrintInColor.red('hello', end=' ')\nPrintInColor.green('world')\n</code>", "<code>HEADER = '\\033[95m'\nOKBLUE = '\\033[94m'\nOKGREEN = '\\033[92m'\nWARNING = '\\033[93m'\nFAIL = '\\033[91m'\nENDC = '\\033[0m'\nBOLD = \"\\033[1m\"\n\ndef disable():\n    HEADER = ''\n    OKBLUE = ''\n    OKGREEN = ''\n    WARNING = ''\n    FAIL = ''\n    ENDC = ''\n\ndef infog( msg):\n    print OKGREEN + msg + ENDC\n\ndef info( msg):\n    print OKBLUE + msg + ENDC\n\ndef warn( msg):\n    print WARNING + msg + ENDC\n\ndef err( msg):\n    print FAIL + msg + ENDC\n</code>", "<code> import log\n    log.info(\"Hello World\")\n    log.err(\"System Error\")\n</code>", "<code>from colorama import *\n\nprint(Fore.GREEN + 'Green text')\nprint(Fore.RED + 'Red text')\n</code>", "<code>sudo apt-get install python-pip\nsudo pip install colorama\n</code>", "<code>Style.RESET_ALL</code>", "<code>pip install -U lazyme</code>", "<code>from lazyme.string import color_print\n&gt;&gt;&gt; color_print('abc')\nabc\n&gt;&gt;&gt; color_print('abc', color='pink')\nabc\n&gt;&gt;&gt; color_print('abc', color='red')\nabc\n&gt;&gt;&gt; color_print('abc', color='yellow')\nabc\n&gt;&gt;&gt; color_print('abc', color='green')\nabc\n&gt;&gt;&gt; color_print('abc', color='blue', underline=True)\nabc\n&gt;&gt;&gt; color_print('abc', color='blue', underline=True, bold=True)\nabc\n&gt;&gt;&gt; color_print('abc', color='pink', underline=True, bold=True)\nabc\n</code>", "<code>color_print</code>", "<code>&gt;&gt;&gt; from lazyme.string import palette, highlighter, formatter\n&gt;&gt;&gt; from lazyme.string import color_print\n&gt;&gt;&gt; palette.keys() # Available colors.\n['pink', 'yellow', 'cyan', 'magenta', 'blue', 'gray', 'default', 'black', 'green', 'white', 'red']\n&gt;&gt;&gt; highlighter.keys() # Available highlights.\n['blue', 'pink', 'gray', 'black', 'yellow', 'cyan', 'green', 'magenta', 'white', 'red']\n&gt;&gt;&gt; formatter.keys() # Available formatter, \n['hide', 'bold', 'italic', 'default', 'fast_blinking', 'faint', 'strikethrough', 'underline', 'blinking', 'reverse']\n</code>", "<code>italic</code>", "<code>fast blinking</code>", "<code>strikethrough</code>", "<code>&gt;&gt;&gt; color_print('foo bar', color='pink', highlight='white')\nfoo bar\n&gt;&gt;&gt; color_print('foo bar', color='pink', highlight='white', reverse=True)\nfoo bar\n&gt;&gt;&gt; color_print('foo bar', color='pink', highlight='white', bold=True)\nfoo bar\n&gt;&gt;&gt; color_print('foo bar', color='pink', highlight='white', faint=True)\nfoo bar\n&gt;&gt;&gt; color_print('foo bar', color='pink', highlight='white', faint=True, reverse=True)\nfoo bar\n&gt;&gt;&gt; color_print('foo bar', color='pink', highlight='white', underline=True, reverse=True)\nfoo bar\n</code>", "<code>#\n</code>", "<code>RED = '\\033[91m'\nGREEN = '\\033[92m'\nYELLOW = '\\033[93m'\nLIGHT_PURPLE = '\\033[94m'\nPURPLE = '\\033[95m'\nEND = '\\033[0m'\n</code>", "<code>def red(name):\n    print (\"\\033[91m {}\\033[00m\" .format(name))\n</code>", "<code>with</code>", "<code>from colorama import Fore, Style\nimport sys\n\nclass Highlight:\n  def __init__(self, clazz, color):\n    self.color = color\n    self.clazz = clazz\n  def __enter__(self):\n    print(self.color, end=\"\")\n  def __exit__(self, type, value, traceback):\n    if self.clazz == Fore:\n      print(Fore.RESET, end=\"\")\n    else:\n      assert self.clazz == Style\n      print(Style.RESET_ALL, end=\"\")\n    sys.stdout.flush()\n\nwith Highlight(Fore, Fore.GREEN):\n  print(\"this is highlighted\")\nprint(\"this is not\")\n</code>", "<code>print(Style.BRIGHT + \"Header Test\")</code>", "<code>print (Style.DIM + word)</code>", "<code>contextlib</code>", "<code>@contextlib.contextmanager</code>", "<code>formatters = {             \n    'RED': '\\033[91m',     \n    'GREEN': '\\033[92m',   \n    'END': '\\033[0m',      \n}\n\nprint 'Master is currently {RED}red{END}!'.format(**formatters)\nprint 'Help make master {GREEN}green{END} again!'.format(**formatters)\n</code>", "<code>for i in range(255):\n    print i, chr(i)\n</code>", "<code>from clint.textui import colored\nprint colored.red('some warning message')\nprint colored.green('nicely done!')\n</code>", "<code>print \" \"+ \"\\033[01;41m\" + \" \" +\"\\033[01;46m\"  + \"  \" + \"\\033[01;42m\"\n</code>", "<code>from __future__ import print</code>", "<code>from __future__ import print_function\nfrom colorprint import *\n\nprint('Hello', 'world', color='blue', end='', sep=', ')\nprint('!', color='red', format=['bold', 'blink'])\n</code>", "<code>import curses\n\ndef main(stdscr):\n    stdscr.clear()\n    if curses.has_colors():\n        for i in xrange(1, curses.COLORS):\n            curses.init_pair(i, i, curses.COLOR_BLACK)\n            stdscr.addstr(\"COLOR %d! \" % i, curses.color_pair(i))\n            stdscr.addstr(\"BOLD! \", curses.color_pair(i) | curses.A_BOLD)\n            stdscr.addstr(\"STANDOUT! \", curses.color_pair(i) | curses.A_STANDOUT)\n            stdscr.addstr(\"UNDERLINE! \", curses.color_pair(i) | curses.A_UNDERLINE)\n            stdscr.addstr(\"BLINK! \", curses.color_pair(i) | curses.A_BLINK)\n            stdscr.addstr(\"DIM! \", curses.color_pair(i) | curses.A_DIM)\n            stdscr.addstr(\"REVERSE! \", curses.color_pair(i) | curses.A_REVERSE)\n    stdscr.refresh()\n    stdscr.getch()\n\nif __name__ == '__main__':\n    print \"init...\"\n    curses.wrapper(main)\n</code>", "<code>print colors.draw(\"i'm yellow\", bold=True, fg_yellow=True)\n</code>", "<code>print colors.error('sorry, ')\n</code>", "<code>\"\"\"\n.. versionadded:: 0.9.2\n\nFunctions for wrapping strings in ANSI color codes.\n\nEach function within this module returns the input string ``text``, wrapped\nwith ANSI color codes for the appropriate color.\n\nFor example, to print some text as green on supporting terminals::\n\n    from fabric.colors import green\n\n    print(green(\"This text is green!\"))\n\nBecause these functions simply return modified strings, you can nest them::\n\n    from fabric.colors import red, green\n\n    print(red(\"This sentence is red, except for \" + \\\n          green(\"these words, which are green\") + \".\"))\n\nIf ``bold`` is set to ``True``, the ANSI flag for bolding will be flipped on\nfor that particular invocation, which usually shows up as a bold or brighter\nversion of the original color on most terminals.\n\"\"\"\n\n\ndef _wrap_with(code):\n\n    def inner(text, bold=False):\n        c = code\n        if bold:\n            c = \"1;%s\" % c\n        return \"\\033[%sm%s\\033[0m\" % (c, text)\n    return inner\n\nred = _wrap_with('31')\ngreen = _wrap_with('32')\nyellow = _wrap_with('33')\nblue = _wrap_with('34')\nmagenta = _wrap_with('35')\ncyan = _wrap_with('36')\nwhite = _wrap_with('37')\n</code>", "<code># display text on a Windows console\n# Windows XP with Python27 or Python32\nfrom ctypes import windll\n# needed for Python2/Python3 diff\ntry:\n    input = raw_input\nexcept:\n    pass\nSTD_OUTPUT_HANDLE = -11\nstdout_handle = windll.kernel32.GetStdHandle(STD_OUTPUT_HANDLE)\n# look at the output and select the color you want\n# for instance hex E is yellow on black\n# hex 1E is yellow on blue\n# hex 2E is yellow on green and so on\nfor color in range(0, 75):\n     windll.kernel32.SetConsoleTextAttribute(stdout_handle, color)\n     print(\"%X --&gt; %s\" % (color, \"Have a fine day!\"))\n     input(\"Press Enter to go on ... \")\n</code>", "<code>&gt;&gt;&gt; from django.utils.termcolors import colorize\n&gt;&gt;&gt; print colorize(\"Hello World!\", fg=\"blue\", bg='red',\n...                 opts=('bold', 'blink', 'underscore',))\nHello World!\n&gt;&gt;&gt; help(colorize)\n</code>", "<code><sub> $ python -c \"import django; print django.VERSION\"</sub></code>", "<code>#!/usr/bin/env python\nfrom asciimatics.effects import RandomNoise  # $ pip install asciimatics\nfrom asciimatics.renderers import SpeechBubble, Rainbow\nfrom asciimatics.scene import Scene\nfrom asciimatics.screen import Screen\nfrom asciimatics.exceptions import ResizeScreenError\n\n\ndef demo(screen):\n    render = Rainbow(screen, SpeechBubble('Rainbow'))\n    effects = [RandomNoise(screen, signal=render)]\n    screen.play([Scene(effects, -1)], stop_on_resize=True)\n\nwhile True:\n    try:\n        Screen.wrapper(demo)\n        break\n    except ResizeScreenError:\n        pass\n</code>", "<code>from sty import fg, bg, ef, rs\n\nfoo = fg.red + 'This is red text!' + fg.rs\nbar = bg.blue + 'This has a blue background!' + bg.rs\nbaz = ef.italic + 'This is italic text' + rs.italic\nqux = fg(201) + 'This is pink text using 8bit colors' + fg.rs\nqui = fg(255, 10, 10) + 'This is red text using 24bit colors.' + fg.rs\n\n# Add new colors:\n\nfg.orange = ('rgb', (255, 150, 50))\n\nbuf = fg.orange + 'Yay, Im orange.' + fg.rs\n\n\nprint(foo, bar, baz, qux, qui, buf, sep='\\n')\n</code>"], "path": "stack.django"}, {"tags": ["python", "pycharm"], "creation_date": 1343665390, "body_markdown": "I am using PyCharm to work on a project.  The project is opened and configured with an interpreter, and can run successfully.  The remote interpreter paths are mapped properly.  This seems to be the correct configuration, but PyCharm is highlighting my valid code with &quot;unresolved reference&quot; errors, even for built-in Python functions.  Why don&#39;t these seem to be detected, even though the code runs?  Is there any way to get PyCharm to recognize these correctly?\r\n\r\n---\r\n\r\n*This specific instance of the problem is with a remote interpreter, but the problem appears on local interpreters as well.*", "last_edit_date": 1407824139, "up_vote_count": 195, "link": "https://stackoverflow.com/questions/11725519/pycharm-shows-unresolved-references-error-for-valid-code", "_childDocuments_": [{"tags": [], "down_vote_count": 3, "creation_date": 1343895128, "answer_id": 11773462, "path": "stack.django.answer", "score": 311, "up_vote_count": 314, "is_accepted": true, "last_activity_date": 1343895128, "body_markdown": "File | Invalidate Caches... and restarting PyCharm helps."}, {"tags": [], "down_vote_count": 1, "creation_date": 1384627834, "answer_id": 20022329, "path": "stack.django.answer", "score": 107, "up_vote_count": 108, "is_accepted": false, "last_activity_date": 1424352440, "last_edit_date": 1424352440, "body_markdown": "Dmitry&#39;s response didn&#39;t work for me. \r\n\r\nI got mine working by going to Project Interpreters, Selecting the &quot;Paths&quot; tab, and hitting the refresh button in that submenu. It auto-populated with something called &quot;python-skeletons&quot;.\r\n\r\n\r\n**edit**: screenshot using PyCharm 3.4.1 (it&#39;s quite well hidden)\r\n\r\n![enter image description here][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/YjxLX.jpg"}, {"tags": [], "down_vote_count": 0, "creation_date": 1395417101, "answer_id": 22563427, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1395417101, "body_markdown": "I find myself removing and re-adding the remote interpreter to fix this problem when Invalidating Caches or Refreshing Paths does not work.\r\n\r\nI use vagrant and every once and awhile if I add a new VM to my multi-vm setup, the forwarded port changes and this seems to confuse PyCharm when it tries to use the wrong port for SSH.  Changing the port doesn&#39;t seem to help the broken references."}, {"tags": [], "down_vote_count": 0, "creation_date": 1421219249, "answer_id": 27937500, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1421219249, "body_markdown": "Sorry to bump this question, however I have an important update to make.\r\n\r\nYou may also want to revert your project interpreter to to Python 2.7.6 if you&#39;re using any other version than that This worked for me on my Ubuntu installation of PyCharm 4.04 professional after none of the other recommendations solved my problem."}, {"tags": [], "down_vote_count": 1, "creation_date": 1424781469, "answer_id": 28696003, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1424781469, "body_markdown": "In my case it was the directories structure.\r\nMy project looks like this:\r\n\r\n    +---dir_A\r\n        +---dir_B\r\n            +app\r\n            |\r\n            \\-run.py\r\n\r\nSo right click on dir_b &gt; &quot;mark directory as&quot; &gt; &quot;project root&quot;\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1429156275, "answer_id": 29665019, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1429197516, "last_edit_date": 1429197516, "body_markdown": "If none of the other solutions work for you, try (backing up) and deleting your ~/.PyCharm40 folder, then reopening PyCharm. This will kill all your preferences as well.\r\n\r\nOn Mac you want to delete ~/Library/Caches/Pycharm40 and ~/Library/Preferences/PyCharm40.\r\n\r\nAnd on Windows: C:\\Users\\$USER\\.PyCharm40."}, {"tags": [], "down_vote_count": 0, "creation_date": 1431336476, "answer_id": 30163990, "path": "stack.django.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1431336476, "body_markdown": "Tested with PyCharm 4.0.6 (OSX 10.10.3)\r\nfollowing this steps:\r\n\r\n 1. Click PyCharm menu.\r\n 2. Select Project Interpreter.\r\n 3. Select Gear icon.\r\n 4. Select More button.\r\n 5. Select Project Interpreter you are in.\r\n 6. Select Directory Tree button.\r\n 7. Select Reload list of paths.\r\n\r\nProblem solved!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1451341546, "answer_id": 34501678, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1451341546, "body_markdown": "You might try closing Pycharm, deleting the `.idea` folder from your project, then starting Pycharm again and recreating the project.  This worked for me whereas invalidating cache did not.  "}, {"tags": [], "down_vote_count": 0, "creation_date": 1457540171, "answer_id": 35896895, "path": "stack.django.answer", "score": 34, "up_vote_count": 34, "is_accepted": false, "last_activity_date": 1516720475, "last_edit_date": 1516720475, "body_markdown": "There are many solutions to this, some more convenient than others, and they don&#39;t always work.\r\n\r\nHere&#39;s all you can try, going from &#39;quick&#39; to &#39;annoying&#39;:\r\n\r\n* Do `File` -&gt; `Invalidate Caches / Restart` and restart PyCharm.\r\n  * You could also do this after any of the below methods, just to be sure.\r\n* First, check which interpreter you&#39;re running: `Run` -&gt; `Edit Configurations` -&gt; `Configuration` -&gt; `Python Interpreter`.\r\n* Refresh the paths of your interpreter:\r\n  * `File` -&gt; `Settings`\r\n  * `Project: [name]` -&gt; `Project Interpreter` -&gt; &#39;Project Interpreter&#39;: Gear icon -&gt; `More...`\r\n  * Click the &#39;Show paths&#39; button (bottom one)\r\n  * Click the &#39;Refresh&#39; button (bottom one)\r\n* Remove the interpreter and add it again:\r\n  * `File` -&gt; `Settings`\r\n  * `Project: [name]` -&gt; `Project Interpreter` -&gt; &#39;Project Interpreter&#39;: Gear icon -&gt; `More...`\r\n  * Click the &#39;Remove&#39; button\r\n  * Click the &#39;Add&#39; button and re-add your interpeter\r\n* Delete your project preferences\r\n  * Delete your project&#39;s `.idea` folder\r\n  * Close and re-open PyCharm\r\n  * Open your project from scratch\r\n* Delete your PyCharm user preferences (but back them up first).\r\n  * `~/.PyCharm50` on Mac\r\n  * `%homepath%/.PyCharm50` on Windows\r\n* Switch to another interpreter, then back again to the one you want.\r\n* Switch to another interpreter, don&#39;t switch back."}, {"tags": [], "down_vote_count": 0, "creation_date": 1459506326, "answer_id": 36353915, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1459506757, "last_edit_date": 1459506757, "body_markdown": "I closed all the other projects and run my required project in isolation in Pycharm. I created a separate virtualenv from pycharm and added all the required modules in it by using pip. I added this virtual environment in project&#39;s interpreter. This solved my problem. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1460502619, "answer_id": 36585704, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1460502619, "body_markdown": "I finally got this working after none of the proposed solutions worked for me.  I was playing with a django rest framework project and was using a virtualenv I had setup with it.  I was able to get Pycharm fixed by marking the root folder as the sources root, but then django&#39;s server would throw resolve exceptions.  So one would work when the other wouldn&#39;t and vice versa.  \r\n\r\nUltimately I just had to mark the subfolder as the sources root in pycharm.  So my structure was like this\r\n\r\n    -playground\r\n         -env\r\n         -playground\r\n\r\nThat second playground folder is the one I had to mark as the sources root for everything to work as expected. That didn&#39;t present any issues for my scenario so it was a workable solution. \r\n\r\nJust thought I&#39;d share in case someone else can use it."}, {"tags": [], "down_vote_count": 0, "creation_date": 1463255259, "answer_id": 37231130, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1463255259, "body_markdown": "It could also be a python version issue. I had to pick the right one to make it work.\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/Z5bjt.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1476262968, "answer_id": 39994591, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1476262968, "body_markdown": "Geeze what a nightmare, my amalgamation of different StackOVerflow answers:\r\n\r\n1. Switch to local interpreter /usr/bin/pythonX.X and apply\r\n2. View paths like above answer\r\n3. Find skeletons path. Mine was (/home/tim/Desktop/pycharm-community-2016.2.3/helpers/python-skeletons)\r\n4. Switch back to virt interpreter and add the skeletons path manually if it didn&#39;t automatically show up."}, {"tags": [], "down_vote_count": 0, "creation_date": 1490186772, "answer_id": 42952046, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1490186772, "body_markdown": "None of the above solutions worked for me!   \r\nIf you are using virtual environment for your project make sure to apply the `python.exe` file that is inside your virtual environment directory as interpreter for the project `(Alt + Ctrl + Shift + S)` \r\nthis solved the issue for me."}, {"tags": [], "down_vote_count": 0, "creation_date": 1513862410, "answer_id": 47925900, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1513862410, "body_markdown": "In my case the inspection error shows up due to a very specific case of python code. \r\nA min function that contains two numpy functions and two list accesses makes my code inspection give this kind of errors. \r\n\r\nRemoving the &#39;d=0&#39; line in the following example gives an unresolved reference error as expected, but readding doesn&#39;t make the error go away for the code inspector. I can still execute the code without problems afterwards.\r\n\r\n    import numpy as np\r\n    def strange(S, T, U, V):\r\n        d = 0\r\n        print min(np.abs(S[d]), np.abs(T[d]), U[d], V[d])\r\n\r\nClearing caches and reloading list of paths doesn&#39;t work. Only altering the code with one of the following example patches does work:\r\n\r\n - Another ordering of the &#39;min&#39; parameters: schematically S U T V but not S T U V or T S U V\r\n - Using a method instead of the function: S[d].abs() instead of np.abs(S[d])\r\n - Using the built-in abs() function\r\n - Adding a number to a parameter of choice: U[d] + 0.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1519638849, "answer_id": 48985628, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1519638849, "body_markdown": "Are you using virtualenv?\r\n\r\nif so, you need to notify PyCharm for every change in the location of the the desired python.exe (merely ./activate is not enough for PyCharm)\r\n\r\nMake sure Pycharm points to the correct interpetor and packages:\r\nFile -&gt; Settings -&gt; Project -&gt; Project Interpreter. Click the gear and choose python.exe under virtualenv&#39;s Scripts folder\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/weN2m.png"}], "title": "PyCharm shows unresolved references error for valid code", "view_count": 95684, "answer_count": 16, "code_snippet": ["<code>Settings &gt; Project Settings &gt; Project Interpreter &gt; Project Interpreters (gear button &gt; more) &gt; --Select the interpreter-- &gt; Interpreter Paths (Directory Tree button on the right) &gt; Reload List of Paths (Blue refresh-like button)</code>", "<code>File</code>", "<code>Invalidate Caches / Restart</code>", "<code>Run</code>", "<code>Edit Configurations</code>", "<code>Configuration</code>", "<code>Python Interpreter</code>", "<code>File</code>", "<code>Settings</code>", "<code>Project: [name]</code>", "<code>Project Interpreter</code>", "<code>More...</code>", "<code>File</code>", "<code>Settings</code>", "<code>Project: [name]</code>", "<code>Project Interpreter</code>", "<code>More...</code>", "<code>.idea</code>", "<code>~/.PyCharm50</code>", "<code>%homepath%/.PyCharm50</code>", "<code>+---dir_A\n    +---dir_B\n        +app\n        |\n        \\-run.py\n</code>", "<code>Settings -&gt; \"Project Interpreters\"</code>", "<code>\"More...\"</code>", "<code>/usr/bin/python2.7</code>", "<code>\"Ok\"</code>", "<code>\"Apply\"</code>", "<code>\"Ok\"</code>", "<code>\"Apply\"</code>", "<code>FileNotFoundError</code>", "<code>.idea</code>", "<code>-playground\n     -env\n     -playground\n</code>", "<code>python.exe</code>", "<code>(Alt + Ctrl + Shift + S)</code>", "<code>import numpy as np\ndef strange(S, T, U, V):\n    d = 0\n    print min(np.abs(S[d]), np.abs(T[d]), U[d], V[d])\n</code>"], "path": "stack.django"}, {"tags": ["django", "file", "upload"], "creation_date": 1304435825, "body_markdown": "As a newbie to Django, I am having difficulty making an upload app in Django 1.3. I could not find any up-to-date example/snippets. May someone post a minimal but complete (Model, View, Template) example code to do so?", "last_edit_date": 1435349093, "up_vote_count": 562, "link": "https://stackoverflow.com/questions/5871730/need-a-minimal-django-file-upload-example", "_childDocuments_": [{"tags": [], "down_vote_count": 4, "creation_date": 1304436348, "answer_id": 5871851, "path": "stack.django.answer", "score": 57, "up_vote_count": 61, "is_accepted": false, "last_activity_date": 1304436348, "body_markdown": "Generally speaking when you are trying to &#39;just get a working example&#39; it is best to &#39;just start writing code&#39;. There is no code here to help you with, so it makes answering the question a lot more work for us.\r\n\r\nIf you want to grab a file, you need something like this in an html file somewhere:\r\n\r\n    &lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\r\n        &lt;input type=&quot;file&quot; name=&quot;myfile&quot; /&gt;\r\n        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Upload&quot; /&gt;\r\n    &lt;/form&gt;\r\n\r\nThat will give you the browse button, an upload button to start the action (submit the form) and note the enctype so Django knows to give you `request.FILES`\r\n\r\nIn a view somewhere you can access the file with\r\n\r\n    def myview(request):\r\n        request.FILES[&#39;myfile&#39;] # this is my file\r\n\r\nThere is a huge amount of information in the [file upload docs][1]\r\n\r\nI recommend you read the page thoroughly and *just start writing code* - then come back with examples and stack traces when it doesn&#39;t work.\r\n\r\n\r\n  [1]: http://docs.djangoproject.com/en/dev/topics/http/file-uploads/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1304437351, "answer_id": 5872060, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1304437351, "last_edit_date": 1495540049, "body_markdown": "Extending on [Henry&#39;s example][1]:\r\n\r\n    import tempfile\r\n    import shutil\r\n    \r\n    FILE_UPLOAD_DIR = &#39;/home/imran/uploads&#39;\r\n    \r\n    def handle_uploaded_file(source):\r\n        fd, filepath = tempfile.mkstemp(prefix=source.name, dir=FILE_UPLOAD_DIR)\r\n        with open(filepath, &#39;wb&#39;) as dest:\r\n            shutil.copyfileobj(source, dest)\r\n        return filepath\r\n\r\nYou can call this `handle_uploaded_file` function from your view with the uploaded file object. This will save the file with a unique name (prefixed with filename of the original uploaded file) in filesystem and return the full path of saved file. You can save the path in database, and do something with the file later.\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/5871730/need-a-minimal-django-file-upload-example/5871851#5871851"}, {"tags": [], "down_vote_count": 1, "creation_date": 1305810019, "answer_id": 6059021, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1410174861, "last_edit_date": 1410174861, "body_markdown": "Not sure if there any disadvantages to this approach but even more minimal, in views.py:\r\n\r\n    entry = form.save()\r\n\r\n    # save uploaded file\r\n    if request.FILES[&#39;myfile&#39;]:\r\n        entry.myfile.save(request.FILES[&#39;myfile&#39;]._name, request.FILES[&#39;myfile&#39;], True)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1324087140, "answer_id": 8542030, "path": "stack.django.answer", "score": 1162, "up_vote_count": 1162, "is_accepted": true, "last_activity_date": 1467554489, "last_edit_date": 1495540978, "body_markdown": "Phew, Django documentation really does not have good example about this. I spent over 2 hours to dig up all the pieces to understand how this works. With that knowledge I implemented a project that makes possible to upload files and show them as list. To download  source for the project, visit https://github.com/axelpale/minimal-django-file-upload-example or clone it:\r\n\r\n    &gt; git clone https://github.com/axelpale/minimal-django-file-upload-example.git\r\n\r\n**Update 2013-01-30:** The source at GitHub has also implementation for Django 1.4 in addition to 1.3. Even though there is few changes the following tutorial is also useful for 1.4.\r\n\r\n**Update 2013-05-10:** Implementation for Django 1.5 at GitHub. Minor changes in redirection in urls.py and usage of url template tag in list.html. Thanks to [hubert3][1] for the effort.\r\n\r\n**Update 2013-12-07:** Django 1.6 supported at GitHub. One import changed in myapp/urls.py. Thanks goes to [Arthedian][2].\r\n\r\n**Update 2015-03-17:** Django 1.7 supported at GitHub, thanks to [aronysidoro][3].\r\n\r\n**Update 2015-09-04:** Django 1.8 supported at GitHub, thanks to [nerogit][4].\r\n\r\n**Update 2016-07-03:** Django 1.9 supported at GitHub, thanks to [daavve](https://github.com/daavve) and [nerogit][4]\r\n\r\n## Project tree ##\r\nA basic Django 1.3 project with single app and media/ directory for uploads. \r\n\r\n    minimal-django-file-upload-example/\r\n        src/\r\n            myproject/\r\n                database/\r\n                    sqlite.db\r\n                media/\r\n                myapp/\r\n                    templates/\r\n                        myapp/\r\n                            list.html\r\n                    forms.py\r\n                    models.py\r\n                    urls.py\r\n                    views.py\r\n                __init__.py\r\n                manage.py\r\n                settings.py\r\n                urls.py\r\n\r\n## 1. Settings: myproject/settings.py ##\r\nTo upload and serve files, you need to specify where Django stores uploaded files and from what URL Django serves them. MEDIA_ROOT and MEDIA_URL are in settings.py by default but they are empty. See the first lines in [Django Managing Files][5] for details. Remember also set the database and add myapp to INSTALLED_APPS\r\n\r\n    ...\r\n    import os\r\n\r\n    BASE_DIR = os.path.dirname(os.path.dirname(__file__))\r\n    ...\r\n    DATABASES = {\r\n        &#39;default&#39;: {\r\n            &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;,\r\n            &#39;NAME&#39;: os.path.join(BASE_DIR, &#39;database.sqlite3&#39;),\r\n            &#39;USER&#39;: &#39;&#39;,\r\n            &#39;PASSWORD&#39;: &#39;&#39;,\r\n            &#39;HOST&#39;: &#39;&#39;,\r\n            &#39;PORT&#39;: &#39;&#39;,\r\n        }\r\n    }\r\n    ...\r\n    MEDIA_ROOT = os.path.join(BASE_DIR, &#39;media&#39;)\r\n    MEDIA_URL = &#39;/media/&#39;\r\n    ...\r\n    INSTALLED_APPS = (\r\n        ...\r\n        &#39;myapp&#39;,\r\n    )\r\n\r\n## 2. Model: myproject/myapp/models.py ##\r\nNext you need a model with a FileField. This particular field stores files e.g. to media/documents/2011/12/24/ based on current date and MEDIA_ROOT. See [FileField reference][6].\r\n\r\n    # -*- coding: utf-8 -*-\r\n    from django.db import models\r\n    \r\n    class Document(models.Model):\r\n        docfile = models.FileField(upload_to=&#39;documents/%Y/%m/%d&#39;)\r\n\r\n\r\n## 3. Form: myproject/myapp/forms.py ##\r\nTo handle upload nicely, you need a form. This form has only one field but that is enough. See [Form FileField reference][7] for details.\r\n\r\n    # -*- coding: utf-8 -*-\r\n    from django import forms\r\n    \r\n    class DocumentForm(forms.Form):\r\n        docfile = forms.FileField(\r\n            label=&#39;Select a file&#39;,\r\n            help_text=&#39;max. 42 megabytes&#39;\r\n        )\r\n\r\n\r\n## 4. View: myproject/myapp/views.py ##\r\nA view where all the magic happens. Pay attention how `request.FILES` are handled. For me, it was really hard to spot the fact that `request.FILES[&#39;docfile&#39;]` can be saved to models.FileField just like that. The model&#39;s save() handles the storing of the file to the filesystem automatically.\r\n\r\n    # -*- coding: utf-8 -*-\r\n    from django.shortcuts import render_to_response\r\n    from django.template import RequestContext\r\n    from django.http import HttpResponseRedirect\r\n    from django.core.urlresolvers import reverse\r\n    \r\n    from myproject.myapp.models import Document\r\n    from myproject.myapp.forms import DocumentForm\r\n    \r\n    def list(request):\r\n        # Handle file upload\r\n        if request.method == &#39;POST&#39;:\r\n            form = DocumentForm(request.POST, request.FILES)\r\n            if form.is_valid():\r\n                newdoc = Document(docfile = request.FILES[&#39;docfile&#39;])\r\n                newdoc.save()\r\n    \r\n                # Redirect to the document list after POST\r\n                return HttpResponseRedirect(reverse(&#39;myapp.views.list&#39;))\r\n        else:\r\n            form = DocumentForm() # A empty, unbound form\r\n    \r\n        # Load documents for the list page\r\n        documents = Document.objects.all()\r\n    \r\n        # Render list page with the documents and the form\r\n        return render_to_response(\r\n            &#39;myapp/list.html&#39;,\r\n            {&#39;documents&#39;: documents, &#39;form&#39;: form},\r\n            context_instance=RequestContext(request)\r\n        )\r\n\r\n\r\n## 5. Project URLs: myproject/urls.py ##\r\nDjango does not serve MEDIA_ROOT by default. That would be dangerous in production environment. But in development stage, we could cut short. Pay attention to the last line. That line enables Django to serve files from MEDIA_URL. This works only in developement stage.\r\n\r\nSee [django.conf.urls.static.static reference][8] for details. See also [this discussion about serving media files][9].\r\n\r\n    # -*- coding: utf-8 -*-\r\n    from django.conf.urls import patterns, include, url\r\n    from django.conf import settings\r\n    from django.conf.urls.static import static\r\n    \r\n    urlpatterns = patterns(&#39;&#39;,\r\n    \t(r&#39;^&#39;, include(&#39;myapp.urls&#39;)),\r\n    ) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\r\n\r\n\r\n## 6. App URLs: myproject/myapp/urls.py ##\r\nTo make the view accessible, you must specify urls for it. Nothing special here.\r\n\r\n    # -*- coding: utf-8 -*-\r\n    from django.conf.urls import patterns, url\r\n    \r\n    urlpatterns = patterns(&#39;myapp.views&#39;,\r\n        url(r&#39;^list/$&#39;, &#39;list&#39;, name=&#39;list&#39;),\r\n    )\r\n\r\n\r\n## 7. Template: myproject/myapp/templates/myapp/list.html ##\r\nThe last part: template for the list and the upload form below it. The form must have enctype-attribute set to &quot;multipart/form-data&quot; and method set to &quot;post&quot; to make upload to Django possible. See [File Uploads documentation][10] for details.\r\n\r\nThe FileField has many attributes that can be used in templates. E.g. {{ document.docfile.url }} and {{ document.docfile.name }} as in the template. See more about these in [Using files in models article][11] and [The File object documentation][12].\r\n\r\n    &lt;!DOCTYPE html&gt;\r\n    &lt;html&gt;\r\n        &lt;head&gt;\r\n            &lt;meta charset=&quot;utf-8&quot;&gt;\r\n            &lt;title&gt;Minimal Django File Upload Example&lt;/title&gt;\t\r\n        &lt;/head&gt;\r\n        &lt;body&gt;\r\n        &lt;!-- List of uploaded documents --&gt;\r\n        {% if documents %}\r\n            &lt;ul&gt;\r\n            {% for document in documents %}\r\n                &lt;li&gt;&lt;a href=&quot;{{ document.docfile.url }}&quot;&gt;{{ document.docfile.name }}&lt;/a&gt;&lt;/li&gt;\r\n            {% endfor %}\r\n            &lt;/ul&gt;\r\n        {% else %}\r\n            &lt;p&gt;No documents.&lt;/p&gt;\r\n        {% endif %}\r\n        \r\n            &lt;!-- Upload form. Note enctype attribute! --&gt;\r\n            &lt;form action=&quot;{% url &#39;list&#39; %}&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\r\n                {% csrf_token %}\r\n                &lt;p&gt;{{ form.non_field_errors }}&lt;/p&gt;\r\n                &lt;p&gt;{{ form.docfile.label_tag }} {{ form.docfile.help_text }}&lt;/p&gt;\r\n                &lt;p&gt;\r\n                    {{ form.docfile.errors }}\r\n                    {{ form.docfile }}\r\n                &lt;/p&gt;\r\n                &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;Upload&quot; /&gt;&lt;/p&gt;\r\n            &lt;/form&gt;\r\n        &lt;/body&gt;\r\n    &lt;/html&gt; \r\n\r\n## 8. Initialize ##\r\nJust run syncdb and runserver.\r\n\r\n    &gt; cd myproject\r\n    &gt; python manage.py syncdb\r\n    &gt; python manage.py runserver\r\n\r\n## Results ##\r\nFinally, everything is ready. On default Django developement environment the list of uploaded documents can be seen at &lt;code&gt;localhost:8000/list/&lt;/code&gt;. Today the files are uploaded to /path/to/myproject/media/documents/2011/12/17/ and can be opened from the list.\r\n\r\nI hope this answer will help someone as much as it would have helped me.\r\n\r\n\r\n  [1]: https://github.com/hubert3\r\n  [2]: https://github.com/Arthedian\r\n  [3]: https://github.com/aronysidoro\r\n  [4]: https://github.com/nerogit\r\n  [5]: https://docs.djangoproject.com/en/dev/topics/files/\r\n  [6]: https://docs.djangoproject.com/en/dev/ref/models/fields/#filefield\r\n  [7]: https://docs.djangoproject.com/en/dev/ref/forms/fields/#filefield\r\n  [8]: https://docs.djangoproject.com/en/dev/howto/static-files/#django.conf.urls.static.static\r\n  [9]: https://stackoverflow.com/questions/446026/django-how-do-you-serve-media-stylesheets-and-link-to-them-within-templates\r\n  [10]: https://docs.djangoproject.com/en/dev/topics/http/file-uploads/\r\n  [11]: https://docs.djangoproject.com/en/dev/topics/files/#using-files-in-models\r\n  [12]: https://docs.djangoproject.com/en/dev/ref/files/file/#django.core.files.File"}, {"tags": [], "down_vote_count": 1, "creation_date": 1339071076, "answer_id": 10931519, "path": "stack.django.answer", "score": 19, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1365366488, "last_edit_date": 1365366488, "body_markdown": "I must say I find the documentation at django confusing.\r\nAlso for the simplest example why are forms being mentioned?\r\nThe example I got to work in the views.py is :-\r\n\r\n\r\n    \r\n \r\n    for key, file in request.FILES.items():\r\n        path = file.name\r\n        dest = open(path, &#39;w&#39;)\r\n        if file.multiple_chunks:\r\n            for c in file.chunks():\r\n                dest.write(c)\r\n        else:\r\n            dest.write(file.read())\r\n        dest.close()\r\n\r\n\r\nThe html file looks like the code below, though this example only uploads one file and the code to save the files handles many :-\r\n\r\n    &lt;form action=&quot;/upload_file/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;{% csrf_token %}\r\n    &lt;label for=&quot;file&quot;&gt;Filename:&lt;/label&gt;\r\n    &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt;\r\n    &lt;br /&gt;\r\n    &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;\r\n    &lt;/form&gt;\r\n\r\nThese examples are not my code, they have been optained from two other examples I found.\r\nI am a relative beginner to django so it is very likely I am missing some key point."}, {"tags": [], "down_vote_count": 0, "creation_date": 1382265552, "answer_id": 19476403, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1485319216, "last_edit_date": 1485319216, "body_markdown": "Here it may helps you:\r\n create a file field in your models.py\r\n\r\nFor uploading the file(in your admin.py):\r\n\r\n    def save_model(self, request, obj, form, change):\r\n        url = &quot;http://img.youtube.com/vi/%s/hqdefault.jpg&quot; %(obj.video)\r\n        url = str(url)\r\n    \r\n        if url:\r\n            temp_img = NamedTemporaryFile(delete=True)\r\n            temp_img.write(urllib2.urlopen(url).read())\r\n            temp_img.flush()\r\n            filename_img = urlparse(url).path.split(&#39;/&#39;)[-1]\r\n            obj.image.save(filename_img,File(temp_img)\r\n\r\nand use that field in your template also."}, {"tags": [], "down_vote_count": 2, "creation_date": 1400050683, "answer_id": 23647650, "path": "stack.django.answer", "score": -1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1400050683, "body_markdown": "I faced the similar problem, and solved by django admin site.\r\n\r\n    # models\r\n    class Document(models.Model):\r\n        docfile = models.FileField(upload_to=&#39;documents/Temp/%Y/%m/%d&#39;)\r\n    \r\n        def doc_name(self):\r\n            return self.docfile.name.split(&#39;/&#39;)[-1] # only the name, not full path\r\n\r\n    # admin\r\n    from myapp.models import Document\r\n    class DocumentAdmin(admin.ModelAdmin):\r\n        list_display = (&#39;doc_name&#39;,)\r\n    admin.site.register(Document, DocumentAdmin)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1401988223, "answer_id": 24066179, "path": "stack.django.answer", "score": 44, "up_vote_count": 44, "is_accepted": false, "last_activity_date": 1504522715, "last_edit_date": 1504522715, "body_markdown": "Update of [Akseli Pal&#233;n&#39;s answer](https://stackoverflow.com/a/8542030/2351696). see the [github repo](https://github.com/suhailvs/simpledjangoimageupload), works with Django 1.11\r\n\r\nA minimal Django file upload example\r\n====================================\r\n\r\n1. Create a django project\r\n--------------------------\r\n\r\nRun startproject::\r\n\r\n    $ django-admin.py startproject sample\r\n\r\nnow a folder(**sample**) is created::\r\n\t\r\n\tsample/\r\n\t  manage.py\r\n\t  sample/\r\n\t    __init__.py\r\n\t    settings.py\r\n\t    urls.py\r\n\t    wsgi.py\t\r\n\r\n2. create an app\r\n----------------\r\n\r\nCreate an app::\r\n\r\n\tpython manage.py startapp uploader\r\n\r\nNow a folder(`uploader`) with these files are created::\r\n\r\n\tuploader/\r\n\t  __init__.py\r\n\t  admin.py\r\n\t  app.py\r\n\t  models.py\r\n\t  tests.py\r\n\t  views.py\r\n\t  migrations/\r\n\t    __init__.py\r\n\r\n3. Update settings.py\r\n---------------------\r\n\r\nOn `sample/settings.py` add `&#39;uploader&#39;` to `INSTALLED_APPS` and add `MEDIA_ROOT` and `MEDIA_URL`, ie::\r\n\r\n\tINSTALLED_APPS = (\r\n\t\t...&lt;other apps&gt;...\r\n\t\t&#39;uploader&#39;,\r\n\t)\r\n\r\n\tMEDIA_ROOT = os.path.join(BASE_DIR, &#39;media&#39;)\r\n\tMEDIA_URL = &#39;/media/&#39;\r\n\r\n4. Update urls.py\r\n-----------------\r\n\r\nin `sample/urls.py` add::\r\n\r\n\t...&lt;other imports&gt;...\r\n\tfrom django.conf import settings\r\n\tfrom django.conf.urls.static import static\r\n\tfrom uploader import views as uploader_views\r\n\t\r\n\turlpatterns = [\r\n\t\t...&lt;other url patterns&gt;...\r\n\t\turl(r&#39;^upload/$&#39;, uploader_views.home, name=&#39;imageupload&#39;),\r\n\t]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\r\n\r\n\r\n5. Update models.py\r\n-------------------\r\n\r\nupdate `uploader/models.py`::\r\n\r\n\tfrom django.db import models\r\n\tfrom django.forms import ModelForm\r\n\r\n\tclass Upload(models.Model):\r\n\t\tpic = models.FileField(upload_to=&quot;images/&quot;)    \r\n\t\tupload_date=models.DateTimeField(auto_now_add =True)\r\n\r\n\t# FileUpload form class.\r\n\tclass UploadForm(ModelForm):\r\n\t\tclass Meta:\r\n\t\t\tmodel = Upload\r\n\t\t\tfields = (&#39;pic&#39;,)\r\n\r\n\r\n6. Update views.py\r\n------------------\r\n\r\nupdate `uploader/views.py`::\r\n\r\n\tfrom django.shortcuts import render\r\n\tfrom uploader.models import UploadForm,Upload\r\n\tfrom django.http import HttpResponseRedirect\r\n\tfrom django.core.urlresolvers import reverse\r\n\t# Create your views here.\r\n\tdef home(request):\r\n\t\tif request.method==&quot;POST&quot;:\r\n\t\t\timg = UploadForm(request.POST, request.FILES)\t\t\r\n\t\t\tif img.is_valid():\r\n\t\t\t\timg.save()\t\r\n\t\t\t\treturn HttpResponseRedirect(reverse(&#39;imageupload&#39;))\r\n\t\telse:\r\n\t\t\timg=UploadForm()\r\n\t\timages=Upload.objects.all()\r\n\t\treturn render(request,&#39;home.html&#39;,{&#39;form&#39;:img,&#39;images&#39;:images})\r\n\r\n\r\n7. create templates\r\n-------------------\r\n\r\nCreate a folder **templates** in folder **uploader**, then create a file **home.html**, ie `sample/uploader/templates/home.html`::\r\n\r\n\t&lt;div style=&quot;padding:40px;margin:40px;border:1px solid #ccc&quot;&gt;\r\n\t\t&lt;h1&gt;picture&lt;/h1&gt;\r\n\t\t&lt;form action=&quot;#&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\r\n\t\t\t{% csrf_token %} {{form}} \r\n\t\t\t&lt;input type=&quot;submit&quot; value=&quot;Upload&quot; /&gt;\r\n\t\t&lt;/form&gt;\r\n\t\t{% for img in images %}\r\n\t\t\t{{forloop.counter}}.&lt;a href=&quot;{{ img.pic.url }}&quot;&gt;{{ img.pic.name }}&lt;/a&gt;\r\n\t\t\t({{img.upload_date}})&lt;hr /&gt;\r\n\t\t{% endfor %}\r\n\t&lt;/div&gt;\r\n\r\n\r\n8. Syncronize database\r\n----------------------\r\n\r\nSyncronize database and runserver::\r\n\r\n\t$ python manage.py makemigrations\r\n\t$ python manage.py migrate\r\n\t$ python manage.py runserver\r\n\r\n\tvisit &lt;http://localhost.com:8000/upload&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1415585815, "answer_id": 26835747, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1415585815, "body_markdown": "I also had the similar requirement. Most of the examples on net are asking to create models and create forms which I did not wanna use. Here is my final code.\r\n\r\n\r\n\r\n    if request.method == &#39;POST&#39;:\r\n        file1 = request.FILES[&#39;file&#39;]\r\n        contentOfFile = file1.read()\r\n        if file1:\r\n            return render(request, &#39;blogapp/Statistics.html&#39;, {&#39;file&#39;: file1, &#39;contentOfFile&#39;: contentOfFile})\r\n\r\nAnd in HTML to upload I wrote:\r\n\r\n    {% block content %}\r\n        &lt;h1&gt;File content&lt;/h1&gt;\r\n        &lt;form action=&quot;{% url &#39;blogapp:uploadComplete&#39;%}&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\r\n             {% csrf_token %}\r\n            &lt;input id=&quot;uploadbutton&quot; type=&quot;file&quot; value=&quot;Browse&quot; name=&quot;file&quot; accept=&quot;text/csv&quot; /&gt;\r\n            &lt;input type=&quot;submit&quot; value=&quot;Upload&quot; /&gt;\r\n        &lt;/form&gt;\r\n        {% endblock %}\r\n\r\n\r\nFollowing is the HTML which displays content of file:\r\n\r\n    {% block content %}\r\n        &lt;h3&gt;File uploaded successfully&lt;/h3&gt;\r\n        {{file.name}}\r\n        &lt;/br&gt;content = {{contentOfFile}}\r\n    {% endblock %}"}, {"tags": [], "down_vote_count": 0, "creation_date": 1428381300, "answer_id": 29483830, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1448888540, "last_edit_date": 1448888540, "body_markdown": "You can refer to server examples in Fine Uploader, which has django version.\r\nhttps://github.com/FineUploader/server-examples/tree/master/python/django-fine-uploader\r\n\r\nIt&#39;s very elegant and most important of all, it provides featured js lib. Template is not included in server-examples, but you can find demo on its website.\r\nFine Uploader: http://fineuploader.com/demos.html\r\n\r\ndjango-fine-uploader\r\n----------\r\n\r\n**views.py**\r\n\r\nUploadView dispatches post and delete request to respective handlers. \r\n\r\n    class UploadView(View):\r\n    \r\n        @csrf_exempt\r\n        def dispatch(self, *args, **kwargs):\r\n            return super(UploadView, self).dispatch(*args, **kwargs)\r\n    \r\n        def post(self, request, *args, **kwargs):\r\n            &quot;&quot;&quot;A POST request. Validate the form and then handle the upload\r\n            based ont the POSTed data. Does not handle extra parameters yet.\r\n            &quot;&quot;&quot;\r\n            form = UploadFileForm(request.POST, request.FILES)\r\n            if form.is_valid():\r\n                handle_upload(request.FILES[&#39;qqfile&#39;], form.cleaned_data)\r\n                return make_response(content=json.dumps({ &#39;success&#39;: True }))\r\n            else:\r\n                return make_response(status=400,\r\n                    content=json.dumps({\r\n                        &#39;success&#39;: False,\r\n                        &#39;error&#39;: &#39;%s&#39; % repr(form.errors)\r\n                    }))\r\n    \r\n        def delete(self, request, *args, **kwargs):\r\n            &quot;&quot;&quot;A DELETE request. If found, deletes a file with the corresponding\r\n            UUID from the server&#39;s filesystem.\r\n            &quot;&quot;&quot;\r\n            qquuid = kwargs.get(&#39;qquuid&#39;, &#39;&#39;)\r\n            if qquuid:\r\n                try:\r\n                    handle_deleted_file(qquuid)\r\n                    return make_response(content=json.dumps({ &#39;success&#39;: True }))\r\n                except Exception, e:\r\n                    return make_response(status=400,\r\n                        content=json.dumps({\r\n                            &#39;success&#39;: False,\r\n                            &#39;error&#39;: &#39;%s&#39; % repr(e)\r\n                        }))\r\n            return make_response(status=404,\r\n                content=json.dumps({\r\n                    &#39;success&#39;: False,\r\n                    &#39;error&#39;: &#39;File not present&#39;\r\n                }))\r\n\r\n**forms.py**\r\n\r\n    class UploadFileForm(forms.Form):\r\n    \r\n        &quot;&quot;&quot; This form represents a basic request from Fine Uploader.\r\n        The required fields will **always** be sent, the other fields are optional\r\n        based on your setup.\r\n        Edit this if you want to add custom parameters in the body of the POST\r\n        request.\r\n        &quot;&quot;&quot;\r\n        qqfile = forms.FileField()\r\n        qquuid = forms.CharField()\r\n        qqfilename = forms.CharField()\r\n        qqpartindex = forms.IntegerField(required=False)\r\n        qqchunksize = forms.IntegerField(required=False)\r\n        qqpartbyteoffset = forms.IntegerField(required=False)\r\n        qqtotalfilesize = forms.IntegerField(required=False)\r\n        qqtotalparts = forms.IntegerField(required=False)\r\n\r\n"}], "title": "Need a minimal Django file upload example", "view_count": 244368, "answer_count": 10, "code_snippet": ["<code>&gt; git clone https://github.com/axelpale/minimal-django-file-upload-example.git\n</code>", "<code>minimal-django-file-upload-example/\n    src/\n        myproject/\n            database/\n                sqlite.db\n            media/\n            myapp/\n                templates/\n                    myapp/\n                        list.html\n                forms.py\n                models.py\n                urls.py\n                views.py\n            __init__.py\n            manage.py\n            settings.py\n            urls.py\n</code>", "<code>...\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(__file__))\n...\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'database.sqlite3'),\n        'USER': '',\n        'PASSWORD': '',\n        'HOST': '',\n        'PORT': '',\n    }\n}\n...\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n...\nINSTALLED_APPS = (\n    ...\n    'myapp',\n)\n</code>", "<code># -*- coding: utf-8 -*-\nfrom django.db import models\n\nclass Document(models.Model):\n    docfile = models.FileField(upload_to='documents/%Y/%m/%d')\n</code>", "<code># -*- coding: utf-8 -*-\nfrom django import forms\n\nclass DocumentForm(forms.Form):\n    docfile = forms.FileField(\n        label='Select a file',\n        help_text='max. 42 megabytes'\n    )\n</code>", "<code>request.FILES</code>", "<code>request.FILES['docfile']</code>", "<code># -*- coding: utf-8 -*-\nfrom django.shortcuts import render_to_response\nfrom django.template import RequestContext\nfrom django.http import HttpResponseRedirect\nfrom django.core.urlresolvers import reverse\n\nfrom myproject.myapp.models import Document\nfrom myproject.myapp.forms import DocumentForm\n\ndef list(request):\n    # Handle file upload\n    if request.method == 'POST':\n        form = DocumentForm(request.POST, request.FILES)\n        if form.is_valid():\n            newdoc = Document(docfile = request.FILES['docfile'])\n            newdoc.save()\n\n            # Redirect to the document list after POST\n            return HttpResponseRedirect(reverse('myapp.views.list'))\n    else:\n        form = DocumentForm() # A empty, unbound form\n\n    # Load documents for the list page\n    documents = Document.objects.all()\n\n    # Render list page with the documents and the form\n    return render_to_response(\n        'myapp/list.html',\n        {'documents': documents, 'form': form},\n        context_instance=RequestContext(request)\n    )\n</code>", "<code># -*- coding: utf-8 -*-\nfrom django.conf.urls import patterns, include, url\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = patterns('',\n    (r'^', include('myapp.urls')),\n) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</code>", "<code># -*- coding: utf-8 -*-\nfrom django.conf.urls import patterns, url\n\nurlpatterns = patterns('myapp.views',\n    url(r'^list/$', 'list', name='list'),\n)\n</code>", "<code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n        &lt;title&gt;Minimal Django File Upload Example&lt;/title&gt;   \n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;!-- List of uploaded documents --&gt;\n    {% if documents %}\n        &lt;ul&gt;\n        {% for document in documents %}\n            &lt;li&gt;&lt;a href=\"{{ document.docfile.url }}\"&gt;{{ document.docfile.name }}&lt;/a&gt;&lt;/li&gt;\n        {% endfor %}\n        &lt;/ul&gt;\n    {% else %}\n        &lt;p&gt;No documents.&lt;/p&gt;\n    {% endif %}\n\n        &lt;!-- Upload form. Note enctype attribute! --&gt;\n        &lt;form action=\"{% url 'list' %}\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n            {% csrf_token %}\n            &lt;p&gt;{{ form.non_field_errors }}&lt;/p&gt;\n            &lt;p&gt;{{ form.docfile.label_tag }} {{ form.docfile.help_text }}&lt;/p&gt;\n            &lt;p&gt;\n                {{ form.docfile.errors }}\n                {{ form.docfile }}\n            &lt;/p&gt;\n            &lt;p&gt;&lt;input type=\"submit\" value=\"Upload\" /&gt;&lt;/p&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt; \n</code>", "<code>&gt; cd myproject\n&gt; python manage.py syncdb\n&gt; python manage.py runserver\n</code>", "<code>localhost:8000/list/</code>", "<code>{% url list %}</code>", "<code>{% url \"list\" %}</code>", "<code>&lt;form method=\"post\" enctype=\"multipart/form-data\"&gt;\n    &lt;input type=\"file\" name=\"myfile\" /&gt;\n    &lt;input type=\"submit\" name=\"submit\" value=\"Upload\" /&gt;\n&lt;/form&gt;\n</code>", "<code>request.FILES</code>", "<code>def myview(request):\n    request.FILES['myfile'] # this is my file\n</code>", "<code>enctype=\"multipart/form-data\"</code>", "<code>$ django-admin.py startproject sample\n</code>", "<code>sample/\n  manage.py\n  sample/\n    __init__.py\n    settings.py\n    urls.py\n    wsgi.py \n</code>", "<code>python manage.py startapp uploader\n</code>", "<code>uploader</code>", "<code>uploader/\n  __init__.py\n  admin.py\n  app.py\n  models.py\n  tests.py\n  views.py\n  migrations/\n    __init__.py\n</code>", "<code>sample/settings.py</code>", "<code>'uploader'</code>", "<code>INSTALLED_APPS</code>", "<code>MEDIA_ROOT</code>", "<code>MEDIA_URL</code>", "<code>INSTALLED_APPS = (\n    ...&lt;other apps&gt;...\n    'uploader',\n)\n\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n</code>", "<code>sample/urls.py</code>", "<code>...&lt;other imports&gt;...\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom uploader import views as uploader_views\n\nurlpatterns = [\n    ...&lt;other url patterns&gt;...\n    url(r'^upload/$', uploader_views.home, name='imageupload'),\n]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</code>", "<code>uploader/models.py</code>", "<code>from django.db import models\nfrom django.forms import ModelForm\n\nclass Upload(models.Model):\n    pic = models.FileField(upload_to=\"images/\")    \n    upload_date=models.DateTimeField(auto_now_add =True)\n\n# FileUpload form class.\nclass UploadForm(ModelForm):\n    class Meta:\n        model = Upload\n        fields = ('pic',)\n</code>", "<code>uploader/views.py</code>", "<code>from django.shortcuts import render\nfrom uploader.models import UploadForm,Upload\nfrom django.http import HttpResponseRedirect\nfrom django.core.urlresolvers import reverse\n# Create your views here.\ndef home(request):\n    if request.method==\"POST\":\n        img = UploadForm(request.POST, request.FILES)       \n        if img.is_valid():\n            img.save()  \n            return HttpResponseRedirect(reverse('imageupload'))\n    else:\n        img=UploadForm()\n    images=Upload.objects.all()\n    return render(request,'home.html',{'form':img,'images':images})\n</code>", "<code>sample/uploader/templates/home.html</code>", "<code>&lt;div style=\"padding:40px;margin:40px;border:1px solid #ccc\"&gt;\n    &lt;h1&gt;picture&lt;/h1&gt;\n    &lt;form action=\"#\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n        {% csrf_token %} {{form}} \n        &lt;input type=\"submit\" value=\"Upload\" /&gt;\n    &lt;/form&gt;\n    {% for img in images %}\n        {{forloop.counter}}.&lt;a href=\"{{ img.pic.url }}\"&gt;{{ img.pic.name }}&lt;/a&gt;\n        ({{img.upload_date}})&lt;hr /&gt;\n    {% endfor %}\n&lt;/div&gt;\n</code>", "<code>$ python manage.py makemigrations\n$ python manage.py migrate\n$ python manage.py runserver\n\nvisit &lt;http://localhost.com:8000/upload&gt;\n</code>", "<code>FileField</code>", "<code>ImageField</code>", "<code>FileField</code>", "<code>ImageField</code>", "<code>for key, file in request.FILES.items():\n    path = file.name\n    dest = open(path, 'w')\n    if file.multiple_chunks:\n        for c in file.chunks():\n            dest.write(c)\n    else:\n        dest.write(file.read())\n    dest.close()\n</code>", "<code>&lt;form action=\"/upload_file/\" method=\"post\" enctype=\"multipart/form-data\"&gt;{% csrf_token %}\n&lt;label for=\"file\"&gt;Filename:&lt;/label&gt;\n&lt;input type=\"file\" name=\"file\" id=\"file\" /&gt;\n&lt;br /&gt;\n&lt;input type=\"submit\" name=\"submit\" value=\"Submit\" /&gt;\n&lt;/form&gt;\n</code>", "<code>FileField</code>", "<code>model.Form</code>", "<code>import tempfile\nimport shutil\n\nFILE_UPLOAD_DIR = '/home/imran/uploads'\n\ndef handle_uploaded_file(source):\n    fd, filepath = tempfile.mkstemp(prefix=source.name, dir=FILE_UPLOAD_DIR)\n    with open(filepath, 'wb') as dest:\n        shutil.copyfileobj(source, dest)\n    return filepath\n</code>", "<code>handle_uploaded_file</code>", "<code>request.FILES['myfile']</code>", "<code>handle_uploaded_file</code>", "<code>request</code>", "<code>prefix=source.name</code>", "<code>upload.csv</code>", "<code>upload.csv5334</code>", "<code>suffix=source.name</code>", "<code>def save_model(self, request, obj, form, change):\n    url = \"http://img.youtube.com/vi/%s/hqdefault.jpg\" %(obj.video)\n    url = str(url)\n\n    if url:\n        temp_img = NamedTemporaryFile(delete=True)\n        temp_img.write(urllib2.urlopen(url).read())\n        temp_img.flush()\n        filename_img = urlparse(url).path.split('/')[-1]\n        obj.image.save(filename_img,File(temp_img)\n</code>", "<code>if request.method == 'POST':\n    file1 = request.FILES['file']\n    contentOfFile = file1.read()\n    if file1:\n        return render(request, 'blogapp/Statistics.html', {'file': file1, 'contentOfFile': contentOfFile})\n</code>", "<code>{% block content %}\n    &lt;h1&gt;File content&lt;/h1&gt;\n    &lt;form action=\"{% url 'blogapp:uploadComplete'%}\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n         {% csrf_token %}\n        &lt;input id=\"uploadbutton\" type=\"file\" value=\"Browse\" name=\"file\" accept=\"text/csv\" /&gt;\n        &lt;input type=\"submit\" value=\"Upload\" /&gt;\n    &lt;/form&gt;\n    {% endblock %}\n</code>", "<code>{% block content %}\n    &lt;h3&gt;File uploaded successfully&lt;/h3&gt;\n    {{file.name}}\n    &lt;/br&gt;content = {{contentOfFile}}\n{% endblock %}\n</code>", "<code>class UploadView(View):\n\n    @csrf_exempt\n    def dispatch(self, *args, **kwargs):\n        return super(UploadView, self).dispatch(*args, **kwargs)\n\n    def post(self, request, *args, **kwargs):\n        \"\"\"A POST request. Validate the form and then handle the upload\n        based ont the POSTed data. Does not handle extra parameters yet.\n        \"\"\"\n        form = UploadFileForm(request.POST, request.FILES)\n        if form.is_valid():\n            handle_upload(request.FILES['qqfile'], form.cleaned_data)\n            return make_response(content=json.dumps({ 'success': True }))\n        else:\n            return make_response(status=400,\n                content=json.dumps({\n                    'success': False,\n                    'error': '%s' % repr(form.errors)\n                }))\n\n    def delete(self, request, *args, **kwargs):\n        \"\"\"A DELETE request. If found, deletes a file with the corresponding\n        UUID from the server's filesystem.\n        \"\"\"\n        qquuid = kwargs.get('qquuid', '')\n        if qquuid:\n            try:\n                handle_deleted_file(qquuid)\n                return make_response(content=json.dumps({ 'success': True }))\n            except Exception, e:\n                return make_response(status=400,\n                    content=json.dumps({\n                        'success': False,\n                        'error': '%s' % repr(e)\n                    }))\n        return make_response(status=404,\n            content=json.dumps({\n                'success': False,\n                'error': 'File not present'\n            }))\n</code>", "<code>class UploadFileForm(forms.Form):\n\n    \"\"\" This form represents a basic request from Fine Uploader.\n    The required fields will **always** be sent, the other fields are optional\n    based on your setup.\n    Edit this if you want to add custom parameters in the body of the POST\n    request.\n    \"\"\"\n    qqfile = forms.FileField()\n    qquuid = forms.CharField()\n    qqfilename = forms.CharField()\n    qqpartindex = forms.IntegerField(required=False)\n    qqchunksize = forms.IntegerField(required=False)\n    qqpartbyteoffset = forms.IntegerField(required=False)\n    qqtotalfilesize = forms.IntegerField(required=False)\n    qqtotalparts = forms.IntegerField(required=False)\n</code>", "<code>entry = form.save()\n\n# save uploaded file\nif request.FILES['myfile']:\n    entry.myfile.save(request.FILES['myfile']._name, request.FILES['myfile'], True)\n</code>", "<code># models\nclass Document(models.Model):\n    docfile = models.FileField(upload_to='documents/Temp/%Y/%m/%d')\n\n    def doc_name(self):\n        return self.docfile.name.split('/')[-1] # only the name, not full path\n\n# admin\nfrom myapp.models import Document\nclass DocumentAdmin(admin.ModelAdmin):\n    list_display = ('doc_name',)\nadmin.site.register(Document, DocumentAdmin)\n</code>"], "path": "stack.django"}, {"tags": ["python", "python-3.x", "dictionary", "mapping", "idioms"], "creation_date": 1220341470, "body_markdown": "I have two Python dictionaries, and I want to write a single expression that returns these two dictionaries, merged.  The `update()` method would be what I need, if it returned its result instead of modifying a dict in-place.\r\n\r\n    &gt;&gt;&gt; x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    &gt;&gt;&gt; y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    &gt;&gt;&gt; z = x.update(y)\r\n    &gt;&gt;&gt; print(z)\r\n    None\r\n    &gt;&gt;&gt; x\r\n    {&#39;a&#39;: 1, &#39;b&#39;: 10, &#39;c&#39;: 11}\r\n\r\nHow can I get that final merged dict in `z`, not `x`?\r\n\r\n(To be extra-clear, the last-one-wins conflict-handling of `dict.update()` is what I&#39;m looking for as well.)\r\n", "last_edit_date": 1502626967, "up_vote_count": 2867, "link": "https://stackoverflow.com/questions/38987/how-to-merge-two-dictionaries-in-a-single-expression", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1220341767, "answer_id": 38989, "path": "stack.django.answer", "score": 38, "up_vote_count": 40, "is_accepted": false, "last_activity_date": 1220341767, "body_markdown": "    x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    z = dict(x.items() + y.items())\r\n    print z\r\n\r\nFor items with keys in both dictionaries (&#39;b&#39;), you can control which one ends up in the output by putting that one last."}, {"tags": [], "down_vote_count": 34, "creation_date": 1220341812, "answer_id": 38990, "path": "stack.django.answer", "score": 1408, "up_vote_count": 1442, "is_accepted": false, "last_activity_date": 1457020327, "last_edit_date": 1457020327, "body_markdown": "In your case, what you can do is:\r\n\r\n    z = dict(x.items() + y.items())\r\n\r\nThis will, as you want it, put the final dict in `z`, and make the value for key `b` be properly overridden by the second (`y`) dict&#39;s value:\r\n\r\n    &gt;&gt;&gt; x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    &gt;&gt;&gt; y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    &gt;&gt;&gt; z = dict(x.items() + y.items())\r\n    &gt;&gt;&gt; z\r\n    {&#39;a&#39;: 1, &#39;c&#39;: 11, &#39;b&#39;: 10}\r\n\r\nIf you use Python 3, it is only a little more complicated.  To create `z`:\r\n\r\n    &gt;&gt;&gt; z = dict(list(x.items()) + list(y.items()))\r\n    &gt;&gt;&gt; z\r\n    {&#39;a&#39;: 1, &#39;c&#39;: 11, &#39;b&#39;: 10}\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 17, "creation_date": 1220360446, "answer_id": 39437, "path": "stack.django.answer", "score": 533, "up_vote_count": 550, "is_accepted": false, "last_activity_date": 1220360446, "body_markdown": "An alternative:\r\n\r\n    z = x.copy()\r\n    z.update(y)"}, {"tags": [], "down_vote_count": 22, "creation_date": 1220370727, "answer_id": 39858, "path": "stack.django.answer", "score": 258, "up_vote_count": 280, "is_accepted": false, "last_activity_date": 1453358604, "last_edit_date": 1453358604, "body_markdown": "Another, more concise, option:\r\n\r\n    z = dict(x, **y)\r\n\r\n**Note**: this has become a popular answer, but it is important to point out that if `y` has any non-string keys, the fact that this works at all is an abuse of a CPython implementation detail, and it does not work in Python 3, or in PyPy, IronPython, or Jython. Also, [Guido is not a fan][1]. So I can&#39;t recommend this technique for forward-compatible or cross-implementation portable code, which really means it should be avoided entirely.\r\n\r\n\r\n  [1]: http://mail.python.org/pipermail/python-dev/2010-April/099459.html"}, {"tags": [], "down_vote_count": 1, "creation_date": 1220555305, "answer_id": 44512, "path": "stack.django.answer", "score": 79, "up_vote_count": 80, "is_accepted": false, "last_activity_date": 1410638181, "last_edit_date": 1410638181, "body_markdown": "I wanted something similar, but with the ability to specify how the values on duplicate keys were merged, so I hacked this out (but did not heavily test it).  Obviously this is not a single expression, but it is a single function call.\r\n\r\n    def merge(d1, d2, merge_fn=lambda x,y:y):\r\n        &quot;&quot;&quot;\r\n        Merges two dictionaries, non-destructively, combining \r\n        values on duplicate keys as defined by the optional merge\r\n        function.  The default behavior replaces the values in d1\r\n        with corresponding values in d2.  (There is no other generally\r\n        applicable merge strategy, but often you&#39;ll have homogeneous \r\n        types in your dicts, so specifying a merge technique can be \r\n        valuable.)\r\n    \r\n        Examples:\r\n        \r\n        &gt;&gt;&gt; d1\r\n        {&#39;a&#39;: 1, &#39;c&#39;: 3, &#39;b&#39;: 2}\r\n        &gt;&gt;&gt; merge(d1, d1)\r\n        {&#39;a&#39;: 1, &#39;c&#39;: 3, &#39;b&#39;: 2}\r\n        &gt;&gt;&gt; merge(d1, d1, lambda x,y: x+y)\r\n        {&#39;a&#39;: 2, &#39;c&#39;: 6, &#39;b&#39;: 4}\r\n        \r\n        &quot;&quot;&quot;\r\n        result = dict(d1)\r\n        for k,v in d2.iteritems():\r\n            if k in result:\r\n                result[k] = merge_fn(result[k], v)\r\n            else:\r\n                result[k] = v\r\n        return result"}, {"tags": [], "down_vote_count": 2, "creation_date": 1220872614, "answer_id": 49492, "path": "stack.django.answer", "score": 159, "up_vote_count": 161, "is_accepted": false, "last_activity_date": 1407282962, "last_edit_date": 1407282962, "body_markdown": "This probably won&#39;t be a popular answer, but you almost certainly do not want to do this.  If you want a copy that&#39;s a merge, then use copy (or [deepcopy][1], depending on what you want) and then update.  The two lines of code are much more readable - more Pythonic - than the single line creation with .items() + .items().  Explicit is better than implicit.\r\n\r\nIn addition, when you use .items() (pre Python 3.0), you&#39;re creating a new list that contains the items from the dict.  If your dictionaries are large, then that is quite a lot of overhead (two large lists that will be thrown away as soon as the merged dict is created).  update() can work more efficiently, because it can run through the second dict item-by-item.\r\n\r\nIn terms of [time][2]:\r\n\r\n    &gt;&gt;&gt; timeit.Timer(&quot;dict(x, **y)&quot;, &quot;x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))&quot;).timeit(100000)\r\n    15.52571702003479\r\n    &gt;&gt;&gt; timeit.Timer(&quot;temp = x.copy()\\ntemp.update(y)&quot;, &quot;x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))&quot;).timeit(100000)\r\n    15.694622993469238\r\n    &gt;&gt;&gt; timeit.Timer(&quot;dict(x.items() + y.items())&quot;, &quot;x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))&quot;).timeit(100000)\r\n    41.484580039978027\r\n\r\nIMO the tiny slowdown between the first two is worth it for the readability.  In addition, keyword arguments for dictionary creation was only added in Python 2.3, whereas copy() and update() will work in older versions.\r\n\r\n\r\n  [1]: https://docs.python.org/2/library/copy.html\r\n  [2]: https://docs.python.org/2/library/timeit.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1224729536, "answer_id": 228366, "path": "stack.django.answer", "score": 108, "up_vote_count": 108, "is_accepted": false, "last_activity_date": 1420857175, "last_edit_date": 1420857175, "body_markdown": "In a follow-up answer, you asked about the relative performance of these two alternatives:\r\n\r\n    z1 = dict(x.items() + y.items())\r\n    z2 = dict(x, **y)\r\n\r\nOn my machine, at least (a fairly ordinary x86_64 running Python 2.5.2), alternative `z2` is not only shorter and simpler but also significantly faster.  You can verify this for yourself using the `timeit` module that comes with Python.\r\n\r\nExample 1: identical dictionaries mapping 20 consecutive integers to themselves:\r\n\r\n    % python -m timeit -s &#39;x=y=dict((i,i) for i in range(20))&#39; &#39;z1=dict(x.items() + y.items())&#39;\r\n    100000 loops, best of 3: 5.67 usec per loop\r\n    % python -m timeit -s &#39;x=y=dict((i,i) for i in range(20))&#39; &#39;z2=dict(x, **y)&#39; \r\n    100000 loops, best of 3: 1.53 usec per loop\r\n\r\n`z2` wins by a factor of 3.5 or so.  Different dictionaries seem to yield quite different results, but `z2` always seems to come out ahead.  (If you get inconsistent results for the *same* test, try passing in `-r` with a number larger than the default 3.)\r\n\r\nExample 2: non-overlapping dictionaries mapping 252 short strings to integers and vice versa:\r\n\r\n    % python -m timeit -s &#39;from htmlentitydefs import codepoint2name as x, name2codepoint as y&#39; &#39;z1=dict(x.items() + y.items())&#39;\r\n    1000 loops, best of 3: 260 usec per loop\r\n    % python -m timeit -s &#39;from htmlentitydefs import codepoint2name as x, name2codepoint as y&#39; &#39;z2=dict(x, **y)&#39;               \r\n    10000 loops, best of 3: 26.9 usec per loop\r\n\r\n`z2` wins by about a factor of 10.  That&#39;s a pretty big win in my book!\r\n\r\nAfter comparing those two, I wondered if `z1`&#39;s poor performance could be attributed to the overhead of constructing the two item lists, which in turn led me to wonder if this variation might work better:\r\n\r\n    from itertools import chain\r\n    z3 = dict(chain(x.iteritems(), y.iteritems()))\r\n\r\nA few quick tests, e.g.\r\n\r\n    % python -m timeit -s &#39;from itertools import chain; from htmlentitydefs import codepoint2name as x, name2codepoint as y&#39; &#39;z3=dict(chain(x.iteritems(), y.iteritems()))&#39;\r\n    10000 loops, best of 3: 66 usec per loop\r\n\r\nlead me to conclude that `z3` is somewhat faster than `z1`, but not nearly as fast as `z2`.  Definitely not worth all the extra typing.\r\n\r\nThis discussion is still missing something important, which is a performance comparison of these alternatives with the &quot;obvious&quot; way of merging two lists: using the `update` method.  To try to keep things on an equal footing with the expressions, none of which modify x or y, I&#39;m going to make a copy of x instead of modifying it in-place, as follows:\r\n\r\n    z0 = dict(x)\r\n    z0.update(y)\r\n\r\nA typical result:\r\n\r\n    % python -m timeit -s &#39;from htmlentitydefs import codepoint2name as x, name2codepoint as y&#39; &#39;z0=dict(x); z0.update(y)&#39;\r\n    10000 loops, best of 3: 26.9 usec per loop\r\n\r\nIn other words, `z0` and `z2` seem to have essentially identical performance.  Do you think this might be a coincidence?  I don&#39;t....\r\n\r\nIn fact, I&#39;d go so far as to claim that it&#39;s impossible for pure Python code to do any better than this.  And if you can do significantly better in a C extension module, I imagine the Python folks might well be interested in incorporating your code (or a variation on your approach) into the Python core.  Python uses `dict` in lots of places; optimizing its operations is a big deal.\r\n\r\nYou could also write this as\r\n\r\n    z0 = x.copy()\r\n    z0.update(y)\r\n\r\nas Tony does, but (not surprisingly) the difference in notation turns out not to have any measurable effect on performance.  Use whichever looks right to you.  Of course, he&#39;s absolutely correct to point out that the two-statement version is much easier to understand."}, {"tags": [], "down_vote_count": 0, "creation_date": 1287082515, "answer_id": 3936548, "path": "stack.django.answer", "score": 51, "up_vote_count": 51, "is_accepted": false, "last_activity_date": 1287082515, "body_markdown": "The best version I could think while not using copy would be:\r\n\r\n    from itertools import chain\r\n    x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    dict(chain(x.iteritems(), y.iteritems()))\r\n\r\nIt&#39;s faster than `dict(x.items() + y.items())` but not as fast as `n = copy(a); n.update(b)`, at least on CPython. This version also works in Python 3 if you change `iteritems()` to `items()`, which is automatically done by the 2to3 tool.\r\n\r\nPersonally I like this version best because it describes fairly good what I want in a single  functional syntax. The only minor problem is that it doesn&#39;t make completely obvious that values from y takes precedence over values from x, but I don&#39;t believe it&#39;s difficult to figure that out."}, {"tags": [], "down_vote_count": 2, "creation_date": 1318608753, "answer_id": 7770473, "path": "stack.django.answer", "score": 30, "up_vote_count": 32, "is_accepted": false, "last_activity_date": 1318608753, "body_markdown": "While the question has already been answered several times,\r\nthis simple solution to the problem has not been listed yet.\r\n\r\n    x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    z4 = {}\r\n    z4.update(x)\r\n    z4.update(y)\r\n\r\nIt is as fast as z0 and the evil z2 mentioned above, but easy to understand and change.\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1322071703, "answer_id": 8247023, "path": "stack.django.answer", "score": 22, "up_vote_count": 24, "is_accepted": false, "last_activity_date": 1322072448, "last_edit_date": 1322072448, "body_markdown": "If you think lambdas are evil then read no further.\r\nAs requested, you can write the fast and memory-efficient solution with one expression:\r\n\r\n    x = {&#39;a&#39;:1, &#39;b&#39;:2}\r\n    y = {&#39;b&#39;:10, &#39;c&#39;:11}\r\n    z = (lambda a, b: (lambda a_copy: a_copy.update(b) or a_copy)(a.copy()))(x, y)\r\n    print z\r\n    {&#39;a&#39;: 1, &#39;c&#39;: 11, &#39;b&#39;: 10}\r\n    print x\r\n    {&#39;a&#39;: 1, &#39;b&#39;: 2}\r\n\r\nAs suggested above, using two lines or writing a function is probably a better way to go."}, {"tags": [], "down_vote_count": 1, "creation_date": 1322567535, "answer_id": 8310229, "path": "stack.django.answer", "score": 54, "up_vote_count": 55, "is_accepted": false, "last_activity_date": 1450437555, "last_edit_date": 1450437555, "body_markdown": "&lt;h1&gt;Recursively/deep update a dict&lt;/h1&gt;\r\n \r\n&lt;pre&gt;&lt;code&gt;def deepupdate(original, update):\r\n    &quot;&quot;&quot;\r\n    Recursively update a dict.\r\n    Subdict&#39;s won&#39;t be overwritten but also updated.\r\n    &quot;&quot;&quot;\r\n    for key, value in original.iteritems(): \r\n        if key not in update:\r\n            update[key] = value\r\n        elif isinstance(value, dict):\r\n            deepupdate(value, update[key]) \r\n    return update&lt;/code&gt;&lt;/pre&gt;\r\nDemonstration:\r\n&lt;pre&gt;&lt;code&gt;pluto_original = {\r\n    &#39;name&#39;: &#39;Pluto&#39;,\r\n    &#39;details&#39;: {\r\n        &#39;tail&#39;: True,\r\n        &#39;color&#39;: &#39;orange&#39;\r\n    }\r\n}\r\n\r\npluto_update = {\r\n    &#39;name&#39;: &#39;Pluutoo&#39;,\r\n    &#39;details&#39;: {\r\n        &#39;color&#39;: &#39;blue&#39;\r\n    }\r\n}\r\n\r\nprint deepupdate(pluto_original, pluto_update)&lt;/code&gt;&lt;/pre&gt;\r\nOutputs:\r\n&lt;pre&gt;&lt;code&gt;{\r\n    &#39;name&#39;: &#39;Pluutoo&#39;,\r\n    &#39;details&#39;: {\r\n        &#39;color&#39;: &#39;blue&#39;,\r\n        &#39;tail&#39;: True\r\n    }\r\n}&lt;/code&gt;&lt;/pre&gt;\r\nThanks rednaw for edits."}, {"tags": [], "down_vote_count": 1, "creation_date": 1344037010, "answer_id": 11804613, "path": "stack.django.answer", "score": 9, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1344037010, "body_markdown": "Even though the answers were good for this _shallow_ dictionary, none of the methods defined here actually do a deep dictionary merge.\r\n\r\nExamples follow:\r\n\r\n    a = { &#39;one&#39;: { &#39;depth_2&#39;: True }, &#39;two&#39;: True }\r\n    b = { &#39;one&#39;: { &#39;extra&#39;: False } }\r\n    print dict(a.items() + b.items())\r\n\r\nOne would expect a result of something like this:\r\n\r\n    { &#39;one&#39;: { &#39;extra&#39;: False&#39;, &#39;depth_2&#39;: True }, &#39;two&#39;: True }\r\n\r\nInstead, we get this:\r\n    \r\n    {&#39;two&#39;: True, &#39;one&#39;: {&#39;extra&#39;: False}}\r\n\r\nThe &#39;one&#39; entry should have had &#39;depth_2&#39; and &#39;extra&#39; as items inside its dictionary if it truly was a merge.\r\n\r\n\r\nUsing chain also, does not work:\r\n\r\n    from itertools import chain\r\n    print dict(chain(a.iteritems(), b.iteritems()))\r\n\r\nResults in:\r\n\r\n    {&#39;two&#39;: True, &#39;one&#39;: {&#39;extra&#39;: False}}\r\n\r\nThe deep merge that rcwesick gave also creates the same result.\r\n\r\nYes, it will work to merge the sample dictionaries, but none of them are a generic mechanism to merge.  I&#39;ll update this later once I write a method that does a true merge.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1344245084, "answer_id": 11825563, "path": "stack.django.answer", "score": 28, "up_vote_count": 28, "is_accepted": false, "last_activity_date": 1344245407, "last_edit_date": 1344245407, "body_markdown": "    def dict_merge(a, b):\r\n      c = a.copy()\r\n      c.update(b)\r\n      return c\r\n    \r\n    new = dict_merge(old, extras)\r\n\r\nAmong such shady and dubious answers, this shining example is the one and only good way to merge dicts in Python, endorsed by dictator for life *Guido van Rossum* himself!  Someone else suggested half of this, but did not put it in a function.\r\n\r\n    print dict_merge(\r\n          {&#39;color&#39;:&#39;red&#39;, &#39;model&#39;:&#39;Mini&#39;},\r\n          {&#39;model&#39;:&#39;Ferrari&#39;, &#39;owner&#39;:&#39;Carl&#39;})\r\ngives:\r\n\r\n    {&#39;color&#39;: &#39;red&#39;, &#39;owner&#39;: &#39;Carl&#39;, &#39;model&#39;: &#39;Ferrari&#39;}"}, {"tags": [], "down_vote_count": 2, "creation_date": 1350439785, "answer_id": 12926103, "path": "stack.django.answer", "score": 10, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1475432177, "last_edit_date": 1475432177, "body_markdown": "**Two dictionaries**\r\n    \r\n    def union2(dict1, dict2):\r\n        return dict(list(dict1.items()) + list(dict2.items()))\r\n\r\n**_n_ dictionaries**\r\n\r\n    def union(*dicts):\r\n        return dict(itertools.chain.from_iterable(dct.items() for dct in dicts))\r\n\r\n`sum` has bad performance. See https://mathieularose.com/how-not-to-flatten-a-list-of-lists-in-python/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1367118938, "answer_id": 16259217, "path": "stack.django.answer", "score": 64, "up_vote_count": 64, "is_accepted": false, "last_activity_date": 1411805561, "last_edit_date": 1411805561, "body_markdown": "In Python 3, you can use [*collections.ChainMap*][1] which groups multiple dicts or other mappings together to create a single, updateable view:\r\n\r\n    &gt;&gt;&gt; from collections import ChainMap\r\n    &gt;&gt;&gt; x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    &gt;&gt;&gt; y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    &gt;&gt;&gt; z = ChainMap({}, y, x)\r\n    &gt;&gt;&gt; for k, v in z.items():\r\n    \t    print(k, &#39;--&gt;&#39;, v)\r\n    \t\r\n    a --&gt; 1\r\n    b --&gt; 10\r\n    c --&gt; 11\r\n\r\n  [1]: http://docs.python.org/3/library/collections.html#collections.ChainMap"}, {"tags": [], "down_vote_count": 3, "creation_date": 1369645460, "answer_id": 16769722, "path": "stack.django.answer", "score": 4, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1369645460, "body_markdown": "Using  a dict comprehension, you may\r\n\r\n    x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    \r\n    dc = {xi:(x[xi] if xi not in list(y.keys()) \r\n               else y[xi]) for xi in list(x.keys())+(list(y.keys()))}\r\ngives\r\n\r\n    &gt;&gt;&gt; dc\r\n    {&#39;a&#39;: 1, &#39;c&#39;: 11, &#39;b&#39;: 10}\r\n\r\nNote the syntax for `if else` in comprehension \r\n\r\n    { (some_key if condition else default_key):(something_if_true if condition \r\n              else something_if_false) for key, value in dict_.items() }"}, {"tags": [], "down_vote_count": 6, "creation_date": 1373526792, "answer_id": 17587183, "path": "stack.django.answer", "score": -3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1410637887, "last_edit_date": 1410637887, "body_markdown": "Here is some code, it seems to work ok:\r\n\r\n    def merge(d1, d2, mode=0):\r\n        if not type(d2) is dict:\r\n            raise Exception(&quot;d2 is not a dict&quot;)\r\n\r\n        if not type(d1) is dict:\r\n            if mode == 0:\r\n                raise Exception(&quot;d1 is not a dict&quot;)\r\n            return d2\r\n\r\n        result = dict(d1)\r\n\r\n        for k, v in d2.iteritems():\r\n            if k in result and type(v) is dict:\r\n                result[k] = merge(result[k], v, 1)\r\n            else:\r\n                if mode == 1:\r\n                    result.update(d2)\r\n                else:\r\n                    result[k] = v\r\n        return result"}, {"tags": [], "down_vote_count": 0, "creation_date": 1374212959, "answer_id": 17738920, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1374212959, "body_markdown": "Drawing on ideas here and elsewhere I&#39;ve comprehended a function:\r\n\r\n    def merge(*dicts, **kv): \r\n          return { k:v for d in list(dicts) + [kv] for k,v in d.items() }\r\n\r\nUsage (tested in python 3):\r\n\r\n    assert (merge({1:11,&#39;a&#39;:&#39;aaa&#39;},{1:99, &#39;b&#39;:&#39;bbb&#39;},foo=&#39;bar&#39;)==\\\r\n        {1: 99, &#39;foo&#39;: &#39;bar&#39;, &#39;b&#39;: &#39;bbb&#39;, &#39;a&#39;: &#39;aaa&#39;})\r\n\r\n    assert (merge(foo=&#39;bar&#39;)=={&#39;foo&#39;: &#39;bar&#39;})\r\n\r\n    assert (merge({1:11},{1:99},foo=&#39;bar&#39;,baz=&#39;quux&#39;)==\\\r\n        {1: 99, &#39;foo&#39;: &#39;bar&#39;, &#39;baz&#39;:&#39;quux&#39;})\r\n\r\n    assert (merge({1:11},{1:99})=={1: 99})\r\n\r\nYou could use a lambda instead."}, {"tags": [], "down_vote_count": 1, "creation_date": 1375910588, "answer_id": 18114065, "path": "stack.django.answer", "score": 11, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1410637938, "last_edit_date": 1495542893, "body_markdown": "Abuse leading to a one-expression solution for [Matthew&#39;s answer](https://stackoverflow.com/a/39437/15055):\r\n\r\n    &gt;&gt;&gt; x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    &gt;&gt;&gt; y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    &gt;&gt;&gt; z = (lambda f=x.copy(): (f.update(y), f)[1])()\r\n    &gt;&gt;&gt; z\r\n    {&#39;a&#39;: 1, &#39;c&#39;: 11, &#39;b&#39;: 10}\r\n\r\nYou said you wanted one expression, so I abused `lambda` to bind a name, and tuples to override lambda&#39;s one-expression limit. Feel free to cringe.\r\n\r\nYou could also do this of course if you don&#39;t care about copying it:\r\n\r\n    &gt;&gt;&gt; x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    &gt;&gt;&gt; y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    &gt;&gt;&gt; z = (x.update(y), x)[1]\r\n    &gt;&gt;&gt; z\r\n    {&#39;a&#39;: 1, &#39;b&#39;: 10, &#39;c&#39;: 11}"}, {"tags": [], "down_vote_count": 1, "creation_date": 1378498738, "answer_id": 18665968, "path": "stack.django.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1378498738, "body_markdown": "`**` creates an intermediary dict, which means that the total number of copies\r\nis actually higher doing the `dict(one, **two)` form, but all that happens in C\r\nso it&#39;s still generally faster than going to itertools, unless there are a huge number of copies (or, probably, if the copies are very expensive). As always if you actually care about speed you should time your use case.\r\n\r\nTiming on Python 2.7.3 with an empty dict:\r\n\r\n    $ python -m timeit &quot;dict({}, **{})&quot;\r\n    1000000 loops, best of 3: 0.405 usec per loop\r\n\r\n    $ python -m timeit -s &quot;from itertools import chain&quot; \\\r\n        &quot;dict(chain({}.iteritems(), {}.iteritems()))&quot;\r\n    1000000 loops, best of 3: 1.18 usec per loop\r\n\r\nWith 10,000 (tiny) items:\r\n\r\n    $ python -m timeit -s &#39;d = {i: str(i) for i in xrange(10000)}&#39; \\\r\n        &quot;dict(d, **d)&quot;\r\n    1000 loops, best of 3: 550 usec per loop\r\n\r\n    $ python -m timeit -s &quot;from itertools import chain&quot; -s &#39;d = {i: str(i) for i in xrange(10000)}&#39; \\\r\n        &quot;dict(chain(d.iteritems(), d.iteritems()))&quot;\r\n    1000 loops, best of 3: 1.11 msec per loop\r\n\r\nWith 100,000 items:\r\n\r\n    $ python -m timeit -s &#39;d = {i: str(i) for i in xrange(100000)}&#39; \\\r\n        &quot;dict(d, **d)&quot;\r\n    10 loops, best of 3: 19.6 msec per loop\r\n\r\n    $ python -m timeit -s &quot;from itertools import chain&quot; -s &#39;d = {i: str(i) for i in xrange(100000)}&#39; \\\r\n        &quot;dict(chain(d.iteritems(), d.iteritems()))&quot;\r\n    10 loops, best of 3: 20.1 msec per loop\r\n\r\nWith 1,000,000 items:\r\n\r\n    $ python -m timeit -s &#39;d = {i: str(i) for i in xrange(1000000)}&#39; \\\r\n        &quot;dict(d, **d)&quot;\r\n    10 loops, best of 3: 273 msec per loop\r\n\r\n    $ python -m timeit -s &quot;from itertools import chain&quot; -s &#39;d = {i: str(i) for i in xrange(1000000)}&#39; \\\r\n        &quot;dict(chain(d.iteritems(), d.iteritems()))&quot;\r\n    10 loops, best of 3: 233 msec per loop\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1381342148, "answer_id": 19279501, "path": "stack.django.answer", "score": 15, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1381757249, "last_edit_date": 1495542893, "body_markdown": "In python3, the `items` method [no longer returns a list][0], but rather a *view*, which acts like a set. In this case you&#39;ll need to take the set union since concatenating with `+` won&#39;t work:\r\n\r\n    dict(x.items() | y.items())\r\n\r\nFor python3-like behavior in version 2.7, the `viewitems` method should work in place of `items`:\r\n\r\n    dict(x.viewitems() | y.viewitems())\r\n\r\nI prefer this notation anyways since it seems more natural to think of it as a set union operation rather than concatenation (as the title shows).\r\n\r\n**Edit:**\r\n\r\nA couple more points for python 3. First, note that the `dict(x, **y)` trick won&#39;t work in python 3 unless the keys in `y` are strings.\r\n\r\nAlso, Raymond Hettinger&#39;s Chainmap [answer][1] is pretty elegant, since it can take an arbitrary number of dicts as arguments, but [from the docs][2] it looks like it sequentially looks through a list of all the dicts for each lookup:\r\n\r\n&gt; Lookups search the underlying mappings successively until a key is found.\r\n\r\n This can slow you down if you have a lot of lookups in your application:\r\n\r\n    In [1]: from collections import ChainMap\r\n    In [2]: from string import ascii_uppercase as up, ascii_lowercase as lo; x = dict(zip(lo, up)); y = dict(zip(up, lo))\r\n    In [3]: chainmap_dict = ChainMap(y, x)\r\n    In [4]: union_dict = dict(x.items() | y.items())\r\n    In [5]: timeit for k in union_dict: union_dict[k]\r\n    100000 loops, best of 3: 2.15 &#181;s per loop\r\n    In [6]: timeit for k in chainmap_dict: chainmap_dict[k]\r\n    10000 loops, best of 3: 27.1 &#181;s per loop\r\n\r\nSo about an order of magnitude slower for lookups. I&#39;m a fan of Chainmap, but looks less practical where there may be many lookups.\r\n\r\n\r\n[0]: http://docs.python.org/dev/whatsnew/3.0.html#views-and-iterators-instead-of-lists\r\n[1]: https://stackoverflow.com/a/16259217/386279\r\n[2]: http://docs.python.org/dev/library/collections"}, {"tags": [], "down_vote_count": 0, "creation_date": 1384336891, "answer_id": 19950727, "path": "stack.django.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1384336891, "body_markdown": "    &gt;&gt;&gt; x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    &gt;&gt;&gt; y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    &gt;&gt;&gt; x, z = dict(x), x.update(y) or x\r\n    &gt;&gt;&gt; x\r\n    {&#39;a&#39;: 1, &#39;b&#39;: 2}\r\n    &gt;&gt;&gt; y\r\n    {&#39;c&#39;: 11, &#39;b&#39;: 10}\r\n    &gt;&gt;&gt; z\r\n    {&#39;a&#39;: 1, &#39;c&#39;: 11, &#39;b&#39;: 10}\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1386094314, "answer_id": 20358548, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1386094314, "body_markdown": "The problem I have with solutions listed to date is that, in the merged dictionary, the value for key &quot;b&quot; is 10 but, to my way of thinking, it should be 12.\r\nIn that light, I present the following:\r\n\r\n    import timeit\r\n    \r\n    n=100000\r\n    su = &quot;&quot;&quot;\r\n    x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    &quot;&quot;&quot;\r\n    \r\n    def timeMerge(f,su,niter):\r\n        print &quot;{:4f} sec for: {:30s}&quot;.format(timeit.Timer(f,setup=su).timeit(n),f)\r\n    \r\n    timeMerge(&quot;dict(x, **y)&quot;,su,n)\r\n    timeMerge(&quot;x.update(y)&quot;,su,n)\r\n    timeMerge(&quot;dict(x.items() + y.items())&quot;,su,n)\r\n    timeMerge(&quot;for k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k] &quot;,su,n)\r\n    \r\n    #confirm for loop adds b entries together\r\n    x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    for k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k]\r\n    print &quot;confirm b elements are added:&quot;,x\r\n\r\n#Results:\r\n\r\n    0.049465 sec for: dict(x, **y)\r\n    0.033729 sec for: x.update(y)                   \r\n    0.150380 sec for: dict(x.items() + y.items())   \r\n    0.083120 sec for: for k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k]\r\n\r\n    confirm b elements are added: {&#39;a&#39;: 1, &#39;c&#39;: 11, &#39;b&#39;: 12}"}, {"tags": [], "down_vote_count": 2, "creation_date": 1386230525, "answer_id": 20394520, "path": "stack.django.answer", "score": 2, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1403757403, "last_edit_date": 1403757403, "body_markdown": "I have a solution which is not specified here(Man I LOVE python) :-)\r\n\r\n    z = {}\r\n    z.update(x) or z.update(y)\r\n\r\nThis will not update x as well as y. Performance? I don&#39;t think it will be terribly slow :-)\r\n\r\nNOTE: It is supposed to be &#39;or&#39; operation and not &#39;and&#39; operation. Edited to correct the code."}, {"tags": [], "down_vote_count": 1, "creation_date": 1393724679, "answer_id": 22122836, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1393724679, "body_markdown": "It&#39;s so silly that `.update` returns nothing.  \r\nI just use a simple helper function to solve the problem:\r\n\r\n    def merge(dict1,*dicts):\r\n        for dict2 in dicts:\r\n            dict1.update(dict2)\r\n        return dict1\r\n\r\nExamples:\r\n\r\n    merge(dict1,dict2)\r\n    merge(dict1,dict2,dict3)\r\n    merge(dict1,dict2,dict3,dict4)\r\n    merge({},dict1,dict2)  # this one returns a new copy"}, {"tags": [], "down_vote_count": 1, "creation_date": 1412044579, "answer_id": 26111877, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1420856518, "last_edit_date": 1420856518, "body_markdown": "A union of the OP&#39;s two dictionaries would be something like:\r\n\r\n    {&#39;a&#39;: 1, &#39;b&#39;: 2, 10, &#39;c&#39;: 11}\r\n\r\nSpecifically, the union of two entities(`x` and `y`) contains all the elements of `x` and/or `y`.\r\nUnfortunately, what the OP asks for is not a union, despite the title of the post.\r\n\r\nMy code below is neither elegant nor a one-liner, but I believe it is consistent with the meaning of union.\r\n\r\nFrom the OP&#39;s example:\r\n\r\n    x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n\r\n    z = {}\r\n    for k, v in x.items():\r\n        if not k in z:\r\n            z[k] = [(v)]\r\n        else:\r\n            z[k].append((v))\r\n    for k, v in y.items():\r\n        if not k in z:\r\n            z[k] = [(v)]\r\n        else:\r\n            z[k].append((v))\r\n\r\n    {&#39;a&#39;: [1], &#39;b&#39;: [2, 10], &#39;c&#39;: [11]}\r\n\r\nWhether one wants lists could be changed, but the above will work if a dictionary contains lists (and nested lists) as values in either dictionary.\r\n\r\n"}, {"tags": [], "down_vote_count": 8, "creation_date": 1415657508, "answer_id": 26853961, "path": "stack.django.answer", "score": 2795, "up_vote_count": 2803, "is_accepted": true, "last_activity_date": 1508447798, "last_edit_date": 1508447798, "body_markdown": "&gt; # How can I merge two Python dictionaries in a single expression?\r\n\r\nFor dictionaries `x` and `y`, `z` becomes a merged dictionary with values from `y` replacing those from `x`.\r\n\r\n- In Python 3.5 or greater, :\r\n\r\n        z = {**x, **y}\r\n\r\n- In Python 2, (or 3.4 or lower) write a function:\r\n\r\n        def merge_two_dicts(x, y):\r\n            z = x.copy()   # start with x&#39;s keys and values\r\n            z.update(y)    # modifies z with y&#39;s keys and values &amp; returns None\r\n            return z\r\n\r\n  and\r\n  \r\n        z = merge_two_dicts(x, y)\r\n\r\n## Explanation\r\n\r\nSay you have two dicts and you want to merge them into a new dict without altering the original dicts:\r\n\r\n    x = {&#39;a&#39;: 1, &#39;b&#39;: 2}\r\n    y = {&#39;b&#39;: 3, &#39;c&#39;: 4}\r\n\r\nThe desired result is to get a new dictionary (`z`) with the values merged, and the second dict&#39;s values overwriting those from the first.\r\n\r\n    &gt;&gt;&gt; z\r\n    {&#39;a&#39;: 1, &#39;b&#39;: 3, &#39;c&#39;: 4}\r\n\r\nA new syntax for this, proposed in [PEP 448][1] and [available as of Python 3.5][2], is \r\n\r\n    z = {**x, **y}\r\n\r\nAnd it is indeed a single expression. It is now showing as implemented in the [release schedule for 3.5, PEP 478][3], and it has now made its way into [What&#39;s New in Python 3.5][4] document.\r\n\r\nHowever, since many organizations are still on Python 2, you may wish to do this in a backwards compatible way. The classically Pythonic way, available in Python 2 and Python 3.0-3.4, is to do this as a two-step process:\r\n\r\n    z = x.copy()\r\n    z.update(y) # which returns None since it mutates z\r\n\r\nIn both approaches, `y` will come second and its values will replace `x`&#39;s values, thus `&#39;b&#39;` will point to `3` in our final result.\r\n\r\n# Not yet on Python 3.5, but want a *single expression*\r\n\r\nIf you are not yet on Python 3.5, or need to write backward-compatible code, and you want this in a *single expression*, the most performant while correct approach is to put it in a function:\r\n\r\n    def merge_two_dicts(x, y):\r\n        &quot;&quot;&quot;Given two dicts, merge them into a new dict as a shallow copy.&quot;&quot;&quot;\r\n        z = x.copy()\r\n        z.update(y)\r\n        return z\r\n\r\nand then you have a single expression:\r\n\r\n    z = merge_two_dicts(x, y)\r\n\r\nYou can also make a function to merge an undefined number of dicts, from zero to a very large number:\r\n\r\n    def merge_dicts(*dict_args):\r\n        &quot;&quot;&quot;\r\n        Given any number of dicts, shallow copy and merge into a new dict,\r\n        precedence goes to key value pairs in latter dicts.\r\n        &quot;&quot;&quot;\r\n        result = {}\r\n        for dictionary in dict_args:\r\n            result.update(dictionary)\r\n        return result\r\n\r\nThis function will work in Python 2 and 3 for all dicts. e.g. given dicts `a` to `g`:\r\n\r\n    z = merge_dicts(a, b, c, d, e, f, g) \r\n\r\nand key value pairs in `g` will take precedence over dicts `a` to `f`, and so on.\r\n\r\n# Critiques of Other Answers\r\n\r\nDon&#39;t use what you see in the formerly accepted answer:\r\n\r\n    z = dict(x.items() + y.items())\r\n\r\nIn Python 2, you create two lists in memory for each dict, create a third list in memory with length equal to the length of the first two put together, and then discard all three lists to create the dict. **In Python 3, this will fail** because you&#39;re adding two `dict_items` objects together, not two lists - \r\n\r\n    &gt;&gt;&gt; c = dict(a.items() + b.items())\r\n    Traceback (most recent call last):\r\n      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    TypeError: unsupported operand type(s) for +: &#39;dict_items&#39; and &#39;dict_items&#39;\r\n\r\nand you would have to explicitly create them as lists, e.g. `z = dict(list(x.items()) + list(y.items()))`. This is a waste of resources and computation power. \r\n\r\nSimilarly, taking the union of `items()` in Python 3 (`viewitems()` in Python 2.7) will also fail when values are unhashable objects (like lists, for example). Even if your values are hashable, **since sets are semantically unordered, the behavior is undefined in regards to precedence. So don&#39;t do this:**\r\n\r\n    &gt;&gt;&gt; c = dict(a.items() | b.items())\r\n\r\nThis example demonstrates what happens when values are unhashable:\r\n\r\n    &gt;&gt;&gt; x = {&#39;a&#39;: []}\r\n    &gt;&gt;&gt; y = {&#39;b&#39;: []}\r\n    &gt;&gt;&gt; dict(x.items() | y.items())\r\n    Traceback (most recent call last):\r\n      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    TypeError: unhashable type: &#39;list&#39;\r\n\r\nHere&#39;s an example where y should have precedence, but instead the value from x is retained due to the arbitrary order of sets:\r\n\r\n    &gt;&gt;&gt; x = {&#39;a&#39;: 2}\r\n    &gt;&gt;&gt; y = {&#39;a&#39;: 1}\r\n    &gt;&gt;&gt; dict(x.items() | y.items())\r\n    {&#39;a&#39;: 2}\r\n\r\nAnother hack you should not use:\r\n\r\n    z = dict(x, **y)\r\n\r\nThis uses the `dict` constructor, and is very fast and memory efficient (even slightly more-so than our two-step process) but unless you know precisely what is happening here (that is, the second dict is being passed as keyword arguments to the dict constructor), it&#39;s difficult to read, it&#39;s not the intended usage, and so it is not Pythonic. \r\n\r\nHere&#39;s an example of the usage being [remediated in django][5].\r\n\r\nDicts are intended to take hashable keys (e.g. frozensets or tuples), but **this method fails in Python 3 when keys are not strings.**\r\n\r\n    &gt;&gt;&gt; c = dict(a, **b)\r\n    Traceback (most recent call last):\r\n      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    TypeError: keyword arguments must be strings\r\n\r\nFrom the [mailing list][6], Guido van Rossum, the creator of the language, wrote:\r\n&gt; I am fine with\r\n&gt; declaring dict({}, **{1:3}) illegal, since after all it is abuse of\r\n&gt; the ** mechanism.\r\n\r\nand \r\n\r\n&gt; Apparently dict(x, **y) is going around as &quot;cool hack&quot; for &quot;call\r\n&gt; x.update(y) and return x&quot;. Personally I find it more despicable than\r\n&gt; cool.\r\n\r\nIt is my understanding (as well as the understanding of the [creator of the language][7]) that the intended usage for `dict(**y)` is for creating dicts for readability purposes, e.g.:\r\n\r\n    dict(a=1, b=10, c=11)\r\n\r\ninstead of \r\n\r\n    {&#39;a&#39;: 1, &#39;b&#39;: 10, &#39;c&#39;: 11}\r\n\r\n## Response to comments\r\n\r\n&gt; Despite what Guido says, `dict(x, **y)` is in line with the dict specification, which btw. works for both Python 2 and 3. The fact that this only works for string keys is a direct consequence of how keyword parameters work and not a short-comming of dict. Nor is using the ** operator in this place an abuse of the mechanism, in fact ** was designed precisely to pass dicts as keywords. \r\n\r\nAgain, it doesn&#39;t work for 3 when keys are non-strings. The implicit calling contract is that namespaces take ordinary dicts, while users must only pass keyword arguments that are strings. All other callables enforced it. `dict` broke this consistency in Python 2:\r\n\r\n    &gt;&gt;&gt; foo(**{(&#39;a&#39;, &#39;b&#39;): None})\r\n    Traceback (most recent call last):\r\n      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    TypeError: foo() keywords must be strings\r\n    &gt;&gt;&gt; dict(**{(&#39;a&#39;, &#39;b&#39;): None})\r\n    {(&#39;a&#39;, &#39;b&#39;): None}\r\n\r\nThis inconsistency was bad given other implementations of Python (Pypy, Jython, IronPython). Thus it was fixed in Python 3, as this usage could be a breaking change.\r\n\r\nI submit to you that it is malicious incompetence to intentionally write code that only works in one version of a language or that only works given certain arbitrary constraints.\r\n\r\nAnother comment:\r\n\r\n&gt; `dict(x.items() + y.items())` is still the most readable solution for Python 2. Readability counts. \r\n\r\nMy response: `merge_two_dicts(x, y)` actually seems much clearer to me, if we&#39;re actually concerned about readability. And it is not forward compatible, as Python 2 is increasingly deprecated.\r\n\r\n# Less Performant But Correct Ad-hocs\r\n\r\nThese approaches are less performant, but they will provide correct behavior.\r\nThey will be *much less* performant than `copy` and `update` or the new unpacking because they iterate through each key-value pair at a higher level of abstraction, but they *do* respect the order of precedence (latter dicts have precedence)\r\n\r\nYou can also chain the dicts manually inside a dict comprehension:\r\n\r\n    {k: v for d in dicts for k, v in d.items()} # iteritems in Python 2.7\r\n\r\nor in python 2.6 (and perhaps as early as 2.4 when generator expressions were introduced):\r\n\r\n    dict((k, v) for d in dicts for k, v in d.items())\r\n\r\n`itertools.chain` will chain the iterators over the key-value pairs in the correct order:\r\n\r\n    import itertools\r\n    z = dict(itertools.chain(x.iteritems(), y.iteritems()))\r\n\r\n# Performance Analysis\r\n\r\nI&#39;m only going to do the performance analysis of the usages known to behave correctly. \r\n\r\n    import timeit\r\n\r\nThe following is done on Ubuntu 14.04\r\n\r\nIn Python 2.7 (system Python):\r\n\r\n    &gt;&gt;&gt; min(timeit.repeat(lambda: merge_two_dicts(x, y)))\r\n    0.5726828575134277\r\n    &gt;&gt;&gt; min(timeit.repeat(lambda: {k: v for d in (x, y) for k, v in d.items()} ))\r\n    1.163769006729126\r\n    &gt;&gt;&gt; min(timeit.repeat(lambda: dict(itertools.chain(x.iteritems(), y.iteritems()))))\r\n    1.1614501476287842\r\n    &gt;&gt;&gt; min(timeit.repeat(lambda: dict((k, v) for d in (x, y) for k, v in d.items())))\r\n    2.2345519065856934\r\n\r\nIn Python 3.5 (deadsnakes PPA):\r\n\r\n    &gt;&gt;&gt; min(timeit.repeat(lambda: {**x, **y}))\r\n    0.4094954460160807\r\n    &gt;&gt;&gt; min(timeit.repeat(lambda: merge_two_dicts(x, y)))\r\n    0.7881555100320838\r\n    &gt;&gt;&gt; min(timeit.repeat(lambda: {k: v for d in (x, y) for k, v in d.items()} ))\r\n    1.4525277839857154\r\n    &gt;&gt;&gt; min(timeit.repeat(lambda: dict(itertools.chain(x.items(), y.items()))))\r\n    2.3143140770262107\r\n    &gt;&gt;&gt; min(timeit.repeat(lambda: dict((k, v) for d in (x, y) for k, v in d.items())))\r\n    3.2069112799945287\r\n\r\n## Resources on Dictionaries\r\n\r\n- [My explanation of Python&#39;s **dictionary implementation**, updated for 3.6.][8]\r\n- [Answer on how to add new keys to a dictionary][9]\r\n- [Mapping two lists into a dictionary][10]\r\n- The official Python [docs on dictionaries][11] \r\n- [The Dictionary Even Mightier][12] - talk by Brandon Rhodes at Pycon 2017\r\n- [Modern Python Dictionaries, A Confluence of Great Ideas][13] - talk by Raymond Hettinger at Pycon 2017\r\n\r\n\r\n  [1]: https://www.python.org/dev/peps/pep-0448\r\n  [2]: https://mail.python.org/pipermail/python-dev/2015-February/138564.html\r\n  [3]: https://www.python.org/dev/peps/pep-0478/#features-for-3-5\r\n  [4]: https://docs.python.org/dev/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations\r\n  [5]: https://code.djangoproject.com/attachment/ticket/13357/django-pypy.2.diff\r\n  [6]: https://mail.python.org/pipermail/python-dev/2010-April/099459.html\r\n  [7]: https://mail.python.org/pipermail/python-dev/2010-April/099485.html\r\n  [8]: https://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented/44509302#44509302\r\n  [9]: https://stackoverflow.com/questions/1024847/add-new-keys-to-a-dictionary/27208535#27208535\r\n  [10]: https://stackoverflow.com/questions/209840/map-two-lists-into-a-dictionary-in-python/33737067#33737067\r\n  [11]: https://docs.python.org/3/tutorial/datastructures.html#dictionaries\r\n  [12]: https://www.youtube.com/watch?v=66P5FMkWoVU\r\n  [13]: https://www.youtube.com/watch?v=npw4s1QTmPg"}, {"tags": [], "down_vote_count": 0, "creation_date": 1424986072, "answer_id": 28753078, "path": "stack.django.answer", "score": 36, "up_vote_count": 36, "is_accepted": false, "last_activity_date": 1424986072, "body_markdown": "Python 3.5 (PEP 448) allows a nicer syntax option:\r\n\r\n    x = {&#39;a&#39;: 1, &#39;b&#39;: 1}\r\n    y = {&#39;a&#39;: 2, &#39;c&#39;: 2}\r\n    final = {**x, **y} \r\n    final\r\n    # {&#39;a&#39;: 2, &#39;b&#39;: 1, &#39;c&#39;: 2}\r\n\r\nOr even \r\n\r\n    final = {&#39;a&#39;: 1, &#39;b&#39;: 1, **x, **y}\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1426896372, "answer_id": 29177685, "path": "stack.django.answer", "score": 3, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1426896372, "body_markdown": "    a = {1: 2, 3: 4, 5: 6}\r\n    b = {7:8, 1:2}\r\n    combined = dict(a.items() + b.items())\r\n    print combined"}, {"tags": [], "down_vote_count": 0, "creation_date": 1437144443, "answer_id": 31478567, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1437144443, "body_markdown": "This can be done with a single dict comprehension:\r\n\r\n    &gt;&gt;&gt; x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    &gt;&gt;&gt; y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    &gt;&gt;&gt; { key: y[key] if key in y else x[key]\r\n          for key in set(x) + set(y)\r\n        }\r\n\r\nIn my view the best answer for the &#39;single expression&#39; part as no extra functions are needed, and it is short."}, {"tags": [], "down_vote_count": 0, "creation_date": 1438700098, "answer_id": 31812635, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1473161416, "last_edit_date": 1473161416, "body_markdown": "Simple solution using itertools that preserves order (latter dicts have precedence)\r\n\r\n    import itertools as it\r\n    merge = lambda *args: dict(it.chain.from_iterable(it.imap(dict.iteritems, args)))\r\n\r\nAnd it&#39;s usage:\r\n\r\n    &gt;&gt;&gt; x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    &gt;&gt;&gt; y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    &gt;&gt;&gt; merge(x, y)\r\n    {&#39;a&#39;: 1, &#39;b&#39;: 10, &#39;c&#39;: 11}\r\n\r\n    &gt;&gt;&gt; z = {&#39;c&#39;: 3, &#39;d&#39;: 4}\r\n    &gt;&gt;&gt; merge(x, y, z)\r\n    {&#39;a&#39;: 1, &#39;b&#39;: 10, &#39;c&#39;: 3, &#39;d&#39;: 4}"}, {"tags": [], "down_vote_count": 0, "creation_date": 1448888640, "answer_id": 33999337, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1448888640, "body_markdown": "    from collections import Counter\r\n    dict1 = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    dict2 = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    result = dict(Counter(dict1) + Counter(dict2))\r\n\r\nThis should solve your problem."}, {"tags": [], "down_vote_count": 0, "creation_date": 1453290382, "answer_id": 34899183, "path": "stack.django.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1475145925, "last_edit_date": 1475145925, "body_markdown": "Be pythonic. Use a [comprehension][1]:\r\n\r\n    z={i:d[i] for d in [x,y] for i in d}\r\n    \r\n    &gt;&gt;&gt; print z\r\n    {&#39;a&#39;: 1, &#39;c&#39;: 11, &#39;b&#39;: 10}\r\n\r\n  [1]: https://docs.python.org/2/tutorial/datastructures.html#dictionaries"}, {"tags": [], "down_vote_count": 0, "creation_date": 1459170807, "answer_id": 36263150, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1459170807, "body_markdown": "(For Python2.7* only; there are simpler solutions for Python3*.)\r\n\r\nIf you&#39;re not averse to importing a standard library module, you can do\r\n\r\n    from functools import reduce\r\n\r\n    def merge_dicts(*dicts):\r\n        return reduce(lambda a, d: a.update(d) or a, dicts, {})\r\n\r\n(The `or a` bit in the `lambda` is necessary because `dict.update` always returns `None` on success.)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1463587052, "answer_id": 37304637, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1463587052, "body_markdown": "I know this does not really fit the specifics of the questions (&quot;one liner&quot;), but since *none* of the answers above went into this direction while lots and lots of answers addressed the performance issue, I felt I should contribute my thoughts.\r\n\r\nDepending on the use case it might not be necessary to create a &quot;real&quot; merged dictionary of the given input dictionaries.  A *view* which does this might be sufficient in many cases, i. e. an object which acts *like* the merged dictionary would without computing it completely.  A lazy version of the merged dictionary, so to speak.\r\n\r\nIn Python, this is rather simple and can be done with the code shown at the end of my post.  This given, the answer to the original question would be:\r\n\r\n    z = MergeDict(x, y)\r\n\r\nWhen using this new object, it will behave like a merged dictionary but it will have constant creation time and constant memory footprint while leaving the original dictionaries untouched.  Creating it is way cheaper than in the other solutions proposed.\r\n\r\nOf course, if you use the result a lot, then you will at some point reach the limit where creating a real merged dictionary would have been the faster solution.  As I said, it depends on your use case.\r\n\r\nIf you ever felt you would prefer to have a real merged `dict`, then calling `dict(z)` would produce it (but way more costly than the other solutions of course, so this is just worth mentioning).\r\n\r\nYou can also use this class to make a kind of copy-on-write dictionary:\r\n\r\n    a = { &#39;x&#39;: 3, &#39;y&#39;: 4 }\r\n    b = MergeDict(a)  # we merge just one dict\r\n    b[&#39;x&#39;] = 5\r\n    print b  # will print {&#39;x&#39;: 5, &#39;y&#39;: 4}\r\n    print a  # will print {&#39;y&#39;: 4, &#39;x&#39;: 3}\r\n\r\nHere&#39;s the straight-forward code of `MergeDict`:\r\n\r\n    class MergeDict(object):\r\n      def __init__(self, *originals):\r\n        self.originals = ({},) + originals[::-1]  # reversed\r\n\r\n      def __getitem__(self, key):\r\n        for original in self.originals:\r\n          try:\r\n            return original[key]\r\n          except KeyError:\r\n            pass\r\n        raise KeyError(key)\r\n\r\n      def __setitem__(self, key, value):\r\n        self.originals[0][key] = value\r\n\r\n      def __iter__(self):\r\n        return iter(self.keys())\r\n\r\n      def __repr__(self):\r\n        return &#39;%s(%s)&#39; % (\r\n          self.__class__.__name__,\r\n          &#39;, &#39;.join(repr(original)\r\n              for original in reversed(self.originals)))\r\n\r\n      def __str__(self):\r\n        return &#39;{%s}&#39; % &#39;, &#39;.join(\r\n            &#39;%r: %r&#39; % i for i in self.iteritems())\r\n\r\n      def iteritems(self):\r\n        found = set()\r\n        for original in self.originals:\r\n          for k, v in original.iteritems():\r\n            if k not in found:\r\n              yield k, v\r\n              found.add(k)\r\n\r\n      def items(self):\r\n        return list(self.iteritems())\r\n\r\n      def keys(self):\r\n        return list(k for k, _ in self.iteritems())\r\n\r\n      def values(self):\r\n        return list(v for _, v in self.iteritems())\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1472651600, "answer_id": 39251599, "path": "stack.django.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1472711341, "last_edit_date": 1472711341, "body_markdown": "For Python 2 :\r\n\r\n    x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    z = dict(x.items()+y.items())\r\n    print(z)\r\n\r\nFor Python 3:\r\n\r\n    x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    z = dict(x.items()|y.items())\r\n    print(z)\r\nIt gives output:`{&#39;a&#39;: 1, &#39;c&#39;: 11, &#39;b&#39;: 10}`"}, {"tags": [], "down_vote_count": 1, "creation_date": 1475022835, "answer_id": 39736284, "path": "stack.django.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1475022835, "body_markdown": "In Python 3.5 you can use unpack `**` in order to create new dictionary. \r\nThis method has no been showed in past answers. Also, it&#39;s better to use `{}` instead of `dict()`. Because `{}` is a python literal and `dict()` involves a function call.\r\n\r\n    dict1 = {&#39;a&#39;:1}\r\n    dict2 = {&#39;b&#39;:2}\r\n    new_dict = {**dict1, **dict2}\r\n    &gt;&gt;&gt;new_dict\r\n    {&#39;a&#39;:1, &#39;a&#39;:2}\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1479473609, "answer_id": 40677646, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1490758852, "last_edit_date": 1490758852, "body_markdown": "You can use [`toolz.merge([x, y])`][1] for this.\r\n\r\n\r\n  [1]: http://toolz.readthedocs.io/en/latest/api.html#toolz.dicttoolz.merge"}, {"tags": [], "down_vote_count": 0, "creation_date": 1495610690, "answer_id": 44151666, "path": "stack.django.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1495610690, "body_markdown": "In python 3:\r\n\r\n    import collections\r\n    a = {1: 1, 2: 2}\r\n    b = {2: 3, 3: 4}\r\n    c = {3: 5}\r\n\r\n    r = dict(collections.ChainMap(a, b, c))\r\n    print(r)\r\n\r\nOut:\r\n\r\n    {1: 1, 2: 2, 3: 4}\r\n\r\nDocs: https://docs.python.org/3/library/collections.html#collections.ChainMap:\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1496147306, "answer_id": 44262317, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1496147306, "body_markdown": "The question is tagged `python-3x` but, taking into account that it&#39;s a relatively recent addition and that the most voted, accepted answer deals extensively with a Python 2.x solution, I dare add a one liner that draws on an irritating feature of Python 2.x list comprehension, that is _name leaking_...\r\n\r\n    $ python2\r\n    Python 2.7.13 (default, Jan 19 2017, 14:48:08) \r\n    [GCC 6.3.0 20170118] on linux2\r\n    Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\r\n    &gt;&gt;&gt; x = {&#39;a&#39;:1, &#39;b&#39;: 2}\r\n    &gt;&gt;&gt; y = {&#39;b&#39;:10, &#39;c&#39;: 11}\r\n    &gt;&gt;&gt; [z.update(d) for z in [{}] for d in (x, y)]\r\n    [None, None]\r\n    &gt;&gt;&gt; z\r\n    {&#39;a&#39;: 1, &#39;c&#39;: 11, &#39;b&#39;: 10}\r\n    &gt;&gt;&gt; ...\r\n\r\nI&#39;m happy to say that the above doesn&#39;t work any more on any version of Python 3."}, {"tags": [], "down_vote_count": 0, "creation_date": 1506049035, "answer_id": 46356150, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1513232176, "last_edit_date": 1513232176, "body_markdown": "If you don&#39;t mind mutating `x`,\r\n\r\n    x.update(y) or x\r\n\r\nSimple, readable, performant. You _know_ `update()` always returns `None`, which is a false value. So it will always evaluate to `x`.\r\n\r\nMutating methods in the standard library, like `update`, return `None` by convention, so this trick will work on those too.\r\n\r\nIf you&#39;re using a library that doesn&#39;t follow this convention, you can use a tuple display and index to make it a single expression, instead of `or`, but it&#39;s not as readable.\r\n\r\n    (x.update(y), x)[-1]\r\n\r\nIf you don&#39;t have `x` in a variable yet, you can use `lambda` to make a local without using an assignment statement. This amounts to using `lambda` as a *let expression*, which is a common technique in functional languages, but rather unpythonic.\r\n\r\n    (lambda x: x.update(y) or x)({&#39;a&#39;:1, &#39;b&#39;: 2})\r\n\r\nIf you do want a copy, PEP 448 is best `{**x, **y}`. But if that&#39;s not available, *let* works here too.\r\n\r\n    (lambda z: z.update(y) or z)(x.copy())\r\n"}, {"tags": [], "down_vote_count": 3, "creation_date": 1511178804, "answer_id": 47391407, "path": "stack.django.answer", "score": -3, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1511178804, "body_markdown": "x={&quot;a&quot;:1}\r\n\r\ny={&quot;b&quot;:2}\r\n\r\nx.update(y)\r\n\r\nprint x      #{&#39;a&#39;: 1, &#39;b&#39;: 2}"}, {"tags": [], "down_vote_count": 3, "creation_date": 1512428216, "answer_id": 47643349, "path": "stack.django.answer", "score": -3, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1512428216, "body_markdown": "    dictionaries = [{&#39;body&#39;: &#39;text&#39;},\r\n    {&#39;correctAnswer&#39;: &#39;text&#39;},\r\n    {&#39;ans&#39;: &#39;text&#39;},\r\n    {&#39;ans&#39;: &#39;text&#39;}]\r\n    \r\n    final_dictionary = {}\r\n    for dictionary in dictionaries:\r\n        for key in dictionary:\r\n            final_dictionary[key] = dictionary[key]\r\n    \r\n    print(final_dictionary)\r\n\r\nIt sounds like you are very new to Python, so the solution I would suggest is the one above which I think is most readable to someone who only knows about for-loops, and iterating over the keys of a dictionary. The pseudo-code is as follows:\r\n\r\n    for each of the dictionaries in the list: \r\n        add each of the key-value pairs in that dictionary to our final dictionary."}, {"tags": [], "down_vote_count": 0, "creation_date": 1514363479, "answer_id": 47988831, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1514363479, "body_markdown": "I would rather write a util method with help of `six`:\r\n\r\n    a_dict = {&#39;1&#39;:1, &#39;2&#39;: 2, &#39;3&#39;:3.1}\r\n    b_dict= {&#39;3&#39;:3.2, &#39;4&#39;: 4}\r\n\r\n  \r\n    \r\n    def merge_dict(dict1, dict2):\r\n    \r\n        import six\r\n    \r\n        if six.PY2:\r\n            merged_ditc = dict(a_dict.items() + b_dict.items())\r\n        else:\r\n           merged_ditc = dict(a_dict.items() | b_dict.items())\r\n        return merged_ditc\r\n    \r\n    print(merge_dict(a_dict, b_dict))\r\n\r\nThe result :\r\n\r\n    {&#39;1&#39;: 1, &#39;2&#39;: 2&#39;, 3&#39;: 3.2, &#39;4&#39;: 4, }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1518041114, "answer_id": 48674051, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1518201637, "last_edit_date": 1518201637, "body_markdown": "&gt; code snippet -- [latest][1]\r\n\r\n&gt; python 3.6.*\r\n\r\n    d1 = {&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}\r\n    d2 = {&quot;d&quot;:4,&quot;e&quot;:5,&quot;f&quot;:6}\r\n    d3 = {&quot;g&quot;:7,&quot;h&quot;:8,&quot;j&quot;:9}\r\n    d4 = {&#39;wtf&#39;:&#39;yes&#39;}\r\n    \r\n    d1a = {&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}\r\n    d1b = {&quot;a&quot;:2,&quot;b&quot;:3,&quot;c&quot;:4}\r\n    d1c = {&quot;a&quot;:3,&quot;b&quot;:4,&quot;c&quot;:5}\r\n    d1d = {&quot;a&quot;:&quot;wtf&quot;}\r\n    \r\n    def dics_combine(*dics):\r\n        dic_out = {}\r\n        for d in dics:\r\n            if isinstance(d, dict):\r\n                dic_out = {**dic_out, **d}\r\n            else:\r\n                pass\r\n        return dic_out\r\n    \r\n    inp = (d1,d2,d3,d4)\r\n    combined_dics = dics_combine(*inp)\r\n    print(&#39;\\n&#39;)\r\n    print(&#39;IN-ORDER: {0}&#39;.format(inp))\r\n    print(&#39;OUT: {0}&#39;.format(combined_dics))\r\n    \r\n    inp = (d1a,d1b,d1c,d1d)\r\n    combined_dics = dics_combine(*inp)\r\n    print(&#39;\\n&#39;)\r\n    print(&#39;IN-ORDER: {0}&#39;.format(inp))\r\n    print(&#39;OUT: {0}&#39;.format(combined_dics))\r\n    \r\n    inp = (d1d,d1c,d1b,d1a)\r\n    combined_dics = dics_combine(*inp)\r\n    print(&#39;\\n&#39;)\r\n    print(&#39;IN-ORDER: {0}&#39;.format(inp))\r\n    print(&#39;OUT: {0}&#39;.format(combined_dics)))\r\n\r\n\r\n&gt; IN-ORDER: ({&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3}, {&#39;d&#39;: 4, &#39;e&#39;: 5, &#39;f&#39;: 6}, {&#39;g&#39;:\r\n&gt; 7, &#39;h&#39;: 8, &#39;j&#39;: 9}, {&#39;wtf&#39;: &#39;yes&#39;})\r\n\r\n&gt; OUT: {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;:\r\n&gt; 4, &#39;e&#39;: 5, &#39;f&#39;: 6, &#39;g&#39;: 7, &#39;h&#39;: 8, &#39;j&#39;: 9, &#39;wtf&#39;: &#39;yes&#39;}\r\n \r\n \r\n&gt; IN-ORDER: ({&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3}, {&#39;a&#39;: 2, &#39;b&#39;: 3, &#39;c&#39;: 4}, {&#39;a&#39;:\r\n&gt; 3, &#39;b&#39;: 4, &#39;c&#39;: 5}, {&#39;a&#39;: &#39;wtf&#39;}) \r\n\r\n&gt; OUT: {&#39;a&#39;: &#39;wtf&#39;, &#39;b&#39;: 4, &#39;c&#39;: 5}\r\n\r\n \r\n&gt; IN-ORDER: ({&#39;a&#39;: &#39;wtf&#39;}, {&#39;a&#39;: 3, &#39;b&#39;: 4, &#39;c&#39;: 5}, {&#39;a&#39;: 2, &#39;b&#39;: 3,\r\n&gt; &#39;c&#39;: 4}, {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3}) \r\n\r\n&gt; OUT: {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3}\r\n\r\n\r\n  [1]: https://gitlab.com/snippets/1698106"}], "title": "How to merge two dictionaries in a single expression?", "view_count": 1025568, "answer_count": 45, "code_snippet": ["<code>update()</code>", "<code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; z = x.update(y)\n&gt;&gt;&gt; print(z)\nNone\n&gt;&gt;&gt; x\n{'a': 1, 'b': 10, 'c': 11}\n</code>", "<code>z</code>", "<code>x</code>", "<code>dict.update()</code>", "<code>x</code>", "<code>y</code>", "<code>z</code>", "<code>y</code>", "<code>x</code>", "<code>z = {**x, **y}\n</code>", "<code>def merge_two_dicts(x, y):\n    z = x.copy()   # start with x's keys and values\n    z.update(y)    # modifies z with y's keys and values &amp; returns None\n    return z\n</code>", "<code>z = merge_two_dicts(x, y)\n</code>", "<code>x = {'a': 1, 'b': 2}\ny = {'b': 3, 'c': 4}\n</code>", "<code>z</code>", "<code>&gt;&gt;&gt; z\n{'a': 1, 'b': 3, 'c': 4}\n</code>", "<code>z = {**x, **y}\n</code>", "<code>z = x.copy()\nz.update(y) # which returns None since it mutates z\n</code>", "<code>y</code>", "<code>x</code>", "<code>'b'</code>", "<code>3</code>", "<code>def merge_two_dicts(x, y):\n    \"\"\"Given two dicts, merge them into a new dict as a shallow copy.\"\"\"\n    z = x.copy()\n    z.update(y)\n    return z\n</code>", "<code>z = merge_two_dicts(x, y)\n</code>", "<code>def merge_dicts(*dict_args):\n    \"\"\"\n    Given any number of dicts, shallow copy and merge into a new dict,\n    precedence goes to key value pairs in latter dicts.\n    \"\"\"\n    result = {}\n    for dictionary in dict_args:\n        result.update(dictionary)\n    return result\n</code>", "<code>a</code>", "<code>g</code>", "<code>z = merge_dicts(a, b, c, d, e, f, g) \n</code>", "<code>g</code>", "<code>a</code>", "<code>f</code>", "<code>z = dict(x.items() + y.items())\n</code>", "<code>dict_items</code>", "<code>&gt;&gt;&gt; c = dict(a.items() + b.items())\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unsupported operand type(s) for +: 'dict_items' and 'dict_items'\n</code>", "<code>z = dict(list(x.items()) + list(y.items()))</code>", "<code>items()</code>", "<code>viewitems()</code>", "<code>&gt;&gt;&gt; c = dict(a.items() | b.items())\n</code>", "<code>&gt;&gt;&gt; x = {'a': []}\n&gt;&gt;&gt; y = {'b': []}\n&gt;&gt;&gt; dict(x.items() | y.items())\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'list'\n</code>", "<code>&gt;&gt;&gt; x = {'a': 2}\n&gt;&gt;&gt; y = {'a': 1}\n&gt;&gt;&gt; dict(x.items() | y.items())\n{'a': 2}\n</code>", "<code>z = dict(x, **y)\n</code>", "<code>dict</code>", "<code>&gt;&gt;&gt; c = dict(a, **b)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: keyword arguments must be strings\n</code>", "<code>dict(**y)</code>", "<code>dict(a=1, b=10, c=11)\n</code>", "<code>{'a': 1, 'b': 10, 'c': 11}\n</code>", "<code>dict(x, **y)</code>", "<code>dict</code>", "<code>&gt;&gt;&gt; foo(**{('a', 'b'): None})\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: foo() keywords must be strings\n&gt;&gt;&gt; dict(**{('a', 'b'): None})\n{('a', 'b'): None}\n</code>", "<code>dict(x.items() + y.items())</code>", "<code>merge_two_dicts(x, y)</code>", "<code>copy</code>", "<code>update</code>", "<code>{k: v for d in dicts for k, v in d.items()} # iteritems in Python 2.7\n</code>", "<code>dict((k, v) for d in dicts for k, v in d.items())\n</code>", "<code>itertools.chain</code>", "<code>import itertools\nz = dict(itertools.chain(x.iteritems(), y.iteritems()))\n</code>", "<code>import timeit\n</code>", "<code>&gt;&gt;&gt; min(timeit.repeat(lambda: merge_two_dicts(x, y)))\n0.5726828575134277\n&gt;&gt;&gt; min(timeit.repeat(lambda: {k: v for d in (x, y) for k, v in d.items()} ))\n1.163769006729126\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict(itertools.chain(x.iteritems(), y.iteritems()))))\n1.1614501476287842\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict((k, v) for d in (x, y) for k, v in d.items())))\n2.2345519065856934\n</code>", "<code>&gt;&gt;&gt; min(timeit.repeat(lambda: {**x, **y}))\n0.4094954460160807\n&gt;&gt;&gt; min(timeit.repeat(lambda: merge_two_dicts(x, y)))\n0.7881555100320838\n&gt;&gt;&gt; min(timeit.repeat(lambda: {k: v for d in (x, y) for k, v in d.items()} ))\n1.4525277839857154\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict(itertools.chain(x.items(), y.items()))))\n2.3143140770262107\n&gt;&gt;&gt; min(timeit.repeat(lambda: dict((k, v) for d in (x, y) for k, v in d.items())))\n3.2069112799945287\n</code>", "<code>z = dict(x.items() + y.items())\n</code>", "<code>z</code>", "<code>b</code>", "<code>y</code>", "<code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; z = dict(x.items() + y.items())\n&gt;&gt;&gt; z\n{'a': 1, 'c': 11, 'b': 10}\n</code>", "<code>z</code>", "<code>&gt;&gt;&gt; z = dict(list(x.items()) + list(y.items()))\n&gt;&gt;&gt; z\n{'a': 1, 'c': 11, 'b': 10}\n</code>", "<code>z = x.copy()\nz.update(y)\n</code>", "<code>{**x, **y}</code>", "<code>Update</code>", "<code>z = dict(x, **y)\n</code>", "<code>y</code>", "<code>&gt;&gt;&gt; timeit.Timer(\"dict(x, **y)\", \"x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))\").timeit(100000)\n15.52571702003479\n&gt;&gt;&gt; timeit.Timer(\"temp = x.copy()\\ntemp.update(y)\", \"x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))\").timeit(100000)\n15.694622993469238\n&gt;&gt;&gt; timeit.Timer(\"dict(x.items() + y.items())\", \"x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))\").timeit(100000)\n41.484580039978027\n</code>", "<code>z1 = dict(x.items() + y.items())\nz2 = dict(x, **y)\n</code>", "<code>z2</code>", "<code>timeit</code>", "<code>% python -m timeit -s 'x=y=dict((i,i) for i in range(20))' 'z1=dict(x.items() + y.items())'\n100000 loops, best of 3: 5.67 usec per loop\n% python -m timeit -s 'x=y=dict((i,i) for i in range(20))' 'z2=dict(x, **y)' \n100000 loops, best of 3: 1.53 usec per loop\n</code>", "<code>z2</code>", "<code>z2</code>", "<code>-r</code>", "<code>% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z1=dict(x.items() + y.items())'\n1000 loops, best of 3: 260 usec per loop\n% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z2=dict(x, **y)'               \n10000 loops, best of 3: 26.9 usec per loop\n</code>", "<code>z2</code>", "<code>z1</code>", "<code>from itertools import chain\nz3 = dict(chain(x.iteritems(), y.iteritems()))\n</code>", "<code>% python -m timeit -s 'from itertools import chain; from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z3=dict(chain(x.iteritems(), y.iteritems()))'\n10000 loops, best of 3: 66 usec per loop\n</code>", "<code>z3</code>", "<code>z1</code>", "<code>z2</code>", "<code>update</code>", "<code>z0 = dict(x)\nz0.update(y)\n</code>", "<code>% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z0=dict(x); z0.update(y)'\n10000 loops, best of 3: 26.9 usec per loop\n</code>", "<code>z0</code>", "<code>z2</code>", "<code>dict</code>", "<code>z0 = x.copy()\nz0.update(y)\n</code>", "<code>items()</code>", "<code>iteritems</code>", "<code>def merge(d1, d2, merge_fn=lambda x,y:y):\n    \"\"\"\n    Merges two dictionaries, non-destructively, combining \n    values on duplicate keys as defined by the optional merge\n    function.  The default behavior replaces the values in d1\n    with corresponding values in d2.  (There is no other generally\n    applicable merge strategy, but often you'll have homogeneous \n    types in your dicts, so specifying a merge technique can be \n    valuable.)\n\n    Examples:\n\n    &gt;&gt;&gt; d1\n    {'a': 1, 'c': 3, 'b': 2}\n    &gt;&gt;&gt; merge(d1, d1)\n    {'a': 1, 'c': 3, 'b': 2}\n    &gt;&gt;&gt; merge(d1, d1, lambda x,y: x+y)\n    {'a': 2, 'c': 6, 'b': 4}\n\n    \"\"\"\n    result = dict(d1)\n    for k,v in d2.iteritems():\n        if k in result:\n            result[k] = merge_fn(result[k], v)\n        else:\n            result[k] = v\n    return result\n</code>", "<code>&gt;&gt;&gt; from collections import ChainMap\n&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; z = ChainMap({}, y, x)\n&gt;&gt;&gt; for k, v in z.items():\n        print(k, '--&gt;', v)\n\na --&gt; 1\nb --&gt; 10\nc --&gt; 11\n</code>", "<code>del</code>", "<code>collections.ChainMap</code>", "<code>ChainMap</code>", "<code>z = {**x, **y}</code>", "<code>def deepupdate(original, update):\n    \"\"\"\n    Recursively update a dict.\n    Subdict's won't be overwritten but also updated.\n    \"\"\"\n    for key, value in original.iteritems(): \n        if key not in update:\n            update[key] = value\n        elif isinstance(value, dict):\n            deepupdate(value, update[key]) \n    return update</code>", "<code>pluto_original = {\n    'name': 'Pluto',\n    'details': {\n        'tail': True,\n        'color': 'orange'\n    }\n}\n\npluto_update = {\n    'name': 'Pluutoo',\n    'details': {\n        'color': 'blue'\n    }\n}\n\nprint deepupdate(pluto_original, pluto_update)</code>", "<code>{\n    'name': 'Pluutoo',\n    'details': {\n        'color': 'blue',\n        'tail': True\n    }\n}</code>", "<code>from itertools import chain\nx = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\ndict(chain(x.iteritems(), y.iteritems()))\n</code>", "<code>dict(x.items() + y.items())</code>", "<code>n = copy(a); n.update(b)</code>", "<code>iteritems()</code>", "<code>items()</code>", "<code>x = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\nz = dict(x.items() + y.items())\nprint z\n</code>", "<code>x = {'a': 1, 'b': 1}\ny = {'a': 2, 'c': 2}\nfinal = {**x, **y} \nfinal\n# {'a': 2, 'b': 1, 'c': 2}\n</code>", "<code>final = {'a': 1, 'b': 1, **x, **y}\n</code>", "<code>dict(x, **y)</code>", "<code>dict(x, **y)</code>", "<code>y</code>", "<code>**</code>", "<code>dict(x, **y)</code>", "<code>x = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\nz4 = {}\nz4.update(x)\nz4.update(y)\n</code>", "<code>z4 = {}</code>", "<code>z4 = x.copy()</code>", "<code>def dict_merge(a, b):\n  c = a.copy()\n  c.update(b)\n  return c\n\nnew = dict_merge(old, extras)\n</code>", "<code>print dict_merge(\n      {'color':'red', 'model':'Mini'},\n      {'model':'Ferrari', 'owner':'Carl'})\n</code>", "<code>{'color': 'red', 'owner': 'Carl', 'model': 'Ferrari'}\n</code>", "<code>x = {'a':1, 'b':2}\ny = {'b':10, 'c':11}\nz = (lambda a, b: (lambda a_copy: a_copy.update(b) or a_copy)(a.copy()))(x, y)\nprint z\n{'a': 1, 'c': 11, 'b': 10}\nprint x\n{'a': 1, 'b': 2}\n</code>", "<code>items</code>", "<code>+</code>", "<code>dict(x.items() | y.items())\n</code>", "<code>viewitems</code>", "<code>items</code>", "<code>dict(x.viewitems() | y.viewitems())\n</code>", "<code>dict(x, **y)</code>", "<code>y</code>", "<code>In [1]: from collections import ChainMap\nIn [2]: from string import ascii_uppercase as up, ascii_lowercase as lo; x = dict(zip(lo, up)); y = dict(zip(up, lo))\nIn [3]: chainmap_dict = ChainMap(y, x)\nIn [4]: union_dict = dict(x.items() | y.items())\nIn [5]: timeit for k in union_dict: union_dict[k]\n100000 loops, best of 3: 2.15 \u00b5s per loop\nIn [6]: timeit for k in chainmap_dict: chainmap_dict[k]\n10000 loops, best of 3: 27.1 \u00b5s per loop\n</code>", "<code>z={i:d[i] for d in [x,y] for i in d}\n\n&gt;&gt;&gt; print z\n{'a': 1, 'c': 11, 'b': 10}\n</code>", "<code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; z = (lambda f=x.copy(): (f.update(y), f)[1])()\n&gt;&gt;&gt; z\n{'a': 1, 'c': 11, 'b': 10}\n</code>", "<code>lambda</code>", "<code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; z = (x.update(y), x)[1]\n&gt;&gt;&gt; z\n{'a': 1, 'b': 10, 'c': 11}\n</code>", "<code>import itertools as it\nmerge = lambda *args: dict(it.chain.from_iterable(it.imap(dict.iteritems, args)))\n</code>", "<code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; merge(x, y)\n{'a': 1, 'b': 10, 'c': 11}\n\n&gt;&gt;&gt; z = {'c': 3, 'd': 4}\n&gt;&gt;&gt; merge(x, y, z)\n{'a': 1, 'b': 10, 'c': 3, 'd': 4}\n</code>", "<code>def union2(dict1, dict2):\n    return dict(list(dict1.items()) + list(dict2.items()))\n</code>", "<code>def union(*dicts):\n    return dict(itertools.chain.from_iterable(dct.items() for dct in dicts))\n</code>", "<code>sum</code>", "<code>a = { 'one': { 'depth_2': True }, 'two': True }\nb = { 'one': { 'extra': False } }\nprint dict(a.items() + b.items())\n</code>", "<code>{ 'one': { 'extra': False', 'depth_2': True }, 'two': True }\n</code>", "<code>{'two': True, 'one': {'extra': False}}\n</code>", "<code>from itertools import chain\nprint dict(chain(a.iteritems(), b.iteritems()))\n</code>", "<code>{'two': True, 'one': {'extra': False}}\n</code>", "<code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; x, z = dict(x), x.update(y) or x\n&gt;&gt;&gt; x\n{'a': 1, 'b': 2}\n&gt;&gt;&gt; y\n{'c': 11, 'b': 10}\n&gt;&gt;&gt; z\n{'a': 1, 'c': 11, 'b': 10}\n</code>", "<code>x = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\nz = dict(x.items()+y.items())\nprint(z)\n</code>", "<code>x = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\nz = dict(x.items()|y.items())\nprint(z)\n</code>", "<code>{'a': 1, 'c': 11, 'b': 10}</code>", "<code>dict(x.viewitems()|y.viewitems())</code>", "<code>x</code>", "<code>y</code>", "<code>z</code>", "<code>y</code>", "<code>def merge(*dicts, **kv): \n      return { k:v for d in list(dicts) + [kv] for k,v in d.items() }\n</code>", "<code>assert (merge({1:11,'a':'aaa'},{1:99, 'b':'bbb'},foo='bar')==\\\n    {1: 99, 'foo': 'bar', 'b': 'bbb', 'a': 'aaa'})\n\nassert (merge(foo='bar')=={'foo': 'bar'})\n\nassert (merge({1:11},{1:99},foo='bar',baz='quux')==\\\n    {1: 99, 'foo': 'bar', 'baz':'quux'})\n\nassert (merge({1:11},{1:99})=={1: 99})\n</code>", "<code>import timeit\n\nn=100000\nsu = \"\"\"\nx = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\n\"\"\"\n\ndef timeMerge(f,su,niter):\n    print \"{:4f} sec for: {:30s}\".format(timeit.Timer(f,setup=su).timeit(n),f)\n\ntimeMerge(\"dict(x, **y)\",su,n)\ntimeMerge(\"x.update(y)\",su,n)\ntimeMerge(\"dict(x.items() + y.items())\",su,n)\ntimeMerge(\"for k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k] \",su,n)\n\n#confirm for loop adds b entries together\nx = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\nfor k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k]\nprint \"confirm b elements are added:\",x\n</code>", "<code>0.049465 sec for: dict(x, **y)\n0.033729 sec for: x.update(y)                   \n0.150380 sec for: dict(x.items() + y.items())   \n0.083120 sec for: for k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k]\n\nconfirm b elements are added: {'a': 1, 'c': 11, 'b': 12}\n</code>", "<code>cytoolz.merge_with</code>", "<code>import collections\na = {1: 1, 2: 2}\nb = {2: 3, 3: 4}\nc = {3: 5}\n\nr = dict(collections.ChainMap(a, b, c))\nprint(r)\n</code>", "<code>{1: 1, 2: 2, 3: 4}\n</code>", "<code>**</code>", "<code>{}</code>", "<code>dict()</code>", "<code>{}</code>", "<code>dict()</code>", "<code>dict1 = {'a':1}\ndict2 = {'b':2}\nnew_dict = {**dict1, **dict2}\n&gt;&gt;&gt;new_dict\n{'a':1, 'a':2}\n</code>", "<code>toolz.merge([x, y])</code>", "<code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; { key: y[key] if key in y else x[key]\n      for key in set(x) + set(y)\n    }\n</code>", "<code>from collections import Counter\ndict1 = {'a':1, 'b': 2}\ndict2 = {'b':10, 'c': 11}\nresult = dict(Counter(dict1) + Counter(dict2))\n</code>"], "path": "stack.django"}, {"tags": ["python", "email"], "creation_date": 1280407855, "body_markdown": "I am having problems understanding how to email an attachment using Python. I have successfully emailed simple messages with the `smtplib`. Could someone please explain how to send an attachment in an email. I know there are other posts online but as a Python beginner I find them hard to understand. \r\n\r\n    ", "last_edit_date": 1498227399, "up_vote_count": 187, "link": "https://stackoverflow.com/questions/3362600/how-to-send-email-attachments", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1280408359, "answer_id": 3362673, "path": "stack.django.answer", "score": 19, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1280411642, "last_edit_date": 1280411642, "body_markdown": "    from email.MIMEMultipart import MIMEMultipart\r\n    from email.MIMEText import MIMEText\r\n    from email.MIMEImage import MIMEImage\r\n    import smtplib\r\n\r\n    msg = MIMEMultipart()\r\n    msg.attach(MIMEText(file(&quot;text.txt&quot;).read()))\r\n    msg.attach(MIMEImage(file(&quot;image.png&quot;).read()))\r\n    \r\n    # to send\r\n    mailer = smtplib.SMTP()\r\n    mailer.connect()\r\n    mailer.sendmail(from_, to, msg.as_string())\r\n    mailer.close()\r\n\r\nAdapted from [here][1].\r\n\r\n\r\n  [1]: http://www.velocityreviews.com/forums/t330382-how-to-add-an-attachment-with-smtplib-module.html"}, {"tags": [], "down_vote_count": 5, "creation_date": 1280412015, "answer_id": 3363254, "path": "stack.django.answer", "score": 267, "up_vote_count": 272, "is_accepted": true, "last_activity_date": 1518619533, "last_edit_date": 1518619533, "body_markdown": "Here&#39;s another:\r\n\r\n    import smtplib\r\n    from os.path import basename\r\n    from email.mime.application import MIMEApplication\r\n    from email.mime.multipart import MIMEMultipart\r\n    from email.mime.text import MIMEText\r\n    from email.utils import COMMASPACE, formatdate\r\n    \r\n    \r\n    def send_mail(send_from, send_to, subject, text, files=None,\r\n                  server=&quot;127.0.0.1&quot;):\r\n        assert isinstance(send_to, list)\r\n    \r\n        msg = MIMEMultipart()\r\n        msg[&#39;From&#39;] = send_from\r\n        msg[&#39;To&#39;] = COMMASPACE.join(send_to)\r\n        msg[&#39;Date&#39;] = formatdate(localtime=True)\r\n        msg[&#39;Subject&#39;] = subject\r\n \r\n        msg.attach(MIMEText(text))\r\n    \r\n        for f in files or []:\r\n            with open(f, &quot;rb&quot;) as fil:\r\n                part = MIMEApplication(\r\n                    fil.read(),\r\n                    Name=basename(f)\r\n                )\r\n            # After the file is closed\r\n            part[&#39;Content-Disposition&#39;] = &#39;attachment; filename=&quot;%s&quot;&#39; % basename(f)\r\n            msg.attach(part)\r\n\r\n    \r\n        smtp = smtplib.SMTP(server)\r\n        smtp.sendmail(send_from, send_to, msg.as_string())\r\n        smtp.close()\r\n\r\n\r\nIt&#39;s much the same as the first example... But it should be easier to drop in.\r\n\r\n  [1]: http://snippets.dzone.com/posts/show/2038"}, {"tags": [], "down_vote_count": 0, "creation_date": 1280413792, "answer_id": 3363538, "path": "stack.django.answer", "score": 54, "up_vote_count": 54, "is_accepted": false, "last_activity_date": 1280414198, "last_edit_date": 1495541431, "body_markdown": "this is the code I ended up using:\r\n    \r\n    import smtplib\r\n    from email.MIMEMultipart import MIMEMultipart\r\n    from email.MIMEBase import MIMEBase\r\n    from email import Encoders\r\n\r\n\r\n    SUBJECT = &quot;Email Data&quot;\r\n    \r\n    msg = MIMEMultipart()\r\n    msg[&#39;Subject&#39;] = SUBJECT \r\n    msg[&#39;From&#39;] = self.EMAIL_FROM\r\n    msg[&#39;To&#39;] = &#39;, &#39;.join(self.EMAIL_TO)\r\n\r\n    part = MIMEBase(&#39;application&#39;, &quot;octet-stream&quot;)\r\n    part.set_payload(open(&quot;text.txt&quot;, &quot;rb&quot;).read())\r\n    Encoders.encode_base64(part)\r\n        \r\n    part.add_header(&#39;Content-Disposition&#39;, &#39;attachment; filename=&quot;text.txt&quot;&#39;)\r\n\r\n    msg.attach(part)\r\n   \r\n    server = smtplib.SMTP(self.EMAIL_SERVER)\r\n    server.sendmail(self.EMAIL_FROM, self.EMAIL_TO, msg.as_string())\r\n\r\nCode is much the same as Oli&#39;s post. Thanks all\r\n\r\nCode based from https://stackoverflow.com/questions/2798470/binary-file-email-attachment-problem post.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1368374623, "answer_id": 16509278, "path": "stack.django.answer", "score": 46, "up_vote_count": 46, "is_accepted": false, "last_activity_date": 1517266452, "last_edit_date": 1517266452, "body_markdown": "Here is the modified version from `Oli` for python 3\r\n\r\n    import smtplib\r\n    import os.path as op\r\n    from email.mime.multipart import MIMEMultipart\r\n    from email.mime.base import MIMEBase\r\n    from email.mime.text import MIMEText\r\n    from email.utils import COMMASPACE, formatdate\r\n    from email import encoders\r\n    \r\n    \r\n    def send_mail(send_from, send_to, subject, message, files=[],\r\n                  server=&quot;localhost&quot;, port=587, username=&#39;&#39;, password=&#39;&#39;,\r\n                  use_tls=True):\r\n        &quot;&quot;&quot;Compose and send email with provided info and attachments.\r\n    \r\n        Args:\r\n            send_from (str): from name\r\n            send_to (str): to name\r\n            subject (str): message title\r\n            message (str): message body\r\n            files (list[str]): list of file paths to be attached to email\r\n            server (str): mail server host name\r\n            port (int): port number\r\n            username (str): server auth username\r\n            password (str): server auth password\r\n            use_tls (bool): use TLS mode\r\n        &quot;&quot;&quot;\r\n        msg = MIMEMultipart()\r\n        msg[&#39;From&#39;] = send_from\r\n        msg[&#39;To&#39;] = COMMASPACE.join(send_to)\r\n        msg[&#39;Date&#39;] = formatdate(localtime=True)\r\n        msg[&#39;Subject&#39;] = subject\r\n    \r\n        msg.attach(MIMEText(message))\r\n    \r\n        for path in files:\r\n            part = MIMEBase(&#39;application&#39;, &quot;octet-stream&quot;)\r\n            with open(path, &#39;rb&#39;) as file:\r\n                part.set_payload(file.read())\r\n            encoders.encode_base64(part)\r\n            part.add_header(&#39;Content-Disposition&#39;,\r\n                            &#39;attachment; filename=&quot;{}&quot;&#39;.format(op.basename(path)))\r\n            msg.attach(part)\r\n    \r\n        smtp = smtplib.SMTP(server, port)\r\n        if use_tls:\r\n            smtp.starttls()\r\n        smtp.login(username, password)\r\n        smtp.sendmail(send_from, send_to, msg.as_string())\r\n        smtp.quit()\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1486047543, "answer_id": 42005480, "path": "stack.django.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1486047543, "body_markdown": "The simplest code I could get to is:\r\n\r\n    #for attachment email\r\n    from django.core.mail import EmailMessage\r\n    \r\n        def attachment_email(request):\r\n                email = EmailMessage(\r\n                &#39;Hello&#39;, #subject\r\n                &#39;Body goes here&#39;, #body\r\n                &#39;MyEmail@MyEmail.com&#39;, #from\r\n                [&#39;SendTo@SendTo.com&#39;], #to\r\n                [&#39;bcc@example.com&#39;], #bcc\r\n                reply_to=[&#39;other@example.com&#39;],\r\n                headers={&#39;Message-ID&#39;: &#39;foo&#39;},\r\n                )\r\n        \r\n                email.attach_file(&#39;/my/path/file&#39;)\r\n                email.send()\r\n\r\nIt was based on the official [Django documentation][1]\r\n\r\n\r\n  [1]: https://docs.djangoproject.com/en/1.10/topics/email/#django.core.mail.EmailMessage"}], "title": "How to send email attachments?", "view_count": 198880, "answer_count": 5, "code_snippet": ["<code>smtplib</code>", "<code>import smtplib\nfrom os.path import basename\nfrom email.mime.application import MIMEApplication\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.utils import COMMASPACE, formatdate\n\n\ndef send_mail(send_from, send_to, subject, text, files=None,\n              server=\"127.0.0.1\"):\n    assert isinstance(send_to, list)\n\n    msg = MIMEMultipart()\n    msg['From'] = send_from\n    msg['To'] = COMMASPACE.join(send_to)\n    msg['Date'] = formatdate(localtime=True)\n    msg['Subject'] = subject\n\n    msg.attach(MIMEText(text))\n\n    for f in files or []:\n        with open(f, \"rb\") as fil:\n            part = MIMEApplication(\n                fil.read(),\n                Name=basename(f)\n            )\n        # After the file is closed\n        part['Content-Disposition'] = 'attachment; filename=\"%s\"' % basename(f)\n        msg.attach(part)\n\n\n    smtp = smtplib.SMTP(server)\n    smtp.sendmail(send_from, send_to, msg.as_string())\n    smtp.close()\n</code>", "<code>file</code>", "<code>f</code>", "<code>part = MIMEApplication(open(f, 'rb').read())</code>", "<code>import smtplib\nfrom email.MIMEMultipart import MIMEMultipart\nfrom email.MIMEBase import MIMEBase\nfrom email import Encoders\n\n\nSUBJECT = \"Email Data\"\n\nmsg = MIMEMultipart()\nmsg['Subject'] = SUBJECT \nmsg['From'] = self.EMAIL_FROM\nmsg['To'] = ', '.join(self.EMAIL_TO)\n\npart = MIMEBase('application', \"octet-stream\")\npart.set_payload(open(\"text.txt\", \"rb\").read())\nEncoders.encode_base64(part)\n\npart.add_header('Content-Disposition', 'attachment; filename=\"text.txt\"')\n\nmsg.attach(part)\n\nserver = smtplib.SMTP(self.EMAIL_SERVER)\nserver.sendmail(self.EMAIL_FROM, self.EMAIL_TO, msg.as_string())\n</code>", "<code>Oli</code>", "<code>import smtplib\nimport os.path as op\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.base import MIMEBase\nfrom email.mime.text import MIMEText\nfrom email.utils import COMMASPACE, formatdate\nfrom email import encoders\n\n\ndef send_mail(send_from, send_to, subject, message, files=[],\n              server=\"localhost\", port=587, username='', password='',\n              use_tls=True):\n    \"\"\"Compose and send email with provided info and attachments.\n\n    Args:\n        send_from (str): from name\n        send_to (str): to name\n        subject (str): message title\n        message (str): message body\n        files (list[str]): list of file paths to be attached to email\n        server (str): mail server host name\n        port (int): port number\n        username (str): server auth username\n        password (str): server auth password\n        use_tls (bool): use TLS mode\n    \"\"\"\n    msg = MIMEMultipart()\n    msg['From'] = send_from\n    msg['To'] = COMMASPACE.join(send_to)\n    msg['Date'] = formatdate(localtime=True)\n    msg['Subject'] = subject\n\n    msg.attach(MIMEText(message))\n\n    for path in files:\n        part = MIMEBase('application', \"octet-stream\")\n        with open(path, 'rb') as file:\n            part.set_payload(file.read())\n        encoders.encode_base64(part)\n        part.add_header('Content-Disposition',\n                        'attachment; filename=\"{}\"'.format(op.basename(path)))\n        msg.attach(part)\n\n    smtp = smtplib.SMTP(server, port)\n    if use_tls:\n        smtp.starttls()\n    smtp.login(username, password)\n    smtp.sendmail(send_from, send_to, msg.as_string())\n    smtp.quit()\n</code>", "<code>from email.MIMEMultipart import MIMEMultipart\nfrom email.MIMEText import MIMEText\nfrom email.MIMEImage import MIMEImage\nimport smtplib\n\nmsg = MIMEMultipart()\nmsg.attach(MIMEText(file(\"text.txt\").read()))\nmsg.attach(MIMEImage(file(\"image.png\").read()))\n\n# to send\nmailer = smtplib.SMTP()\nmailer.connect()\nmailer.sendmail(from_, to, msg.as_string())\nmailer.close()\n</code>", "<code>smtplib</code>", "<code>msg.as_string()</code>", "<code>#for attachment email\nfrom django.core.mail import EmailMessage\n\n    def attachment_email(request):\n            email = EmailMessage(\n            'Hello', #subject\n            'Body goes here', #body\n            'MyEmail@MyEmail.com', #from\n            ['SendTo@SendTo.com'], #to\n            ['bcc@example.com'], #bcc\n            reply_to=['other@example.com'],\n            headers={'Message-ID': 'foo'},\n            )\n\n            email.attach_file('/my/path/file')\n            email.send()\n</code>"], "path": "stack.django"}, {"tags": ["python", "networking", "twisted", "asynchronous"], "creation_date": 1259650172, "body_markdown": "A (long) while ago I wrote a web-spider that I multithreaded to enable concurrent requests to occur at the same time.  That was in my Python youth, in the days before I knew about the [GIL][1] and the associated woes it creates for multithreaded code (IE, most of the time stuff just ends up serialized!)...\r\n\r\nI&#39;d like to rework this code to make it more robust and perform better.  There are basically two ways I could do this: I could use the new [multiprocessing module][2] in 2.6+ or I could go for a reactor / event-based model of some sort.  I would rather do the later since it&#39;s far simpler and less error-prone.\r\n\r\nSo the question relates to what framework would be best suited to my needs.  The following is a list of the options I know about so far:\r\n\r\n- [Twisted][3]: The granddaddy of Python reactor frameworks: seems complex and a bit bloated however.  Steep learning curve for a small task.\r\n- [Eventlet][4]: From the guys at [lindenlab][5].  Greenlet based framework that&#39;s geared towards these kinds of tasks. I had a look at the code though and it&#39;s not too pretty: non-pep8 compliant, scattered with prints (why do people do this in a framework!?), API seems a little inconsistent.\r\n- [PyEv][6]: Immature, doesn&#39;t seem to be anyone using it right now though it is based on libevent so it&#39;s got a solid backend.\r\n- [asyncore][7]: From the stdlib: &#252;ber low-level, seems like a lot of legwork involved just to get something off the ground.\r\n- [tornado][8]: Though this is a server oriented product designed to server dynamic websites it does feature an [async HTTP client][9] and a simple [ioloop][10].  Looks like it could get the job done but not what it was intended for. \r\n[edit: doesn&#39;t run on Windows unfortunately, which counts it out for me - its a requirement for me to support this lame platform]\r\n\r\nIs there anything I have missed at all?  Surely there must be a library out there that fits the sweet-spot of a simplified async networking library!\r\n\r\n[edit: big thanks to [intgr][13] for his pointer to [this page][14].  If you scroll to the bottom you will see there is a really nice list of projects that aim to tackle this task in one way or another.  It seems actually that things have indeed moved on since the inception of Twisted: people now seem to favour a [co-routine][15] based solution rather than a traditional reactor / callback oriented one.  The benefits of this approach are clearer more direct code: I&#39;ve certainly found in the past, especially when working with [boost.asio][16] in C++ that callback based code can lead to designs that can be hard-to-follow and are relatively obscure to the untrained eye.  Using co-routines allows you to write code that looks a little more synchronous at least.  I guess now my task is to work out which one of these many libraries I like the look of and give it a go!  Glad I asked now...]\r\n\r\n[edit: perhaps of interest to anyone who followed or stumbled on this this question or cares about this topic in any sense: I found a really great writeup of the current state of [the available tools][17] for this job]\r\n\r\n\r\n  [1]: http://www.dabeaz.com/python/GIL.pdf\r\n  [2]: http://docs.python.org/library/multiprocessing.html\r\n  [3]: http://twistedmatrix.com/trac/\r\n  [4]: http://eventlet.net/\r\n  [5]: http://lindenlab.com/\r\n  [6]: http://code.google.com/p/pyev/\r\n  [7]: http://docs.python.org/library/asyncore.html\r\n  [8]: http://www.tornadoweb.org/\r\n  [9]: http://github.com/facebook/tornado/blob/master/tornado/httpclient.py\r\n  [10]: http://github.com/facebook/tornado/blob/master/tornado/ioloop.py\r\n  [11]: http://doc.scrapy.org/intro/overview.html\r\n  [12]: http://dev.scrapy.org/wiki/SEP-004\r\n  [13]: https://stackoverflow.com/users/177663/intgr\r\n  [14]: http://code.google.com/p/cogen/\r\n  [15]: http://en.wikipedia.org/wiki/Coroutine\r\n  [16]: http://www.boost.org/doc/libs/1_41_0/doc/html/boost_asio.html\r\n  [17]: http://nichol.as/asynchronous-servers-in-python", "last_edit_date": 1495540021, "up_vote_count": 220, "link": "https://stackoverflow.com/questions/1824418/a-clean-lightweight-alternative-to-pythons-twisted", "_childDocuments_": [{"tags": [], "down_vote_count": 6, "creation_date": 1259655138, "answer_id": 1824705, "path": "stack.django.answer", "score": 27, "up_vote_count": 33, "is_accepted": true, "last_activity_date": 1259656280, "last_edit_date": 1259656280, "body_markdown": "I liked the [concurrence][1] Python module which relies on either Stackless Python microthreads or Greenlets for light-weight threading. All blocking network I/O is transparently made asynchronous through a single `libevent` loop, so it should be nearly as efficient as an real asynchronous server.\r\n\r\nI suppose it&#39;s similar to Eventlet in this way.\r\n\r\nThe downside is that its API is quite different from Python&#39;s `sockets`/`threading` modules; you need to rewrite a fair bit of your application (or write a compatibility shim layer)\r\n\r\n**Edit:** It seems that there&#39;s also [cogen][2], which is similar, but uses Python 2.5&#39;s *enhanced generators* for its coroutines, instead of Greenlets. This makes it more portable than concurrence and other alternatives. Network I/O is done directly with epoll/kqueue/iocp.\r\n\r\n\r\n  [1]: http://opensource.hyves.org/concurrence/\r\n  [2]: http://code.google.com/p/cogen/\r\n"}, {"tags": [], "down_vote_count": 4, "creation_date": 1259658405, "answer_id": 1824916, "path": "stack.django.answer", "score": 97, "up_vote_count": 101, "is_accepted": false, "last_activity_date": 1259658405, "body_markdown": "Twisted is complex, you&#39;re right about that. Twisted is *not* bloated. \r\n\r\nIf you take a look here: [http://twistedmatrix.com/trac/browser/trunk/twisted][1] you&#39;ll find an organized, comprehensive, and very well tested suite of *many* protocols of the internet, as well as helper code to write and deploy very sophisticated network applications. I wouldn&#39;t confuse bloat with comprehensiveness.\r\n\r\nIt&#39;s well known that the Twisted documentation isn&#39;t the most user-friendly from first glance, and I believe this turns away an unfortunate number of people. But Twisted is amazing (IMHO) if you put in the time.  I did and it proved to be worth it, and I&#39;d recommend to others to try the same.\r\n\r\n\r\n  [1]: http://twistedmatrix.com/trac/browser/trunk/twisted/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1259686440, "answer_id": 1827491, "path": "stack.django.answer", "score": 15, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1259686440, "body_markdown": "None of these solutions will avoid that fact that the GIL prevents CPU parallelism - they are just better ways of getting IO parallelism that you already have with threads.  If you think you can do better IO, by all means pursue one of these, but if your bottleneck is in processing the results nothing here will help except for the multiprocessing module.  "}, {"tags": [], "down_vote_count": 2, "creation_date": 1259688318, "answer_id": 1827671, "path": "stack.django.answer", "score": 8, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1259691507, "last_edit_date": 1259691507, "body_markdown": "[Kamaelia][1] hasn&#39;t been mentioned yet. Its concurrency model is based on wiring together components with message passing between inboxes and outboxes. [Here][2]&#39;s a brief overview.\r\n\r\n\r\n  [1]: http://www.kamaelia.org/Home\r\n  [2]: http://www.kamaelia.org/About"}, {"tags": [], "down_vote_count": 0, "creation_date": 1259721203, "answer_id": 1830308, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1259721203, "body_markdown": "I wouldn&#39;t go as far as to call Twisted bloated, but it is difficult to wrap your head around. I avoided really settling in an learn for quite a while as I always wanted something a little easier for &#39;small tasks&#39;. \r\n\r\nHowever, now that I have worked with it some more I have to say having all the batteries included is VERY nice.\r\n\r\nAll the other async libraries I&#39;ve worked with end being way less mature than they even appear. Twisted&#39;s event loop is solid. \r\n\r\nI&#39;m not quite sure how to solve the steep Twisted learning curve. It might help if someone would fork it and clean a few things up, like removing all the backwards compatability cruft and the dead projects. But that&#39;s the nature of mature software I guess."}, {"tags": [], "down_vote_count": 2, "creation_date": 1259745313, "answer_id": 1831675, "path": "stack.django.answer", "score": 56, "up_vote_count": 58, "is_accepted": false, "last_activity_date": 1436216159, "last_edit_date": 1436216159, "body_markdown": "[gevent][1] is [eventlet cleaned up][2].\r\n\r\nAPI-wise it follows the same conventions as the standard library (in particular, threading and multiprocessing modules) where it makes sense. So you have familiar things like [Queue][3] and [Event][4] to work with.\r\n\r\nIt only supports [libevent][5] (**update:** [libev since 1.0][6]) as reactor implementation but takes full advantage of it, featuring a fast WSGI server based on libevent-http and resolving DNS queries through libevent-dns as opposed to using a thread pool like most other libraries do. (**update:** since 1.0 c-ares is used to make async DNS queries; threadpool is also an option.)\r\n\r\nLike eventlet, it makes the callbacks and Deferreds unnecessary by using [greenlets][7].\r\n\r\nCheck out the examples: [concurrent download of multiple urls][8], [long polling webchat][9].\r\n\r\n\r\n  [1]: http://www.gevent.org\r\n  [2]: http://blog.gevent.org/2010/02/27/why-gevent/\r\n  [3]: http://www.gevent.org/gevent.queue.html\r\n  [4]: http://www.gevent.org/gevent.event.html#gevent.event.Event\r\n  [5]: http://www.monkey.org/~provos/libevent/\r\n  [6]: http://blog.gevent.org/2011/04/28/libev-and-libevent/\r\n  [7]: http://codespeak.net/py/0.9.2/greenlet.html\r\n  [8]: https://github.com/gevent/gevent/blob/master/examples/concurrent_download.py\r\n  [9]: http://blog.gevent.org/2009/10/10/simpler-long-polling-with-django-and-gevent/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1261556087, "answer_id": 1951355, "path": "stack.django.answer", "score": 27, "up_vote_count": 28, "is_accepted": false, "last_activity_date": 1261556087, "body_markdown": "A really [interesting comparison][1] of such frameworks was compiled by Nicholas Pi&#235;l on his blog: it&#39;s well worth a read!\r\n\r\n\r\n  [1]: http://nichol.as/asynchronous-servers-in-python"}, {"tags": [], "down_vote_count": 0, "creation_date": 1267158609, "answer_id": 2339514, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1267158609, "body_markdown": "There is a good book on the subject: &quot;Twisted Network Programming Essentials&quot;, by Abe Fettig.  The examples show how to write very Pythonic code, and to me personally, do not strike me as  based on a bloated framework.  Look at the solutions in the book, if they aren&#39;t clean, then I don&#39;t know what clean means. \r\n\r\n My only enigma is the same I have with other frameworks, like Ruby. I worry, does it scale up?  I would hate to commit a client to  a framework that is going to have scalability problems."}, {"tags": [], "down_vote_count": 1, "creation_date": 1271703376, "answer_id": 2669991, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1271703376, "body_markdown": "Also try [Syncless][1]. It&#39;s coroutine-based (so it&#39;s similar to Concurrence, Eventlet and gevent). It implements drop-in non-blocking replacements for socket.socket, socket.gethostbyname (etc.), ssl.SSLSocket, time.sleep and select.select. It&#39;s fast. It needs Stackless Python and libevent. It contains a mandatory Python extension written in C (Pyrex/Cython).\r\n\r\n  [1]: http://code.google.com/p/syncless/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1279903057, "answer_id": 3320323, "path": "stack.django.answer", "score": 7, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1429831145, "last_edit_date": 1429831145, "body_markdown": "\r\nI&#39;ve started to use twisted for some things.  The beauty of it almost is because it&#39;s &quot;bloated.&quot;  There are connectors for just about any of the main protocols out there.  You can have a jabber bot that will take commands and post to an irc server, email them to someone, run a command, read from an NNTP server, and monitor a web page for changes.  The bad news is it can do all of that and can make things overly complex for simple tasks like the OP explained.  The advantage of python though is you only include what you need.  So while the download may be 20mb, you may only include 2mb of libraries (which is still a lot).  My biggest complaint with twisted is although they include examples, anything beyond a basic tcp server you&#39;re on your own.  \r\n\r\nWhile not a python solution, I&#39;ve seen node.js gain a lot more traction as of late.  In fact I&#39;ve considered looking into it for smaller projects but I just cringe when I hear javascript :)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1284397752, "answer_id": 3702723, "path": "stack.django.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1284397752, "body_markdown": "[Whizzer][1] is a tiny asynchronous socket framework that uses pyev. Its very fast, primarily because of pyev. It attempts to provide a similiar interface as twisted with some slight changes.\r\n\r\n\r\n  [1]: http://bitbucket.org/bfrog/whizzer"}, {"tags": [], "down_vote_count": 1, "creation_date": 1295136344, "answer_id": 4702917, "path": "stack.django.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1298464772, "last_edit_date": 1298464772, "body_markdown": "I Confirm the goodness of **syncless**. It can use libev (the newer, cleaner and better performance version of libevent). Some times ago it doesn&#39;t has as much support as libevent has, but now the development process go further and is very useful."}, {"tags": [], "down_vote_count": 1, "creation_date": 1388270974, "answer_id": 20820228, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1388270974, "body_markdown": "You are welcome to have a look at PyWorks, which takes a quite different approach. It lets object instances run in their own thread and makes function call&#39;s to that object async. \r\n\r\nJust let a class inherit from Task instead of object and it is async, all methods calls are Proxies. Return values (if you need them) are Future proxies.\r\n\r\n    res = obj.method( args )\r\n    # code continues here without waiting for method to finish\r\n    do_something_else( )\r\n    print &quot;Result = %d&quot; % res # Code will block here, if res not calculated yet\r\n\r\nPyWorks can be found on http://bitbucket.org/raindog/pyworks"}, {"tags": [], "down_vote_count": 0, "creation_date": 1421844947, "answer_id": 28067789, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1421845593, "last_edit_date": 1421845593, "body_markdown": "If you just want a Simplified, lightweight HTTP Request Library then I find [Unirest][1] really good   \r\n\r\n\r\n  [1]: http://unirest.io/python.html"}], "title": "A clean, lightweight alternative to Python&#39;s twisted?", "view_count": 53128, "answer_count": 14, "code_snippet": ["<code>select</code>", "<code>libevent</code>", "<code>sockets</code>", "<code>threading</code>", "<code>PortableGtkReactor</code>", "<code>res = obj.method( args )\n# code continues here without waiting for method to finish\ndo_something_else( )\nprint \"Result = %d\" % res # Code will block here, if res not calculated yet\n</code>"], "path": "stack.django"}, {"tags": ["python", "phantomjs"], "creation_date": 1352371614, "body_markdown": "I want to use [PhantomJS][1] in [Python][2]. I googled this problem but couldn&#39;t find proper solutions.\r\n\r\nI find `os.popen()`  may be a good choice. But I couldn&#39;t pass some arguments to it.\r\n\r\nUsing `subprocess.Popen()` may be a proper solution for now. I want to know whether there&#39;s a better solution or not.\r\n\r\nIs there a way to use PhantomJS in Python?\r\n\r\n\r\n\r\n\r\n\r\n  [1]: http://phantomjs.org/\r\n  [2]: http://www.python.org/", "last_edit_date": 1456792621, "up_vote_count": 189, "link": "https://stackoverflow.com/questions/13287490/is-there-a-way-to-use-phantomjs-in-python", "_childDocuments_": [{"tags": [], "down_vote_count": 3, "creation_date": 1352371799, "answer_id": 13287548, "path": "stack.django.answer", "score": 75, "up_vote_count": 78, "is_accepted": false, "last_activity_date": 1447340384, "last_edit_date": 1447340384, "body_markdown": "PhantomJS recently [dropped Python support](http://phantomjs.org/release-1.5.html) altogether. However, PhantomJS now embeds [Ghost Driver](https://github.com/detro/ghostdriver).\r\n\r\nA new project has since stepped up to fill the void: [`ghost.py`](http://ghost-py.readthedocs.org/en/latest/). You probably want to use that instead:\r\n\r\n\r\n    from ghost import Ghost\r\n    ghost = Ghost()\r\n\r\n    with ghost.start() as session:\r\n        page, extra_resources = ghost.open(&quot;http://jeanphi.me&quot;)\r\n        assert page.http_status==200 and &#39;jeanphix&#39; in ghost.content\r\n    "}, {"tags": [], "down_vote_count": 1, "creation_date": 1355836664, "answer_id": 13933894, "path": "stack.django.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1355904853, "last_edit_date": 1355904853, "body_markdown": "Here&#39;s how I test javascript using PhantomJS and Django:\r\n\r\n**mobile/test_no_js_errors.js**:\r\n\r\n    var page = require(&#39;webpage&#39;).create(),\r\n        system = require(&#39;system&#39;),\r\n        url = system.args[1],\r\n        status_code;\r\n    \r\n    page.onError = function (msg, trace) {\r\n        console.log(msg);\r\n        trace.forEach(function(item) {\r\n            console.log(&#39;  &#39;, item.file, &#39;:&#39;, item.line);\r\n        });\r\n    };\r\n    \r\n    page.onResourceReceived = function(resource) {\r\n        if (resource.url == url) {\r\n            status_code = resource.status;\r\n        }\r\n    };\r\n    \r\n    page.open(url, function (status) {\r\n        if (status == &quot;fail&quot; || status_code != 200) {\r\n            console.log(&quot;Error: &quot; + status_code + &quot; for url: &quot; + url);\r\n            phantom.exit(1);\r\n        }\r\n        phantom.exit(0);\r\n    });\r\n\r\n**mobile/tests.py**:\r\n\r\n    import subprocess\r\n    from django.test import LiveServerTestCase\r\n    \r\n    class MobileTest(LiveServerTestCase):\r\n        def test_mobile_js(self):\r\n            args = [&quot;phantomjs&quot;, &quot;mobile/test_no_js_errors.js&quot;, self.live_server_url]\r\n            result = subprocess.check_output(args)\r\n            self.assertEqual(result, &quot;&quot;)  # No result means no error\r\n\r\n**Run tests**:\r\n\r\n``manage.py test mobile``"}, {"tags": [], "down_vote_count": 2, "creation_date": 1364545396, "answer_id": 15699761, "path": "stack.django.answer", "score": 348, "up_vote_count": 350, "is_accepted": true, "last_activity_date": 1511612200, "last_edit_date": 1511612200, "body_markdown": "The easiest way to use PhantomJS in python is via Selenium. The simplest installation method is\r\n\r\n 1. Install [NodeJS][1]\r\n 1. Using Node&#39;s package manager install phantomjs: `npm -g install phantomjs-prebuilt`\r\n 1. install selenium (in your virtualenv, if you are using that)\r\n\r\nAfter installation, you may use phantom as simple as:\r\n\r\n    from selenium import webdriver\r\n\r\n    driver = webdriver.PhantomJS() # or add to your PATH\r\n    driver.set_window_size(1024, 768) # optional\r\n    driver.get(&#39;https://google.com/&#39;)\r\n    driver.save_screenshot(&#39;screen.png&#39;) # save a screenshot to disk\r\n    sbtn = driver.find_element_by_css_selector(&#39;button.gbqfba&#39;)\r\n    sbtn.click()\r\n\r\nIf your system path environment variable isn&#39;t set correctly, you&#39;ll need to specify the exact path as an argument to `webdriver.PhantomJS()`.  Replace this:\r\n\r\n    driver = webdriver.PhantomJS() # or add to your PATH\r\n\r\n... with the following:\r\n\r\n    driver = webdriver.PhantomJS(executable_path=&#39;/usr/local/lib/node_modules/phantomjs/lib/phantom/bin/phantomjs&#39;)\r\n\r\nReferences:\r\n\r\n - http://selenium-python.readthedocs.io/\r\n - https://stackoverflow.com/questions/14699718/how-do-i-set-a-proxy-for-phantomjs-ghostdriver-in-python-webdriver/15699530#15699530\r\n - https://dzone.com/articles/python-testing-phantomjs\r\n\r\n  [1]: https://nodejs.org/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1367566779, "answer_id": 16353876, "path": "stack.django.answer", "score": 39, "up_vote_count": 39, "is_accepted": false, "last_activity_date": 1367566779, "last_edit_date": 1495541447, "body_markdown": "Now since the GhostDriver comes bundled with the PhantomJS, it has become even more convenient to use it through Selenium.\r\n\r\nI tried the Node installation of PhantomJS, as suggested by Pykler, but in practice I found it to be slower than the standalone installation of PhantomJS. I guess standalone installation didn&#39;t provided these features earlier, but as of v1.9, it very much does so. \r\n\r\n 1. Install PhantomJS (http://phantomjs.org/download.html) (If you are on Linux, following instructions will help https://stackoverflow.com/a/14267295/382630)\r\n 2. Install Selenium using pip.\r\n \r\nNow you can use like this\r\n\r\n    import selenium.webdriver\r\n    driver = selenium.webdriver.PhantomJS()\r\n    driver.get(&#39;http://google.com&#39;)\r\n    # do some processing\r\n    \r\n    driver.quit()"}, {"tags": [], "down_vote_count": 0, "creation_date": 1369089609, "answer_id": 16659485, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1369089609, "body_markdown": "this is what I do, python3.3.  I was processing huge lists of sites, so failing on the timeout was vital for the job to run through the entire list.\r\n\r\n    command = &quot;phantomjs --ignore-ssl-errors=true &quot;+&lt;your js file for phantom&gt;\r\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\r\n\r\n    # make sure phantomjs has time to download/process the page\r\n    # but if we get nothing after 30 sec, just move on\r\n    try:\r\n        output, errors = process.communicate(timeout=30)\r\n    except Exception as e:\r\n        print(&quot;\\t\\tException: %s&quot; % e)\r\n        process.kill()\r\n\r\n    # output will be weird, decode to utf-8 to save heartache\r\n    phantom_output = &#39;&#39;\r\n    for out_line in output.splitlines():\r\n        phantom_output += out_line.decode(&#39;utf-8&#39;)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1411481055, "answer_id": 25997175, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1411481055, "body_markdown": "In case you are using [Buildout](http://www.buildout.org/en/latest/), you can easily automate the installation processes that Pykler describes using the [gp.recipe.node](https://pypi.python.org/pypi/gp.recipe.node) recipe.\r\n\r\n    [nodejs]\r\n    recipe = gp.recipe.node\r\n    version = 0.10.32\r\n    npms = phantomjs\r\n    scripts = phantomjs\r\n\r\nThat part installs node.js as binary (at least on my system) and then uses npm to install PhantomJS. Finally it creates an entry point `bin/phantomjs`, which you can call the PhantomJS webdriver with. (To install Selenium, you need to specify it in your egg requirements or in the Buildout configuration.)\r\n\r\n    driver = webdriver.PhantomJS(&#39;bin/phantomjs&#39;)"}, {"tags": [], "down_vote_count": 1, "creation_date": 1473875472, "answer_id": 39496735, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1473875472, "body_markdown": "If using Anaconda, install with:\r\n\r\n    conda install PhantomJS\r\n\r\nin your script:\r\n\r\n    from selenium import webdriver\r\n    driver=webdriver.PhantomJS()\r\n\r\nworks perfectly.  \r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1488790009, "answer_id": 42621126, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1488790009, "last_edit_date": 1495541908, "body_markdown": "The [answer by @Pykler][1] is great but the Node requirement is outdated. The comments in that answer suggest the simpler answer, which I&#39;ve put here to save others time:\r\n\r\n1. Install PhantomJS\r\n\r\n   As @Vivin-Paliath points out, it&#39;s a standalone project, not part of Node.\r\n\r\n   Mac:\r\n\r\n        brew install phantomjs\r\n\r\n   Ubuntu:\r\n\r\n        sudo apt-get install phantomjs\r\n\r\n   etc\r\n\r\n2. Set up a ``virtualenv`` (if you haven&#39;t already):\r\n\r\n        virtualenv mypy  # doesn&#39;t have to be &quot;mypy&quot;. Can be anything.\r\n        . mypy/bin/activate\r\n\r\n   If your machine has both Python 2 and 3 you may need run ``virtualenv-3.6 mypy`` or similar.\r\n\r\n3. Install selenium:\r\n\r\n        pip install selenium\r\n\r\n4. Try a simple test, like this borrowed from the [docs](http://selenium-python.readthedocs.io/getting-started.html#simple-usage):\r\n\r\n        from selenium import webdriver\r\n        from selenium.webdriver.common.keys import Keys\r\n        \r\n        driver = webdriver.PhantomJS()\r\n        driver.get(&quot;http://www.python.org&quot;)\r\n        assert &quot;Python&quot; in driver.title\r\n        elem = driver.find_element_by_name(&quot;q&quot;)\r\n        elem.clear()\r\n        elem.send_keys(&quot;pycon&quot;)\r\n        elem.send_keys(Keys.RETURN)\r\n        assert &quot;No results found.&quot; not in driver.page_source\r\n        driver.close()\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/15699761/963195"}], "title": "Is there a way to use PhantomJS in Python?", "view_count": 134350, "answer_count": 8, "code_snippet": ["<code>os.popen()</code>", "<code>subprocess.Popen()</code>", "<code>subprocess.popen</code>", "<code>npm -g install phantomjs-prebuilt</code>", "<code>from selenium import webdriver\n\ndriver = webdriver.PhantomJS() # or add to your PATH\ndriver.set_window_size(1024, 768) # optional\ndriver.get('https://google.com/')\ndriver.save_screenshot('screen.png') # save a screenshot to disk\nsbtn = driver.find_element_by_css_selector('button.gbqfba')\nsbtn.click()\n</code>", "<code>webdriver.PhantomJS()</code>", "<code>driver = webdriver.PhantomJS() # or add to your PATH\n</code>", "<code>driver = webdriver.PhantomJS(executable_path='/usr/local/lib/node_modules/phantomjs/lib/phantom/bin/phantomjs')\n</code>", "<code>driver.page_source</code>", "<code>bodyStr= driver.find_element_by_tag_name(\"body\").get_attribute(\"innerHTML\")</code>", "<code>ghost.py</code>", "<code>from ghost import Ghost\nghost = Ghost()\n\nwith ghost.start() as session:\n    page, extra_resources = ghost.open(\"http://jeanphi.me\")\n    assert page.http_status==200 and 'jeanphix' in ghost.content\n</code>", "<code>import selenium.webdriver\ndriver = selenium.webdriver.PhantomJS()\ndriver.get('http://google.com')\n# do some processing\n\ndriver.quit()\n</code>", "<code>var page = require('webpage').create(),\n    system = require('system'),\n    url = system.args[1],\n    status_code;\n\npage.onError = function (msg, trace) {\n    console.log(msg);\n    trace.forEach(function(item) {\n        console.log('  ', item.file, ':', item.line);\n    });\n};\n\npage.onResourceReceived = function(resource) {\n    if (resource.url == url) {\n        status_code = resource.status;\n    }\n};\n\npage.open(url, function (status) {\n    if (status == \"fail\" || status_code != 200) {\n        console.log(\"Error: \" + status_code + \" for url: \" + url);\n        phantom.exit(1);\n    }\n    phantom.exit(0);\n});\n</code>", "<code>import subprocess\nfrom django.test import LiveServerTestCase\n\nclass MobileTest(LiveServerTestCase):\n    def test_mobile_js(self):\n        args = [\"phantomjs\", \"mobile/test_no_js_errors.js\", self.live_server_url]\n        result = subprocess.check_output(args)\n        self.assertEqual(result, \"\")  # No result means no error\n</code>", "<code>manage.py test mobile</code>", "<code>command = \"phantomjs --ignore-ssl-errors=true \"+&lt;your js file for phantom&gt;\nprocess = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\n\n# make sure phantomjs has time to download/process the page\n# but if we get nothing after 30 sec, just move on\ntry:\n    output, errors = process.communicate(timeout=30)\nexcept Exception as e:\n    print(\"\\t\\tException: %s\" % e)\n    process.kill()\n\n# output will be weird, decode to utf-8 to save heartache\nphantom_output = ''\nfor out_line in output.splitlines():\n    phantom_output += out_line.decode('utf-8')\n</code>", "<code>conda install PhantomJS\n</code>", "<code>from selenium import webdriver\ndriver=webdriver.PhantomJS()\n</code>", "<code>brew install phantomjs\n</code>", "<code>sudo apt-get install phantomjs\n</code>", "<code>virtualenv</code>", "<code>virtualenv mypy  # doesn't have to be \"mypy\". Can be anything.\n. mypy/bin/activate\n</code>", "<code>virtualenv-3.6 mypy</code>", "<code>pip install selenium\n</code>", "<code>from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\n\ndriver = webdriver.PhantomJS()\ndriver.get(\"http://www.python.org\")\nassert \"Python\" in driver.title\nelem = driver.find_element_by_name(\"q\")\nelem.clear()\nelem.send_keys(\"pycon\")\nelem.send_keys(Keys.RETURN)\nassert \"No results found.\" not in driver.page_source\ndriver.close()\n</code>", "<code>PhantomJS</code>", "<code>pip</code>", "<code>[nodejs]\nrecipe = gp.recipe.node\nversion = 0.10.32\nnpms = phantomjs\nscripts = phantomjs\n</code>", "<code>bin/phantomjs</code>", "<code>driver = webdriver.PhantomJS('bin/phantomjs')\n</code>", "<code>gp.recipe.phantomjs</code>", "<code>phantomjs</code>", "<code>casperjs</code>"], "path": "stack.django"}, {"tags": ["django", "csrf"], "creation_date": 1299363427, "body_markdown": "Okay guys, I am writing a Django application and I just want an idea of what actually a csrf token is and how it protects the data. Is the post data not safe if you do not use csrf tokens?\r\n\r\nI know how to use csrf_token but I just need some information how it works. Thanks.", "last_edit_date": 1474241011, "up_vote_count": 300, "link": "https://stackoverflow.com/questions/5207160/what-is-a-csrf-token-what-is-its-importance-and-how-does-it-work", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1299364917, "answer_id": 5207281, "path": "stack.django.answer", "score": 44, "up_vote_count": 44, "is_accepted": false, "last_activity_date": 1299364917, "body_markdown": "The site generates a unique token when it makes the form page.  This token is required to post/get data back to the server.\r\n\r\nSince the token is generated by your site and provided only when the page with the form is generated, some other site can&#39;t mimic your forms -- they won&#39;t have the token and therefore can&#39;t post to your site."}, {"tags": [], "down_vote_count": 2, "creation_date": 1299366710, "answer_id": 5207418, "path": "stack.django.answer", "score": 5, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1299366710, "body_markdown": "The root of it all is to make sure that the requests are coming from the actual users of the site. A csrf token is generated for the forms and Must be tied to the user&#39;s sessions. It is used to send requests to the server, in which the token validates them. This is one way of protecting against csrf, another would be checking the referrer header."}, {"tags": [], "down_vote_count": 0, "creation_date": 1299367077, "answer_id": 5207466, "path": "stack.django.answer", "score": 198, "up_vote_count": 198, "is_accepted": false, "last_activity_date": 1299367077, "body_markdown": "Yes, the post data is safe. But the origin of that data is not. This way somebody can trick user with JS into logging in to your site, while browsing attacker&#39;s web page. \r\n\r\nIn order to prevent that, django will send a random key both in cookie, and form data.\r\nThen, when users POSTs, it will check if two keys are identical. In case where user is tricked, 3rd party website cannot get your site&#39;s cookies, thus causing auth error."}, {"tags": [], "down_vote_count": 0, "creation_date": 1448031139, "answer_id": 33829607, "path": "stack.django.answer", "score": 876, "up_vote_count": 876, "is_accepted": false, "last_activity_date": 1504859280, "last_edit_date": 1504859280, "body_markdown": "## Cross-Site Request Forgery (CSRF) in simple words ##\r\n\r\n - Assume you are currently logged into your online banking at ``www.mybank.com``\r\n - Assume a money transfer from ``mybank.com`` will result in a request of (conceptually) the form ``http://www.mybank.com/transfer?to=&lt;SomeAccountnumber&gt;;amount=&lt;SomeAmount&gt;``. (Your account number is not needed, because it is implied by your login.)\r\n - You visit ``www.cute-cat-pictures.org``, not knowing that it is a malicious site.\r\n - If the owner of that site knows the form of the above request (easy!) and correctly guesses you are logged into ``mybank.com`` (requires some luck!), they could include on their page a request like ``http://www.mybank.com/transfer?to=123456;amount=10000`` (where ``123456`` is the number of their Cayman Islands account and ``10000`` is an amount that you previously thought you were _glad_ to possess).\r\n - _You_ retrieved that ``www.cute-cat-pictures.org`` page, so _your_ browser will make that request.\r\n - Your bank cannot recognize this origin of the request: Your web browser will send the request along with your ``www.mybank.com`` cookie and it will look perfectly legitimate. There goes your money!\r\n\r\nThis is the world **without CSRF tokens**.\r\n\r\nNow for the better one **_with_ CSRF tokens**:\r\n\r\n - The transfer request is extended with a third argument: ``http://www.mybank.com/transfer?to=123456;amount=10000;token=31415926535897932384626433832795028841971``. \r\n - That token is a huge, impossible-to-guess random number that ``mybank.com`` will include on their own web page when they serve it to you. It is *different* each time they serve any page to anybody.\r\n - The attacker is not able to guess the token, is not able to convince your web browser to surrender it (if the browser works correctly...), and so the attacker will _not_ be able to create a valid request, because requests with the wrong token (or no token) will be refused by ``www.mybank.com``.\r\n\r\nResult: You keep your ``10000`` monetary units. I suggest you donate some of that to Wikipedia.\r\n\r\n(Your mileage may vary.)"}], "title": "What is a CSRF token ? What is its importance and how does it work?", "view_count": 164442, "answer_count": 4, "code_snippet": ["<code>www.mybank.com</code>", "<code>mybank.com</code>", "<code>http://www.mybank.com/transfer?to=&lt;SomeAccountnumber&gt;;amount=&lt;SomeAmount&gt;</code>", "<code>www.cute-cat-pictures.org</code>", "<code>mybank.com</code>", "<code>http://www.mybank.com/transfer?to=123456;amount=10000</code>", "<code>123456</code>", "<code>10000</code>", "<code>www.cute-cat-pictures.org</code>", "<code>www.mybank.com</code>", "<code>http://www.mybank.com/transfer?to=123456;amount=10000;token=31415926535897932384626433832795028841971</code>", "<code>mybank.com</code>", "<code>www.mybank.com</code>", "<code>10000</code>", "<code>www.cute-cat-pictures.org</code>", "<code>www.mybank.com</code>", "<code>Access-Control-Allow-Origin: *</code>", "<code>www.cute-cat-pictures.org</code>", "<code>www.mybank.com</code>"], "path": "stack.django"}, {"tags": ["python", "html"], "creation_date": 1239819866, "body_markdown": "    from mechanize import Browser\r\n    br = Browser()\r\n    br.open(&#39;http://somewebpage&#39;)\r\n    html = br.response().readlines()\r\n    for line in html:\r\n      print line\r\n\r\nWhen printing a line in an HTML file, I&#39;m trying to find a way to only show the contents of each HTML element and not the formatting itself. If it finds `&#39;&lt;a href=&quot;whatever.com&quot;&gt;some text&lt;/a&gt;&#39;`, it will only print &#39;some text&#39;, `&#39;&lt;b&gt;hello&lt;/b&gt;&#39;` prints &#39;hello&#39;, etc. How would one go about doing this?\r\n", "last_edit_date": 1374356327, "up_vote_count": 207, "link": "https://stackoverflow.com/questions/753052/strip-html-from-strings-in-python", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1239820261, "answer_id": 753083, "path": "stack.django.answer", "score": 2, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1319849407, "last_edit_date": 1319849407, "body_markdown": "You can use either a different HTML parser ([like lxml][1], or [Beautiful Soup][2]) -- one that offers functions to extract just text. Or, you can run a regex on your line string that strips out the tags. See [http://www.amk.ca/python/howto/regex/][3] for more.\r\n\r\n\r\n  [1]: http://codespeak.net/lxml/\r\n  [2]: http://www.crummy.com/software/BeautifulSoup/\r\n  [3]: http://www.amk.ca/python/howto/regex/"}, {"tags": [], "down_vote_count": 4, "creation_date": 1243597661, "answer_id": 925630, "path": "stack.django.answer", "score": 346, "up_vote_count": 350, "is_accepted": true, "last_activity_date": 1440677144, "last_edit_date": 1495540502, "body_markdown": "I always used this function to strip HTML tags, as it requires only the Python stdlib:\r\n\r\nOn Python 2\r\n\r\n    from HTMLParser import HTMLParser\r\n    \r\n    class MLStripper(HTMLParser):\r\n        def __init__(self):\r\n            self.reset()\r\n            self.fed = []\r\n        def handle_data(self, d):\r\n            self.fed.append(d)\r\n        def get_data(self):\r\n            return &#39;&#39;.join(self.fed)\r\n        \r\n    def strip_tags(html):\r\n        s = MLStripper()\r\n        s.feed(html)\r\n        return s.get_data()\r\n\r\nFor Python 3\r\n\r\n    from html.parser import HTMLParser\r\n    \r\n    class MLStripper(HTMLParser):\r\n        def __init__(self):\r\n            self.reset()\r\n            self.strict = False\r\n            self.convert_charrefs= True\r\n            self.fed = []\r\n        def handle_data(self, d):\r\n            self.fed.append(d)\r\n        def get_data(self):\r\n            return &#39;&#39;.join(self.fed)\r\n        \r\n    def strip_tags(html):\r\n        s = MLStripper()\r\n        s.feed(html)\r\n        return s.get_data()\r\n\r\n**Note**: this works only for 3.1. For 3.2 or above, you need to call the parent class&#39;s __init__ function. See [Using HTMLParser in Python 3.2](https://stackoverflow.com/q/11061058/3416774)"}, {"tags": [], "down_vote_count": 3, "creation_date": 1286206009, "answer_id": 3856657, "path": "stack.django.answer", "score": 0, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1374356392, "last_edit_date": 1374356392, "body_markdown": "You can write your own function:\r\n\r\n    def StripTags(text):\r\n         finished = 0\r\n         while not finished:\r\n             finished = 1\r\n             start = text.find(&quot;&lt;&quot;)\r\n             if start &gt;= 0:\r\n                 stop = text[start:].find(&quot;&gt;&quot;)\r\n                 if stop &gt;= 0:\r\n                     text = text[:start] + text[start+stop+1:]\r\n                     finished = 0\r\n         return text\r\n"}, {"tags": [], "down_vote_count": 10, "creation_date": 1296608956, "answer_id": 4869782, "path": "stack.django.answer", "score": 119, "up_vote_count": 129, "is_accepted": false, "last_activity_date": 1375714549, "last_edit_date": 1375714549, "body_markdown": "I haven&#39;t thought much about the cases it will miss, but you can do a simple regex:\r\n\r\n    re.sub(&#39;&lt;[^&lt;]+?&gt;&#39;, &#39;&#39;, text)\r\n\r\nFor those that don&#39;t understand regex, this searches for a string `&lt;...&gt;`, where the inner content is made of one or more (`+`) characters that isn&#39;t a `&lt;`. The `?` means that it will match the smallest string it can find. For example given `&lt;p&gt;Hello&lt;/p&gt;`, it will match `&lt;&#39;p&gt;` and `&lt;/p&gt;` separately with the `?`. Without it, it will match the entire string `&lt;..Hello..&gt;`.\r\n\r\nIf non-tag `&lt;` appears in html (eg. `2 &lt; 3`), it should be written as an escape sequence `&amp;...` anyway so the `^&lt;` may be unnecessary."}, {"tags": [], "down_vote_count": 2, "creation_date": 1296609785, "answer_id": 4869866, "path": "stack.django.answer", "score": -1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1296609785, "body_markdown": "This method works flawlessly for me and requires no additional installations:\r\n\r\n    import re\r\n    import htmlentitydefs\r\n\r\n    def convertentity(m):\r\n    \tif m.group(1)==&#39;#&#39;:\r\n    \t\ttry:\r\n    \t\t\treturn unichr(int(m.group(2)))\r\n    \t\texcept ValueError:\r\n    \t\t\treturn &#39;&amp;#%s;&#39; % m.group(2)\r\n    \t\ttry:\r\n    \t\t\treturn htmlentitydefs.entitydefs[m.group(2)]\r\n    \t\texcept KeyError:\r\n    \t\t\treturn &#39;&amp;%s;&#39; % m.group(2)\r\n    \r\n    def converthtml(s):\r\n    \treturn re.sub(r&#39;&amp;(#?)(.+?);&#39;,convertentity,s)\r\n\r\n    html =  converthtml(html)\r\n    html.replace(&quot;&amp;nbsp;&quot;, &quot; &quot;) ## Get rid of the remnants of certain formatting(subscript,superscript,etc)."}, {"tags": [], "down_vote_count": 1, "creation_date": 1318688395, "answer_id": 7778368, "path": "stack.django.answer", "score": 26, "up_vote_count": 27, "is_accepted": false, "last_activity_date": 1447075762, "last_edit_date": 1447075762, "body_markdown": "I needed a way to strip tags *and* decode HTML entities to plain text. The following solution is based on Eloff&#39;s answer (which I couldn&#39;t use because it strips entities).\r\n\r\n    from HTMLParser import HTMLParser\r\n    import htmlentitydefs\r\n\r\n    class HTMLTextExtractor(HTMLParser):\r\n        def __init__(self):\r\n            HTMLParser.__init__(self)\r\n            self.result = [ ]\r\n            \r\n        def handle_data(self, d):\r\n            self.result.append(d)\r\n        \r\n        def handle_charref(self, number):\r\n            codepoint = int(number[1:], 16) if number[0] in (u&#39;x&#39;, u&#39;X&#39;) else int(number)\r\n            self.result.append(unichr(codepoint))\r\n        \r\n        def handle_entityref(self, name):\r\n            codepoint = htmlentitydefs.name2codepoint[name]\r\n            self.result.append(unichr(codepoint))\r\n            \r\n        def get_text(self):\r\n            return u&#39;&#39;.join(self.result)\r\n        \r\n    def html_to_text(html):\r\n        s = HTMLTextExtractor()\r\n        s.feed(html)\r\n        return s.get_text()\r\n\r\n\r\nA quick test:\r\n\r\n    html = u&#39;&lt;a href=&quot;#&quot;&gt;Demo &lt;em&gt;(&amp;not; \\u0394&amp;#x03b7;&amp;#956;&amp;#x03CE;)&lt;/em&gt;&lt;/a&gt;&#39;\r\n    print repr(html_to_text(html))\r\n\r\nResult:\r\n\r\n    u&#39;Demo (\\xac \\u0394\\u03b7\\u03bc\\u03ce)&#39;\r\n\r\nError handling:\r\n\r\n* Invalid HTML structure may cause an [HTMLParseError][1].\r\n* Invalid named HTML entities (such as `&amp;#apos;`, which is valid in XML and XHTML, but not plain HTML) will cause a `ValueError` exception.\r\n* Numeric HTML entities specifying code points outside the Unicode range acceptable by Python (such as, on some systems, characters outside the [Basic Multilingual Plane][2]) will cause a `ValueError` exception.\r\n\r\n  [1]: http://docs.python.org/library/htmlparser.html#HTMLParser.HTMLParseError\r\n  [2]: http://en.wikipedia.org/wiki/Basic_Multilingual_Plane\r\n\r\n**Security note:** Do not confuse HTML stripping (converting HTML into plain text) with HTML sanitizing (converting plain text into HTML). This answer will remove HTML and decode entities into plain text \u2013 that does not make the result safe to use in a HTML context.\r\n\r\nExample: `&amp;lt;script&amp;gt;alert(&quot;Hello&quot;);&amp;lt;/script&amp;gt;` will be converted to `&lt;script&gt;alert(&quot;Hello&quot;);&lt;/script&gt;`, which is 100% correct behavior, but obviously not sufficient if the resulting plain text is inserted into a HTML page.\r\n\r\nThe rule is not hard: _Any time_ you insert a plain-text string into HTML output, you should _always_ HTML escape it (using `cgi.escape(s, True)`), even if you &quot;know&quot; that it doesn&#39;t contain HTML (e.g. because you stripped HTML content).\r\n\r\n(However, the OP asked about printing the result to the console, in which case no HTML escaping is needed.)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1340033355, "answer_id": 11086026, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1340033355, "last_edit_date": 1495540968, "body_markdown": "I have used Eloff&#39;s answer successfully for Python 3.1 [many thanks!].\r\n\r\nI upgraded to Python 3.2.3, and ran into errors. \r\n\r\nThe solution, provided [here][1] thanks to the responder Thomas K, is to insert `super().__init__()` into the following code:\r\n\r\n    def __init__(self):\r\n        self.reset()\r\n        self.fed = []\r\n\r\n... in order to make it look like this:\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.reset()\r\n        self.fed = []\r\n\r\n... and it will work for Python 3.2.3.\r\n\r\nAgain, thanks to Thomas K for the fix and for Eloff&#39;s original code provided above!\r\n\r\n\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/11061058/using-htmlparser-in-python-3-2"}, {"tags": [], "down_vote_count": 1, "creation_date": 1354627542, "answer_id": 13703994, "path": "stack.django.answer", "score": 16, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1354627542, "last_edit_date": 1495542893, "body_markdown": "If you need to preserve HTML entities (i.e. `&amp;amp;`), I added &quot;handle_entityref&quot; method to [Eloff&#39;s answer][1].\r\n\r\n\r\n    from HTMLParser import HTMLParser\r\n    \r\n    class MLStripper(HTMLParser):\r\n        def __init__(self):\r\n            self.reset()\r\n            self.fed = []\r\n        def handle_data(self, d):\r\n            self.fed.append(d)\r\n        def handle_entityref(self, name):\r\n            self.fed.append(&#39;&amp;%s;&#39; % name)\r\n        def get_data(self):\r\n            return &#39;&#39;.join(self.fed)\r\n    \r\n    def html_to_text(html):\r\n        s = MLStripper()\r\n        s.feed(html)\r\n        return s.get_data()\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/925630/1094246"}, {"tags": [], "down_vote_count": 1, "creation_date": 1358875349, "answer_id": 14464381, "path": "stack.django.answer", "score": 15, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1358875661, "last_edit_date": 1358875661, "body_markdown": "There&#39;s a simple way to this:\r\n\r\n    def remove_html_markup(s):\r\n        tag = False\r\n        quote = False\r\n        out = &quot;&quot;\r\n\r\n        for c in s:\r\n                if c == &#39;&lt;&#39; and not quote:\r\n                    tag = True\r\n                elif c == &#39;&gt;&#39; and not quote:\r\n                    tag = False\r\n                elif (c == &#39;&quot;&#39; or c == &quot;&#39;&quot;) and tag:\r\n                    quote = not quote\r\n                elif not tag:\r\n                    out = out + c\r\n\r\n        return out\r\n\r\nThe idea is explained here: [http://youtu.be/2tu9LTDujbw][1]\r\n\r\nYou can see it working here: [http://youtu.be/HPkNPcYed9M?t=35s][2]\r\n\r\nPS - If you&#39;re interested in the class(about smart debugging with python) I give you a link: [http://www.udacity.com/overview/Course/cs259/CourseRev/1][3]. It&#39;s free! \r\n\r\nYou&#39;re welcome! :)\r\n\r\n\r\n  [1]: http://youtu.be/2tu9LTDujbw\r\n  [2]: http://youtu.be/HPkNPcYed9M?t=35s\r\n  [3]: http://www.udacity.com/overview/Course/cs259/CourseRev/1"}, {"tags": [], "down_vote_count": 1, "creation_date": 1359546469, "answer_id": 14603269, "path": "stack.django.answer", "score": 12, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1410682541, "last_edit_date": 1410682541, "body_markdown": "If you want to strip all HTML tags the easiest way I found is using BeautifulSoup:\r\n\r\n    from bs4 import BeautifulSoup  # Or from BeautifulSoup import BeautifulSoup\r\n    \r\n    def stripHtmlTags(self, htmlTxt):\r\n        if htmlTxt is None:\r\n                return None\r\n            else:\r\n                return &#39;&#39;.join(BeautifulSoup(htmlTxt).findAll(text=True)) \r\n\r\n   \r\nI tried the code of the accepted answer but I was getting  &quot;RuntimeError: maximum recursion depth exceeded&quot;, which didn&#39;t happen with the above block of code."}, {"tags": [], "down_vote_count": 0, "creation_date": 1383321072, "answer_id": 19730306, "path": "stack.django.answer", "score": 24, "up_vote_count": 24, "is_accepted": false, "last_activity_date": 1444315608, "last_edit_date": 1444315608, "body_markdown": "## Short version! ##\r\n\r\n    import re, cgi\r\n    tag_re = re.compile(r&#39;(&lt;!--.*?--&gt;|&lt;[^&gt;]*&gt;)&#39;)\r\n\r\n    # Remove well-formed tags, fixing mistakes by legitimate users\r\n    no_tags = tag_re.sub(&#39;&#39;, user_input)\r\n\r\n    # Clean up anything else by escaping\r\n    ready_for_web = cgi.escape(no_tags)\r\n\r\n[Regex source: MarkupSafe](https://github.com/mitsuhiko/markupsafe/blob/0.23/markupsafe/__init__.py#L21).  Their version handles HTML entities too, while this quick one doesn&#39;t.\r\n\r\n## Why can&#39;t I just strip the tags and leave it? ##\r\n\r\nIt&#39;s one thing to keep people from `&lt;i&gt;italicizing&lt;/i&gt;` things, without leaving `i`s floating around.  But it&#39;s another to take arbitrary input and make it completely harmless.  Most of the techniques on this page will leave things like unclosed comments (`&lt;!--`) and angle-brackets that aren&#39;t part of tags (`blah &lt;&lt;&lt;&gt;&lt;blah`) intact.  The HTMLParser version can even leave complete tags in, if they&#39;re inside an unclosed comment.\r\n\r\nWhat if your template is `{{ firstname }} {{ lastname }}`?  `firstname = &#39;&lt;a&#39;` and `lastname = &#39;href=&quot;http://evil.com/&quot;&gt;&#39;` will be let through by every tag stripper on this page (except @Medeiros!), because they&#39;re not complete tags on their own.  Stripping out normal HTML tags is not enough.\r\n\r\nDjango&#39;s `strip_tags`, an improved (see next heading) version of the top answer to this question, gives the following warning:\r\n\r\n&gt; Absolutely NO guarantee is provided about the resulting string being HTML safe. So NEVER mark safe the result of a `strip_tags` call without escaping it first, for example with `escape()`.\r\n\r\nFollow their advice!\r\n\r\n## To strip tags with HTMLParser, you have to run it multiple times. ##\r\n\r\n**It&#39;s easy to circumvent the top answer to this question.**\r\n\r\nLook at this string ([source and discussion](https://www.mehmetince.net/django-strip_tags-bypass-vulnerability-exploit/)):\r\n\r\n    &lt;img&lt;!-- --&gt; src=x onerror=alert(1);//&gt;&lt;!-- --&gt;\r\n\r\nThe first time HTMLParser sees it, it can&#39;t tell that the `&lt;img...&gt;` is a tag.  It looks broken, so HTMLParser doesn&#39;t get rid of it.  It only takes out the `&lt;!-- comments --&gt;`, leaving you with\r\n\r\n    &lt;img src=x onerror=alert(1);//&gt;\r\n\r\nThis problem was disclosed to the Django project in March, 2014.  Their old `strip_tags` was essentially the same as the top answer to this question.  [Their new version](https://github.com/django/django/blob/1.7.7/django/utils/html.py#L170) basically runs it in a loop until running it again doesn&#39;t change the string:\r\n\r\n    # _strip_once runs HTMLParser once, pulling out just the text of all the nodes.\r\n\r\n    def strip_tags(value):\r\n        &quot;&quot;&quot;Returns the given HTML with all tags stripped.&quot;&quot;&quot;\r\n        # Note: in typical case this loop executes _strip_once once. Loop condition\r\n        # is redundant, but helps to reduce number of executions of _strip_once.\r\n        while &#39;&lt;&#39; in value and &#39;&gt;&#39; in value:\r\n            new_value = _strip_once(value)\r\n            if len(new_value) &gt;= len(value):\r\n                # _strip_once was not able to detect more tags\r\n                break\r\n            value = new_value\r\n        return value\r\n\r\nOf course, none of this is an issue if you always escape the result of `strip_tags()`.\r\n\r\n**Update 19 March, 2015**: There was a bug in Django versions before 1.4.20, 1.6.11, 1.7.7, and 1.8c1.  These versions could enter an infinite loop in the strip_tags() function.  The fixed version is reproduced above.  [More details here](https://www.djangoproject.com/weblog/2015/mar/18/security-releases/).\r\n\r\n## Good things to copy or use ##\r\n\r\nMy example code doesn&#39;t handle HTML entities - the Django and MarkupSafe packaged versions do.\r\n\r\nMy example code is pulled from the excellent [MarkupSafe](https://pypi.python.org/pypi/MarkupSafe) library for cross-site scripting prevention.  It&#39;s convenient and fast (with C speedups to its native Python version).  It&#39;s included in [Google App Engine](https://developers.google.com/appengine/docs/python/tools/libraries27), and used by [Jinja2 (2.7 and up)](http://jinja.pocoo.org/docs/intro/#markupsafe-dependency), Mako, Pylons, and more.  It works easily with Django templates from Django 1.7.\r\n\r\nDjango&#39;s strip_tags and other html utilities *from a recent version* are good, but I find them less convenient than MarkupSafe.  They&#39;re pretty self-contained, you could copy what you need from [this file](https://github.com/django/django/blob/1.7.1/django/utils/html.py).\r\n\r\nIf you need to strip *almost* all tags, the [Bleach](http://bleach.readthedocs.org/en/latest/) library is good.  You can have it enforce rules like &quot;my users can italicize things, but they can&#39;t make iframes.&quot;\r\n\r\nUnderstand the properties of your tag stripper!  Run fuzz tests on it!  [Here is the code](https://gist.github.com/tgs/5b6bba6891565762fe39) I used to do the research for this answer.\r\n\r\n_sheepish note_ - The question itself is about printing to the console, but this is the top Google result for &quot;python strip html from string&quot;, so that&#39;s why this answer is 99% about the web."}, {"tags": [], "down_vote_count": 0, "creation_date": 1390568295, "answer_id": 21333355, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1390568295, "body_markdown": "The solutions with HTML-Parser are all breakable, if they run only once:\r\n\r\n    html_to_text(&#39;&lt;&lt;b&gt;script&gt;alert(&quot;hacked&quot;)&lt;&lt;/b&gt;/script&gt;\r\nresults in:\r\n\r\n    &lt;script&gt;alert(&quot;hacked&quot;)&lt;/script&gt;\r\nwhat you intend to prevent. if you use a HTML-Parser, count the Tags until zero are replaced:\r\n\r\n    from HTMLParser import HTMLParser\r\n    \r\n    class MLStripper(HTMLParser):\r\n        def __init__(self):\r\n            self.reset()\r\n            self.fed = []\r\n            self.containstags = False\r\n\r\n        def handle_starttag(self, tag, attrs):\r\n           self.containstags = True\r\n\r\n        def handle_data(self, d):\r\n            self.fed.append(d)\r\n\r\n        def has_tags(self):\r\n            return self.containstags\r\n\r\n        def get_data(self):\r\n            return &#39;&#39;.join(self.fed)\r\n    \r\n    def strip_tags(html):\r\n        must_filtered = True\r\n        while ( must_filtered ):\r\n            s = MLStripper()\r\n            s.feed(html)\r\n            html = s.get_data()\r\n            must_filtered = s.has_tags()\r\n        return html\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1438919142, "answer_id": 31869361, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1438919485, "last_edit_date": 1438919485, "body_markdown": "This is a quick fix and can be even more optimized but it will work fine. This code will replace all non empty tags with &quot;&quot; and strips all html tags form a given input text .You can run it using ./file.py input output\r\n\r\n        #!/usr/bin/python\r\n    import sys\r\n    \r\n    def replace(strng,replaceText):\r\n    \trpl = 0\r\n    \twhile rpl &gt; -1:\r\n    \t\trpl = strng.find(replaceText)\r\n    \t\tif rpl != -1:\r\n    \t\t\tstrng = strng[0:rpl] + strng[rpl + len(replaceText):]\r\n    \treturn strng\r\n    \r\n    \r\n    lessThanPos = -1\r\n    count = 0\r\n    listOf = []\r\n    \r\n    try:\r\n    \t#write File\r\n    \twriteto = open(sys.argv[2],&#39;w&#39;)\r\n    \r\n    \t#read file and store it in list\r\n    \tf = open(sys.argv[1],&#39;r&#39;)\r\n    \tfor readLine in f.readlines():\r\n    \t\tlistOf.append(readLine)\t     \t\r\n    \tf.close()\r\n    \t\r\n    \t#remove all tags  \r\n    \tfor line in listOf:\r\n    \t\tcount = 0;\t\r\n    \t\tlessThanPos = -1  \r\n    \t\tlineTemp =  line\r\n    \t\t\r\n        \t\tfor char in lineTemp:\r\n    \t\t\r\n    \t\t\tif char == &quot;&lt;&quot;:\r\n    \t\t\t\tlessThanPos = count\r\n    \t\t\tif char == &quot;&gt;&quot;:\r\n    \t\t\t\tif lessThanPos &gt; -1:\r\n    \t\t\t\t\tif line[lessThanPos:count + 1] != &#39;&lt;&gt;&#39;:\r\n    \t\t\t\t\t\tlineTemp = replace(lineTemp,line[lessThanPos:count + 1])\r\n    \t\t\t\t\t\tlessThanPos = -1\r\n    \t\t\tcount = count + 1\r\n    \t\tlineTemp = lineTemp.replace(&quot;&amp;lt&quot;,&quot;&lt;&quot;)\r\n    \t\tlineTemp = lineTemp.replace(&quot;&amp;gt&quot;,&quot;&gt;&quot;)\t\t\t     \t\r\n    \t\twriteto.write(lineTemp)  \r\n    \twriteto.close() \r\n    \tprint &quot;Write To --- &gt;&quot; , sys.argv[2]\r\n    except:\r\n    \tprint &quot;Help: invalid arguments or exception&quot;\r\n    \tprint &quot;Usage : &quot;,sys.argv[0],&quot; inputfile outputfile&quot;\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1451489473, "answer_id": 34532382, "path": "stack.django.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1451489473, "body_markdown": "Why all of you do it the hard way?\r\nYou can use BeautifulSoup `get_text()` feature.\r\n\r\n\r\n    from bs4 import BeautifulSoup\r\n    \r\n    text = &#39;&#39;&#39;\r\n    &lt;td&gt;&lt;a href=&quot;http://www.fakewebsite.com&quot;&gt;Please can you strip me?&lt;/a&gt;\r\n    &lt;br/&gt;&lt;a href=&quot;http://www.fakewebsite.com&quot;&gt;I am waiting....&lt;/a&gt;\r\n    &lt;/td&gt;\r\n    &#39;&#39;&#39;\r\n    soup = BeautifulSoup(text)\r\n    \r\n    print(soup.get_text())\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1451729452, "answer_id": 34564725, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1451729452, "body_markdown": "I&#39;m parsing Github readmes and I find that the following really works well:\r\n\r\n    import re\r\n    import lxml.html\r\n    \r\n    def strip_markdown(x):\r\n        links_sub = re.sub(r&#39;\\[(.+)\\]\\([^\\)]+\\)&#39;, r&#39;\\1&#39;, x)\r\n        bold_sub = re.sub(r&#39;\\*\\*([^*]+)\\*\\*&#39;, r&#39;\\1&#39;, links_sub)\r\n        emph_sub = re.sub(r&#39;\\*([^*]+)\\*&#39;, r&#39;\\1&#39;, bold_sub)\r\n        return emph_sub\r\n        \r\n    def strip_html(x):\r\n        return lxml.html.fromstring(x).text_content() if x else &#39;&#39;\r\n\r\nAnd then\r\n\r\n    readme = &quot;&quot;&quot;&lt;img src=&quot;https://raw.githubusercontent.com/kootenpv/sky/master/resources/skylogo.png&quot; /&gt;\r\n\r\n                sky is a web scraping framework, implemented with the latest python versions in mind (3.4+). \r\n                It uses the asynchronous `asyncio` framework, as well as many popular modules \r\n                and extensions.\r\n\r\n                Most importantly, it aims for **next generation** web crawling where machine intelligence \r\n                is used to speed up the development/maintainance/reliability of crawling.\r\n\r\n                It mainly does this by considering the user to be interested in content \r\n                from *domains*, not just a collection of *single pages*\r\n                ([templating approach](#templating-approach)).&quot;&quot;&quot;\r\n\r\n    strip_markdown(strip_html(readme))\r\nRemoves all markdown and html correctly.    \r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1488057572, "answer_id": 42461722, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1507272976, "last_edit_date": 1507272976, "body_markdown": "An [lxml.html][1]-based solution (lxml is a native library and therefore much faster than any pure python solution). \r\n\r\n&lt;!-- language-all: lang-python --&gt;\r\n\r\n    from lxml import html\r\n    from lxml.html.clean import clean_html\r\n\r\n    tree = html.fromstring(&quot;&quot;&quot;&lt;span class=&quot;item-summary&quot;&gt;\r\n                                Detailed answers to any questions you might have\r\n                            &lt;/span&gt;&quot;&quot;&quot;)\r\n    clean_tree = clean_html(tree)\r\n    print(clean_tree.text_content().strip())\r\n\r\n    # &gt;&gt;&gt; Detailed answers to any questions you might have\r\n\r\n\r\n&gt; Also see http://lxml.de/lxmlhtml.html#cleaning-up-html for what exactly the lxml.cleaner does. \r\n\r\nIf you want more control on how exactly the HTML is sanitized before converting to text then you might want to use the [lxml Cleaner][2] explicitly by passing the [options you want][2] in the constructor, e.g: \r\n\r\n\r\n    cleaner = Cleaner(page_structure=True, forms=True, style=True, scripts=True, frames=True)\r\n    sanitized_html = cleaner.clean_html(unsafe_html)\r\n\r\n\r\n  [1]: http://lxml.de/lxmlhtml.html\r\n  [2]: http://lxml.de/api/lxml.html.clean.Cleaner-class.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1494921736, "answer_id": 43995687, "path": "stack.django.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1494921736, "body_markdown": "A python 3 adaption of s&#248;ren-l&#248;vborg&#39;s answer\r\n\r\n    from html.parser import HTMLParser\r\n    from html.entities import html5\r\n    \r\n    class HTMLTextExtractor(HTMLParser):\r\n        &quot;&quot;&quot; Adaption of http://stackoverflow.com/a/7778368/196732 &quot;&quot;&quot;\r\n        def __init__(self):\r\n            super().__init__()\r\n            self.result = []\r\n    \r\n        def handle_data(self, d):\r\n            self.result.append(d)\r\n    \r\n        def handle_charref(self, number):\r\n            codepoint = int(number[1:], 16) if number[0] in (u&#39;x&#39;, u&#39;X&#39;) else int(number)\r\n            self.result.append(unichr(codepoint))\r\n    \r\n        def handle_entityref(self, name):\r\n            if name in html5:\r\n                self.result.append(unichr(html5[name]))\r\n    \r\n        def get_text(self):\r\n            return u&#39;&#39;.join(self.result)\r\n    \r\n    def html_to_text(html):\r\n        s = HTMLTextExtractor()\r\n        s.feed(html)\r\n        return s.get_text()\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1495963985, "answer_id": 44225791, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1498376113, "last_edit_date": 1498376113, "body_markdown": "The Beautiful Soup package does this immediately for you. \r\n\r\n    from bs4 import BeautifulSoup\r\n    \r\n    soup = BeautifulSoup(html)\r\n    text = soup.get_text()\r\n    print(text)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1514385709, "answer_id": 47994071, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1514385709, "body_markdown": "Using BeautifulSoup, html2text or the code from @Eloff, most of the time, it remains some html elements, javascript code...\r\n\r\nSo you can use a combination of these libraries and delete markdown formatting (Python 3):\r\n\r\n    import re\r\n    import html2text\r\n    from bs4 import BeautifulSoup\r\n    def html2Text(html):\r\n        def removeMarkdown(text):\r\n            for current in [&quot;^[ #*]{2,30}&quot;, &quot;^[ ]{0,30}\\d\\\\\\.&quot;, &quot;^[ ]{0,30}\\d\\.&quot;]:\r\n                markdown = re.compile(current, flags=re.MULTILINE)\r\n                text = markdown.sub(&quot; &quot;, text)\r\n            return text\r\n        def removeAngular(text):\r\n            angular = re.compile(&quot;[{][|].{2,40}[|][}]|[{][*].{2,40}[*][}]|[{][{].{2,40}[}][}]|\\[\\[.{2,40}\\]\\]&quot;)\r\n            text = angular.sub(&quot; &quot;, text)\r\n            return text\r\n        h = html2text.HTML2Text()\r\n        h.images_to_alt = True\r\n        h.ignore_links = True\r\n        h.ignore_emphasis = False\r\n        h.skip_internal_links = True\r\n        text = h.handle(html)\r\n        soup = BeautifulSoup(text, &quot;html.parser&quot;)\r\n        text = soup.text\r\n        text = removeAngular(text)\r\n        text = removeMarkdown(text)\r\n        return text\r\n\r\nIt works well for me but it can be enhanced, of course..."}, {"tags": [], "down_vote_count": 0, "creation_date": 1516020761, "answer_id": 48263431, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1516020761, "body_markdown": "For one project, I needed so strip HTML, but also css and js. Thus, I made a variation of Eloffs answer:\r\n\r\n    class MLStripper(HTMLParser):\r\n        def __init__(self):\r\n            self.reset()\r\n            self.strict = False\r\n            self.convert_charrefs= True\r\n            self.fed = []\r\n            self.css = False\r\n        def handle_starttag(self, tag, attrs):\r\n            if tag == &quot;style&quot; or tag==&quot;script&quot;:\r\n                self.css = True\r\n        def handle_endtag(self, tag):\r\n            if tag==&quot;style&quot; or tag==&quot;script&quot;:\r\n                self.css=False\r\n        def handle_data(self, d):\r\n            if not self.css:\r\n                self.fed.append(d)\r\n        def get_data(self):\r\n            return &#39;&#39;.join(self.fed)\r\n\r\n    def strip_tags(html):\r\n        s = MLStripper()\r\n        s.feed(html)\r\n        return s.get_data()"}], "title": "Strip HTML from strings in Python", "view_count": 164381, "answer_count": 20, "code_snippet": ["<code>from mechanize import Browser\nbr = Browser()\nbr.open('http://somewebpage')\nhtml = br.response().readlines()\nfor line in html:\n  print line\n</code>", "<code>'&lt;a href=\"whatever.com\"&gt;some text&lt;/a&gt;'</code>", "<code>'&lt;b&gt;hello&lt;/b&gt;'</code>", "<code>&amp;amp;</code>", "<code>from HTMLParser import HTMLParser\n\nclass MLStripper(HTMLParser):\n    def __init__(self):\n        self.reset()\n        self.fed = []\n    def handle_data(self, d):\n        self.fed.append(d)\n    def get_data(self):\n        return ''.join(self.fed)\n\ndef strip_tags(html):\n    s = MLStripper()\n    s.feed(html)\n    return s.get_data()\n</code>", "<code>from html.parser import HTMLParser\n\nclass MLStripper(HTMLParser):\n    def __init__(self):\n        self.reset()\n        self.strict = False\n        self.convert_charrefs= True\n        self.fed = []\n    def handle_data(self, d):\n        self.fed.append(d)\n    def get_data(self):\n        return ''.join(self.fed)\n\ndef strip_tags(html):\n    s = MLStripper()\n    s.feed(html)\n    return s.get_data()\n</code>", "<code>&amp;amp;</code>", "<code>__init__</code>", "<code>parser = HTMLParser()</code>", "<code>html = parser.unescape(html)</code>", "<code>re.sub('&lt;[^&lt;]+?&gt;', '', text)\n</code>", "<code>&lt;...&gt;</code>", "<code>+</code>", "<code>&lt;</code>", "<code>?</code>", "<code>&lt;p&gt;Hello&lt;/p&gt;</code>", "<code>&lt;'p&gt;</code>", "<code>&lt;/p&gt;</code>", "<code>?</code>", "<code>&lt;..Hello..&gt;</code>", "<code>&lt;</code>", "<code>2 &lt; 3</code>", "<code>&amp;...</code>", "<code>^&lt;</code>", "<code>&amp;amp;</code>", "<code>cgi.escape(s, True)</code>", "<code>from HTMLParser import HTMLParser\nimport htmlentitydefs\n\nclass HTMLTextExtractor(HTMLParser):\n    def __init__(self):\n        HTMLParser.__init__(self)\n        self.result = [ ]\n\n    def handle_data(self, d):\n        self.result.append(d)\n\n    def handle_charref(self, number):\n        codepoint = int(number[1:], 16) if number[0] in (u'x', u'X') else int(number)\n        self.result.append(unichr(codepoint))\n\n    def handle_entityref(self, name):\n        codepoint = htmlentitydefs.name2codepoint[name]\n        self.result.append(unichr(codepoint))\n\n    def get_text(self):\n        return u''.join(self.result)\n\ndef html_to_text(html):\n    s = HTMLTextExtractor()\n    s.feed(html)\n    return s.get_text()\n</code>", "<code>html = u'&lt;a href=\"#\"&gt;Demo &lt;em&gt;(&amp;not; \\u0394&amp;#x03b7;&amp;#956;&amp;#x03CE;)&lt;/em&gt;&lt;/a&gt;'\nprint repr(html_to_text(html))\n</code>", "<code>u'Demo (\\xac \\u0394\\u03b7\\u03bc\\u03ce)'\n</code>", "<code>&amp;#apos;</code>", "<code>ValueError</code>", "<code>ValueError</code>", "<code>&amp;lt;script&amp;gt;alert(\"Hello\");&amp;lt;/script&amp;gt;</code>", "<code>&lt;script&gt;alert(\"Hello\");&lt;/script&gt;</code>", "<code>cgi.escape(s, True)</code>", "<code>import re, cgi\ntag_re = re.compile(r'(&lt;!--.*?--&gt;|&lt;[^&gt;]*&gt;)')\n\n# Remove well-formed tags, fixing mistakes by legitimate users\nno_tags = tag_re.sub('', user_input)\n\n# Clean up anything else by escaping\nready_for_web = cgi.escape(no_tags)\n</code>", "<code>&lt;i&gt;italicizing&lt;/i&gt;</code>", "<code>i</code>", "<code>&lt;!--</code>", "<code>blah &lt;&lt;&lt;&gt;&lt;blah</code>", "<code>{{ firstname }} {{ lastname }}</code>", "<code>firstname = '&lt;a'</code>", "<code>lastname = 'href=\"http://evil.com/\"&gt;'</code>", "<code>strip_tags</code>", "<code>strip_tags</code>", "<code>escape()</code>", "<code>&lt;img&lt;!-- --&gt; src=x onerror=alert(1);//&gt;&lt;!-- --&gt;\n</code>", "<code>&lt;img...&gt;</code>", "<code>&lt;!-- comments --&gt;</code>", "<code>&lt;img src=x onerror=alert(1);//&gt;\n</code>", "<code>strip_tags</code>", "<code># _strip_once runs HTMLParser once, pulling out just the text of all the nodes.\n\ndef strip_tags(value):\n    \"\"\"Returns the given HTML with all tags stripped.\"\"\"\n    # Note: in typical case this loop executes _strip_once once. Loop condition\n    # is redundant, but helps to reduce number of executions of _strip_once.\n    while '&lt;' in value and '&gt;' in value:\n        new_value = _strip_once(value)\n        if len(new_value) &gt;= len(value):\n            # _strip_once was not able to detect more tags\n            break\n        value = new_value\n    return value\n</code>", "<code>strip_tags()</code>", "<code>&amp;amp;</code>", "<code>from HTMLParser import HTMLParser\n\nclass MLStripper(HTMLParser):\n    def __init__(self):\n        self.reset()\n        self.fed = []\n    def handle_data(self, d):\n        self.fed.append(d)\n    def handle_entityref(self, name):\n        self.fed.append('&amp;%s;' % name)\n    def get_data(self):\n        return ''.join(self.fed)\n\ndef html_to_text(html):\n    s = MLStripper()\n    s.feed(html)\n    return s.get_data()\n</code>", "<code>def remove_html_markup(s):\n    tag = False\n    quote = False\n    out = \"\"\n\n    for c in s:\n            if c == '&lt;' and not quote:\n                tag = True\n            elif c == '&gt;' and not quote:\n                tag = False\n            elif (c == '\"' or c == \"'\") and tag:\n                quote = not quote\n            elif not tag:\n                out = out + c\n\n    return out\n</code>", "<code>&lt;b class=\"o'&gt;x&lt;/b&gt;</code>", "<code>x</code>", "<code>from bs4 import BeautifulSoup  # Or from BeautifulSoup import BeautifulSoup\n\ndef stripHtmlTags(self, htmlTxt):\n    if htmlTxt is None:\n            return None\n        else:\n            return ''.join(BeautifulSoup(htmlTxt).findAll(text=True)) \n</code>", "<code>''.join(BeautifulSoup('&lt;em&gt;he&lt;/em&gt;llo&lt;br&gt;world').find_all(text=True))</code>", "<code>' '.join(BeautifulSoup('&lt;em&gt;he&lt;/em&gt;llo&lt;br&gt;world').find_all(text=True))</code>", "<code>get_text()</code>", "<code>from bs4 import BeautifulSoup\n\ntext = '''\n&lt;td&gt;&lt;a href=\"http://www.fakewebsite.com\"&gt;Please can you strip me?&lt;/a&gt;\n&lt;br/&gt;&lt;a href=\"http://www.fakewebsite.com\"&gt;I am waiting....&lt;/a&gt;\n&lt;/td&gt;\n'''\nsoup = BeautifulSoup(text)\n\nprint(soup.get_text())\n</code>", "<code>from lxml import html\nfrom lxml.html.clean import clean_html\n\ntree = html.fromstring(\"\"\"&lt;span class=\"item-summary\"&gt;\n                            Detailed answers to any questions you might have\n                        &lt;/span&gt;\"\"\")\nclean_tree = clean_html(tree)\nprint(clean_tree.text_content().strip())\n\n# &gt;&gt;&gt; Detailed answers to any questions you might have\n</code>", "<code>cleaner = Cleaner(page_structure=True, forms=True, style=True, scripts=True, frames=True)\nsanitized_html = cleaner.clean_html(unsafe_html)\n</code>", "<code>lxml.html.fromstring(s).text_content()</code>", "<code>&amp;amp;</code>", "<code>from bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(html)\ntext = soup.get_text()\nprint(text)\n</code>", "<code>super().__init__()</code>", "<code>def __init__(self):\n    self.reset()\n    self.fed = []\n</code>", "<code>def __init__(self):\n    super().__init__()\n    self.reset()\n    self.fed = []\n</code>", "<code>html_to_text('&lt;&lt;b&gt;script&gt;alert(\"hacked\")&lt;&lt;/b&gt;/script&gt;\n</code>", "<code>&lt;script&gt;alert(\"hacked\")&lt;/script&gt;\n</code>", "<code>from HTMLParser import HTMLParser\n\nclass MLStripper(HTMLParser):\n    def __init__(self):\n        self.reset()\n        self.fed = []\n        self.containstags = False\n\n    def handle_starttag(self, tag, attrs):\n       self.containstags = True\n\n    def handle_data(self, d):\n        self.fed.append(d)\n\n    def has_tags(self):\n        return self.containstags\n\n    def get_data(self):\n        return ''.join(self.fed)\n\ndef strip_tags(html):\n    must_filtered = True\n    while ( must_filtered ):\n        s = MLStripper()\n        s.feed(html)\n        html = s.get_data()\n        must_filtered = s.has_tags()\n    return html\n</code>", "<code>html_to_text</code>", "<code>html_to_text</code>", "<code>html_to_text</code>", "<code>html_to_text</code>", "<code>    #!/usr/bin/python\nimport sys\n\ndef replace(strng,replaceText):\n    rpl = 0\n    while rpl &gt; -1:\n        rpl = strng.find(replaceText)\n        if rpl != -1:\n            strng = strng[0:rpl] + strng[rpl + len(replaceText):]\n    return strng\n\n\nlessThanPos = -1\ncount = 0\nlistOf = []\n\ntry:\n    #write File\n    writeto = open(sys.argv[2],'w')\n\n    #read file and store it in list\n    f = open(sys.argv[1],'r')\n    for readLine in f.readlines():\n        listOf.append(readLine)         \n    f.close()\n\n    #remove all tags  \n    for line in listOf:\n        count = 0;  \n        lessThanPos = -1  \n        lineTemp =  line\n\n            for char in lineTemp:\n\n            if char == \"&lt;\":\n                lessThanPos = count\n            if char == \"&gt;\":\n                if lessThanPos &gt; -1:\n                    if line[lessThanPos:count + 1] != '&lt;&gt;':\n                        lineTemp = replace(lineTemp,line[lessThanPos:count + 1])\n                        lessThanPos = -1\n            count = count + 1\n        lineTemp = lineTemp.replace(\"&amp;lt\",\"&lt;\")\n        lineTemp = lineTemp.replace(\"&amp;gt\",\"&gt;\")                  \n        writeto.write(lineTemp)  \n    writeto.close() \n    print \"Write To --- &gt;\" , sys.argv[2]\nexcept:\n    print \"Help: invalid arguments or exception\"\n    print \"Usage : \",sys.argv[0],\" inputfile outputfile\"\n</code>", "<code>from html.parser import HTMLParser\nfrom html.entities import html5\n\nclass HTMLTextExtractor(HTMLParser):\n    \"\"\" Adaption of http://stackoverflow.com/a/7778368/196732 \"\"\"\n    def __init__(self):\n        super().__init__()\n        self.result = []\n\n    def handle_data(self, d):\n        self.result.append(d)\n\n    def handle_charref(self, number):\n        codepoint = int(number[1:], 16) if number[0] in (u'x', u'X') else int(number)\n        self.result.append(unichr(codepoint))\n\n    def handle_entityref(self, name):\n        if name in html5:\n            self.result.append(unichr(html5[name]))\n\n    def get_text(self):\n        return u''.join(self.result)\n\ndef html_to_text(html):\n    s = HTMLTextExtractor()\n    s.feed(html)\n    return s.get_text()\n</code>", "<code>def StripTags(text):\n     finished = 0\n     while not finished:\n         finished = 1\n         start = text.find(\"&lt;\")\n         if start &gt;= 0:\n             stop = text[start:].find(\"&gt;\")\n             if stop &gt;= 0:\n                 text = text[:start] + text[start+stop+1:]\n                 finished = 0\n     return text\n</code>", "<code>import re\nimport lxml.html\n\ndef strip_markdown(x):\n    links_sub = re.sub(r'\\[(.+)\\]\\([^\\)]+\\)', r'\\1', x)\n    bold_sub = re.sub(r'\\*\\*([^*]+)\\*\\*', r'\\1', links_sub)\n    emph_sub = re.sub(r'\\*([^*]+)\\*', r'\\1', bold_sub)\n    return emph_sub\n\ndef strip_html(x):\n    return lxml.html.fromstring(x).text_content() if x else ''\n</code>", "<code>readme = \"\"\"&lt;img src=\"https://raw.githubusercontent.com/kootenpv/sky/master/resources/skylogo.png\" /&gt;\n\n            sky is a web scraping framework, implemented with the latest python versions in mind (3.4+). \n            It uses the asynchronous `asyncio` framework, as well as many popular modules \n            and extensions.\n\n            Most importantly, it aims for **next generation** web crawling where machine intelligence \n            is used to speed up the development/maintainance/reliability of crawling.\n\n            It mainly does this by considering the user to be interested in content \n            from *domains*, not just a collection of *single pages*\n            ([templating approach](#templating-approach)).\"\"\"\n\nstrip_markdown(strip_html(readme))\n</code>", "<code>import re\nimport html2text\nfrom bs4 import BeautifulSoup\ndef html2Text(html):\n    def removeMarkdown(text):\n        for current in [\"^[ #*]{2,30}\", \"^[ ]{0,30}\\d\\\\\\.\", \"^[ ]{0,30}\\d\\.\"]:\n            markdown = re.compile(current, flags=re.MULTILINE)\n            text = markdown.sub(\" \", text)\n        return text\n    def removeAngular(text):\n        angular = re.compile(\"[{][|].{2,40}[|][}]|[{][*].{2,40}[*][}]|[{][{].{2,40}[}][}]|\\[\\[.{2,40}\\]\\]\")\n        text = angular.sub(\" \", text)\n        return text\n    h = html2text.HTML2Text()\n    h.images_to_alt = True\n    h.ignore_links = True\n    h.ignore_emphasis = False\n    h.skip_internal_links = True\n    text = h.handle(html)\n    soup = BeautifulSoup(text, \"html.parser\")\n    text = soup.text\n    text = removeAngular(text)\n    text = removeMarkdown(text)\n    return text\n</code>", "<code>class MLStripper(HTMLParser):\n    def __init__(self):\n        self.reset()\n        self.strict = False\n        self.convert_charrefs= True\n        self.fed = []\n        self.css = False\n    def handle_starttag(self, tag, attrs):\n        if tag == \"style\" or tag==\"script\":\n            self.css = True\n    def handle_endtag(self, tag):\n        if tag==\"style\" or tag==\"script\":\n            self.css=False\n    def handle_data(self, d):\n        if not self.css:\n            self.fed.append(d)\n    def get_data(self):\n        return ''.join(self.fed)\n\ndef strip_tags(html):\n    s = MLStripper()\n    s.feed(html)\n    return s.get_data()\n</code>", "<code>import re\nimport htmlentitydefs\n\ndef convertentity(m):\n    if m.group(1)=='#':\n        try:\n            return unichr(int(m.group(2)))\n        except ValueError:\n            return '&amp;#%s;' % m.group(2)\n        try:\n            return htmlentitydefs.entitydefs[m.group(2)]\n        except KeyError:\n            return '&amp;%s;' % m.group(2)\n\ndef converthtml(s):\n    return re.sub(r'&amp;(#?)(.+?);',convertentity,s)\n\nhtml =  converthtml(html)\nhtml.replace(\"&amp;nbsp;\", \" \") ## Get rid of the remnants of certain formatting(subscript,superscript,etc).\n</code>"], "path": "stack.django"}, {"tags": ["rest", "sorting", "pagination"], "creation_date": 1240394039, "body_markdown": "This is a more generic reformulation of [this question][1] (with the elimination of the Rails specific parts)\r\n\r\nI am not sure how to implement pagination on a resource in a RESTful web application.\r\nAssuming that I have a resource called `products`, which of the following do you think is the best approach, and why:\r\n\r\n&lt;h2&gt;1. Using only query strings&lt;/h2&gt;\r\neg. `http://application/products?page=2&amp;sort_by=date&amp;sort_how=asc`\r\n&lt;br /&gt;The problem here is that I can&#39;t use full page caching and also the URL is not very clean and easy to remember.\r\n\r\n&lt;h2&gt;2. Using pages as resources and query strings for sorting&lt;/h2&gt;\r\neg. `http://application/products/page/2?sort_by=date&amp;sort_how=asc`\r\n&lt;br /&gt;In this case, the problem that is see is that `http://application/products/pages/1` is not a unique resource since using `sort_by=price` can yield a totally different result *and* I still can&#39;t use page caching.\r\n\r\n&lt;h2&gt;3. Using pages as resources and an URL segment for sorting&lt;/h2&gt;\r\neg. `http://application/products/by-date/page/2`\r\n&lt;br /&gt;I personally see no problem in using this method, but someone warned me that this is not a good way to go (he didn&#39;t give a reason, so if you know *why* it&#39;s not recommended, please let me know)\r\n\r\n*Any* suggestions, opinions, critiques are more than welcome. Thanks.\r\n\r\n  [1]: https://stackoverflow.com/questions/676571/pagination-and-sorting-in-a-rails-restful-application", "last_edit_date": 1495542875, "up_vote_count": 308, "link": "https://stackoverflow.com/questions/776448/pagination-in-a-rest-web-application", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1240395359, "answer_id": 776491, "path": "stack.django.answer", "score": 59, "up_vote_count": 59, "is_accepted": true, "last_activity_date": 1403192555, "last_edit_date": 1403192555, "body_markdown": "I think the problem with version 3 is more a &quot;point of view&quot; problem - do you see the page as the resource or the products on the page.\r\n\r\nIf you see the page as the resource it is a perfectly fine solution, since the query for page 2 will always yield page 2.\r\n\r\nBut if you see the products on the page as the resource you have the problem that the products on page 2 might change (old products deleted, or whatever), in this case the URI is not always \r\nreturning the same resource(s).  \r\n\r\nE.g. A customer stores a link to the product list page X, next time the link is opened the product in question might no longer be on page X."}, {"tags": [], "down_vote_count": 1, "creation_date": 1240395409, "answer_id": 776494, "path": "stack.django.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1330011379, "last_edit_date": 1330011379, "body_markdown": "I&#39;m currently using a scheme similar to this in my ASP.NET MVC apps:\r\n\r\ne.g. `http://application/products/by-date/page/2`\r\n\r\nspecifically it&#39;s : `http://application/products/Date/Ascending/3`\r\n\r\nHowever, I&#39;m not really happy with including paging and sorting information in the route in this way.\r\n\r\nThe list of items (products in this case) is mutable. i.e. the next time someone returns to a url that includes paging and sorting parameters, the results they get may have changed. So the idea of `http://application/products/Date/Ascending/3` as a unique url that points to a defined, unchanging set of products is lost."}, {"tags": [], "down_vote_count": 1, "creation_date": 1240398854, "answer_id": 776699, "path": "stack.django.answer", "score": 100, "up_vote_count": 101, "is_accepted": false, "last_activity_date": 1480411842, "last_edit_date": 1480411842, "body_markdown": "I agree with Fionn, but I&#39;ll go one step further and say that to me the Page is **not** a resource, it&#39;s a property of the request.  That makes me chose option 1 query string only.  It just feels right.  I really like how the [Twitter API][1] is structured restfully.  Not too simple, not too complicated, well documented.  For better or worse it&#39;s my &quot;go to&quot; design when I am on the fence on doing something one way versus another.\r\n\r\n\r\n  [1]: https://dev.twitter.com/rest/public"}, {"tags": [], "down_vote_count": 1, "creation_date": 1240400517, "answer_id": 776803, "path": "stack.django.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1240400517, "body_markdown": "I&#39;ve used solution 3 before (I write a LOT of django apps). And I don&#39;t think that there is anything wrong with it. It&#39;s just as generatable as the other two (incase you need to do some mass scraping or the like) and it looks cleaner. Plus, your users can guess urls (if its a public facing app), and people like being able to go directly where they want, and url-guessing feels empowering."}, {"tags": [], "down_vote_count": 2, "creation_date": 1240409142, "answer_id": 777373, "path": "stack.django.answer", "score": 1, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1240409142, "body_markdown": "I tend to agree with slf that &quot;page&quot; is not really a resource. On the other hand, option 3 is cleaner, easier to read, and can be more easily guessed by the user and even typed out if necessary. I&#39;m torn between options 1 and 3, but don&#39;t see any reason not to use option 3.\r\n\r\nAlso, while they look nice, one downside of using hidden parameters, as someone mentioned, rather than query strings or URL segments is that the user can&#39;t bookmark or directly link to a particular page. That may or may not be an issue depending on the application, but just something to be aware of.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1241456962, "answer_id": 820979, "path": "stack.django.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1241456962, "body_markdown": "I have always used the style of option 1. Caching has not been a concern since the data changes frequently anyway in my case. If you allow the size of the page to be configurable then again the data can&#39;t be cached.\r\n\r\nI don&#39;t find the url hard to remember or unclean. To me this is a fine use of query parameters. The resource is clearly a list of products and the query params are just telling how you want the list displayed - sorted and which page.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1248630859, "answer_id": 1185121, "path": "stack.django.answer", "score": 23, "up_vote_count": 23, "is_accepted": false, "last_activity_date": 1248630859, "body_markdown": "Option 1 seems the best, to the extent that your application views pagination as a technique for producing a different view of the same resource.\r\n\r\nHaving said that, the URL scheme is relatively insignificant. If you are designing your application to be **[hypertext-driven][1]** (as all REST applications must be by definition), then your client will not be constructing any URIs on its own. Instead, your application will be giving the links to the client and the client will follow them.\r\n\r\nOne kind of link your client can provide is a pagination link.\r\n\r\nThe pleasant side-effect of all of this is that even if you change your mind about pagination URI structure and implement something totally different next week, your clients can continue working without any modification whatsoever.\r\n\r\n\r\n  [1]: http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven"}, {"tags": [], "down_vote_count": 0, "creation_date": 1259956540, "answer_id": 1849281, "path": "stack.django.answer", "score": 35, "up_vote_count": 35, "is_accepted": false, "last_activity_date": 1259956540, "body_markdown": "HTTP has great Range header which is suitable for pagination too. You may send\r\n\r\n    Range: pages=1\r\n\r\nto have only first page. That may force you to rethink what is a page. Maybe client wants a different range of items. Range header also works to declare an order:\r\n\r\n    Range: products-by-date=2009_03_27-\r\n\r\nto get all products newer than that date or\r\n\r\n    Range: products-by-date=0-2009_11_30\r\n\r\nto get all products older than that date. &#39;0&#39; is probably not best solution, but RFC seems to want something for range start. There may be HTTP parsers deployed which wouldn&#39;t parse units=-range_end.\r\n\r\nIf headers is not an (acceptable) option, i reckon first solution (all in query string) is a way to deal with pages. But please, normalize query strings (sort (key=value) pairs in alphabet order). This solves &quot;?a=1&amp;b=x&quot; and &quot;?b=x&amp;a=1&quot; differentiation problem."}, {"tags": [], "down_vote_count": 1, "creation_date": 1268781967, "answer_id": 2458909, "path": "stack.django.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1268781967, "body_markdown": "Strange that nobody has pointed out that Option 3 has parameters in a specific order.\r\n*http//application/products/Date/Descending/Name/Ascending/page/2*\r\nand\r\n*http//application/products/Name/Ascending/Date/Descending/page/2*\r\n\r\nare pointing to the same resource, but have completely different urls.\r\n\r\nFor me Option 1 seems the most acceptable, since it clearly separates **&quot;What I want&quot;** and **&quot;How I want&quot;** it (It even has question mark between them lol). Full-page caching can be implemented using full URL (All options will suffer of the same problem anyway). \r\n\r\nWith Parameters-in-URL approach the only benefit is clean URL. Though you have to come up with some way to encode parameters and losslessly decode them. Of course you can go with URLencode/decode, but it will make urls ugly again :)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1405295962, "answer_id": 24728006, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1405295962, "body_markdown": "I use in my projects the following urls:\r\n\r\n    http://application/products?page=2&amp;sort=+field1-field2\r\nwhich means - &quot;give me page the second page ordered ascending by field1 and then descending by field2&quot;. Or if I need even more flexibility I use:\r\n\r\n    http://application/products?skip=20&amp;limit=20&amp;sort=+field1-field2"}, {"tags": [], "down_vote_count": 0, "creation_date": 1437642353, "answer_id": 31582843, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1492438687, "last_edit_date": 1495540025, "body_markdown": "I&#39;d prefer using query parameters offset and limit. \r\n\r\n**offset**: for index of the item in the collection. \r\n\r\n**limit**: for count of items. \r\n\r\nThe client can simply keep updating the offset as follows \r\n\r\n    offset = offset + limit\r\n\r\nfor the next page. \r\n\r\nThe path is considered the resource identifier. And a page is not a resource but a subset of the resource collection. Since pagination is generally a GET request, query parameters are best suited for pagination rather than headers.\r\n\r\nI use [metamug][1]. They have this configurable. \r\nhttps://stackoverflow.com/questions/43274619/pagination-on-select-query-metamug\r\n\r\n\r\n  [1]: https://metamug.com/docs/request-parameters.php#pagination-parameters"}, {"tags": [], "down_vote_count": 0, "creation_date": 1457456053, "answer_id": 35873286, "path": "stack.django.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1457456053, "body_markdown": "Looking for best practices I came across this site:\r\n\r\nhttp://www.restapitutorial.com\r\n\r\nIn the resources page there is a link to download a .pdf that contains the complete REST best practices suggested by the author. In which among other things there is a section about pagination.\r\n\r\nThe author suggest to add support to both using a Range header and using query-string parameters.\r\n\r\n**Request**\r\n\r\nHTTP header example:\r\n\r\n    Range: items=0-24\r\n\r\nQuery-string parameters example:\r\n\r\n    GET http://api.example.com/resources?offset=0&amp;limit=25\r\n\r\nWhere *offset* is the beginning item number and *limit* is the maximum number of items to return.\r\n\r\n**Response**\r\n\r\nThe response should include a Content-Range header indicating how many items are being returned and how many total items exist yet to be retrieved\r\n\r\nHTTP header examples:\r\n\r\n    Content-Range: items 0-24/66\r\n\r\n    Content-Range: items 40-65/*\r\n\r\nIn the .pdf there are some other suggestions for more specific cases."}], "title": "Pagination in a REST web application", "view_count": 52978, "answer_count": 12, "code_snippet": ["<code>products</code>", "<code>http://application/products?page=2&amp;sort_by=date&amp;sort_how=asc</code>", "<code>http://application/products/page/2?sort_by=date&amp;sort_how=asc</code>", "<code>http://application/products/pages/1</code>", "<code>sort_by=price</code>", "<code>http://application/products/by-date/page/2</code>", "<code>Range: pages=1\n</code>", "<code>Range: products-by-date=2009_03_27-\n</code>", "<code>Range: products-by-date=0-2009_11_30\n</code>", "<code>range-unit       = bytes-unit | other-range-unit</code>", "<code>The only range unit defined by HTTP/1.1 is \"bytes\". HTTP/1.1 implementations MAY ignore ranges specified using other units.</code>", "<code>offset = offset + limit\n</code>", "<code>http://application/products/by-date/page/2</code>", "<code>http://application/products/Date/Ascending/3</code>", "<code>http://application/products/Date/Ascending/3</code>", "<code>Range: items=0-24\n</code>", "<code>GET http://api.example.com/resources?offset=0&amp;limit=25\n</code>", "<code>Content-Range: items 0-24/66\n\nContent-Range: items 40-65/*\n</code>", "<code>http://application/products?page=2&amp;sort=+field1-field2\n</code>", "<code>http://application/products?skip=20&amp;limit=20&amp;sort=+field1-field2\n</code>"], "path": "stack.django"}, {"tags": ["python", "git", "github", "pip"], "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1296313691, "answer_id": 4837571, "path": "stack.django.answer", "score": 213, "up_vote_count": 213, "is_accepted": true, "last_activity_date": 1470936738, "last_edit_date": 1470936738, "body_markdown": "You can use `git+ssh` URI scheme, but you MUST set username:\r\n\r\n    pip install git+ssh://git@github.com/echweb/echweb-utils.git\r\n\r\nSee **`git@`** part into URI?\r\n\r\nPS: Also read about [deploy keys][1].\r\n\r\nPPS: In my installation the &quot;git+ssh&quot; URI scheme works only with &quot;editable&quot; requirements:\r\n\r\n    pip install -e URI#egg=EggName\r\n\r\n**Remember**: Change the `:` character that `git remote -v` prints to a `/` character before using the remote&#39;s address in the `pip` command:\r\n\r\n    $ git remote -v\r\n    origin  git@github.com:echweb/echweb-utils.git (fetch)\r\n                          ^ change this to a &#39;/&#39; character\r\n\r\nIf you forget, you will get this error:\r\n\r\n    ssh: Could not resolve hostname github.com:echweb:\r\n             nodename nor servname provided, or not known\r\n\r\n\r\n  [1]: http://help.github.com/deploy-keys/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1348193398, "answer_id": 12523376, "path": "stack.django.answer", "score": 20, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1348193398, "body_markdown": "Also works with Bitbucket:\r\n\r\n    pip install git+ssh://git@bitbucket.org/username/projectname.git\r\n\r\nPip will use your SSH keys in this case."}, {"tags": [], "down_vote_count": 1, "creation_date": 1348572023, "answer_id": 12581878, "path": "stack.django.answer", "score": 10, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1470936308, "last_edit_date": 1470936308, "body_markdown": "The syntax for the requirements file is given here: \r\n\r\nhttps://pip.pypa.io/en/latest/reference/pip_install.html#requirements-file-format\r\n\r\nSo for example:\r\n\r\n    -e git+http://github.com/rwillmer/django-behave#egg=django-behave\r\n\r\nif you want the source to stick around after installation\r\n\r\nor just\r\n\r\n    git+http://github.com/rwillmer/django-behave#egg=django-behave\r\n\r\nif you just want it to be installed."}, {"tags": [], "down_vote_count": 0, "creation_date": 1358734670, "answer_id": 14431634, "path": "stack.django.answer", "score": 50, "up_vote_count": 50, "is_accepted": false, "last_activity_date": 1491249441, "last_edit_date": 1491249441, "body_markdown": "As an additional technique, if you have the private repository cloned locally, you can do:\r\n\r\n    pip install git+file://c:/repo/directory\r\n\r\nEDIT: More modernly, you can just do this (and the `-e` will mean you don&#39;t have to commit changes before they&#39;re reflected):\r\n\r\n    pip install -e C:\\repo\\directory\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1364123968, "answer_id": 15597781, "path": "stack.django.answer", "score": 36, "up_vote_count": 38, "is_accepted": false, "last_activity_date": 1415369519, "last_edit_date": 1415369519, "body_markdown": "You can do it directly with the HTTPS URL like this:\r\n\r\n    pip install git+https://github.com/username/repo.git\r\n\r\nThis also works just appending that line in the requirements.txt in a django project, for instance."}, {"tags": [], "down_vote_count": 0, "creation_date": 1386026757, "answer_id": 20339941, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1386026757, "body_markdown": "When I was installing from github I was able to use:\r\n\r\n    pip install git+ssh://git@github.com/&lt;username&gt;/&lt;projectname&gt;.git#egg=&lt;eggname&gt;\r\n\r\nBUT, since I had to run pip as `sudo`, the SSH Keys were not working with github anymore, &quot;git clone&quot; failed on &quot;Permission denied (publickey)&quot;. Using `git+https` allowed me to run the command as sudo, and have github ask me my user/password.\r\n\r\n    sudo pip install git+https://github.com/&lt;username&gt;/&lt;projectname&gt;.git#egg=&lt;eggname&gt;\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1421063208, "answer_id": 27901245, "path": "stack.django.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1421063208, "last_edit_date": 1495541900, "body_markdown": "[oxyum&#39;s][1] solution is ok for this answer, I just want to point out that you need to be careful if you are installing using `sudo` as the keys must be stored for root too (e.g. `/root/.ssh`).\r\n\r\nThen you can type\r\n\r\n`sudo pip install git+ssh://git@github.com/echweb/echweb-utils.git`\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/4837571/1126085"}, {"tags": [], "down_vote_count": 0, "creation_date": 1472661808, "answer_id": 39254921, "path": "stack.django.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1472662279, "last_edit_date": 1472662279, "body_markdown": "I found it much easier to use tokens than SSH keys. I couldn&#39;t find much good documentation on this, so came across this solution mainly through trial &amp; error. Further, installing from pip &amp; setuptools have some subtle differences; but this way should work for both.\r\n\r\nGitHub don&#39;t (currently, as of August 2016) offer an easy way to get the zip / tarball of private repos. So you need to point setuptools to tell setuptools that you&#39;re pointing to a git repo:\r\n\r\n    from setuptools import setup\r\n    import os\r\n    # get deploy key from https://help.github.com/articles/git-automation-with-oauth-tokens/\r\n    github_token = os.environ[&#39;GITHUB_TOKEN&#39;]\r\n\r\n    setup(\r\n        # ...\r\n        install_requires=&#39;package&#39;,\r\n        dependency_links = [\r\n        &#39;git+https://{github_token}@github.com/user/{package}.git/@{version}#egg={package}-0&#39;\r\n            .format(github_token=github_token, package=package, version=master)\r\n            ]\r\n\r\nA couple of notes here:\r\n\r\n - For private repos, you need to authenticate with GitHub; the simplest way I found is to create an oauth token, drop that into your environment, and then include it with the URL\r\n - You need to include _some_ version number (here is `0`) at the end of the link, even if there&#39;s no package on PyPI. This has to be a actual number, not a word.\r\n - You need to preface with `git+` to tell setuptools it&#39;s to clone the repo, rather than pointing at a zip / tarball\r\n - `version` can be a branch, a tag, or a commit hash\r\n - You need to supply `--process-dependency-links` if installing from pip\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1473970192, "answer_id": 39519547, "path": "stack.django.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1473970192, "body_markdown": "You can also install a private repo dependency via [git+https://github.com/...][1] URL by providing login credentials (login and password, or deploy token) for [curl][2] with the `.netrc` file:\r\n\r\n&lt;!-- language: bash --&gt;\r\n\r\n    echo &quot;machine github.com login ei-grad password mypasswordshouldbehere&quot; &gt; ~/.netrc\r\n    pip install &quot;git+https://github.com/ei-grad/my_private_repo.git#egg=my_private_repo&quot;\r\n\r\n\r\n  [1]: http://git+https://github.com/...\r\n  [2]: https://git-scm.com/book/uz/v2/Git-Internals-Environment-Variables#Networking"}, {"tags": [], "down_vote_count": 0, "creation_date": 1493767860, "answer_id": 43748797, "path": "stack.django.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1493834711, "last_edit_date": 1495542392, "body_markdown": "I figured out a way to automagically &#39;pip install&#39; a GitLab private repository that requires no password prompt.  This approach uses GitLab &quot;Deploy Keys&quot; and an SSH config file so you can deploy using keys other than your personal SSH keys (in my case, for use by a &#39;bot).  Perhaps someone kind soul can verify using GitHub.\r\n\r\n# Create a New SSH key:    \r\n`ssh-keygen -t rsa -C &quot;GitLab_Robot_Deploy_Key&quot;`\r\n\r\nThe file should show up as `~/.ssh/GitLab_Robot_Deploy_Key` and `~/.ssh/GitLab_Robot_Deploy_Key.pub`\r\n\r\nCopy and paste the contents of the `~/.ssh/GitLab_Robot_Deploy_Key.pub` file into the GitLab &quot;Deploy Keys&quot; dialog.\r\n\r\n# Test the New Deploy Key\r\nThe following command tells SSH to use your new deploy key to set up the connection.  On success, you should get the message: &quot;Welcome to GitLab, UserName!&quot;\r\n\r\n\r\n\r\n`ssh -T -i ~/.ssh/GitLab_Robot_Deploy_Key git@gitlab.mycorp.com`\r\n\r\n\r\n# Create the SSH Config File\r\nNext, use an editor to create a `~/.ssh/config` file.  Add the following contents.  The &#39;Host&#39; value can be anything you want (just remember it, because you&#39;ll be using it later).  The HostName is the URL to your GitLab instance.  The IdentifyFile is path to the SSH key file you created in the first step.\r\n\r\n    Host GitLab\r\n      HostName gitlab.mycorp.com\r\n      IdentityFile ~/.ssh/GitLab_Robot_Deploy_Key\r\n\r\n# Point SSH to the Config file\r\n[@oxyum](https://stackoverflow.com/a/4837571/310399) gave us the recipe for using pip with SSH:\r\n\r\n`pip install git+ssh://git@gitlab.mycorp.com/my_name/my_repo.git`\r\n\r\nWe just need to modify it a bit to make SSH use our new Deploy Key.  We do that by pointing SSH to the Host entry in the SSH config file.  Just replace the &#39;gitlab.mycorp.com&#39; in the command to the Host name we used in the SSH config file:\r\n\r\n`pip install git+ssh://git@GitLab/my_name/my_repo.git`\r\n\r\nThe package should now install with no password prompt.\r\n\r\n[Reference A](https://docs.gitlab.com/ce/ssh/README.html)    \r\n[Reference B](http://snipe.net/2013/04/multiple-github-deploy-keys-single-server/)\r\n"}], "creation_date": 1296233552, "body_markdown": "As the title suggests I am trying to install a python package from a private github repo. For a public repository I can issue the following command which works fine:\r\n\r\n    pip install git+git://github.com/django/django.git\r\n\r\nHowever if I try this for a private repository:\r\n\r\n    pip install git+git://github.com/echweb/echweb-utils.git\r\n\r\nI get the following output:\r\n\r\n    Downloading/unpacking git+git://github.com/echweb/echweb-utils.git\r\n    Cloning Git repository git://github.com/echweb/echweb-utils.git to /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-VRsIoo-build\r\n    Complete output from command /usr/local/bin/git clone git://github.com/echweb/echweb-utils.git /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-VRsIoo-build:\r\n    fatal: The remote end hung up unexpectedly\r\n\r\n    Cloning into /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-VRsIoo-build...\r\n\r\n    ----------------------------------------\r\n    Command /usr/local/bin/git clone git://github.com/echweb/echweb-utils.git /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-VRsIoo-build failed with error code 128\r\n\r\nI guess this is because I am trying to access a private repository without providing any authentication. I therefore tried to use git+ssh hoping that pip would use my ssh public key to authenticate:\r\n\r\n    pip install git+ssh://github.com/echweb/echweb-utils.git\r\n\r\nThis gives the following output:\r\n\r\n    Downloading/unpacking git+ssh://github.com/echweb/echweb-utils.git\r\n    Cloning Git repository ssh://github.com/echweb/echweb-utils.git to /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-DQB8s4-build\r\n    Complete output from command /usr/local/bin/git clone ssh://github.com/echweb/echweb-utils.git /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-DQB8s4-build:\r\n    Cloning into /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-DQB8s4-build...\r\n\r\n    Permission denied (publickey).\r\n\r\n    fatal: The remote end hung up unexpectedly\r\n\r\n    ----------------------------------------\r\n    Command /usr/local/bin/git clone ssh://github.com/echweb/echweb-utils.git /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-DQB8s4-build failed with error code 128\r\n\r\nDoes anyone know if it what I am trying to achieve is even possible? If so can you please tell me how?", "title": "Is it possible to use pip to install a package from a private github repository?", "view_count": 113854, "up_vote_count": 208, "answer_count": 10, "link": "https://stackoverflow.com/questions/4830856/is-it-possible-to-use-pip-to-install-a-package-from-a-private-github-repository", "code_snippet": ["<code>pip install git+git://github.com/django/django.git\n</code>", "<code>pip install git+git://github.com/echweb/echweb-utils.git\n</code>", "<code>Downloading/unpacking git+git://github.com/echweb/echweb-utils.git\nCloning Git repository git://github.com/echweb/echweb-utils.git to /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-VRsIoo-build\nComplete output from command /usr/local/bin/git clone git://github.com/echweb/echweb-utils.git /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-VRsIoo-build:\nfatal: The remote end hung up unexpectedly\n\nCloning into /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-VRsIoo-build...\n\n----------------------------------------\nCommand /usr/local/bin/git clone git://github.com/echweb/echweb-utils.git /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-VRsIoo-build failed with error code 128\n</code>", "<code>pip install git+ssh://github.com/echweb/echweb-utils.git\n</code>", "<code>Downloading/unpacking git+ssh://github.com/echweb/echweb-utils.git\nCloning Git repository ssh://github.com/echweb/echweb-utils.git to /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-DQB8s4-build\nComplete output from command /usr/local/bin/git clone ssh://github.com/echweb/echweb-utils.git /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-DQB8s4-build:\nCloning into /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-DQB8s4-build...\n\nPermission denied (publickey).\n\nfatal: The remote end hung up unexpectedly\n\n----------------------------------------\nCommand /usr/local/bin/git clone ssh://github.com/echweb/echweb-utils.git /var/folders/cB/cB85g9P7HM4jcPn7nrvWRU+++TI/-Tmp-/pip-DQB8s4-build failed with error code 128\n</code>", "<code>git+ssh</code>", "<code>pip install git+ssh://git@github.com/echweb/echweb-utils.git\n</code>", "<code>git@</code>", "<code>pip install -e URI#egg=EggName\n</code>", "<code>:</code>", "<code>git remote -v</code>", "<code>/</code>", "<code>pip</code>", "<code>$ git remote -v\norigin  git@github.com:echweb/echweb-utils.git (fetch)\n                      ^ change this to a '/' character\n</code>", "<code>ssh: Could not resolve hostname github.com:echweb:\n         nodename nor servname provided, or not known\n</code>", "<code>git+ssh://git@github.com/echweb/echweb-utils.git</code>", "<code>git+ssh://git@github.com/echweb/echweb-utils.git</code>", "<code>requirements.txt</code>", "<code>pip install git+ssh://git@github.com/echweb/echweb-utils.git@branch-name</code>", "<code>pip install git+file://c:/repo/directory\n</code>", "<code>-e</code>", "<code>pip install -e C:\\repo\\directory\n</code>", "<code>pip install git+https://github.com/username/repo.git\n</code>", "<code>pip install git+ssh://git@bitbucket.org/username/projectname.git\n</code>", "<code>-e git+http://github.com/rwillmer/django-behave#egg=django-behave\n</code>", "<code>git+http://github.com/rwillmer/django-behave#egg=django-behave\n</code>", "<code>from setuptools import setup\nimport os\n# get deploy key from https://help.github.com/articles/git-automation-with-oauth-tokens/\ngithub_token = os.environ['GITHUB_TOKEN']\n\nsetup(\n    # ...\n    install_requires='package',\n    dependency_links = [\n    'git+https://{github_token}@github.com/user/{package}.git/@{version}#egg={package}-0'\n        .format(github_token=github_token, package=package, version=master)\n        ]\n</code>", "<code>0</code>", "<code>git+</code>", "<code>version</code>", "<code>--process-dependency-links</code>", "<code>pip install git+ssh://git@github.com/&lt;username&gt;/&lt;projectname&gt;.git#egg=&lt;eggname&gt;\n</code>", "<code>sudo</code>", "<code>git+https</code>", "<code>sudo pip install git+https://github.com/&lt;username&gt;/&lt;projectname&gt;.git#egg=&lt;eggname&gt;\n</code>", "<code>.netrc</code>", "<code>echo \"machine github.com login ei-grad password mypasswordshouldbehere\" &gt; ~/.netrc\npip install \"git+https://github.com/ei-grad/my_private_repo.git#egg=my_private_repo\"\n</code>", "<code>ssh-keygen -t rsa -C \"GitLab_Robot_Deploy_Key\"</code>", "<code>~/.ssh/GitLab_Robot_Deploy_Key</code>", "<code>~/.ssh/GitLab_Robot_Deploy_Key.pub</code>", "<code>~/.ssh/GitLab_Robot_Deploy_Key.pub</code>", "<code>ssh -T -i ~/.ssh/GitLab_Robot_Deploy_Key git@gitlab.mycorp.com</code>", "<code>~/.ssh/config</code>", "<code>Host GitLab\n  HostName gitlab.mycorp.com\n  IdentityFile ~/.ssh/GitLab_Robot_Deploy_Key\n</code>", "<code>pip install git+ssh://git@gitlab.mycorp.com/my_name/my_repo.git</code>", "<code>pip install git+ssh://git@GitLab/my_name/my_repo.git</code>", "<code>sudo</code>", "<code>/root/.ssh</code>", "<code>sudo pip install git+ssh://git@github.com/echweb/echweb-utils.git</code>", "<code>--user</code>"], "path": "stack.django"}], "name": "django"}