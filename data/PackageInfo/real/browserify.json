{"_childDocuments_": [{"tags": ["javascript", "npm", "bower"], "creation_date": 1378399999, "body_markdown": "What is the fundamental difference between `bower` and `npm`? Just want something plain and simple. I&#39;ve seen some of my colleagues use `bower` and `npm` interchangeably in their projects.", "last_edit_date": 1488479615, "up_vote_count": 1560, "link": "https://stackoverflow.com/questions/18641899/what-is-the-difference-between-bower-and-npm", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1378454968, "answer_id": 18652918, "path": "stack.bower.answer", "score": 1777, "up_vote_count": 1779, "is_accepted": true, "last_activity_date": 1488238160, "last_edit_date": 1488238160, "body_markdown": "[npm](https://www.npmjs.org) is most commonly used for managing Node.js modules, but it works for the front-end too when combined with [Browserify](http://browserify.org/) and/or `$ npm dedupe`.\r\n\r\n[Bower](http://bower.io) is created solely for the front-end and is optimized with that in mind. The biggest difference is that npm does nested dependency tree *(size heavy)* while Bower requires a flat dependency tree *(puts the burden of dependency resolution on the user)*.\r\n\r\nA nested dependency tree means that your dependencies can have their own dependencies which can have their own, and so on. This is really great on the server where you don&#39;t have to care much about space and latency. It lets you not have to care about dependency conflicts as all your dependencies use e.g. their own version of Underscore. This obviously doesn&#39;t work that well on the front-end. Imagine a site having to download three copies of jQuery.\r\n\r\nThe reason many projects use both is that they use Bower for front-end packages and npm for developer tools like Yeoman, Grunt, Gulp, JSHint, CoffeeScript, etc.\r\n\r\nAll package managers have many downsides. You just have to pick which you can live with.\r\n\r\n---\r\n\r\n## Resources\r\n\r\n- [Nested Dependencies](http://maxogden.com/nested-dependencies.html) - Insight into why node_modules works the way it does"}, {"tags": [], "down_vote_count": 5, "creation_date": 1405803561, "answer_id": 24844920, "path": "stack.bower.answer", "score": 42, "up_vote_count": 47, "is_accepted": false, "last_activity_date": 1425465238, "last_edit_date": 1495540501, "body_markdown": "Bower maintains a single version of modules, it only tries to help you select the correct/best one for you.\r\n&gt; \r\nhttps://stackoverflow.com/questions/15092345/javascript-dependency-management-npm-vs-bower-vs-volo/22101165#22101165\r\n&gt; \r\n\r\nNPM is better for node modules because there is a module system and you&#39;re working locally.\r\nBower is good for the browser because currently there is only the global scope, and you want to be very selective about the version you work with."}, {"tags": [], "down_vote_count": 2, "creation_date": 1412294923, "answer_id": 26171511, "path": "stack.bower.answer", "score": 13, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1412911605, "last_edit_date": 1412911605, "body_markdown": "Found this useful explanation from http://ng-learn.org/2013/11/Bower-vs-npm/\r\n\r\n&gt; On one hand npm was created to install modules used in a node.js environment, or development tools built using node.js such Karma, lint, minifiers and so on. npm can install modules locally in a project ( by default in node_modules ) or globally to be used by multiple projects. In large projects the way to specify dependencies is by creating a file called package.json which contains a list of dependencies. That list is recognized by npm when you run npm install, which then downloads and installs them for you.\r\n\r\n&gt; On the other hand bower was created to manage your frontend dependencies. Libraries like jQuery, AngularJS, underscore, etc. Similar to npm it has a file in which you can specify a list of dependencies called bower.json. In this case your frontend dependencies are installed by running bower install which by default installs them in a folder called bower_components.\r\n\r\n&gt; As you can see, although they perform a similar task they are targeted to a very different set of libraries."}, {"tags": [], "down_vote_count": 3, "creation_date": 1413060149, "answer_id": 26319078, "path": "stack.bower.answer", "score": 4, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1413062829, "last_edit_date": 1413062829, "body_markdown": "For many people working with node.js, a major benefit of bower is for managing dependencies that are not javascript at all. If they are working with languages that compile to javascript, npm can be used to manage some of their dependencies. however, not all their dependencies are going to be node.js modules. Some of those that compile to javascript may have weird source language specific mangling that makes passing them around compiled to javascript an inelegant option when users are expecting source code.\r\n\r\nNot everything in an npm package needs to be user-facing javascript, but for npm library packages, at least some of it should be."}, {"tags": [], "down_vote_count": 2, "creation_date": 1416834609, "answer_id": 27105655, "path": "stack.bower.answer", "score": 326, "up_vote_count": 328, "is_accepted": false, "last_activity_date": 1453111967, "last_edit_date": 1453111967, "body_markdown": "\r\nThis answer is an addition to the answer of Sindre Sorhus. The major difference between npm and Bower is the way they treat recursive dependencies. Note that they can be used together in a single project.\r\n\r\n**On the [npm FAQ][1]:** \r\n\r\n&gt; It is much harder to avoid dependency conflicts without nesting\r\n&gt; dependencies. This is fundamental to the way that npm works, and has\r\n&gt; proven to be an extremely successful approach.\r\n\r\n\r\n**On [Bower][2] homepage:**\r\n\r\n&gt; Bower is optimized for the front-end. Bower uses a flat dependency\r\n&gt; tree, requiring only one version for each package, reducing page load\r\n&gt; to a minimum.\r\n\r\nIn short, npm aims for stability. Bower aims for minimal resource load. If you draw out the dependency structure, you will see this:\r\n\r\nnpm:\r\n\r\n    project root\r\n    [node_modules] // default directory for dependencies\r\n     -&gt; dependency A\r\n     -&gt; dependency B\r\n        [node_modules]\r\n        -&gt; dependency A\r\n\r\n     -&gt; dependency C\r\n        [node_modules]\r\n        -&gt; dependency B\r\n          [node_modules]\r\n           -&gt; dependency A \r\n        -&gt; dependency D\r\n\r\nAs you can see it installs some dependencies recursively. Dependency A has three installed instances!\r\n\r\nBower:\r\n\r\n    project root\r\n    [bower_components] // default directory for dependencies\r\n     -&gt; dependency A\r\n     -&gt; dependency B // needs A\r\n     -&gt; dependency C // needs B and D\r\n     -&gt; dependency D\r\n\r\nHere you see that all unique dependencies are on the same level. \r\n\r\n**So, why bother using npm?**\r\n\r\nMaybe dependency B requires a different version of dependency A than dependency C. npm installs both versions of this dependency so it will work anyway, but Bower will give you a *conflict* because it does not like duplication (because loading the same resource on a webpage is very inefficient and costly, also it can give some serious errors). You will have to manually pick which version you want to install. This can have the effect that one of the dependencies will break, but that is something that you will need to fix anyway.\r\n\r\nSo, the common usage is Bower for the packages that you want to publish on your webpages (e.g. *runtime*, where you avoid duplication), and use npm for other stuff, like testing, building, optimizing, checking, etc. (e.g. *development time*, where duplication is of less concern).\r\n\r\n**Update for npm 3:**\r\n\r\nnpm 3 still does things differently compared to Bower. It will install the dependencies globally, but only for the first version it encounters.  The other versions are installed in the tree (the parent module, then node_modules).\r\n\r\n\r\n- [node_modules]\r\n  - dep A v1.0\r\n    - dep B v1.0\r\n      - &lt;del&gt;dep A v1.0&lt;/del&gt; (uses root version)\r\n    - dep C v1.0\r\n      - dep A v2.0 (this version is different from the root version, so it will be an nested installation)\r\n\r\nFor more information, I suggest reading the [docs of npm 3][3]\r\n\r\n\r\n  [1]: https://docs.npmjs.com/misc/faq#why-can-t-npm-just-put-everything-in-one-place-like-other-package-managers\r\n  [2]: http://bower.io/\r\n  [3]: https://docs.npmjs.com/how-npm-works/npm3-dupe"}, {"tags": [], "down_vote_count": 0, "creation_date": 1424120669, "answer_id": 28550313, "path": "stack.bower.answer", "score": 31, "up_vote_count": 31, "is_accepted": false, "last_activity_date": 1448078691, "last_edit_date": 1448078691, "body_markdown": "My team moved away from Bower and migrated to npm because:\r\n\r\n* Programmatic usage was painful\r\n* Bower&#39;s interface kept changing\r\n* Some features, like the url shorthand, are entirely broken\r\n* Using both Bower and npm in the same project is painful\r\n* Keeping bower.json version field in sync with git tags is painful\r\n* Source control != package management\r\n* CommonJS support is not straightforward\r\n\r\nFor more details, see [&quot;Why my team uses npm instead of bower&quot;](https://medium.com/@nickheiner/why-my-team-uses-npm-instead-of-bower-eecfe1b9afcb)."}, {"tags": [], "down_vote_count": 1, "creation_date": 1436006932, "answer_id": 31219726, "path": "stack.bower.answer", "score": 103, "up_vote_count": 104, "is_accepted": false, "last_activity_date": 1510868448, "last_edit_date": 1510868448, "body_markdown": "## 2017-Oct update\r\n\r\nBower has finally been [deprecated](https://bower.io/blog/2017/how-to-migrate-away-from-bower/). End of story.\r\n\r\n## Older answer\r\n\r\n[From Mattias Petter Johansson, JavaScript developer at Spotify](https://www.quora.com/Why-use-Bower-when-there-is-npm/answer/Mattias-Petter-Johansson):\r\n\r\n&gt; In almost all cases, it&#39;s more appropriate to use Browserify and npm over Bower. It is simply a better packaging solution for front-end apps than Bower is. At Spotify, we use npm to package entire web modules (html, css, js) and it works very well.\r\n\r\n&gt; Bower brands itself as the package manager for the web. It would be awesome if this was true  - a package manager that made my life better as a front-end developer would be awesome. The problem is that Bower offers no specialized tooling for the purpose. It offers NO tooling that I know of that npm doesn&#39;t, and especially none that is specifically useful for front-end developers. **There is simply no benefit for a front-end developer to use Bower over npm.**\r\n\r\n&gt; We should stop using bower and consolidate around npm. Thankfully, that is what [is happening](http://www.modulecounts.com/):\r\n\r\n[![Module counts - bower vs. npm][1]][1]\r\n\r\n&gt; With browserify or webpack, it becomes super-easy to concatenate all your modules into big minified files, which is awesome for performance, especially for mobile devices. Not so with Bower, which will require significantly more labor to get the same effect.\r\n\r\n&gt; npm also offers you the ability to use multiple versions of modules simultaneously. If you have not done much application development, this might initially strike you as a bad thing, but once you&#39;ve gone through a few bouts of [Dependency hell](http://en.wikipedia.org/wiki/Dependency_hell) you will realize that having the ability to have multiple versions of one module is a pretty darn great feature. Note that npm includes a very handy [dedupe tool](https://docs.npmjs.com/cli/dedupe) that automatically makes sure that you only use two versions of a module if you actually *have* to - if two modules both *can* use the same version of one module, they will. But if they *can&#39;t*, you have a very handy out.\r\n\r\n(Note that [Webpack](https://www.reddit.com/r/javascript/comments/2is81v/why_is_not_systemjs_dominating_the_field_of/cla66t3) and [rollup](https://nolanlawson.com/2016/08/15/the-cost-of-small-modules/) are widely regarded to be better than Browserify as of Aug 2016.)\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/HLBsP.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1437880350, "answer_id": 31633281, "path": "stack.bower.answer", "score": 248, "up_vote_count": 248, "is_accepted": false, "last_activity_date": 1494142768, "last_edit_date": 1494142768, "body_markdown": "**TL;DR: The biggest difference in everyday use isn&#39;t nested dependencies... it&#39;s the difference between modules and globals.**\r\n\r\nI think the previous posters have covered well some of the basic distinctions. (npm&#39;s use of nested dependencies is indeed very helpful in managing large, complex applications, though I don&#39;t think it&#39;s the most important distinction.)\r\n\r\nI&#39;m surprised, however, that nobody has explicitly explained one of the most fundamental distinctions between Bower and npm. If you read the answers above, you&#39;ll see the word &#39;modules&#39; used often in the context of npm. But it&#39;s mentioned casually, as if it might even just be a syntax difference. \r\n\r\nBut this distinction of **modules vs. globals** (or modules vs. &#39;scripts&#39;) is possibly the most important difference between Bower and npm. *The npm approach of putting everything in modules requires you to change the way you write Javascript for the browser, almost certainly for the better.*\r\n\r\n###The Bower Approach: Global Resources, Like `&lt;script&gt;` Tags\r\n\r\nAt root, Bower is about loading plain-old script files. Whatever those script files contain, Bower will load them. Which basically means that Bower is just like including all your scripts in plain-old `&lt;script&gt;`&#39;s in the `&lt;head&gt;` of your HTML. \r\n\r\nSo, same basic approach you&#39;re used to, but you get some nice automation conveniences: \r\n\r\n* You used to need to include JS dependencies in your project repo (while developing), or get them via CDN. Now, you can skip that extra download weight in the repo, and somebody can do a quick `bower install` and instantly have what they need, locally.\r\n* If a Bower dependency then specifies its own dependencies in its `bower.json`, those&#39;ll be downloaded for you as well.\r\n\r\nBut beyond that, *Bower doesn&#39;t change how we write javascript*. Nothing about what goes inside the files loaded by Bower needs to change at all. In particular, this means that the resources provided in scripts loaded by Bower will (usually, but not always) still be defined as _global variables_, available from anywhere in the browser execution context.\r\n\r\n###The npm Approach: Common JS Modules, Explicit Dependency Injection\r\n\r\nAll code in Node land (and thus all code loaded via npm) is structured as modules (specifically, as an implementation of the [CommonJS module format](http://wiki.commonjs.org/wiki/Modules), or now, as an ES6 module). So, if you use NPM to handle browser-side dependencies (via Browserify or something else that does the same job), you&#39;ll structure your code the same way Node does.\r\n\r\nSmarter people than I have tackled the question of &#39;Why modules?&#39;, but here&#39;s a capsule summary:\r\n\r\n* Anything inside a module is effectively _namespaced_, meaning it&#39;s not a global variable any more, and you can&#39;t accidentally reference it without intending to.\r\n* Anything inside a module must be intentionally injected into a particular context (usually another module) in order to make use of it\r\n* This means you can have multiple versions of the same external dependency (lodash, let&#39;s say) in various parts of your application, and they won&#39;t collide/conflict. (This happens surprisingly often, because your own code wants to use one version of a dependency, but one of your external dependencies specifies another that conflicts. Or you&#39;ve got two external dependencies that each want a different version.)\r\n* Because all dependencies are manually injected into a particular module, it&#39;s very easy to reason about them. You know for a fact: _&quot;The only code I need to consider when working on this is what I have intentionally chosen to inject here&quot;_.\r\n* Because even the content of injected modules is _encapsulated_ behind the variable you assign it to, and all code executes inside a limited scope, surprises and collisions become very improbable. It&#39;s much, much less likely that something from one of your dependencies will accidentally redefine a global variable without you realizing it, or that you will do so. (It _can_ happen, but you usually have to go out of your way to do it, with something like `window.variable`. The one accident that still tends to occur is assigning `this.variable`, not realizing that `this` is actually `window` in the current context.)\r\n* When you want to test an individual module, you&#39;re able to very easily know: exactly what else (dependencies) is affecting the code that runs inside the module? And, because you&#39;re explicitly injecting everything, you can easily mock those dependencies.\r\n\r\nTo me, the use of modules for front-end code boils down to: working in a much narrower context that&#39;s easier to reason about and test, and having greater certainty about what&#39;s going on. \r\n\r\n----------\r\n\r\nIt only takes about 30 seconds to learn how to use the CommonJS/Node module syntax. Inside a given JS file, which is going to be a module, you first declare any outside dependencies you want to use, like this:\r\n\r\n```var React = require(&#39;react&#39;);```\r\n\r\nInside the file/module, you do whatever you normally would, and create some object or function that you&#39;ll want to expose to outside users, calling it perhaps `myModule`. \r\n\r\nAt the end of a file, you export whatever you want to share with the world, like this:\r\n\r\n```module.exports = myModule;```\r\n\r\nThen, to use a CommonJS-based workflow in the browser, you&#39;ll use tools like Browserify to grab all those individual module files, encapsulate their contents at runtime, and inject them into each other as needed. \r\n\r\nAND, since ES6 modules (which you&#39;ll likely transpile to ES5 with Babel or similar) are gaining wide acceptance, and work both in the browser or in Node 4.0, we should mention a [good overview][1] of those as well. \r\n\r\nMore about patterns for working with modules in [this deck](http://darrenderidder.github.io/talks/ModulePatterns/).\r\n\r\n--------\r\nEDIT (Feb 2017): Facebook&#39;s [Yarn][2] is a very important potential replacement/supplement for npm these days: fast, deterministic, offline package-management that builds on what npm gives you. It&#39;s worth a look for any JS project, particularly since it&#39;s so easy to swap it in/out.\r\n\r\n\r\n  [1]: https://24ways.org/2014/javascript-modules-the-es6-way/\r\n  [2]: http://yarnpkg.com"}, {"tags": [], "down_vote_count": 0, "creation_date": 1515317195, "answer_id": 48135879, "path": "stack.bower.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1515317195, "body_markdown": "Bower and Npm are package managers for javascript.\r\n\r\n**Bower**\r\n\r\nBower is created solely for the front-end development. It uses flat dependency tree, requiring only one version for each package, reducing the page load. It mainly aims for minimal resource load. It has less contributors and so development process is slow.\r\n\r\nBower has a configuration file called bower.json. In this file we can maintain the configuration for Bower like which dependencies we need and license details, description, name and so on. Bower is suitable for front-end packages like jquery, angular, react, ember, knockout, backbone and so on.\r\n\r\n**Npm**\r\n\r\nNpm is most commonly used for managing Node.js modules, but it works for the front-end too. It uses nested dependency tree as well as flat dependency tree. It is popular and has a lot of contributors. So its new version always comes up with exciting features.\r\n\r\nNpm has a configuration file called package.json. In this file we can maintain the configuration for Npm like which dependencies we need and license details, description, name and so on. Npm provides Dependencies and DevDependencies. Dependencies will download and maintain the front-end files like Jquery, Angular and so on. DevDependencies will download and maintain development tools like Grunt, Gulp, JSHint and so on.\r\n\r\nThis obviously doesn&#39;t work that well on the front-end, because we need jQuery in our projects. We need only one copy of jQuery, but when another package requires jQuery, then it will download again one more copy of jQuery. This is one of the main drawbacks of Npm.\r\n\r\n*Key Note :* The reason many projects use both is that they use Bower for front-end packages and Npm for developer tools. Multiplying package manager in your project make your workflow harder. Npm 3 coupled with [browserify][1] or [webpack][2] is the way to go now.\r\n\r\n\r\n  [1]: http://browserify.org/\r\n  [2]: https://webpack.github.io/"}], "title": "What is the difference between Bower and npm?", "view_count": 279800, "answer_count": 9, "code_snippet": ["<code>bower</code>", "<code>npm</code>", "<code>bower</code>", "<code>npm</code>", "<code>$ npm dedupe</code>", "<code>project root\n[node_modules] // default directory for dependencies\n -&gt; dependency A\n -&gt; dependency B\n    [node_modules]\n    -&gt; dependency A\n\n -&gt; dependency C\n    [node_modules]\n    -&gt; dependency B\n      [node_modules]\n       -&gt; dependency A \n    -&gt; dependency D\n</code>", "<code>project root\n[bower_components] // default directory for dependencies\n -&gt; dependency A\n -&gt; dependency B // needs A\n -&gt; dependency C // needs B and D\n -&gt; dependency D\n</code>", "<code>npm</code>", "<code>bower</code>", "<code>&lt;script&gt;</code>", "<code>&lt;script&gt;</code>", "<code>&lt;head&gt;</code>", "<code>bower install</code>", "<code>bower.json</code>", "<code>window.variable</code>", "<code>this.variable</code>", "<code>this</code>", "<code>window</code>", "<code>var React = require('react');</code>", "<code>myModule</code>", "<code>module.exports = myModule;</code>", "<code>npm dedupe</code>"], "path": "stack.browserify"}, {"tags": ["javascript", "node.js", "location", "npm"], "creation_date": 1304847560, "body_markdown": "Can someone tell me where can I find the Node.js modules, which I installed using **`npm`**?", "last_edit_date": 1449949760, "up_vote_count": 482, "link": "https://stackoverflow.com/questions/5926672/where-does-npm-install-packages", "_childDocuments_": [{"tags": [], "down_vote_count": 8, "creation_date": 1304848021, "answer_id": 5926706, "path": "stack.browserify.answer", "score": 600, "up_vote_count": 608, "is_accepted": true, "last_activity_date": 1496536383, "last_edit_date": 1496536383, "body_markdown": "Global libraries\r\n================\r\n        \r\nYou can run `npm list -g` to see where global libraries are installed.\r\n\r\nOn Unix systems they are normally placed in `/usr/local/lib/node` or `/usr/local/lib/node_modules` when installed globally. If you set the `NODE_PATH` environment variable to this path, the modules can be found by node.\r\n\r\nWindows XP - `%USERPROFILE%\\Application Data\\npm\\node_modules`  \r\nWindows 7, 8 and 10 - `%AppData%\\npm\\node_modules`\r\n\r\nNon-global libraries\r\n====================\r\n\r\nNon-global libraries are installed the `node_modules` sub folder in the folder you are currently in. \r\n\r\nYou can run `npm list` to see the installed non-global libraries for your current location.      "}, {"tags": [], "down_vote_count": 1, "creation_date": 1304872249, "answer_id": 5928722, "path": "stack.browserify.answer", "score": 13, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1304872249, "body_markdown": "In earlier versions of NPM modules were always placed in /usr/local/lib/node or wherever you specified the npm root within the .npmrc file. However, in NPM 1.0+ modules are installed in two places. You can have modules installed local to your application in &lt;current_app&gt;/.node_modules or you can have them installed globally which will use the above.\r\n\r\nMore information can be found at https://github.com/isaacs/npm/blob/master/doc/install.md"}, {"tags": [], "down_vote_count": 2, "creation_date": 1395745170, "answer_id": 22632500, "path": "stack.browserify.answer", "score": 51, "up_vote_count": 53, "is_accepted": false, "last_activity_date": 1460113639, "last_edit_date": 1460113639, "body_markdown": "On windows I used `npm list -g` to find out by default my (global) packages were being installed to `C:\\Users\\[Username]\\AppData\\Roaming\\npm`."}, {"tags": [], "down_vote_count": 1, "creation_date": 1403127091, "answer_id": 24295332, "path": "stack.browserify.answer", "score": 318, "up_vote_count": 319, "is_accepted": false, "last_activity_date": 1439334752, "last_edit_date": 1439334752, "body_markdown": "The command `npm root` will tell you the effective installation directory of your npm packages.\r\n\r\nIf your current working directory is a node package or a sub-directory of a node package, `npm root` will tell you the local installation directory. `npm root -g` will show the global installation root regardless of current working directory. \r\n\r\n[See the documentation.][1]\r\n\r\n\r\n  [1]: https://www.npmjs.org/doc/cli/npm-root.html\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1410413301, "answer_id": 25779709, "path": "stack.browserify.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1410413301, "body_markdown": "The easiest way would be to do \r\n\r\n&gt; npm list -g\r\n\r\n to list the package and view their installed location.\r\n\r\nI had installed npm via chololatey, so the location is\r\n\r\nC:\\MyProgramData\\chocolatey\\lib\\nodejs.commandline.0.10.31\\tools\\node_modules\r\n\r\nC:\\MyProgramData\\ is chocolatey repo location.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1417708242, "answer_id": 27298237, "path": "stack.browserify.answer", "score": 53, "up_vote_count": 53, "is_accepted": false, "last_activity_date": 1417708602, "last_edit_date": 1417708602, "body_markdown": "For globally-installed modules:\r\n---\r\n\r\nThe other answers give you platform-specific responses, but a generic one is this:\r\n\r\nWhen you install global module with `npm install -g something`, npm looks up a config variable `prefix` to know where to install the module.\r\n\r\nYou can get that value by running **`npm config get prefix`**\r\n\r\nTo display all the global modules available in that folder use `npm ls -g --depth 0` (`depth 0` to not display their dependencies).\r\n\r\nIf you want to change the global modules path, use `npm config edit` and put `prefix = /my/npm/global/modules/prefix` in the file.\r\n\r\nWhen you use some tools like [nodist](https://github.com/marcelklehr/nodist), they change the platform-default installation path of global npm modules."}, {"tags": [], "down_vote_count": 0, "creation_date": 1463006921, "answer_id": 37174515, "path": "stack.browserify.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1463008073, "last_edit_date": 1463008073, "body_markdown": "As the other answers say, the best way is to do \r\n\r\n    npm list -g\r\n\r\nHowever, if you have a large number of `npm` packages installed, the output of this command could be very long and a big pain to scroll up (sometimes it&#39;s not even possible to scroll that far back).\r\n\r\nIn this case, pipe the out to the `more` program, like this\r\n\r\n    npm list -g | more"}, {"tags": [], "down_vote_count": 0, "creation_date": 1463049153, "answer_id": 37184332, "path": "stack.browserify.answer", "score": 93, "up_vote_count": 93, "is_accepted": false, "last_activity_date": 1479376304, "last_edit_date": 1479376304, "body_markdown": "Use `npm root -g` command for know your golbal npm path.\r\n\r\n## Example:\r\n\r\n    $ npm root -g\r\n    /usr/local/lib/node_modules"}, {"tags": [], "down_vote_count": 1, "creation_date": 1467576999, "answer_id": 38173957, "path": "stack.browserify.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1472125777, "last_edit_date": 1472125777, "body_markdown": "&gt; In Ubuntu 14.04 they are installed at `/usr/lib/node-modules`\r\n\r\n**/usr/lib/node_modules**"}, {"tags": [], "down_vote_count": 0, "creation_date": 1470144910, "answer_id": 38721999, "path": "stack.browserify.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1470144910, "body_markdown": "From the [docs][1]:\r\n\r\n&gt; In npm 1.0, there are two ways to install things:\r\n&gt; \r\n&gt; - globally \u2014- This drops modules in `{prefix}/lib/node_modules`, and puts executable files in `{prefix}/bin`, where `{prefix}` is usually\r\n&gt; something like `/usr/local`. It also installs man pages in\r\n&gt; `{prefix}/share/man`, if they\u2019re supplied.\r\n&gt; \r\n&gt; - locally \u2014- This installs your package in the current working directory. Node modules go in `./node_modules`, executables go in\r\n&gt; `./node_modules/.bin/`, and man pages aren\u2019t installed at all.\r\n\r\n\r\nYou can get your `{prefix}` with `npm config get prefix`. (Useful when you installed node with nvm).\r\n\r\n  [1]: https://nodejs.org/en/blog/npm/npm-1-0-global-vs-local-installation/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1472048356, "answer_id": 39125905, "path": "stack.browserify.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1472048356, "body_markdown": "If module was installed with global (-g) flag, you can get parent location by running following command \r\n\r\n&gt; **npm get prefix**\r\n\r\n or \r\n\r\n&gt; **npm ls -g --depth=0**\r\n\r\n which will print location along with list of installed modules\r\n\r\nCheers :-)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1472118882, "answer_id": 39142055, "path": "stack.browserify.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1472118882, "body_markdown": "From the [docs][1]:\r\n\r\n&gt; Packages are dropped into the node_modules folder under the prefix.\r\n&gt; When installing locally, this means that you can\r\n&gt; require(&quot;packagename&quot;) to load its main module, or\r\n&gt; require(&quot;packagename/lib/path/to/sub/module&quot;) to load other modules.\r\n&gt; \r\n&gt; Global installs on Unix systems go to {prefix}/lib/node_modules.\r\n&gt; Global installs on Windows go to {prefix}/node_modules (that is, no\r\n&gt; lib folder.)\r\n&gt; \r\n&gt; Scoped packages are installed the same way, except they are grouped\r\n&gt; together in a sub-folder of the relevant node_modules folder with the\r\n&gt; name of that scope prefix by the @ symbol, e.g. npm install\r\n&gt; @myorg/package would place the package in\r\n&gt; {prefix}/node_modules/@myorg/package. See scope for more details.\r\n&gt; \r\n&gt; If you wish to require() a package, then install it locally.\r\n\r\n\r\nYou can get your `{prefix}` with `npm config get prefix`. (Useful when you installed node with nvm).\r\n\r\nRead about [locally][2].  \r\nRead about [globally][3].\r\n\r\n  [1]: https://docs.npmjs.com/files/folders\r\n  [2]: https://docs.npmjs.com/getting-started/installing-npm-packages-locally\r\n  [3]: https://docs.npmjs.com/getting-started/installing-npm-packages-globally"}, {"tags": [], "down_vote_count": 0, "creation_date": 1495273534, "answer_id": 44084354, "path": "stack.browserify.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1495273534, "body_markdown": "Not direct answer but may help ....\r\n\r\nThe npm also has a cache folder, which can be found by running `npm config get cache` (`%AppData%/npm-cache` on Windows). \r\n\r\nThe npm modules are first downloaded here and then copied to npm global folder (`%AppData%/npm/Roaming` on Windows) or project specific folder (`your-project/node_modules`).\r\n\r\nSo if you want to track npm packages, and some how, the list of all downloaded npm packages (if the npm cache is not cleaned)  have a look at this folder. The folder structure is as `{cache}/{name}/{version}`\r\n\r\nThis may help also https://docs.npmjs.com/cli/cache"}, {"tags": [], "down_vote_count": 0, "creation_date": 1509338552, "answer_id": 47008247, "path": "stack.browserify.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1509338552, "body_markdown": "You can find ***globally** installed modules* by the command\r\n\r\n    npm list -g\r\n\r\nIt will provide you the location where node.js modules have been installed.\r\n\r\n    C:\\Users\\[Username]\\AppData\\Roaming\\npm\r\n\r\nIf you install node.js modules ***locally*** in a folder, you can type the following command to see the location.\r\n\r\n    npm list"}, {"tags": [], "down_vote_count": 0, "creation_date": 1514929410, "answer_id": 48068244, "path": "stack.browserify.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1514929410, "body_markdown": "If you are looking for the executable that npm installed, maybe because you would like to put it in your PATH, you can simply do\r\n\r\n    npm bin\r\n\r\nor\r\n\r\n    npm bin -g"}], "title": "Where does npm install packages?", "view_count": 304943, "answer_count": 15, "code_snippet": ["<code>npm</code>", "<code>$HOME/.npm-global/lib/node_modules</code>", "<code>npm list -g</code>", "<code>/usr/local/lib/node</code>", "<code>/usr/local/lib/node_modules</code>", "<code>NODE_PATH</code>", "<code>%USERPROFILE%\\Application Data\\npm\\node_modules</code>", "<code>%AppData%\\npm\\node_modules</code>", "<code>node_modules</code>", "<code>npm list</code>", "<code>npm list -g</code>", "<code>%USERPROFILE%\\AppData\\Roaming\\npm\\node_modules</code>", "<code>npm root</code>", "<code>npm root</code>", "<code>npm root -g</code>", "<code>node_modules</code>", "<code>/usr/local/lib/node_modules</code>", "<code>sudo npm uninstall browserify -g</code>", "<code>sudo npm install browserify -g</code>", "<code>npm root -g</code>", "<code>$ npm root -g\n/usr/local/lib/node_modules\n</code>", "<code>npm install -g something</code>", "<code>prefix</code>", "<code>npm config get prefix</code>", "<code>npm ls -g --depth 0</code>", "<code>depth 0</code>", "<code>npm config edit</code>", "<code>prefix = /my/npm/global/modules/prefix</code>", "<code>npm list -g</code>", "<code>C:\\Users\\[Username]\\AppData\\Roaming\\npm</code>", "<code>npm config get cache</code>", "<code>%AppData%/npm-cache</code>", "<code>%AppData%/npm/Roaming</code>", "<code>your-project/node_modules</code>", "<code>{cache}/{name}/{version}</code>", "<code>{prefix}/lib/node_modules</code>", "<code>{prefix}/bin</code>", "<code>{prefix}</code>", "<code>/usr/local</code>", "<code>{prefix}/share/man</code>", "<code>./node_modules</code>", "<code>./node_modules/.bin/</code>", "<code>{prefix}</code>", "<code>npm config get prefix</code>", "<code>npm list -g\n</code>", "<code>C:\\Users\\[Username]\\AppData\\Roaming\\npm\n</code>", "<code>npm list\n</code>", "<code>npm bin\n</code>", "<code>npm bin -g\n</code>", "<code>npm list -g\n</code>", "<code>npm</code>", "<code>more</code>", "<code>npm list -g | more\n</code>", "<code>{prefix}</code>", "<code>npm config get prefix</code>"], "path": "stack.browserify"}, {"tags": ["javascript", "node.js"], "creation_date": 1278895146, "body_markdown": "I am creating a small application with a JavaScript client (run in the browser) and a Node.js server, communicating using WebSocket.\r\n\r\nI would like to share code between the client and the server. I have only just started with Node.js and my knowledge of modern JavaScript is a little rusty, to say the least. So I am still getting my head around the CommonJS require() function. If I am creating my packages by using the &#39;export&#39; object, then I cannot see how I could use the same JavaScript files in the browser.\r\n\r\nI want to create a set of methods and classes that are used on both ends to facilitate encoding and decoding messages, and other mirrored tasks. However, the Node.js/CommonJS packaging systems seems to preclude me from creating JavaScript files that can be used on both sides.\r\n\r\nI also tried using JS.Class to get a tighter OO model, but I gave up because I couldn&#39;t figure out how to get the provided JavaScript files to work with require(). Is there something am I missing here?\r\n", "last_edit_date": 1479159042, "up_vote_count": 207, "link": "https://stackoverflow.com/questions/3225251/how-can-i-share-code-between-node-js-and-the-browser", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1278897557, "answer_id": 3225341, "path": "stack.browserify.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1472505949, "last_edit_date": 1472505949, "body_markdown": "Don&#39;t forget that the string representation of a JavaScript function represents the source code for that function. You could simply write your functions and constructors in an encapsulated way so they can be toString()&#39;d and sent to the client.\r\n\r\nAnother way to do it is use a build system, put the common code in separate files, and then include them in both the server and client scripts. I&#39;m using that approach for a simple client/server game via WebSockets where the server and client both run essentially the same game loop and the client synchronises up with the server every tick to make sure nobody&#39;s cheating.\r\n\r\nMy build system for the game is a simple [Bash][1] script that runs the files through the C preprocessor and then through sed to clean up some junk cpp leaves behind, so I can use all the normal preprocessor stuff like #include, #define, #ifdef, etc.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1278898362, "answer_id": 3225368, "path": "stack.browserify.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1278922349, "last_edit_date": 1278922349, "body_markdown": "The server can simply send JavaScript source files to the client (browser) but the trick is that the client will have to provide a mini &quot;exports&quot; environment before it can `exec` the code and store it as a module.\r\n\r\nA simple way to make such an environment is to use a closure.  For example, say your server provides source files via HTTP like `http://example.com/js/foo.js`.  The browser can load the required files via an XMLHttpRequest and load the code like so:\r\n\r\n    ajaxRequest({\r\n      method: &#39;GET&#39;,\r\n      url: &#39;http://example.com/js/foo.js&#39;,\r\n      onSuccess: function(xhr) {\r\n        var pre = &#39;(function(){var exports={};&#39;\r\n          , post = &#39;;return exports;})()&#39;;\r\n        window.fooModule = eval(pre + xhr.responseText + post);\r\n      }\r\n    });\r\n\r\nThe key is that client can wrap the foreign code into an anonymous function to be run immediately (a closure) which creates the &quot;exports&quot; object and returns it so you can assign it where you&#39;d like, rather than polluting the global namespace.  In this example, it is assigned to the window attribute `fooModule` which will contain the code exported by the file `foo.js`.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1278921635, "answer_id": 3226739, "path": "stack.browserify.answer", "score": 148, "up_vote_count": 148, "is_accepted": true, "last_activity_date": 1472505777, "last_edit_date": 1472505777, "body_markdown": "If you want to write a module that can be used both client side and server side, I have a short blog post on a quick and easy method: *[Writing for Node.js and the browser][1]*, essentially the following (where `this` is the same as `window`):\r\n\r\n    (function(exports){\r\n\r\n        // Your code goes here\r\n\r\n       exports.test = function(){\r\n            return &#39;hello world&#39;\r\n        };\r\n\r\n    })(typeof exports === &#39;undefined&#39;? this[&#39;mymodule&#39;]={}: exports);\r\n\r\nAlternatively there are some projects aiming to implement the Node.js API on the client side, such as [Marak&#39;s gemini][2].\r\n\r\nYou might also be interested in [DNode][3], which lets you expose a JavaScript function so that it can be called from another machine using a simple JSON-based network protocol.\r\n\r\n  [1]: http://caolan.org/posts/writing_for_node_and_the_browser/\r\n  [2]: https://github.com/marak/gemini.js\r\n  [3]: https://github.com/substack/dnode\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1309442149, "answer_id": 6535891, "path": "stack.browserify.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1472506121, "last_edit_date": 1472506121, "body_markdown": "I would recommend looking into the [RequireJS adapter for Node.js](http://requirejs.org/docs/node.html). The problem is that the CommonJS module pattern Node.js uses by default isn&#39;t asynchronous, which blocks loading in the web browser. RequireJS uses the AMD pattern, which is both asynchronous and compatible with both server and client, as long as you use the `r.js` adapter.\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1316514098, "answer_id": 7483620, "path": "stack.browserify.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1472506173, "last_edit_date": 1472506173, "body_markdown": "[now.js][1] is also worth a look. It allows you to call server-side from the client-side, and client-side functions from the server-side\r\n\r\n  [1]: http://nowjs.com/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1323284330, "answer_id": 8420905, "path": "stack.browserify.answer", "score": 35, "up_vote_count": 35, "is_accepted": false, "last_activity_date": 1436627721, "last_edit_date": 1436627721, "body_markdown": "Epeli has a nice solution here http://epeli.github.com/piler/ that even works without the library, just put this in a file called share.js\r\n\r\n    (function(exports){\r\n    \r\n      exports.test = function(){\r\n           return &#39;This is a function from shared module&#39;;\r\n      };\r\n    \r\n    }(typeof exports === &#39;undefined&#39; ? this.share = {} : exports));\r\n\r\nOn the server side just use:\r\n\r\n    var share = require(&#39;./share.js&#39;);\r\n    \r\n    share.test();\r\n\r\n\r\n\r\nAnd on the client side just load the js file and then use\r\n\r\n    share.test();"}, {"tags": [], "down_vote_count": 0, "creation_date": 1339717868, "answer_id": 11042910, "path": "stack.browserify.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1472506314, "last_edit_date": 1472506314, "body_markdown": "None of the previous solutions bring the CommonJS module system to the browser.\r\n\r\nAs mentioned in the other answers, there are asset manager/packager solutions like [Browserify][1] or [Piler][2] and there are RPC solutions like [dnode][3] or [nowjs][4].\r\n\r\nBut I couldn&#39;t find an implementation of CommonJS for the browser (including a `require()` function and `exports` / `module.exports` objects, etc.). So I wrote my own, only to discover afterwards that someone else had written it better than I had: https://github.com/weepy/brequire. It&#39;s called Brequire (short for Browser require).\r\n\r\nJudging by popularity, asset managers fit the needs of most developers. However, if you need a browser implementation of CommonJS, [Brequire][5] will probably fit the bill.\r\n\r\n**2015 Update:** I no longer use Brequire (it hasn&#39;t been updated in a few years). If I&#39;m just writing a small, open-source module and I want anyone to be able to easily use, then I&#39;ll follow a pattern similar to Caolan&#39;s answer (above) -- I wrote [a blog post](http://csnw.github.io/2013/06/23/this-in-node-modules-and-iifes.html) about it a couple years ago.\r\n\r\nHowever, if I&#39;m writing modules for private use or for a community that is standardized on CommonJS (like the [Ampersand](http://ampersandjs.com/) community) then I&#39;ll just write them in CommonJS format and use [Browserify][1].\r\n\r\n  [1]: https://github.com/substack/node-browserify\r\n  [2]: http://epeli.github.com/piler/\r\n  [3]: https://github.com/substack/dnode\r\n  [4]: http://nowjs.com/\r\n  [5]: https://github.com/weepy/brequire\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1343563412, "answer_id": 11709097, "path": "stack.browserify.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1479159161, "last_edit_date": 1479159161, "body_markdown": "Maybe this is not entirely in line with the question, but I thought I&#39;d share this.\r\n\r\nI wanted to make a couple of simple string utility functions, declared on String.prototype, available to both node and the browser. I simply keep these functions in a file called utilities.js (in a subfolder) and can easily reference it both from a script-tag in my browser code, and by using require (omitting the .js extension) in my Node.js script:\r\n\r\n###my_node_script.js\r\n\r\n    var utilities = require(&#39;./static/js/utilities&#39;)\r\n\r\n###my_browser_code.html\r\n\r\n    &lt;script src=&quot;/static/js/utilities.js&quot;&gt;&lt;/script&gt;\r\n\r\nI hope this is useful information to someone other than me.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1364425607, "answer_id": 15671272, "path": "stack.browserify.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1472506408, "last_edit_date": 1472506408, "body_markdown": "If you want to write your browser in Node.js-like style you can try [dualify](https://github.com/farin/dualifyjs).\r\n\r\nThere is no browser code compilation, so you can write your application without limitations.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1378653174, "answer_id": 18685274, "path": "stack.browserify.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1472506486, "last_edit_date": 1472506486, "body_markdown": "Write your code as [RequireJS][1] modules and your tests as [Jasmine][2] tests.\r\n\r\nThis way code can be loaded everywhere with RequireJS and the tests be run in the browser with jasmine-html and with [jasmine-node][3] in Node.js without the need to modify the code or the tests.\r\n\r\nHere is [a working example][4] for this.\r\n\r\n  [1]: http://requirejs.org/\r\n  [2]: http://pivotal.github.io/jasmine/\r\n  [3]: https://github.com/mhevery/jasmine-node\r\n  [4]: https://github.com/blacksonic/minesweeper\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1400557960, "answer_id": 23750731, "path": "stack.browserify.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1472506636, "last_edit_date": 1472506636, "body_markdown": "Checkout the jQuery source code that makes this work in the Node.js module pattern, AMD module pattern, and global in the browser:\r\n\r\n    (function(window){\r\n        var jQuery = &#39;blah&#39;;\r\n\r\n        if (typeof module === &quot;object&quot; &amp;&amp; module &amp;&amp; typeof module.exports === &quot;object&quot;) {\r\n\r\n            // Expose jQuery as module.exports in loaders that implement the Node\r\n            // module pattern (including browserify). Do not create the global, since\r\n            // the user will be storing it themselves locally, and globals are frowned\r\n            // upon in the Node module world.\r\n            module.exports = jQuery;\r\n        }\r\n        else {\r\n            // Otherwise expose jQuery to the global object as usual\r\n            window.jQuery = window.$ = jQuery;\r\n\r\n            // Register as a named AMD module, since jQuery can be concatenated with other\r\n            // files that may use define, but not via a proper concatenation script that\r\n            // understands anonymous AMD modules. A named AMD is safest and most robust\r\n            // way to register. Lowercase jquery is used because AMD module names are\r\n            // derived from file names, and jQuery is normally delivered in a lowercase\r\n            // file name. Do this after creating the global so that if an AMD module wants\r\n            // to call noConflict to hide this version of jQuery, it will work.\r\n            if (typeof define === &quot;function&quot; &amp;&amp; define.amd) {\r\n                define(&quot;jquery&quot;, [], function () { return jQuery; });\r\n            }\r\n        }\r\n    })(this)\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1456589912, "answer_id": 35672124, "path": "stack.browserify.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1456589912, "body_markdown": "I wrote this, it is simple to use if you want to set all variables to the global scope:\r\n\r\n    (function(vars, global) {\r\n    \tfor (var i in vars) global[i] = vars[i];\r\n    })({\r\n    \tabc: function() {\r\n    \t\t...\r\n    \t},\r\n        xyz: function() {\r\n            ...\r\n        }\r\n    }, typeof exports === &quot;undefined&quot; ? this : exports);"}], "title": "How can I share code between Node.js and the browser?", "view_count": 61536, "answer_count": 12, "code_snippet": ["<code>this</code>", "<code>window</code>", "<code>(function(exports){\n\n    // Your code goes here\n\n   exports.test = function(){\n        return 'hello world'\n    };\n\n})(typeof exports === 'undefined'? this['mymodule']={}: exports);\n</code>", "<code>(function(exports){\n\n  exports.test = function(){\n       return 'This is a function from shared module';\n  };\n\n}(typeof exports === 'undefined' ? this.share = {} : exports));\n</code>", "<code>var share = require('./share.js');\n\nshare.test();\n</code>", "<code>share.test();\n</code>", "<code>r.js</code>", "<code>(function(window){\n    var jQuery = 'blah';\n\n    if (typeof module === \"object\" &amp;&amp; module &amp;&amp; typeof module.exports === \"object\") {\n\n        // Expose jQuery as module.exports in loaders that implement the Node\n        // module pattern (including browserify). Do not create the global, since\n        // the user will be storing it themselves locally, and globals are frowned\n        // upon in the Node module world.\n        module.exports = jQuery;\n    }\n    else {\n        // Otherwise expose jQuery to the global object as usual\n        window.jQuery = window.$ = jQuery;\n\n        // Register as a named AMD module, since jQuery can be concatenated with other\n        // files that may use define, but not via a proper concatenation script that\n        // understands anonymous AMD modules. A named AMD is safest and most robust\n        // way to register. Lowercase jquery is used because AMD module names are\n        // derived from file names, and jQuery is normally delivered in a lowercase\n        // file name. Do this after creating the global so that if an AMD module wants\n        // to call noConflict to hide this version of jQuery, it will work.\n        if (typeof define === \"function\" &amp;&amp; define.amd) {\n            define(\"jquery\", [], function () { return jQuery; });\n        }\n    }\n})(this)\n</code>", "<code>var utilities = require('./static/js/utilities')\n</code>", "<code>&lt;script src=\"/static/js/utilities.js\"&gt;&lt;/script&gt;\n</code>", "<code>utilites.js</code>", "<code>module.exports = require('./static/js/utilities');</code>", "<code>utilities.js</code>", "<code>shared</code>", "<code>require('/shared/utilities')</code>", "<code>Cannot find module '/shared/utilities'</code>", "<code>require('./../../shared/utilities')</code>", "<code>exec</code>", "<code>http://example.com/js/foo.js</code>", "<code>ajaxRequest({\n  method: 'GET',\n  url: 'http://example.com/js/foo.js',\n  onSuccess: function(xhr) {\n    var pre = '(function(){var exports={};'\n      , post = ';return exports;})()';\n    window.fooModule = eval(pre + xhr.responseText + post);\n  }\n});\n</code>", "<code>fooModule</code>", "<code>foo.js</code>", "<code>window.fooModule = {}; (new Function('exports', xhr.responseText))(window.fooModule)</code>", "<code>require()</code>", "<code>exports</code>", "<code>module.exports</code>", "<code>(function(vars, global) {\n    for (var i in vars) global[i] = vars[i];\n})({\n    abc: function() {\n        ...\n    },\n    xyz: function() {\n        ...\n    }\n}, typeof exports === \"undefined\" ? this : exports);\n</code>"], "path": "stack.browserify"}, {"tags": ["node.js"], "creation_date": 1327604262, "body_markdown": "After pulling down a module from GitHub and following the instructions to build it, I try pulling it into an existing project using:\r\n\r\n    &gt; npm install ../faye\r\n\r\nThis appears to do the trick:\r\n\r\n    &gt; npm list\r\n    /home/dave/src/server\r\n    \u2514\u2500\u252c faye@0.7.1\r\n      \u251c\u2500\u2500 cookiejar@1.3.0\r\n      \u251c\u2500\u2500 hiredis@0.1.13\r\n      \u2514\u2500\u2500 redis@0.7.1\r\n\r\nBut Node.js can&#39;t find the module:\r\n\r\n    &gt; node app.js\r\n    node.js:201\r\n            throw e; // process.nextTick error, or &#39;error&#39; event on first tick\r\n                  ^\r\n    Error: Cannot find module &#39;faye&#39;\r\n        at Function._resolveFilename (module.js:334:11)\r\n        at Function._load (module.js:279:25)\r\n        at Module.require (module.js:357:17)\r\n        at require (module.js:368:17)\r\n        at Object.&lt;anonymous&gt; (/home/dave/src/server/app.js:2:12)\r\n        at Module._compile (module.js:432:26)\r\n        at Object..js (module.js:450:10)\r\n        at Module.load (module.js:351:31)\r\n        at Function._load (module.js:310:12)\r\n        at Array.0 (module.js:470:10)\r\n\r\nI really want to understand what is going on here, but I&#39;m at a bit of a loss as to where to look next. Any suggestions?\r\n", "last_edit_date": 1477409082, "up_vote_count": 392, "link": "https://stackoverflow.com/questions/9023672/how-do-i-resolve-cannot-find-module-error-using-node-js", "_childDocuments_": [{"tags": [], "down_vote_count": 10, "creation_date": 1327605300, "answer_id": 9023864, "path": "stack.gulp.answer", "score": 357, "up_vote_count": 367, "is_accepted": true, "last_activity_date": 1464821452, "last_edit_date": 1464821452, "body_markdown": "Using `npm install` installs the module into the current directory only (in a subdirectory called `node_modules`).  Is app.js located under `home/dave/src/server/`?  If not and you want to use the module from any directory, you need to install it globally using `npm install -g`.\r\n\r\nI usually install most packages locally so that they get checked in along with my project code.\r\n\r\n***Update (3/2016):***\r\n\r\nI&#39;ve received a lot of flak for my response, specifically that I check in the packages that my code depends on.  A few days ago, somebody unpublished all of their packages (https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.kq9s64clp) which broke React, Babel, and just about everything else.  Hopefully it&#39;s clear now that if you have production code, you can&#39;t rely on NPM actually maintaining your dependencies for you. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1432549812, "answer_id": 30436256, "path": "stack.gulp.answer", "score": 328, "up_vote_count": 328, "is_accepted": false, "last_activity_date": 1477409134, "last_edit_date": 1477409134, "body_markdown": "I had a very similar issue. Removing the entire `node_modules` folder and re-installing worked for me:\r\n\r\n    rm -rf node_modules\r\n    npm install\r\n"}, {"tags": [], "down_vote_count": 41, "creation_date": 1434101203, "answer_id": 30799666, "path": "stack.gulp.answer", "score": -40, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1515829563, "last_edit_date": 1515829563, "body_markdown": "Change the directory and point to your current project folder and then &quot;npm install&quot;.\r\n.\r\n\r\nThis will install all dependencies and modules into your project folder."}, {"tags": [], "down_vote_count": 0, "creation_date": 1434531106, "answer_id": 30886703, "path": "stack.gulp.answer", "score": 61, "up_vote_count": 61, "is_accepted": false, "last_activity_date": 1495833350, "last_edit_date": 1495833350, "body_markdown": "    npm install --save module_name\r\n\r\nFor example, if the error is:\r\n\r\n&gt; { [Error: Cannot find module &#39;/root/.npm/form-data&#39;] code: &#39;MODULE_NOT_FOUND&#39; } \r\n\r\nthen you can resolve this issue by executing the command `npm install --save form-data`.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1438878214, "answer_id": 31861021, "path": "stack.gulp.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1477409280, "last_edit_date": 1477409280, "body_markdown": "This happens when a first [npm][1] install has crashed for some reason (SIGINT of npm), or that the delay was too long, or data is corrupted.\r\nTrying an npm install again won&#39;t save the problem.\r\n\r\nSomething got wrong on the npm first check, so the best choice is to remove the file and to restart npm install.\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Npm_(software)\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1459929181, "answer_id": 36444789, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1459929181, "body_markdown": "I was trying to publish my own package and then include it in another project. I had that issue because of how I&#39;ve built the first module. Im using ES2015 export to create the module, e.g lets say the module looks like that:\r\n\r\n    export default function(who = &#39;world&#39;){\r\n\t    return `Hello ${who}`;\r\n    }\r\n\r\nAfter compiled with Babel and before been published:\r\n\r\n    &#39;use strict&#39;;\r\n\r\n    Object.defineProperty(exports, &quot;__esModule&quot;, {\r\n    \tvalue: true\r\n    });\r\n    \r\n    exports.default = function () {\r\n    \tvar who = arguments.length &lt;= 0 || arguments[0] === undefined ? &#39;world&#39; : arguments[0];\r\n    \r\n    \r\n    \treturn &#39;Hello &#39; + who;\r\n    };\r\n\r\nSo after `npm install module-name` in another project (none ES2015) i had to do\r\n\r\n\r\n`var hello = require(&#39;module-name&#39;).default;`\r\n\r\nTo actually got the package imported.\r\n\r\nHope that helps!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1465558209, "answer_id": 37747145, "path": "stack.gulp.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1477409551, "last_edit_date": 1477409551, "body_markdown": "If you use nvm, check that existing node_modules that are bindings to other libraries are compiled for the correct Node.js version.\r\n\r\nI was having the same error. The reason was the following: We use nvm since we&#39;re running two apps on a server, one requires Node.js 5.6 because it uses node-gd (which doesn&#39;t run on Node.js 6 for now), the other requires Node.js 6. Node.js 6 is the [apt-get][1] installation.\r\n\r\nAlso we use the pm2 tool to deploy.\r\n\r\nSo, the default setup is that the pm2 process starts when nvm is not in effect, so it uses the apt-get installation of Node.js (version 6). So the main pm2 daemon starts with Node.js 6. If I run applications in fork mode they start in separate processes and nvm settings are in effect. When I run applications in cluster mode - they inherit the non-nvm environment.\r\n\r\nSo when I tried to switch to the cluster mode the application failed to start because the bindings compiled for 5.6 fail with this message.\r\n\r\nI&#39;ve fixed that by restarting pm2 when nvm setings are in effect. Also startup scripts should be fixed.\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Advanced_Packaging_Tool#apt-get\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1467789911, "answer_id": 38218364, "path": "stack.gulp.answer", "score": 5, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1467809073, "last_edit_date": 1467809073, "body_markdown": "Remove your `node_module` root folder from your project(eg: `myApp`).\r\nGo to `myApp` folder and then type below command from terminal\r\n\r\n    &gt;myApp&gt;npm install\r\nIt will install all the dependency modules required for your project."}, {"tags": [], "down_vote_count": 1, "creation_date": 1472114278, "answer_id": 39140450, "path": "stack.gulp.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1472114278, "body_markdown": "I experienced this error yesterday. Took me a while to realise that the `main` entry in `package.json` was pointing to a file that I&#39;d moved. Once I updated that the error disappeared and the package worked."}, {"tags": [], "down_vote_count": 1, "creation_date": 1473154525, "answer_id": 39345584, "path": "stack.gulp.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1473154525, "body_markdown": "PRO TIP:\r\n\r\nThis error happened to me, while fighting fatigue and mild illness, because I typed `node blah` instead of `npm blah`.\r\n\r\nThe error message received wasn&#39;t angry enough to alert me to my own folly!"}, {"tags": [], "down_vote_count": 2, "creation_date": 1474630107, "answer_id": 39659673, "path": "stack.gulp.answer", "score": -1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1474630107, "last_edit_date": 1495541904, "body_markdown": "First of all, yes, a part of my answer definitely is helpful to solve the **error** that is posted by OP. Secondly, after trying the below step, I faced a couple of other errors, and so, have written the solution of those too.\r\n\r\n***(Psst! I am not sure if I&#39;ve successfully helped in solving the above error, or if I&#39;ve broken some rule or format of answering, but I faced the above error and some others and it took much time for me to find the proper solutions for those errors. I&#39;m writing the complete solution because in case, if someone else also faces these errors, then he&#39;ll hopefully get a solution here.)***\r\n\r\nSo adding to, and elaborating the answer provided by [PrashanthiDevi][1], and also adding my personal experience, here it is:\r\n\r\nI am new to the whole e2e and unit tests part. I started looking into this part from [Protractor][2]. Now I already had the files in which tests were written, but I had to run the tests.\r\n\r\nI had already installed all the required softwares and tools, but when I initially ran the code for running the tests, `gulp itest`, I got this **&#39;Cannot find module&#39; Error**. After going through many different questions on SO, I found one answer that I thought could help getting a solution.\r\n\r\nThe person had suggested to run the command `npm install` in my project folder.\r\n\r\nThe **reason** for doing this was to update the ***node-modules*** folder, inside our project folder, with all the required and necessary files and dependencies.\r\n\r\n*(The below part maybe irrelevant with this question, but might be helpful if anyone came across the same situation that I faced.)*\r\n\r\nThe above step surely **solved** my previous error, but threw a new one! This time the error being **`Could not find chromedriver at &#39;..\\node_modules\\protractor\\selenium\\chromedriver&#39;`**.  \r\n\r\nHowever, the solution of this error was pretty silly (and funny) to me. I already had the chromedriver file in my **selenium** folder. But, turns out that the above error was coming because my **chromedriver** files were inside ***selenium*** folder and **not inside** ***chromedriver*** folder. So, creating a **chromedriver** folder and copying the chromedriver files there solved my problem!\r\n\r\n*Also, for the **error: Timed out waiting for the WebDriver Server**, you could add this **line of code** to **conf.js** file inside `exports.config{}`:* \r\n\r\n`seleniumAddress: &#39;http://localhost:8080/&#39;`\r\n\r\nHope this helps!\r\n\r\n\r\n  [1]: https://stackoverflow.com/users/4424630/prashanthidevi\r\n  [2]: http://www.protractortest.org/"}, {"tags": [], "down_vote_count": 4, "creation_date": 1481043225, "answer_id": 41000701, "path": "stack.gulp.answer", "score": -4, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1481043225, "body_markdown": "I got the simple solution to solve this issue.\r\n\r\nJust remove C:\\Users\\UserName\\AppData\\Roaming\\npm\\\r\n\r\nand then install node. \r\n\r\nNow your problem will be solved."}, {"tags": [], "down_vote_count": 4, "creation_date": 1488112985, "answer_id": 42468645, "path": "stack.gulp.answer", "score": -4, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1495827250, "last_edit_date": 1495827250, "body_markdown": "Run the following command only:\r\n\r\n    npm install\r\n\r\nIt will install all the required modules in the `node_modules` folder.\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1492561379, "answer_id": 43484247, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1492562029, "last_edit_date": 1492562029, "body_markdown": "Encountered this problem while using **`webpack`** with **`webpack-dev-middleware`**.\r\n\r\nHad turned a **single file** into a **folder**.\r\n\r\nThe watcher seemed to not see the new folder and the module was now missing.\r\n\r\nFixed by restarting the process."}, {"tags": [], "down_vote_count": 0, "creation_date": 1495138626, "answer_id": 44057063, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1495138626, "body_markdown": "Just found an unusual scenario that may be of use to someone and is sort of a red herring.\r\n\r\nI was also getting the Cannot Find Module error but oddly everything worked perfectly in my local (Mac hosted) Node.js environment. This problem only appeared when the code was deployed on our Linux server.\r\n\r\nWell... it turned out to be a typo that (apparently) the Mac based Node.js installation was perfectly happy to ignore.\r\n\r\nThe include looked like this:\r\n\r\n    var S3Uploader = require(&#39;./S3Uploader.class&#39;);\r\n\r\nBut the actual file was called &quot;s3Uploader.class.js&quot;\r\n\r\nNotice the casing difference in the &#39;s&#39; vs. &#39;S&#39; between the code and the filename.\r\n\r\nSo - in the odd chance that none of the other solutions here are solving your problem, triple check that you&#39;re not mis-casing the characters in your included filename! :)\r\n\r\nand DUH!"}, {"tags": [], "down_vote_count": 0, "creation_date": 1498228212, "answer_id": 44723909, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1498228212, "body_markdown": "This error can be encountered if you are `require`ing a module that has a missing or incorrect `main` field in its package.json. Though the module itself is installed, npm/node has to use a single .js file as an entrypoint to your module. If the `main` field is not there, it defaults to looking for `index.js` in your module&#39;s folder. If your module&#39;s main file is *not* called index.js, it won&#39;t be able to `require` it.\r\n\r\nDiscovered while turning a `browserify`-based module into a CommonJS `require`-able module; `browserify` didn&#39;t care about the missing `main` field, and so the error had gone unnoticed."}, {"tags": [], "down_vote_count": 0, "creation_date": 1499666232, "answer_id": 45004664, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1499666232, "body_markdown": "I can add one more place to check; the package that I was trying to use was another one of my own packages that I had published to a private NPM repo.  I had forgotten to configure the &#39;main&#39; property in the package.json properly.  So, the package was there in the node_modules folder of the consuming package, but I was getting &quot;cannot find module&quot;.  Took me a few minutes to realise my blunder. :-("}, {"tags": [], "down_vote_count": 1, "creation_date": 1503296939, "answer_id": 45790543, "path": "stack.gulp.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1503296939, "body_markdown": "I faced the same problem when someone else in the team updated `package.json` in SVN. Merely removing the `node_modules` directory did not help.  How I solved the problem is:\r\n\r\n    rm -rf node_modules\r\n    rm package.json\r\n    rm package-lock.json\r\n    svn up\r\n    npm install\r\n    ng build --env=prod\r\n\r\nHope this helps someone!"}, {"tags": [], "down_vote_count": 1, "creation_date": 1504675200, "answer_id": 46067318, "path": "stack.gulp.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1504675200, "body_markdown": "Specify the path to the restler folder, which will be inside node_modules folder like : var rest = require(&#39;./node_modules/restler&#39;);\r\n\r\nThis worked for me."}, {"tags": [], "down_vote_count": 0, "creation_date": 1507021942, "answer_id": 46541070, "path": "stack.gulp.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1507021942, "body_markdown": "For TypeScript users, if you are importing a Node module (such as `http` or `url`) and you are getting an error such as `&quot;Cannot find module &quot;x&quot;` then the error can be fixed by running\r\n\r\n    npm install @types/node --save-dev\r\n\r\nThe command will import the NodeJS TypeScript definitions into your project, allowing you to use Node modules."}, {"tags": [], "down_vote_count": 0, "creation_date": 1508327407, "answer_id": 46809487, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1508327407, "body_markdown": "In my case I had `UNMET PEER DEPENDENCY  redux@^3.0.0` causing this error message, see all of them and install missing modules again using --save\r\n\r\n    npm install redux --save"}, {"tags": [], "down_vote_count": 0, "creation_date": 1517678072, "answer_id": 48599905, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1517678539, "last_edit_date": 1517678539, "body_markdown": "Maybe like me you set &#39;view engine&#39; in express to an engine that doesn&#39;t exist, or tried to use an unregistered templating engine.\r\nMake sure that you use:\r\n`\r\napp.engine(&#39;engine name&#39;,engine)\r\napp.set(&#39;view engine&#39;,&#39;engine name&#39;)\r\n`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1517888077, "answer_id": 48635059, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1517888077, "body_markdown": "Check if the enviroment variable NODE_PATH is set correctly and pointing to the node_modules path. nodejs uses this variable to search for the libraries"}], "title": "How do I resolve &quot;Cannot find module&quot; error using Node.js?", "view_count": 947315, "answer_count": 23, "code_snippet": ["<code>&gt; npm install ../faye\n</code>", "<code>&gt; npm list\n/home/dave/src/server\n\u2514\u2500\u252c faye@0.7.1\n  \u251c\u2500\u2500 cookiejar@1.3.0\n  \u251c\u2500\u2500 hiredis@0.1.13\n  \u2514\u2500\u2500 redis@0.7.1\n</code>", "<code>&gt; node app.js\nnode.js:201\n        throw e; // process.nextTick error, or 'error' event on first tick\n              ^\nError: Cannot find module 'faye'\n    at Function._resolveFilename (module.js:334:11)\n    at Function._load (module.js:279:25)\n    at Module.require (module.js:357:17)\n    at require (module.js:368:17)\n    at Object.&lt;anonymous&gt; (/home/dave/src/server/app.js:2:12)\n    at Module._compile (module.js:432:26)\n    at Object..js (module.js:450:10)\n    at Module.load (module.js:351:31)\n    at Function._load (module.js:310:12)\n    at Array.0 (module.js:470:10)\n</code>", "<code>node_modules</code>", "<code>app.js</code>", "<code>..</code>", "<code>npm install</code>", "<code>node_modules</code>", "<code>home/dave/src/server/</code>", "<code>npm install -g</code>", "<code>package.json</code>", "<code>node_modules</code>", "<code>npm install</code>", "<code>package.json</code>", "<code>node_modules</code>", "<code>rm -rf node_modules\nnpm install\n</code>", "<code>npm install</code>", "<code>npm update</code>", "<code>Error: Cannot find module 'http-errors'</code>", "<code>npm install</code>", "<code>npm install --save module_name\n</code>", "<code>npm install --save form-data</code>", "<code>ng new project-name</code>", "<code>npm cache clear</code>", "<code>npm install</code>", "<code>node_module</code>", "<code>myApp</code>", "<code>myApp</code>", "<code>&gt;myApp&gt;npm install\n</code>", "<code>http</code>", "<code>url</code>", "<code>\"Cannot find module \"x\"</code>", "<code>npm install @types/node --save-dev\n</code>", "<code>main</code>", "<code>package.json</code>", "<code>node blah</code>", "<code>npm blah</code>", "<code>package.json</code>", "<code>node_modules</code>", "<code>rm -rf node_modules\nrm package.json\nrm package-lock.json\nsvn up\nnpm install\nng build --env=prod\n</code>", "<code>export default function(who = 'world'){\n    return `Hello ${who}`;\n}\n</code>", "<code>'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function () {\n    var who = arguments.length &lt;= 0 || arguments[0] === undefined ? 'world' : arguments[0];\n\n\n    return 'Hello ' + who;\n};\n</code>", "<code>npm install module-name</code>", "<code>var hello = require('module-name').default;</code>", "<code>webpack</code>", "<code>webpack-dev-middleware</code>", "<code>var S3Uploader = require('./S3Uploader.class');\n</code>", "<code>require</code>", "<code>main</code>", "<code>main</code>", "<code>index.js</code>", "<code>require</code>", "<code>browserify</code>", "<code>require</code>", "<code>browserify</code>", "<code>main</code>", "<code>UNMET PEER DEPENDENCY  redux@^3.0.0</code>", "<code>npm install redux --save\n</code>", "<code>\napp.engine('engine name',engine)\napp.set('view engine','engine name')\n</code>", "<code>gulp itest</code>", "<code>npm install</code>", "<code>Could not find chromedriver at '..\\node_modules\\protractor\\selenium\\chromedriver'</code>", "<code>exports.config{}</code>", "<code>seleniumAddress: 'http://localhost:8080/'</code>", "<code>npm install\n</code>", "<code>node_modules</code>"], "path": "stack.browserify"}, {"tags": ["javascript", "coffeescript"], "creation_date": 1290083356, "body_markdown": "On Coffeescript.org:\r\n\r\n    bawbag = (x, y) -&gt;\r\n        z = (x * y)\r\n    \r\n    bawbag(5, 10) \r\n\r\nwould compile to:\r\n\r\n    var bawbag;\r\n    bawbag = function(x, y) {\r\n      var z;\r\n      return (z = (x * y));\r\n    };\r\n    bawbag(5, 10);\r\n\r\ncompiling via coffee-script under node.js wraps that so:\r\n\r\n    (function() {\r\n      var bawbag;\r\n      bawbag = function(x, y) {\r\n        var z;\r\n        return (z = (x * y));\r\n      };\r\n      bawbag(5, 10);\r\n    }).call(this);\r\n\r\nDocs say:\r\n\r\n&gt; If you&#39;d like to create top-level variables for other scripts to use,\r\n&gt; attach them as properties on window, or on the exports object in\r\n&gt; CommonJS. The existential operator (covered below), gives you a\r\n&gt; reliable way to figure out where to add them, if you&#39;re targeting both\r\n&gt; CommonJS and the browser: root = exports ? this\r\n\r\nHow do I define Global Variables then in CoffeeScript. What does &#39;attach them as properties on window&#39; mean?\r\n\r\n\r\n", "last_edit_date": 1453753715, "up_vote_count": 307, "link": "https://stackoverflow.com/questions/4214731/how-do-i-define-global-variables-in-coffeescript", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1290086180, "answer_id": 4215132, "path": "stack.gulp.answer", "score": 415, "up_vote_count": 415, "is_accepted": true, "last_activity_date": 1317265164, "last_edit_date": 1317265164, "body_markdown": "Since coffee script has no `var` statement it automatically inserts it for all variables in the coffee-script, that way it prevents the compiled JavaScript version from leaking everything into the **global namespace**.  \r\n\r\nSo since there&#39;s no way to make something &quot;leak&quot; into the **global namespace** from the coffee-script side of things on purpose, you need to define your global variables as properties of the **global object**.\r\n\r\n&gt; attach them as properties on window\r\n\r\nThis means you need to do something like `window.foo = &#39;baz&#39;;`, which handles the browser case, since there the **global object** is the `window`.\r\n\r\n\r\n## Node.js ##\r\n\r\nIn Node.js there&#39;s no `window` object, instead there&#39;s the `exports` object that gets passed into the wrapper that wraps the Node.js module (See: https://github.com/ry/node/blob/master/src/node.js#L321 ), so in Node.js what you would need to do is `exports.foo = &#39;baz&#39;;`.\r\n  \r\n  \r\nNow let us take a look at what it states in your quote from the docs:  \r\n&gt; ...targeting both CommonJS and the browser: root = exports ? this\r\n\r\nThis is obviously coffee-script, so let&#39;s take a look into what this actually compiles to:  \r\n\r\n    var root;\r\n    root = (typeof exports !== &quot;undefined&quot; &amp;&amp; exports !== null) ? exports : this;\r\n\r\nFirst it will check whether `exports` is defined, since trying to reference a non existent variable in JavaScript would otherwise yield an SyntaxError (except when it&#39;s used with `typeof`)\r\n\r\nSo if `exports` exists, which is the case in Node.js (or in a badly written WebSite...) root will point to `exports`, otherwise to `this`. So what&#39;s `this`?\r\n\r\n    (function() {...}).call(this);\r\n\r\nUsing `.call` on a function will bind the `this` inside the function to the first parameter passed, in case of the browser `this` would now be the `window` object, in case of Node.js it would be the **global context** which is also available as the `global` object.  \r\n\r\nBut since you have the `require` function in Node.js, there&#39;s no need to assign something to the `global` object in Node.js, instead you assign to the `exports` object which then gets returned by the `require` function.\r\n\r\n\r\n## Coffee-Script ##\r\n\r\nAfter all that explanation, here&#39;s what you need to do:  \r\n\r\n    root = exports ? this\r\n    root.foo = -&gt; &#39;Hello World&#39;\r\n\r\nThis will declare our function `foo` in the global namespace (whatever that happens to be).  \r\nThat&#39;s all :)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1290229637, "answer_id": 4231330, "path": "stack.gulp.answer", "score": 33, "up_vote_count": 33, "is_accepted": false, "last_activity_date": 1290229637, "body_markdown": "Ivo nailed it, but I&#39;ll mention that there is one dirty trick you can use, though I don&#39;t recommend it if you&#39;re going for style points: You can embed JavaScript code directly in your CoffeeScript by escaping it with backticks.\r\n\r\nHowever, here&#39;s why this is usually a bad idea: The CoffeeScript compiler is unaware of those variables, which means they won&#39;t obey normal CoffeeScript scoping rules. So,\r\n\r\n    `foo = &#39;bar&#39;`\r\n    foo = &#39;something else&#39;\r\n\r\ncompiles to\r\n\r\n    foo = &#39;bar&#39;;\r\n    var foo = &#39;something else&#39;;\r\n\r\nand now you&#39;ve got yourself two `foo`s in different scopes. There&#39;s no way to modify the *global* `foo` from CoffeeScript code without referencing the global object, as Ivy described.\r\n\r\nOf course, this is only a problem if you make an assignment to `foo` in CoffeeScript\u2014if `foo` became read-only after being given its initial value (i.e. it&#39;s a global constant), then the embedded JavaScript solution approach might be kinda sorta acceptable (though still not recommended)."}, {"tags": [], "down_vote_count": 0, "creation_date": 1314427755, "answer_id": 7212970, "path": "stack.gulp.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1314427755, "body_markdown": "You can pass -b option when you compile code via coffee-script under node.js.\r\nThe compiled code will be the same as on coffeescript.org."}, {"tags": [], "down_vote_count": 3, "creation_date": 1315993239, "answer_id": 7414232, "path": "stack.gulp.answer", "score": 9, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1315993239, "last_edit_date": 1495541426, "body_markdown": "To add to [Ivo Wetzel&#39;s answer](https://stackoverflow.com/questions/4214731/coffeescript-global-variables/4215132#4215132)\r\n\r\nThere seems to be a shorthand syntax for `exports ? this` that I can only find documented/mentioned on a [Google group posting](https://groups.google.com/forum/#!msg/coffeescript/PzNU0NtVY2c/zu_3kaG4nV4J).\r\n\r\nI.e. in a web page to make a function available globally you declare the function again with an `@` prefix:\r\n\r\n    &lt;script type=&quot;text/coffeescript&quot;&gt;\r\n        @aglobalfunction = aglobalfunction = () -&gt;\r\n             alert &quot;Hello!&quot;\r\n    &lt;/script&gt;\r\n\r\n    &lt;a href=&quot;javascript:aglobalfunction()&quot; &gt;Click me!&lt;/a&gt;\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1340974397, "answer_id": 11262161, "path": "stack.gulp.answer", "score": 56, "up_vote_count": 57, "is_accepted": false, "last_activity_date": 1340974397, "body_markdown": "To me it seems @atomicules has the simplest answer, but I think it can be simplified a little more. You need to put an `@` before anything you want to be global, so that it compiles to `this.anything` and `this` refers to the global object.\r\n\r\n### so...\r\n\r\n    @bawbag = (x, y) -&gt;\r\n        z = (x * y)\r\n    \r\n    bawbag(5, 10)\r\n\r\n### compiles to...\r\n\r\n    this.bawbag = function(x, y) {\r\n      var z;\r\n      return z = x * y;\r\n    };\r\n    bawbag(5, 10);\r\n\r\n### and works inside and outside of the wrapper given by node.js\r\n\r\n    (function() {\r\n        this.bawbag = function(x, y) {\r\n          var z;\r\n          return z = x * y;\r\n        };\r\n        console.log(bawbag(5,13)) // works here\r\n    }).call(this);\r\n    \r\n    console.log(bawbag(5,11)) // works here"}, {"tags": [], "down_vote_count": 0, "creation_date": 1392235953, "answer_id": 21738607, "path": "stack.gulp.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1402762616, "last_edit_date": 1402762616, "body_markdown": "I think what you are trying to achieve can simply be done like this :\r\n\r\nWhile you are compiling the coffeescript, use the &quot;-b&quot; parameter.\r\n\r\n`-b` / `--bare` _Compile the JavaScript without the top-level function safety wrapper._\r\n\r\nSo something like this : `coffee -b --compile somefile.coffee whatever.js`\r\n\r\nThis will output your code just like in the CoffeeScript.org site.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1450497065, "answer_id": 34367083, "path": "stack.gulp.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1450497065, "body_markdown": "If you&#39;re a bad person (I&#39;m a bad person.), you can get as simple as this: `(-&gt;@)()`\r\n\r\nAs in,\r\n\r\n    (-&gt;@)().im_a_terrible_programmer = yes\r\n    console.log im_a_terrible_programmer\r\n\r\n----\r\n\r\nThis works, because when invoking a `Reference` to a `Function` \u2018bare\u2019 (that is, `func()`, instead of `new func()` or `obj.func()`), something commonly referred to as the \u2018function-call invocation pattern\u2019, *always* binds `this` to the global object for that [execution context](http://www.ecma-international.org/ecma-262/6.0/#sec-execution-contexts).\r\n\r\nThe CoffeeScript above simply compiles to `(function(){ return this })()`; so we&#39;re exercising that behavior to reliably access the global object."}, {"tags": [], "down_vote_count": 0, "creation_date": 1475496293, "answer_id": 39831175, "path": "stack.gulp.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1475496293, "body_markdown": "Since coffeescript is rarely used on it&#39;s own, you can use `global` variable supplied by either node.js or browserify (and any descendants like coffeeify, gulp build scripts, etc).\r\n\r\nIn node.js `global` is global namespace.\r\n\r\nIn browserify `global` is equal to `window`.\r\n\r\nSo, just:\r\n&lt;!-- language: lang-coffee --&gt;\r\n\r\n    somefunc = -&gt;\r\n      global.variable = 123\r\n\r\n\r\n"}], "title": "How do I define global variables in CoffeeScript?", "view_count": 115123, "answer_count": 8, "code_snippet": ["<code>bawbag = (x, y) -&gt;\n    z = (x * y)\n\nbawbag(5, 10) \n</code>", "<code>var bawbag;\nbawbag = function(x, y) {\n  var z;\n  return (z = (x * y));\n};\nbawbag(5, 10);\n</code>", "<code>(function() {\n  var bawbag;\n  bawbag = function(x, y) {\n    var z;\n    return (z = (x * y));\n  };\n  bawbag(5, 10);\n}).call(this);\n</code>", "<code>window</code>", "<code>exports</code>", "<code>window</code>", "<code>global</code>", "<code>var</code>", "<code>window.foo = 'baz';</code>", "<code>window</code>", "<code>window</code>", "<code>exports</code>", "<code>exports.foo = 'baz';</code>", "<code>var root;\nroot = (typeof exports !== \"undefined\" &amp;&amp; exports !== null) ? exports : this;\n</code>", "<code>exports</code>", "<code>typeof</code>", "<code>exports</code>", "<code>exports</code>", "<code>this</code>", "<code>this</code>", "<code>(function() {...}).call(this);\n</code>", "<code>.call</code>", "<code>this</code>", "<code>this</code>", "<code>window</code>", "<code>global</code>", "<code>require</code>", "<code>global</code>", "<code>exports</code>", "<code>require</code>", "<code>root = exports ? this\nroot.foo = -&gt; 'Hello World'\n</code>", "<code>foo</code>", "<code>global</code>", "<code>GLOBAL</code>", "<code>root</code>", "<code>ReferenceError</code>", "<code>(exports ? this).foo = -&gt; 'Hello World'</code>", "<code>global = exports ? this</code>", "<code>this</code>", "<code>global</code>", "<code>this</code>", "<code>@</code>", "<code>this.anything</code>", "<code>this</code>", "<code>@bawbag = (x, y) -&gt;\n    z = (x * y)\n\nbawbag(5, 10)\n</code>", "<code>this.bawbag = function(x, y) {\n  var z;\n  return z = x * y;\n};\nbawbag(5, 10);\n</code>", "<code>(function() {\n    this.bawbag = function(x, y) {\n      var z;\n      return z = x * y;\n    };\n    console.log(bawbag(5,13)) // works here\n}).call(this);\n\nconsole.log(bawbag(5,11)) // works here\n</code>", "<code>this</code>", "<code>window.myVariable</code>", "<code>=&gt;</code>", "<code>-&gt;</code>", "<code>`foo = 'bar'`\nfoo = 'something else'\n</code>", "<code>foo = 'bar';\nvar foo = 'something else';\n</code>", "<code>foo</code>", "<code>foo</code>", "<code>foo</code>", "<code>foo</code>", "<code>foo</code>", "<code>var</code>", "<code>var</code>", "<code>expect = require('chai').expect;</code>", "<code>expect</code>", "<code>-b</code>", "<code>--bare</code>", "<code>coffee</code>", "<code>exports ? this</code>", "<code>@</code>", "<code>&lt;script type=\"text/coffeescript\"&gt;\n    @aglobalfunction = aglobalfunction = () -&gt;\n         alert \"Hello!\"\n&lt;/script&gt;\n\n&lt;a href=\"javascript:aglobalfunction()\" &gt;Click me!&lt;/a&gt;\n</code>", "<code>-b</code>", "<code>--bare</code>", "<code>coffee -b --compile somefile.coffee whatever.js</code>", "<code>(-&gt;@)()</code>", "<code>(-&gt;@)().im_a_terrible_programmer = yes\nconsole.log im_a_terrible_programmer\n</code>", "<code>Reference</code>", "<code>Function</code>", "<code>func()</code>", "<code>new func()</code>", "<code>obj.func()</code>", "<code>this</code>", "<code>(function(){ return this })()</code>", "<code>global</code>", "<code>global</code>", "<code>global</code>", "<code>window</code>", "<code>somefunc = -&gt;\n  global.variable = 123\n</code>"], "path": "stack.browserify"}, {"tags": ["javascript", "node.js", "debugging", "google-chrome-devtools"], "creation_date": 1260917407, "body_markdown": "How do I debug a Node.js server application?\r\n\r\nRight now I&#39;m mostly using *alert debugging* with print statements like this:\r\n\r\n    sys.puts(sys.inspect(someVariable));\r\n\r\nThere must be a better way to debug. I know that [Google Chrome][1] has a command-line debugger. Is this debugger available for Node.js as well?\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Google_Chrome\r\n", "last_edit_date": 1450606743, "up_vote_count": 1335, "link": "https://stackoverflow.com/questions/1911015/how-do-i-debug-node-js-applications", "_childDocuments_": [{"tags": [], "down_vote_count": 4, "creation_date": 1269853026, "answer_id": 2536734, "path": "stack.gulp.answer", "score": 197, "up_vote_count": 201, "is_accepted": true, "last_activity_date": 1463570036, "last_edit_date": 1463570036, "body_markdown": "The [V8][1] debugger released as part of the Google [Chrome Developer Tools][2] can be used to debug Node.js scripts. A detailed explanation of how this works can be found in the [Node.js GitHub wiki][3].\r\n\r\n&lt;strike&gt;There is also [ndb][4], a command line debugger written in Node.js itself.&lt;/strike&gt;\r\n\r\n  [1]: http://en.wikipedia.org/wiki/V8_%28JavaScript_engine%29\r\n  [2]: http://code.google.com/p/chromedevtools/\r\n  [3]: https://github.com/nodejs/node/wiki/Using-Eclipse-as-Node-Applications-Debugger\r\n  [4]: http://github.com/smtlaissezfaire/ndb\r\n"}, {"tags": [], "down_vote_count": 11, "creation_date": 1287163022, "answer_id": 3944507, "path": "stack.gulp.answer", "score": 1152, "up_vote_count": 1163, "is_accepted": false, "last_activity_date": 1452698584, "last_edit_date": 1452698584, "body_markdown": "[node-inspector][1] could save the day! Use it from any browser supporting [WebSocket][2]. Breakpoints, profiler, livecoding, etc... It is really awesome.\r\n\r\nInstall it with:\r\n\r\n    npm install -g node-inspector\r\n\r\nThen run:\r\n\r\n    node-debug app.js\r\n\r\n  [1]: http://github.com/dannycoates/node-inspector\r\n  [2]: http://en.wikipedia.org/wiki/WebSocket\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1295140853, "answer_id": 4703227, "path": "stack.gulp.answer", "score": 81, "up_vote_count": 82, "is_accepted": false, "last_activity_date": 1356108963, "last_edit_date": 1356108963, "body_markdown": "Node.js version 0.3.4+ has built-in debugging support.\r\n\r\n`node debug script.js`\r\n\r\nManual: http://nodejs.org/api/debugger.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1299871793, "answer_id": 5277424, "path": "stack.gulp.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1483496706, "last_edit_date": 1483496706, "body_markdown": "There is built-in command line [debugger client][2] within Node.js. Cloud 9 IDE have also pretty nice (visual) [debugger][1].\r\n\r\n\r\n  [1]: https://nodejs.org/api/debugger.html\r\n  [2]: https://c9.io/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1331171212, "answer_id": 9611848, "path": "stack.gulp.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1407871781, "last_edit_date": 1407871781, "body_markdown": "If you need a powerful logging library for Node.js, [Tracer https://github.com/baryon/tracer](https://github.com/baryon/tracer) is a better choice.\r\n\r\nIt outputs log messages with a timestamp, file name, method name, line number, path or call stack, support color console, and support database, file, stream transport easily. I am the author.\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1336056133, "answer_id": 10433719, "path": "stack.gulp.answer", "score": 51, "up_vote_count": 53, "is_accepted": false, "last_activity_date": 1407875163, "last_edit_date": 1407875163, "body_markdown": "I personally use [JetBrains WebStorm](http://www.jetbrains.com/webstorm/) as it&#39;s the only JavaScript IDE that I&#39;ve found which is great for both frontend and backend JavaScript.\r\n\r\nIt works on multiple OS&#39;s and has Node.js debugging built-in (as well as a ton of other stuff](http://www.jetbrains.com/webstorm/features/index.html).\r\n\r\nMy only &#39;issues&#39;/wishlist items &lt;del&gt;are&lt;/del&gt; **were**:\r\n\r\n 1. &lt;del&gt;It seems to be more resource hungry on Mac than Windows&lt;/del&gt; It no longer seems an issue in version 6.\r\n 2. &lt;del&gt;It would be nice if it had Snippet support (like those of [Sublime Text 2](http://vimeo.com/41216114) - i.e. type &#39;fun&#39; and tap &#39;tab&#39; to put in a function.&lt;/del&gt; See @WickyNilliams comment below - With Live Templates you also have snippet support.\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1367198436, "answer_id": 16269962, "path": "stack.gulp.answer", "score": 5, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1407875294, "last_edit_date": 1407875294, "body_markdown": "Assuming you have node-inspector installed on your computer (if not, just type &#39;npm install -g node-inspector&#39;) you just have to run:\r\n\r\n    node-inspector &amp; node --debug-brk scriptFileName.js\r\n\r\nAnd paste the URI from the command line into a WebKit (Chrome / Safari) browser."}, {"tags": [], "down_vote_count": 6, "creation_date": 1368394653, "answer_id": 16512303, "path": "stack.gulp.answer", "score": 645, "up_vote_count": 651, "is_accepted": false, "last_activity_date": 1463177923, "last_edit_date": 1463177923, "body_markdown": "## Debugging\r\n\r\n- [Joyent&#39;s Guide](http://www.joyent.com/developers/node/debug)\r\n- [Debugger](https://nodejs.org/api/debugger.html)\r\n- [Node Inspector](https://github.com/node-inspector/node-inspector)\r\n- [Visual Studio Code](https://code.visualstudio.com/docs/runtimes/nodejs#_debugging-your-node-application)\r\n- [Cloud9](https://docs.c9.io/running_and_debugging_code.html)\r\n- [Brackets](https://github.com/adobe-research/theseus)\r\n\r\n\r\n## Profiling\r\n\r\n1. `node --prof ./app.js`\r\n2. `node --prof-process ./the-generated-log-file`\r\n\r\n\r\n## Heapdumps\r\n\r\n- [node-heapdump with Chrome Developer Tools](https://github.com/bnoordhuis/node-heapdump)\r\n\r\n\r\n## Flamegraphs\r\n\r\n- [0x](https://github.com/davidmarkclements/0x)\r\n- [jam3/devtool](https://github.com/jam3/devtool) then [Chrome Developer Tools Flame Charts](https://youtu.be/g0g4ML4nhPg)\r\n- [Dtrace](http://dtrace.org/) and [StackVis](https://github.com/joyent/node-stackvis) \u2014 [Only supported on SmartOS](http://blog.nodejs.org/2012/04/25/profiling-node-js/)\r\n\r\n\r\n## Tracing\r\n\r\n- [Interactive Stack Traces with TraceGL](https://github.com/traceglMPL/tracegl)\r\n\r\n\r\n## Logging\r\n\r\nLibraries that output debugging information\r\n\r\n- [Caterpillar](https://github.com/bevry/caterpillar)\r\n- [Tracer](https://github.com/baryon/tracer)\r\n\r\nLibraries that enhance stack trace information\r\n\r\n- [Longjohn](https://github.com/mattinsler/longjohn)\r\n\r\n\r\n## Benchmarking\r\n\r\n- [Apache Bench](http://httpd.apache.org/docs/2.2/programs/ab.html): `ab -n 100000 -c 1 http://127.0.0.1:9778/`\r\n- [wrk](https://github.com/wg/wrk)\r\n\r\n\r\n## Other\r\n\r\n- [Trace](https://trace.risingstack.com)\r\n- [Vantage](https://github.com/dthree/vantage)\r\n- [Bugger](https://github.com/buggerjs/bugger)\r\n- [Google Tracing Framework](http://google.github.io/tracing-framework)\r\n- [Paul Irish&#39;s Guide](https://github.com/paulirish/automated-chrome-profiling)\r\n\r\n\r\n## Legacy\r\n\r\nThese use to work but are no longer maintained or no longer applicable to modern node versions.\r\n\r\n- https://github.com/bnoordhuis/node-profiler - replaced by built-in debugging\r\n- https://github.com/c4milo/node-webkit-agent - replaced by node inspector\r\n- https://nodetime.com/ - defunct"}, {"tags": [], "down_vote_count": 1, "creation_date": 1368570082, "answer_id": 16553810, "path": "stack.gulp.answer", "score": 35, "up_vote_count": 36, "is_accepted": false, "last_activity_date": 1392768671, "last_edit_date": 1392768671, "body_markdown": "[Theseus](https://github.com/adobe-research/theseus) is a project by Adobe research which lets you debug your Node.js code in their Open Source editor [Brackets](https://github.com/adobe/brackets). It has some interesting features like real-time code coverage, retroactive inspection, asynchronous call tree.\r\n\r\n\r\n![screenshot][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/ZXwGD.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1385058677, "answer_id": 20129136, "path": "stack.gulp.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1385058677, "body_markdown": "I put together a short [Node.js debugging primer](http://www.habdas.org/node-js-debugging-primer/) on using the [node-inspector](https://github.com/node-inspector/node-inspector) for those who aren&#39;t sure where to get started."}, {"tags": [], "down_vote_count": 0, "creation_date": 1388640279, "answer_id": 20876848, "path": "stack.gulp.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1450607644, "last_edit_date": 1450607644, "body_markdown": "There is the new open-source [Nodeclipse][1] project (as a Eclipse plugin or [Enide Studio][2]):\r\n\r\n![](http://www.nodeclipse.org/img/Nodeclipse-1-debugging.png)\r\n\r\nNodeclipse became #1 in [Eclipse Top 10 NEW Plugins for 2013][3]. It uses a modified [V8][4] debugger (from Google Chrome Developer Tools for Java).\r\n\r\nNodeclipse is free open-source software [released at the start of every month][5].\r\n\r\n  [1]: http://www.nodeclipse.org/\r\n  [2]: http://sourceforge.net/projects/nodeclipse/files/\r\n  [3]: http://www.eclipse.org/community/eclipse_newsletter/2013/december/article2.php\r\n  [4]: http://en.wikipedia.org/wiki/V8_%28JavaScript_engine%29\r\n  [5]: http://www.nodeclipse.org/history\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1391563625, "answer_id": 21566954, "path": "stack.gulp.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1450607723, "last_edit_date": 1450607723, "body_markdown": "Just for completeness:\r\n\r\nThe [PyCharm 3.0 + Node.js Plugin offers an awesome development + run + debug experience][1].\r\n\r\n  [1]: http://www.jetbrains.com/pycharm/webhelp/running-and-debugging-node-js.html#d91029e423\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1394601029, "answer_id": 22342505, "path": "stack.gulp.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1450607768, "last_edit_date": 1450607768, "body_markdown": "I would use [GOOD][1] by Walmart Labs. It will do the job, and it&#39;s very flexible:\r\n\r\n    var hapi = require(&#39;hapi&#39;);\r\n    var good = require(&#39;good&#39;);\r\n    var server = hapi.createServer(&#39;localhost&#39;, 5000,{});\r\n    server.route({SOME ROUTE HERE});\r\n    server.start();\r\n\r\n    var options = {\r\n    subscribers: {\r\n        &#39;console&#39;:               [&#39;ops&#39;, &#39;request&#39;, &#39;log&#39;, &#39;error&#39;],\r\n        &#39;http://localhost/logs&#39;: [&#39;log&#39;]\r\n        }\r\n    };\r\n    server.pack.require(&#39;good&#39;, options, function (err) {\r\n\r\n        if (!err) {\r\n            console.log(&#39;Plugin loaded successfully&#39;);\r\n        }\r\n    });\r\n\r\n  [1]: https://github.com/spumko/good\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1399033811, "answer_id": 23428240, "path": "stack.gulp.answer", "score": 21, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1407875633, "last_edit_date": 1407875633, "body_markdown": "[Node.js Tools for Visual Studio][1] 2012 or 2013 includes a debugger.  The overview [here][2] states &quot;Node.js Tools for Visual Studio includes complete support for debugging node apps.&quot;. Being new to Node.js, but having a background in .NET, I&#39;ve found this add in to be a great way to debug Node.js applications. \r\n\r\n  [1]: https://nodejstools.codeplex.com/\r\n  [2]: http://www.hanselman.com/blog/IntroducingNodejsToolsForVisualStudio.aspx\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1399478007, "answer_id": 23522589, "path": "stack.gulp.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1399478007, "body_markdown": "    node-debug -p 8888 scriptFileName.js\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1418138561, "answer_id": 27382532, "path": "stack.gulp.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1422233472, "last_edit_date": 1422233472, "body_markdown": "I created a neat little tool called [pry.js](https://github.com/blainesch/pry.js) that can help you out.\r\n\r\nPut a simple statement somewhere in your code, run your script normally and node will halt the current thread giving you access to all your variables and functions. View/edit/delete them at will!\r\n\r\n    pry = require(&#39;pryjs&#39;)\r\n\r\n    class FizzBuzz\r\n\r\n      run: -&gt;\r\n        for i in [1..100]\r\n          output = &#39;&#39;\r\n          eval(pry.it) # magic\r\n          output += &quot;Fizz&quot; if i % 3 is 0\r\n          output += &quot;Buzz&quot; if i % 5 is 0\r\n          console.log output || i\r\n\r\n      bar: -&gt;\r\n        10\r\n\r\n    fizz = new FizzBuzz()\r\n    fizz.run()"}, {"tags": [], "down_vote_count": 1, "creation_date": 1427688275, "answer_id": 29338226, "path": "stack.gulp.answer", "score": 12, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1450607831, "last_edit_date": 1450607831, "body_markdown": "If you are using the [Atom IDE][1], you can install the `node-debugger` package.\r\n\r\n  [1]: https://atom.io/packages/node-debugger\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1431627639, "answer_id": 30244550, "path": "stack.gulp.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1450607963, "last_edit_date": 1450607963, "body_markdown": "A quick-and-dirty way to debug small Node.js scripts with your favorite **browser debugger** would be to use **browserify**. Note that this approach doesn&#39;t work with any applications which require native I/O libraries, but it is good enough for most small scripts.\r\n\r\n    $ npm install -g browserify\r\n\r\nNow move all your ```var x = requires(&#39;x&#39;)``` calls into a ```requires.js``` file and run:\r\n\r\n    $ browserify requires.js -s window -o bundle.js\r\n\r\n(The downside here is that you either have to move or comment the `requires` in all your files.)\r\n\r\nInclude the ```bundle.js``` in an HTML file like so:\r\n\r\n    &lt;script type=&quot;text/javascript&quot; src=&quot;bundle.js&quot;&gt;&lt;/script&gt;\r\n\r\nNow load the file in your browser and press &lt;kbd&gt;F12&lt;/kbd&gt; and viola: debug in browser.\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1437318604, "answer_id": 31502652, "path": "stack.gulp.answer", "score": 19, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1454336196, "last_edit_date": 1486566285, "body_markdown": "I wrote a different approach to debug Node.js code which is stable and is extremely simple. It is available at https://github.com/s-a/iron-node.\r\n\r\n![Enter image description here][1]\r\n\r\nAn opensource cross-platform visual debugger.\r\n\r\nInstallation:\r\n\r\n```npm install iron-node -g;```\r\n\r\nDebug:\r\n\r\n```iron-node yourscript.js;```\r\n\r\n  [1]: https://s-a.github.io/iron-node/iron-node-demo.gif\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1438745682, "answer_id": 31823021, "path": "stack.gulp.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1438745682, "body_markdown": "[IntelliJ][1] works wonderfully for Node.js.\r\n\r\nIn addition, IntelliJ supports &#39;Code Assistance&#39; well.\r\n\r\n\r\n  [1]: https://www.jetbrains.com/idea/features/nodejs.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1441757302, "answer_id": 32469033, "path": "stack.gulp.answer", "score": 19, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1450608117, "last_edit_date": 1450608117, "body_markdown": "[Visual Studio Code][1] has really nice Node.js debugging support. It is free, open source and cross-platform and runs on Linux, OS&amp;nbsp;X and Windows.\r\n\r\nYou can even debug [grunt and gulp tasks][2], should you need to...\r\n\r\n  [1]: https://code.visualstudio.com/\r\n  [2]: https://hansrwindhoff.wordpress.com/debugging-task-runner-tasks-like-gulp-with-visual-studio-code-editordebugger/\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1442331202, "answer_id": 32590087, "path": "stack.gulp.answer", "score": 29, "up_vote_count": 30, "is_accepted": false, "last_activity_date": 1496917685, "last_edit_date": 1496917685, "body_markdown": "A lot of great answers here, but I&#39;d like to add my view (based on how my approach evolved)\r\n\r\n## Debug Logs\r\n\r\nLet&#39;s face it, we all love a good `console.log(&#39;Uh oh, if you reached here, you better run.&#39;)` and sometimes that works great, so if you&#39;re reticent to move too far away from it at least add some bling to your logs with [Visionmedia&#39;s debug][1]. \r\n\r\n## Interactive Debugging\r\n\r\nAs handy as console logging can be, to debug professionally you need to roll up your sleeves and get stuck in. Set breakpoints, step through your code, inspect scopes and variables to see what&#39;s causing that weird behaviour. As others have mentioned, [node-inspector][3] really is the bees-knees. It does everything you can do with the built-in debugger, but using that familiar Chrome DevTools interface.\r\nIf, like me, you use **Webstorm**, then [here][4] is a handy guide to debugging from there.\r\n\r\n## Stack Traces\r\n\r\nBy default, we can&#39;t trace a series of operations across different cycles of the event loop (ticks). To get around this have a look at [longjohn][5] (but not in production!).\r\n\r\n## Memory Leaks\r\n\r\nWith Node.js we can have a server process expected to stay up for considerable time. What do you do if you think it has sprung some nasty leaks? Use [heapdump][6] and Chrome DevTools to compare some snapshots and see what&#39;s changing.\r\n\r\n\r\n----------\r\n\r\n\r\nFor some useful articles, check out\r\n\r\n* [RisingStack - Debugging Node.js Applications](https://blog.risingstack.com/node-hero-node-js-debugging-tutorial/)\r\n* [Excellent article by David Mark Clements of nearForm](http://www.nearform.com/nodecrunch/working-node-need-know/#more-3125)\r\n\r\nIf you feel like watching a video(s) then\r\n\r\n* [Netflix JS Talks - Debugging Node.js in Production](https://www.youtube.com/watch?v=O1YP8QP9gLA)\r\n* [Interesting video](https://www.youtube.com/watch?v=xaKU6VRmdag) from [the tracing working group](https://nodejs.org/en/about/working-groups/#tracing) on tracing and debugging node.js\r\n* [Really informative 15-minute video on node-inspector](https://www.youtube.com/watch?v=03qGA-GJXjI)\r\n\r\n\r\nWhatever path you choose, just be sure you understand how you are debugging\r\n\r\n[![enter image description here][7]][7]\r\n\r\n&gt; It is a painful thing  \r\n&gt; To look at your own trouble and know  \r\n&gt; That you yourself and no one else has made it  \r\n&gt;   \r\n&gt;  *Sophocles, Ajax*\r\n\r\n\r\n  [1]: https://www.npmjs.com/package/debug\r\n  [2]: https://en.wikipedia.org/wiki/Microservices\r\n  [3]: https://www.npmjs.com/package/node-inspector\r\n  [4]: https://www.jetbrains.com/webstorm/help/running-and-debugging-node-js.html#d186741e208\r\n  [5]: https://www.npmjs.com/package/longjohn\r\n  [6]: https://www.npmjs.com/package/heapdump\r\n  [7]: http://i.stack.imgur.com/hBTOr.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1448353597, "answer_id": 33888671, "path": "stack.gulp.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1450608426, "last_edit_date": 1450608426, "body_markdown": "The [NetBeans][1] IDE has had Node.js support since [version 8.1][2]:\r\n\r\n&gt; &lt;...&gt;\r\n&gt;\r\n&gt; # New Feature Highlights\r\n&gt;\r\n&gt; ## Node.js Application Development\r\n&gt; * New Node.js project wizard\r\n&gt; * New Node.js Express wizard\r\n&gt; * Enhanced JavaScript Editor\r\n&gt; * New support for running Node.js applications\r\n&gt; * New support for debugging Node.js applications.\r\n&gt;\r\n&gt; &lt;...&gt;\r\n\r\nAdditional references:\r\n\r\n1. [NetBeans Wiki / NewAndNoteworthyNB81][3].\r\n2. [Node.js Express App in NetBeans IDE, Geertjan-Oracle][4].\r\n\r\n  [1]: http://en.wikipedia.org/wiki/NetBeans\r\n  [2]: https://netbeans.org/community/releases/81/\r\n  [3]: http://wiki.netbeans.org/NewAndNoteworthyNB81\r\n  [4]: https://blogs.oracle.com/geertjan/entry/express_js_in_netbeans_ide\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1455877300, "answer_id": 35502852, "path": "stack.gulp.answer", "score": 45, "up_vote_count": 45, "is_accepted": false, "last_activity_date": 1474815820, "last_edit_date": 1474815820, "body_markdown": "***[Visual Studio Code][1]*** will be my choice for debugging. No overhead of installing any tools or `npm install` stuff.\r\nJust set the starting point of your app in package.json and VSCode will automatically create a configuration file inside your solution. It&#39;s build on [Electron][2], on which editors like Atom are built.\r\n\r\n&gt; VS Code gives similar debugging experience as you might have\r\n&gt; had in other IDEs like VS, Eclipse, etc.\r\n\r\n[![enter image description here][3]][3]\r\n[![enter image description here][4]][4]\r\n\r\n\r\n  [1]: https://code.visualstudio.com/\r\n  [2]: http://electron.atom.io/\r\n  [3]: http://i.stack.imgur.com/gxSUW.png\r\n  [4]: http://i.stack.imgur.com/f0lks.gif"}, {"tags": [], "down_vote_count": 0, "creation_date": 1469474023, "answer_id": 38575730, "path": "stack.gulp.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1469474023, "body_markdown": "Use Webstorm! It&#39;s perfect for debugging Node.js applications. It has a built-in debugger. Check out the docs here: https://www.jetbrains.com/help/webstorm/2016.1/running-and-debugging-node-js.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1473864694, "answer_id": 39493551, "path": "stack.gulp.answer", "score": 140, "up_vote_count": 140, "is_accepted": false, "last_activity_date": 1493027209, "last_edit_date": 1493027209, "body_markdown": "# Node has its own [built in][1] GUI debugger as of version 6.3 (using Chrome&#39;s DevTools)\r\n[![Nodes builtin GUI debugger][3]][3]\r\n\r\nSimply pass the inspector flag and you&#39;ll be provided with a URL to the inspector:\r\n\r\n    node --inspect server.js\r\n\r\nYou can also break on the first line by passing `--inspect-brk` instead.\r\n\r\n\r\nTo open a Chrome window automatically, use the [inspect-process][4] module.\r\n\r\n    # install inspect-process globally\r\n    npm install -g inspect-process\r\n    \r\n    # start the debugger with inspect\r\n    inspect script.js\r\n\r\n\r\n  [1]: https://nodejs.org/api/debugger.html#debugger_v8_inspector_integration_for_node_js\r\n  [3]: http://i.stack.imgur.com/eZAzW.png\r\n  [4]: https://github.com/jaridmargolin/inspect-process\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1484979209, "answer_id": 41776292, "path": "stack.gulp.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1485008353, "last_edit_date": 1485008353, "body_markdown": "There are many possibilities...\r\n\r\n- [node][1] includes a [debugging utility][1]\r\n- [node-inspector][2]\r\n- Code editors / IDEs (see debug instructions for one of the following)\r\n   - [Atom][3], \r\n   - [VSCode][4]\r\n   - [Webstorm][5]\r\n   - and more\r\n\r\nDebug support is often implemented using the [v8 Debugging Protocol][6] or the newer [Chrome Debugging Protocol][7].\r\n\r\n\r\n  [1]: https://nodejs.org/api/debugger.html\r\n  [2]: https://github.com/node-inspector/node-inspector\r\n  [3]: https://atom.io/packages/node-debugger\r\n  [4]: https://code.visualstudio.com/Docs/editor/debugging\r\n  [5]: https://www.jetbrains.com/help/webstorm/2016.3/running-and-debugging-node-js.html\r\n  [6]: https://github.com/v8/v8/wiki/Debugging-Protocol\r\n  [7]: https://developer.chrome.com/devtools/docs/debugger-protocol"}, {"tags": [], "down_vote_count": 0, "creation_date": 1508061740, "answer_id": 46753808, "path": "stack.gulp.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1508061740, "body_markdown": "[Visual Studio Code][1] will work for us in debugging.\r\n\r\n\r\n  [1]: https://code.visualstudio.com/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1518203132, "answer_id": 48712507, "path": "stack.gulp.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1518203132, "body_markdown": "\r\nStart your node process with **--inspect** flag.\r\n\r\n`node --inspect index.js`\r\n\r\nand then Open `chrome://inspect` in chrome. Click the &quot;Open dedicated DevTools for Node&quot; link or install [this][1] chrome extension for easily opening chrome DevTools.\r\n\r\nFor more info refer to [this][2] link\r\n\r\n\r\n  [1]: https://chrome.google.com/webstore/detail/nim-node-inspector-manage/gnhhdgbaldcilmgcpfddgdbkhjohddkj\r\n[2]: https://nodejs.org/en/docs/inspector/"}], "title": "How do I debug Node.js applications?", "view_count": 457804, "answer_count": 29, "code_snippet": ["<code>sys.puts(sys.inspect(someVariable));\n</code>", "<code>npm install -g node-inspector\n</code>", "<code>node-debug app.js\n</code>", "<code>node --prof ./app.js</code>", "<code>node --prof-process ./the-generated-log-file</code>", "<code>ab -n 100000 -c 1 http://127.0.0.1:9778/</code>", "<code>look</code>", "<code>https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27#.fitvuaumt</code>", "<code>node --inspect server.js\n</code>", "<code>--inspect-brk</code>", "<code># install inspect-process globally\nnpm install -g inspect-process\n\n# start the debugger with inspect\ninspect script.js\n</code>", "<code>nodemon</code>", "<code>nodemon --inspect</code>", "<code>node debug script.js</code>", "<code>--debug</code>", "<code>debug</code>", "<code>--debug</code>", "<code>debug</code>", "<code>npm install</code>", "<code>console.log('Uh oh, if you reached here, you better run.')</code>", "<code>npm install iron-node -g;</code>", "<code>iron-node yourscript.js;</code>", "<code>node-debugger</code>", "<code>pry = require('pryjs')\n\nclass FizzBuzz\n\n  run: -&gt;\n    for i in [1..100]\n      output = ''\n      eval(pry.it) # magic\n      output += \"Fizz\" if i % 3 is 0\n      output += \"Buzz\" if i % 5 is 0\n      console.log output || i\n\n  bar: -&gt;\n    10\n\nfizz = new FizzBuzz()\nfizz.run()\n</code>", "<code>node-inspector &amp; node --debug-brk scriptFileName.js\n</code>", "<code>node --inspect index.js</code>", "<code>chrome://inspect</code>", "<code>$ npm install -g browserify\n</code>", "<code>var x = requires('x')</code>", "<code>requires.js</code>", "<code>$ browserify requires.js -s window -o bundle.js\n</code>", "<code>requires</code>", "<code>bundle.js</code>", "<code>&lt;script type=\"text/javascript\" src=\"bundle.js\"&gt;&lt;/script&gt;\n</code>", "<code>node-debug -p 8888 scriptFileName.js\n</code>", "<code>var hapi = require('hapi');\nvar good = require('good');\nvar server = hapi.createServer('localhost', 5000,{});\nserver.route({SOME ROUTE HERE});\nserver.start();\n\nvar options = {\nsubscribers: {\n    'console':               ['ops', 'request', 'log', 'error'],\n    'http://localhost/logs': ['log']\n    }\n};\nserver.pack.require('good', options, function (err) {\n\n    if (!err) {\n        console.log('Plugin loaded successfully');\n    }\n});\n</code>"], "path": "stack.browserify"}, {"tags": ["javascript", "node.js", "build"], "creation_date": 1434771767, "body_markdown": "In my `package.json` I have these two scripts:\r\n\r\n      &quot;scripts&quot;: {\r\n        &quot;start-watch&quot;: &quot;nodemon run-babel index.js&quot;,\r\n        &quot;wp-server&quot;: &quot;webpack-dev-server&quot;,\r\n      }\r\n\r\nI have to run these 2 scripts **in parallel** everytime I start developing in Node.js. The first thing I thought of was adding a third script like this:\r\n\r\n    \r\n    &quot;dev&quot;: &quot;npm run start-watch &amp;&amp; npm run wp-server&quot;\r\n\r\n... but that will wait for `start-watch` to finish before running `wp-server`.\r\n\r\n**How can I run these in parallel?** Please keep in mind that I need to see the `output` of these commands. Also, if your solution involves a build tool, I&#39;d rather use `gulp` instead of `grunt` because I already use it in another project.\r\n", "last_edit_date": 1511816375, "up_vote_count": 230, "link": "https://stackoverflow.com/questions/30950032/how-can-i-run-multiple-npm-scripts-in-parallel", "_childDocuments_": [{"tags": [], "down_vote_count": 4, "creation_date": 1434775052, "answer_id": 30950298, "path": "stack.gulp.answer", "score": 265, "up_vote_count": 269, "is_accepted": true, "last_activity_date": 1476289897, "last_edit_date": 1476289897, "body_markdown": "Use a package called [concurrently][1].\r\n\r\n`npm i concurrently --save-dev`\r\n\r\nThen setup your `npm run dev` task as so:\r\n\r\n    &quot;dev&quot;: &quot;concurrently --kill-others \\&quot;npm run start-watch\\&quot; \\&quot;npm run wp-server\\&quot;&quot;\r\n\r\n\r\n  [1]: http://npmjs.org/package/concurrently"}, {"tags": [], "down_vote_count": 14, "creation_date": 1442080165, "answer_id": 32541895, "path": "stack.gulp.answer", "score": 174, "up_vote_count": 188, "is_accepted": false, "last_activity_date": 1483029053, "last_edit_date": 1483029053, "body_markdown": "Using the Concurrently package works, but you do not need it to accomplish this. You can just use a pipe on UNIX based machines run concurrent tasks. I would suggest this method over the other because it saves you from having to add an additional dependency.\r\n\r\n    &quot;dev&quot;: &quot;npm run start-watch | npm run wp-server&quot;\r\n"}, {"tags": [], "down_vote_count": 9, "creation_date": 1446067276, "answer_id": 33401809, "path": "stack.gulp.answer", "score": 11, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1446067276, "body_markdown": "A better solution is to use `&amp;`\r\n\r\n    &quot;dev&quot;: &quot;npm run start-watch &amp; npm run wp-server&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1446965014, "answer_id": 33591451, "path": "stack.gulp.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1452141425, "last_edit_date": 1452141425, "body_markdown": "### Quick Solution\r\n&lt;strike&gt;In this case, I&#39;d say the best bet&lt;/strike&gt; &lt;strong&gt;If this script is for a private module intended to run only on *nix-based machines&lt;/strong&gt;, you can use the control operator for forking processes, which looks like this: `&amp;`\r\n\r\nAn example of doing this in a partial package.json file:\r\n\r\n\r\n    {\r\n      &quot;name&quot;: &quot;npm-scripts-forking-example&quot;,\r\n      &quot;scripts&quot;: {\r\n        &quot;bundle&quot;: &quot;watchify -vd -p browserify-hmr index.js -o bundle.js&quot;,\r\n        &quot;serve&quot;:  &quot;http-server -c 1 -a localhost&quot;,\r\n        &quot;serve-bundle&quot;: &quot;npm run bundle &amp; npm run serve &amp;&quot;\r\n      }\r\n\r\nYou&#39;d then execute them both in parallel via `npm run serve-bundle`. You can enhance the scripts to output the pids of the forked process to a file like so:\r\n\r\n    &quot;serve-bundle&quot;: &quot;npm run bundle &amp; echo \\&quot;$!\\&quot; &gt; build/bundle.pid &amp;&amp; npm run serve &amp; echo \\&quot;$!\\&quot; &gt; build/serve.pid &amp;&amp; npm run open-browser&quot;,\r\n\r\n\r\nGoogle something like *bash control operator for forking* to learn more on how it works. I&#39;ve also provided some further context regarding leveraging Unix techniques in Node projects below:\r\n\r\n### Further Context RE: Unix Tools &amp; Node.js\r\nIf you&#39;re not on Windows, Unix tools/techniques often work well to achieve something with Node scripts because: \r\n\r\n1. Much of Node.js lovingly imitates Unix principles\r\n2. You&#39;re on *nix (incl. OS X) and NPM is using a shell anyway\r\n\r\nModules for system tasks in Nodeland are also often abstractions or approximations of Unix tools, from `fs` to `streams`."}, {"tags": [], "down_vote_count": 3, "creation_date": 1455708796, "answer_id": 35455532, "path": "stack.gulp.answer", "score": 57, "up_vote_count": 60, "is_accepted": false, "last_activity_date": 1455709245, "last_edit_date": 1455709245, "body_markdown": "If you&#39;re using an UNIX-like environment, just use `&amp;` as the separator: \r\n\r\n    &quot;dev&quot;: &quot;npm run start-watch &amp; npm run wp-server&quot;\r\n\r\nOtherwise if you&#39;re interested on a cross-platform solution, you could use [npm-run-all](https://github.com/mysticatea/npm-run-all)  module:\r\n\r\n    &quot;dev&quot;: &quot;npm-run-all --parallel start-watch wp-server&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1455727760, "answer_id": 35462795, "path": "stack.gulp.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1455727760, "body_markdown": "I ran into problems with `&amp;` and `|`, which exit statuses and error throwing, respectively.\r\n\r\nOther solutions want to run any task with a given name, like npm-run-all, which wasn&#39;t my use case.\r\n\r\nSo I created [npm-run-parallel](https://github.com/ianmcnally/npm-run-parallel) that runs npm scripts asynchronously and reports back when they&#39;re done.\r\n\r\nSo, for your scripts, it&#39;d be:\r\n\r\n`npm-run-parallel wp-server start-watch`"}, {"tags": [], "down_vote_count": 2, "creation_date": 1459225157, "answer_id": 36275359, "path": "stack.gulp.answer", "score": 35, "up_vote_count": 37, "is_accepted": false, "last_activity_date": 1459568461, "last_edit_date": 1459568461, "body_markdown": "From windows cmd you can use [`start`][1]:\r\n\r\n    &quot;dev&quot;: &quot;start npm run start-watch &amp;&amp; start npm run wp-server&quot;\r\n\r\nEvery command launched this way starts in its own window.\r\n\r\n\r\n  [1]: http://ss64.com/nt/start.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1467754730, "answer_id": 38213212, "path": "stack.gulp.answer", "score": 21, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1467754730, "body_markdown": "You should use [npm-run-all][1] (or `concurrently`, `parallelshell`), because it has more control over starting and killing commands. The operators `&amp;`, `| are bad ideas because you&#39;ll need to manually stop it after all tests are finished.\r\n\r\nThis is an example for protractor testing through npm:\r\n\r\n    scripts: {\r\n      &quot;webdriver-start&quot;: &quot;./node_modules/protractor/bin/webdriver-manager update &amp;&amp; ./node_modules/protractor/bin/webdriver-manager start&quot;,\r\n      &quot;protractor&quot;: &quot;./node_modules/protractor/bin/protractor ./tests/protractor.conf.js&quot;,\r\n      &quot;http-server&quot;: &quot;./node_modules/http-server/bin/http-server -a localhost -p 8000&quot;,\r\n      &quot;test&quot;: &quot;npm-run-all -p -r webdriver-start http-server protractor&quot;\r\n    }\r\n\r\n-p = Run commands in parallel.\r\n\r\n-r = Kill all commands when one of them finishes with zero.\r\n\r\nRunning `npm run test` will start Selenium driver, start http server (to serve you files) and run protractor tests. Once all tests are finished, it will close the http server and the selenium driver.\r\n\r\n\r\n  [1]: https://github.com/mysticatea/npm-run-all"}, {"tags": [], "down_vote_count": 3, "creation_date": 1486560609, "answer_id": 42114486, "path": "stack.gulp.answer", "score": 4, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1486560609, "body_markdown": "If you replace the double ampersand with a single ampersand, the scripts will run concurrently. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1494504477, "answer_id": 43914979, "path": "stack.gulp.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1496987415, "last_edit_date": 1496987415, "body_markdown": "I&#39;ve checked almost all solutions from above and only with [npm-run-all][1] I was able to solve all problems. Main advantage over all other solution is an ability to [run script with arguments][2].\r\n\r\n    {\r\n      &quot;test:static-server&quot;: &quot;cross-env NODE_ENV=test node server/testsServer.js&quot;,\r\n      &quot;test:jest&quot;: &quot;cross-env NODE_ENV=test jest&quot;,\r\n      &quot;test&quot;: &quot;run-p test:static-server \\&quot;test:jest -- {*}\\&quot; --&quot;,\r\n      &quot;test:coverage&quot;: &quot;npm run test -- --coverage&quot;,\r\n      &quot;test:watch&quot;: &quot;npm run test -- --watchAll&quot;,\r\n    }\r\n\r\n&gt; Note `run-p` is shortcut for `npm-run-all --paraller`\r\n\r\nThis allows me to run command with arguments like `npm run test:watch -- Something`.\r\n\r\n**EDIT:**\r\n\r\nThere is one more useful [option][3] for `npm-run-all`:\r\n\r\n     -r, --race   - - - - - - - Set the flag to kill all tasks when a task\r\n                                finished with zero. This option is valid only\r\n                                with &#39;parallel&#39; option.\r\n\r\nAdd `-r` to your `npm-run-all` script to kill all processes when one finished with code `0`. This is especially useful when you run a HTTP server and another script that use the server.\r\n\r\n      &quot;test&quot;: &quot;run-p -r test:static-server \\&quot;test:jest -- {*}\\&quot; --&quot;,\r\n\r\n\r\n  [1]: https://www.npmjs.com/package/npm-run-all\r\n  [2]: https://github.com/mysticatea/npm-run-all/blob/master/docs/npm-run-all.md#run-with-arguments\r\n  [3]: https://github.com/mysticatea/npm-run-all/blob/master/docs/npm-run-all.md"}, {"tags": [], "down_vote_count": 0, "creation_date": 1506077966, "answer_id": 46363159, "path": "stack.gulp.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1506077966, "body_markdown": "I have a crossplatform solution without any additional modules. I was looking for something like a try catch block I could use both in the cmd.exe and in the bash. \r\n\r\nThe solution is `command1 || command2` which seems to work in both enviroments same. So the solution for the OP is:\r\n\r\n\r\n    &quot;scripts&quot;: {\r\n      &quot;start-watch&quot;: &quot;nodemon run-babel index.js&quot;,\r\n      &quot;wp-server&quot;: &quot;webpack-dev-server&quot;,\r\n      // first command is for the cmd.exe, second one is for the bash\r\n      &quot;dev&quot;: &quot;(start npm run start-watch &amp;&amp; start npm run wp-server) || (npm run start-watch &amp; npm run wp-server)&quot;,\r\n      &quot;start&quot;: &quot;npm run dev&quot;\r\n    }\r\n\r\nThen simple `npm start` (and `npm run dev`) will work on all platforms!"}, {"tags": [], "down_vote_count": 1, "creation_date": 1511796324, "answer_id": 47514397, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1513604559, "last_edit_date": 1513604559, "body_markdown": "    npm-run-all --parallel task1 task2\r\n\r\nedit:\r\n\r\nYou need to have [npm-run-all][1] installed beforehand. Also check [this page][2] for other usage scenarios.\r\n\r\n\r\n  [1]: https://www.npmjs.com/package/npm-run-all\r\n  [2]: https://github.com/mysticatea/npm-run-all/blob/master/docs/npm-run-all.md"}, {"tags": [], "down_vote_count": 0, "creation_date": 1514812872, "answer_id": 48050020, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1514812872, "body_markdown": "#How about forking\r\n\r\nAnother option to run multiple Node scripts is with a single Node script, which can **[fork](https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options)** many others. Forking is supported natively in Node, so it adds no dependencies and is cross-platform.\r\n\r\n---\r\n###Minimal example\r\n\r\nThis would just run the scripts as-is and assume they&#39;re located in the parent script&#39;s directory.\r\n\r\n    // fork-minimal.js - run with: node fork-minimal.js\r\n\r\n    const childProcess = require(&#39;child_process&#39;);\r\n\r\n    let scripts = [&#39;some-script.js&#39;, &#39;some-other-script.js&#39;];\r\n    scripts.forEach(script =&gt; childProcess.fork(script));\r\n\r\n---\r\n###Verbose example\r\n\r\nThis would run the scripts with arguments and configured by the many available options.\r\n\r\n    // fork-verbose.js - run with: node fork-verbose.js\r\n\r\n    const childProcess = require(&#39;child_process&#39;);\r\n\r\n    let scripts = [\r\n        {\r\n            path: &#39;some-script.js&#39;,\r\n            args: [&#39;-some_arg&#39;, &#39;/some_other_arg&#39;],\r\n            options: {cwd: &#39;./&#39;, env: {NODE_ENV: &#39;development&#39;}}\r\n        },    \r\n        {\r\n            path: &#39;some-other-script.js&#39;,\r\n            args: [&#39;-another_arg&#39;, &#39;/yet_other_arg&#39;],\r\n            options: {cwd: &#39;/some/where/else&#39;, env: {NODE_ENV: &#39;development&#39;}}\r\n        }\r\n    ];\r\n\r\n    let processes = [];\r\n\r\n    scripts.forEach(script =&gt; {\r\n        let runningScript = childProcess.fork(script.path, script.args, script.options);\r\n\r\n       // Optionally attach event listeners to the script\r\n       runningScript.on(&#39;close&#39;, () =&gt; console.log(&#39;Time to die...&#39;))\r\n\r\n        runningScripts.push(runningScript); // Keep a reference to the script for later use\r\n    });\r\n\r\n---\r\n\r\n###Communicating with forked scripts\r\n\r\nForking also has the added benefit that the parent script can receive events from the forked child processes as well as send back. A common example is for the parent script to kill its forked children.\r\n\r\n     runningScripts.forEach(runningScript =&gt; runningScript.kill());\r\n\r\nFor more available events and methods see the [`ChildProcess` documentation](https://nodejs.org/api/child_process.html#child_process_class_childprocess)"}], "title": "How can I run multiple npm scripts in parallel?", "view_count": 123415, "answer_count": 13, "code_snippet": ["<code>package.json</code>", "<code>  \"scripts\": {\n    \"start-watch\": \"nodemon run-babel index.js\",\n    \"wp-server\": \"webpack-dev-server\",\n  }\n</code>", "<code>\"dev\": \"npm run start-watch &amp;&amp; npm run wp-server\"\n</code>", "<code>start-watch</code>", "<code>wp-server</code>", "<code>output</code>", "<code>gulp</code>", "<code>grunt</code>", "<code>npm i concurrently --save-dev</code>", "<code>npm run dev</code>", "<code>\"dev\": \"concurrently --kill-others \\\"npm run start-watch\\\" \\\"npm run wp-server\\\"\"\n</code>", "<code>node ./node_modules/concurrently/src/main.js</code>", "<code>concurrent</code>", "<code>./node_modules/.bin/concurrent</code>", "<code>concurrently</code>", "<code>parallelshell</code>", "<code>--raw</code>", "<code>--kill-others</code>", "<code>--love-others</code>", "<code>\"dev\": \"npm run start-watch | npm run wp-server\"\n</code>", "<code>npm scripts</code>", "<code>&amp;</code>", "<code>&amp;</code>", "<code>\"dev-nix\"</code>", "<code>\"dev-win\"</code>", "<code>&amp;</code>", "<code>\"dev\": \"npm run start-watch &amp; npm run wp-server\"\n</code>", "<code>\"dev\": \"npm-run-all --parallel start-watch wp-server\"\n</code>", "<code>&amp;&amp;</code>", "<code>&amp;</code>", "<code>|</code>", "<code>a &amp;&amp; b</code>", "<code>b</code>", "<code>a</code>", "<code>a &amp; b</code>", "<code>a</code>", "<code>b</code>", "<code>a | b</code>", "<code>a</code>", "<code>b</code>", "<code>&amp;</code>", "<code>npm</code>", "<code>npm run start-watch</code>", "<code>ctrl-c</code>", "<code>wait</code>", "<code>\"dev\": \"npm run start-watch &amp; npm run wp-server &amp; wait\"</code>", "<code>start</code>", "<code>\"dev\": \"start npm run start-watch &amp;&amp; start npm run wp-server\"\n</code>", "<code>&amp;&amp;</code>", "<code>concurrently</code>", "<code>parallelshell</code>", "<code>&amp;</code>", "<code>scripts: {\n  \"webdriver-start\": \"./node_modules/protractor/bin/webdriver-manager update &amp;&amp; ./node_modules/protractor/bin/webdriver-manager start\",\n  \"protractor\": \"./node_modules/protractor/bin/protractor ./tests/protractor.conf.js\",\n  \"http-server\": \"./node_modules/http-server/bin/http-server -a localhost -p 8000\",\n  \"test\": \"npm-run-all -p -r webdriver-start http-server protractor\"\n}\n</code>", "<code>npm run test</code>", "<code>gulp</code>", "<code>gulp-sync</code>", "<code>&amp;</code>", "<code>\"dev\": \"npm run start-watch &amp; npm run wp-server\"\n</code>", "<code>&amp;</code>", "<code>{\n  \"test:static-server\": \"cross-env NODE_ENV=test node server/testsServer.js\",\n  \"test:jest\": \"cross-env NODE_ENV=test jest\",\n  \"test\": \"run-p test:static-server \\\"test:jest -- {*}\\\" --\",\n  \"test:coverage\": \"npm run test -- --coverage\",\n  \"test:watch\": \"npm run test -- --watchAll\",\n}\n</code>", "<code>run-p</code>", "<code>npm-run-all --paraller</code>", "<code>npm run test:watch -- Something</code>", "<code>npm-run-all</code>", "<code> -r, --race   - - - - - - - Set the flag to kill all tasks when a task\n                            finished with zero. This option is valid only\n                            with 'parallel' option.\n</code>", "<code>-r</code>", "<code>npm-run-all</code>", "<code>0</code>", "<code>  \"test\": \"run-p -r test:static-server \\\"test:jest -- {*}\\\" --\",\n</code>", "<code>&amp;</code>", "<code>{\n  \"name\": \"npm-scripts-forking-example\",\n  \"scripts\": {\n    \"bundle\": \"watchify -vd -p browserify-hmr index.js -o bundle.js\",\n    \"serve\":  \"http-server -c 1 -a localhost\",\n    \"serve-bundle\": \"npm run bundle &amp; npm run serve &amp;\"\n  }\n</code>", "<code>npm run serve-bundle</code>", "<code>\"serve-bundle\": \"npm run bundle &amp; echo \\\"$!\\\" &gt; build/bundle.pid &amp;&amp; npm run serve &amp; echo \\\"$!\\\" &gt; build/serve.pid &amp;&amp; npm run open-browser\",\n</code>", "<code>fs</code>", "<code>streams</code>", "<code>&amp;</code>", "<code>&amp;</code>", "<code>|</code>", "<code>npm-run-parallel wp-server start-watch</code>", "<code>command1 || command2</code>", "<code>\"scripts\": {\n  \"start-watch\": \"nodemon run-babel index.js\",\n  \"wp-server\": \"webpack-dev-server\",\n  // first command is for the cmd.exe, second one is for the bash\n  \"dev\": \"(start npm run start-watch &amp;&amp; start npm run wp-server) || (npm run start-watch &amp; npm run wp-server)\",\n  \"start\": \"npm run dev\"\n}\n</code>", "<code>npm start</code>", "<code>npm run dev</code>", "<code>npm-run-all --parallel task1 task2\n</code>", "<code>// fork-minimal.js - run with: node fork-minimal.js\n\nconst childProcess = require('child_process');\n\nlet scripts = ['some-script.js', 'some-other-script.js'];\nscripts.forEach(script =&gt; childProcess.fork(script));\n</code>", "<code>// fork-verbose.js - run with: node fork-verbose.js\n\nconst childProcess = require('child_process');\n\nlet scripts = [\n    {\n        path: 'some-script.js',\n        args: ['-some_arg', '/some_other_arg'],\n        options: {cwd: './', env: {NODE_ENV: 'development'}}\n    },    \n    {\n        path: 'some-other-script.js',\n        args: ['-another_arg', '/yet_other_arg'],\n        options: {cwd: '/some/where/else', env: {NODE_ENV: 'development'}}\n    }\n];\n\nlet processes = [];\n\nscripts.forEach(script =&gt; {\n    let runningScript = childProcess.fork(script.path, script.args, script.options);\n\n   // Optionally attach event listeners to the script\n   runningScript.on('close', () =&gt; console.log('Time to die...'))\n\n    runningScripts.push(runningScript); // Keep a reference to the script for later use\n});\n</code>", "<code> runningScripts.forEach(runningScript =&gt; runningScript.kill());\n</code>", "<code>ChildProcess</code>"], "path": "stack.browserify"}, {"tags": ["javascript", "assert"], "creation_date": 1362848416, "body_markdown": "What does `assert` mean in JavaScript?\r\n\r\nI\u2019ve seen something like:\r\n\r\n    assert(function1() &amp;&amp; function2() &amp;&amp; function3(), &quot;some text&quot;);\r\n\r\nAnd would like to know what the method `assert()` does.", "last_edit_date": 1496271007, "up_vote_count": 217, "link": "https://stackoverflow.com/questions/15313418/what-is-assert-in-javascript", "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1362848499, "answer_id": 15313435, "path": "stack.browserify.answer", "score": 301, "up_vote_count": 302, "is_accepted": true, "last_activity_date": 1407844788, "last_edit_date": 1407844788, "body_markdown": "There is no `assert` in JavaScript (yet; there&#39;s [talk of adding one][1], but it&#39;s at an early stage). Perhaps you&#39;re using some library that provides one. The usual meaning is to throw an error if the expression passed into the function is false; this is part of the general concept of [assertion checking][2]. Usually assertions (as they&#39;re called) are used only in &quot;testing&quot; or &quot;debug&quot; builds and stripped out of production code.\r\n\r\nSuppose you had a function that was supposed to **always** accept a string. You&#39;d want to know if someone called that function with something that wasn&#39;t a string. So you might do:\r\n\r\n    assert(typeof argumentName === &quot;string&quot;);\r\n\r\n...where `assert` would throw an error if the condition were false.\r\n\r\nA very simple version would look like this:\r\n\r\n    function assert(condition, message) {\r\n        if (!condition) {\r\n            throw message || &quot;Assertion failed&quot;;\r\n        }\r\n    }\r\n\r\nBetter yet, make use of the `Error` object if the JavaScript engine supports it (really old ones might not), which has the advantage of collecting a stack trace and such:\r\n\r\n    function assert(condition, message) {\r\n        if (!condition) {\r\n            message = message || &quot;Assertion failed&quot;;\r\n            if (typeof Error !== &quot;undefined&quot;) {\r\n                throw new Error(message);\r\n            }\r\n            throw message; // Fallback\r\n        }\r\n    }\r\n\r\nEven IE8 has `Error` (although it doesn&#39;t have the `stack` property, but modern engines [including modern IE] do).\r\n\r\n  [1]: http://wiki.ecmascript.org/doku.php?id=strawman:assert\r\n  [2]: http://en.wikipedia.org/wiki/Assertion_%28computing%29\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1362848510, "answer_id": 15313437, "path": "stack.browserify.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1362848510, "body_markdown": "`assert()` is not a native javascript function.  It is a custom function someone made.  You will have to look for it on your page or in your files and post it for anybody to help determine what it&#39;s doing. "}, {"tags": [], "down_vote_count": 0, "creation_date": 1362848745, "answer_id": 15313489, "path": "stack.browserify.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1362848745, "body_markdown": "It probably came with a testing library that some of your code is using. Here&#39;s an example of one (chances are it&#39;s not the same library as your code is using, but it shows the general idea):\r\n\r\nhttp://chaijs.com/guide/styles/#assert"}, {"tags": [], "down_vote_count": 1, "creation_date": 1362848832, "answer_id": 15313503, "path": "stack.browserify.answer", "score": 5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1362848832, "body_markdown": "check this:http://net.tutsplus.com/tutorials/javascript-ajax/quick-tip-quick-and-easy-javascript-testing-with-assert/\r\n\r\n\r\nit is for testing  JavaScript. Amazingly, at barely five or six lines, this code provides a great level of power and control over your code, when testing.\r\n\r\n\r\nThe assert function accepts two parameters:\r\n\r\n\r\noutcome: A boolean, which references whether your test passed or failed\r\n\r\ndescription: A short description of your test.\r\n\r\nThe assert function then simply creates a list item, applies a class of either \u201cpass\u201d or \u201cfail,\u201d dependent upon whether your test returned true or false, and then appends the description to the list item. Finally, that block of coded is added to the page. It\u2019s crazy simple, but works perfectly."}, {"tags": [], "down_vote_count": 2, "creation_date": 1370986081, "answer_id": 17054137, "path": "stack.browserify.answer", "score": 133, "up_vote_count": 135, "is_accepted": false, "last_activity_date": 1461142829, "last_edit_date": 1461142829, "body_markdown": "If using a modern browser or nodejs, you can use `console.assert(expression, object)`.\r\n\r\nFor more information:\r\n\r\n* [Chrome API Reference](https://developers.google.com/web/tools/chrome-devtools/debug/console/console-reference#assert)\r\n* [Firefox Web Console](https://developer.mozilla.org/en-US/docs/Web/API/console.assert)\r\n* [Firebug Console API](http://getfirebug.com/wiki/index.php/Console_API#console.assert.28expression.5B.2C_object.2C_....5D.29)\r\n* [IE Console API](https://msdn.microsoft.com/en-us/library/ie/hh772171.aspx)\r\n* [Opera Dragonfly](http://www.opera.com/dragonfly/documentation/console/)\r\n* [Nodejs Console API](http://nodejs.org/api/console.html#console_console_assert_value_message)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1372439548, "answer_id": 17370169, "path": "stack.browserify.answer", "score": 19, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1372439548, "body_markdown": "The other answers are good: there isn&#39;t an assert function built into ECMAScript5 (e.g. JavaScript that works basically everywhere) but some browsers give it to you or have add-ons that provide that functionality. While it&#39;s probably best to use a well-established / popular / maintained library for this, for academic purposes a &quot;poor man&#39;s assert&quot; function might look something like this:\r\n\r\n    var assert = function(condition, message) { \r\n        if (!condition)\r\n            throw Error(&quot;Assert failed&quot; + (typeof message !== &quot;undefined&quot; ? &quot;: &quot; + message : &quot;&quot;));\r\n    };\r\n\r\n    assert(1===1); // executes without problem\r\n    assert(false, &quot;Expected true&quot;); // yields &quot;Error: Assert failed: Expected true&quot; in console"}, {"tags": [], "down_vote_count": 0, "creation_date": 1424120315, "answer_id": 28550232, "path": "stack.browserify.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1424120315, "body_markdown": "*Previous answers can be improved in terms of performances and compatibility.*\r\n\r\nCheck **once** if the `Error` object exists, if not declare it :\r\n\r\n    if (typeof Error === &quot;undefined&quot;) {\r\n        Error = function(message) {\r\n            this.message = message;\r\n        };\r\n        Error.prototype.message = &quot;&quot;;\r\n    }\r\n\r\nThen, each assertion will check the condition, and **always** throw an `Error` object\r\n\r\n    function assert(condition, message) {\r\n        if (!condition) throw new Error(message || &quot;Assertion failed&quot;);\r\n    }\r\n\r\nKeep in mind that the console will not display the real error line number, but the line of the `assert` function, which is not useful for debugging."}, {"tags": [], "down_vote_count": 0, "creation_date": 1431102552, "answer_id": 30128648, "path": "stack.browserify.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1431102552, "body_markdown": "Here is a really simple implementation of an assert function. It takes a value and a description of what you are testing.     \r\n\r\n     function assert(value, description) {\r\n        \tvar result = value ? &quot;pass&quot; : &quot;fail&quot;;\r\n        \tconsole.log(result + &#39; - &#39; +  description); \r\n        };\r\n\r\nIf the value evaluates to true it passes.\r\n\r\n    assert (1===1, &#39;testing if 1=1&#39;);  \r\n\r\nIf it returns false it fails. \r\n\r\n    assert (1===2, &#39;testing if 1=1&#39;);\r\n\r\n \r\n\r\n "}, {"tags": [], "down_vote_count": 0, "creation_date": 1452113410, "answer_id": 34642502, "path": "stack.browserify.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1452113410, "body_markdown": "If the assertion is false, the message is displayed.  Specifically, if the first argument is false, the second argument (the string message) will be be logged in the developer tools console.  If the first argument is true, basically nothing happens.  A simple example \u2013 I\u2019m using Google Developer Tools:  \r\n\r\n    var isTrue = true;\r\n    var isFalse = false;\r\n    console.assert(isTrue, &#39;Equals true so will NOT log to the console.&#39;);\r\n    console.assert(isFalse, &#39;Equals false so WILL log to the console.&#39;);\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1460126489, "answer_id": 36502512, "path": "stack.browserify.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1460126489, "body_markdown": "If you use webpack, you can just use the [node.js assertion library](https://nodejs.org/api/assert.html).  Although they claim that it&#39;s &quot;not intended to be a general purpose assertion library&quot;, it seems to be more than OK for ad hoc assertions, and it seems no competitor exists in the Node space anyway (Chai is designed for unit testing).\r\n\r\n    const assert = require(&#39;assert&#39;);\r\n    ...\r\n    assert(jqXHR.status == 201, &quot;create response should be 201&quot;);\r\n\r\nYou need to use webpack or browserify to be able to use this, so obviously this is only useful if those are already in your workflow."}, {"tags": [], "down_vote_count": 0, "creation_date": 1462215735, "answer_id": 36989723, "path": "stack.browserify.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1462215735, "last_edit_date": 1495541426, "body_markdown": "In addition to other options like [console.assert](https://stackoverflow.com/a/17054137/25507) or [rolling your own](https://stackoverflow.com/a/15313435/25507), you can use [invariant](https://github.com/zertosh/invariant). It has a couple of unique features:\r\n\r\n* It supports formatted error messages (using a `%s` specifier).\r\n* In production environments (as determined by the Node.js or Webpack environment), the error message is optional, allowing for (slightly) smaller .js."}], "title": "What is \u201cassert\u201d in JavaScript?", "view_count": 145898, "answer_count": 11, "code_snippet": ["<code>assert</code>", "<code>assert(function1() &amp;&amp; function2() &amp;&amp; function3(), \"some text\");\n</code>", "<code>assert()</code>", "<code>assert</code>", "<code>assert(typeof argumentName === \"string\");\n</code>", "<code>assert</code>", "<code>function assert(condition, message) {\n    if (!condition) {\n        throw message || \"Assertion failed\";\n    }\n}\n</code>", "<code>Error</code>", "<code>function assert(condition, message) {\n    if (!condition) {\n        message = message || \"Assertion failed\";\n        if (typeof Error !== \"undefined\") {\n            throw new Error(message);\n        }\n        throw message; // Fallback\n    }\n}\n</code>", "<code>Error</code>", "<code>stack</code>", "<code>assert</code>", "<code>if(!condition)</code>", "<code>var throwError=true;</code>", "<code>debugger;</code>", "<code>if(throwError)</code>", "<code>throwError</code>", "<code>throw</code>", "<code>debugger;</code>", "<code>function (condition, message) {         if (condition) return;                  message = message || 'Assertion failed';         throw typeof Error !== 'undefined' ? new Error(message) : message; // Very old browsers lacks Error     }</code>", "<code>console.assert(expression, object)</code>", "<code>console.error</code>", "<code>console.assert</code>", "<code>throw</code>", "<code>console.assert</code>", "<code>console.assert</code>", "<code>var assert = function(condition, message) { \n    if (!condition)\n        throw Error(\"Assert failed\" + (typeof message !== \"undefined\" ? \": \" + message : \"\"));\n};\n\nassert(1===1); // executes without problem\nassert(false, \"Expected true\"); // yields \"Error: Assert failed: Expected true\" in console\n</code>", "<code>assert()</code>", "<code> function assert(value, description) {\n        var result = value ? \"pass\" : \"fail\";\n        console.log(result + ' - ' +  description); \n    };\n</code>", "<code>assert (1===1, 'testing if 1=1');  \n</code>", "<code>assert (1===2, 'testing if 1=1');\n</code>", "<code>var isTrue = true;\nvar isFalse = false;\nconsole.assert(isTrue, 'Equals true so will NOT log to the console.');\nconsole.assert(isFalse, 'Equals false so WILL log to the console.');\n</code>", "<code>Error</code>", "<code>if (typeof Error === \"undefined\") {\n    Error = function(message) {\n        this.message = message;\n    };\n    Error.prototype.message = \"\";\n}\n</code>", "<code>Error</code>", "<code>function assert(condition, message) {\n    if (!condition) throw new Error(message || \"Assertion failed\");\n}\n</code>", "<code>assert</code>", "<code>const assert = require('assert');\n...\nassert(jqXHR.status == 201, \"create response should be 201\");\n</code>", "<code>%s</code>"], "path": "stack.browserify"}, {"tags": ["javascript", "jslint"], "creation_date": 1292513799, "body_markdown": "I include the statement:\r\n\r\n    &quot;use strict&quot;;\r\n\r\nat the beginning of most of my Javascript files.\r\n\r\nJSLint has never before warned about this. But now it is, saying:\r\n\r\n&gt;Use the function form of &quot;use strict&quot;.\r\n\r\nDoes anyone know what the &quot;function form&quot; would be?", "last_edit_date": 1482318571, "up_vote_count": 826, "link": "https://stackoverflow.com/questions/4462478/jslint-is-suddenly-reporting-use-the-function-form-of-use-strict", "_childDocuments_": [{"tags": [], "down_vote_count": 3, "creation_date": 1292514249, "answer_id": 4462560, "path": "stack.browserify.answer", "score": 910, "up_vote_count": 913, "is_accepted": true, "last_activity_date": 1471558707, "last_edit_date": 1495535497, "body_markdown": "Include `&#39;use strict&#39;;` as the first statement in a wrapping function, so it only affects that function.  This prevents problems when concatenating scripts that aren&#39;t strict.\r\n\r\nSee Douglas Crockford&#39;s latest blog post [Strict Mode Is Coming To Town][1].\r\n\r\nExample from that post:\r\n\r\n    (function () {\r\n       &#39;use strict&#39;;\r\n       // this function is strict...\r\n    }());\r\n    \r\n    (function () {\r\n       // but this function is sloppy...\r\n    }());\r\n\r\n**Update:**\r\nIn case you don&#39;t want to wrap in immediate function (e.g. it is a node module), then you can disable the warning.\r\n\r\nFor **JSLint** (per [Zhami][2]):\r\n\r\n    /*jslint node: true */\r\n\r\nFor **JSHint**:\r\n\r\n    /*jshint strict:false */\r\nor (per [Laith Shadeed][3])\r\n\r\n    /* jshint -W097 */\r\n\r\nTo disable any arbitrary warning from JSHint, check the map in [JSHint source code][4] (details in [docs][5]).\r\n\r\n**Update 2:** **JSHint** supports `node:boolean` option. See [`.jshintrc` at github][6].\r\n\r\n    /* jshint node: true */\r\n\r\n\r\n  [1]: http://www.yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/\r\n  [2]: https://stackoverflow.com/a/11375064/2688\r\n  [3]: https://stackoverflow.com/posts/4462560/revisions\r\n  [4]: https://github.com/jshint/jshint/blob/master/src/messages.js\r\n  [5]: http://www.jshint.com/docs/\r\n  [6]: https://github.com/jshint/jshint/blob/4c2d091b7e50ce2681ee48a104578bb969c189ae/examples/.jshintrc#L79"}, {"tags": [], "down_vote_count": 7, "creation_date": 1337924890, "answer_id": 10749102, "path": "stack.browserify.answer", "score": 14, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1337924890, "body_markdown": "There&#39;s nothing innately wrong with the string form. \r\n\r\nRather than avoid the &quot;global&quot; strict form for worry of concatenating non-strict javascript, it&#39;s probably better to just fix the damn non-strict javascript to be strict.\r\n"}, {"tags": [], "down_vote_count": 11, "creation_date": 1338548495, "answer_id": 10849035, "path": "stack.browserify.answer", "score": -5, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1338548495, "body_markdown": "This is how simple it is: If you want to be strict with all your code, add `&quot;use strict&quot;;` at the start of your JavaScript.\r\n\r\nBut if you only want to be  strict with some of your code, use the function form. Anyhow, I would recomend you to use it at the beginning of your JavaScript because this will help you be a better coder."}, {"tags": [], "down_vote_count": 1, "creation_date": 1341664706, "answer_id": 11375064, "path": "stack.browserify.answer", "score": 213, "up_vote_count": 214, "is_accepted": false, "last_activity_date": 1341664706, "body_markdown": "If you&#39;re writing modules for NodeJS, they are already encapsulated. Tell JSLint that you&#39;ve got node by including at the top of your file:\r\n\r\n    /*jslint node: true */\r\n"}, {"tags": [], "down_vote_count": 4, "creation_date": 1350053917, "answer_id": 12861806, "path": "stack.browserify.answer", "score": 68, "up_vote_count": 72, "is_accepted": false, "last_activity_date": 1350053917, "body_markdown": "I&#39;d suggest to use [jshint](https://github.com/jshint/jshint) instead.\r\n\r\nIt allows to suppress this warning via `/*jshint globalstrict: true*/`.\r\n\r\nIf you are writing a library, I would only suggest using global strict if your code is encapsulated into modules as is the case with nodejs.\r\n\r\nOtherwise you&#39;d force everyone who is using your library into strict mode."}, {"tags": [], "down_vote_count": 0, "creation_date": 1401522365, "answer_id": 23967730, "path": "stack.browserify.answer", "score": 14, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1443602483, "last_edit_date": 1443602483, "body_markdown": "I started creating a Node.js/browserify application following the [Cross Platform JavaScript](https://blog.codecentric.de/en/2014/02/cross-platform-javascript/) blog post. And I ran into this issue, because my brand new Gruntfile didn&#39;t pass jshint.\r\n\r\nLuckily I found an answer in the [Leanpub book on Grunt](https://leanpub.com/grunt/read):\r\n\r\n&gt; If we try it now, we will scan our Gruntfile\u2026 and get some errors:\r\n\r\n&gt;     $ grunt jshint\r\n&gt; \r\n&gt;     Running &quot;jshint:all&quot; (jshint) task\r\n&gt;     Linting Gruntfile.js...ERROR\r\n&gt;     [L1:C1] W097: Use the function form of &quot;use strict&quot;.\r\n&gt;     &#39;use strict&#39;;\r\n&gt;     Linting Gruntfile.js...ERROR\r\n&gt;     [L3:C1] W117: &#39;module&#39; is not defined.\r\n&gt;     module.exports = function (grunt) {\r\n&gt;     \r\n&gt;     Warning: Task &quot;jshint:all&quot; failed. Use --force to continue.\r\n&gt;\r\n&gt; Both errors are because the Gruntfile is a Node program, and by default JSHint does not recognise or allow the use of `module` and the string version of `use strict`. We can set a JSHint rule that will accept our Node programs. Let\u2019s edit our jshint task configuration and add an options key:\r\n&gt; \r\n&gt;     jshint: {\r\n&gt;       options: {\r\n&gt;         node: true\r\n&gt;       },\r\n&gt;     }\r\n\r\nAdding `node: true` to the jshint `options`, to put jshint into &quot;Node mode&quot;, removed both errors for me."}, {"tags": [], "down_vote_count": 1, "creation_date": 1438157738, "answer_id": 31694903, "path": "stack.browserify.answer", "score": 12, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1438157738, "body_markdown": "Add a file .jslintrc (or .jshintrc in the case of jshint) at the root of your project with the following content:\r\n\r\n    {\r\n    \t&quot;node&quot;: true\r\n    }\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1442163484, "answer_id": 32552206, "path": "stack.browserify.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1442163484, "body_markdown": "I think everyone missed the &quot;suddenly&quot; part of this question.  Most likely, your .jshintrc has a syntax error, so it&#39;s not including the &#39;browser&#39; line.  Run it through a json validator to see where the error is."}], "title": "JSLint is suddenly reporting: Use the function form of &quot;use strict&quot;", "view_count": 241594, "answer_count": 8, "code_snippet": ["<code>\"use strict\";\n</code>", "<code>'use strict';</code>", "<code>(function () {\n   'use strict';\n   // this function is strict...\n}());\n\n(function () {\n   // but this function is sloppy...\n}());\n</code>", "<code>/*jslint node: true */\n</code>", "<code>/*jshint strict:false */\n</code>", "<code>/* jshint -W097 */\n</code>", "<code>node:boolean</code>", "<code>.jshintrc</code>", "<code>/* jshint node: true */\n</code>", "<code>-1</code>", "<code>/*jshint strict:false */</code>", "<code>\"use strict\";</code>", "<code>/*jslint node: true */\n</code>", "<code>/*jshint strict:false */</code>", "<code>\"node\": true</code>", "<code>/*jshint globalstrict: true*/</code>", "<code>strict: 'global'</code>", "<code>$ grunt jshint\n\nRunning \"jshint:all\" (jshint) task\nLinting Gruntfile.js...ERROR\n[L1:C1] W097: Use the function form of \"use strict\".\n'use strict';\nLinting Gruntfile.js...ERROR\n[L3:C1] W117: 'module' is not defined.\nmodule.exports = function (grunt) {\n\nWarning: Task \"jshint:all\" failed. Use --force to continue.\n</code>", "<code>module</code>", "<code>use strict</code>", "<code>jshint: {\n  options: {\n    node: true\n  },\n}\n</code>", "<code>node: true</code>", "<code>options</code>", "<code>{\n    \"node\": true\n}\n</code>", "<code>\"use strict\";</code>", "<code>\"use strict\";</code>", "<code>\"use strict\";</code>", "<code>\"use strict;\"</code>"], "path": "stack.browserify"}, {"tags": ["javascript", "node.js", "v8", "evented-io"], "creation_date": 1260486321, "body_markdown": "I don&#39;t fully get what [Node.js][1] is all about. Maybe it&#39;s because I am mainly a web based business application developer. What is it and what is the use of it?\r\n\r\nMy understanding so far is that:\r\n\r\n 1. The programming model is event driven, especially the way it handles [I/O][2].\r\n 2. It uses [JavaScript][3] and the parser is [V8][4].\r\n 3. It can be easily used to create concurrent server applications.\r\n\r\nAre my understandings correct? If yes, then what are the benefits of evented I/O, is it just more for the concurrency stuff? Also, is the direction of Node.js to become a framework like, JavaScript based (V8 based) programming model?\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Node.js\r\n  [2]: http://en.wikipedia.org/wiki/Input/output\r\n  [3]: http://en.wikipedia.org/wiki/JavaScript\r\n  [4]: http://en.wikipedia.org/wiki/V8_%28JavaScript_engine%29\r\n", "last_edit_date": 1371892266, "up_vote_count": 510, "link": "https://stackoverflow.com/questions/1884724/what-is-node-js", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1260487045, "answer_id": 1884790, "path": "stack.browserify.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1260487045, "body_markdown": "Well, [I understand that][1] \r\n\r\n&gt; - Node&#39;s goal is to provide an easy way\r\n&gt; to build scalable network programs.\r\n&gt; - Node is similar in design to and influenced by systems like Ruby&#39;s Event Machine or Python&#39;s Twisted. \r\n&gt; - Evented I/O for V8 javascript.\r\n\r\nFor me that means that you were correct in all three assumptions. The library sure looks promising!\r\n\r\n\r\n  [1]: http://nodejs.org/#about"}, {"tags": [], "down_vote_count": 0, "creation_date": 1260487140, "answer_id": 1884799, "path": "stack.browserify.answer", "score": 86, "up_vote_count": 86, "is_accepted": false, "last_activity_date": 1371892641, "last_edit_date": 1371892641, "body_markdown": "[V8][1] is an implementation of JavaScript. It lets you run standalone JavaScript applications (among other things).\r\n\r\nNode.js is simply a library written for V8 which does evented I/O. This concept is a bit trickier to explain, and I&#39;m sure someone will answer with a better explanation than I... The gist is that rather than doing some input or output and waiting for it to happen, you just _don&#39;t_ wait for it to finish. So for example, ask for the last edited time of a file:\r\n\r\n    // Pseudo code\r\n    stat( &#39;somefile&#39; )\r\n\r\nThat might take a couple of milliseconds, or it might take seconds. With evented [I/O][2] you simply fire off the request and instead of waiting around you attach a callback that gets run when the request finishes:\r\n\r\n    // Pseudo code\r\n    stat( &#39;somefile&#39;, function( result ) {\r\n      // Use the result here\r\n    } );\r\n    // ...more code here\r\n\r\nThis makes it a lot like JavaScript code in the browser (for example, with [Ajax][3] style functionality).\r\n\r\nFor more information, you should check out the article *[Node.js is genuinely exciting][4]* which was my introduction to the library/platform... I found it quite good.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/V8_%28JavaScript_engine%29\r\n  [2]: http://en.wikipedia.org/wiki/Input/output\r\n  [3]: http://en.wikipedia.org/wiki/Ajax_%28programming%29\r\n  [4]: http://simonwillison.net/2009/Nov/23/node/\r\n"}, {"tags": [], "down_vote_count": 4, "creation_date": 1260819422, "answer_id": 1902991, "path": "stack.browserify.answer", "score": 213, "up_vote_count": 217, "is_accepted": true, "last_activity_date": 1351016811, "last_edit_date": 1351016811, "body_markdown": "I think the advantages are:\r\n\r\n1. Web development in a dynamic language (JavaScript) on a VM that is incredibly fast (V8). It is much faster than Ruby, Python, or Perl.\r\n\r\n2. Ability to handle thousands of concurrent connections with minimal overhead on a single process.\r\n\r\n3. JavaScript is perfect for event loops with first class function objects and closures. People already know how to use it this way having used it in the browser to respond to user initiated events.\r\n\r\n4. A lot of people already know JavaScript, even people who do not claim to be programmers. It is arguably the most popular programming language.\r\n\r\n5. Using JavaScript on a web server as well as the browser reduces the impedance mismatch between the two programming environments which can communicate data structures via JSON that work the same on both sides of the equation. Duplicate form validation code can be shared between server and client, etc.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1271033800, "answer_id": 2619353, "path": "stack.browserify.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1371892903, "last_edit_date": 1371892903, "body_markdown": "The closures are a way to execute code in the context it was created in.\r\n\r\nWhat this means for concurency is that you can define variables, then initiate a nonblocking [I/O][1] function, and send it an anonymous function for its callback.\r\n\r\nWhen the task is complete, the callback function will execute in the context with the variables, this is the closure.\r\n\r\nThe reason closures are so good for writing applications with nonblocking I/O is that it&#39;s very easy to manage the context of functions executing asynchronously.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Input/output\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1294135963, "answer_id": 4592476, "path": "stack.browserify.answer", "score": 36, "up_vote_count": 36, "is_accepted": false, "last_activity_date": 1371893011, "last_edit_date": 1371893011, "body_markdown": "[Node.js][1] is an open source command line tool built for the server side JavaScript code. You can download a [tarball][2], compile and install the source. It lets you run JavaScript programs.\r\n\r\nThe JavaScript is executed by the [V8][3], a JavaScript engine developed by Google which is used in [Chrome][4] browser. It uses a JavaScript API to access the network and file system.\r\n\r\nIt is popular for its performance and the ability to perform parallel operations.\r\n\r\n&gt; [Understanding node.js][5] is the best explanation of [node.js][6] I have found so far.\r\n\r\nFollowing are some good articles on the topic.\r\n\r\n&gt;  - [Learning Server-Side JavaScript with Node.js][7]\r\n&gt;  - [This Time, You\u2019ll Learn Node.js][8]\r\n\r\n  [1]: http://nodejs.org/\r\n  [2]: http://en.wikipedia.org/wiki/Tarball\r\n  [3]: http://code.google.com/p/v8/\r\n  [4]: http://en.wikipedia.org/wiki/Google_Chrome\r\n  [5]: http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb\r\n  [6]: http://nodejs.org/\r\n  [7]: http://net.tutsplus.com/tutorials/javascript-ajax/learning-serverside-javascript-with-node-js/\r\n  [8]: http://net.tutsplus.com/tutorials/javascript-ajax/this-time-youll-learn-node-js/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1298936670, "answer_id": 5148940, "path": "stack.browserify.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1371893180, "last_edit_date": 1371893180, "body_markdown": "Two good examples are regarding how you manage templates and use progressive enhancements with it. You just need a few lightweight pieces of JavaScript code to make it work perfectly.\r\n\r\nI strongly recommend that you watch and read these articles:\r\n\r\n- [Video glass node][1]\r\n- [Node.js YUI DOM manipulation][2]\r\n\r\nPick up any language and try to remember how you would manage your HTML file templates and what you had to do to update a single [CSS][3] class name in your [DOM][4] structure (for instance, a user clicked on a menu item and you want that marked as &quot;selected&quot; and update the content of the page).\r\n\r\nWith Node.js it is as simple as doing it in client-side JavaScript code. Get your DOM node and apply your CSS class to that. Get your DOM node and innerHTML your content (you will need some additional JavaScript code to do this. Read the article to know more).\r\n\r\nAnother good example, is that you can make your web page compatible both with JavaScript turned on or off with the same piece of code. Imagine you have a date selection made in JavaScript that would allow your users to pick up any date using a calendar. You can write (or use) the same piece of JavaScript code to make it work with your JavaScript  turned ON or OFF.\r\n\r\n  [1]:http://www.yuiblog.com/blog/2010/09/29/video-glass-node/\r\n  [2]:http://www.yuiblog.com/blog/2010/04/09/node-js-yui-3-dom-manipulation-oh-my/\r\n  [3]: http://en.wikipedia.org/wiki/Cascading_Style_Sheets\r\n  [4]: http://en.wikipedia.org/wiki/Document_Object_Model\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1311280627, "answer_id": 6782438, "path": "stack.browserify.answer", "score": 620, "up_vote_count": 620, "is_accepted": false, "last_activity_date": 1371895688, "last_edit_date": 1495541904, "body_markdown": "I use Node.js at work, and find it to be very powerful. Forced to choose one word to describe Node.js, I&#39;d say &quot;interesting&quot; (which is not a purely positive adjective). The community is vibrant and growing. JavaScript, despite its oddities can be a great language to code in. And you will daily rethink your own understanding of &quot;best practice&quot; and the patterns of well-structured code. There&#39;s an enormous energy of ideas flowing into Node.js right now, and working in it exposes you to all this thinking - great mental weightlifting.\r\n\r\nNode.js in production is definitely possible, but far from the &quot;turn-key&quot; deployment seemingly promised by the documentation. With Node.js v0.6.x, &quot;cluster&quot; has been integrated into the platform, providing one of the essential building blocks, but my &quot;production.js&quot; script is still ~150 lines of logic to handle stuff like creating the log directory, recycling dead workers, etc. For a &quot;serious&quot; production service, you also need to be prepared to throttle incoming connections and do all the stuff that Apache does for [PHP][1]. To be fair, [Ruby on Rails][2] has this _exact_ problem. It is solved via two complementary mechanisms: 1) Putting Ruby on Rails/Node.js behind a dedicated webserver (written in C and tested to hell and back) like [Nginx][3] (or [Apache][4] / [Lighttd][5]). The webserver can efficiently serve static content, access logging, rewrite URLs, terminate [SSL][6], enforce access rules, and manage multiple sub-services. For requests that hit the actual node service, the webserver proxies the request through. 2) Using a framework like [Unicorn][7] that will manage the worker processes, recycle them periodically, etc. I&#39;ve yet to find a Node.js serving framework that seems fully baked; it may exist, but I haven&#39;t found it yet and still use ~150 lines in my hand-rolled &quot;production.js&quot;.\r\n\r\nReading frameworks like [Express][8] makes it seem like the standard practice is to just serve everything through one jack-of-all-trades Node.js service ... &quot;app.use(express.static(__dirname + &#39;/public&#39;))&quot;. For lower-load services and development, that&#39;s probably fine. But as soon as you try to put big time load on your service and have it run 24/7, you&#39;ll quickly discover the motivations that push big sites to have well baked, hardened C-code like [Nginx][9] fronting their site and handling all of the static content requests (...until you set up a [CDN][10], like [Amazon CloudFront][11])). For a somewhat humorous and unabashedly negative take on this, see [this guy](http://teddziuba.com/2011/10/node-js-is-cancer.html).\r\n\r\nNode.js is also finding more and more non-service uses. Even if you are using something else to serve web content, you might still use Node.js as a build tool, using [npm][12] modules to organize your code, [Browserify](https://github.com/substack/node-browserify) to stitch it into a single asset, and [uglify-js](https://github.com/mishoo/UglifyJS) to minify it for deployment. For dealing with the web, JavaScript is a perfect [impedance match][13] and frequently that makes it the easiest route of attack. For example, if you want to grovel through a bunch of [JSON][14] response payloads, you should use my [underscore-CLI](https://github.com/ddopson/underscore-cli) module, the utility-belt of structured data.\r\n\r\n### Pros / Cons:\r\n\r\n - Pro: For a server guy, writing JavaScript on the backend has been a &quot;gateway drug&quot; to learning modern UI patterns. I no longer dread writing client code.\r\n - Pro: Tends to encourage proper error checking (err is returned by virtually all callbacks, nagging the programmer to handle it;  also, async.js and other libraries handle the &quot;fail if any of these subtasks fails&quot; paradigm much better than typical synchronous code)\r\n - Pro: Some interesting and normally hard tasks become trivial - like getting status on tasks in flight, communicating between workers, or sharing cache state\r\n - Pro: Huge community and tons of great libraries based on a solid package manager (npm)\r\n - Con: JavaScript has no standard library. You get so used to importing functionality that it feels weird when you use JSON.parse or some other build in method that doesn&#39;t require adding an npm module. This means that there are five versions of everything. Even the modules included in the Node.js &quot;core&quot; have five more variants should you be unhappy with the default implementation.  This leads to rapid evolution, but also some level of confusion.\r\n\r\n### Versus a simple one-process-per-request model ([LAMP][15]):\r\n\r\n - Pro: Scalable to thousands of active connections. Very fast and very efficient. For a web fleet, this could mean a 10X reduction in the number of boxes required versus PHP or Ruby\r\n - Pro: Writing parallel patterns is easy. Imagine that you need to fetch three (or N) blobs from [Memcached][16]. Do this in PHP ... did you just write code the fetches the first blob, then the second, then the third? Wow, that&#39;s slow. There&#39;s a special [PECL][17] module to fix that specific problem for Memcached, but what if you want to fetch some Memcached data in parallel with your database query? In Node.js, because the paradigm is asynchronous, having a web request do multiple things in parallel is very natural.\r\n - Con: Asynchronous code is fundamentally more complex than synchronous code, and the up-front learning curve can be hard for developers without a solid understanding of what concurrent execution actually means. Still, it&#39;s vastly less difficult than writing any kind of multithreaded code with locking.\r\n - Con: If a compute-intensive request runs for, for example, 100&amp;nbsp;ms, it will stall processing of other requests that are being handled in the same Node.js process ... AKA, [cooperative-multitasking](http://en.wikipedia.org/wiki/Computer_multitasking#Cooperative_multitasking.2Ftime-sharing). This can be mitigated with the Web Workers pattern (spinning off a subprocess to deal with the expensive task). Alternatively, you could use a large number of Node.js workers and only let each one handle a single request concurrently (still fairly efficient because there is no process recycle).\r\n - Con: Running a production system is MUCH more complicated than a [CGI][18] model like Apache + PHP, [Perl][19], [Ruby][20], etc. Unhandled exceptions will bring down the entire process, necessitating logic to restart failed workers (see *[cluster](http://nodejs.org/docs/latest/api/cluster.html)*). Modules with buggy native code can hard-crash the process. Whenever a worker dies, any requests it was handling are dropped, so one buggy API can easily degrade service for other cohosted APIs.\r\n\r\n### Versus writing a &quot;real&quot; service in Java / C# / C (C? really?)\r\n\r\n - Pro: Doing asynchronous in Node.js is easier than doing thread-safety anywhere else and arguably provides greater benefit. Node.js is by far the least painful asynchronous paradigm I&#39;ve ever worked in. With good libraries, it is only slightly harder than writing synchronous code.\r\n - Pro: No multithreading / locking bugs.  True, you invest up front in writing more verbose code that expresses a proper asynchronous workflow with no blocking operations.  And you need to write some tests and get the thing to work (it is a scripting language and fat fingering variable names is only caught at unit-test time). BUT, once you get it to work, the surface area for [heisenbugs][21] -- strange problems that only manifest once in a million runs -- that surface area is just much much lower. The taxes writing Node.js code are heavily front-loaded into the coding phase. Then you tend to end up with stable code.\r\n - Pro: JavaScript is much more lightweight for expressing functionality. It&#39;s hard to prove this with words, but [JSON][22], dynamic typing, lambda notation, prototypal inheritance, lightweight modules, whatever ... it just tends to take less code to express the same ideas.\r\n - Con: Maybe you really, really like coding services in Java?\r\n\r\nFor another perspective on JavaScript and Node.js, check out *[From Java to Node.js](http://n0tw0rthy.wordpress.com/2012/01/08/from-java-to-node-js/)*, a blog post on a Java developer&#39;s impressions and experiences learning Node.js.\r\n\r\n***\r\n\r\n**Modules**\r\nWhen considering node, keep in mind that your choice of JavaScript libraries will _DEFINE_ your experience. Most people use at least two, an asynchronous pattern helper (Step, Futures, Async), and a JavaScript sugar module ([Underscore.js][23]).\r\n\r\nHelper / JavaScript Sugar:\r\n\r\n - [Underscore.js][24] - use this. Just do it. It makes your code nice and readable with stuff like _.isString(), and _.isArray(). I&#39;m not really sure how you could write safe code otherwise. Also, for enhanced command-line-fu, check out my own [Underscore-CLI](https://github.com/ddopson/underscore-cli).\r\n\r\nAsynchronous Pattern Modules:\r\n\r\n - [Step][25] - a very elegant way to express combinations of serial and parallel actions. My personal reccomendation. See [my post][26] on what Step code looks like.\r\n - [Futures][27] - much more flexible (is that really a good thing?) way to express ordering through requirements. Can express things like &quot;start a, b, c in parallel. When A, and B finish, start AB. When A, and C finish, start AC.&quot; Such flexibility requires more care to avoid bugs in your workflow (like never calling the callback, or calling it multiple times). See [Raynos&#39;s post][28] on using futures (this is the post that made me &quot;get&quot; futures).\r\n - [Async][29] - more traditional library with one method for each pattern. I started with this before my religious conversion to step and subsequent realization that all patterns in Async could be expressed in Step with a single more readable paradigm.\r\n - [TameJS](http://tamejs.org/) - Written by OKCupid, it&#39;s a precompiler that adds a new language primative &quot;await&quot; for elegantly writing serial and parallel workflows. The pattern looks amazing, but it does require pre-compilation. I&#39;m still making up my mind on this one.\r\n - [StreamlineJS](https://github.com/Sage/streamlinejs) - competitor to TameJS. I&#39;m leaning toward Tame, but you can make up your own mind.\r\n\r\nOr to read all about the asynchronous libraries, see [this panel-interview][30] with the authors.\r\n\r\nWeb Framework:\r\n\r\n - [Express][31] Great Ruby on Rails-esk framework for organizing web sites. It uses [JADE][32] as a XML/HTML templating engine, which makes building HTML far less painful, almost elegant even.\r\n - [jQuery][33] While not technically a node module, jQuery is quickly becoming a de-facto standard for client-side user interface. jQuery provides CSS-like selectors to &#39;query&#39; for sets of DOM elements that can then be operated on (set handlers, properties, styles, etc). Along the same vein, Twitter&#39;s [Bootstrap](http://twitter.github.com/bootstrap/) CSS framework, [Backbone.js](http://documentcloud.github.com/backbone/) for an [MVC][34] pattern, and [Browserify.js](https://github.com/substack/node-browserify) to stitch all your JavaScript files into a single file. These modules are all becoming de-facto standards so you should at least check them out if you haven&#39;t heard of them.\r\n\r\nTesting:\r\n\r\n - [JSHint](http://github.com/jshint/node-jshint) - Must use; I didn&#39;t use this at first which now seems incomprehensible. JSLint adds back a bunch of the basic verifications you get with a compiled language like Java. Mismatched parenthesis, undeclared variables, typeos of many shapes and sizes. You can also turn on various forms of what I call &quot;anal mode&quot; where you verify style of whitespace and whatnot, which is OK if that&#39;s your cup of tea -- but the real value comes from getting instant feedback on the exact line number where you forgot a closing &quot;)&quot; ... without having to run your code and hit the offending line. &quot;JSHint&quot; is a more-configurable variant of [Douglas Crockford](http://www.amazon.com/dp/0596517742/ref=as_li_qf_sp_asin_til?tag=ddopsonpro-20)&#39;s [JSLint](http://www.jslint.com/).\r\n - [Mocha](http://visionmedia.github.com/mocha/) competitor to Vows which I&#39;m starting to prefer. Both frameworks handle the basics well enough, but complex patterns tend to be easier to express in Mocha.\r\n - [Vows][35] Vows is really quite elegant. And it prints out a lovely report (--spec) showing you which test cases passed / failed. Spend 30 minutes learning it, and you can create basic tests for your modules with minimal effort.\r\n - [Zombie](https://github.com/assaf/zombie) - Headless testing for HTML and JavaScript using [JSDom](https://github.com/tmpvar/jsdom/) as a virtual &quot;browser&quot;. Very powerful stuff. Combine it with [Replay](https://github.com/assaf/node-replay#readme) to get lightning fast deterministic tests of in-browser code.\r\n - A comment on how to &quot;think about&quot; testing:\r\n  - Testing is non-optional. With a dynamic language like JavaScript, there are _very_ few static checks. For example, passing two parameters to a method that expects 4 won&#39;t break until the code is executed. Pretty low bar for creating bugs in JavaScript. Basic tests are essential to making up the verification gap with compiled languages.\r\n  - Forget validation, just make your code execute. For every method, my first validation case is &quot;nothing breaks&quot;, and that&#39;s the case that fires most often. Proving that your code runs without throwing catches 80% of the bugs and will do so much to improve your code confidence that you&#39;ll find yourself going back and adding the nuanced validation cases you skipped.\r\n  - Start small and break the inertial barrier. We are all lazy, and pressed for time, and it&#39;s easy to see testing as &quot;extra work&quot;. So start small. Write test case 0 - load your module and report success. If you force yourself to do just this much, then the inertial barrier to testing is broken. That&#39;s &lt;30 min to do it your first time, including reading the documentation. Now write test case 1 - call one of your methods and verify &quot;nothing breaks&quot;, that is, that you don&#39;t get an error back. Test case 1 should take you less than one minute. With the inertia gone, it becomes easy to incrementally expand your test coverage.\r\n  - Now evolve your tests with your code. Don&#39;t get intimidated by what the &quot;correct&quot; end-to-end test would look like with mock servers and all that. Code starts simple and evolves to handle new cases; tests should too. As you add new cases and new complexity to your code, add test cases to exercise the new code. As you find bugs, add verifications and / or new cases to cover the flawed code. When you are debugging and lose confidence in a piece of code, go back and add tests to prove that it is doing what you think it is. Capture strings of example data (from other services you call, websites you scrape, whatever) and feed them to your parsing code. A few cases here, improved validation there, and you will end up with highly reliable code.\r\n\r\nAlso, check out the [official list][36] of recommended Node.js modules. However, [GitHub&#39;s][37] [Node Modules Wiki](https://github.com/joyent/node/wiki/modules) is much more complete and a good resource.\r\n\r\n***\r\n\r\n*To understand Node, it&#39;s helpful to consider a few of the key design choices:*\r\n\r\nNode.js is **EVENT BASED** and **ASYNCHRONOUS** / **NON-BLOCKING**. Events, like an incoming HTTP connection will fire off a JavaScript function that does a little bit of work and kicks off other asynchronous tasks like connecting to a database or pulling content from another server. Once these tasks have been kicked off, the event function finishes and Node.js goes back to sleep. As soon as something else happens, like the database connection being established or the external server responding with content, the callback functions fire, and more JavaScript code executes, potentially kicking off even more asynchronous tasks (like a database query). In this way, Node.js will happily interleave activities for multiple parallel workflows, running whatever activities are unblocked at any point in time. This is why Node.js does such a great job managing thousands of simultaneous connections.\r\n\r\n***Why not just use one process/thread per connection like everyone else?*** In Node.js, a new connection is just a very small heap allocation. Spinning up a new process takes significantly more memory, a megabyte on some platforms. But the real cost is the overhead associated with context-switching. When you have 10^6 kernel threads, the kernel has to do a lot of work figuring out who should execute next. A bunch of work has gone into building an O(1) scheduler for Linux, but in the end, it&#39;s just way way more efficient to have a single event-driven process than 10^6 processes competing for CPU time. Also, under overload conditions, the multi-process model behaves very poorly, starving critical administration and management services, especially SSHD (meaning you can&#39;t even log into the box to figure out how screwed it really is).\r\n\r\nNode.js is **SINGLE THREADED** and **LOCK FREE**. Node.js, as a very deliberate design choice only has a single thread per process. Because of this, it&#39;s fundamentally impossible for multiple threads to access data simultaneously. Thus, no locks are needed. Threads are hard. Really really hard. If you don&#39;t believe that, you haven&#39;t done enough threaded programming. Getting locking right is hard and results in bugs that are really hard to track down. Eliminating locks and multi-threading makes one of the nastiest classes of bugs just go away. This might be the single biggest advantage of node.\r\n\r\n***But how do I take advantage of my 16 core box?***\r\n\r\nTwo ways:\r\n\r\n 1. For big heavy compute tasks like image encoding, Node.js can fire up child processes or send messages to additional worker processes. In this design, you&#39;d have one thread managing the flow of events and N processes doing heavy compute tasks and chewing up the other 15 CPUs.\r\n 2. For scaling throughput on a webservice, you should run multiple Node.js servers on one box, one per core, using [cluster](http://nodejs.org/api/cluster.html) (With Node.js v0.6.x, the official &quot;cluster&quot; module linked here replaces the learnboost version which has a different API). These local Node.js servers can then compete on a socket to accept new connections, balancing load across them. Once a connection is accepted, it becomes tightly bound to a single one of these shared processes. In theory, this sounds bad, but in practice it works quite well and allows you to avoid the headache of writing thread-safe code. Also, this means that Node.js gets excellent CPU cache affinity, more effectively using memory bandwidth.\r\n\r\n***Node.js lets you do some really powerful things without breaking a sweat.*** Suppose you have a Node.js program that does a variety of tasks, listens on a [TCP][38] port for commands, encodes some images, whatever. With five lines of code, you can add in an HTTP based web management portal that shows the current status of active tasks. This is EASY to do:\r\n\r\n    var http = require(&#39;http&#39;);\r\n    http.createServer(function (req, res) {\r\n        res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});\r\n        res.end(myJavascriptObject.getSomeStatusInfo());\r\n    }).listen(1337, &quot;127.0.0.1&quot;);\r\n\r\nNow you can hit a URL and check the status of your running process. Add a few buttons, and you have a &quot;management portal&quot;. If you have a running Perl / Python / Ruby script, just &quot;throwing in a management portal&quot; isn&#39;t exactly simple.\r\n\r\n***But isn&#39;t JavaScript slow / bad / evil / spawn-of-the-devil?*** JavaScript has some weird oddities, but with &quot;the good parts&quot; there&#39;s a very powerful language there, and in any case, JavaScript is THE language on the client (browser). JavaScript is here to stay; other languages are targeting it as an IL, and world class talent is competing to produce the most advanced JavaScript engines. Because of JavaScript&#39;s role in the browser, an enormous amount of engineering effort is being thrown at making JavaScript blazing fast.  [V8][39] is the latest and greatest javascript engine, at least for this month. It blows away the other scripting languages in both efficiency AND stability (looking at you, Ruby). And it&#39;s only going to get better with huge teams working on the problem at Microsoft, Google, and Mozilla, competing to build the best JavaScript engine (It&#39;s no longer a JavaScript &quot;interpreter&quot; as all the modern engines do tons of [JIT][40] compiling under the hood with interpretation only as a fallback for execute-once code).  Yeah, we all wish we could fix a few of the odder JavaScript language choices, but it&#39;s really not that bad. And the language is so darn flexible that you really aren&#39;t coding JavaScript, you are coding Step or jQuery -- more than any other language, in JavaScript, the libraries define the experience. To build web applications, you pretty much have to know JavaScript anyway, so coding with it on the server has a sort of skill-set synergy.  It has made me not dread writing client code.\r\n\r\nBesides, if you REALLY hate JavaScript, you can use syntactic sugar like [CoffeeScript][41]. Or anything else that creates JavaScript code, like [Google&amp;nbsp;Web&amp;nbsp;Toolkit][42] (GWT).\r\n\r\n***Speaking of JavaScript, what&#39;s a &quot;closure&quot;?*** - Pretty much a fancy way of saying that you retain lexically scoped variables across call chains. ;) Like this:\r\n\r\n    var myData = &quot;foo&quot;;\r\n    database.connect( &#39;user:pass&#39;, function myCallback( result ) {\r\n        database.query(&quot;SELECT * from Foo where id = &quot; + myData);\r\n    } );\r\n    // Note that doSomethingElse() executes _BEFORE_ &quot;database.query&quot; which is inside a callback\r\n    doSomethingElse();\r\n\r\nSee how you can just use &quot;myData&quot; without doing anything awkward like stashing it into an object? And unlike in Java, the &quot;myData&quot; variable doesn&#39;t have to be read-only. This powerful language feature makes asynchronous-programming much less verbose and less painful.\r\n\r\nWriting asynchronous code is always going to be more complex than writing a simple single-threaded script, but with Node.js, it&#39;s not that much harder and you get a lot of benefits in addition to the efficiency and scalability to thousands of concurrent connections...\r\n\r\n  [1]: http://en.wikipedia.org/wiki/PHP\r\n  [2]: http://en.wikipedia.org/wiki/Ruby_on_Rails\r\n  [3]: http://en.wikipedia.org/wiki/Nginx\r\n  [4]: http://en.wikipedia.org/wiki/Apache_HTTP_Server\r\n  [5]: http://en.wikipedia.org/wiki/Lighttpd\r\n  [6]: http://en.wikipedia.org/wiki/SSL\r\n  [7]: http://unicorn.bogomips.org/\r\n  [8]: http://expressjs.com/\r\n  [9]: http://en.wikipedia.org/wiki/Nginx\r\n  [10]: http://en.wikipedia.org/wiki/Content_delivery_network\r\n  [11]: http://en.wikipedia.org/wiki/Amazon_CloudFront\r\n  [12]: http://en.wikipedia.org/wiki/Npm_%28software%29\r\n  [13]: http://en.wikipedia.org/wiki/Object-relational_impedance_mismatch\r\n  [14]: http://en.wikipedia.org/wiki/JSON\r\n  [15]: http://en.wikipedia.org/wiki/LAMP_%28software_bundle%29\r\n  [16]: http://en.wikipedia.org/wiki/Memcached\r\n  [17]: http://en.wikipedia.org/wiki/PEAR#PECL\r\n  [18]: http://en.wikipedia.org/wiki/Common_Gateway_Interface\r\n  [19]: http://en.wikipedia.org/wiki/Perl\r\n  [20]: http://en.wikipedia.org/wiki/Ruby_%28programming_language%29\r\n  [21]: http://en.wikipedia.org/wiki/Heisenbug\r\n  [22]: http://en.wikipedia.org/wiki/JSON\r\n  [23]: http://en.wikipedia.org/wiki/Underscore.js\r\n  [24]: http://documentcloud.github.com/underscore/\r\n  [25]: https://github.com/creationix/step\r\n  [26]: https://stackoverflow.com/questions/5989538/nodejs-parallel-callback-design-pattern/7167192#7167192\r\n  [27]: https://github.com/coolaj86/futures\r\n  [28]: https://stackoverflow.com/questions/5989538/nodejs-parallel-callback-design-pattern/5994989#5994989\r\n  [29]: https://github.com/caolan/async\r\n  [30]: http://www.infoq.com/articles/surviving-asynchronous-programming-in-javascript\r\n  [31]: https://github.com/visionmedia/express\r\n  [32]: http://jade-lang.com/\r\n  [33]: http://api.jquery.com/category/selectors/\r\n  [34]: http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\r\n  [35]: http://vowsjs.org/\r\n  [36]: http://nodejs.org/docs/v0.4.11/api/appendix_1.html\r\n  [37]: http://en.wikipedia.org/wiki/GitHub\r\n  [38]: http://en.wikipedia.org/wiki/Transmission_Control_Protocol\r\n  [39]: http://en.wikipedia.org/wiki/V8_%28JavaScript_engine%29\r\n  [40]: http://en.wikipedia.org/wiki/Just-in-time_compilation\r\n  [41]: http://jashkenas.github.com/coffee-script/\r\n  [42]: http://code.google.com/webtoolkit/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1322579738, "answer_id": 8313170, "path": "stack.browserify.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1371895914, "last_edit_date": 1371895914, "body_markdown": "Also, do not forget to mention that Google&#39;s V8 is VERY fast. It actually converts the JavaScript code to machine code with the matched performance of compiled binary. So along with all the other great things, it&#39;s INSANELY fast. \r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1324337333, "answer_id": 8568951, "path": "stack.browserify.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1371896035, "last_edit_date": 1371896035, "body_markdown": "There is a very good fast food place analogy that best explains the event driven model of Node.js, see the full article, *[Node.js, Doctor\u2019s Offices and Fast Food Restaurants \u2013 Understanding Event-driven Programming][1]*\r\n\r\nHere is a summary:\r\n\r\n&gt; If the fast food joint followed a traditional thread-based model, you&#39;d order your food and wait in line until you received it. The person behind you wouldn&#39;t be able to order until your order was done. In an event-driven model, you order your food and then get out of line to wait. Everyone else is then free to order.\r\n\r\nNode.js is event-driven, but most web servers are thread-based.York explains how Node.js works:\r\n\r\n - You use your web browser to make a request for &quot;/about.html&quot; on a\r\n   Node.js web server.\r\n\r\n - The Node.js server accepts your request and calls a function to retrieve\r\n   that file from disk.\r\n\r\n - While the Node.js server is waiting for the file to be retrieved, it\r\n   services the next web request.\r\n\r\n - When the file is retrieved, there is a callback function that is\r\n   inserted in the Node.js servers queue.\r\n\r\n - The Node.js server executes that function which in this case would\r\n   render the &quot;/about.html&quot; page and send it back to your web browser.&quot;\r\n\r\n  [1]: http://code.danyork.com/2011/01/25/node-js-doctors-offices-and-fast-food-restaurants-understanding-event-driven-programming/\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1331297277, "answer_id": 9634307, "path": "stack.browserify.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1371896529, "last_edit_date": 1371896529, "body_markdown": "   Q: The programming model is event driven, especially the way it handles [I/O][1].\r\n\r\nCorrect. It uses call-backs, so any request to access the file system would cause a request to be sent to the file system and then Node.js would start processing its next request. It would only worry about the I/O request once it gets a response back from the file system, at which time it will run the callback code. However, it is possible to make synchronous I/O requests (that is, blocking requests). It is up to the developer to choose between asynchronous (callbacks) or synchronous (waiting).\r\n\r\n   Q: It uses JavaScript and the parser is V8.\r\n\r\nYes\r\n\r\n   Q: It can be easily used to create concurrent server applications.\r\n\r\nYes, although you&#39;d need to hand-code quite a lot of JavaScript. It might be better to look at a framework, such as &lt;http://www.easynodejs.com/&gt; - which comes with full online documentation and a sample application.\r\n\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Input/output"}], "title": "What is Node.js?", "view_count": 449864, "answer_count": 10, "code_snippet": ["<code>var http = require('http');\nhttp.createServer(function (req, res) {\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end(myJavascriptObject.getSomeStatusInfo());\n}).listen(1337, \"127.0.0.1\");\n</code>", "<code>var myData = \"foo\";\ndatabase.connect( 'user:pass', function myCallback( result ) {\n    database.query(\"SELECT * from Foo where id = \" + myData);\n} );\n// Note that doSomethingElse() executes _BEFORE_ \"database.query\" which is inside a callback\ndoSomethingElse();\n</code>", "<code>// Pseudo code\nstat( 'somefile' )\n</code>", "<code>// Pseudo code\nstat( 'somefile', function( result ) {\n  // Use the result here\n} );\n// ...more code here\n</code>"], "path": "stack.browserify"}, {"tags": ["html", "css"], "creation_date": 1333665421, "body_markdown": "Basically I am wondering what is the advantage / purpose of using `@import` to import stylesheets into an existing stylesheet versus just adding another ...\r\n\r\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&quot; /&gt;\r\n\r\n to the head of the document?", "last_edit_date": 1398152139, "up_vote_count": 217, "link": "https://stackoverflow.com/questions/10036977/best-way-to-include-css-why-use-import", "_childDocuments_": [{"tags": [], "down_vote_count": 2, "creation_date": 1333665934, "answer_id": 10037045, "path": "stack.browserify.answer", "score": 6, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1333665934, "body_markdown": "There is not really much difference in adding a css stylesheet in the head versus using the import functionality. Using `@import` is generally used for chaining stylesheets so that one can be easily extended. It could be used to easily swap different color layouts for example in conjunction with some general css definitions. I would say the main advantage / purpose is extensibility.\r\n\r\nI agree with xbonez comment as well in that portability and maintainability are added benefits."}, {"tags": [], "down_vote_count": 1, "creation_date": 1333666023, "answer_id": 10037062, "path": "stack.browserify.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1333666023, "body_markdown": "I think the key in this are the two reasons why you are actually writing multiple CSS style sheets.\r\n\r\n 1. You write multiple sheets because the different pages of your website require different CSS definitions. Or at least not all of them require all the CSS definitions one other pages require. So you split up the CSS files in order to optimize what sheets are load on the different pages and avoid loading too many CSS definitions.\r\n 2. The second reason that comes to mind is that your CSS is getting that large that is becomes clumsy to handle and in order to make it easier to maintain the large CSS file you split them up into multiple CSS files.\r\n\r\nFor the first reason the additional &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag would apply as this allows you to load different set of CSS files for different pages.\r\n\r\nFor the second reason the &lt;code&gt;@import&lt;/code&gt; statement appears as the most handy because you get multiple CSS files but the files loaded are always the same.\r\n\r\nFrom the perspective of the loading time there is no different. The browser has to check and download the seperated CSS files no matter how they are implemented."}, {"tags": [], "down_vote_count": 1, "creation_date": 1333666032, "answer_id": 10037064, "path": "stack.browserify.answer", "score": 272, "up_vote_count": 273, "is_accepted": true, "last_activity_date": 1382320502, "last_edit_date": 1382320502, "body_markdown": "From a page speed standpoint, `@import` from a CSS file should almost never be used, as it can prevent stylesheets from being downloaded concurrently. For instance, if stylesheet A contains the text:\r\n\r\n    @import url(&quot;stylesheetB.css&quot;);\r\n\r\nthen the download of the second stylesheet may not start until the first stylesheet has been downloaded. If, on the other hand, both stylesheets are referenced in `&lt;link&gt;` elements in the main HTML page, both can be downloaded at the same time. If both stylesheets are always loaded together, it can also be helpful to simply combine them into a single file.\r\n\r\nThere are occasionally situations where `@import` is appropriate, but they are generally the exception, not the rule."}, {"tags": [], "down_vote_count": 1, "creation_date": 1333666250, "answer_id": 10037093, "path": "stack.browserify.answer", "score": 13, "up_vote_count": 14, "is_accepted": false, "last_activity_date": 1397631175, "last_edit_date": 1397631175, "body_markdown": "It is best to NOT use `@import` to include CSS in a page for speed reasons. See this excellent article to learn why not: [http://www.stevesouders.com/blog/2009/04/09/dont-use-import/][1]\r\n\r\nAlso it is often harder to minify and combine css files that are served via the @import tag, because minify scripts cannot &quot;peel out&quot; the @import lines from other css files. When you include them as &amp;lt;link tags you can use existing minify php/dotnet/java modules to do the minification.\r\n\r\nSo: use `&lt;link /&gt;` instead of `@import`.\r\n\r\n  [1]: http://www.stevesouders.com/blog/2009/04/09/dont-use-import/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1333666271, "answer_id": 10037097, "path": "stack.browserify.answer", "score": 12, "up_vote_count": 12, "is_accepted": false, "last_activity_date": 1333666271, "body_markdown": "using the link method, the stylesheets are loaded parallel (faster and better), and nearly all browsers support link\r\n\r\nimport loads any extra css files one-by-one (slower), and could give you Flash Of Unstyled Content"}, {"tags": [], "down_vote_count": 0, "creation_date": 1333666447, "answer_id": 10037129, "path": "stack.browserify.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1333666447, "body_markdown": "They are very similar. Some may argue that @import is more maintainable. However, each @import will cost you a new HTTP request in the same fashion as using the &quot;link&quot; method. So in the context of speed it is no faster. And as &quot;duskwuff&quot; said, it doesn&#39;t load simultaneously which is a downfall. "}, {"tags": [], "down_vote_count": 1, "creation_date": 1378853207, "answer_id": 18729965, "path": "stack.browserify.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1378853207, "body_markdown": "I experienced a &quot;high peak&quot; of linked stylesheets you can add. While adding any number of linked Javascript wasn&#39;t a problem for my free host provider, after doubling number of external stylesheets I got a crash/slow down.\r\nAnd the right code example is:\r\n\r\n    @import &#39;stylesheetB.css&#39;;\r\nSo, I find it useful for having a good mental map, as Nitram mentioned, while still at hard-coding the design.\r\nGodspeed.\r\nAnd I pardon for English grammatical mistakes, if any."}, {"tags": [], "down_vote_count": 0, "creation_date": 1383228585, "answer_id": 19708772, "path": "stack.browserify.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1383228585, "body_markdown": "One place where I use @import is when I&#39;m doing two versions of a page, English and French.  I&#39;ll build out my page in English, using a main.css.  When I build out the French version, I&#39;ll link to a French stylesheet (main_fr.css).  At the top of the French stylesheet, I&#39;ll import the main.css, and then redefine specific rules for just the parts I need different in the French version."}, {"tags": [], "down_vote_count": 0, "creation_date": 1383228762, "answer_id": 19708835, "path": "stack.browserify.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1383228762, "body_markdown": "@Nebo Iznad Mi\u0161o Grgur\r\n\r\nThe following are all correct ways to use @import\r\n\r\n    @import url(&quot;fineprint.css&quot;) print;\r\n    @import url(&quot;bluish.css&quot;) projection, tv;\r\n    @import &#39;custom.css&#39;;\r\n    @import url(&quot;chrome://communicator/skin/&quot;);\r\n    @import &quot;common.css&quot; screen, projection;\r\n    @import url(&#39;landscape.css&#39;) screen and (orientation:landscape);\r\n\r\nsource: https://developer.mozilla.org/en-US/docs/Web/CSS/@import"}, {"tags": [], "down_vote_count": 0, "creation_date": 1387301655, "answer_id": 20640940, "path": "stack.browserify.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1387301655, "body_markdown": "Use @import in your CSS if you are using a CSS RESET, like Eric Meyer&#39;s Reset CSS v2.0, so it does it&#39;s job before applying your CSS, thus preventing conflicts."}, {"tags": [], "down_vote_count": 0, "creation_date": 1397942902, "answer_id": 23175775, "path": "stack.browserify.answer", "score": 138, "up_vote_count": 138, "is_accepted": false, "last_activity_date": 1397943435, "last_edit_date": 1495540496, "body_markdown": "I&#39;m going to play devil&#39;s advocate, because I hate it when people agree too much.\r\n\r\n### 1. If you need a stylesheet that depends on another one, use @import. Do the optimization in a separate step. ###\r\n\r\nThere are two variables you&#39;re optimizing for at any given time - the performance of your code, and the *performance of the developer*. In many, if not a majority of cases, it&#39;s more important to *make the developer more efficient, and only then make the code more performant*.\r\n\r\nIf you have one stylesheet that *depends* on another, the most logical thing to do is to put them in two separate files and use @import. *That will make the most logical sense to the next person who looks at the code.*\r\n\r\n&gt; (When would such a dependency happen? It&#39;s pretty rare, in my opinion\r\n&gt; - usually one stylesheet is enough. However, there are some logical places to put things in different CSS files:)\r\n&gt; \r\n&gt;  - Theming: If you have different color schemes or themes for the same page, they may share some, but not all components.\r\n&gt;  - Subcomponents: A contrived example - say you have a restaurant page that includes a menu. If the menu is very different from the rest of\r\n&gt; the page, it&#39;ll be easier to maintain if it&#39;s in its own file.\r\n\r\nUsually stylesheets are independent, so it&#39;s reasonable to include them all using `&lt;link href&gt;`. However, if they are a dependent hierarchy, you should do the thing that makes the most logical sense to do.\r\n\r\n**Python uses import; C uses include; JavaScript has require. CSS has import; when you need it, use it!**\r\n\r\n\r\n### 2. Once you get to the point where the site needs to scale, concatenate all the CSS. ###\r\n\r\n\r\nMultiple CSS requests of **any** kind - whether through links or through @imports - [are bad practice][1] for high performance web sites. Once you&#39;re at the point where optimization matters, all your CSS should be flowing through a minifier. [Cssmin][2] combines import statements; as @Brandon points out, grunt has multiple options for doing so as well. ([See also this question][3]).\r\n\r\nOnce you&#39;re at the minified stage, `&lt;link&gt;` is faster, as people have pointed out, so at most link to a few stylesheets and don&#39;t @import any if at all possible.\r\n\r\n**Before the site reaches production scale though, it&#39;s more important that the code is organized and logical, than that it goes slightly faster.**\r\n\r\n\r\n  [1]: https://developers.google.com/speed/docs/best-practices/rtt#CombineExternalCSS\r\n  [2]: https://github.com/gruntjs/grunt-contrib-cssmin/pull/25\r\n  [3]: https://stackoverflow.com/questions/787789/any-recommendations-for-a-css-minifier"}, {"tags": [], "down_vote_count": 0, "creation_date": 1397945134, "answer_id": 23176121, "path": "stack.browserify.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1409840401, "last_edit_date": 1409840401, "body_markdown": "Quoted from http://webdesign.about.com/od/beginningcss/f/css_import_link.htm\r\n\r\n&gt;The main purpose of @import method is to use multiple style sheets on a page, but only one link in your &lt; head &gt;. For example, a corporation might have a global style sheet for every page on the site, with sub-sections having additional styles that only apply to that sub-section. By linking to the sub-section style sheet and importing the global styles at the top of that style sheet, you don&#39;t have to maintain a gigantic style sheet with all the styles for the site and every sub-section. The only requirement is that any @import rules need to come before the rest of your style rules. And remember that inheritance can still be a problem."}, {"tags": [], "down_vote_count": 0, "creation_date": 1411838879, "answer_id": 26077292, "path": "stack.browserify.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1411838879, "body_markdown": "I think @import is most useful when writing code for multiple devices. Include a conditional statement to only include the style for the device in question, then only one sheet gets loaded. You can still use the link tag to add any common style elements."}, {"tags": [], "down_vote_count": 3, "creation_date": 1415806666, "answer_id": 26890756, "path": "stack.browserify.answer", "score": -1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1415807212, "last_edit_date": 1415807212, "body_markdown": "There is almost no reason to use @import as it loads every single imported CSS file separately and can slow your site down significantly. If you are interested in the optimal way to deal with CSS(when it comes to page speed), this is how you should deal with **all** your CSS code:\r\n\r\n- **Open all your CSS files and copy the code of every single file** \r\n- **Paste all the code in between a single STYLE tag in the HTML header of your page**\r\n- **Never use CSS @import or separate CSS files to deliver CSS unless you have a large amount of code or there is a specific need to.**\r\n\r\nMore detailed information here: http://www.giftofspeed.com/optimize-css-delivery/\r\n\r\nThe reason the above works best is because it creates less requests for the browser to deal with and it can immediately start rendering the CSS instead of downloading separate files."}, {"tags": [], "down_vote_count": 0, "creation_date": 1438728939, "answer_id": 31820731, "path": "stack.browserify.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1438728939, "body_markdown": "Sometimes you have to use @import as opposed to inline &lt;link&gt;.  If you are working on a complex application that has 32 or more css files and you must support IE9 there is no choice.  IE9 ignores any css file after the first 31 and this includes and inline &lt;style&gt; css.  However, each sheet can import 31 others."}, {"tags": [], "down_vote_count": 4, "creation_date": 1459289938, "answer_id": 36296124, "path": "stack.browserify.answer", "score": -2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1459289938, "body_markdown": "This might help a PHP developer out. The below functions will strip white space, remove comments, and concatenate of all your CSS files. Then insert it into a `&lt;style&gt;` tag in the head before page load.\r\n\r\nThe function below will strip comments and minify the passed in css. It is paired in conjunction with the next function.\r\n\r\n\t&lt;?php\r\n\tfunction minifyCSS($string)\r\n\t{\r\n\t\t// Minify CSS and strip comments\r\n\t\t\r\n\t\t# Strips Comments\r\n\t\t$string = preg_replace(&#39;!/\\*.*?\\*/!s&#39;,&#39;&#39;, $string);\r\n\t\t$string = preg_replace(&#39;/\\n\\s*\\n/&#39;,&quot;\\n&quot;, $string);\r\n\t\t\r\n\t\t# Minifies\r\n\t\t$string = preg_replace(&#39;/[\\n\\r \\t]/&#39;,&#39; &#39;, $string);\r\n\t\t$string = preg_replace(&#39;/ +/&#39;,&#39; &#39;, $string);\r\n\t\t$string = preg_replace(&#39;/ ?([,:;{}]) ?/&#39;,&#39;$1&#39;,$string);\r\n\t\t\r\n\t\t# Remove semicolon\r\n\t\t$string = preg_replace(&#39;/;}/&#39;,&#39;}&#39;,$string);\r\n\t\t\r\n\t\t# Return Minified CSS\r\n\t\treturn $string;\r\n\t}\r\n\t?&gt;\r\n\r\nYou will call this function in the head of your document.\r\n\r\n    &lt;?php\r\n\tfunction concatenateCSS($cssFiles)\r\n\t{\r\n\t\t// Load all relevant css files\r\n\t\t\r\n\t\t# concatenate all relevant css files\r\n\t\t$css = &#39;&#39;;\r\n\t\tforeach ($cssFiles as $cssFile)\r\n\t\t{\r\n\t\t\t$css = $css . file_get_contents(&quot;$cssFile.css&quot;);\r\n\t\t}\r\n\t\t\r\n\t\t# minify all css\r\n\t\t$css = minifyCSS($css);\r\n\t\techo &quot;&lt;style&gt;$css&lt;/style&gt;&quot;;\r\n\t}\r\n\t?&gt;\r\n\r\nInclude the function `concatenateCSS()` in your document head. Pass in an array with the names of your stylesheets with its path IE: `css/styles.css`. You are not required to add the extension `.css` as it is added automatically in the function above.\r\n\r\n    &lt;head&gt;\r\n        &lt;title&gt;&lt;/title&gt;\r\n        &lt;?php\r\n        $stylesheets = array(\r\n\t\t\t&quot;bootstrap/css/bootstrap.min&quot;, \r\n\t\t\t&quot;css/owl-carousel.min&quot;, \r\n\t\t\t&quot;css/style&quot;\r\n\t\t\t);\r\n\t\tconcatenateCSS( $stylesheets );\r\n\t\t?&gt;\r\n    &lt;/head&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1500336440, "answer_id": 45155429, "path": "stack.browserify.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1500336776, "last_edit_date": 1500336776, "body_markdown": "There are many GOOD reasons to use @import.\r\n\r\nOne powerful reason for using @import is to do cross-browser design. Imported sheets, in general, are hidden from many older browsers, which allows you to apply specific formatting for very old browsers like Netscape 4 or older series, Internet Explorer 5.2 for Mac, Opera 6 and older, and IE 3 and 4 for PC.\r\n\r\nTo do this, in your base.css file you could have the following:\r\n\r\n    @import &#39;newerbrowsers.css&#39;;\r\n\r\n    body {\r\n      font-size:13px;\r\n    }\r\n\r\nIn your imported custom sheet (newerbrowsers.css) simply apply the newer cascading style:\r\n\r\n    html body {\r\n      font-size:1em;\r\n    }\r\n\r\nUsing &quot;em&quot; units is superior to &quot;px&quot; units as it allows both the fonts and design to stretch based on user settings, where as older browsers do better with pixel-based (which are rigid and cannot be changed in browser user settings). The imported sheet would not be seen by most older browsers.\r\n\r\nYou may so, who cares! Try going to some larger antiquated government or corporate systems and you will still see those older browsers used. But its really just good design, because the browser you love today will also someday be antiquated and outdated as well. And using CSS in a limited way means you now have an even larger and growing group of user-agents that dont work well with you site.\r\n\r\nUsing @import your cross-browser web site compatibility will now reach 99.9% saturation simply because so many older browser wont read the imported sheets. It guarantees you apply a basic simple font set for their html, but more advanced CSS is used by newer agents. This allows content to be accessible for older agents without compromising rich visual displays needed in newer desktop browsers.\r\n\r\nRemember, modern browsers cache HTML structures and CSS extremely well after the first call to a web site. Multiple calls to the server is not the bottleneck it once was.\r\n\r\nMegabytes and megabytes of Javascript API&#39;s and JSON uploaded to smart devices and poorly designed HTML markup that is not consistent between pages is the main driver of slow rendering today. Youre average Google news page is over 6 megabytes of ECMAScript just to render a tiny bit of text! LOL\r\n\r\nA few kilobytes of cached CSS and consistent clean HTML with smaller javascript footprints will render in a user-agent in lightning speed simply because the browser caches both consistent DOM markup and CSS, unless you choose to manipulate and change that via javascript circus tricks."}], "title": "Best way to include CSS? Why use @import?", "view_count": 271054, "answer_count": 17, "code_snippet": ["<code>@import</code>", "<code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"\" /&gt;\n</code>", "<code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"theme.css\"&gt;</code>", "<code>@import</code>", "<code>@import url(\"stylesheetB.css\");\n</code>", "<code>&lt;link&gt;</code>", "<code>@import</code>", "<code>There are occasionally situations where @import is appropriate</code>", "<code>@media</code>", "<code>@import</code>", "<code>@import url(http://fonts.googleapis.com/css?family=Archivo+Narrow);</code>", "<code>link</code>", "<code>@import</code>", "<code>grunt-concat-css</code>", "<code>@import</code>", "<code>@import</code>", "<code>grunt-browserify</code>", "<code>@import</code>", "<code>&lt;link&gt;</code>", "<code>@import</code>", "<code>&lt;link href&gt;</code>", "<code>&lt;link&gt;</code>", "<code>@import</code>", "<code>&lt;link /&gt;</code>", "<code>@import</code>", "<code>@import url(\"fineprint.css\") print;\n@import url(\"bluish.css\") projection, tv;\n@import 'custom.css';\n@import url(\"chrome://communicator/skin/\");\n@import \"common.css\" screen, projection;\n@import url('landscape.css') screen and (orientation:landscape);\n</code>", "<code>@import</code>", "<code>@import 'newerbrowsers.css';\n\nbody {\n  font-size:13px;\n}\n</code>", "<code>html body {\n  font-size:1em;\n}\n</code>", "<code>&lt;link&gt;</code>", "<code>@import</code>", "<code>@import 'stylesheetB.css';\n</code>", "<code>&lt;HEAD&gt;</code>", "<code>&lt;style&gt;</code>", "<code>&lt;?php\nfunction minifyCSS($string)\n{\n    // Minify CSS and strip comments\n\n    # Strips Comments\n    $string = preg_replace('!/\\*.*?\\*/!s','', $string);\n    $string = preg_replace('/\\n\\s*\\n/',\"\\n\", $string);\n\n    # Minifies\n    $string = preg_replace('/[\\n\\r \\t]/',' ', $string);\n    $string = preg_replace('/ +/',' ', $string);\n    $string = preg_replace('/ ?([,:;{}]) ?/','$1',$string);\n\n    # Remove semicolon\n    $string = preg_replace('/;}/','}',$string);\n\n    # Return Minified CSS\n    return $string;\n}\n?&gt;\n</code>", "<code>&lt;?php\nfunction concatenateCSS($cssFiles)\n{\n    // Load all relevant css files\n\n    # concatenate all relevant css files\n    $css = '';\n    foreach ($cssFiles as $cssFile)\n    {\n        $css = $css . file_get_contents(\"$cssFile.css\");\n    }\n\n    # minify all css\n    $css = minifyCSS($css);\n    echo \"&lt;style&gt;$css&lt;/style&gt;\";\n}\n?&gt;\n</code>", "<code>concatenateCSS()</code>", "<code>css/styles.css</code>", "<code>.css</code>", "<code>&lt;head&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;?php\n    $stylesheets = array(\n        \"bootstrap/css/bootstrap.min\", \n        \"css/owl-carousel.min\", \n        \"css/style\"\n        );\n    concatenateCSS( $stylesheets );\n    ?&gt;\n&lt;/head&gt;\n</code>", "<code>file_get_contents()</code>"], "path": "stack.browserify"}, {"tags": ["javascript", "module", "requirejs", "amd", "commonjs"], "creation_date": 1368446183, "body_markdown": "I&#39;m still very confused about CommonJS, AMD and RequireJS. Even after reading a lot.\r\n\r\nI know that CommonJS (formerly ServerJS) is a group for defining some JavaScript specifications (i.e. modules) when the language is used outside the browser. CommonJS modules specification has some implementation like Node.js or RingoJS, right?\r\n\r\nWhat&#39;s the relation between CommonJS, Asynchronous Module Definition (AMD) and RequireJS? Is RequireJS an implementation of CommonJS module definition? If yes, what&#39;s AMD then?", "last_edit_date": 1507734677, "up_vote_count": 693, "link": "https://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1368450410, "answer_id": 16522834, "path": "stack.browserify.answer", "score": 180, "up_vote_count": 180, "is_accepted": false, "last_activity_date": 1472994255, "last_edit_date": 1472994255, "body_markdown": "[CommonJS][1] is more than that - it&#39;s a project to define a common API and ecosystem for JavaScript. One part of CommonJS is the [Module][2] specification. Node.js and RingoJS are server-side JavaScript runtimes, and yes, both of them implement modules based on the CommonJS Module spec.\r\n\r\n[AMD][3] (Asynchronous Module Definition) is another specification for modules. [RequireJS][4] is probably the most popular implementation of AMD. One major difference from CommonJS is that AMD specifies that modules are loaded *asynchronously* - that means modules are loaded in parallel, as opposed to blocking the execution by waiting for a load to finish.\r\n\r\nAMD is generally more used in client-side (in-browser) JavaScript development due to this, and CommonJS Modules are generally used server-side. However, you can use either module spec in either environment - for example, RequireJS offers [directions for running in Node.js][5] and [browserify][6] is a CommonJS Module implementation that can run in the browser.\r\n\r\n\r\n  [1]: http://www.commonjs.org/\r\n  [2]: http://wiki.commonjs.org/wiki/Modules/1.1\r\n  [3]: https://github.com/amdjs/amdjs-api/blob/master/AMD.md\r\n  [4]: http://requirejs.org/\r\n  [5]: http://requirejs.org/docs/node.html\r\n  [6]: http://browserify.org/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1368450848, "answer_id": 16522990, "path": "stack.browserify.answer", "score": 662, "up_vote_count": 663, "is_accepted": true, "last_activity_date": 1500651797, "last_edit_date": 1500651797, "body_markdown": "**RequireJS** implements the **AMD** API [(source)][1].\r\n\r\n**CommonJS** is a way of defining modules with the help of an `exports` object, that defines the module contents. Simply put, a CommonJS implementation might work like this:\r\n\r\n    // someModule.js\r\n    exports.doSomething = function() { return &quot;foo&quot;; };\r\n    \r\n    //otherModule.js\r\n    var someModule = require(&#39;someModule&#39;); // in the vein of node    \r\n    exports.doSomethingElse = function() { return someModule.doSomething() + &quot;bar&quot;; };\r\n\r\nBasically, CommonJS specifies that you need to have a `require()` function to fetch dependencies, an `exports` variable to export module contents and a module identifier (which describes the location of the module in question in relation to this module) that is used to require the dependencies ([source][2]). CommonJS has various implementations, including **Node.js**, which you mentioned.\r\n\r\nCommonJS was not particularly designed with browsers in mind, so it doesn&#39;t fit in the browser environment very well (*I really have no source for this--it just says so everywhere, including [the RequireJS site.*][3]) Apparently, this has something to do with asynchronous loading, etc. \r\n\r\nOn the other hand, RequireJS implements AMD, which is designed to suit the browser environment ([source][4]). Apparently, AMD started as a spinoff of the CommonJS Transport format and evolved into its own module definition API. Hence the similarities between the two. The new feature in AMD is the `define()` function that allows the module to declare its dependencies before being loaded. For example, the definition could be:\r\n\r\n    define(&#39;module/id/string&#39;, [&#39;module&#39;, &#39;dependency&#39;, &#39;array&#39;], \r\n    function(module, factory function) {\r\n      return ModuleContents;  \r\n    });\r\n\r\nSo, CommonJS and AMD are **JavaScript** module definition APIs that have different implementations, but both come from the same origins.\r\n\r\n- **AMD** is more suited for the browser, because it supports asynchronous loading of module dependencies.\r\n- **RequireJS** is an implementation of **AMD**, while at the same time trying to keep the spirit of **CommonJS** (mainly in the module identifiers).\r\n\r\nTo confuse you even more, RequireJS, while being an AMD implementation, offers a CommonJS wrapper so CommonJS modules can almost directly be imported for use with RequireJS.\r\n\r\n    define(function(require, exports, module) {\r\n      var someModule = require(&#39;someModule&#39;); // in the vein of node    \r\n      exports.doSomethingElse = function() { return someModule.doSomething() + &quot;bar&quot;; };\r\n    });\r\n\r\nI hope this helps to clarify things!\r\n\r\n  [1]: http://www.requirejs.org/docs/whyamd.html\r\n  [2]: http://wiki.commonjs.org/wiki/Modules/1.1.1\r\n  [3]: http://requirejs.org/docs/commonjs.html\r\n  [4]: https://github.com/amdjs/amdjs-api/wiki/AMD\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1388358349, "answer_id": 20831097, "path": "stack.browserify.answer", "score": 168, "up_vote_count": 168, "is_accepted": false, "last_activity_date": 1401843351, "last_edit_date": 1401843351, "body_markdown": "The short answer would be:\r\n==========================\r\n\r\n**[CommonJS][1]** and **[AMD][2]** are specifications (or formats) on how modules and their dependencies should be declared in javascript applications.\r\n\r\n**[RequireJS][3]** is a script loader library that is AMD compliant, [curljs][4] being another example.\r\n\r\nCommonJS compliant:\r\n-------------------\r\n\r\nTaken from [Addy Osmani&#39;s book][5].\r\n\r\n    // package/lib is a dependency we require\r\n    var lib = require( &quot;package/lib&quot; );\r\n     \r\n    // behavior for our module\r\n    function foo(){\r\n        lib.log( &quot;hello world!&quot; );\r\n    }\r\n     \r\n    // export (expose) foo to other modules as foobar\r\n    exports.foobar = foo;\r\n\r\nAMD compliant:\r\n--------------\r\n\r\n    // package/lib is a dependency we require\r\n    define([&quot;package/lib&quot;], function (lib) {\r\n\r\n        // behavior for our module\r\n        function foo() {\r\n            lib.log( &quot;hello world!&quot; );\r\n        }\r\n\r\n        // export (expose) foo to other modules as foobar\r\n        return {\r\n            foobar: foo\r\n        }\r\n    });\r\n\r\nSomewhere else the module can be used with:\r\n\r\n    require([&quot;package/myModule&quot;], function(myModule) {\r\n        myModule.foobar();\r\n    });\r\n\r\nSome background:\r\n================\r\n\r\nActually, [CommonJS][6] is much more than an API declaration and only a part of it deals with that. AMD started as a draft specification for the module format on the CommonJS list, but full consensus wasn&#39;t reached and further development of the format moved to the [amdjs group][7]. Arguments around which format is better state that CommonJS attempts to cover a broader set of concerns and that it&#39;s better suited for server side development given its synchronous nature, and that AMD is better suited for client side (browser) development given its asynchronous nature and the fact that it has its roots in Dojo&#39;s module declaration implementation.\r\n\r\nSources:\r\n--------\r\n\r\n - [RequireJS - Why AMD?][8]\r\n - [Addy Osmani - Learning JavaScript Design Patterns - Modern Modular JavaScript Design Patterns][9]\r\n\r\n\r\n  [1]: http://wiki.commonjs.org/wiki/Modules\r\n  [2]: https://github.com/amdjs\r\n  [3]: http://requirejs.org/\r\n  [4]: http://davidwalsh.name/curljs\r\n  [5]: http://addyosmani.com/resources/essentialjsdesignpatterns/book/#detailcommonjs\r\n  [6]: http://wiki.commonjs.org/wiki/CommonJS\r\n  [7]: https://github.com/amdjs\r\n  [8]: http://requirejs.org/docs/whyamd.html\r\n  [9]: http://addyosmani.com/resources/essentialjsdesignpatterns/book/#modularjavascript"}, {"tags": [], "down_vote_count": 2, "creation_date": 1438166166, "answer_id": 31698056, "path": "stack.browserify.answer", "score": 19, "up_vote_count": 21, "is_accepted": false, "last_activity_date": 1438909355, "last_edit_date": 1438909355, "body_markdown": "[Quoting](http://addyosmani.com/writing-modular-js/)\r\n\r\n**AMD**:\r\n\r\n- One browser-first approach \r\n- Opting for asynchronous behavior and simplified backwards compatibility\r\n- It doesn&#39;t have any concept of File I/O. \r\n- It supports objects, functions, constructors, strings, JSON and many other types of modules.\r\n\r\n**CommonJS**:\r\n\r\n- One server-first approach\r\n- Assuming synchronous behavior\r\n- Cover a broader set of concerns such as I/O, File system, Promises and more.\r\n- Supports unwrapped modules, it can feel a little more close to the [ES.next/Harmony](http://wiki.ecmascript.org/doku.php?id=harmony:modules) specifications, freeing you of the define() wrapper that `AMD` enforces. \r\n- Only support objects as modules."}, {"tags": [], "down_vote_count": 1, "creation_date": 1477871448, "answer_id": 40334896, "path": "stack.browserify.answer", "score": 9, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1494259945, "last_edit_date": 1494259945, "body_markdown": "It is quite normal to organize JavaScript program modular into several files and to call `child-modules` from the `main js module`. \r\n\r\nThe thing is JavaScript doesn&#39;t provide this. Not even today in latest browser versions of Chrome and FF. \r\n\r\n&gt;But, is there any keyword in JavaScript to call another JavaScript module? \r\n\r\nThis question may be a total collapse of the world for many because the answer is **No**.\r\n\r\n---\r\n\r\nIn ES5 ( released at 2009 ) JavaScript had no keywords like **import**, **include**, or **require**.\r\n\r\nES6 saves the day ( released at 2015 ) proposing the **import** keyword (  https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/import ), but no browser implements this.\r\n\r\nIf you use Babel 6.18.0 and transpile with ES2015 option only \r\n\r\n    import myDefault from &quot;my-module&quot;;\r\n\r\nyou will get `require` again.\r\n\r\n    &quot;use strict&quot;;\r\n    var _myModule = require(&quot;my-module&quot;);\r\n    var _myModule2 = _interopRequireDefault(_myModule);\r\n    function _interopRequireDefault(obj) { return obj &amp;&amp; obj.__esModule ? obj : { default: obj }; }\r\n\r\nThis is because `require` means the module will be loaded from Node.js. Node.js will handle everything from system level file read to wrapping functions into the module.\r\n\r\nBecause in JavaScript functions are the only wrappers to represent the modules.\r\n\r\n&gt;I&#39;m a lot confused about CommonJS and AMD?\r\n\r\nBoth CommonJS and AMD are just two different techniques how to overcome the JavaScript &quot;defect&quot; to load modules smart.\r\n"}], "title": "Relation between CommonJS, AMD and RequireJS?", "view_count": 139333, "answer_count": 5, "code_snippet": ["<code>exports</code>", "<code>// someModule.js\nexports.doSomething = function() { return \"foo\"; };\n\n//otherModule.js\nvar someModule = require('someModule'); // in the vein of node    \nexports.doSomethingElse = function() { return someModule.doSomething() + \"bar\"; };\n</code>", "<code>require()</code>", "<code>exports</code>", "<code>define()</code>", "<code>define('module/id/string', ['module', 'dependency', 'array'], \nfunction(module, factory function) {\n  return ModuleContents;  \n});\n</code>", "<code>define(function(require, exports, module) {\n  var someModule = require('someModule'); // in the vein of node    \n  exports.doSomethingElse = function() { return someModule.doSomething() + \"bar\"; };\n});\n</code>", "<code>// package/lib is a dependency we require\nvar lib = require( \"package/lib\" );\n\n// behavior for our module\nfunction foo(){\n    lib.log( \"hello world!\" );\n}\n\n// export (expose) foo to other modules as foobar\nexports.foobar = foo;\n</code>", "<code>// package/lib is a dependency we require\ndefine([\"package/lib\"], function (lib) {\n\n    // behavior for our module\n    function foo() {\n        lib.log( \"hello world!\" );\n    }\n\n    // export (expose) foo to other modules as foobar\n    return {\n        foobar: foo\n    }\n});\n</code>", "<code>require([\"package/myModule\"], function(myModule) {\n    myModule.foobar();\n});\n</code>", "<code>AMD compliant</code>", "<code>AMD</code>", "<code>child-modules</code>", "<code>main js module</code>", "<code>import myDefault from \"my-module\";\n</code>", "<code>require</code>", "<code>\"use strict\";\nvar _myModule = require(\"my-module\");\nvar _myModule2 = _interopRequireDefault(_myModule);\nfunction _interopRequireDefault(obj) { return obj &amp;&amp; obj.__esModule ? obj : { default: obj }; }\n</code>", "<code>require</code>"], "path": "stack.browserify"}, {"tags": ["node.js", "ecmascript-6", "bower", "js-amd", "es2015"], "creation_date": 1395871481, "body_markdown": "I am creating my first Bower component. After running `bower init` the script asks me &#39;what types of modules does this package expose?&#39; with these options:\r\n\r\n - amd \r\n - es6 \r\n - globals \r\n - node\r\n\r\nwhat is the difference between these options?", "last_edit_date": 1451034477, "up_vote_count": 289, "link": "https://stackoverflow.com/questions/22674018/bower-init-difference-between-amd-es6-globals-and-node", "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1395913345, "answer_id": 22683614, "path": "stack.bower.answer", "score": 121, "up_vote_count": 121, "is_accepted": true, "last_activity_date": 1451159938, "last_edit_date": 1451159938, "body_markdown": "If you don&#39;t know, it&#39;s quite likely globals is the right answer for you.\r\n\r\nEither way, you need to understand:\r\n\r\n * [what is and why AMD][1]\r\n * [what is a nodejs module][2]\r\n * [what is ecmascript 6 and especially es6 modules][3]\r\n\r\n## [UPDATE]\r\n\r\nThis feature was introduced very recently in bower and is not documented at all yet (AFAIK). It essentially describes the `moduleType`, which states for what module technology the package is meant to be consumed (see above).\r\n\r\nRight now, It doesn&#39;t have any effect apart from setting the `moduleType` property in the `bower.json` file of the package.\r\n\r\nSee https://github.com/bower/bower/pull/934 for the original pull-request.\r\n\r\n## [UPDATE #2]\r\n\r\nA few additional points, to answer comments:\r\n\r\n * right now AFAIK there is no validation done on the `moduleType` property - which means that people are technically allowed to use whatever value they want for it, including `angularjs` if they feel inclined to do so\r\n * the [bower committee][4] seems to not be keen toward the inclusion of additional `non-interoperable/proprietary moduleTypes` (think composer, angular, etc) - which is easily understandable, but yet again, nothing really prevents people from using the `moduleType` value they want\r\n * an exception to the previous is the (somewhat) recent inclusion of the `yui moduleType`, so, there are &quot;exceptions&quot; to be made, assuming they are [part of a concerted plan][5]\r\n\r\nWhat I would do if I were to author a package for a not-listed package manager and publish it on bower?\r\n\r\nI would author an es6 module, and use / patch [es6-transpiler][6] to output the package format I need. Then I would either/and:\r\n\r\n * petition the bower guys to include my package technology as a choice (based on the fact it&#39;s supported by es6-transpiler as a target)\r\n * publish my package including both the es6 module version of it and the transpiled XXX version of it, and use `es6` as a `moduleType`\r\n\r\nDisclaimer: I don&#39;t have real-life experience authoring angularjs modules.\r\n\r\n  [1]: http://requirejs.org/docs/whyamd.html\r\n  [2]: http://nodejs.org/api/modules.html\r\n  [3]: http://wiki.ecmascript.org/doku.php?id=harmony:modules\r\n  [4]: https://github.com/bower/bower/pull/1129#issuecomment-37359448\r\n  [5]: https://github.com/bower/bower/pull/1129#issuecomment-37828996\r\n  [6]: https://github.com/square/es6-module-transpiler"}, {"tags": [], "down_vote_count": 1, "creation_date": 1415270396, "answer_id": 26777353, "path": "stack.bower.answer", "score": 27, "up_vote_count": 28, "is_accepted": false, "last_activity_date": 1457600094, "last_edit_date": 1457600094, "body_markdown": "## Initial\r\n\r\nI&#39;m using `bower init` for first time too.\r\n\r\nThe options should refer to the different ways to modularize some JavaScript code:\r\n\r\n* amd: using AMD `define`, like requirejs.\r\n* node: using Node.js `require`.\r\n* globals: using JavaScript module pattern to expose a global variable (like window.JQuery).\r\n* es6: using upcoming EcmaScript6 module feature.\r\n\r\nIn my case I wrote a Node.js module [dflow][1] but I&#39;m using browserify to create a *dist/dflow.js* file that exports a global *dflow* var: so I selected **globals**.\r\n\r\n## Other Updates\r\n\r\nThe command I used to browserify [dflow][1] as a *window* global object was\r\n\r\n```\r\nbrowserify -s dflow -e index.js -o dist/dflow.js\r\n```\r\n\r\nI changed it cause I prefer to use *require* also inside the browser, so now I am using\r\n\r\n```\r\nbrowserify -r ./index.js:dflow -o dist/dflow.js\r\n```\r\n\r\nand so I changed the *bower.moduleType* to **node** in my *bower.json* file.\r\n\r\nThe main motivation was that if my module name has a dash, for example my project [flow-view][2], I need to *camelize* the global name in *flowView*.\r\n\r\nThis new approach has two other benefits:\r\n\r\n1. Node and browser interface are the same. Using *require* on both client side and server side, let me write only once the code examples, and reuse them easily on both contexts.\r\n2. I use npm scripts and so, I can take advantage of `${npm_package_name}` variable and write once the script I use to browserify.\r\n\r\nThis is another topic, but, it is really worth that you consider how it is useful the latter benefit: let me share the `npm.scripts.browserify` attribute I use in my *package.json* \r\n\r\n`&quot;browserify&quot;: &quot;browserify -r ./index.js:${npm_package_name} -o dist/${npm_package_name}.js&quot;`\r\n\r\n  [1]: http://g14n.info/dflow &quot;dflow&quot;\r\n  [2]: http://g14n.info/flow-view &quot;flow-view&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1454934339, "answer_id": 35269660, "path": "stack.bower.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1454934339, "body_markdown": "Just for reference, this is precisely what bower specifies regarding the module types:\r\n\r\n&gt; The type of module defined in the `main` JavaScript file. Can be one or an array of the following strings:\r\n\r\n&gt; - `globals`: JavaScript module that adds to global namespace, using `window.namespace` or `this.namespace` syntax\r\n&gt; - `amd`: JavaScript module compatible with AMD, like [RequireJS][1], using `define()` syntax\r\n&gt; - `node`: JavaScript module compatible with [node][2] and [CommonJS][3] using `module.exports` syntax\r\n&gt; - `es6`: JavaScript module compatible with [ECMAScript 6 modules][4], using `export` and `import` syntax\r\n&gt; - `yui`: JavaScript module compatible with [YUI Modules][5], using `YUI.add()` syntax\r\n\r\nRelevant link: https://github.com/bower/spec/blob/master/json.md#moduletype\r\n\r\n\r\n  [1]: http://requirejs.org/\r\n  [2]: https://nodejs.org/\r\n  [3]: https://nodejs.org/docs/latest/api/modules.html\r\n  [4]: http://www.2ality.com/2014/09/es6-modules-final.html\r\n  [5]: http://yuilibrary.com/yui/docs/yui/create.html"}], "title": "bower init - difference between amd, es6, globals and node", "view_count": 33908, "answer_count": 3, "code_snippet": ["<code>bower init</code>", "<code>moduleType</code>", "<code>moduleType</code>", "<code>bower.json</code>", "<code>moduleType</code>", "<code>angularjs</code>", "<code>non-interoperable/proprietary moduleTypes</code>", "<code>moduleType</code>", "<code>yui moduleType</code>", "<code>es6</code>", "<code>moduleType</code>", "<code>angularjs</code>", "<code>globals</code>", "<code>bower init</code>", "<code>define</code>", "<code>require</code>", "<code>\nbrowserify -s dflow -e index.js -o dist/dflow.js\n</code>", "<code>\nbrowserify -r ./index.js:dflow -o dist/dflow.js\n</code>", "<code>${npm_package_name}</code>", "<code>npm.scripts.browserify</code>", "<code>\"browserify\": \"browserify -r ./index.js:${npm_package_name} -o dist/${npm_package_name}.js\"</code>", "<code>define(function(require, exports, module) {   \"use strict\";    module.exports = {     Collection: require(\"./collection\"),     View: require('./view')   }; });</code>", "<code>main</code>", "<code>globals</code>", "<code>window.namespace</code>", "<code>this.namespace</code>", "<code>amd</code>", "<code>define()</code>", "<code>node</code>", "<code>module.exports</code>", "<code>es6</code>", "<code>export</code>", "<code>import</code>", "<code>yui</code>", "<code>YUI.add()</code>"], "path": "stack.browserify"}, {"tags": ["node.js", "npm", "version", "versioning"], "creation_date": 1328480137, "body_markdown": "Is there a way to get the version set in `package.json` in a nodejs app? I would want something like this\r\n\r\n    var port = process.env.PORT || 3000\r\n    app.listen port\r\n    console.log &quot;Express server listening on port %d in %s mode %s&quot;, app.address().port, app.settings.env, app.VERSION\r\n", "last_edit_date": 1488324127, "up_vote_count": 325, "link": "https://stackoverflow.com/questions/9153571/is-there-a-way-to-get-version-from-package-json-in-nodejs-code", "_childDocuments_": [{"tags": [], "down_vote_count": 7, "creation_date": 1337560031, "answer_id": 10678373, "path": "stack.browserify.answer", "score": 26, "up_vote_count": 33, "is_accepted": false, "last_activity_date": 1337560031, "body_markdown": "Here is how to read the version out of package.json:\r\n\r\n    fs = require(&#39;fs&#39;)\r\n    json = JSON.parse(fs.readFileSync(&#39;package.json&#39;, &#39;utf8&#39;))\r\n    version = json.version\r\n"}, {"tags": [], "down_vote_count": 3, "creation_date": 1338573097, "answer_id": 10855054, "path": "stack.browserify.answer", "score": 654, "up_vote_count": 657, "is_accepted": true, "last_activity_date": 1462784152, "last_edit_date": 1462784152, "body_markdown": "I found that the following code fragment worked best for me. Since it uses &#39;require&#39; to load the package.json, it works regardless the current working directory.\r\n\r\n    var pjson = require(&#39;./package.json&#39;);\r\n    console.log(pjson.version);\r\n\r\nA warning, courtesy of @Pathogen:\r\n \r\n\r\n&gt; Doing this with browserify has security implications.  \r\n&gt; Be careful not to expose your package.json to the client, as it means that all your dependency version numbers, build and test commands and more are sent to the client.  \r\n&gt; If you&#39;re building server and client in the same project, you expose your server-side version numbers too.  \r\n&gt; Such specific data can be used by an attacker to better fit the attack your server."}, {"tags": [], "down_vote_count": 2, "creation_date": 1394034634, "answer_id": 22202528, "path": "stack.browserify.answer", "score": 17, "up_vote_count": 19, "is_accepted": false, "last_activity_date": 1394034634, "body_markdown": "There is another way of fetching certain information from your `package.json` file namely using [pkginfo][1] module.\r\n\r\nUsage of this module is very simple. You can get all package variables using:\r\n\r\n    require(&#39;pkginfo&#39;)(module);\r\n\r\nOr only certain details (`version` in this case)\r\n\r\n    require(&#39;pkginfo&#39;)(module, &#39;version&#39;);\r\n\r\nAnd your package variables will be set to `module.exports` (so version number will be accessible via `module.exports.version`).\r\n\r\nYou could use the following code snippet:\r\n\r\n    require(&#39;pkginfo&#39;)(module, &#39;version&#39;);\r\n    console.log &quot;Express server listening on port %d in %s mode %s&quot;, app.address().port, app.settings.env, module.exports.version\r\n\r\n---\r\n\r\nThis module has very nice feature - it can be used in any file in your project (e.g. in subfolders) and it will automatically fetch information from your `package.json`. So you do not have to worry where you `package.json` is.\r\n\r\nI hope that will help.\r\n\r\n  [1]: https://www.npmjs.org/package/pkginfo"}, {"tags": [], "down_vote_count": 3, "creation_date": 1394582412, "answer_id": 22339262, "path": "stack.browserify.answer", "score": 180, "up_vote_count": 183, "is_accepted": false, "last_activity_date": 1486319305, "last_edit_date": 1486319305, "body_markdown": "If your application is launched with &#39;npm start&#39;, you can simply use:\r\n    \r\n    process.env.npm_package_version\r\n\r\nSee [package.json vars][1] for more details.\r\n\r\n  [1]: https://docs.npmjs.com/misc/scripts#packagejson-vars"}, {"tags": [], "down_vote_count": 0, "creation_date": 1421594118, "answer_id": 28011253, "path": "stack.browserify.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1421594118, "body_markdown": "I do this with [`findup-sync`][1]:\r\n\r\n    var findup = require(&#39;findup-sync&#39;);\r\n    var packagejson = require(findup(&#39;package.json&#39;));\r\n    console.log(packagejson.version); // =&gt; &#39;0.0.1&#39; \r\n\r\n  [1]: https://github.com/cowboy/node-findup-sync"}, {"tags": [], "down_vote_count": 5, "creation_date": 1447154665, "answer_id": 33628871, "path": "stack.browserify.answer", "score": 32, "up_vote_count": 37, "is_accepted": false, "last_activity_date": 1512749683, "last_edit_date": 1512749683, "body_markdown": "Or in plain old shell:\r\n\r\n    node -e &quot;console.log(require(&#39;./package.json&#39;).version);&quot;\r\n\r\nThis can be shortened to\r\n\r\n    node -p &quot;require(&#39;./package.json&#39;).version&quot;\r\n\r\nEven though this is not exactly what the question asked, it&#39;s useful if you want to use the version within `package.json` itself, for example to log to a versioned file in a `script`:\r\n\r\n    {\r\n      &quot;name&quot;: &quot;myapp&quot;,\r\n      &quot;version&quot;: &quot;0.1.2&quot;,\r\n      &quot;scripts&quot;: {\r\n        &quot;run&quot;: &quot;node index.js 2&gt;&amp;1 | tee -a myapp_v$(node -p \\&quot;require(&#39;./package.json&#39;).version\\&quot;).log&quot;,\r\n      ...\r\n    }"}, {"tags": [], "down_vote_count": 11, "creation_date": 1450898826, "answer_id": 34442437, "path": "stack.browserify.answer", "score": -10, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1450898826, "body_markdown": "why not use the native way?\r\nthe other methods have failed for me.\r\n\r\n    // Load native UI library\r\n    var gui = require(&#39;nw.gui&#39;);\r\n        \r\n    // Get the name field in manifest\r\n    gui.App.manifest.version"}, {"tags": [], "down_vote_count": 1, "creation_date": 1461122649, "answer_id": 36733261, "path": "stack.browserify.answer", "score": 70, "up_vote_count": 71, "is_accepted": false, "last_activity_date": 1461122649, "body_markdown": "Using ES6 modules you can do the following:\r\n\r\n    import {version} from &#39;./package.json&#39;;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1489082475, "answer_id": 42702367, "path": "stack.browserify.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1489082475, "body_markdown": "I know this isn&#39;t the intent of the OP, but I just had to do this, so hope it helps the next person.\r\n\r\nIf you&#39;re using docker-compose for your CI/CD process, you can get it this way! \r\n\r\n    version:\r\n      image: node:7-alpine\r\n      volumes:\r\n        - .:/usr/src/service/\r\n      working_dir: /usr/src/service/\r\n      command: ash -c &quot;node -p \\&quot;require(&#39;./package.json&#39;).version.replace(&#39;\\n&#39;, &#39;&#39;)\\&quot;&quot;\r\n\r\nfor the image, you can use any node image. I use alpine because it is the smallest."}, {"tags": [], "down_vote_count": 0, "creation_date": 1501665197, "answer_id": 45456482, "path": "stack.browserify.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1501665197, "body_markdown": "You can use the [project-version](https://github.com/simonepri/project-version) package.\r\n\r\n    $ npm install --save project-version\r\n\r\nThen\r\n\r\n    const version = require(&#39;project-version&#39;);\r\n    \r\n    console.log(version);\r\n    //=&gt;  &#39;1.0.0&#39;\r\n  \r\nIt uses `process.env.npm_package_version` but fallback on the version written in the `package.json` in case the env var is missing for some reason."}, {"tags": [], "down_vote_count": 0, "creation_date": 1505766060, "answer_id": 46287598, "path": "stack.browserify.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1505766060, "body_markdown": "Just adding an answer because I came to this question to see the best way to include the version from package.json in my web application. \r\n\r\nI know this question is targetted for Node.js however, if you are using Webpack to bundle your app just a reminder the recommended way is to use the [DefinePlugin](https://webpack.js.org/plugins/define-plugin/) to declare a global version in the config and reference that. So you could do in your `webpack.config.json`\r\n\r\n\r\n    const pkg = require(&#39;../../package.json&#39;);\r\n    \r\n    ...\r\n    \r\n    plugins : [\r\n        new webpack.DefinePlugin({\r\n          AppVersion: JSON.stringify(pkg.version),\r\n    ...\r\n\r\n\r\nAnd then `AppVersion` is now a global that is available for you to use. Also make sure in your [`.eslintrc` you ignore this via the globals prop](https://eslint.org/docs/user-guide/configuring#specifying-globals)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1507196648, "answer_id": 46582508, "path": "stack.browserify.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1507196648, "body_markdown": "For those who look for a safe **client-side** solution that also works on server-side, there is [genversion](https://www.npmjs.com/package/genversion). It is a command-line tool that reads the version from the nearest package.json and generates an importable CommonJS module file that exports the version. Disclaimer: I&#39;m a maintainer.\r\n\r\n    $ genversion lib/version.js\r\n\r\nI acknowledge the client-side safety was not OP&#39;s primary intention, but as discussed in answers by [Mark Wallace](https://stackoverflow.com/a/10855054/638546) and [aug](https://stackoverflow.com/a/46287598/638546), it is highly relevant and also the reason I found this Q&amp;A."}, {"tags": [], "down_vote_count": 0, "creation_date": 1518429874, "answer_id": 48743785, "path": "stack.browserify.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1518433954, "last_edit_date": 1518433954, "body_markdown": "The correct answers will be here in example:\r\n-----------------------------\r\n1. Answer (this code include `package.json` file and get version)\r\n\r\n\r\n    `const { version } = require(&#39;./package.json&#39;);`\r\n\r\n------------------------------------------\r\n\r\n\r\n\r\n2. Answer\r\n\r\n\r\n    `const version = process.env.npm_package_version`\r\n\r\n\r\n---------------------------------------\r\n\r\n\r\nPlease don&#39;t use `JSON.parse`, `fs.readFile`, and don&#39;t use another `npm modules` it&#39;s not necessary for this question.\r\n\r\n\r\n"}], "title": "Is there a way to get version from package.json in nodejs code?", "view_count": 110859, "answer_count": 13, "code_snippet": ["<code>package.json</code>", "<code>var port = process.env.PORT || 3000\napp.listen port\nconsole.log \"Express server listening on port %d in %s mode %s\", app.address().port, app.settings.env, app.VERSION\n</code>", "<code>var pjson = require('./package.json');\nconsole.log(pjson.version);\n</code>", "<code>require('root-require')('package.json').version</code>", "<code>Error: Cannot find module 'package.json'</code>", "<code>process.env.npm_package_version\n</code>", "<code>npm run \u2026</code>", "<code>$npm_package_version</code>", "<code>npm start</code>", "<code>app.getVersion</code>", "<code>import {version} from './package.json';\n</code>", "<code>node -e \"console.log(require('./package.json').version);\"\n</code>", "<code>node -p \"require('./package.json').version\"\n</code>", "<code>package.json</code>", "<code>script</code>", "<code>{\n  \"name\": \"myapp\",\n  \"version\": \"0.1.2\",\n  \"scripts\": {\n    \"run\": \"node index.js 2&gt;&amp;1 | tee -a myapp_v$(node -p \\\"require('./package.json').version\\\").log\",\n  ...\n}\n</code>", "<code>fs = require('fs')\njson = JSON.parse(fs.readFileSync('package.json', 'utf8'))\nversion = json.version\n</code>", "<code>require() introduces? (for instance, does </code>", "<code>require()</code>", "<code>JSON.parse(fs.readFileSync('package.json', 'utf8'))</code>", "<code>delete require.cache[require.resolve('package.json')]; require('package.json')</code>", "<code>package.json</code>", "<code>require('pkginfo')(module);\n</code>", "<code>version</code>", "<code>require('pkginfo')(module, 'version');\n</code>", "<code>module.exports</code>", "<code>module.exports.version</code>", "<code>require('pkginfo')(module, 'version');\nconsole.log \"Express server listening on port %d in %s mode %s\", app.address().port, app.settings.env, module.exports.version\n</code>", "<code>package.json</code>", "<code>package.json</code>", "<code>module</code>", "<code>module</code>", "<code>webpack.config.json</code>", "<code>const pkg = require('../../package.json');\n\n...\n\nplugins : [\n    new webpack.DefinePlugin({\n      AppVersion: JSON.stringify(pkg.version),\n...\n</code>", "<code>AppVersion</code>", "<code>.eslintrc</code>", "<code>$ genversion lib/version.js\n</code>", "<code>$ npm install --save project-version\n</code>", "<code>const version = require('project-version');\n\nconsole.log(version);\n//=&gt;  '1.0.0'\n</code>", "<code>process.env.npm_package_version</code>", "<code>package.json</code>", "<code>package.json</code>", "<code>const { version } = require('./package.json');</code>", "<code>const version = process.env.npm_package_version</code>", "<code>JSON.parse</code>", "<code>fs.readFile</code>", "<code>npm modules</code>", "<code>findup-sync</code>", "<code>var findup = require('findup-sync');\nvar packagejson = require(findup('package.json'));\nconsole.log(packagejson.version); // =&gt; '0.0.1' \n</code>", "<code>package.json</code>", "<code>process.env.npm_package_version</code>", "<code>version:\n  image: node:7-alpine\n  volumes:\n    - .:/usr/src/service/\n  working_dir: /usr/src/service/\n  command: ash -c \"node -p \\\"require('./package.json').version.replace('\\n', '')\\\"\"\n</code>", "<code>// Load native UI library\nvar gui = require('nw.gui');\n\n// Get the name field in manifest\ngui.App.manifest.version\n</code>"], "path": "stack.browserify"}, {"tags": ["javascript", "database", "postgresql", "node.js"], "_childDocuments_": [{"tags": [], "down_vote_count": 0, "creation_date": 1332908469, "answer_id": 9901097, "path": "stack.browserify.answer", "score": 509, "up_vote_count": 509, "is_accepted": true, "last_activity_date": 1497755740, "last_edit_date": 1497755740, "body_markdown": "`require()` is not part of your standard JavaScript. In context to your question and tags, `require()` is built into Node.js to load *modules*. The concept is similar to C/Java/Python/[insert more languages here] imports or includes.\r\n\r\nThe concept of modules is similar to just adding small bits of JavaScript code via `&lt;script&gt;` tags. Unlike adding a `&lt;script&gt;` tag, it doesn&#39;t leak the file into the global scope. The file has its own scope, essentially trapping everything you define in that file, unless you decide to expose functionality.  `require` returns a value, depending on what the module exposes using `exports` or `module.exports`. [Another post][1] explains how `require()` works in conjunction with `exports`.&amp;nbsp;\r\n\r\nIn your code, it loads the `pg` module, which I guess is a PostgreSQL driver for NodeJS. The part where you do `npm install pg` downloads the `pg` module from npm (a package repository for NodeJS modules) and makes it available to your project via `require(&#39;pg&#39;);`.\r\n\r\n------\r\n\r\nJust in case you were wondering why I mentioned &quot;in context to your question&quot;, there are 3rd-party libraries that also use a function named `require` to do something. It&#39;s handy to identify which is which.\r\n\r\n- [RequireJS][2] exposes a function called `require`, along with `define` to load dependencies before running the code provided. The syntax is in AMD format.\r\n\r\n- [Neuter][3], which concatenates js files, also exposes a function named `require`. This one acts much closer to PHP&#39;s `import`.\r\n\r\n- [Browserify][4] uses `require` on the browser, allowing scripts on the browser to be written NodeJS style (CommonJS module syntax).\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/5311377/575527\r\n  [2]: http://requirejs.org/docs/start.html\r\n  [3]: https://www.npmjs.org/package/grunt-neuter\r\n  [4]: http://browserify.org/"}, {"tags": [], "down_vote_count": 2, "creation_date": 1332908787, "answer_id": 9901148, "path": "stack.browserify.answer", "score": 24, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1499334056, "last_edit_date": 1499334056, "body_markdown": "It&#39;s used to load modules. Let&#39;s use a simple example.\r\n\r\nIn file `circle_object.js`:\r\n\r\n    var Circle = function (radius) {\r\n        this.radius = radius\r\n    }\r\n    Circle.PI = 3.14\r\n    \r\n    Circle.prototype = {\r\n        area: function () {\r\n            return Circle.PI * this.radius * this.radius;\r\n        }\r\n    }\r\n\r\nWe can use this via `require`, like:\r\n\r\n    node&gt; require(&#39;circle_object&#39;)\r\n    {}\r\n    node&gt; Circle\r\n    { [Function] PI: 3.14 }\r\n    node&gt; var c = new Circle(3)\r\n    { radius: 3 }\r\n    node&gt; c.area()\r\n\r\n\r\nThe `require()` method is used to load and cache JavaScript modules. So, if you want to load a local, relative JavaScript module into a Node.js application, you can simply use the `require()` method.\r\n\r\nExample:\r\n\r\n    var yourModule = require( &quot;your_module_name&quot; ); //.js file extension is optional"}, {"tags": [], "down_vote_count": 1, "creation_date": 1333075496, "answer_id": 9936318, "path": "stack.browserify.answer", "score": 80, "up_vote_count": 81, "is_accepted": false, "last_activity_date": 1499333666, "last_edit_date": 1499333666, "body_markdown": "Alright, so let&#39;s first start with making the distinction between Javascript *in a web browser*, and Javascript *on a server* (CommonJS and Node).\r\n\r\nJavascript is a language traditionally confined to a web browser with a limited global context defined mostly by what came to be known as the Document Object Model (DOM) level 0 (the Netscape Navigator Javascript API).\r\n\r\nServer-side Javascript eliminates that restriction and allows Javascript to call into various pieces of native code (like the Postgres library) and open sockets.\r\n\r\nNow `require()` is a special function call defined as part of the CommonJS spec. In node, it resolves libraries and modules in the Node search path, now usually defined as `node_modules` in the same directory (or the directory of the invoked javascript file) or the system-wide search path.\r\n\r\nTo try to answer the rest of your question, we need to use a proxy between the code running in the the browser and the database server.\r\n\r\nSince we are discussing Node and you are already familiar with how to run a query from there, it would make sense to use Node as that proxy.\r\n\r\nAs a simple example, we&#39;re going to make a URL that returns a few facts about a Beatle, given a name, as JSON.\r\n\r\n    /* your connection code */\r\n\r\n    var express = require(&#39;express&#39;);\r\n    var app = express.createServer();\r\n    app.get(&#39;/beatles/:name&#39;, function(req, res) {\r\n        var name = req.params.name || &#39;&#39;;\r\n        name = name.replace(/[^a-zA_Z]/, &#39;&#39;);\r\n        if (!name.length) {\r\n            res.send({});\r\n        } else {\r\n            var query = client.query(&#39;SELECT * FROM BEATLES WHERE name =\\&#39;&#39;+name+&#39;\\&#39; LIMIT 1&#39;);\r\n            var data = {};\r\n            query.on(&#39;row&#39;, function(row) {\r\n                data = row;\r\n                res.send(data);\r\n            });\r\n        };\r\n    });\r\n    app.listen(80, &#39;127.0.0.1&#39;);\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1461223662, "answer_id": 36762628, "path": "stack.browserify.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1461362244, "last_edit_date": 1461362244, "body_markdown": "I noticed that whilst the other answers explained what require is and that it is used to load modules in Node they did not give a full reply on how to load node modules when working in the Browser. \r\n\r\nIt is quite simple to do. Install your module using npm as you describe, and the module itself will be located in a folder usually called node_modules. \r\n\r\nNow the simplest way to load it into your app is to reference it from your html with a script tag which points at this directory. i.e if your node_modules directory is in the root of the project at the same level as your index.html you would write this in your index.html:\r\n\r\n    &lt;script src=&quot;node_modules/ng&quot;&gt;&lt;/script&gt;\r\n\r\nThat whole script will now be loaded into the page - so you can access its variables and methods directly.\r\n\r\nThere are other approaches which are more widely used in larger projects, such as a module loader like [require.js][2]. Of the two, I have not used Require myself, but I think it is considered by many people the way to go.\r\n\r\n\r\n  [2]: http://requirejs.org/"}], "creation_date": 1332908338, "body_markdown": "I&#39;m trying to get Javascript to read/write to a PostgreSQL database. I found this [project][1] on github. I was able to get the following sample code to run in node.\r\n\r\n    var pg = require(&#39;pg&#39;); //native libpq bindings = `var pg = require(&#39;pg&#39;).native`\r\n    var conString = &quot;tcp://postgres:1234@localhost/postgres&quot;;\r\n    \r\n    var client = new pg.Client(conString);\r\n    client.connect();\r\n    \r\n    //queries are queued and executed one after another once the connection becomes available\r\n    client.query(&quot;CREATE TEMP TABLE beatles(name varchar(10), height integer, birthday timestamptz)&quot;);\r\n    client.query(&quot;INSERT INTO beatles(name, height, birthday) values($1, $2, $3)&quot;, [&#39;Ringo&#39;, 67, new Date(1945, 11, 2)]);\r\n    client.query(&quot;INSERT INTO beatles(name, height, birthday) values($1, $2, $3)&quot;, [&#39;John&#39;, 68, new Date(1944, 10, 13)]);\r\n    \r\n    //queries can be executed either via text/parameter values passed as individual arguments\r\n    //or by passing an options object containing text, (optional) parameter values, and (optional) query name\r\n    client.query({\r\n      name: &#39;insert beatle&#39;,\r\n      text: &quot;INSERT INTO beatles(name, height, birthday) values($1, $2, $3)&quot;,\r\n      values: [&#39;George&#39;, 70, new Date(1946, 02, 14)]\r\n    });\r\n    \r\n    //subsequent queries with the same name will be executed without re-parsing the query plan by postgres\r\n    client.query({\r\n      name: &#39;insert beatle&#39;,\r\n      values: [&#39;Paul&#39;, 63, new Date(1945, 04, 03)]\r\n    });\r\n    var query = client.query(&quot;SELECT * FROM beatles WHERE name = $1&quot;, [&#39;John&#39;]);\r\n    \r\n    //can stream row results back 1 at a time\r\n    query.on(&#39;row&#39;, function(row) {\r\n      console.log(row);\r\n      console.log(&quot;Beatle name: %s&quot;, row.name); //Beatle name: John\r\n      console.log(&quot;Beatle birth year: %d&quot;, row.birthday.getYear()); //dates are returned as javascript dates\r\n      console.log(&quot;Beatle height: %d&#39; %d\\&quot;&quot;, Math.floor(row.height/12), row.height%12); //integers are returned as javascript ints\r\n    });\r\n    \r\n    //fired after last row is emitted\r\n    query.on(&#39;end&#39;, function() { \r\n      client.end();\r\n    });\r\n\r\nNext I tried to make it run on a webpage, but nothing seemed to happen. I checked on the Javascript console and it just says &quot;require not defined.&quot;\r\n\r\nSo what is this &quot;require?&quot; Why does it work in node but not in a webpage?\r\n\r\nAlso, before I got it to work in node, I had to do `npm install pg`. What&#39;s that about? I looked in the directory and didn&#39;t find a file pg. Where did it put it, and how does Javascript find it?\r\n\r\n\r\n  [1]: https://github.com/brianc/node-postgres", "title": "What is this Javascript &quot;require&quot;?", "view_count": 342530, "up_vote_count": 295, "answer_count": 4, "link": "https://stackoverflow.com/questions/9901082/what-is-this-javascript-require", "code_snippet": ["<code>var pg = require('pg'); //native libpq bindings = `var pg = require('pg').native`\nvar conString = \"tcp://postgres:1234@localhost/postgres\";\n\nvar client = new pg.Client(conString);\nclient.connect();\n\n//queries are queued and executed one after another once the connection becomes available\nclient.query(\"CREATE TEMP TABLE beatles(name varchar(10), height integer, birthday timestamptz)\");\nclient.query(\"INSERT INTO beatles(name, height, birthday) values($1, $2, $3)\", ['Ringo', 67, new Date(1945, 11, 2)]);\nclient.query(\"INSERT INTO beatles(name, height, birthday) values($1, $2, $3)\", ['John', 68, new Date(1944, 10, 13)]);\n\n//queries can be executed either via text/parameter values passed as individual arguments\n//or by passing an options object containing text, (optional) parameter values, and (optional) query name\nclient.query({\n  name: 'insert beatle',\n  text: \"INSERT INTO beatles(name, height, birthday) values($1, $2, $3)\",\n  values: ['George', 70, new Date(1946, 02, 14)]\n});\n\n//subsequent queries with the same name will be executed without re-parsing the query plan by postgres\nclient.query({\n  name: 'insert beatle',\n  values: ['Paul', 63, new Date(1945, 04, 03)]\n});\nvar query = client.query(\"SELECT * FROM beatles WHERE name = $1\", ['John']);\n\n//can stream row results back 1 at a time\nquery.on('row', function(row) {\n  console.log(row);\n  console.log(\"Beatle name: %s\", row.name); //Beatle name: John\n  console.log(\"Beatle birth year: %d\", row.birthday.getYear()); //dates are returned as javascript dates\n  console.log(\"Beatle height: %d' %d\\\"\", Math.floor(row.height/12), row.height%12); //integers are returned as javascript ints\n});\n\n//fired after last row is emitted\nquery.on('end', function() { \n  client.end();\n});\n</code>", "<code>npm install pg</code>", "<code>require()</code>", "<code>require()</code>", "<code>&lt;script&gt;</code>", "<code>&lt;script&gt;</code>", "<code>require</code>", "<code>exports</code>", "<code>module.exports</code>", "<code>require()</code>", "<code>exports</code>", "<code>pg</code>", "<code>npm install pg</code>", "<code>pg</code>", "<code>require('pg');</code>", "<code>require</code>", "<code>require</code>", "<code>define</code>", "<code>require</code>", "<code>import</code>", "<code>require</code>", "<code>require</code>", "<code>require()</code>", "<code>node_modules</code>", "<code>/* your connection code */\n\nvar express = require('express');\nvar app = express.createServer();\napp.get('/beatles/:name', function(req, res) {\n    var name = req.params.name || '';\n    name = name.replace(/[^a-zA_Z]/, '');\n    if (!name.length) {\n        res.send({});\n    } else {\n        var query = client.query('SELECT * FROM BEATLES WHERE name =\\''+name+'\\' LIMIT 1');\n        var data = {};\n        query.on('row', function(row) {\n            data = row;\n            res.send(data);\n        });\n    };\n});\napp.listen(80, '127.0.0.1');\n</code>", "<code>createServer</code>", "<code>C:\\Program Files\\nodejs\\ </code>", "<code>express</code>", "<code>npm</code>", "<code>circle_object.js</code>", "<code>var Circle = function (radius) {\n    this.radius = radius\n}\nCircle.PI = 3.14\n\nCircle.prototype = {\n    area: function () {\n        return Circle.PI * this.radius * this.radius;\n    }\n}\n</code>", "<code>require</code>", "<code>node&gt; require('circle_object')\n{}\nnode&gt; Circle\n{ [Function] PI: 3.14 }\nnode&gt; var c = new Circle(3)\n{ radius: 3 }\nnode&gt; c.area()\n</code>", "<code>require()</code>", "<code>require()</code>", "<code>var yourModule = require( \"your_module_name\" ); //.js file extension is optional\n</code>", "<code>&lt;script src=\"node_modules/ng\"&gt;&lt;/script&gt;\n</code>", "<code>&lt;name of module&gt;</code>", "<code>xyz</code>", "<code>xyz/index.html</code>", "<code>xyz/js/scripts.js</code>", "<code>script tag</code>", "<code>xyz/js/scripts.js</code>", "<code>require('./module1.js');require('./module2.js');</code>", "<code>module1.js</code>", "<code>module2.js</code>", "<code>xyz/js</code>", "<code>scripts.js</code>"], "path": "stack.browserify"}, {"tags": ["gruntjs", "npm", "gulp", "bower", "webpack"], "creation_date": 1453987719, "body_markdown": "I&#39;m trying to summarize my knowledge about the most popular JavaScript package managers, bundlers, and task runners. Please correct me if I&#39;m wrong:\r\n\r\n - `npm` &amp; `bower` are package managers. They just download the dependencies and don&#39;t know how to build projects on their own. What they know is to call `webpack`/`gulp`/`grunt` after fetching all the dependencies.\r\n - `bower` is like `npm`, but builds flattened dependencies trees (unlike `npm` which do it recursively). Meaning `npm` fetches the dependencies for each dependency (may fetch the same a few times), while `bower` expects you to manually include sub-dependencies. Sometimes `bower` and `npm` are used together for front-end and back-end respectively (since each megabyte might matter on front-end).\r\n - `grunt` and `gulp` are task runners to automate everything that can be automated (i.e. compile CSS/Sass, optimize images, make a bundle and minify/transpile it).\r\n - `grunt` vs. `gulp` (is like `maven` vs. `gradle` or configuration vs. code). Grunt is based on configuring separate independent tasks, each task opens/handles/closes file. Gulp requires less amount of code and is based on Node streams, which allows it to build pipe chains (w/o reopening the same file) and makes it faster. \r\n - `webpack` (`webpack-dev-server`) - for me it&#39;s a task runner with hot reloading of changes which allows you to forget about all JS/CSS watchers. \r\n - `npm`/`bower` + plugins may replace task runners. Their abilities often intersect so there are different implications if you need to use `gulp`/`grunt` over `npm` + plugins. But task runners are definitely better for complex tasks (e.g. &quot;on each build create bundle, transpile from ES6 to ES5, run it at all browsers emulators, make screenshots and deploy to dropbox through ftp&quot;).\r\n - `browserify` allows packaging node modules for browsers. `browserify` vs `node`&#39;s `require` is actually [AMD vs CommonJS][1].\r\n\r\n***Questions:***\r\n \r\n 1. *What is `webpack` &amp; `webpack-dev-server`?* Official documentation says it&#39;s a module bundler but for me it&#39;s just a task runner. *What&#39;s the difference?*\r\n 2. *Where would you use `browserify`? Can&#39;t we do the same with node/ES6 imports?* \r\n 3. *When would you use `gulp`/`grunt` over `npm` + plugins?*\r\n 4. *Please provide examples when you need to use a combination*\r\n\r\n\r\n  [1]: https://addyosmani.com/writing-modular-js/", "last_edit_date": 1488991619, "up_vote_count": 1343, "link": "https://stackoverflow.com/questions/35062852/npm-vs-bower-vs-browserify-vs-gulp-vs-grunt-vs-webpack", "_childDocuments_": [{"tags": [], "down_vote_count": 6, "creation_date": 1453991688, "answer_id": 35064297, "path": "stack.gulp.answer", "score": 711, "up_vote_count": 717, "is_accepted": true, "last_activity_date": 1511274278, "last_edit_date": 1511274278, "body_markdown": "Webpack and Browserify do pretty much the same job, which is bundling your modules to be used in a browser environment (though you can target other environments, like bundling your server-side ES6 code for Node). For example, the Node module is a feature, which doesn&#39;t exist in the browser, and ES 6 modules are not implemented in any browser yet, which is why things need to be bundled. However, they differ in many ways, Webpack offers many tools by default (e.g. code splitting), while Browserify can do this only after downloading plugins but using both leads to very similar results. It comes down to personal preference (I am used to Webpack). Webpack is not a task runner, it is just processor of your files (it processes them by so-called loaders) run directly from CLI or by a task runner.\r\n\r\n`webpack-dev-server` provides something like Browser-sync - a server, where you can deploy your app and verify your FE developing progress immediately by dev-server automatically refreshing the browser or even propagating changes without it with hot deploy (e.g. React components).\r\n\r\nI&#39;ve been using Gulp for its conciseness and easy task writing, but have later found out I need neither Gulp nor Grunt at all. Everything I have ever needed could have been done using npm scripts to run 3rd-party tools through their API. Choosing between Gulp, Grunt or npm scripts depends on your taste, JS experience, and experience of developers working with you.\r\n\r\nWhile tasks in Gulp (or Grunt maybe) are easy to read even for people not so familiar with JS, it is yet another tool to require and learn, and I personally prefer to narrow my dependencies and make things simple. On the other hand, replacing these tasks with the combination of npm scripts and run files (where configuration and execution function of tools like Webpack lies) is more challenging. But in the majority of cases, those three are equal in terms of results.\r\n\r\nAs for the examples, I suggest you have a look at this [React starter project][1], which shows you a nice combination of npm scripts, Webpack and Browser-sync. You can find those npm scripts in package.json in the root folder, in a property named `scripts`. There you will mostly encounter commands like `babel-node tools/run start`. Babel-node is a CLI tool (not meant for production use), which at first compiles ES6 file `tools/run` (run.js file located in [tools][2]) - basically a runner utility. This runner takes a function as an argument and runs it, which in this case is `start` - another utility (start.js) responsible for bundling source files (both client and server), starting the node-express server and subsequently Browser-sync, which serves as a proxy for propagating development changes to the browser.\r\n\r\nSpeaking more precisely, start.js imports Webpack config for the client manipulates it to add hot module replacement capabilities, then creates both client and server side bundles, starts node server through yet another utility named runServer.js and after successful start inits Browser-sync, which looks something like this.\r\n\r\n  \r\n\r\n    const bs = Browsersync.create();  \r\n    bs.init({\r\n          ...(DEBUG ? {} : { notify: false, ui: false }),\r\n    \r\n          proxy: {\r\n            target: host,\r\n            middleware: [wpMiddleware, ...hotMiddlewares],\r\n          },\r\n    \r\n          // no need to watch &#39;*.js&#39; here, webpack will take care of it for us,\r\n          // including full page reloads if HMR won&#39;t work\r\n          files: [&#39;build/content/**/*.*&#39;],\r\n    }, resolve)\r\n\r\nThe important part is `proxy.target`, where you set server address you want to proxy, which could be http://localhost:3000, and Browser-sync starts a server listening on http://localhost:3001, where the same app is deployed, but with hot module replacement, so you can experience propagation of source file changes to the browser immediately with or even without reloading. As you can see, there is another configuration property `files` with individual files or patterns Browser-sync watches for changes and reloads the browser if some occur, but as the comment says, Webpack takes care of watching js sources by itself with HMR, so they cooperate there.\r\n\r\nNow I don&#39;t have any equivalent example of such Grunt or Gulp configuration, but with Gulp (and somewhat similarly with Grunt) you would write individual tasks in gulpfile.js like\r\n\r\n    gulp.task(&#39;bundle&#39;, function() {\r\n      // bundling source files with some gulp plugins like gulp-webpack maybe\r\n    });\r\n    \r\n    gulp.task(&#39;start&#39;, function() {\r\n      // starting server and stuff\r\n    });\r\n\r\nwhere you would be doing essentially pretty much the same things as in the starter-kit, this time with task runner, which solves some problems for you, but presents its own issues and some difficulties during learning the usage, and as I say, the more dependencies you have, the more can go wrong. And that is the reason I like to get rid of such tools.\r\n\r\n\r\n  [1]: https://github.com/kriasoft/react-starter-kit\r\n  [2]: https://github.com/kriasoft/react-starter-kit/tree/master/tools"}, {"tags": [], "down_vote_count": 2, "creation_date": 1460649181, "answer_id": 36628118, "path": "stack.gulp.answer", "score": 37, "up_vote_count": 39, "is_accepted": false, "last_activity_date": 1460649181, "body_markdown": "A small note about npm: npm3 tries install dependencies in a flat way\r\n\r\nhttps://docs.npmjs.com/how-npm-works/npm3#npm-v3-dependency-resolution\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1462093466, "answer_id": 36964916, "path": "stack.gulp.answer", "score": 39, "up_vote_count": 40, "is_accepted": false, "last_activity_date": 1462093466, "body_markdown": "You can find some technical comparison on [npmcompare][1]\r\n\r\n[Comparing browserify vs. grunt vs. gulp vs. webpack][2]\r\n\r\nAs you can see webpack is very well maintained with a new version coming out every 4 days on average.\r\nBut Gulp seems to have the biggest community of them all (with over 20K stars on Github)\r\nGrunt seems a bit neglected (compared to the others)\r\n\r\nSo if need to choose one over the other i would go with Gulp\r\n\r\n\r\n  [1]: https://npmcompare.com\r\n  [2]: https://npmcompare.com/compare/browserify,grunt,gulp,webpack"}, {"tags": [], "down_vote_count": 2, "creation_date": 1475475824, "answer_id": 39825582, "path": "stack.gulp.answer", "score": 500, "up_vote_count": 502, "is_accepted": false, "last_activity_date": 1513573316, "last_edit_date": 1513573316, "body_markdown": "I&#39;ve been also searching for this quite some time since there is a lot of tools out there and each of them benefits us in a different aspect. The community is divided across tools like `Browserify, Webpack, jspm, Grunt and Gulp`. You might also hear about `Yeoman or Slush`. That\u2019s not really a problem, it\u2019s just confusing for everyone trying to understand a clear path forward.\r\n\r\nAnyway, I would like to contribute something.\r\n\r\n**1. Package Manager** \r\n\r\nPackage managers simplify installing and updating project dependencies, which are libraries such as: `jQuery, Bootstrap`, etc - everything that is used on your site and isn&#39;t written by you.\r\n\r\nBrowsing all the library websites, downloading and unpacking the archives, copying files into the projects \u2014 all of this is replaced with a few commands in the terminal.\r\n\r\n- [`NPM`][1] stands for: `Node JS package manager` helps you to manage all the libraries your software relies on. You would define your needs in a file called `package.json` and run `npm install` in the command line... then BANG, your packages are downloaded and ready to use. Could be used both for `front-end and back-end` libraries.\r\n\r\n- [`Bower`][2]: for front-end package management, the concept is same with NPM. All your libraries are stored in a file named `bower.json` and then run `bower install` in the command line. \r\n\r\n&gt; The biggest difference between `Bower` and `NPM` is that NPM does nested\r\n&gt; dependency tree while Bower requires a flat dependency tree as below.\r\n&gt;\r\n Quoting from https://stackoverflow.com/questions/18641899/what-is-the-difference-between-bower-and-npm\r\n\r\n**[NPM][1]**\r\n\r\n    project root\r\n    [node_modules] // default directory for dependencies\r\n     -&gt; dependency A\r\n     -&gt; dependency B\r\n        [node_modules]\r\n        -&gt; dependency A\r\n    \r\n     -&gt; dependency C\r\n        [node_modules]\r\n        -&gt; dependency B\r\n          [node_modules]\r\n           -&gt; dependency A \r\n        -&gt; dependency D\r\n\r\n**[Bower][2]**\r\n\r\n    project root\r\n    [bower_components] // default directory for dependencies\r\n     -&gt; dependency A\r\n     -&gt; dependency B // needs A\r\n     -&gt; dependency C // needs B and D\r\n     -&gt; dependency D\r\n\r\n&gt; There are some updates on [`npm 3 Duplication and Deduplication`][3],\r\n&gt; please open the doc for more detail.\r\n\r\n- [`Yarn`][13]: A new package manager for `JavaScript` [published][4] by `Facebook` recently with some more advantages compared to `NPM`. And with Yarn, you still can use both [`NPM`][1]and [`Bower`][2] registry to fetch the package. If you&#39;ve installed a package before, `yarn` creates a cached copy which facilitates `offline package installs`.\r\n\r\n- [`jspm`][5]: is a package manager for the `SystemJS` universal module loader, built on top of the dynamic `ES6` module loader. It is not an entirely new package manager with its own set of rules, rather it works on top of existing package sources. Out of the box, it works with `GitHub` and `npm`. As most of the `Bower` based packages are based on `GitHub`, we can install the those packages using `jspm` as well. It has a registry that lists most of the commonly used front-end packages for easier installation.\r\n\r\n&gt; See the different between [`Bower`][2] and `jspm`:\r\n&gt; https://stackoverflow.com/questions/25416813/package-manager-bower-vs-jspm\r\n\r\n---\r\n\r\n**2. Module Loader/Bundling**\r\n\r\nMost projects of any scale will have their code split between a number of files. You can just include each file with an individual `&lt;script&gt;` tag, however, `&lt;script&gt;` establishes a new http connection, and for small files \u2013 which is a goal of modularity \u2013 the time to set up the connection can take significantly longer than transferring the data. While the scripts are downloading, no content can be changed on the page.\r\n\r\n- The problem of download time can largely be solved by concatenating a group of simple modules into a single file, and minifying it.\r\n\r\nE.g\r\n\r\n    &lt;head&gt;\r\n        &lt;title&gt;Wagon&lt;/title&gt;\r\n        &lt;script src=\u201cbuild/wagon-bundle.js\u201d&gt;&lt;/script&gt;\r\n    &lt;/head&gt;\r\n\r\n- The performance comes at the expense of the flexibility though. If your modules have inter-dependency, this lack of flexibility may be a showstopper.\r\n\r\nE.g\r\n\r\n    &lt;head&gt;\r\n    \t&lt;title&gt;Skateboard&lt;/title&gt;\r\n    \t&lt;script src=\u201cconnectors/axle.js\u201d&gt;&lt;/script&gt;\r\n    \t&lt;script src=\u201cframes/board.js\u201d&gt;&lt;/script&gt;\r\n    \t&lt;!-- skateboard-wheel and ball-bearing both depend on abstract-rolling-thing --&gt;\r\n    \t&lt;script src=\u201crolling-things/abstract-rolling-thing.js\u201d&gt;&lt;/script&gt;\r\n    \t&lt;script src=\u201crolling-things/wheels/skateboard-wheel.js\u201d&gt;&lt;/script&gt;\r\n    \t&lt;!-- but if skateboard-wheel also depends on ball-bearing --&gt;\r\n    \t&lt;!-- then having this script tag here could cause a problem --&gt;\r\n    \t&lt;script src=\u201crolling-things/ball-bearing.js\u201d&gt;&lt;/script&gt;\r\n    \t&lt;!-- connect wheels to axle and axle to frame --&gt;\r\n    \t&lt;script src=\u201cvehicles/skateboard/our-sk8bd-init.js\u201d&gt;&lt;/script&gt;\r\n    &lt;/head&gt;\r\n\r\nComputers can do that better than you can, and that is why you should use a tool to automatically bundle everything into a single file.\r\n\r\n**Then we heard about `RequireJS`, `Browserify`, `Webpack` and `SystemJS`**\r\n\r\n- [`RequireJS`][12]: is a `JavaScript` file and module loader. It is optimized for in-browser use, but it can be used in other JavaScript environments, like `Node`.\r\n\r\nE.g: **myModule.js**\r\n\r\n    // package/lib is a dependency we require\r\n    define([&quot;package/lib&quot;], function (lib) {\r\n    \r\n        // behavior for our module\r\n        function foo() {\r\n            lib.log( &quot;hello world!&quot; );\r\n        }\r\n    \r\n        // export (expose) foo to other modules as foobar\r\n        return {\r\n            foobar: foo\r\n        }\r\n    });\r\n\r\n\r\nIn `main.js`, we can import `myModule.js` as dependency and use it.\r\n\r\n    require([&quot;package/myModule&quot;], function(myModule) {\r\n        myModule.foobar();\r\n    });\r\n\r\nAnd then in our `HTML`, we can refer to use with `RequireJS`.\r\n\r\n    &lt;script src=\u201capp/require.js\u201d data-main=\u201cmain.js\u201d &gt;&lt;/script&gt;\r\n\r\n\r\n&gt; Read more about `CommonJS` and `AMD` to get understanding easily.\r\n&gt; https://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs\r\n\r\n\r\n- [`Browserify`][7]: set out to allow use of `CommonJS` formatted modules in the browser. Consequently, `Browserify` isn\u2019t as much a module loader as a module bundler: `Browserify` is entirely a build-time tool, producing a bundle of code which can then be loaded client-side.\r\n\r\nStart with a build machine that has node &amp; npm installed, and get the package:\r\n\r\n    npm install -g \u2013save-dev browserify\r\n\r\nWrite your modules in `CommonJS` format\r\n\r\n    //entry-point.js\r\n    var foo = require(&#39;../foo.js&#39;);\r\n    console.log(foo(4));\r\n\r\nAnd when happy, issue the command to bundle:\r\n\r\n    browserify entry-point.js -o bundle-name.js\r\n\r\nBrowserify recursively finds all dependencies of entry-point and assembles them into a single file:\r\n\r\n    &lt;script src=\u201dbundle-name.js\u201d&gt;&lt;/script&gt;\r\n\r\n- [`Webpack`][6]: It bundles all of your static assets, including `JavaScript`, images, CSS and more, into a single file. It also enables you to process the files through different types of loaders. You could write your `JavaScript` with `CommonJS` or `AMD` modules syntax. It attacks the build problem in a fundamentally more integrated and opinionated manner. In `Browserify` you use `Gulp/Grunt` and a long list of transforms and plugins to get the job done. `Webpack` offers enough power out of the box that you typically don\u2019t need `Grunt` or `Gulp` at all.\r\n\r\nBasic usage is beyond simple. Install Webpack like Browserify:\r\n\r\n    npm install -g \u2013save-dev webpack\r\n\r\nAnd pass the command an entry point and an output file:\r\n\r\n    webpack ./entry-point.js bundle-name.js\r\n\r\n- [`SystemJS`][8]: is a module loader that **can import modules at run time in any of the popular formats** used today (`CommonJS, UMD, AMD, ES6`). It is built on top of the `ES6` module loader polyfill and is smart enough to detect the format being used and handle it appropriately. `SystemJS` can also transpile ES6 code (with `Babel` or `Traceur`) or other languages such as `TypeScript` and `CoffeeScript` using plugins. \r\n\r\n&gt; Want to know what is the `node module` and why it is not well adapted to in-browser.\r\n  \r\n&gt; More useful article: \r\n&gt;\r\n&gt; - https://medium.com/@housecor/browserify-vs-webpack-b3d7ca08a0a9#.c1q7ao3h4\r\n&gt; - http://jamesknelson.com/which-build-system-should-i-use-for-my-javascript-app/\r\n&gt; - https://appendto.com/2016/06/the-short-history-of-javascript-module-loaders/\r\n\r\n----\r\n\r\n&gt; Why `jspm` and `SystemJS`?\r\n&gt;\r\n&gt; One of the main goals of `ES6` modularity is to make it really simple\r\n&gt; to install and use any Javascript library from anywhere on the\r\n&gt; Internet (`Github`, `npm`, etc.). Only two things are needed:\r\n&gt; \r\n&gt; - A single command to install the library\r\n&gt; - One single line of code to import the library and use it\r\n&gt; \r\n&gt; So with `jspm`, you can do it.\r\n&gt; \r\n&gt; 1. Install the library with a command: `jspm install jquery`\r\n&gt; 2. Import the library with a single line of code, no need to external reference inside you HTML file. \r\n&gt; \r\n&gt; **display.js**\r\n&gt; \r\n&gt;     var $ = require(&#39;jquery&#39;); \r\n&gt;     \r\n&gt;     $(&#39;body&#39;).append(&quot;I&#39;ve imported jQuery!&quot;);\r\n&gt; \r\n&gt; 3. Then you configure these things within `System.config({ ... })` before\r\n&gt; importing your module. Normally when run `jspm init`, there will be a file \r\n&gt; named `config.js` for this purpose.\r\n&gt; \r\n&gt; 4. To make these scripts run, we need to load `system.js` and `config.js` on the HTML page. After that we will load the `display.js` file using\r\n&gt; the `SystemJS` module loader. \r\n&gt; \r\n&gt; **index.html**\r\n&gt;\r\n&gt;     &lt;script src=&quot;jspm_packages/system.js&quot;&gt;&lt;/script&gt;\r\n&gt;     &lt;script src=&quot;config.js&quot;&gt;&lt;/script&gt;\r\n&gt;     &lt;script&gt;\r\n&gt;       System.import(&quot;scripts/display.js&quot;);\r\n&gt;     &lt;/script&gt;\r\n&gt; \r\n&gt; Noted: You can also use `npm` with `Webpack` as Angular 2 has applied it. Since `jspm` was developed to integrate with `SystemJS` and it works on top of existing `npm` source, so your answer is up to you.\r\n\r\n---\r\n\r\n**3. Task runner**\r\n\r\nTask runners and build tools are primarily command-line tools. Why we need to use them: In one word: **automation**. The less work you have to do when performing repetitive tasks like **minification, compilation, unit testing, linting** which previously cost us a lot of times to do with command line or even manually.\r\n\r\n- [`Grunt`][9]: You can create automation for your development environment to pre-process codes or create build scripts with a config file and it seems very difficult to handle a complex task. Popular in last few years. \r\n\r\nEvery task in `Grunt` is an array of different plugin configurations, that simply get executed one after another, in a strictly independent, and sequential fashion.\r\n\r\n    grunt.initConfig({\r\n      clean: {\r\n        src: [&#39;build/app.js&#39;, &#39;build/vendor.js&#39;]\r\n      },\r\n      \r\n      copy: {\r\n        files: [{\r\n          src: &#39;build/app.js&#39;,\r\n          dest: &#39;build/dist/app.js&#39;\r\n        }]\r\n      }\r\n      \r\n      concat: {\r\n        &#39;build/app.js&#39;: [&#39;build/vendors.js&#39;, &#39;build/app.js&#39;]\r\n      }\r\n      \r\n      // ... other task configurations ...\r\n      \r\n    });\r\n    \r\n    grunt.registerTask(&#39;build&#39;, [&#39;clean&#39;, &#39;bower&#39;, &#39;browserify&#39;, &#39;concat&#39;, &#39;copy&#39;]);\r\n\r\n\r\n- [`Gulp`][10]: Automation just like `Grunt` but instead of configurations, you can write `JavaScript` with streams like it&#39;s a node application. Prefer these days.\r\n\r\nThis is a `Gulp` sample task declaration.\r\n\r\n    //import the necessary gulp plugins\r\n    var gulp = require(&#39;gulp&#39;);\r\n    var sass = require(&#39;gulp-sass&#39;);\r\n    var minifyCss = require(&#39;gulp-minify-css&#39;);\r\n    var rename = require(&#39;gulp-rename&#39;);\r\n    \r\n    //declare the task\r\n    gulp.task(&#39;sass&#39;, function(done) {\r\n      gulp.src(&#39;./scss/ionic.app.scss&#39;)\r\n        .pipe(sass())\r\n        .pipe(gulp.dest(&#39;./www/css/&#39;))\r\n        .pipe(minifyCss({\r\n          keepSpecialComments: 0\r\n        }))\r\n        .pipe(rename({ extname: &#39;.min.css&#39; }))\r\n        .pipe(gulp.dest(&#39;./www/css/&#39;))\r\n        .on(&#39;end&#39;, done);\r\n    });\r\n\r\n&gt; \r\n&gt; See more: https://medium.com/@preslavrachev/gulp-vs-grunt-why-one-why-the-other-f5d3b398edc4#.fte0nahri\r\n\r\n---\r\n\r\n**4. Scaffolding tools**\r\n\r\n- `Slush and Yeoman`: You can create starter projects with them. For example, you are planning to build a prototype with HTML and SCSS, then instead of manually create some folder like scss, css, img, fonts. You can just install `yeoman` and run a simple script. Then everything here for you. \r\n\r\nFind more [here][11]. \r\n\r\n\r\n    npm install -g yo\r\n    npm install --global generator-h5bp\r\n    yo h5bp\r\n\r\n\r\n&gt; See more: https://www.quora.com/What-are-the-differences-between-NPM-Bower-Grunt-Gulp-Webpack-Browserify-Slush-Yeoman-and-Express\r\n\r\n---\r\nMy answer is not really matched with the content of the question but when I&#39;m searching for these knowledge on Google, I always see the question on top so that I decided to answer it in summary as well as why we need to use those tool. \r\n\r\nRecently I found a really comprehensive guide from Grab team about how to approach front-end development in 2017. You can check it out as below.\r\n\r\nhttps://github.com/grab/front-end-guide\r\n\r\n\r\n  [1]: https://www.npmjs.com/\r\n  [2]: https://bower.io/\r\n  [3]: https://docs.npmjs.com/how-npm-works/npm3-dupe\r\n  [4]: https://code.facebook.com/posts/1840075619545360\r\n  [5]: http://jspm.io/\r\n  [6]: https://webpack.github.io/\r\n  [7]: http://browserify.org/\r\n  [8]: https://github.com/systemjs/systemjs\r\n  [9]: http://gruntjs.com/\r\n  [10]: http://gulpjs.com/\r\n  [11]: http://yeoman.io/\r\n  [12]: http://requirejs.org/\r\n  [13]: https://yarnpkg.com/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1476460724, "answer_id": 40047448, "path": "stack.gulp.answer", "score": 7, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1476713923, "last_edit_date": 1476713923, "body_markdown": "Yarn is a recent package manager that probably deserves to be mentioned. So, there : https://yarnpkg.com/\r\n\r\nAfaik, it can fetch both npm and bower dependencies and has other appreciated features."}, {"tags": [], "down_vote_count": 0, "creation_date": 1479777809, "answer_id": 40732339, "path": "stack.gulp.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1489763685, "last_edit_date": 1489763685, "body_markdown": "&gt;What is webpack &amp; webpack-dev-server? Official documentation says it&#39;s a module bundler but for me it&#39;s just a task runner. What&#39;s the difference?\r\n\r\n[webpack-dev-server][1] is a live reloading web server that *Webpack* developers use to get immediate feedback what they do. It should only be used during development.\r\n\r\nThis project is heavily inspired by the [nof5][] unit test tool. \r\n\r\n*Webpack* as the name implies will create a *SINGLE* **pack**age for the **web**. The package will be minimized, and combined into a single file (we still live in HTTP 1.1 age). *Webpack* does the magic of combining the resources (JavaScript, CSS, images) and injecting them like this: `&lt;script src=&quot;assets/bundle.js&quot;&gt;&lt;/script&gt;`.\r\n\r\nIt can also be called *module bundler* because it must understand module dependencies, and how to grab the dependencies and to bundle them together.\r\n\r\n&gt;Where would you use browserify? Can&#39;t we do the same with node/ES6 imports?\r\n\r\nYou could use *Browserify* on the exact same tasks where you would use *Webpack*. \u2013 *Webpack* is more compact, though.\r\n\r\nNote that the [ES6 module loader features][3] in *Webpack2* are using *System.import*, which not a single browser supports natively.\r\n \r\n&gt;When would you use gulp/grunt over npm + plugins?\r\n\r\nYou can [forget][5] *Gulp, Grunt, Brokoli, Brunch and Bower*. Directly use npm command line scripts instead and you can eliminate extra packages like these here for *Gulp*:\r\n\r\n    var gulp        = require(&#39;gulp&#39;),\r\n      minifyCSS     = require(&#39;gulp-minify-css&#39;),\r\n      sass          = require(&#39;gulp-sass&#39;),\r\n      browserify    = require(&#39;gulp-browserify&#39;),\r\n      uglify        = require(&#39;gulp-uglify&#39;),\r\n      rename        = require(&#39;gulp-rename&#39;),\r\n      jshint        = require(&#39;gulp-jshint&#39;),\r\n      jshintStyle   = require(&#39;jshint-stylish&#39;),\r\n      replace       = require(&#39;gulp-replace&#39;),\r\n      notify        = require(&#39;gulp-notify&#39;),\r\n\r\nYou can probably use *Gulp* and *Grunt* config file generators when creating config files for your project. This way you don&#39;t need to install *Yeoman* or similar tools.\r\n\r\n\r\n  [1]: https://github.com/webpack/webpack-dev-server\r\n  [3]: https://gist.github.com/sokra/27b24881210b56bbaff7\r\n  [5]: https://www.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/\r\n  [nof5]: https://github.com/peerigon/nof5\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1495338226, "answer_id": 44092960, "path": "stack.gulp.answer", "score": 31, "up_vote_count": 32, "is_accepted": false, "last_activity_date": 1518739871, "last_edit_date": 1518739871, "body_markdown": "**OK,** they all have got some similarities, they do the same things for you in different and similar ways, I divide them in **3 main groups** as below:\r\n&lt;hr&gt;\r\n**1) Module bundlers** \r\n\r\nwebpack and browserify as popular ones, work like task runners but with more flexibility, aslo it will bundle everything together as your setting, so you can point to the result as bundle.js for example in one single file including the CSS and Javascript, for more details of each, look at the details below:\r\n\r\n **webpack**\r\n\r\n&gt; webpack is a module bundler for modern JavaScript applications. When\r\n&gt; webpack processes your application, it recursively builds a dependency\r\n&gt; graph that includes every module your application needs, then packages\r\n&gt; all of those modules into a small number of bundles - often only one -\r\n&gt; to be loaded by the browser.\r\n&gt; \r\n&gt; It is incredibly configurable, but to get started you only need to\r\n&gt; understand Four Core Concepts: entry, output, loaders, and plugins.\r\n&gt; \r\n&gt; This document is intended to give a high-level overview of these\r\n&gt; concepts, while providing links to detailed concept specific\r\n&gt; use-cases.\r\n\r\n more [here][1]\r\n\r\n**browserify**\r\n\r\n&gt; Browserify is a development tool that allows us to write node.js-style\r\n&gt; modules that compile for use in the browser. Just like node, we write\r\n&gt; our modules in separate files, exporting external methods and\r\n&gt; properties using the module.exports and exports variables. We can even\r\n&gt; require other modules using the require function, and if we omit the\r\n&gt; relative path it\u2019ll resolve to the module in the node_modules\r\n&gt; directory.\r\n\r\n more [here][2]\r\n\r\n&lt;hr&gt;\r\n\r\n**2) Task runners** \r\n\r\ngulp and grunt are task runners, basically what they do, creating tasks and run them whenever you want, for example you install a plugin to minify your CSS and then run it each time to do minifying, more details about each: \r\n\r\n**gulp**\r\n\r\n&gt; gulp.js is an open-source JavaScript toolkit by Fractal Innovations\r\n&gt; and the open source community at GitHub, used as a streaming build\r\n&gt; system in front-end web development. It is a task runner built on\r\n&gt; Node.js and Node Package Manager (npm), used for automation of\r\n&gt; time-consuming and repetitive tasks involved in web development like\r\n&gt; minification, concatenation, cache busting, unit testing, linting,\r\n&gt; optimization etc. gulp uses a code-over-configuration approach to\r\n&gt; define its tasks and relies on its small, single-purposed plugins to\r\n&gt; carry them out. gulp ecosystem has 1000+ such plugins made available\r\n&gt; to choose from.\r\n\r\n more [here][3]\r\n\r\n**grunt**\r\n\r\n&gt; Grunt is a JavaScript task runner, a tool used to automatically\r\n&gt; perform frequently used tasks such as minification, compilation, unit\r\n&gt; testing, linting, etc. It uses a command-line interface to run custom\r\n&gt; tasks defined in a file (known as a Gruntfile). Grunt was created by\r\n&gt; Ben Alman and is written in Node.js. It is distributed via npm.\r\n&gt; Presently, there are more than five thousand plugins available in the\r\n&gt; Grunt ecosystem.\r\n\r\n more [here][4]\r\n\r\n\r\n&lt;hr&gt;\r\n\r\n**3) Package managers** \r\n\r\npackage managers, what they do is managing plugins you need in your application and install them for you through github etc using package.json, very handy to update you modules, install them and sharing your app across, more details for each:\r\n\r\n**npm**\r\n\r\n&gt; npm is a package manager for the JavaScript programming language. It\r\n&gt; is the default package manager for the JavaScript runtime environment\r\n&gt; Node.js. It consists of a command line client, also called npm, and an\r\n&gt; online database of public packages, called the npm registry. The\r\n&gt; registry is accessed via the client, and the available packages can be\r\n&gt; browsed and searched via the npm website.\r\n\r\n more [here][5]\r\n\r\n**bower**\r\n\r\n&gt; Bower can manage components that contain HTML, CSS, JavaScript, fonts\r\n&gt; or even image files. Bower doesn\u2019t concatenate or minify code or do\r\n&gt; anything else - it just installs the right versions of the packages\r\n&gt; you need and their dependencies.\r\n&gt; To get started, Bower works by fetching and installing packages from\r\n&gt; all over, taking care of hunting, finding, downloading, and saving the\r\n&gt; stuff you\u2019re looking for. Bower keeps track of these packages in a\r\n&gt; manifest file, bower.json.\r\n\r\n more [here][6]\r\n\r\n\r\nand the most recent package manager that shouldn&#39;t be missed, it&#39;s young and fast in real work environment compare to npm which I was mostly using before, for reinstalling modules, it do double checks the node_modules folder to check the existence of the module, also seems installing the modules takes less time:\r\n\r\n**yarn**\r\n\r\n&gt; Yarn is a package manager for your code. It allows you to use and\r\n&gt; share code with other developers from around the world. Yarn does this\r\n&gt; quickly, securely, and reliably so you don\u2019t ever have to worry.\r\n&gt; \r\n&gt; Yarn allows you to use other developers\u2019 solutions to different\r\n&gt; problems, making it easier for you to develop your software. If you\r\n&gt; have problems, you can report issues or contribute back, and when the\r\n&gt; problem is fixed, you can use Yarn to keep it all up to date.\r\n&gt; \r\n&gt; Code is shared through something called a package (sometimes referred\r\n&gt; to as a module). A package contains all the code being shared as well\r\n&gt; as a package.json file which describes the package.\r\n\r\nmore [here][7]\r\n\r\n&lt;hr&gt;\r\n\r\n\r\n  [1]: https://webpack.js.org/concepts/\r\n  [2]: http://blakeembrey.com/articles/2013/09/introduction-to-browserify/\r\n  [3]: https://en.wikipedia.org/wiki/Gulp.js\r\n  [4]: https://en.wikipedia.org/wiki/Grunt_(software)\r\n  [5]: https://www.npmjs.com/\r\n  [6]: https://bower.io/\r\n  [7]: https://yarnpkg.com/lang/en/docs/getting-started/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1496154683, "answer_id": 44265109, "path": "stack.gulp.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1496154683, "body_markdown": "StackShare provides a side-by-side (or **stack up**) of three tools at one time. \r\n\r\nHere it is for [npm vs. Bower vs. Browserify][1] and for [gulp vs. Webpack vs. Grunt][2]\r\n\r\nOn these comparison pages you can find the following:\r\n\r\n - number of votes each has received from the StackShare community\r\n - which companies use them in their tech stack\r\n - interest level for each over time\r\n - pros for each tool\r\n\r\n  [1]: https://stackshare.io/stackups/bower-vs-browserify-vs-npm\r\n  [2]: https://stackshare.io/stackups/grunt-vs-gulp-vs-webpack"}, {"tags": [], "down_vote_count": 0, "creation_date": 1502703783, "answer_id": 45671697, "path": "stack.gulp.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1502703783, "body_markdown": "`Webpack` is a bundler. Like `Browserfy` it looks in the codebase for module requests (`require` or `import`) and resolves them recursively. What is more, you can configure `Webpack` to resolve not just JavaScript-like modules, but CSS, images, HTML, literally everything. What especially makes me excited about `Webpack`, you can combine both compiled and dynamically loaded modules in the same app. Thus one get a real performance boost, especially over HTTP/1.x. How exactly you you do it I described with examples here http://dsheiko.com/weblog/state-of-javascript-modules-2017/\r\nAs an alternative for bundler one can think of `Rollup.js` (https://rollupjs.org/), which optimizes the code during compilation, but stripping all the found unused chunks. \r\n\r\nFor `AMD`, instead of `RequireJS` one can go with native `ES2016 module system`, but loaded with `System.js` (https://github.com/systemjs/systemjs)\r\n\r\nBesides, I would point that `npm` is often used as an automating tool like `grunt` or `gulp`. Check out https://docs.npmjs.com/misc/scripts. I personally  go now with npm scripts only avoiding other automation tools, though in past I was very much into `grunt`. With other tools you have to rely on countless plugins for packages, that often are not good written and not being actively maintained. `npm` knows its packages, so you call to any of locally installed packages by name like:\r\n\r\n    {\r\n      &quot;scripts&quot;: {\r\n        &quot;start&quot;: &quot;npm http-server&quot;\r\n      },\r\n      &quot;devDependencies&quot;: {\r\n        &quot;http-server&quot;: &quot;^0.10.0&quot;\r\n      }\r\n    }\r\n\r\nActually you as a rule do not need any plugin if the package supports CLI. "}], "title": "NPM vs. Bower vs. Browserify vs. Gulp vs. Grunt vs. Webpack", "view_count": 207665, "answer_count": 9, "code_snippet": ["<code>npm</code>", "<code>bower</code>", "<code>webpack</code>", "<code>gulp</code>", "<code>grunt</code>", "<code>bower</code>", "<code>npm</code>", "<code>npm</code>", "<code>npm</code>", "<code>bower</code>", "<code>bower</code>", "<code>npm</code>", "<code>grunt</code>", "<code>gulp</code>", "<code>grunt</code>", "<code>gulp</code>", "<code>maven</code>", "<code>gradle</code>", "<code>webpack</code>", "<code>webpack-dev-server</code>", "<code>npm</code>", "<code>bower</code>", "<code>gulp</code>", "<code>grunt</code>", "<code>npm</code>", "<code>browserify</code>", "<code>browserify</code>", "<code>node</code>", "<code>require</code>", "<code>webpack</code>", "<code>webpack-dev-server</code>", "<code>browserify</code>", "<code>gulp</code>", "<code>grunt</code>", "<code>npm</code>"], "path": "stack.browserify"}, {"tags": ["node.js", "ubuntu", "gruntjs"], "_childDocuments_": [{"tags": [], "down_vote_count": 1, "creation_date": 1413076930, "answer_id": 26320915, "path": "stack.gulp.answer", "score": 702, "up_vote_count": 703, "is_accepted": true, "last_activity_date": 1413076930, "last_edit_date": 1495540056, "body_markdown": "Found the answer. Just in case it helps someone, I do post it here:\r\n\r\nDoing a symlink solves the issue: `ln -s /usr/bin/nodejs /usr/bin/node`\r\n(My thanks and +1 vote to [bodokaiser][1]).\r\n\r\nNOTE: I think this post is not an exact duplicate, because that post was somewhat a  browserify question.\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/20886217/browserify-error-usr-bin-env-node-no-such-file-or-directory"}, {"tags": [], "down_vote_count": 3, "creation_date": 1413077037, "answer_id": 26320925, "path": "stack.gulp.answer", "score": 39, "up_vote_count": 42, "is_accepted": false, "last_activity_date": 1413077189, "last_edit_date": 1413077189, "body_markdown": "I think you should upgrade lastest node version\r\n\r\n    sudo npm cache clean -f\r\n    sudo npm install -g n\r\n    sudo n stable"}, {"tags": [], "down_vote_count": 0, "creation_date": 1418276383, "answer_id": 27416100, "path": "stack.gulp.answer", "score": 88, "up_vote_count": 88, "is_accepted": false, "last_activity_date": 1418276383, "body_markdown": "The issue is not with the version of node. Instead its the way NodeJS is installed by default in Ubuntu. When running a node application in ubuntu you have to run &#39;nodejs somethign.js&#39; instead of &#39;node something.js&#39;\r\n\r\nSo the application name called in the terminal is nodejs and not node. This is why it there is a need of a symlink to simply forward all the commands received as node to nodejs.\r\n\r\n    ln -s /usr/bin/nodejs /usr/bin/node"}, {"tags": [], "down_vote_count": 1, "creation_date": 1455311626, "answer_id": 35372283, "path": "stack.gulp.answer", "score": 27, "up_vote_count": 28, "is_accepted": false, "last_activity_date": 1486663827, "last_edit_date": 1486663827, "body_markdown": "if you are able to access node on ubuntu terminal using nodejs command,then this problem can be simply solved using\r\n-creating a symbolic link of nodejs and node using\r\n\r\n`ln -s /usr/bin/nodejs /usr/bin/node`\r\n\r\nand this may solve the problem"}, {"tags": [], "down_vote_count": 1, "creation_date": 1459071882, "answer_id": 36245941, "path": "stack.gulp.answer", "score": 21, "up_vote_count": 22, "is_accepted": false, "last_activity_date": 1487282438, "last_edit_date": 1487282438, "body_markdown": "In my case installing nodejs-legacy solved the issue.\r\nHope that it helps.\r\n\r\n```sudo apt-get install nodejs-legacy\r\n```"}, {"tags": [], "down_vote_count": 2, "creation_date": 1469786058, "answer_id": 38655797, "path": "stack.gulp.answer", "score": 7, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1469786058, "body_markdown": "I&#39;ve found this is often a misnaming error, if you install from a package manager you bin may be called nodejs so you just need to symlink it like so \r\n\r\n    ln -s /usr/bin/nodejs /usr/bin/node"}, {"tags": [], "down_vote_count": 0, "creation_date": 1470198904, "answer_id": 38734497, "path": "stack.gulp.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1470198904, "body_markdown": "If you already have nodejs installed (check with `which nodejs`) and don&#39;t want to install another package, you can, as root:\r\n\r\n    update-alternatives --install /usr/bin/node node /usr/bin/nodejs 99"}, {"tags": [], "down_vote_count": 0, "creation_date": 1477666010, "answer_id": 40307629, "path": "stack.gulp.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1477666010, "body_markdown": "While `ln -s` is the obvious easiest fix, a piece of explanation:\r\n\r\n&gt; Because of a conflict with another package, the executable from the\r\n&gt; Ubuntu repositories is called nodejs instead of node. Keep this in\r\n&gt; mind as you are running software.\r\n\r\nThis advice comes up, when installing `sudo apt-get install nodejs`.\r\n\r\nSo some other known tool (I don&#39;t know what it does. While being known to ubuntu repositories, it is not installed by default in 16.04) occupies that namespace.\r\n\r\nWould have been nice, if Ubuntu had offered an advice how to fix this &#39;cleanly&#39;, if not by doing by hand what otherwise the package would do. (a collision remains a collision... if+when it would occur)\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1490354556, "answer_id": 42998248, "path": "stack.gulp.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1490354556, "body_markdown": "    sudo PATH=&quot;$PATH:/usr/local/bin&quot; npm install -g &lt;package-name&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1493542500, "answer_id": 43704629, "path": "stack.gulp.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1509029692, "last_edit_date": 1509029692, "body_markdown": "When I was using gulp i got this error.\r\n\r\n    ~$ gulp\r\n\r\n/usr/bin/env: \u2018node\u2019: No such file or directory\r\n\r\nThis was removed by executing following command you have to keep in mind that /usr/bin directory has all permissions.\r\n\r\n    ~$ ln -s /usr/bin/nodejs /usr/bin/node\r\n\r\nthis works for me..\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1496831235, "answer_id": 44410063, "path": "stack.gulp.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1496831235, "body_markdown": "Just do\r\n\r\n    $ sudo apt-get install nodejs-legacy\r\n\r\nAnd it will start working."}, {"tags": [], "down_vote_count": 0, "creation_date": 1512730816, "answer_id": 47712996, "path": "stack.gulp.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1512730816, "body_markdown": "For my case link **did** **NOT** **work** as follow\r\n\r\n&gt; ln -s /usr/bin/nodejs /usr/bin/node\r\n\r\nBut you can open /usr/local/bin/lessc as root, and change the first line from node to nodejs.\r\n\r\n&gt; -#!/usr/bin/env node\r\n\r\n&gt; +#!/usr/bin/env nodejs\r\n\r\n"}], "creation_date": 1413076664, "body_markdown": "I&#39;m trying to install nodeJs into my Ubuntu 14.04 in order to use GruntJs.\r\n\r\nI&#39;ve read about [Ubuntu different way][1] of doing it ([issues?][2]), so this is what I&#39;ve done in order to install it:\r\n\r\n    sudo apt-get install npm\r\n\r\n    sudo npm install -g grunt-cli\r\n\r\nTyping grunt after that I&#39;ve got the error:\r\n\r\n    /usr/bin/env: node: No such file or directory\r\n\r\nSo, I&#39;ve tried:\r\n\r\n    curl -sL https://deb.nodesource.com/setup | sudo bash -\r\n\r\n    sudo apt-get install -y nodejs\r\n\r\n    sudo apt-get update\r\n\r\nAnd trying again, and still getting the error, I&#39;ve tried:\r\n\r\n    sudo add-apt-repository https://launchpad.net/~chris-lea/+archive/node.js/\r\n\r\n    sudo apt-get install -y nodejs\r\n\r\nI&#39;ve got this message:\r\n\r\n    nodejs is already the newest version.\r\n    0 to upgrade, 0 to newly install, 0 to remove and 3 not to upgrade.\r\n\r\nI did try a cleanup just in case:\r\n\r\n    sudo apt-get autoremove\r\n\r\nBut nope, the error is still there: when I type grunt I still get `/usr/bin/env: node: No such file or directory`\r\n\r\nWhat should I do?\r\n\r\n\r\n\r\n\r\n\r\n  [1]: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager#debian-and-ubuntu-based-linux-distributions\r\n  [2]: https://github.com/atom/atom/issues/2241\r\n", "title": "Cannot install NodeJs: /usr/bin/env: node: No such file or directory", "view_count": 153071, "up_vote_count": 251, "answer_count": 12, "link": "https://stackoverflow.com/questions/26320901/cannot-install-nodejs-usr-bin-env-node-no-such-file-or-directory", "code_snippet": ["<code>sudo apt-get install npm\n\nsudo npm install -g grunt-cli\n</code>", "<code>/usr/bin/env: node: No such file or directory\n</code>", "<code>curl -sL https://deb.nodesource.com/setup | sudo bash -\n\nsudo apt-get install -y nodejs\n\nsudo apt-get update\n</code>", "<code>sudo add-apt-repository https://launchpad.net/~chris-lea/+archive/node.js/\n\nsudo apt-get install -y nodejs\n</code>", "<code>nodejs is already the newest version.\n0 to upgrade, 0 to newly install, 0 to remove and 3 not to upgrade.\n</code>", "<code>sudo apt-get autoremove\n</code>", "<code>/usr/bin/env: node: No such file or directory</code>", "<code>ln -s /usr/bin/nodejs /usr/bin/node</code>", "<code>sudo apt-get install nodejs-legacy</code>", "<code>ln -s /usr/bin/nodejs /usr/bin/node\n</code>", "<code>sudo npm cache clean -f\nsudo npm install -g n\nsudo n stable\n</code>", "<code>n</code>", "<code>n</code>", "<code>ln -s /usr/bin/nodejs /usr/bin/node</code>", "<code>sudo apt-get install nodejs-legacy\n</code>", "<code>$ sudo apt-get install nodejs-legacy\n</code>", "<code>ln -s /usr/bin/nodejs /usr/bin/node\n</code>", "<code>which nodejs</code>", "<code>update-alternatives --install /usr/bin/node node /usr/bin/nodejs 99\n</code>", "<code>~$ gulp\n</code>", "<code>~$ ln -s /usr/bin/nodejs /usr/bin/node\n</code>", "<code>ln -s</code>", "<code>sudo apt-get install nodejs</code>", "<code>sudo PATH=\"$PATH:/usr/local/bin\" npm install -g &lt;package-name&gt;\n</code>"], "path": "stack.browserify"}, {"tags": ["javascript", "string", "multiline", "heredoc"], "creation_date": 1241057515, "body_markdown": "I have the following code in Ruby. I want to convert this code into JavaScript. what&#39;s the equivalent code in JS?\r\n\r\n    text = &lt;&lt;&quot;HERE&quot;\r\n    This\r\n    Is\r\n    A\r\n    Multiline\r\n    String\r\n    HERE", "last_edit_date": 1368027446, "up_vote_count": 1775, "link": "https://stackoverflow.com/questions/805107/creating-multiline-strings-in-javascript", "_childDocuments_": [{"tags": [], "down_vote_count": 9, "creation_date": 1241057629, "answer_id": 805111, "path": "stack.browserify.answer", "score": 179, "up_vote_count": 188, "is_accepted": false, "last_activity_date": 1390104887, "last_edit_date": 1390104887, "body_markdown": "You can do this...\r\n\r\n    var string = &#39;This is\\n&#39; +\r\n    &#39;a multiline\\n&#39; + \r\n    &#39;string&#39;;\r\n"}, {"tags": [], "down_vote_count": 31, "creation_date": 1241057720, "answer_id": 805113, "path": "stack.browserify.answer", "score": 2072, "up_vote_count": 2103, "is_accepted": true, "last_activity_date": 1518626871, "last_edit_date": 1518626871, "body_markdown": "### Update:\r\n\r\nECMAScript 6 (ES6) introduces a new type of literal, namely [**template literals**][1]. They have many features, variable interpolation among others, but most importantly for this question, they can be multiline.\r\n\r\nA template literal is delimited by *backticks*:\r\n\r\n    var html = `\r\n      &lt;div&gt;\r\n        &lt;span&gt;Some HTML here&lt;/span&gt;\r\n      &lt;/div&gt;\r\n    `;\r\n\r\n(Note: I&#39;m not advocating to use HTML in strings)\r\n\r\n[Browser support is OK][2], but you can use [transpilers][3] to be more compatible.\r\n\r\n\r\n---\r\n\r\n### Original ES5 answer:\r\n\r\nJavascript doesn&#39;t have a here-document syntax. You can escape the literal newline, however, which comes close:\r\n\r\n    &quot;foo \\\r\n    bar&quot;\r\n\r\n\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings\r\n  [2]: https://kangax.github.io/compat-table/es6/#test-template_literals\r\n  [3]: https://babeljs.io/\r\n"}, {"tags": [], "down_vote_count": 6, "creation_date": 1241076149, "answer_id": 805755, "path": "stack.browserify.answer", "score": 623, "up_vote_count": 629, "is_accepted": false, "last_activity_date": 1432729067, "last_edit_date": 1432729067, "body_markdown": "the pattern `text = &lt;&lt;&quot;HERE&quot; This Is A Multiline String HERE` is not available in js (I remember using it much in my good old Perl days).\r\n\r\nTo keep oversight with complex or long multiline strings I sometimes use an array pattern:\r\n\r\n    var myString = \r\n       [&#39;&lt;div id=&quot;someId&quot;&gt;&#39;,\r\n        &#39;some content&lt;br /&gt;&#39;,\r\n        &#39;&lt;a href=&quot;#someRef&quot;&gt;someRefTxt&lt;/a&gt;&#39;,\r\n        &#39;&lt;/div&gt;&#39;\r\n       ].join(&#39;\\n&#39;);\r\n\r\nor the pattern anonymous already showed (escape newline), which can be an ugly block in your code:\r\n\r\n        var myString = \r\n           &#39;&lt;div id=&quot;someId&quot;&gt; \\\r\n    some content&lt;br /&gt; \\\r\n    &lt;a href=&quot;#someRef&quot;&gt;someRefTxt&lt;/a&gt; \\\r\n    &lt;/div&gt;&#39;;\r\n\r\nHere&#39;s another weird but working &#39;trick&#39;&lt;sup&gt;&lt;b&gt;1&lt;/b&gt;&lt;/sup&gt;:\r\n\r\n    var myString = (function () {/*\r\n       &lt;div id=&quot;someId&quot;&gt;\r\n         some content&lt;br /&gt;\r\n         &lt;a href=&quot;#someRef&quot;&gt;someRefTxt&lt;/a&gt;\r\n        &lt;/div&gt;        \r\n    */}).toString().match(/[^]*\\/\\*([^]*)\\*\\/\\}$/)[1];\r\n*external edit: [jsfiddle](http://jsfiddle.net/orwellophile/hna15vLw/2/)*\r\n\r\n\r\n[&lt;b&gt;addition 2015&lt;/b&gt;]  \r\nES6 supports spanning strings over multiple lines using [template strings][1]:\r\n\r\n    let str = `This is a text\r\n        with multiple lines.\r\n        Escapes are interpreted,\r\n        \\n is a newline.`;\r\n    let str = String.raw`This is a text\r\n        with multiple lines.\r\n        Escapes are not interpreted,\r\n        \\n is not a newline.`;\r\n\r\n\r\n\r\n&lt;sup&gt;&lt;b&gt;1&lt;/b&gt;&lt;/sup&gt; Note: this will be lost after minifying/obfuscating your code\r\n\r\n\r\n  [1]: http://www.2ality.com/2011/09/quasi-literals.html"}, {"tags": [], "down_vote_count": 8, "creation_date": 1290530789, "answer_id": 4258535, "path": "stack.browserify.answer", "score": 7, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1290530789, "body_markdown": "This works in IE, Safari, Chrome and Firefox:\r\n\r\n    &lt;script type=&quot;text/javascript&quot; src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;div class=&quot;crazy_idea&quot; thorn_in_my_side=&#39;&lt;table  border=&quot;0&quot;&gt;\r\n    \t\t\t\t\t\t&lt;tr&gt;\r\n    \t\t\t\t\t\t\t&lt;td &gt;&lt;span class=&quot;mlayouttablecellsdynamic&quot;&gt;PACKAGE price $65.00&lt;/span&gt;&lt;/td&gt;\r\n    \t\t\t\t\t\t&lt;/tr&gt;\r\n    \t\t\t\t\t&lt;/table&gt;&#39;&gt;&lt;/div&gt;\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n    \talert($(&quot;.crazy_idea&quot;).attr(&quot;thorn_in_my_side&quot;));\r\n    &lt;/script&gt;"}, {"tags": [], "down_vote_count": 17, "creation_date": 1302113795, "answer_id": 5571069, "path": "stack.browserify.answer", "score": 325, "up_vote_count": 342, "is_accepted": false, "last_activity_date": 1444417236, "last_edit_date": 1444417236, "body_markdown": "You _can_ have multiline strings in pure JavaScript.\r\n\r\nThis method is based on the serialization of functions, which is [defined to be implementation-dependent][1]. It does work in the most browsers (see below), but there&#39;s no guarantee that it will still work in the future, so do not rely on it.\r\n\r\nUsing the following function:\r\n\r\n    function hereDoc(f) {\r\n      return f.toString().\r\n          replace(/^[^\\/]+\\/\\*!?/, &#39;&#39;).\r\n          replace(/\\*\\/[^\\/]+$/, &#39;&#39;);\r\n    }\r\n\r\nYou can have here-documents like this:\r\n    \r\n    var tennysonQuote = hereDoc(function() {/*!\r\n      Theirs not to make reply,\r\n      Theirs not to reason why,\r\n      Theirs but to do and die\r\n    */});\r\n\r\nThe method has successfully been tested in the following browsers (not mentioned = not tested):\r\n\r\n- IE 4 - 10\r\n- Opera 9.50 - 12 (not in 9-)\r\n- Safari 4 - 6 (not in 3-)\r\n- Chrome 1 - 45\r\n- Firefox 17 - 21 ([not in 16-](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString#Notes))\r\n- Rekonq 0.7.0 - 0.8.0\r\n- *Not supported in Konqueror 4.7.4*\r\n\r\nBe careful with your minifier, though. It tends to remove comments. For the [YUI compressor](http://www.julienlecomte.net/yuicompressor/README), a comment starting with `/*!` (like the one I used) will be preserved. \r\n\r\nI think a _real_ solution would be to use [CoffeeScript](http://coffeescript.org/#strings).\r\n\r\n\r\n  [1]: http://es5.github.io/#x15.3.4.2"}, {"tags": [], "down_vote_count": 1, "creation_date": 1305897033, "answer_id": 6072388, "path": "stack.browserify.answer", "score": 10, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1305897033, "last_edit_date": 1495540056, "body_markdown": "to sum up, I have tried 2 approaches listed here in user javascript programming (Opera 11.01):\r\n\r\n - this one didn&#39;t work: https://stackoverflow.com/questions/805107/multiline-strings-in-javascript/805111#805111\r\n - this worked fairly well, I have also figured out how to make it look good in Notepad++ source view: https://stackoverflow.com/questions/805107/multiline-strings-in-javascript/5571069#5571069\r\n\r\nSo I recommend the working approach for Opera user JS users. Unlike what the author was saying: \r\n\r\n&gt; It doesn&#39;t work on firefox or opera; only on IE, chrome and safari. \r\n\r\nIt DOES work in Opera 11. At least in user JS scripts. Too bad I can&#39;t comment on individual answers or upvote the answer, I&#39;d do it immediately. If possible, someone with higher privileges please do it for me."}, {"tags": [], "down_vote_count": 3, "creation_date": 1307327445, "answer_id": 6247331, "path": "stack.browserify.answer", "score": 1053, "up_vote_count": 1056, "is_accepted": false, "last_activity_date": 1517292143, "last_edit_date": 1517292143, "body_markdown": "## Update:\r\n\r\nAs the first answer mentions, with ES6/Babel, you can now create multi-line strings simply by using backticks:\r\n\r\n    const htmlString = `Say hello to \r\n    multi-line\r\n    strings!`;\r\n\r\nInterpolating variables is a popular new feature that comes with back-tick delimited strings:\r\n\r\n    const htmlString = `${user.name} liked your post about strings`;\r\n\r\nThis just transpiles down to concatenation:\r\n\r\n    user.name + &#39; liked your post about strings&#39;\r\n\r\n## Original ES5 answer:\r\n\r\n&gt;[Google&#39;s JavaScript style guide][1] recommends to use string concatenation instead of escaping newlines:\r\n\r\n&gt;**Do not do this:**\r\n\r\n&gt;     var myString = &#39;A rather long string of English text, an error message \\\r\n                    actually that just keeps going and going -- an error \\\r\n                    message to make the Energizer bunny blush (right through \\\r\n                    those Schwarzenegger shades)! Where was I? Oh yes, \\\r\n                    you\\&#39;ve got an error and all the extraneous whitespace is \\\r\n                    just gravy.  Have a nice day.&#39;;\r\n\r\n&gt;The whitespace at the beginning of each line can&#39;t be safely stripped at compile time; whitespace after the slash will result in tricky errors; and while most script engines support this, it is not part of ECMAScript.\r\n\r\n&gt;**Use string concatenation instead:**\r\n\r\n&gt;     var myString = &#39;A rather long string of English text, an error message &#39; +\r\n                   &#39;actually that just keeps going and going -- an error &#39; +\r\n                   &#39;message to make the Energizer bunny blush (right through &#39; +\r\n                   &#39;those Schwarzenegger shades)! Where was I? Oh yes, &#39; +\r\n                   &#39;you\\&#39;ve got an error and all the extraneous whitespace is &#39; +\r\n                   &#39;just gravy.  Have a nice day.&#39;;\r\n\r\n  [1]: https://google.github.io/styleguide/javascriptguide.xml?showone=Multiline_string_literals#Multiline_string_literals\r\n  [2]: http://kishorelive.com/2011/11/22/ecmascript-6-looks-promising/\r\n  [3]: http://tools.google.com/dlpage/chromesxs"}, {"tags": [], "down_vote_count": 3, "creation_date": 1323806950, "answer_id": 8495489, "path": "stack.browserify.answer", "score": 24, "up_vote_count": 27, "is_accepted": false, "last_activity_date": 1323806950, "body_markdown": "I like this syntax and indendation:\r\n\r\n    string = &#39;my long string...\\n&#39;\r\n           + &#39;continue here\\n&#39;\r\n           + &#39;and here.&#39;;\r\n\r\n(but actually can&#39;t be considered as multiline string)"}, {"tags": [], "down_vote_count": 3, "creation_date": 1325620311, "answer_id": 8717821, "path": "stack.browserify.answer", "score": 80, "up_vote_count": 83, "is_accepted": false, "last_activity_date": 1325620311, "body_markdown": "I&#39;m surprised I didn&#39;t see this, because it works everywhere I&#39;ve tested it and is very useful for e.g. templates:\r\n\r\n    &lt;script type=&quot;bogus&quot; id=&quot;multi&quot;&gt;\r\n        My\r\n        multiline\r\n        string\r\n    &lt;/script&gt;\r\n    &lt;script&gt;\r\n        alert($(&#39;#multi&#39;).html());\r\n    &lt;/script&gt;\r\n\r\nDoes anybody know of an environment where there is HTML but it doesn&#39;t work?\r\n\r\n"}, {"tags": [], "down_vote_count": 4, "creation_date": 1345213553, "answer_id": 12007670, "path": "stack.browserify.answer", "score": 44, "up_vote_count": 48, "is_accepted": false, "last_activity_date": 1481898052, "last_edit_date": 1481898052, "body_markdown": "I solved this by outputting a div, making it hidden, and calling the div id by jQuery when I needed it.\r\n\r\ne.g.\r\n\r\n    &lt;div id=&quot;UniqueID&quot; style=&quot;display:none;&quot;&gt;\r\n         Strings\r\n         On\r\n         Multiple\r\n         Lines\r\n         Here\r\n    &lt;/div&gt;\r\n\r\nThen when I need to get the string, I just use the following jQuery:\r\n\r\n    $(&#39;#UniqueID&#39;).html();\r\n\r\nWhich returns my text on multiple lines. If I call \r\n\r\n    alert($(&#39;#UniqueID&#39;).html());\r\n\r\nI get:\r\n\r\n![enter image description here][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/vIVFc.png"}, {"tags": [], "down_vote_count": 2, "creation_date": 1345746645, "answer_id": 12097933, "path": "stack.browserify.answer", "score": 25, "up_vote_count": 27, "is_accepted": false, "last_activity_date": 1483451921, "last_edit_date": 1483451921, "body_markdown": "Using script tags:\r\n\r\n- add a `&lt;script&gt;...&lt;/script&gt;` block containing your multiline text into `head` tag;\r\n- get your multiline text as is... (watch out for text encoding: UTF-8, ASCII)\r\n\r\n        &lt;script&gt;\r\n\r\n            // pure javascript\r\n            var text = document.getElementById(&quot;mySoapMessage&quot;).innerHTML ;\r\n\r\n            // using JQuery&#39;s document ready for safety\r\n            $(document).ready(function() {\r\n\r\n                var text = $(&quot;#mySoapMessage&quot;).html(); \r\n\r\n            });\r\n\r\n        &lt;/script&gt;\r\n\r\n        &lt;script id=&quot;mySoapMessage&quot; type=&quot;text/plain&quot;&gt;\r\n\r\n            &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:typ=&quot;...&quot;&gt;\r\n               &lt;soapenv:Header/&gt;\r\n               &lt;soapenv:Body&gt;\r\n                  &lt;typ:getConvocadosElement&gt;\r\n                     ...\r\n                  &lt;/typ:getConvocadosElement&gt;\r\n               &lt;/soapenv:Body&gt;\r\n            &lt;/soapenv:Envelope&gt;\r\n\r\n            &lt;!-- this comment will be present on your string --&gt;\r\n            //uh-oh, javascript comments...  SOAP request will fail \r\n        \r\n\r\n        &lt;/script&gt;\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1353676200, "answer_id": 13529824, "path": "stack.browserify.answer", "score": 0, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1353676200, "body_markdown": "Just tried the Anonymous answer and found there&#39;s a little trick here, it doesn&#39;t work if there&#39;s a space after backslash `\\ ` &lt;br /&gt;\r\nSo the following solution doesn&#39;t work -\r\n\r\n    var x = { test:&#39;&lt;?xml version=&quot;1.0&quot;?&gt;\\ &lt;-- One space here\r\n                &lt;?mso-application progid=&quot;Excel.Sheet&quot;?&gt;&#39; \r\n    };\r\n\r\nBut when space is removed it works - \r\n\r\n    var x = { test:&#39;&lt;?xml version=&quot;1.0&quot;?&gt;\\&lt;-- No space here now\r\n              &lt;?mso-application progid=&quot;Excel.Sheet&quot;?&gt;&#39; \r\n    };\r\n\r\n    alert(x.test);\u200b\r\n\r\nHope it helps !!"}, {"tags": [], "down_vote_count": 1, "creation_date": 1359375646, "answer_id": 14561933, "path": "stack.browserify.answer", "score": 1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1359375646, "body_markdown": "I think this workaround should work in IE, Chrome, Firefox, Safari, Opera -\r\n\r\n**Using jQuery** :\r\n\r\n    &lt;xmp id=&quot;unique_id&quot; style=&quot;display:none;&quot;&gt;\r\n      Some plain text\r\n      Both type of quotes :  &quot; &#39; &quot; And  &#39; &quot; &#39;\r\n      JS Code : alert(&quot;Hello World&quot;);\r\n      HTML Code : &lt;div class=&quot;some_class&quot;&gt;&lt;/div&gt;\r\n    &lt;/xmp&gt;\r\n    &lt;script&gt;\r\n       alert($(&#39;#unique_id&#39;).html());\r\n    &lt;/script&gt;\r\n\r\n**Using Pure Javascript :**\r\n\r\n    &lt;xmp id=&quot;unique_id&quot; style=&quot;display:none;&quot;&gt;\r\n      Some plain text\r\n      Both type of quotes :  &quot; &#39; &quot; And  &#39; &quot; &#39;\r\n      JS Code : alert(&quot;Hello World&quot;);\r\n      HTML Code : &lt;div class=&quot;some_class&quot;&gt;&lt;/div&gt;\r\n    &lt;/xmp&gt;\r\n    &lt;script&gt;\r\n       alert(document.getElementById(&#39;unique_id&#39;).innerHTML);\r\n    &lt;/script&gt;\r\n\r\nCheers!!"}, {"tags": [], "down_vote_count": 3, "creation_date": 1361095006, "answer_id": 14919898, "path": "stack.browserify.answer", "score": 13, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1453045497, "last_edit_date": 1453045497, "body_markdown": "**Downvoters**: This code is supplied for information only. \r\n\r\nThis has been tested in Fx 19 and Chrome 24 on Mac  \r\n\r\n[DEMO](http://jsfiddle.net/mplungjan/pMSc8/)\r\n\r\n    var new_comment; /*&lt;&lt;&lt;EOF \r\n        &lt;li class=&quot;photobooth-comment&quot;&gt;\r\n           &lt;span class=&quot;username&quot;&gt;\r\n              &lt;a href=&quot;#&quot;&gt;You&lt;/a&gt;\r\n           &lt;/span&gt;\r\n           &lt;span class=&quot;comment-text&quot;&gt;\r\n              $text\r\n           &lt;/span&gt;\r\n           &lt;span class=&quot;comment-time&quot;&gt;\r\n              2d\r\n           &lt;/span&gt;\r\n        &lt;/li&gt;\r\n    EOF*/\r\n    // note the script tag here is hardcoded as the FIRST tag \r\n    new_comment=document.currentScript.innerHTML.split(&quot;EOF&quot;)[1]; \r\n    alert(new_comment.replace(&#39;$text&#39;,&#39;Here goes some text&#39;));"}, {"tags": [], "down_vote_count": 10, "creation_date": 1361238410, "answer_id": 14948475, "path": "stack.browserify.answer", "score": -10, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1361238410, "body_markdown": "It&#39;s not extremely elegant but it&#39;s clean enough for me:\r\n\r\n    var myString = &quot;First line&quot; + &quot;\\n&quot;;\r\n    var myString = myString + &quot;Second line&quot; + &quot;\\n&quot;;\r\n    var myString = myString + &quot;Third line&quot; + &quot;\\n&quot;;\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1362649026, "answer_id": 15267630, "path": "stack.browserify.answer", "score": 0, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1414501265, "last_edit_date": 1414501265, "body_markdown": "This is one fairly economical approach, at least in terms of the source code:\r\n\r\n    function s() {\r\n        var args = [],index;\r\n        for (index = 0; index&lt; arguments.length; index++) {\r\n            args.push (arguments [index]);\r\n        }\r\n        return args.join (&quot;\\n&quot;);\r\n    }\r\n    console.log (s (\r\n        &quot;This is the first line&quot;,\r\n        &quot;and this is the second&quot;,\r\n        &quot;finally a third&quot;\r\n    ));\r\n\r\n    function s() {return arguments.join (&quot;\\n&quot;)} \r\n\r\nwould be nicer of course if the &quot;arguments&quot; property were a proper array.\r\n\r\nA second version might use &quot;&quot; to do the join for cases when you want to control the line breaks in a very long string."}, {"tags": [], "down_vote_count": 2, "creation_date": 1363899915, "answer_id": 15558082, "path": "stack.browserify.answer", "score": 107, "up_vote_count": 109, "is_accepted": false, "last_activity_date": 1363899915, "body_markdown": "I came up with this very jimmy rigged method of a multi lined string. Since converting a function into a string also returns any comments inside the function you can use the comments as your string using a multilined comment /**/. You just have to trim off the ends and you have your string.\r\n\r\n    var myString = function(){/*\r\n        This is some\r\n        awesome multi-lined\r\n        string using a comment \r\n        inside a function \r\n        returned as a string.\r\n        Enjoy the jimmy rigged code.\r\n    */}.toString().slice(14,-3)\r\n\r\n    alert(myString)\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1375459490, "answer_id": 18021444, "path": "stack.browserify.answer", "score": -1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1375459490, "body_markdown": "I program this way:\r\n\r\n    sys = {\r\n    \tlayout: null,\r\n    \tmakeLayout: function (obCLS) {\r\n    \t\tthis.layout = $(&#39;&lt;div /&gt;&#39;).addClass(&#39;editor&#39;).appendTo($(obCLS)).append(\r\n    \t\t\r\n    \t\t\t/* Cargador */\r\n    \t\t\t/* @this.layout.find(&#39;&gt; div:nth-of-child(1)&#39;); */\r\n    \t\t\t&#39;&lt;div&gt;&#39; +\r\n    \t\t\t&#39;\t&lt;p&gt;Seleccione la imagen que desea procesar.&lt;/p&gt;&#39; +\r\n    \t\t\t&#39;\t&lt;input type=&quot;button&quot; value=&quot;Seleccionar&quot; class=&quot;btn btn-xlarge btn-success&quot; /&gt;&#39; +\r\n    \t\t\t&#39;\t&lt;span&gt;&lt;/span&gt;&#39; +\r\n    \t\t\t&#39;&lt;/div&gt;&#39; +\r\n    \r\n    \t\t\t/* Cargador - Progreso */\r\n    \t\t\t/* @this.layout.find(&#39;&gt; div:nth-of-child(2)&#39;); */\r\n    \t\t\t&#39;&lt;div&gt;&#39; +\r\n    \t\t\t&#39;\t&lt;div&gt;&#39; +\r\n    \t\t\t&#39;\t\t&lt;div&gt;&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;\t\t&lt;div&gt;&#39; +\r\n    \t\t\t&#39;\t\t\t&lt;div&gt;&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;\t\t&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;\t&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;&lt;/div&gt;&#39; +\r\n    \r\n    \t\t\t/* Editor */\r\n    \t\t\t/* @this.layout.find(&#39;&gt; div:nth-of-child(3)&#39;);\r\n    \t\t\t * @sidebar\t= this.layout.find(&#39;&gt; div:nth-of-child(3) &gt; div &gt; div &gt; div:nth-of-type(1)&#39;);\r\n    \t\t\t * @body\t= this.layout.find(&#39;&gt; div:nth-of-child(3) &gt; div &gt; div &gt; div:nth-of-type(2) &gt; div&#39;); */\r\n    \t\t\t&#39;&lt;div&gt;&#39; +\r\n    \t\t\t&#39;\t&lt;div&gt;&#39; +\r\n    \t\t\t&#39;\t\t&lt;div&gt;&#39; +\r\n    \t\t\t&#39;\t\t\t&lt;div&gt;&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;\t\t\t&lt;div&gt;&#39; +\r\n    \t\t\t&#39;\t\t\t\t&lt;div&gt;&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;\t\t\t&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;\t\t&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;\t&lt;/div&gt;&#39; +\r\n    \t\t\t&#39;&lt;/div&gt;&#39;\r\n    \t\t);\r\n    \t}\r\n    }\r\n    \r\n    sys.makeLayout(&#39;#div&#39;);"}, {"tags": [], "down_vote_count": 3, "creation_date": 1377623118, "answer_id": 18471537, "path": "stack.browserify.answer", "score": -1, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1377624277, "last_edit_date": 1495540056, "body_markdown": "I think I discovered another way to do it inline without any invasive syntax on every line. Use Javascript&#39;s ability to convert a function to string and create a multiline comment with the `/**/` syntax then remove the &quot;function() {/\\*\\n&quot; and &quot;\\n\\*/}&quot;.\r\n\r\n\tvar multiline = function(string) { return string.toString().replace(/(^[^\\n]*\\n)|(\\n\\*\\/\\})/g, &quot;&quot;); };\r\n\r\n\tconsole.log(multiline(function() {/*\r\n\tHello world!\r\n\tI&#39;m a multiline string!\r\n\r\n\tTada!\r\n\t*/}));\r\n\r\nThe only pitfall I can see in this is the syntax highlighting.\r\n\r\nEDIT: Had I scrolled down a little more, I would have seen this answer doing exactly the same thing: [https://stackoverflow.com/a/5571069/916553][1]\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/5571069/916553"}, {"tags": [], "down_vote_count": 1, "creation_date": 1381712299, "answer_id": 19352068, "path": "stack.browserify.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1381773792, "last_edit_date": 1495542899, "body_markdown": "My version of array-based join for string concat:\r\n\r\n    var c = []; //c stands for content\r\n    c.push(&quot;&lt;div id=&#39;thisDiv&#39; style=&#39;left:10px&#39;&gt;&lt;/div&gt;&quot;);\r\n    c.push(&quot;&lt;div onclick=&#39;showDo(\\&#39;something\\&#39;);&#39;&gt;&lt;/div&gt;&quot;);\r\n    $(body).append(c.join(&#39;\\n&#39;));\r\n\r\nThis has worked well for me, especially as I often insert values into the html constructed this way. But it has lots of limitations. Indentation would be nice. Not having to deal with nested quotation marks would be really nice, and just the bulkyness of it bothers me.\r\n\r\nIs the .push() to add to the array taking up a lot of time? See this related answer:\r\n\r\n(https://stackoverflow.com/questions/15649899/is-there-a-reason-javascript-developers-dont-use-array-push) \r\n\r\nAfter looking at these (opposing) test runs, it looks like .push() is fine for string arrays which will not likely grow over 100 items - I will avoid it in favor of indexed adds for larger arrays.\r\n    "}, {"tags": [], "down_vote_count": 4, "creation_date": 1384407992, "answer_id": 19970452, "path": "stack.browserify.answer", "score": -1, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1384412337, "last_edit_date": 1384412337, "body_markdown": "i found a more elegant solution, maybe a little non-topic related because it uses PHP, but im sure it will be useful and cuteness* for some of yours...\r\n\r\nthis **javascript code** should stay inside script tags\r\n\r\n    var html=&lt;?php echo json_encode(&quot;\r\n    \r\n\t\t\t&lt;div class=container&gt;\r\n\t\t\t\t&lt;div class=area1&gt;\r\n\t\t\t\t\txxx\r\n\t\t\t\t&lt;/div&gt;\r\n\t\t\t\t&lt;div class=area2&gt;\r\n\t\t\t\t\t&quot;.$someVar.&quot;\r\n\t\t\t\t&lt;/div&gt;\r\n\t\t\t&lt;/div&gt;\r\n    \r\n    &quot;); ?&gt;\r\n\r\nin your **output html** you will see something like\r\n\r\n    var html=&quot;\\r\\n\\r\\n\\t\\t\\t&lt;div class=container&gt;\\r\\n\\t\\t\\t\\t&lt;div class=area1&gt;\\r\\n\\t\\t\\t\\t\\txxx\\r\\n\\t\\t\\t\\t&lt;\\/div&gt;\\r\\n\\t\\t\\t\\t&lt;div class=area2&gt;\\r\\n\\t\\t\\t\\t\\t44\\r\\n\\t\\t\\t\\t&lt;\\/div&gt;\\r\\n\\t\\t\\t&lt;\\/div&gt;\\r\\n\\r\\n\\t\\t&quot;;  \r\n&amp;nbsp;\r\n\r\n--- \r\nand *et voil&#224;!*, it gives you code readability in your file.\r\n\r\npD: this sample uses json_encode() PHP function, but certainly there are function equivalents for ASP, Ruby and JSP langs.\r\n\r\npD: however, this solution have his limitations too, one of them is you cannot use javascript variables inside the encapsulated code."}, {"tags": [], "down_vote_count": 1, "creation_date": 1386783058, "answer_id": 20525993, "path": "stack.browserify.answer", "score": 7, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1386783394, "last_edit_date": 1495535497, "body_markdown": "My extension to https://stackoverflow.com/a/15558082/80404.\r\nIt expects comment in a form `/*! any multiline comment */` where symbol ! is used to prevent removing by minification (at least for YUI compressor)\r\n\r\n    Function.prototype.extractComment = function() {\r\n        var startComment = &quot;/*!&quot;;\r\n        var endComment = &quot;*/&quot;;\r\n        var str = this.toString();\r\n    \r\n        var start = str.indexOf(startComment);\r\n        var end = str.lastIndexOf(endComment);\r\n    \r\n        return str.slice(start + startComment.length, -(str.length - end));\r\n    };\r\n\r\nExample:\r\n\r\n    var tmpl = function() { /*!\r\n     &lt;div class=&quot;navbar-collapse collapse&quot;&gt;\r\n        &lt;ul class=&quot;nav navbar-nav&quot;&gt;\r\n        &lt;/ul&gt;\r\n     &lt;/div&gt;\r\n    */}.extractComment();"}, {"tags": [], "down_vote_count": 1, "creation_date": 1390051134, "answer_id": 21204670, "path": "stack.browserify.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1390051134, "body_markdown": "You can use `+=` to concatenate your string, seems like no one answered that, which will be readable, and also neat... something like this\r\n\r\n    var hello = &#39;hello&#39; +\r\n                &#39;world&#39; +\r\n                &#39;blah&#39;;\r\n\r\ncan be also written as\r\n\r\n    var hello = &#39;hello&#39;;\r\n        hello += &#39; world&#39;;\r\n        hello += &#39; blah&#39;;\r\n    \r\n    console.log(hello);"}, {"tags": [], "down_vote_count": 3, "creation_date": 1392030818, "answer_id": 21675610, "path": "stack.browserify.answer", "score": 8, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1420048101, "last_edit_date": 1420048101, "body_markdown": "**Updated for 2015**: it&#39;s six years later now:  most people use a module loader, and the main module systems each have ways of loading templates. It&#39;s not inline, but the most common type of multiline string are templates, and **templates should generally be kept out of JS anyway**.\r\n\r\n## require.js: &#39;require text&#39;.\r\n\r\nUsing [require.js &#39;text&#39; plugin][1], with a multiline template in **template.html**\r\n\r\n    var template = require(&#39;text!template.html&#39;)\r\n\r\n## NPM/browserify: the &#39;brfs&#39; module\r\n\r\nBrowserify [uses a &#39;brfs&#39; module][2] to load text files. This will actually build your template into your bundled HTML.\r\n\r\n    var fs = require(&quot;fs&quot;);\r\n    var template = fs.readFileSync(template.html&#39;, &#39;utf8&#39;);\r\n\r\n    \r\nEasy. \r\n\r\n\r\n  [1]: https://github.com/requirejs/text\r\n  [2]: https://www.npmjs.com/package/brfs"}, {"tags": [], "down_vote_count": 0, "creation_date": 1398425697, "answer_id": 23291912, "path": "stack.browserify.answer", "score": 17, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1398425697, "body_markdown": "There&#39;s this library that makes it beautiful:\r\n\r\nhttps://github.com/sindresorhus/multiline\r\n\r\n### Before\r\n\r\n    var str = &#39;&#39; +\r\n    &#39;&lt;!doctype html&gt;&#39; +\r\n    &#39;&lt;html&gt;&#39; +\r\n    &#39;\t&lt;body&gt;&#39; +\r\n    &#39;\t\t&lt;h1&gt;\u2764 unicorns&lt;/h1&gt;&#39; +\r\n    &#39;\t&lt;/body&gt;&#39; +\r\n    &#39;&lt;/html&gt;&#39; +\r\n    &#39;&#39;;\r\n\r\n### After\r\n\r\n    var str = multiline(function(){/*\r\n    &lt;!doctype html&gt;\r\n    &lt;html&gt;\r\n    \t&lt;body&gt;\r\n    \t\t&lt;h1&gt;\u2764 unicorns&lt;/h1&gt;\r\n    \t&lt;/body&gt;\r\n    &lt;/html&gt;\r\n    */});\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1401096881, "answer_id": 23867090, "path": "stack.browserify.answer", "score": 24, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1478594030, "last_edit_date": 1478594030, "body_markdown": "There are multiple ways to achieve this\r\n\r\n**1. Slash concatenation**\r\n\r\n      var MultiLine=  &#39;1\\\r\n        2\\\r\n        3\\\r\n        4\\\r\n        5\\\r\n        6\\\r\n        7\\\r\n        8\\\r\n        9&#39;;\r\n\r\n\r\n\r\n**2. regular concatenation**\r\n\r\n\r\n    var MultiLine = &#39;1&#39;\r\n    +&#39;2&#39;\r\n    +&#39;3&#39;\r\n    +&#39;4&#39;\r\n    +&#39;5&#39;;\r\n\r\n**3. Array Join concatenation**\r\n\r\n    var MultiLine = [\r\n    &#39;1&#39;,\r\n    &#39;2&#39;,\r\n    &#39;3&#39;,\r\n    &#39;4&#39;,\r\n    &#39;5&#39;\r\n    ].join(&#39;&#39;);\r\nPerformance wise, **Slash concatenation** (first one) is the fastest.\r\n\r\n**Refer** [this test case][1] for more details regarding the performance \r\n\r\n**Update:**\r\n\r\nWith the **ES2015**, we can take advantage of its Template strings feature. With it, we just need to use back-ticks for creating multi line strings\r\n\r\nExample:\r\n\r\n  \r\n\r\n     `&lt;h1&gt;{{title}}&lt;/h1&gt;\r\n      &lt;h2&gt;{{hero.name}} details!&lt;/h2&gt;\r\n      &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{hero.id}}&lt;/div&gt;\r\n      &lt;div&gt;&lt;label&gt;name: &lt;/label&gt;{{hero.name}}&lt;/div&gt;\r\n      `\r\n\r\n\r\n  [1]: http://jsperf.com/zp-string-concatenation/6"}, {"tags": [], "down_vote_count": 0, "creation_date": 1410220949, "answer_id": 25734853, "path": "stack.browserify.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1410220949, "body_markdown": "If you happen to be running in Node only, you could use the fs module to read in the multi-line string from a file:\r\n\r\n    var diagram;\r\n    var fs = require(&#39;fs&#39;);\r\n    fs.readFile( __dirname + &#39;/diagram.txt&#39;, function (err, data) {\r\n      if (err) {\r\n        throw err; \r\n      }\r\n      diagram = data.toString();\r\n    });\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1430245860, "answer_id": 29927210, "path": "stack.browserify.answer", "score": 8, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1443622443, "last_edit_date": 1443622443, "body_markdown": "If you&#39;re willing to use the escaped newlines, they can be used *nicely*.  **It looks like a document with a page border**.\r\n\r\n![enter image description here][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/e51kg.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1442849013, "answer_id": 32698927, "path": "stack.browserify.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1444223527, "last_edit_date": 1444223527, "body_markdown": "You can use [TypeScript][1] (JavaScript SuperSet), it supports multiline strings, and transpiles back down to pure JavaScript without overhead:\r\n\r\n\r\n    var templates = {\r\n    \tmyString: `this is\r\n    a multiline\r\n    string` \r\n    }\r\n    \r\n    alert(templates.myString);\r\n\r\nIf you&#39;d want to accomplish the same with plain JavaScript:\r\n\r\n    var templates = \r\n    {\r\n     myString: function(){/*\r\n        This is some\r\n        awesome multi-lined\r\n        string using a comment \r\n        inside a function \r\n        returned as a string.\r\n        Enjoy the jimmy rigged code.\r\n    */}.toString().slice(14,-3)\r\n    \r\n    }\r\n    alert(templates.myString)\r\n\r\n\r\nNote that the iPad/Safari does not support `&#39;functionName.toString()&#39;`\r\n\r\nIf you have a lot of legacy code, you can also use the plain JavaScript variant in TypeScript (for cleanup purposes):\r\n\r\n\r\n    interface externTemplates\r\n    {\r\n    \tmyString:string;\r\n    }\r\n    \r\n    declare var templates:externTemplates;\r\n    \r\n    alert(templates.myString)\r\n\r\nand you can use the multiline-string object from the plain JavaScript variant, where you put the templates into another file (which you can merge in the bundle).\r\n\r\nYou can try TypeScript at&lt;br /&gt;\r\nhttp://www.typescriptlang.org/Playground\r\n\r\n\r\n  [1]: http://www.typescriptlang.org/Playground"}, {"tags": [], "down_vote_count": 0, "creation_date": 1446645573, "answer_id": 33523770, "path": "stack.browserify.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1446645978, "last_edit_date": 1446645978, "body_markdown": "The equivalent in javascript is:\r\n\r\n    var text = `\r\n    This\r\n    Is\r\n    A\r\n    Multiline\r\n    String\r\n    `;\r\nHere&#39;s the [specification][1]. See browser support at the bottom of this [page][2]. Here are some [examples][3] too.\r\n\r\n\r\n  [1]: http://www.ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components\r\n  [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings\r\n  [3]: https://developers.google.com/web/updates/2015/01/ES6-Template-Strings?hl=en#multiline-strings"}, {"tags": [], "down_vote_count": 0, "creation_date": 1459190606, "answer_id": 36268846, "path": "stack.browserify.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1459190606, "body_markdown": "ES6 allows you to use a backtick to specify a string on multiple lines.  It&#39;s called a Template Literal.  Like this:\r\n\r\n    var multilineString = `One line of text\r\n        second line of text\r\n        third line of text\r\n        fourth line of text`;\r\n\r\nUsing the backtick works in NodeJS, and it&#39;s supported by Chrome, Firefox, Edge, Safari, and Opera.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\r\n        "}, {"tags": [], "down_vote_count": 0, "creation_date": 1468437931, "answer_id": 38360119, "path": "stack.browserify.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1468437931, "body_markdown": "Also do note that, when extending string over multiple lines using forward backslash at end of each line, any extra characters (mostly spaces, tabs and comments added by mistake) after forward backslash will cause unexpected character error, which i took an hour to find out\r\n\r\n    var string = &quot;line1\\  // comment, space or tabs here raise error\r\n    line2&quot;;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1502665040, "answer_id": 45665593, "path": "stack.browserify.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1502665040, "body_markdown": "You have to use the concatenation operator &#39;+&#39;.\r\n\r\n    &lt;!DOCTYPE html&gt;\r\n    &lt;html lang=&quot;en&quot;&gt;\r\n    &lt;head&gt;\r\n        &lt;meta charset=&quot;UTF-8&quot;&gt;\r\n        &lt;title&gt;Document&lt;/title&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n        &lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;\r\n        &lt;script&gt;\r\n            var str = &quot;This &quot;\r\n                    + &quot;\\n&lt;br&gt;is &quot;\r\n                    + &quot;\\n&lt;br&gt;multiline &quot;\r\n                    + &quot;\\n&lt;br&gt;string.&quot;;\r\n            document.getElementById(&quot;demo&quot;).innerHTML = str;\r\n         &lt;/script&gt;\r\n    &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\nBy using `\\n` your source code will look like -\r\n\r\n&lt;pre&gt;\r\nThis \r\n &amp;lt;br&amp;gt;is\r\n &amp;lt;br&amp;gt;multiline\r\n &amp;lt;br&amp;gt;string.\r\n&lt;/pre&gt;\r\n\r\nBy using `&lt;br&gt;` your browser output will look like - \r\n\r\n&lt;pre&gt;\r\nThis\r\nis\r\nmultiline\r\nstring.\r\n&lt;/pre&gt;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1507764527, "answer_id": 46699047, "path": "stack.browserify.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1507764527, "body_markdown": "Please for the love of the internet use string concatenation and opt not to use ES6 solutions for this. ES6 is NOT supported all across the board, much like CSS3 and certain browsers being slow to adapt to the CSS3 movement. Use plain ol&#39; JavaScript, your end users will thank you.\r\n\r\nExample:\r\n\r\n`var str = &quot;This world is neither flat nor round. &quot;+\r\n           &quot;Once was lost will be found&quot;;`"}], "title": "Creating multiline strings in JavaScript", "view_count": 951834, "answer_count": 34, "code_snippet": ["<code>text = &lt;&lt;\"HERE\"\nThis\nIs\nA\nMultiline\nString\nHERE\n</code>", "<code>var html = `\n  &lt;div&gt;\n    &lt;span&gt;Some HTML here&lt;/span&gt;\n  &lt;/div&gt;\n`;\n</code>", "<code>\"foo \\\nbar\"\n</code>", "<code>const htmlString = `Say hello to \nmulti-line\nstrings!`;\n</code>", "<code>const htmlString = `${user.name} liked your post about strings`;\n</code>", "<code>user.name + ' liked your post about strings'\n</code>", "<code>var myString = 'A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\'ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.';\n</code>", "<code>var myString = 'A rather long string of English text, an error message ' +\n               'actually that just keeps going and going -- an error ' +\n               'message to make the Energizer bunny blush (right through ' +\n               'those Schwarzenegger shades)! Where was I? Oh yes, ' +\n               'you\\'ve got an error and all the extraneous whitespace is ' +\n               'just gravy.  Have a nice day.';\n</code>", "<code>\\ </code>", "<code>text = &lt;&lt;\"HERE\" This Is A Multiline String HERE</code>", "<code>var myString = \n   ['&lt;div id=\"someId\"&gt;',\n    'some content&lt;br /&gt;',\n    '&lt;a href=\"#someRef\"&gt;someRefTxt&lt;/a&gt;',\n    '&lt;/div&gt;'\n   ].join('\\n');\n</code>", "<code>    var myString = \n       '&lt;div id=\"someId\"&gt; \\\nsome content&lt;br /&gt; \\\n&lt;a href=\"#someRef\"&gt;someRefTxt&lt;/a&gt; \\\n&lt;/div&gt;';\n</code>", "<code>var myString = (function () {/*\n   &lt;div id=\"someId\"&gt;\n     some content&lt;br /&gt;\n     &lt;a href=\"#someRef\"&gt;someRefTxt&lt;/a&gt;\n    &lt;/div&gt;        \n*/}).toString().match(/[^]*\\/\\*([^]*)\\*\\/\\}$/)[1];\n</code>", "<code>let str = `This is a text\n    with multiple lines.\n    Escapes are interpreted,\n    \\n is a newline.`;\nlet str = String.raw`This is a text\n    with multiple lines.\n    Escapes are not interpreted,\n    \\n is not a newline.`;\n</code>", "<code>function hereDoc(f) {\n  return f.toString().\n      replace(/^[^\\/]+\\/\\*!?/, '').\n      replace(/\\*\\/[^\\/]+$/, '');\n}\n</code>", "<code>var tennysonQuote = hereDoc(function() {/*!\n  Theirs not to make reply,\n  Theirs not to reason why,\n  Theirs but to do and die\n*/});\n</code>", "<code>/*!</code>", "<code>var string = 'This is\\n' +\n'a multiline\\n' + \n'string';\n</code>", "<code>var myString = function(){/*\n    This is some\n    awesome multi-lined\n    string using a comment \n    inside a function \n    returned as a string.\n    Enjoy the jimmy rigged code.\n*/}.toString().slice(14,-3)\n\nalert(myString)\n</code>", "<code>toString()</code>", "<code>trim()</code>", "<code>&lt;script type=\"bogus\" id=\"multi\"&gt;\n    My\n    multiline\n    string\n&lt;/script&gt;\n&lt;script&gt;\n    alert($('#multi').html());\n&lt;/script&gt;\n</code>", "<code>&lt;div id=\"UniqueID\" style=\"display:none;\"&gt;\n     Strings\n     On\n     Multiple\n     Lines\n     Here\n&lt;/div&gt;\n</code>", "<code>$('#UniqueID').html();\n</code>", "<code>alert($('#UniqueID').html());\n</code>", "<code>display:none</code>", "<code>&lt;script&gt;...&lt;/script&gt;</code>", "<code>head</code>", "<code>&lt;script&gt;\n\n    // pure javascript\n    var text = document.getElementById(\"mySoapMessage\").innerHTML ;\n\n    // using JQuery's document ready for safety\n    $(document).ready(function() {\n\n        var text = $(\"#mySoapMessage\").html(); \n\n    });\n\n&lt;/script&gt;\n\n&lt;script id=\"mySoapMessage\" type=\"text/plain\"&gt;\n\n    &lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:typ=\"...\"&gt;\n       &lt;soapenv:Header/&gt;\n       &lt;soapenv:Body&gt;\n          &lt;typ:getConvocadosElement&gt;\n             ...\n          &lt;/typ:getConvocadosElement&gt;\n       &lt;/soapenv:Body&gt;\n    &lt;/soapenv:Envelope&gt;\n\n    &lt;!-- this comment will be present on your string --&gt;\n    //uh-oh, javascript comments...  SOAP request will fail \n\n\n&lt;/script&gt;\n</code>", "<code>&lt;![CDATA[.....]]&gt;</code>", "<code>xhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");</code>", "<code>string = 'my long string...\\n'\n       + 'continue here\\n'\n       + 'and here.';\n</code>", "<code>  var MultiLine=  '1\\\n    2\\\n    3\\\n    4\\\n    5\\\n    6\\\n    7\\\n    8\\\n    9';\n</code>", "<code>var MultiLine = '1'\n+'2'\n+'3'\n+'4'\n+'5';\n</code>", "<code>var MultiLine = [\n'1',\n'2',\n'3',\n'4',\n'5'\n].join('');\n</code>", "<code> `&lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;h2&gt;{{hero.name}} details!&lt;/h2&gt;\n  &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;&lt;label&gt;name: &lt;/label&gt;{{hero.name}}&lt;/div&gt;\n  `\n</code>", "<code>var str = '' +\n'&lt;!doctype html&gt;' +\n'&lt;html&gt;' +\n'   &lt;body&gt;' +\n'       &lt;h1&gt;\u2764 unicorns&lt;/h1&gt;' +\n'   &lt;/body&gt;' +\n'&lt;/html&gt;' +\n'';\n</code>", "<code>var str = multiline(function(){/*\n&lt;!doctype html&gt;\n&lt;html&gt;\n    &lt;body&gt;\n        &lt;h1&gt;\u2764 unicorns&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n*/});\n</code>", "<code>nodejs</code>", "<code>Function.prototype.String()</code>", "<code>var new_comment; /*&lt;&lt;&lt;EOF \n    &lt;li class=\"photobooth-comment\"&gt;\n       &lt;span class=\"username\"&gt;\n          &lt;a href=\"#\"&gt;You&lt;/a&gt;\n       &lt;/span&gt;\n       &lt;span class=\"comment-text\"&gt;\n          $text\n       &lt;/span&gt;\n       &lt;span class=\"comment-time\"&gt;\n          2d\n       &lt;/span&gt;\n    &lt;/li&gt;\nEOF*/\n// note the script tag here is hardcoded as the FIRST tag \nnew_comment=document.currentScript.innerHTML.split(\"EOF\")[1]; \nalert(new_comment.replace('$text','Here goes some text'));\n</code>", "<code>var template = require('text!template.html')\n</code>", "<code>var fs = require(\"fs\");\nvar template = fs.readFileSync(template.html', 'utf8');\n</code>", "<code>var templates = {\n    myString: `this is\na multiline\nstring` \n}\n\nalert(templates.myString);\n</code>", "<code>var templates = \n{\n myString: function(){/*\n    This is some\n    awesome multi-lined\n    string using a comment \n    inside a function \n    returned as a string.\n    Enjoy the jimmy rigged code.\n*/}.toString().slice(14,-3)\n\n}\nalert(templates.myString)\n</code>", "<code>'functionName.toString()'</code>", "<code>interface externTemplates\n{\n    myString:string;\n}\n\ndeclare var templates:externTemplates;\n\nalert(templates.myString)\n</code>", "<code>&lt;script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;div class=\"crazy_idea\" thorn_in_my_side='&lt;table  border=\"0\"&gt;\n                        &lt;tr&gt;\n                            &lt;td &gt;&lt;span class=\"mlayouttablecellsdynamic\"&gt;PACKAGE price $65.00&lt;/span&gt;&lt;/td&gt;\n                        &lt;/tr&gt;\n                    &lt;/table&gt;'&gt;&lt;/div&gt;\n&lt;script type=\"text/javascript\"&gt;\n    alert($(\".crazy_idea\").attr(\"thorn_in_my_side\"));\n&lt;/script&gt;\n</code>", "<code>/*! any multiline comment */</code>", "<code>Function.prototype.extractComment = function() {\n    var startComment = \"/*!\";\n    var endComment = \"*/\";\n    var str = this.toString();\n\n    var start = str.indexOf(startComment);\n    var end = str.lastIndexOf(endComment);\n\n    return str.slice(start + startComment.length, -(str.length - end));\n};\n</code>", "<code>var tmpl = function() { /*!\n &lt;div class=\"navbar-collapse collapse\"&gt;\n    &lt;ul class=\"nav navbar-nav\"&gt;\n    &lt;/ul&gt;\n &lt;/div&gt;\n*/}.extractComment();\n</code>", "<code>var text = `\nThis\nIs\nA\nMultiline\nString\n`;\n</code>", "<code>var multilineString = `One line of text\n    second line of text\n    third line of text\n    fourth line of text`;\n</code>", "<code>var c = []; //c stands for content\nc.push(\"&lt;div id='thisDiv' style='left:10px'&gt;&lt;/div&gt;\");\nc.push(\"&lt;div onclick='showDo(\\'something\\');'&gt;&lt;/div&gt;\");\n$(body).append(c.join('\\n'));\n</code>", "<code>+=</code>", "<code>var hello = 'hello' +\n            'world' +\n            'blah';\n</code>", "<code>var hello = 'hello';\n    hello += ' world';\n    hello += ' blah';\n\nconsole.log(hello);\n</code>", "<code>var string = \"line1\\  // comment, space or tabs here raise error\nline2\";\n</code>", "<code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p id=\"demo\"&gt;&lt;/p&gt;\n    &lt;script&gt;\n        var str = \"This \"\n                + \"\\n&lt;br&gt;is \"\n                + \"\\n&lt;br&gt;multiline \"\n                + \"\\n&lt;br&gt;string.\";\n        document.getElementById(\"demo\").innerHTML = str;\n     &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code>", "<code>\\n</code>", "<code>&lt;br&gt;</code>", "<code>var str = \"This world is neither flat nor round. \"+\n           \"Once was lost will be found\";</code>", "<code>&lt;xmp id=\"unique_id\" style=\"display:none;\"&gt;\n  Some plain text\n  Both type of quotes :  \" ' \" And  ' \" '\n  JS Code : alert(\"Hello World\");\n  HTML Code : &lt;div class=\"some_class\"&gt;&lt;/div&gt;\n&lt;/xmp&gt;\n&lt;script&gt;\n   alert($('#unique_id').html());\n&lt;/script&gt;\n</code>", "<code>&lt;xmp id=\"unique_id\" style=\"display:none;\"&gt;\n  Some plain text\n  Both type of quotes :  \" ' \" And  ' \" '\n  JS Code : alert(\"Hello World\");\n  HTML Code : &lt;div class=\"some_class\"&gt;&lt;/div&gt;\n&lt;/xmp&gt;\n&lt;script&gt;\n   alert(document.getElementById('unique_id').innerHTML);\n&lt;/script&gt;\n</code>", "<code>&lt;xmp&gt;</code>", "<code>&lt;pre&gt;;</code>", "<code>style=\"display:none\"</code>", "<code>&lt;img&gt;</code>", "<code>\\</code>", "<code>var x = { test:'&lt;?xml version=\"1.0\"?&gt;\\ &lt;-- One space here\n            &lt;?mso-application progid=\"Excel.Sheet\"?&gt;' \n};\n</code>", "<code>var x = { test:'&lt;?xml version=\"1.0\"?&gt;\\&lt;-- No space here now\n          &lt;?mso-application progid=\"Excel.Sheet\"?&gt;' \n};\n\nalert(x.test);\u200b\n</code>", "<code>var diagram;\nvar fs = require('fs');\nfs.readFile( __dirname + '/diagram.txt', function (err, data) {\n  if (err) {\n    throw err; \n  }\n  diagram = data.toString();\n});\n</code>", "<code>function s() {\n    var args = [],index;\n    for (index = 0; index&lt; arguments.length; index++) {\n        args.push (arguments [index]);\n    }\n    return args.join (\"\\n\");\n}\nconsole.log (s (\n    \"This is the first line\",\n    \"and this is the second\",\n    \"finally a third\"\n));\n\nfunction s() {return arguments.join (\"\\n\")} \n</code>", "<code>function s() { return Array.prototype.join.call(arguments, '\\n'); }</code>"], "path": "stack.browserify"}, {"tags": ["javascript", "node.js", "npm"], "creation_date": 1366252744, "body_markdown": "I copied package.json from another project and now want to bump all of the dependencies to their latest versions since this is a fresh project and I don&#39;t mind fixing something if it breaks.\r\n\r\nWhat&#39;s the easiest way to do this?\r\n\r\nThe best way I know of now is to run `npm info express version` then update package.json manually for each one. There must be a better way.\r\n\r\n    {\r\n      &quot;name&quot;: &quot;myproject&quot;,\r\n      &quot;description&quot;: &quot;my node project&quot;,\r\n      &quot;version&quot;: &quot;1.0.0&quot;,\r\n      &quot;engines&quot;: {\r\n        &quot;node&quot;: &quot;0.8.4&quot;,\r\n        &quot;npm&quot;: &quot;1.1.65&quot;\r\n      },\r\n      &quot;private&quot;: true,\r\n      &quot;dependencies&quot;: {\r\n        &quot;express&quot;: &quot;~3.0.3&quot;, // how do I get these bumped to latest?\r\n        &quot;mongodb&quot;: &quot;~1.2.5&quot;,\r\n        &quot;underscore&quot;: &quot;~1.4.2&quot;,\r\n        &quot;rjs&quot;: &quot;~2.9.0&quot;,\r\n        &quot;jade&quot;: &quot;~0.27.2&quot;,\r\n        &quot;async&quot;: &quot;~0.1.22&quot;\r\n      }\r\n    }\r\n\r\n---\r\n\r\nI am now a collaborator on [npm-check-updates](https://github.com/tjunnone/npm-check-updates), which is a great solution to this problem.", "last_edit_date": 1506858988, "up_vote_count": 1295, "link": "https://stackoverflow.com/questions/16073603/how-do-i-update-each-dependency-in-package-json-to-the-latest-version", "_childDocuments_": [{"tags": [], "down_vote_count": 25, "creation_date": 1366256105, "answer_id": 16074029, "path": "stack.browserify.answer", "score": 1494, "up_vote_count": 1519, "is_accepted": true, "last_activity_date": 1517815270, "last_edit_date": 1517815270, "body_markdown": "Looks like [npm-check-updates](https://www.npmjs.org/package/npm-check-updates) is the only way to make this happen now.\r\n\r\n    npm i -g npm-check-updates\r\n    ncu -u\r\n    npm install\r\n\r\n-------------\r\n\r\nOn npm &lt;3.11:\r\n\r\nSimply change every dependency&#39;s version to `*`, then run `npm update --save`.  (**Note:** [broken in recent (3.11) versions of npm](https://github.com/npm/npm/issues/13555)).\r\n\r\nBefore:\r\n\r\n      &quot;dependencies&quot;: {\r\n        &quot;express&quot;: &quot;*&quot;,\r\n        &quot;mongodb&quot;: &quot;*&quot;,\r\n        &quot;underscore&quot;: &quot;*&quot;,\r\n        &quot;rjs&quot;: &quot;*&quot;,\r\n        &quot;jade&quot;: &quot;*&quot;,\r\n        &quot;async&quot;: &quot;*&quot;\r\n      }\r\n\r\nAfter:\r\n\r\n      &quot;dependencies&quot;: {\r\n        &quot;express&quot;: &quot;~3.2.0&quot;,\r\n        &quot;mongodb&quot;: &quot;~1.2.14&quot;,\r\n        &quot;underscore&quot;: &quot;~1.4.4&quot;,\r\n        &quot;rjs&quot;: &quot;~2.10.0&quot;,\r\n        &quot;jade&quot;: &quot;~0.29.0&quot;,\r\n        &quot;async&quot;: &quot;~0.2.7&quot;\r\n      }\r\n\r\n---\r\n\r\nOf course, this is the blunt hammer of updating dependencies.  It&#39;s fine if&amp;mdash;as you said&amp;mdash;the project is empty and nothing can break.\r\n\r\nOn the other hand, if you&#39;re working in a more mature project, you probably want to verify that there are no breaking changes in your dependencies before upgrading.\r\n\r\nTo see which modules are outdated, just run [`npm outdated`][1].  It will list any installed dependencies that have newer versions available.\r\n\r\n\r\n  [1]: https://docs.npmjs.com/cli/outdated"}, {"tags": [], "down_vote_count": 1, "creation_date": 1390343757, "answer_id": 21270510, "path": "stack.browserify.answer", "score": 46, "up_vote_count": 47, "is_accepted": false, "last_activity_date": 1390343757, "body_markdown": "This works as of npm 1.3.15.\r\n\r\n    &quot;dependencies&quot;: {\r\n      &quot;foo&quot;: &quot;latest&quot;\r\n    }"}, {"tags": [], "down_vote_count": 1, "creation_date": 1396561980, "answer_id": 22849716, "path": "stack.browserify.answer", "score": 834, "up_vote_count": 835, "is_accepted": false, "last_activity_date": 1517815254, "last_edit_date": 1517815254, "body_markdown": "`npm-check-updates` is a utility that automatically adjusts a package.json with the \r\nlatest version of all dependencies\r\n\r\nsee https://www.npmjs.org/package/npm-check-updates\r\n\r\n    $ npm install -g npm-check-updates\r\n    $ ncu -u\r\n    $ npm install \r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1397320808, "answer_id": 23033239, "path": "stack.browserify.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1397825526, "last_edit_date": 1397825526, "body_markdown": "Alternative is\r\n\r\n    &quot;dependencies&quot;:{\r\n        &quot;foo&quot; : &quot;&gt;=1.4.5&quot;\r\n    }\r\n\r\neverytime you use npm update , it automatically update to the latest version.\r\nFor more version syntax, you may check here: https://www.npmjs.org/doc/misc/semver.html"}, {"tags": [], "down_vote_count": 0, "creation_date": 1398712484, "answer_id": 23349379, "path": "stack.browserify.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1400607438, "last_edit_date": 1400607438, "body_markdown": "I recently had to update several projects that were using npm and package.json for their gruntfile.js magic. The following bash command (multiline command) worked well for me:\r\n\r\n    npm outdated --json --depth=0 | \\\r\n    jq --ascii-output --monochrome-output &#39;. | keys | .[]&#39; | \\\r\n    xargs npm install $1 --save-dev\r\n\r\nThe idea here:\r\nTo pipe the `npm outdated` output as json, to `jq`  \r\n(jq is a json command line parser/query tool)  \r\n(notice the use of `--depth` argument for `npm outdated`)  \r\njq will strip the output down to just the top level package name only.  \r\nfinally xargs puts each LIBRARYNAME one at a time into a `npm install LIBRARYNAME --save-dev` command\r\n\r\nThe above is what worked for me on a machine runnning:\r\nnode=v0.11.10 osx=10.9.2 npm=1.3.24\r\n\r\nthis required:  \r\nxargs http://en.wikipedia.org/wiki/Xargs (native to my machine I believe)  \r\nand  \r\njq http://stedolan.github.io/jq/ (I installed it with `brew install jq`)\r\n\r\nNote: I only save the updated libraries to package.json inside of the json key `devDependancies` by using `--save-dev`, that was a requirement of my projects, quite possible not yours.\r\n\r\nAfterward I check that everything is gravy with a simple\r\n\r\n    npm outdated --depth=0\r\n\r\nAlso, you can check the current toplevel installed library versions with\r\n\r\n    npm list --depth=0\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1398869472, "answer_id": 23391365, "path": "stack.browserify.answer", "score": 141, "up_vote_count": 141, "is_accepted": false, "last_activity_date": 1461880802, "last_edit_date": 1495541907, "body_markdown": "To update **one** dependency to its lastest version without having to manually open the `package.json` and change it, you can run\r\n\r\n    npm install {package-name}@* {save flags?}\r\n\r\ni.e.\r\n\r\n    npm install express@* --save\r\n\r\nFor reference, [npm-install](https://www.npmjs.org/doc/cli/npm-install.html)\r\n\r\n- - -\r\n\r\nAs noted by user *Vespakoen* on a rejected edit, it&#39;s also possible to update multiple packages at once this way:\r\n\r\n    npm install --save package-nave@* other-package@* whatever-thing@*\r\n\r\nHe also apports a one-liner for the shell based on `npm outdated`. See [the edit](https://stackoverflow.com/review/suggested-edits/12171909) for code and explanation.\r\n\r\n- - -\r\n\r\nPS: I also hate having to manually edit `package.json` for things like that ;)"}, {"tags": [], "down_vote_count": 0, "creation_date": 1414946603, "answer_id": 26701753, "path": "stack.browserify.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1414946603, "body_markdown": "The above commands are unsafe because you might break your module when switching versions.\r\nInstead I recommend the following\r\n\r\n* Set actual current node modules version into package.json using `npm shrinkwrap` command.\r\n* Update each dependency to the latest version IF IT DOES NOT BREAK YOUR TESTS using https://github.com/bahmutov/next-update command line tool\r\n\r\n&lt;pre&gt;\r\nnpm install -g next-update\r\n// from your package\r\nnext-update\r\n&lt;/pre&gt;\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1421984726, "answer_id": 28102675, "path": "stack.browserify.answer", "score": 37, "up_vote_count": 37, "is_accepted": false, "last_activity_date": 1454946785, "last_edit_date": 1454946785, "body_markdown": " 1. Use `*` as the version for the latest releases, including unstable\r\n 2. Use `latest` as version definition for the latest stable version\r\n 3. Modify the package.json with exactly the latest stable version number using [`LatestStablePackages`][1]\r\n\r\n  [1]: https://github.com/mrsunlin/LatestStablePackages\r\n\r\nHere is an example:\r\n\r\n    &quot;dependencies&quot;: {\r\n\t\t\t&quot;express&quot;: &quot;latest&quot;  // using the latest STABLE version\r\n\t\t,\t&quot;node-gyp&quot;: &quot;latest&quot;\t\r\n\t\t,\t&quot;jade&quot;: &quot;latest&quot;\r\n\t\t,\t&quot;mongoose&quot;: &quot;*&quot; // using the newest version, may involve the unstable releases\r\n\t\t,\t&quot;cookie-parser&quot;: &quot;latest&quot;\r\n\t\t,\t&quot;express-session&quot;: &quot;latest&quot;\r\n\t\t,\t&quot;body-parser&quot;: &quot;latest&quot;\r\n\t\t,\t&quot;nodemailer&quot;:&quot;latest&quot;\r\n\t\t,\t&quot;validator&quot;: &quot;latest&quot;\r\n\t\t,\t&quot;bcrypt&quot;: &quot;latest&quot;\r\n\t\t,\t&quot;formidable&quot;: &quot;latest&quot;\r\n\t\t,\t&quot;path&quot;: &quot;latest&quot;\r\n\t\t,\t&quot;fs-extra&quot;: &quot;latest&quot;\r\n\t\t,\t&quot;moment&quot;: &quot;latest&quot;\r\n\t\t, \t&quot;express-device&quot;: &quot;latest&quot;\r\n\t},"}, {"tags": [], "down_vote_count": 1, "creation_date": 1423697873, "answer_id": 28466699, "path": "stack.browserify.answer", "score": 32, "up_vote_count": 33, "is_accepted": false, "last_activity_date": 1423697873, "body_markdown": "The only caveat I have found with the best answer above is that it updates the modules to the latest version. This means it could update to an unstable alpha build.\r\n\r\nI would use that npm-check-updates utility.\r\nMy group used this tool and it worked effectively by installing the stable updates.\r\n\r\nAs Etienne stated above: install and run with this:\r\n\r\n    $ npm install -g npm-check-updates\r\n    $ npm-check-updates -u\r\n    $ npm install "}, {"tags": [], "down_vote_count": 3, "creation_date": 1433284174, "answer_id": 30607722, "path": "stack.browserify.answer", "score": 274, "up_vote_count": 277, "is_accepted": false, "last_activity_date": 1474059961, "last_edit_date": 1474059961, "body_markdown": "# TLDR; (updated for newer NPM versions)\r\nThings have changed a bit since these answers were originally written.\r\n\r\n### npm 2+:  `npm outdated`+`npm update`+`npm shrinkwrap`\r\n### Older npm: `npm-check-updates` package + `npm shrinkwrap`\r\n\r\nBe sure to shrinkwrap your deps, or you may wind up with a dead project.  I pulled out a project the other day and it wouldn&#39;t run because my deps were all out of date/updated/a mess.  If I&#39;d shrinkwrapped, npm would have installed exactly what I needed.\r\n\r\n----\r\n\r\n# Details\r\n\r\nFor the curious who make it this far, here is what I recommend:\r\n\r\n### Use `npm-check-updates` or `npm outdated` to suggest the latest versions.\r\n    \r\n    # `outdated` is part of newer npm versions (2+)\r\n    $ npm outdated\r\n    # If you agree, update.  \r\n    $ npm update\r\n\r\n    #       OR\r\n\r\n    # Install and use the `npm-check-updates` package.\r\n    $ npm install -g npm-check-updates\r\n    # Then check your project\r\n    $ npm-check-updates\r\n    # If you agree, update package.json.\r\n    $ npm-check-updates -u\r\n\r\n###Then do a clean install (w/o the rm I got some dependency warnings)\r\n\r\n    $ rm -rf node_modules\r\n    $ npm install \r\n\r\n### Lastly, save exact versions to `npm-shrinkwrap.json` with `npm shrinkwrap`\r\n\r\n    $ rm npm-shrinkwrap.json\r\n    $ npm shrinkwrap\r\n\r\n### Now, `npm install` will now use exact versions in `npm-shrinkwrap.json`\r\n\r\nIf you check `npm-shrinkwrap.json` into git, all installs will use the exact same versions.  \r\n\r\nThis is a way to transition out of development (all updates, all the time) to production (nobody touch nothing).\r\n\r\n- [npm outdated](https://docs.npmjs.com/getting-started/updating-local-packages)\r\n\r\n- [npm-check-updates](https://www.npmjs.com/package/npm-check-updates)\r\n\r\n- [npm shrinkwrap](https://docs.npmjs.com/cli/shrinkwrap)"}, {"tags": [], "down_vote_count": 3, "creation_date": 1457104880, "answer_id": 35799625, "path": "stack.browserify.answer", "score": 20, "up_vote_count": 23, "is_accepted": false, "last_activity_date": 1457104880, "body_markdown": "Here is a basic regex to match semantic version numbers so you can quickly replace them all with an asterisk.\r\n\r\n### Semantic Version Regex\r\n\r\n    ([&gt;|&lt;|=|~|^|\\s])*?(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)\r\n\r\n### How to use\r\n\r\nSelect the package versions you want to replace in the JSON file.\r\n\r\n[![screenshot:select the text you want to replace][1]][1]\r\n\r\nInput the regex above and verify it&#39;s matching the correct text.\r\n\r\n[![screenshot:input the semver regex above][2]][2]\r\n\r\nReplace all matches with an asterisk.\r\n\r\n[![screenshot:replace package versions with an asterisk][3]][3]\r\n\r\nRun `npm update --save`\r\n\r\n  [1]: http://i.stack.imgur.com/YgEOd.png\r\n  [2]: http://i.stack.imgur.com/N00l2.png\r\n  [3]: http://i.stack.imgur.com/gfy2d.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1461767389, "answer_id": 36892853, "path": "stack.browserify.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1461767389, "body_markdown": "**Solution without additional packages**\r\n\r\nChange every dependency&#39;s version to `*`:\r\n\r\n    &quot;dependencies&quot;: {\r\n        &quot;react&quot;: &quot;*&quot;,\r\n        &quot;react-google-maps&quot;: &quot;*&quot;\r\n      }\r\n\r\nThen run `npm update --save`.\r\n\r\nSome of your packages were updated, but some not?\r\n\r\n    &quot;dependencies&quot;: {\r\n        &quot;react&quot;: &quot;^15.0.1&quot;,\r\n        &quot;react-google-maps&quot;: &quot;*&quot;\r\n      }\r\n\r\nThis is the tricky part, it means your local version of &quot;react&quot; was lower than the newest one. In this case npm downloaded and updated &quot;react&quot; package. However your local version of &quot;react-google-maps&quot; is the same as the newest one.\r\n\r\nIf you still want to &quot;update&quot; unchanged `*`, you have to delete these modules from `node_modules` folder.\r\n\r\ne.g. delete `node_modules/react-google-maps`.\r\n\r\nFinally run again `npm update --save`.\r\n\r\n\r\n    &quot;dependencies&quot;: {\r\n        &quot;react&quot;: &quot;^15.0.1&quot;,\r\n        &quot;react-google-maps&quot;: &quot;^4.10.1&quot;\r\n      }\r\n\r\nDo not forget to run  `npm update --save-dev` if you want to update development dependencies."}, {"tags": [], "down_vote_count": 0, "creation_date": 1464387841, "answer_id": 37493103, "path": "stack.browserify.answer", "score": 10, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1464387841, "body_markdown": "Updtr!\r\n\r\n&gt; Based on npm outdated, updtr installs the latest version and runs npm test for each dependency. If the test succeeds, updtr saves the new version number to your package.json. If the test fails, however, updtr rolls back its changes.\r\n\r\nhttps://github.com/peerigon/updtr"}, {"tags": [], "down_vote_count": 0, "creation_date": 1483917728, "answer_id": 41539009, "path": "stack.browserify.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1483917728, "body_markdown": "Greenkeeper if you&#39;re using Github. https://greenkeeper.io/\r\n\r\n\r\nIt&#39;s a Github integration and incredibly easy to set things up. When installed, it automatically creates pull requests in repositories you specify (or all if wanted) and keeps your code always up-to-date, without forcing you to do anything manually. PRs should then trigger a build on a CI service and depending on a successful or failed check you can keep figuring out what&#39;s triggering the issue or when CI passes simply merge the PR.\r\n\r\n[![greenkeeper PR 1][1]][1]\r\n[![greenkeeper PR 2][2]][2]\r\n\r\nAt the bottom, you can see that the first build failed at first and after a commit (&quot;upgrade to node v6.9&quot;) the tests pass so I could finally merge the PR. Comes with a lot of emoji, too.\r\n\r\nAnother alternative would be https://dependencyci.com/, however I didn&#39;t test it intensively. After a first look Greenkeeper looks better in general IMO and has better integration.\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/8Bez5.png\r\n  [2]: https://i.stack.imgur.com/404IN.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1484515658, "answer_id": 41666517, "path": "stack.browserify.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1484515658, "body_markdown": " - npm outdated \r\n - npm update\r\n\r\nShould get you the latest wanted versions compatible for your app. But not the latest versions."}, {"tags": [], "down_vote_count": 0, "creation_date": 1490644830, "answer_id": 43055412, "path": "stack.browserify.answer", "score": 31, "up_vote_count": 31, "is_accepted": false, "last_activity_date": 1490644830, "body_markdown": "If you happen to be using [Visual Studio Code][1] as your IDE, this is a fun little extension to make updating `package.json` a one click process.\r\n\r\n**[Version Lense][2]**\r\n----------------------\r\n\r\n  \r\n\r\n[![enter image description here][3]][3]\r\n\r\n\r\n  [1]: https://code.visualstudio.com/\r\n  [2]: https://github.com/vscode-contrib/vscode-versionlens\r\n  [3]: https://i.stack.imgur.com/NxI5v.gif"}, {"tags": [], "down_vote_count": 0, "creation_date": 1492438590, "answer_id": 43453240, "path": "stack.browserify.answer", "score": 6, "up_vote_count": 6, "is_accepted": false, "last_activity_date": 1492441096, "last_edit_date": 1492441096, "body_markdown": "I use `npm-check` to archive this.\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    npm i -g npm npm-check\r\n    npm-check -ug #to update globals\r\n    npm-check -u #to update locals\r\n\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/QSI4Z.png\r\n\r\nAnother useful command list which will keep exact version numbers in `package.json`\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    npm cache clean\r\n    rm -rf node_modules/\r\n    npm i -g npm npm-check-updates\r\n    ncu -g #update globals\r\n    ncu -ua #update locals\r\n    npm i"}, {"tags": [], "down_vote_count": 0, "creation_date": 1496295283, "answer_id": 44299232, "path": "stack.browserify.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1497540042, "last_edit_date": 1497540042, "body_markdown": "A very late reply. but may help someone. \r\n\r\nthis feature has been introduced in `npm v5`. update to npm using `npm install -g npm@latest` and \r\n\r\nto update `package.json` \r\n\r\n1. delete `/node_modules` and `package-lock.json (if you have any)` \r\n\r\n2. run `npm update`. this will update package.json to the latest version with installed dependencies. \r\n\r\nStill `npm5` is buggy and will be fixed soon\r\n\r\nto update to very latest version. you can go with `npm-check-updates`"}, {"tags": [], "down_vote_count": 0, "creation_date": 1497348029, "answer_id": 44518227, "path": "stack.browserify.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1497348554, "last_edit_date": 1497348554, "body_markdown": "If you are using `yarn`, [`yarn upgrade-interactive`](https://yarnpkg.com/lang/en/docs/cli/upgrade-interactive/) is a really sleek tool that can allow you to view your outdated dependencies and then select which ones you want to update.\r\n\r\nMore reasons to use Yarn over `npm`. Heh."}, {"tags": [], "down_vote_count": 0, "creation_date": 1499245946, "answer_id": 44921831, "path": "stack.browserify.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1499245946, "body_markdown": "This is what I did to update all the dependencies in `package.json` to latest:\r\n\r\n    npm install -g npm-check-updates\r\n    ncu -u --packageFile package.json "}, {"tags": [], "down_vote_count": 0, "creation_date": 1499724871, "answer_id": 45022485, "path": "stack.browserify.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1499724871, "body_markdown": "One easy step:\r\n\r\n    $ npm install -g npm-check-updates &amp;&amp; ncu -a &amp;&amp; npm i"}, {"tags": [], "down_vote_count": 0, "creation_date": 1500400873, "answer_id": 45174034, "path": "stack.browserify.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1500425753, "last_edit_date": 1500425753, "body_markdown": "Ncu is a new alias to check for updates. By doing so you do not have to manually update ur version numbers in package.json ncu does it for you . Follow the method below if you are in a Linux machine \n    \n    sudo npm i -g npm-check-updates\r\n    ncu\r\n    ncu -a // to update your package.json\r\n    sudo npm install\n\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1501847323, "answer_id": 45506071, "path": "stack.browserify.answer", "score": 4, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1501847323, "body_markdown": "Try following command if you using npm 5 and node 8\r\n \r\n   npm update --save"}, {"tags": [], "down_vote_count": 0, "creation_date": 1503432507, "answer_id": 45826162, "path": "stack.browserify.answer", "score": 15, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1503432507, "body_markdown": "I really like how [npm-upgrade][1] works. It is a simple command line utility that goes through all of your dependencies and lets you see the current version compared to the latest version and update if you want. \r\n\r\nHere is a screenshot of what happens after running `npm-upgade` in the root of your project:\r\n\r\n[![npm upgrade example][2]][2]\r\n\r\nFor each dependency you can choose to upgrade, ignore, view the changelog, or finish the process. It has worked great for me so far.\r\n\r\n\r\n  [1]: https://www.npmjs.com/package/npm-upgrade\r\n  [2]: https://i.stack.imgur.com/qiwIs.png"}, {"tags": [], "down_vote_count": 0, "creation_date": 1509541355, "answer_id": 47055517, "path": "stack.browserify.answer", "score": 5, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1509541355, "body_markdown": "Commands that I had to use to update `package.json` for `NPM 3.10.10`:\r\n\r\n    npm install -g npm-check-updates\r\n    ncu -a\r\n    npm install\r\n\r\nBackground:\r\n\r\nI was using the latest command from @josh3736 but my `package.json` was not updated. I then noticed the description text when running `npm-check-updates -u`:\r\n\r\n&gt; The following dependency is satisfied by its declared version range,\r\n&gt; but the installed version is behind. You can install the latest\r\n&gt; version without modifying your package file by using npm update. If\r\n&gt; you want to update the dependency in your package file anyway, run ncu\r\n&gt; -a.\r\n\r\nReading the documentation for npm-check-updates you can see the difference:\r\n\r\nhttps://www.npmjs.com/package/npm-check-updates\r\n\r\n&gt; -u, --upgrade: overwrite package file\r\n&gt; \r\n&gt; -a, --upgradeAll: include even those dependencies whose latest version satisfies the declared semver dependency\r\n\r\nncu is an alias for `npm-check-updates` as seen in the message when typing `npm-check-updates -u`:\r\n\r\n    [INFO]: You can also use ncu as an alias"}, {"tags": [], "down_vote_count": 0, "creation_date": 1512630078, "answer_id": 47689366, "path": "stack.browserify.answer", "score": 11, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1512630078, "body_markdown": "To see which packages have newer versions available, then use the following command:\r\n\r\n    npm outdated\r\n\r\nto update just **one** dependency just use the following command:\r\n\r\n    npm install yourPackage@latest --save\r\n\r\nFor example:\r\n\r\nMy `package.json` file has dependency: \r\n\r\n    &quot;@progress/kendo-angular-dateinputs&quot;: &quot;^1.3.1&quot;,\r\n\r\nthen I should write:\r\n\r\n    npm install @progress/kendo-angular-dateinputs@latest --save"}, {"tags": [], "down_vote_count": 0, "creation_date": 1519600554, "answer_id": 48979498, "path": "stack.browserify.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1519600554, "body_markdown": "The following code (which was accepted) wrote me something like &quot;it takes too long blah-blah&quot; and did nothing. Probably using the global flag was the problem, idk.\r\n\r\n    npm i -g npm-check-updates\r\n    ncu -u\r\n    npm install\r\n\r\nI decided to use my text editor and follow a semi-manual approach instead.\r\n\r\nI copied a list like this (just a lot longer) from the dev dependencies of my `package.json` to the notepad++ text editor:\r\n\r\n    &quot;browserify&quot;: &quot;10.2.6&quot;,\r\n    &quot;expect.js&quot;: &quot;^0.3.1&quot;,\r\n    &quot;karma&quot;: &quot;^0.13.22&quot;,\r\n    &quot;karma-browserify&quot;: &quot;^5.2.0&quot;,\r\n\r\nI set the search mode to regular expression, used the `^\\s*&quot;([^&quot;]+)&quot;.*$` pattern to get the package name and replaced it with `npm uninstall \\1 --save-dev \\nnpm install \\1 --save-dev`. Clicked on &quot;replace all&quot;. The otput was this:\r\n\r\n    npm uninstall browserify --save-dev \r\n    npm install browserify --save-dev\r\n    npm uninstall expect.js --save-dev \r\n    npm install expect.js --save-dev\r\n    npm uninstall karma --save-dev \r\n    npm install karma --save-dev\r\n    npm uninstall karma-browserify --save-dev \r\n    npm install karma-browserify --save-dev\r\n\r\nI copied it back to bash and hit enter. Everything was upgraded and working fine. That&#39;s all.\r\n\r\n    &quot;browserify&quot;: &quot;^16.1.0&quot;,\r\n    &quot;expect.js&quot;: &quot;^0.3.1&quot;,\r\n    &quot;karma&quot;: &quot;^2.0.0&quot;,\r\n    &quot;karma-browserify&quot;: &quot;^5.2.0&quot;,\r\n\r\nI don&#39;t think it is a big deal, since you have to do it only every now and then, but you can easily write a script, which parses the `package.json` and upgrades your packages. I think it is better this way, because you can edit your list if you need something special, for example keeping the current version of a lib."}], "title": "How do I update each dependency in package.json to the latest version?", "view_count": 511244, "answer_count": 27, "code_snippet": ["<code>npm info express version</code>", "<code>{\n  \"name\": \"myproject\",\n  \"description\": \"my node project\",\n  \"version\": \"1.0.0\",\n  \"engines\": {\n    \"node\": \"0.8.4\",\n    \"npm\": \"1.1.65\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"express\": \"~3.0.3\", // how do I get these bumped to latest?\n    \"mongodb\": \"~1.2.5\",\n    \"underscore\": \"~1.4.2\",\n    \"rjs\": \"~2.9.0\",\n    \"jade\": \"~0.27.2\",\n    \"async\": \"~0.1.22\"\n  }\n}\n</code>", "<code>npm i -g npm-check-updates\nncu -u\nnpm install\n</code>", "<code>*</code>", "<code>npm update --save</code>", "<code>  \"dependencies\": {\n    \"express\": \"*\",\n    \"mongodb\": \"*\",\n    \"underscore\": \"*\",\n    \"rjs\": \"*\",\n    \"jade\": \"*\",\n    \"async\": \"*\"\n  }\n</code>", "<code>  \"dependencies\": {\n    \"express\": \"~3.2.0\",\n    \"mongodb\": \"~1.2.14\",\n    \"underscore\": \"~1.4.4\",\n    \"rjs\": \"~2.10.0\",\n    \"jade\": \"~0.29.0\",\n    \"async\": \"~0.2.7\"\n  }\n</code>", "<code>npm outdated</code>", "<code>*</code>", "<code>--save</code>", "<code>*</code>", "<code>npm install --save</code>", "<code>package.json</code>", "<code>update</code>", "<code>npm install -g npm-check-updates</code>", "<code>npm-check-updates</code>", "<code>npm-check-updates -u</code>", "<code>npm install</code>", "<code>npm-check-updates</code>", "<code>$ npm install -g npm-check-updates\n$ ncu -u\n$ npm install \n</code>", "<code>npm-check-updates</code>", "<code>npm outdated</code>", "<code>npm update</code>", "<code>npm shrinkwrap</code>", "<code>npm-check-updates</code>", "<code>npm shrinkwrap</code>", "<code>npm-check-updates</code>", "<code>npm outdated</code>", "<code># `outdated` is part of newer npm versions (2+)\n$ npm outdated\n# If you agree, update.  \n$ npm update\n\n#       OR\n\n# Install and use the `npm-check-updates` package.\n$ npm install -g npm-check-updates\n# Then check your project\n$ npm-check-updates\n# If you agree, update package.json.\n$ npm-check-updates -u\n</code>", "<code>$ rm -rf node_modules\n$ npm install \n</code>", "<code>npm-shrinkwrap.json</code>", "<code>npm shrinkwrap</code>", "<code>$ rm npm-shrinkwrap.json\n$ npm shrinkwrap\n</code>", "<code>npm install</code>", "<code>npm-shrinkwrap.json</code>", "<code>npm-shrinkwrap.json</code>", "<code>npm-shrinkwrap.json</code>", "<code>npm update</code>", "<code>yarn upgrade package@version</code>", "<code>package.json</code>", "<code>npm install {package-name}@* {save flags?}\n</code>", "<code>npm install express@* --save\n</code>", "<code>npm install --save package-nave@* other-package@* whatever-thing@*\n</code>", "<code>npm outdated</code>", "<code>package.json</code>", "<code>npm install react-native-image-picker@* --save</code>", "<code>npm outdated -l</code>", "<code>npm install --save-dev</code>", "<code>ncu express mocha chai</code>", "<code>ncu -x mocha</code>", "<code>\"dependencies\": {\n  \"foo\": \"latest\"\n}\n</code>", "<code>npm shrinkwrap</code>", "<code>*</code>", "<code>latest</code>", "<code>LatestStablePackages</code>", "<code>\"dependencies\": {\n        \"express\": \"latest\"  // using the latest STABLE version\n    ,   \"node-gyp\": \"latest\"    \n    ,   \"jade\": \"latest\"\n    ,   \"mongoose\": \"*\" // using the newest version, may involve the unstable releases\n    ,   \"cookie-parser\": \"latest\"\n    ,   \"express-session\": \"latest\"\n    ,   \"body-parser\": \"latest\"\n    ,   \"nodemailer\":\"latest\"\n    ,   \"validator\": \"latest\"\n    ,   \"bcrypt\": \"latest\"\n    ,   \"formidable\": \"latest\"\n    ,   \"path\": \"latest\"\n    ,   \"fs-extra\": \"latest\"\n    ,   \"moment\": \"latest\"\n    ,   \"express-device\": \"latest\"\n},\n</code>", "<code>*</code>", "<code>$ npm install -g npm-check-updates\n$ npm-check-updates -u\n$ npm install \n</code>", "<code>rm -rf node_modules</code>", "<code>npm install</code>", "<code>package.json</code>", "<code>([&gt;|&lt;|=|~|^|\\s])*?(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)\n</code>", "<code>npm update --save</code>", "<code>('|\")([&gt;|&lt;|=|~|^|\\s])*?(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)</code>", "<code>:</code>", "<code>ctrl+d</code>", "<code>\"*\"</code>", "<code>npm-upgade</code>", "<code>npm outdated --json --depth=0 | \\\njq --ascii-output --monochrome-output '. | keys | .[]' | \\\nxargs npm install $1 --save-dev\n</code>", "<code>npm outdated</code>", "<code>jq</code>", "<code>--depth</code>", "<code>npm outdated</code>", "<code>npm install LIBRARYNAME --save-dev</code>", "<code>brew install jq</code>", "<code>devDependancies</code>", "<code>--save-dev</code>", "<code>npm outdated --depth=0\n</code>", "<code>npm list --depth=0\n</code>", "<code>awk</code>", "<code>npm outdated --depth=0 | grep -v \"^Package\" | awk '{print $1}' | xargs npm install $1 --save-dev</code>", "<code>cat package.json|jq -r '.devDependencies|keys|map(.+\"@latest\")|@sh'|xargs npm install --save-dev</code>", "<code>npm outdated\n</code>", "<code>npm install yourPackage@latest --save\n</code>", "<code>package.json</code>", "<code>\"@progress/kendo-angular-dateinputs\": \"^1.3.1\",\n</code>", "<code>npm install @progress/kendo-angular-dateinputs@latest --save\n</code>", "<code>npm-check</code>", "<code>npm i -g npm npm-check\nnpm-check -ug #to update globals\nnpm-check -u #to update locals\n</code>", "<code>package.json</code>", "<code>npm cache clean\nrm -rf node_modules/\nnpm i -g npm npm-check-updates\nncu -g #update globals\nncu -ua #update locals\nnpm i\n</code>", "<code>$ npm install -g npm-check-updates &amp;&amp; ncu -a &amp;&amp; npm i\n</code>", "<code>package.json</code>", "<code>NPM 3.10.10</code>", "<code>npm install -g npm-check-updates\nncu -a\nnpm install\n</code>", "<code>package.json</code>", "<code>npm-check-updates -u</code>", "<code>npm-check-updates</code>", "<code>npm-check-updates -u</code>", "<code>[INFO]: You can also use ncu as an alias\n</code>", "<code>npm shrinkwrap</code>", "<code>yarn</code>", "<code>yarn upgrade-interactive</code>", "<code>npm</code>", "<code>update</code>", "<code>package.json</code>", "<code>\"1.2.3\"</code>", "<code>1.2.4</code>", "<code>\"dependencies\":{\n    \"foo\" : \"&gt;=1.4.5\"\n}\n</code>", "<code>npm v5</code>", "<code>npm install -g npm@latest</code>", "<code>package.json</code>", "<code>/node_modules</code>", "<code>package-lock.json (if you have any)</code>", "<code>npm update</code>", "<code>npm5</code>", "<code>npm-check-updates</code>", "<code>sudo npm i -g npm-check-updates\nncu\nncu -a // to update your package.json\nsudo npm install\n</code>", "<code>*</code>", "<code>\"dependencies\": {\n    \"react\": \"*\",\n    \"react-google-maps\": \"*\"\n  }\n</code>", "<code>npm update --save</code>", "<code>\"dependencies\": {\n    \"react\": \"^15.0.1\",\n    \"react-google-maps\": \"*\"\n  }\n</code>", "<code>*</code>", "<code>node_modules</code>", "<code>node_modules/react-google-maps</code>", "<code>npm update --save</code>", "<code>\"dependencies\": {\n    \"react\": \"^15.0.1\",\n    \"react-google-maps\": \"^4.10.1\"\n  }\n</code>", "<code>npm update --save-dev</code>", "<code>package.json</code>", "<code>npm install -g npm-check-updates\nncu -u --packageFile package.json \n</code>", "<code>npm i -g npm-check-updates\nncu -u\nnpm install\n</code>", "<code>package.json</code>", "<code>\"browserify\": \"10.2.6\",\n\"expect.js\": \"^0.3.1\",\n\"karma\": \"^0.13.22\",\n\"karma-browserify\": \"^5.2.0\",\n</code>", "<code>^\\s*\"([^\"]+)\".*$</code>", "<code>npm uninstall \\1 --save-dev \\nnpm install \\1 --save-dev</code>", "<code>npm uninstall browserify --save-dev \nnpm install browserify --save-dev\nnpm uninstall expect.js --save-dev \nnpm install expect.js --save-dev\nnpm uninstall karma --save-dev \nnpm install karma --save-dev\nnpm uninstall karma-browserify --save-dev \nnpm install karma-browserify --save-dev\n</code>", "<code>\"browserify\": \"^16.1.0\",\n\"expect.js\": \"^0.3.1\",\n\"karma\": \"^2.0.0\",\n\"karma-browserify\": \"^5.2.0\",\n</code>", "<code>package.json</code>"], "path": "stack.browserify"}, {"tags": ["javascript", "pdf", "pdf-generation"], "creation_date": 1239564451, "body_markdown": "I\u2019m trying to convert XML data into PDF files from a web page and I was hoping I could do this entirely within JavaScript. I need to be able to draw text, images and simple shapes. I would love to be able to do this entirely in the browser.", "last_edit_date": 1505330623, "up_vote_count": 179, "link": "https://stackoverflow.com/questions/742271/generating-pdf-files-with-javascript", "_childDocuments_": [{"tags": [], "down_vote_count": 18, "creation_date": 1239578476, "answer_id": 742626, "path": "stack.browserify.answer", "score": -13, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1239578476, "body_markdown": "Even if you could generate the PDF in-memory in JavaScript, you would still have the issue of how to transfer that data to the user. It&#39;s hard for JavaScript to just push a file at the user.\r\n\r\nTo get the file to the user, you would want to do a server submit in order to get the browser to bring up the save dialog.\r\n\r\nWith that said, it really isn&#39;t too hard to generate PDFs. Just read the spec."}, {"tags": [], "down_vote_count": 5, "creation_date": 1240429786, "answer_id": 778897, "path": "stack.browserify.answer", "score": 303, "up_vote_count": 308, "is_accepted": true, "last_activity_date": 1406562335, "last_edit_date": 1406562335, "body_markdown": "I&#39;ve just written a library called [jsPDF][1] which generates PDFs using Javascript alone. It&#39;s still very young, and I&#39;ll be adding features and bug fixes soon. Also got a few ideas for workarounds in browsers that do not support Data URIs. It&#39;s licensed under a liberal MIT license. \r\n\r\nI came across this question before I started writing it and thought I&#39;d come back and let you know :)\r\n\r\n[Generate PDFs in Javascript][1]\r\n\r\n  [1]: https://github.com/MrRio/jsPDF"}, {"tags": [], "down_vote_count": 0, "creation_date": 1399464798, "answer_id": 23517501, "path": "stack.browserify.answer", "score": 82, "up_vote_count": 82, "is_accepted": false, "last_activity_date": 1399464798, "body_markdown": "Another javascript library worth mentioning is **pdfmake**.\r\n\r\n - [pdfmake playground][1]\r\n - [pdfmake on github][2]\r\n\r\n\r\n  [1]: http://pdfmake.org/playground.html\r\n  [2]: https://github.com/bpampuch/pdfmake\r\n\r\nThe browser support does not appear to be as strong as jsPDF, nor does there seem to be an option for shapes, but the options for formatting text are more advanced then the options currently available in jsPDF."}, {"tags": [], "down_vote_count": 0, "creation_date": 1423107312, "answer_id": 28335753, "path": "stack.browserify.answer", "score": 38, "up_vote_count": 38, "is_accepted": false, "last_activity_date": 1423107312, "body_markdown": "I maintain [PDFKit](http://github.com/devongovett/pdfkit), which also powers pdfmake (already mentioned here). It works in both Node and the browser, and supports a bunch of stuff that other libraries do not:\r\n\r\n* Embedding subsetted fonts, with support for unicode.\r\n* Lots of advanced text layout stuff (columns, page breaking, full unicode line breaking, basic rich text, etc.).\r\n* Working on even more font stuff for advanced typography (OpenType/AAT ligatures, contextual substitution, etc.). Coming soon: see the fontkit branch if you&#39;re interested.\r\n* More graphics stuff: gradients, etc.\r\n* Built with modern tools like browserify and streams. Usable both in the browser and node.\r\n\r\nCheck out http://pdfkit.org/ for a full tutorial to see for yourself what PDFKit can do. And for an example of what kinds of documents can be produced, check out the docs as a PDF [generated](https://github.com/devongovett/pdfkit/blob/master/docs/generate.coffee) from some Markdown files using PDFKit itself: http://pdfkit.org/docs/guide.pdf.\r\n\r\nYou can also try it out interactively in the browser here: http://pdfkit.org/demo/browser.html."}, {"tags": [], "down_vote_count": 1, "creation_date": 1429655271, "answer_id": 29784295, "path": "stack.browserify.answer", "score": 2, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1429667856, "last_edit_date": 1429667856, "body_markdown": "You can use this free service by adding a link which creates pdf from any url (e.g. http://www.phys.org):\r\n\r\n[http://freehtmltopdf.com/?convert=http%3A%2F%2Fwww.phys.org&amp;size=US_Letter&amp;orientation=portrait&amp;framesize=800&amp;language=en][1]\r\n\r\n\r\n  [1]: http://freehtmltopdf.com/?convert=http%3A%2F%2Fwww.phys.org&amp;size=US_Letter&amp;orientation=portrait&amp;framesize=800&amp;language=en"}, {"tags": [], "down_vote_count": 0, "creation_date": 1464615541, "answer_id": 37527137, "path": "stack.browserify.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1464615541, "body_markdown": "Another interesting project is [texlive.js][1]. \r\n\r\nIt allows you to compile (La)TeX to PDF in the browser.\r\n\r\n\r\n  [1]: http://manuels.github.io/texlive.js/"}], "title": "Generating PDF files with JavaScript", "view_count": 249384, "answer_count": 6, "code_snippet": [], "path": "stack.browserify"}, {"tags": ["javascript", "jquery", "html"], "creation_date": 1332892641, "body_markdown": "Okay, this might just be a silly question, though I&#39;m sure there are plenty of other people asking the same question from time to time. Me, I just want to make 100% sure about it either way. With jQuery we all know the wonderful\r\n\r\n    $(&#39;document&#39;).ready(function(){});\r\n\r\nHowever, let&#39;s say I want to run a function that is written in standard JavaScript with no library backing it, and that I want to launch a function as soon as the page is ready to handle it. What&#39;s the proper way to approach this?\r\n\r\nI know I can do:\r\n\r\n    window.onload=&quot;myFunction()&quot;;\r\n\r\n...or I can use the `body` tag:\r\n\r\n    &lt;body onload=&quot;myFunction()&quot;&gt;\r\n\r\n...or I can even try at the bottom of the page after everything, but the end `body` or `html` tag like:\r\n\r\n    &lt;script type=&quot;text/javascript&quot;&gt;\r\n       myFunction();\r\n    &lt;/script&gt;\r\n\r\nWhat is a cross-browser(old/new)-compliant method of issuing one or more functions in a manner like jQuery&#39;s `$.ready()`?\r\n", "last_edit_date": 1507903586, "up_vote_count": 811, "link": "https://stackoverflow.com/questions/9899372/pure-javascript-equivalent-of-jquerys-ready-how-to-call-a-function-when-t", "_childDocuments_": [{"tags": [], "down_vote_count": 3, "creation_date": 1332893093, "answer_id": 9899422, "path": "stack.browserify.answer", "score": 2, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1368744477, "last_edit_date": 1368744477, "body_markdown": "`document.ondomcontentready=function(){}` should do the trick, but it doesn&#39;t have full browser compatibility.\r\n\r\nSeems like you should just use jQuery min"}, {"tags": [], "down_vote_count": 2, "creation_date": 1332895572, "answer_id": 9899700, "path": "stack.browserify.answer", "score": 6, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1477672718, "last_edit_date": 1477672718, "body_markdown": "Your method (placing script before the closing body tag)\r\n\r\n    &lt;script&gt;\r\n       myFunction()\r\n    &lt;/script&gt;\r\n    &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\nis a reliable way to support old and new browsers."}, {"tags": [], "down_vote_count": 3, "creation_date": 1332895582, "answer_id": 9899701, "path": "stack.browserify.answer", "score": 1190, "up_vote_count": 1193, "is_accepted": true, "last_activity_date": 1486152524, "last_edit_date": 1486152524, "body_markdown": "The simplest thing to do in the absence of a framework that does all the cross-browser compatibility for you is to just put a call to your code at the end of the body.  This is faster to execute than an `onload` handler because this waits only for the DOM to be ready, not for all images to load.  And, this works in every browser.\r\n\r\n    &lt;html&gt;\r\n    &lt;head&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n    Your HTML here\r\n    \r\n    &lt;script&gt;\r\n    // self executing function here\r\n    (function() {\r\n       // your page initialization code here\r\n       // the DOM will be available here\r\n    \r\n    })();\r\n    &lt;/script&gt;\r\n    &lt;/body&gt;\r\n    &lt;/html&gt;\r\n\r\nIf you really don&#39;t want to do it this way and you need cross browser compatibility and you don&#39;t want to wait for `window.onload`, then you probably should go look at how a framework like jQuery implements it&#39;s `$(document).ready()` method.  It&#39;s fairly involved depending upon the capabilities of the browser.\r\n\r\nTo give you a little idea what jQuery does (which will work wherever the script tag is placed).\r\n\r\nIf supported, it tries the standard:\r\n\r\n    document.addEventListener(&#39;DOMContentLoaded&#39;, fn, false);\r\n\r\nwith a fallback to:\r\n\r\n    window.addEventListener(&#39;load&#39;, fn, false )\r\n\r\nor for older versions of IE, it uses:\r\n\r\n    document.attachEvent(&quot;onreadystatechange&quot;, fn);\r\n\r\nwith a fallback to:\r\n\r\n    window.attachEvent(&quot;onload&quot;, fn);\r\n\r\nAnd, there are some work-arounds in the IE code path that I don&#39;t quite follow, but it looks like it has something to do with frames.\r\n\r\n-------------\r\n\r\nHere is a full substitute for jQuery&#39;s `.ready()` written in plain javascript:\r\n\r\n    (function(funcName, baseObj) {\r\n        // The public function name defaults to window.docReady\r\n        // but you can pass in your own object and own function name and those will be used\r\n        // if you want to put them in a different namespace\r\n        funcName = funcName || &quot;docReady&quot;;\r\n        baseObj = baseObj || window;\r\n        var readyList = [];\r\n        var readyFired = false;\r\n        var readyEventHandlersInstalled = false;\r\n        \r\n        // call this when the document is ready\r\n        // this function protects itself against being called more than once\r\n        function ready() {\r\n            if (!readyFired) {\r\n                // this must be set to true before we start calling callbacks\r\n                readyFired = true;\r\n                for (var i = 0; i &lt; readyList.length; i++) {\r\n                    // if a callback here happens to add new ready handlers,\r\n                    // the docReady() function will see that it already fired\r\n                    // and will schedule the callback to run right after\r\n                    // this event loop finishes so all handlers will still execute\r\n                    // in order and no new ones will be added to the readyList\r\n                    // while we are processing the list\r\n                    readyList[i].fn.call(window, readyList[i].ctx);\r\n                }\r\n                // allow any closures held by these functions to free\r\n                readyList = [];\r\n            }\r\n        }\r\n        \r\n        function readyStateChange() {\r\n    \t\tif ( document.readyState === &quot;complete&quot; ) {\r\n                ready();\r\n            }\r\n        }\r\n        \r\n        // This is the one public interface\r\n        // docReady(fn, context);\r\n        // the context argument is optional - if present, it will be passed\r\n        // as an argument to the callback\r\n        baseObj[funcName] = function(callback, context) {\r\n            if (typeof callback !== &quot;function&quot;) {\r\n                throw new TypeError(&quot;callback for docReady(fn) must be a function&quot;);\r\n            }\r\n            // if ready has already fired, then just schedule the callback\r\n            // to fire asynchronously, but right away\r\n            if (readyFired) {\r\n                setTimeout(function() {callback(context);}, 1);\r\n                return;\r\n            } else {\r\n                // add the function and context to the list\r\n                readyList.push({fn: callback, ctx: context});\r\n            }\r\n            // if document already ready to go, schedule the ready function to run\r\n            if (document.readyState === &quot;complete&quot;) {\r\n                setTimeout(ready, 1);\r\n            } else if (!readyEventHandlersInstalled) {\r\n                // otherwise if we don&#39;t have event handlers installed, install them\r\n                if (document.addEventListener) {\r\n                    // first choice is DOMContentLoaded event\r\n                    document.addEventListener(&quot;DOMContentLoaded&quot;, ready, false);\r\n                    // backup is window load event\r\n                    window.addEventListener(&quot;load&quot;, ready, false);\r\n                } else {\r\n                    // must be IE\r\n                    document.attachEvent(&quot;onreadystatechange&quot;, readyStateChange);\r\n                    window.attachEvent(&quot;onload&quot;, ready);\r\n                }\r\n                readyEventHandlersInstalled = true;\r\n            }\r\n        }\r\n    })(&quot;docReady&quot;, window);\r\n\r\nThe latest version of the code is shared publicly on GitHub at https://github.com/jfriend00/docReady\r\n\r\nUsage:\r\n\r\n    // pass a function reference\r\n    docReady(fn);\r\n\r\n    // use an anonymous function\r\n    docReady(function() {\r\n        // code here\r\n    });\r\n\r\n    // pass a function reference and a context\r\n    // the context will be passed to the function as the first argument\r\n    docReady(fn, context);\r\n\r\n    // use an anonymous function with a context\r\n    docReady(function(context) {\r\n        // code here that can use the context argument that was passed to docReady\r\n    }, ctx);\r\n\r\n------------\r\nThis has been tested in:\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    IE6 and up\r\n    Firefox 3.6 and up\r\n    Chrome 14 and up\r\n    Safari 5.1 and up\r\n    Opera 11.6 and up\r\n    Multiple iOS devices\r\n    Multiple Android devices\r\n\r\nWorking implementation and test bed: http://jsfiddle.net/jfriend00/YfD3C/\r\n\r\n-------\r\n\r\nHere&#39;s a summary of how it works:\r\n\r\n1.  Create an IIFE (immediately invoked function expression) so we can have non-public state variables.\r\n2.  Declare a public function `docReady(fn, context)`\r\n3.  When `docReady(fn, context)` is called, check if the ready handler has already fired.  If so, just schedule the newly added callback to fire right after this thread of JS finishes with `setTimeout(fn, 1)`.\r\n4.  If the ready handler has not already fired, then add this new callback to the list of callbacks to be called later.\r\n5.  Check if the document is already ready.  If so, execute all ready handlers.\r\n6.  If we haven&#39;t installed event listeners yet to know when the document becomes ready, then install them now.\r\n7.  If `document.addEventListener` exists, then install event handlers using `.addEventListener()` for both `&quot;DOMContentLoaded&quot;` and `&quot;load&quot;` events.  The &quot;load&quot; is a backup event for safety and should not be needed.\r\n8.  If `document.addEventListener` doesn&#39;t exist, then install event handlers using `.attachEvent()` for `&quot;onreadystatechange&quot;` and `&quot;onload&quot;` events.\r\n9.  In the `onreadystatechange` event, check to see if the `document.readyState === &quot;complete&quot;` and if so, call a function to fire all the ready handlers.\r\n10. In all the other event handlers, call a function to fire all the ready handlers.\r\n11. In the function to call all the ready handlers, check a state variable to see if we&#39;ve already fired.  If we have, do nothing.  If we haven&#39;t yet been called, then loop through the array of ready functions and call each one in the order they were added.  Set a flag to indicate these have all been called so they are never executed more than once.\r\n12.  Clear the function array so any closures they might be using can be freed.\r\n\r\nHandlers registered with `docReady()` are guaranteed to be fired in the order they were registered.\r\n\r\nIf you call `docReady(fn)` after the document is already ready, the callback will be scheduled to execute as soon as the current thread of execution completes using `setTimeout(fn, 1)`.  This allows the calling code to always assume they are async callbacks that will be called later, even if later is as soon as the current thread of JS finishes and it preserves calling order.\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1353338660, "answer_id": 13456810, "path": "stack.browserify.answer", "score": 68, "up_vote_count": 68, "is_accepted": false, "last_activity_date": 1480751211, "last_edit_date": 1480751211, "body_markdown": "Tested in IE9, and latest Firefox and Chrome and also supported in IE8.\r\n\r\n    document.onreadystatechange = function () {\r\n      var state = document.readyState;\r\n      if (state == &#39;interactive&#39;) {\r\n          init();\r\n      } else if (state == &#39;complete&#39;) {\r\n          initOnCompleteLoad();\r\n      }\r\n    }\u200b;\r\n\r\nExample: http://jsfiddle.net/electricvisions/Jacck/\r\n\r\n\r\n**UPDATE - reusable version**\r\n\r\nI have just developed the following. It&#39;s a rather simplistic equivalent to jQuery or Dom ready without backwards compatibility. It probably needs further refinement. Tested in latest versions of Chrome, Firefox and IE (10/11) and should work in older browsers as commented on. I&#39;ll update if I find any issues.\r\n\r\n    window.readyHandlers = [];\r\n    window.ready = function ready(handler) {\r\n      window.readyHandlers.push(handler);\r\n      handleState();\r\n    };\r\n    \r\n    window.handleState = function handleState () {\r\n      if ([&#39;interactive&#39;, &#39;complete&#39;].indexOf(document.readyState) &gt; -1) {\r\n        while(window.readyHandlers.length &gt; 0) {\r\n          (window.readyHandlers.shift())();\r\n        }\r\n      }\r\n    };\r\n    \r\n    document.onreadystatechange = window.handleState;\r\n\r\n\r\nUsage:\r\n\r\n    ready(function () {\r\n      // your code here\r\n    });\r\n\r\nIt&#39;s written to handle async loading of JS but you might want to sync load this script first unless you&#39;re minifying. I&#39;ve found it useful in development.\r\n\r\nModern browsers also support async loading of scripts which further enhances the experience. Support for async means multiple scripts can be downloaded simultaneously all while still rendering the page. Just watch out when depending on other scripts loaded asynchronously or use a minifier or something like browserify to handle dependencies. \r\n\r\n"}, {"tags": [], "down_vote_count": 4, "creation_date": 1432022327, "answer_id": 30319853, "path": "stack.browserify.answer", "score": 89, "up_vote_count": 93, "is_accepted": false, "last_activity_date": 1478236710, "last_edit_date": 1478236710, "body_markdown": "I would like to mention some of the possible ways here together with a **pure javascript trick which works across all browsers**:\r\n\r\n    // with jQuery \r\n    $(document).ready(function(){ /* ... */ });\r\n\r\n    // shorter jQuery version \r\n    $(function(){ /* ... */ });\r\n\r\n    // without jQuery (doesn&#39;t work in older IEs)\r\n    document.addEventListener(&#39;DOMContentLoaded&#39;, function(){ \r\n        // your code goes here\r\n    }, false);\r\n    \r\n    // and here&#39;s the trick (works everywhere)\r\n    function r(f){/in/.test(document.readyState)?setTimeout(&#39;r(&#39;+f+&#39;)&#39;,9):f()}\r\n    // use like\r\n    r(function(){\r\n        alert(&#39;DOM Ready!&#39;);\r\n    });\r\n\r\n\r\nThe trick here, as explained by the [original author][1], is that we are checking the **document.readyState** property. If it contains the string `in` (as in `uninitialized` and `loading`, the first two [DOM ready states][2] out of 5) we set a timeout and check again. Otherwise, we execute the passed function.\r\n\r\nAnd here&#39;s the [jsFiddle][3] for the trick which **works across all browsers.** \r\n\r\nThanks to [Tutorialzine][4] for including this in their book.\r\n\r\n\r\n  [1]: http://www.dustindiaz.com/smallest-domready-ever\r\n  [2]: http://www.w3schools.com/jsref/prop_doc_readystate.asp\r\n  [3]: http://jsfiddle.net/ramswaroop/br21uzk7/\r\n  [4]: http://tutorialzine.com/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1433942829, "answer_id": 30757781, "path": "stack.browserify.answer", "score": 16, "up_vote_count": 16, "is_accepted": false, "last_activity_date": 1477676355, "last_edit_date": 1477676355, "body_markdown": "The good folks at HubSpot have a resource where you can find pure Javascript methodologies for achieving a lot of jQuery goodness - including `ready`\r\n\r\nhttp://youmightnotneedjquery.com/#ready\r\n\r\n    function ready(fn) {\r\n      if (document.readyState != &#39;loading&#39;){\r\n        fn();\r\n      } else if (document.addEventListener) {\r\n        document.addEventListener(&#39;DOMContentLoaded&#39;, fn);\r\n      } else {\r\n        document.attachEvent(&#39;onreadystatechange&#39;, function() {\r\n          if (document.readyState != &#39;loading&#39;)\r\n            fn();\r\n        });\r\n      }\r\n    }\r\n\r\nexample inline usage:\r\n\r\n    ready(function() { alert(&#39;hello&#39;); });"}, {"tags": [], "down_vote_count": 0, "creation_date": 1435782690, "answer_id": 31171096, "path": "stack.browserify.answer", "score": 64, "up_vote_count": 64, "is_accepted": false, "last_activity_date": 1516167394, "last_edit_date": 1516167394, "body_markdown": "If you are doing **VANILLA** plain **JavaScript** without jQuery, then you must use (Internet&amp;nbsp;Explorer&amp;nbsp;9 or later):\r\n\r\n    document.addEventListener(&quot;DOMContentLoaded&quot;, function(event) {\r\n        // Your code to run since DOM is loaded and ready\r\n    });\r\n\r\nAbove is the equivalent of jQuery `.ready`:\r\n\r\n    $(document).ready(function() {\r\n        console.log(&quot;Ready!&quot;);\r\n    });\r\n\r\nWhich ALSO could be written SHORTHAND like this, which jQuery will run after the ready even [occurs][1].\r\n\r\n    $(function() {\r\n        console.log(&quot;ready!&quot;);\r\n    });\r\n\r\nNOT TO BE CONFUSED with BELOW (which is not meant to be DOM ready):\r\n\r\nDO NOT use an [IIFE][2] like this that is self executing:\r\n\r\n     Example:\r\n\r\n    (function() {\r\n       // Your page initialization code here  - WRONG\r\n       // The DOM will be available here   - WRONG\r\n    })();\r\n\r\nThis IIFE will NOT wait for your DOM to load. (I&#39;m even talking about latest version of Chrome browser!)\r\n\r\n\r\n  [1]: https://stackoverflow.com/q/7614574/32453\r\n  [2]: https://developer.mozilla.org/en-US/docs/Glossary/IIFE"}, {"tags": [], "down_vote_count": 1, "creation_date": 1448342153, "answer_id": 33885930, "path": "stack.browserify.answer", "score": 4, "up_vote_count": 5, "is_accepted": false, "last_activity_date": 1448342153, "body_markdown": "Ready\r\n-----\r\n\r\n    function ready(fn){var d=document;(d.readyState==&#39;loading&#39;)?d.addEventListener(&#39;DOMContentLoaded&#39;,fn):fn();}\r\n\r\nUse like\r\n\r\n    ready(function(){\r\n        //some code\r\n    });\r\n\r\n\r\n----------\r\n\r\n\r\nFor self invoking code\r\n----------------------\r\n\r\n    (function(fn){var d=document;(d.readyState==&#39;loading&#39;)?d.addEventListener(&#39;DOMContentLoaded&#39;,fn):fn();})(function(){\r\n    \t\r\n        //Some Code here\r\n        //DOM is avaliable\r\n        //var h1s = document.querySelector(&quot;h1&quot;);\r\n    \r\n    });\r\n\r\n\r\n----------\r\n\r\n\r\nSupport: IE9+\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1466316234, "answer_id": 37904429, "path": "stack.browserify.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1507903296, "last_edit_date": 1507903296, "body_markdown": "I&#39;m not quite sure what you&#39;re asking, but maybe this can help:\r\n\r\n    window.onload = function(){\r\n        // Code. . .\r\n\r\n    }\r\n\r\nOr:\r\n\r\n    window.onload = main;\r\n\r\n    function main(){\r\n        // Code. . .\r\n\r\n    }\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1477677168, "answer_id": 40310653, "path": "stack.browserify.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1507928543, "last_edit_date": 1507928543, "body_markdown": "Here&#39;s a cleaned-up, non-eval-using version of Ram-swaroop&#39;s &quot;works in all browsers&quot; method:\r\n\r\n    function onReady(yourMethod) {\r\n      var readyStateCheckInterval = setInterval(function() {\r\n        if (document &amp;&amp; document.readyState === &#39;complete&#39;) { // Or &#39;interactive&#39;\r\n          clearInterval(readyStateCheckInterval);\r\n          yourMethod();\r\n        }\r\n      }, 10);\r\n    }\r\n    // use like\r\n    onReady(function() { alert(&#39;hello&#39;); } );\r\n\r\nThis does wait an extra 10 ms to run, however, so here&#39;s a more complicated way that shouldn&#39;t:\r\n\r\n    function onReady(yourMethod) {\r\n      if (document.readyState === &#39;complete&#39;) { // Or also compare to &#39;interactive&#39;\r\n        setTimeout(yourMethod, 1); // Schedule to run immediately\r\n      }\r\n      else {\r\n        readyStateCheckInterval = setInterval(function() {\r\n          if (document.readyState === &#39;complete&#39;) { // Or also compare to &#39;interactive&#39;\r\n            clearInterval(readyStateCheckInterval);\r\n            yourMethod();\r\n          }\r\n        }, 10);\r\n      }\r\n    }\r\n\r\n    // Use like\r\n    onReady(function() { alert(&#39;hello&#39;); } );\r\n\r\n    // Or\r\n    onReady(functionName);\r\n\r\nSee also *https://stackoverflow.com/questions/8100576/how-to-check-if-dom-is-ready-without-a-framework*.\r\n"}], "title": "Pure JavaScript equivalent of jQuery&#39;s $.ready() - how to call a function when the page/DOM is ready for it", "view_count": 759747, "answer_count": 10, "code_snippet": ["<code>$('document').ready(function(){});\n</code>", "<code>window.onload=\"myFunction()\";\n</code>", "<code>body</code>", "<code>&lt;body onload=\"myFunction()\"&gt;\n</code>", "<code>body</code>", "<code>html</code>", "<code>&lt;script type=\"text/javascript\"&gt;\n   myFunction();\n&lt;/script&gt;\n</code>", "<code>$.ready()</code>", "<code>onload</code>", "<code>&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\nYour HTML here\n\n&lt;script&gt;\n// self executing function here\n(function() {\n   // your page initialization code here\n   // the DOM will be available here\n\n})();\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code>", "<code>window.onload</code>", "<code>$(document).ready()</code>", "<code>document.addEventListener('DOMContentLoaded', fn, false);\n</code>", "<code>window.addEventListener('load', fn, false )\n</code>", "<code>document.attachEvent(\"onreadystatechange\", fn);\n</code>", "<code>window.attachEvent(\"onload\", fn);\n</code>", "<code>.ready()</code>", "<code>(function(funcName, baseObj) {\n    // The public function name defaults to window.docReady\n    // but you can pass in your own object and own function name and those will be used\n    // if you want to put them in a different namespace\n    funcName = funcName || \"docReady\";\n    baseObj = baseObj || window;\n    var readyList = [];\n    var readyFired = false;\n    var readyEventHandlersInstalled = false;\n\n    // call this when the document is ready\n    // this function protects itself against being called more than once\n    function ready() {\n        if (!readyFired) {\n            // this must be set to true before we start calling callbacks\n            readyFired = true;\n            for (var i = 0; i &lt; readyList.length; i++) {\n                // if a callback here happens to add new ready handlers,\n                // the docReady() function will see that it already fired\n                // and will schedule the callback to run right after\n                // this event loop finishes so all handlers will still execute\n                // in order and no new ones will be added to the readyList\n                // while we are processing the list\n                readyList[i].fn.call(window, readyList[i].ctx);\n            }\n            // allow any closures held by these functions to free\n            readyList = [];\n        }\n    }\n\n    function readyStateChange() {\n        if ( document.readyState === \"complete\" ) {\n            ready();\n        }\n    }\n\n    // This is the one public interface\n    // docReady(fn, context);\n    // the context argument is optional - if present, it will be passed\n    // as an argument to the callback\n    baseObj[funcName] = function(callback, context) {\n        if (typeof callback !== \"function\") {\n            throw new TypeError(\"callback for docReady(fn) must be a function\");\n        }\n        // if ready has already fired, then just schedule the callback\n        // to fire asynchronously, but right away\n        if (readyFired) {\n            setTimeout(function() {callback(context);}, 1);\n            return;\n        } else {\n            // add the function and context to the list\n            readyList.push({fn: callback, ctx: context});\n        }\n        // if document already ready to go, schedule the ready function to run\n        if (document.readyState === \"complete\") {\n            setTimeout(ready, 1);\n        } else if (!readyEventHandlersInstalled) {\n            // otherwise if we don't have event handlers installed, install them\n            if (document.addEventListener) {\n                // first choice is DOMContentLoaded event\n                document.addEventListener(\"DOMContentLoaded\", ready, false);\n                // backup is window load event\n                window.addEventListener(\"load\", ready, false);\n            } else {\n                // must be IE\n                document.attachEvent(\"onreadystatechange\", readyStateChange);\n                window.attachEvent(\"onload\", ready);\n            }\n            readyEventHandlersInstalled = true;\n        }\n    }\n})(\"docReady\", window);\n</code>", "<code>// pass a function reference\ndocReady(fn);\n\n// use an anonymous function\ndocReady(function() {\n    // code here\n});\n\n// pass a function reference and a context\n// the context will be passed to the function as the first argument\ndocReady(fn, context);\n\n// use an anonymous function with a context\ndocReady(function(context) {\n    // code here that can use the context argument that was passed to docReady\n}, ctx);\n</code>", "<code>IE6 and up\nFirefox 3.6 and up\nChrome 14 and up\nSafari 5.1 and up\nOpera 11.6 and up\nMultiple iOS devices\nMultiple Android devices\n</code>", "<code>docReady(fn, context)</code>", "<code>docReady(fn, context)</code>", "<code>setTimeout(fn, 1)</code>", "<code>document.addEventListener</code>", "<code>.addEventListener()</code>", "<code>\"DOMContentLoaded\"</code>", "<code>\"load\"</code>", "<code>document.addEventListener</code>", "<code>.attachEvent()</code>", "<code>\"onreadystatechange\"</code>", "<code>\"onload\"</code>", "<code>onreadystatechange</code>", "<code>document.readyState === \"complete\"</code>", "<code>docReady()</code>", "<code>docReady(fn)</code>", "<code>setTimeout(fn, 1)</code>", "<code>document.write()</code>", "<code>docReady()</code>", "<code>init()</code>", "<code>setTimeout()</code>", "<code>.then()</code>", "<code>// with jQuery \n$(document).ready(function(){ /* ... */ });\n\n// shorter jQuery version \n$(function(){ /* ... */ });\n\n// without jQuery (doesn't work in older IEs)\ndocument.addEventListener('DOMContentLoaded', function(){ \n    // your code goes here\n}, false);\n\n// and here's the trick (works everywhere)\nfunction r(f){/in/.test(document.readyState)?setTimeout('r('+f+')',9):f()}\n// use like\nr(function(){\n    alert('DOM Ready!');\n});\n</code>", "<code>in</code>", "<code>uninitialized</code>", "<code>loading</code>", "<code>readyState</code>", "<code>undefined</code>", "<code>setTimeout(r,9,f)</code>", "<code>document.onreadystatechange = function () {\n  var state = document.readyState;\n  if (state == 'interactive') {\n      init();\n  } else if (state == 'complete') {\n      initOnCompleteLoad();\n  }\n}\u200b;\n</code>", "<code>window.readyHandlers = [];\nwindow.ready = function ready(handler) {\n  window.readyHandlers.push(handler);\n  handleState();\n};\n\nwindow.handleState = function handleState () {\n  if (['interactive', 'complete'].indexOf(document.readyState) &gt; -1) {\n    while(window.readyHandlers.length &gt; 0) {\n      (window.readyHandlers.shift())();\n    }\n  }\n};\n\ndocument.onreadystatechange = window.handleState;\n</code>", "<code>ready(function () {\n  // your code here\n});\n</code>", "<code>addEventListener</code>", "<code>attachEvent</code>", "<code>document.addEventListener(\"DOMContentLoaded\", function(event) {\n    // Your code to run since DOM is loaded and ready\n});\n</code>", "<code>.ready</code>", "<code>$(document).ready(function() {\n    console.log(\"Ready!\");\n});\n</code>", "<code>$(function() {\n    console.log(\"ready!\");\n});\n</code>", "<code> Example:\n\n(function() {\n   // Your page initialization code here  - WRONG\n   // The DOM will be available here   - WRONG\n})();\n</code>", "<code>ready</code>", "<code>function ready(fn) {\n  if (document.readyState != 'loading'){\n    fn();\n  } else if (document.addEventListener) {\n    document.addEventListener('DOMContentLoaded', fn);\n  } else {\n    document.attachEvent('onreadystatechange', function() {\n      if (document.readyState != 'loading')\n        fn();\n    });\n  }\n}\n</code>", "<code>ready(function() { alert('hello'); });\n</code>", "<code>&lt;script&gt;\n   myFunction()\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code>", "<code>function ready(fn){var d=document;(d.readyState=='loading')?d.addEventListener('DOMContentLoaded',fn):fn();}\n</code>", "<code>ready(function(){\n    //some code\n});\n</code>", "<code>(function(fn){var d=document;(d.readyState=='loading')?d.addEventListener('DOMContentLoaded',fn):fn();})(function(){\n\n    //Some Code here\n    //DOM is avaliable\n    //var h1s = document.querySelector(\"h1\");\n\n});\n</code>", "<code>window.onload = function(){\n    // Code. . .\n\n}\n</code>", "<code>window.onload = main;\n\nfunction main(){\n    // Code. . .\n\n}\n</code>", "<code>document.ondomcontentready=function(){}</code>", "<code>onload</code>", "<code>function onReady(yourMethod) {\n  var readyStateCheckInterval = setInterval(function() {\n    if (document &amp;&amp; document.readyState === 'complete') { // Or 'interactive'\n      clearInterval(readyStateCheckInterval);\n      yourMethod();\n    }\n  }, 10);\n}\n// use like\nonReady(function() { alert('hello'); } );\n</code>", "<code>function onReady(yourMethod) {\n  if (document.readyState === 'complete') { // Or also compare to 'interactive'\n    setTimeout(yourMethod, 1); // Schedule to run immediately\n  }\n  else {\n    readyStateCheckInterval = setInterval(function() {\n      if (document.readyState === 'complete') { // Or also compare to 'interactive'\n        clearInterval(readyStateCheckInterval);\n        yourMethod();\n      }\n    }, 10);\n  }\n}\n\n// Use like\nonReady(function() { alert('hello'); } );\n\n// Or\nonReady(functionName);\n</code>"], "path": "stack.browserify"}, {"tags": ["javascript", "guid", "uuid"], "creation_date": 1221854460, "body_markdown": "I&#39;m trying to create globally-unique identifiers in JavaScript.  I&#39;m not sure what routines are available on all browsers, how &quot;random&quot; and seeded the built-in random number generator is, etc..\r\n\r\nThe GUID / UUID should be at least 32 characters and should stay in the ASCII range to avoid trouble when passing them around.", "last_edit_date": 1419636988, "up_vote_count": 2990, "link": "https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript", "_childDocuments_": [{"tags": [], "down_vote_count": 152, "creation_date": 1221854725, "answer_id": 105074, "path": "stack.bower.answer", "score": 1736, "up_vote_count": 1888, "is_accepted": true, "last_activity_date": 1519237815, "last_edit_date": 1519237815, "body_markdown": "There have been a couple attempts at this. The question is: do you want actual GUIDs, or just random numbers that *look* like GUIDs? It&#39;s easy enough to generate random numbers.\r\n\r\n    function guid() {\r\n      function s4() {\r\n        return Math.floor((1 + Math.random()) * 0x10000)\r\n          .toString(16)\r\n          .substring(1);\r\n      }\r\n      return s4() + s4() + &#39;-&#39; + s4() + &#39;-&#39; + s4() + &#39;-&#39; + s4() + &#39;-&#39; + s4() + s4() + s4();\r\n    }\r\n\r\nHowever, note that such values **are not genuine GUIDs**.\r\n\r\n&lt;strike&gt;\r\nThere&#39;s no way to generate real GUIDs in Javascript, because they depend on properties of the local computer that browsers do not expose. You&#39;ll need to use OS-specific services like ActiveX: http://p2p.wrox.com/topicindex/20339.htm\r\n&lt;/strike&gt;\r\n\r\nEdit: not correct - RFC4122 allows random (&quot;version 4&quot;) GUIDs.  See other answers for specifics.\r\n\r\n**Note**: the provided code snippet does not follow RFC4122 which requires that the version (`4`) has to be integrated into the generated output string. **Do not use this answer** if you need compliant GUIDs.\r\n\r\nUse:\r\n\r\n    var uuid = guid();\r\n\r\n# Demo:\r\n\r\n&lt;!-- begin snippet: js hide: true --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function guid() {\r\n      return s4() + s4() + &#39;-&#39; + s4() + &#39;-&#39; + s4() + &#39;-&#39; +\r\n        s4() + &#39;-&#39; + s4() + s4() + s4();\r\n    }\r\n\r\n    function s4() {\r\n      return Math.floor((1 + Math.random()) * 0x10000)\r\n        .toString(16)\r\n        .substring(1);\r\n    }\r\n\r\n    document.getElementById(&#39;jsGenId&#39;).addEventListener(&#39;click&#39;, function() {\r\n      document.getElementById(&#39;jsIdResult&#39;).value = guid();\r\n    })\r\n\r\n&lt;!-- language: lang-css --&gt;\r\n\r\n    input { font-family: monospace; }\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;button id=&quot;jsGenId&quot; type=&quot;button&quot;&gt;Generate GUID&lt;/button&gt;\r\n    &lt;br&gt;\r\n    &lt;input id=&quot;jsIdResult&quot; type=&quot;text&quot; placeholder=&quot;Results will be placed here...&quot; readonly size=&quot;40&quot;/&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1221854763, "answer_id": 105078, "path": "stack.bower.answer", "score": 26, "up_vote_count": 27, "is_accepted": false, "last_activity_date": 1459202130, "last_edit_date": 1459202130, "body_markdown": "From [sagi shkedy&#39;s technical blog][1]:\r\n\r\n    function generateGuid() {\r\n      var result, i, j;\r\n      result = &#39;&#39;;\r\n      for(j=0; j&lt;32; j++) {\r\n        if( j == 8 || j == 12|| j == 16|| j == 20) \r\n          result = result + &#39;-&#39;;\r\n        i = Math.floor(Math.random()*16).toString(16).toUpperCase();\r\n        result = result + i;\r\n      }\r\n      return result;\r\n    }\r\n\r\nThere are other methods that involve using an ActiveX control, but stay away from these!\r\n\r\nEDIT:  I thought it was worth pointing out that no GUID generator can guarantee unique keys (check the [wikipedia article][2]).  There is always a chance of collisions.  A GUID simply offers a large enough universe of keys to reduce the change of collisions to almost nil.\r\n\r\n\r\n  [1]: http://blog.shkedy.com/2007/01/createing-guids-with-client-side.html\r\n  [2]: http://en.wikipedia.org/wiki/Globally_Unique_Identifier"}, {"tags": [], "down_vote_count": 2, "creation_date": 1221855669, "answer_id": 105219, "path": "stack.bower.answer", "score": 25, "up_vote_count": 27, "is_accepted": false, "last_activity_date": 1221856527, "last_edit_date": 1221856527, "body_markdown": "A web service would be useful.  \r\n\r\nQuick Google found: http://www.hoskinson.net/GuidGenerator/\r\n\r\nCan&#39;t vouch for this implementation, but SOMEONE must publish a bonafide GUID generator.\r\n\r\nWith such a web service, you could develop a REST web interface that consumes the GUID web service, and serves it through AJAX to javascript in a browser."}, {"tags": [], "down_vote_count": 0, "creation_date": 1221856237, "answer_id": 105327, "path": "stack.bower.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1297884335, "last_edit_date": 1297884335, "body_markdown": "From [good ol&#39; wikipedia][1] there&#39;s a link to a javascript implementation of UUID.\r\n\r\nIt looks fairly elegant, and could perhaps be improved by salting with a hash of the client&#39;s IP address. This hash could perhaps be inserted into the html document server-side for use by the client-side javascript.\r\n\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Universally_Unique_Identifier\r\n  [2]: http://www.af-design.com/services/javascript/uuid/\r\n  [3]: http://af-design.com/blog/2008/09/05/updated-javascript-uuid-generator-v03/\r\n\r\nUPDATE : The original site has had a shuffle, here is the [updated version][3]\r\n"}, {"tags": [], "down_vote_count": 2, "creation_date": 1242531563, "answer_id": 873856, "path": "stack.bower.answer", "score": 126, "up_vote_count": 128, "is_accepted": false, "last_activity_date": 1319582257, "last_edit_date": 1319582257, "body_markdown": "Here&#39;s some code based on [RFC 4122][1], section 4.4 (Algorithms for Creating a UUID from Truly Random or Pseudo-Random Number).\r\n\r\n    function createUUID() {\r\n        // http://www.ietf.org/rfc/rfc4122.txt\r\n        var s = [];\r\n        var hexDigits = &quot;0123456789abcdef&quot;;\r\n        for (var i = 0; i &lt; 36; i++) {\r\n            s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\r\n        }\r\n        s[14] = &quot;4&quot;;  // bits 12-15 of the time_hi_and_version field to 0010\r\n        s[19] = hexDigits.substr((s[19] &amp; 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01\r\n        s[8] = s[13] = s[18] = s[23] = &quot;-&quot;;\r\n\r\n        var uuid = s.join(&quot;&quot;);\r\n        return uuid;\r\n    }\r\n\r\n\r\n  [1]: http://www.ietf.org/rfc/rfc4122.txt"}, {"tags": [], "down_vote_count": 1, "creation_date": 1251130366, "answer_id": 1323308, "path": "stack.bower.answer", "score": 16, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1251130366, "body_markdown": "This create version 4 UUID (created from pseudo random numbers) :\r\n\r\n    function uuid()\r\n    {\r\n       var chars = &#39;0123456789abcdef&#39;.split(&#39;&#39;);\r\n    \r\n       var uuid = [], rnd = Math.random, r;\r\n       uuid[8] = uuid[13] = uuid[18] = uuid[23] = &#39;-&#39;;\r\n       uuid[14] = &#39;4&#39;; // version 4\r\n    \r\n       for (var i = 0; i &lt; 36; i++)\r\n       {\r\n          if (!uuid[i])\r\n          {\r\n             r = 0 | rnd()*16;\r\n    \r\n             uuid[i] = chars[(i == 19) ? (r &amp; 0x3) | 0x8 : r &amp; 0xf];\r\n          }\r\n       }\r\n    \r\n       return uuid.join(&#39;&#39;);\r\n    }\r\n\r\nHere is a sample of the UUIDs generated :\r\n\r\n    682db637-0f31-4847-9cdf-25ba9613a75c\r\n    97d19478-3ab2-4aa1-b8cc-a1c3540f54aa\r\n    2eed04c9-2692-456d-a0fd-51012f947136"}, {"tags": [], "down_vote_count": 8, "creation_date": 1264167620, "answer_id": 2117523, "path": "stack.bower.answer", "score": 2913, "up_vote_count": 2921, "is_accepted": false, "last_activity_date": 1498704082, "last_edit_date": 1498704082, "body_markdown": "For an [RFC4122](https://www.ietf.org/rfc/rfc4122.txt) version 4 compliant solution, this one-liner(ish) solution is the most compact I could come up with.:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function uuidv4() {\r\n      return &#39;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#39;.replace(/[xy]/g, function(c) {\r\n        var r = Math.random() * 16 | 0, v = c == &#39;x&#39; ? r : (r &amp; 0x3 | 0x8);\r\n        return v.toString(16);\r\n      });\r\n    }\r\n\r\n    console.log(uuidv4())\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n**Update, 2015-06-02**:  Be aware that UUID uniqueness relies heavily on the underlying random number generator (RNG).  The solution above uses `Math.random()` for brevity, however `Math.random()` is *not* guaranteed to be a high-quality RNG.  See Adam Hyland&#39;s [excellent writeup on Math.random()][1] for details.  For a more robust solution, consider something like [the uuid module][2][Disclaimer: I&#39;m the author], which uses higher quality RNG APIs where available.\r\n\r\n**Update, 2015-08-26**: As a side-note, this [gist][3] describes how to determine how many IDs can be generated before reaching a certain probability of collision.  For example, with 3.26x10&lt;sup&gt;15&lt;/sup&gt; version 4 RFC4122 UUIDs you have a 1-in-a-million chance of collision.\r\n\r\n**Update, 2017-06-28**: A [good article from Chrome developers][4] discussing the state of Math.random PRNG quality in Chrome, Firefox, and Safari.  tl;dr - As of late-2015 it&#39;s &quot;pretty good&quot;, but not cryptographic quality.  To address that issue, here&#39;s an updated version of the above solution that uses ES6, the `crypto` API, and [a bit of JS wizardy I can&#39;t take credit for][5]:\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function uuidv4() {\r\n      return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =&gt;\r\n        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] &amp; 15 &gt;&gt; c / 4).toString(16)\r\n      )\r\n    }\r\n\r\n    console.log(uuidv4());\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n\r\n  [1]: http://bocoup.com/weblog/random-numbers/\r\n  [2]: https://github.com/kelektiv/node-uuid\r\n  [3]: https://gist.githubusercontent.com/aristus/f0c311df98d92e367df0\r\n  [4]: https://v8project.blogspot.com/2015/12/theres-mathrandom-and-then-theres.html\r\n  [5]: https://gist.github.com/jed/982883"}, {"tags": [], "down_vote_count": 7, "creation_date": 1265340226, "answer_id": 2204834, "path": "stack.bower.answer", "score": 8, "up_vote_count": 15, "is_accepted": false, "last_activity_date": 1265340226, "body_markdown": "It&#39;s just a simple AJAX call...\r\n\r\nIf anyone is still interested, here&#39;s my solution.\r\n\r\n\r\nOn the server side:\r\n\r\n    [WebMethod()]\r\n    public static string GenerateGuid()\r\n    {\r\n    \treturn Guid.NewGuid().ToString();\r\n    }\r\n\r\nOn the client side:\r\n\r\n    var myNewGuid = null;\r\n    PageMethods.GenerateGuid(\r\n    \tfunction(result, userContext, methodName)\r\n    \t{\r\n    \t\tmyNewGuid = result;\r\n    \t},\r\n    \tfunction()\r\n    \t{\r\n    \t\talert(&quot;WebService call failed.&quot;);\r\n    \t}\r\n    );\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1279150252, "answer_id": 3251361, "path": "stack.bower.answer", "score": 13, "up_vote_count": 13, "is_accepted": false, "last_activity_date": 1279150252, "body_markdown": "      // RFC 4122\r\n      //\r\n      // A UUID is 128 bits long\r\n      //\r\n      // String representation is five fields of 4, 2, 2, 2, and 6 bytes.\r\n      // Fields represented as lowercase, zero-filled, hexadecimal strings, and\r\n      // are separated by dash characters\r\n      //\r\n      // A version 4 UUID is generated by setting all but six bits to randomly\r\n      // chosen values\r\n      var uuid = [\r\n        Math.random().toString(16).slice(2, 10),\r\n        Math.random().toString(16).slice(2, 6),\r\n\r\n        // Set the four most significant bits (bits 12 through 15) of the\r\n        // time_hi_and_version field to the 4-bit version number from Section\r\n        // 4.1.3\r\n        (Math.random() * .0625 /* 0x.1 */ + .25 /* 0x.4 */).toString(16).slice(2, 6),\r\n\r\n        // Set the two most significant bits (bits 6 and 7) of the\r\n        // clock_seq_hi_and_reserved to zero and one, respectively\r\n        (Math.random() * .25 /* 0x.4 */ + .5 /* 0x.8 */).toString(16).slice(2, 6),\r\n\r\n        Math.random().toString(16).slice(2, 14)].join(&#39;-&#39;);\r\n"}, {"tags": [], "down_vote_count": 13, "creation_date": 1296775268, "answer_id": 4892910, "path": "stack.bower.answer", "score": -9, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1296775268, "body_markdown": "I know this topic is old but if you really wanted to create a GUID you could obvioulsy do it without straight javascript.  You could cause a page expiration every load and create a GUID on the server side then populate that into a javascript variable at page run time.  Just an idea."}, {"tags": [], "down_vote_count": 1, "creation_date": 1313375255, "answer_id": 7061193, "path": "stack.bower.answer", "score": 46, "up_vote_count": 47, "is_accepted": false, "last_activity_date": 1319039400, "last_edit_date": 1495535497, "body_markdown": "Here&#39;s a solution dated Oct. 9, 2011 from a comment by user *jed* at https://gist.github.com/982883:\r\n\r\n    UUIDv4 = function b(a){return a?(a^Math.random()*16&gt;&gt;a/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,b)}\r\n\r\nThis accomplishes the same goal as the [current highest-rated answer][1], but in 50+ fewer bytes by exploiting coercion, recursion, and exponential notation. For those curious how it works, here&#39;s the annotated form of an older version of the function:\r\n\r\n    UUIDv4 =\r\n\r\n\tfunction b(\r\n\t  a // placeholder\r\n\t){\r\n\t  return a // if the placeholder was passed, return\r\n\t\t? ( // a random number from 0 to 15\r\n\t\t  a ^ // unless b is 8,\r\n\t\t  Math.random() // in which case\r\n\t\t  * 16 // a random number from\r\n\t\t  &gt;&gt; a/4 // 8 to 11\r\n\t\t  ).toString(16) // in hexadecimal\r\n\t\t: ( // or otherwise a concatenated string:\r\n\t\t  [1e7] + // 10000000 +\r\n\t\t  -1e3 + // -1000 +\r\n\t\t  -4e3 + // -4000 +\r\n\t\t  -8e3 + // -80000000 +\r\n\t\t  -1e11 // -100000000000,\r\n\t\t  ).replace( // replacing\r\n\t\t\t/[018]/g, // zeroes, ones, and eights with\r\n\t\t\tb // random hex digits\r\n\t\t  )\r\n\t}\r\n\r\n  [1]: https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1314544644, "answer_id": 7221797, "path": "stack.bower.answer", "score": 24, "up_vote_count": 24, "is_accepted": false, "last_activity_date": 1442010723, "last_edit_date": 1442010723, "body_markdown": "    var uuid = function() {\r\n    \tvar buf = new Uint32Array(4);\r\n    \twindow.crypto.getRandomValues(buf);\r\n    \tvar idx = -1;\r\n    \treturn &#39;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#39;.replace(/[xy]/g, function(c) {\r\n    \t\tidx++;\r\n    \t\tvar r = (buf[idx&gt;&gt;3] &gt;&gt; ((idx%8)*4))&amp;15;\r\n    \t\tvar v = c == &#39;x&#39; ? r : (r&amp;0x3|0x8);\r\n    \t\treturn v.toString(16);\r\n    \t});\r\n    };\r\n\r\nEDIT:\r\n\r\nRevisited my project that was using this function and disliked the verbosity. - But needed proper randomness.\r\n\r\nA version based on Briguy37&#39;s answer and some bitwise operators to extract nibble sized windows from the buffer.\r\n\r\nShould adhere to the RFC Type 4 (random) schema, since I had Problems last time parsing non-compliant uuids with Java&#39;s UUID."}, {"tags": [], "down_vote_count": 0, "creation_date": 1319560050, "answer_id": 7892504, "path": "stack.bower.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1381294475, "last_edit_date": 1381294475, "body_markdown": "There is a jQuery plugin that handles Guid&#39;s nicely @ http://plugins.jquery.com/project/GUID_Helper\r\n\r\n    jQuery.Guid.Value()\r\n\r\nReturns value of internal Guid. If no guid has been specified, returns a new one (value is then stored internally).\r\n\r\n---\r\n    jQuery.Guid.New()\r\n\r\nReturns a new Guid and sets it&#39;s value internally.\r\n\r\n---\r\n    jQuery.Guid.Empty()\r\n\r\nReturns an empty Guid 00000000-0000-0000-0000-000000000000.\r\n\r\n---\r\n    jQuery.Guid.IsEmpty()\r\n\r\nReturns boolean. True if empty/undefined/blank/null.\r\n\r\n---\r\n    jQuery.Guid.IsValid()\r\n\r\nReturns boolean. True valid guid, false if not.\r\n\r\n---\r\n    jQuery.Guid.Set()\r\n\r\nRetrns Guid. Sets Guid to user specified Guid, if invalid, returns an empty guid."}, {"tags": [], "down_vote_count": 0, "creation_date": 1323684804, "answer_id": 8472700, "path": "stack.bower.answer", "score": 54, "up_vote_count": 54, "is_accepted": false, "last_activity_date": 1343204501, "last_edit_date": 1495540056, "body_markdown": "Here is a combination of the [top voted answer][1], with a workaround for [Chrome&#39;s collisions][2]:\r\n\r\n\r\n    generateGUID = (typeof(window.crypto) != &#39;undefined&#39; &amp;&amp; \r\n                    typeof(window.crypto.getRandomValues) != &#39;undefined&#39;) ?\r\n        function() {\r\n            // If we have a cryptographically secure PRNG, use that\r\n            // https://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript\r\n            var buf = new Uint16Array(8);\r\n            window.crypto.getRandomValues(buf);\r\n            var S4 = function(num) {\r\n                var ret = num.toString(16);\r\n                while(ret.length &lt; 4){\r\n                    ret = &quot;0&quot;+ret;\r\n                }\r\n                return ret;\r\n            };\r\n            return (S4(buf[0])+S4(buf[1])+&quot;-&quot;+S4(buf[2])+&quot;-&quot;+S4(buf[3])+&quot;-&quot;+S4(buf[4])+&quot;-&quot;+S4(buf[5])+S4(buf[6])+S4(buf[7]));\r\n        }\r\n    \r\n        :\r\n    \r\n        function() {\r\n            // Otherwise, just use Math.random\r\n            // https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\r\n            return &#39;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#39;.replace(/[xy]/g, function(c) {\r\n                var r = Math.random()*16|0, v = c == &#39;x&#39; ? r : (r&amp;0x3|0x8);\r\n                return v.toString(16);\r\n            });\r\n        };\r\n\r\n[On jsbin][3] if you want to test it.\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/2117523/11236\r\n  [2]: https://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript\r\n  [3]: http://jsbin.com/uqives/3"}, {"tags": [], "down_vote_count": 1, "creation_date": 1326224334, "answer_id": 8809472, "path": "stack.bower.answer", "score": 621, "up_vote_count": 622, "is_accepted": false, "last_activity_date": 1519887635, "last_edit_date": 1519887635, "body_markdown": "I really like how clean [Broofa&#39;s answer][1] is, but it&#39;s unfortunate that poor implementations of `Math.random` leave the chance for collision.  \r\n\r\nHere&#39;s a similar [RFC4122][2] version 4 compliant solution that solves that issue by offsetting the first 13 hex numbers by a hex portion of the timestamp.  That way, even if `Math.random` is on the same seed, both clients would have to generate the UUID at the exact same millisecond (or 10,000+ years later) to get the same UUID:   \r\n\r\n    function generateUUID() { // Public Domain/MIT\r\n        var d = new Date().getTime();\r\n        if (typeof performance !== &#39;undefined&#39; &amp;&amp; typeof performance.now === &#39;function&#39;){\r\n            d += performance.now(); //use high-precision timer if available\r\n        }\r\n        return &#39;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#39;.replace(/[xy]/g, function (c) {\r\n            var r = (d + Math.random() * 16) % 16 | 0;\r\n            d = Math.floor(d / 16);\r\n            return (c === &#39;x&#39; ? r : (r &amp; 0x3 | 0x8)).toString(16);\r\n        });\r\n    }\r\n\r\n&lt;br/&gt;\r\n[Here&#39;s a fiddle to test.][3]\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/2117523/508537\r\n  [2]: http://www.ietf.org/rfc/rfc4122.txt\r\n  [3]: https://jsfiddle.net/xg7tek9j/7/"}, {"tags": [], "down_vote_count": 1, "creation_date": 1326491975, "answer_id": 8857806, "path": "stack.bower.answer", "score": 10, "up_vote_count": 11, "is_accepted": false, "last_activity_date": 1326491975, "body_markdown": "Adjusted my own UUID/GUID generator with some extras &lt;a href=&quot;http://frugalcoder.us/post/2012/01/13/javascript-guid-uuid-generator.aspx&quot;&gt;here&lt;/a&gt;.\r\n\r\nI&#39;m using &lt;a href=&quot;http://baagoe.com/en/RandomMusings/javascript/&quot;&gt;the following Kybos&lt;/a&gt; random number generator to be a bit more cryptographically sound.\r\n\r\nBelow is my script with the Mash and Kybos methods from baagoe.com excluded.\r\n\r\n&lt;pre&gt;&lt;code&gt;//UUID/Guid Generator\r\n// use: UUID.create() or UUID.createSequential()\r\n// convenience:  UUID.empty, UUID.tryParse(string)\r\n(function(w){\r\n  // From http://baagoe.com/en/RandomMusings/javascript/\r\n  // Johannes Baag&#195;&#184;e &amp;lt;baagoe@baagoe.com&amp;gt;, 2010\r\n  //function Mash() {...};\r\n\r\n  // From http://baagoe.com/en/RandomMusings/javascript/\r\n  //function Kybos() {...};\r\n\r\n  var rnd = Kybos();\r\n\r\n  //UUID/GUID Implementation from http://frugalcoder.us/post/2012/01/13/javascript-guid-uuid-generator.aspx\r\n  var UUID = {\r\n    &quot;empty&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;\r\n    ,&quot;parse&quot;: function(input) {\r\n      var ret = input.toString().trim().toLowerCase().replace(/^[\\s\\r\\n]+|[\\{\\}]|[\\s\\r\\n]+$/g, &quot;&quot;);\r\n      if ((/[a-f0-9]{8}\\-[a-f0-9]{4}\\-[a-f0-9]{4}\\-[a-f0-9]{4}\\-[a-f0-9]{12}/).test(ret))\r\n        return ret;\r\n      else\r\n        throw new Error(&quot;Unable to parse UUID&quot;);\r\n    }\r\n    ,&quot;createSequential&quot;: function() {\r\n      var ret = new Date().valueOf().toString(16).replace(&quot;-&quot;,&quot;&quot;)\r\n      for (;ret.length &amp;lt; 12; ret = &quot;0&quot; + ret);\r\n      ret = ret.substr(ret.length-12,12); //only least significant part\r\n      for (;ret.length &amp;lt; 32;ret += Math.floor(rnd() * 0xffffffff).toString(16));\r\n      return [ret.substr(0,8), ret.substr(8,4), &quot;4&quot; + ret.substr(12,3), &quot;89AB&quot;[Math.floor(Math.random()*4)] + ret.substr(16,3),  ret.substr(20,12)].join(&quot;-&quot;);\r\n    }\r\n    ,&quot;create&quot;: function() {\r\n      var ret = &quot;&quot;;\r\n      for (;ret.length &amp;lt; 32;ret += Math.floor(rnd() * 0xffffffff).toString(16));\r\n      return [ret.substr(0,8), ret.substr(8,4), &quot;4&quot; + ret.substr(12,3), &quot;89AB&quot;[Math.floor(Math.random()*4)] + ret.substr(16,3),  ret.substr(20,12)].join(&quot;-&quot;);\r\n    }\r\n    ,&quot;random&quot;: function() {\r\n      return rnd();\r\n    }\r\n    ,&quot;tryParse&quot;: function(input) {\r\n      try {\r\n        return UUID.parse(input);\r\n      } catch(ex) {\r\n        return UUID.empty;\r\n      }\r\n    }\r\n  };\r\n  UUID[&quot;new&quot;] = UUID.create;\r\n\r\n  w.UUID = w.Guid = UUID;\r\n}(window || this));&lt;/code&gt;&lt;/pre&gt;"}, {"tags": [], "down_vote_count": 1, "creation_date": 1337798555, "answer_id": 10725965, "path": "stack.bower.answer", "score": 9, "up_vote_count": 10, "is_accepted": false, "last_activity_date": 1337798555, "body_markdown": "The better way:\r\n\r\n    function(\r\n      a,b                // placeholders\r\n    ){\r\n      for(               // loop :)\r\n          b=a=&#39;&#39;;        // b - result , a - numeric variable\r\n          a++&lt;36;        // \r\n          b+=a*51&amp;52  // if &quot;a&quot; is not 9 or 14 or 19 or 24\r\n                      ?  //  return a random number or 4\r\n             (\r\n               a^15      // if &quot;a&quot; is not 15\r\n                  ?      // genetate a random number from 0 to 15\r\n               8^Math.random()*\r\n               (a^20?16:4)  // unless &quot;a&quot; is 20, in which case a random number from 8 to 11\r\n                  :\r\n               4            //  otherwise 4\r\n               ).toString(16)\r\n                      :\r\n             &#39;-&#39;            //  in other cases (if &quot;a&quot; is 9,14,19,24) insert &quot;-&quot;\r\n          );\r\n      return b\r\n     }\r\n\r\nMinimized:\r\n\r\n    function(a,b){for(b=a=&#39;&#39;;a++&lt;36;b+=a*51&amp;52?(a^15?8^Math.random()*(a^20?16:4):4).toString(16):&#39;-&#39;);return b}"}, {"tags": [], "down_vote_count": 1, "creation_date": 1341262832, "answer_id": 11301105, "path": "stack.bower.answer", "score": 16, "up_vote_count": 17, "is_accepted": false, "last_activity_date": 1341262832, "body_markdown": "JavaScript project on GitHub - https://github.com/LiosK/UUID.js\r\n\r\n&gt; **UUID.js The RFC-compliant UUID generator for JavaScript.**\r\n&gt; \r\n&gt; See RFC 4122 http://www.ietf.org/rfc/rfc4122.txt.\r\n&gt; \r\n&gt; **Features Generates RFC 4122 compliant UUIDs.**\r\n&gt; \r\n&gt; Version 4 UUIDs (UUIDs from random numbers) and version 1 UUIDs\r\n&gt; (time-based UUIDs) are available.\r\n&gt; \r\n&gt; UUID object allows a variety of access to the UUID including access to\r\n&gt; the UUID fields.\r\n&gt; \r\n&gt; Low timestamp resolution of JavaScript is compensated by random\r\n&gt; numbers."}, {"tags": [], "down_vote_count": 1, "creation_date": 1353002697, "answer_id": 13403498, "path": "stack.bower.answer", "score": 45, "up_vote_count": 46, "is_accepted": false, "last_activity_date": 1358805177, "last_edit_date": 1358805177, "body_markdown": "Here is a totally non-compliant but very performant implementation to generate an ASCII-safe GUID-like unique identifier.\r\n\r\n    function generateQuickGuid() {\r\n        return Math.random().toString(36).substring(2, 15) +\r\n            Math.random().toString(36).substring(2, 15);\r\n    }\r\n\r\nGenerates 26 [a-z0-9] characters, yielding a UID that is both shorter and more unique than RFC compliant GUIDs. Dashes can be trivially added if human-readability matters.\r\n\r\nHere are usage examples and timings for this function and several of this question&#39;s other answers. The timing was performed under Chrome m25, 10 million iterations each.\r\n\r\n    &gt;&gt;&gt; generateQuickGuid()\r\n    &quot;nvcjf1hs7tf8yyk4lmlijqkuo9&quot;\r\n    &quot;yq6gipxqta4kui8z05tgh9qeel&quot;\r\n    &quot;36dh5sec7zdj90sk2rx7pjswi2&quot;\r\n    runtime: 32.5s\r\n\r\n    &gt;&gt;&gt; GUID() // John Millikin\r\n    &quot;7a342ca2-e79f-528e-6302-8f901b0b6888&quot;\r\n    runtime: 57.8s\r\n\r\n    &gt;&gt;&gt; regexGuid() // broofa\r\n    &quot;396e0c46-09e4-4b19-97db-bd423774a4b3&quot;\r\n    runtime: 91.2s\r\n\r\n    &gt;&gt;&gt; createUUID() // Kevin Hakanson\r\n    &quot;403aa1ab-9f70-44ec-bc08-5d5ac56bd8a5&quot;\r\n    runtime: 65.9s\r\n\r\n    &gt;&gt;&gt; UUIDv4() // Jed Schmidt\r\n    &quot;f4d7d31f-fa83-431a-b30c-3e6cc37cc6ee&quot;\r\n    runtime: 282.4s\r\n    \r\n    &gt;&gt;&gt; Math.uuid() // broofa\r\n    &quot;5BD52F55-E68F-40FC-93C2-90EE069CE545&quot;\r\n    runtime: 225.8s\r\n\r\n    &gt;&gt;&gt; Math.uuidFast() // broofa\r\n    &quot;6CB97A68-23A2-473E-B75B-11263781BBE6&quot;\r\n    runtime: 92.0s\r\n\r\n    &gt;&gt;&gt; Math.uuidCompact() // broofa\r\n    &quot;3d7b7a06-0a67-4b67-825c-e5c43ff8c1e8&quot;\r\n    runtime: 229.0s\r\n\r\n    &gt;&gt;&gt; bitwiseGUID() // jablko\r\n    &quot;baeaa2f-7587-4ff1-af23-eeab3e92&quot;\r\n    runtime: 79.6s\r\n\r\n    &gt;&gt;&gt;&gt; betterWayGUID() // Andrea Turri\r\n    &quot;383585b0-9753-498d-99c3-416582e9662c&quot;\r\n    runtime: 60.0s\r\n\r\n    &gt;&gt;&gt;&gt; UUID() // John Fowler\r\n    &quot;855f997b-4369-4cdb-b7c9-7142ceaf39e8&quot;\r\n    runtime: 62.2s\r\n\r\nHere is the timing code.\r\n\r\n    var r;\r\n    console.time(&#39;t&#39;); \r\n    for (var i = 0; i &lt; 10000000; i++) { \r\n        r = FuncToTest(); \r\n    };\r\n    console.timeEnd(&#39;t&#39;);"}, {"tags": [], "down_vote_count": 0, "creation_date": 1353094909, "answer_id": 13423320, "path": "stack.bower.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1353094909, "body_markdown": "For those wanting an rfc4122 version 4 compliant solution with speed considerations (few calls to Math.random()):\r\n\r\n    function UUID() {\r\n    \tvar nbr, randStr = &quot;&quot;;\r\n    \tdo {\r\n    \t\trandStr += (nbr = Math.random()).toString(16).substr(2);\r\n    \t} while (randStr.length &lt; 30);\r\n    \treturn [\r\n    \t\trandStr.substr(0, 8), &quot;-&quot;,\r\n    \t\trandStr.substr(8, 4), &quot;-4&quot;,\r\n    \t\trandStr.substr(12, 3), &quot;-&quot;,\r\n    \t\t((nbr*4|0)+8).toString(16), // [89ab]\r\n    \t\trandStr.substr(15, 3), &quot;-&quot;,\r\n    \t\trandStr.substr(18, 12)\r\n    \t\t].join(&quot;&quot;);\r\n    }\r\n\r\nThe above function should have a decent balance between speed and randomness.\r\n\r\n\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1359818826, "answer_id": 14663381, "path": "stack.bower.answer", "score": 25, "up_vote_count": 26, "is_accepted": false, "last_activity_date": 1498742946, "last_edit_date": 1498742946, "body_markdown": "Simple JavaScript module as a combination of best answers in this thread.\r\n\r\n\r\n\r\n&lt;!-- begin snippet: js hide: false console: true babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    var crypto = window.crypto || window.msCrypto || null; // IE11 fix\r\n\r\n    var Guid = Guid || (function() {\r\n\r\n      var EMPTY = &#39;00000000-0000-0000-0000-000000000000&#39;;\r\n\r\n      var _padLeft = function(paddingString, width, replacementChar) {\r\n        return paddingString.length &gt;= width ? paddingString : _padLeft(replacementChar + paddingString, width, replacementChar || &#39; &#39;);\r\n      };\r\n\r\n      var _s4 = function(number) {\r\n        var hexadecimalResult = number.toString(16);\r\n        return _padLeft(hexadecimalResult, 4, &#39;0&#39;);\r\n      };\r\n\r\n      var _cryptoGuid = function() {\r\n        var buffer = new window.Uint16Array(8);\r\n        window.crypto.getRandomValues(buffer);\r\n        return [_s4(buffer[0]) + _s4(buffer[1]), _s4(buffer[2]), _s4(buffer[3]), _s4(buffer[4]), _s4(buffer[5]) + _s4(buffer[6]) + _s4(buffer[7])].join(&#39;-&#39;);\r\n      };\r\n\r\n      var _guid = function() {\r\n        var currentDateMilliseconds = new Date().getTime();\r\n        return &#39;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#39;.replace(/[xy]/g, function(currentChar) {\r\n          var randomChar = (currentDateMilliseconds + Math.random() * 16) % 16 | 0;\r\n          currentDateMilliseconds = Math.floor(currentDateMilliseconds / 16);\r\n          return (currentChar === &#39;x&#39; ? randomChar : (randomChar &amp; 0x7 | 0x8)).toString(16);\r\n        });\r\n      };\r\n\r\n      var create = function() {\r\n        var hasCrypto = crypto != &#39;undefined&#39; &amp;&amp; crypto !== null,\r\n          hasRandomValues = typeof(window.crypto.getRandomValues) != &#39;undefined&#39;;\r\n        return (hasCrypto &amp;&amp; hasRandomValues) ? _cryptoGuid() : _guid();\r\n      };\r\n\r\n      return {\r\n        newGuid: create,\r\n        empty: EMPTY\r\n      };\r\n    })();\r\n\r\n    // DEMO: Create and show GUID\r\n    console.log(Guid.newGuid());\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\nUsage: \r\n&gt;&gt; **Guid.newGuid()**\r\n\r\n&gt;&gt; &quot;c6c2d12f-d76b-5739-e551-07e6de5b0807&quot;\r\n\r\n&gt;&gt; **Guid.empty**\r\n\r\n&gt;&gt; &quot;00000000-0000-0000-0000-000000000000&quot;\r\n"}, {"tags": [], "down_vote_count": 6, "creation_date": 1369230643, "answer_id": 16693578, "path": "stack.bower.answer", "score": 75, "up_vote_count": 81, "is_accepted": false, "last_activity_date": 1426505727, "last_edit_date": 1426505727, "body_markdown": "Fastest GUID like string generator method in the format `XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX`. This does not generated standard-compliant GUID.\r\n\r\nTen million executions of this implementation takes just 32.5 seconds, which is the fastest i&#39;ve ever seen in a browser (the only solution without loops/iterations).\r\n\r\nThe function is as simple as:\r\n\r\n    /**\r\n     * Generates a GUID string.\r\n     * @returns {String} The generated GUID.\r\n     * @example af8a8416-6e18-a307-bd9c-f2c947bbb3aa\r\n     * @author Slavik Meltser (slavik@meltser.info).\r\n     * @link http://slavik.meltser.info/?p=142\r\n     */\r\n    function guid() {\r\n        function _p8(s) {\r\n            var p = (Math.random().toString(16)+&quot;000000000&quot;).substr(2,8);\r\n            return s ? &quot;-&quot; + p.substr(0,4) + &quot;-&quot; + p.substr(4,4) : p ;\r\n        }\r\n        return _p8() + _p8(true) + _p8(true) + _p8();\r\n    }\r\n\r\nTo test the performance, you can run this code:\r\n    \r\n    console.time(&#39;t&#39;); \r\n    for (var i = 0; i &lt; 10000000; i++) { \r\n        guid(); \r\n    };\r\n    console.timeEnd(&#39;t&#39;);\r\n\r\nI&#39;m sure most of you will understand what I did there, but maybe there is at least one person that will need an explanation:\r\n\r\n**The algorithm:**\r\n\r\n - The `Math.random()` function returns a decimal number between 0 and 1 with 16 digits after the decimal fraction point (for\r\n   example `0.4363923368509859`).\r\n - Then we take this number and convert\r\n   it to a string with base 16 (from the example above we&#39;ll get\r\n   `0.6fb7687f`).  \r\n   `Math.random().toString(16)`.\r\n - Then we cut off the `0.` prefix (`0.6fb7687f` =&gt;\r\n   `6fb7687f`) and get a string with eight hexadecimal\r\n   characters long.  \r\n   `(Math.random().toString(16).substr(2,8)`.\r\n - Sometimes the `Math.random()` function will return\r\n   shorter number (for example `0.4363`), due to zeros at the end (from the example above, actually the number is `0.4363000000000000`). That&#39;s why i&#39;m appending to this string `&quot;000000000&quot;` (a string with nine zeros) and then cutting it off with `substr()` function to make it nine characters exactly (filling zeros to the right).\r\n - The reason of adding exactly nine zeros is because of the worse case scenario, which is when the `Math.random()` function will return exactly 0 or 1 (probability of 1/10^16 for each one of them). That&#39;s why we needed to add nine zeros to it (`&quot;0&quot;+&quot;000000000&quot;` or `&quot;1&quot;+&quot;000000000&quot;`), and then cutting it off from the second index (3rd character) with a length of eight characters. For the rest of the cases, the addition of zeros will not harm the result because it is cutting it off anyway.  \r\n   `Math.random().toString(16)+&quot;000000000&quot;).substr(2,8)`.\r\n\r\n**The assembly:**\r\n\r\n - The GUID is in the following format `XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX`.\r\n - I divided the GUID into 4 pieces, each piece divided into 2 types (or formats): `XXXXXXXX` and `-XXXX-XXXX`.\r\n - Now I&#39;m building the GUID using these 2 types to assemble the GUID with call 4 pieces, as follows: `XXXXXXXX` `-XXXX-XXXX` `-XXXX-XXXX` `XXXXXXXX`.\r\n - To differ between these two types, I added a flag parameter to a pair creator function `_p8(s)`, the `s` parameter tells the function whether to add dashes or not.\r\n - Eventually we build the GUID with the following chaining: `_p8() + _p8(true) + _p8(true) + _p8()`, and return it.\r\n\r\n[Link to this post on my blog](http://slavik.meltser.info/the-efficient-way-to-create-guid-uuid-in-javascript/)\r\n\r\n**Enjoy! :-)**"}, {"tags": [], "down_vote_count": 0, "creation_date": 1371052803, "answer_id": 17070116, "path": "stack.bower.answer", "score": 9, "up_vote_count": 9, "is_accepted": false, "last_activity_date": 1371052803, "body_markdown": "I know, it is an old question. Just for completeness, if your environment is SharePoint, there is a utility function called `SP.Guid.newGuid` ([msdn link](http://msdn.microsoft.com/en-us/library/ee659495(v=office.14).aspx)) which creates a new guid. This function is inside the sp.init.js file. If you rewrite this function (to remove some other dependencies from other private functions), it looks like this:\r\n\r\n    var newGuid = function () {\r\n        var result = &#39;&#39;;\r\n        var hexcodes = &quot;0123456789abcdef&quot;.split(&quot;&quot;);\r\n    \r\n        for (var index = 0; index &lt; 32; index++) {\r\n            var value = Math.floor(Math.random() * 16);\r\n    \r\n            switch (index) {\r\n            case 8:\r\n                result += &#39;-&#39;;\r\n                break;\r\n            case 12:\r\n                value = 4;\r\n                result += &#39;-&#39;;\r\n                break;\r\n            case 16:\r\n                value = value &amp; 3 | 8;\r\n                result += &#39;-&#39;;\r\n                break;\r\n            case 20:\r\n                result += &#39;-&#39;;\r\n                break;\r\n            }\r\n            result += hexcodes[value];\r\n        }\r\n        return result;\r\n    };\r\n\r\n"}, {"tags": [], "down_vote_count": 1, "creation_date": 1385940396, "answer_id": 20318571, "path": "stack.bower.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1385940396, "body_markdown": "It is important that to use well tested code that is maintained by more than 1 contributors instead of whipping your own stuff for this. This is one of the places where you probably want to prefer most stable code than shortest possible clever version that works in X browser but doesn&#39;t take in to account idiosyncrasies of Y which would often lead to very hard to investigate bugs than manifests only randomly for some users. Personally I use uuid-js at https://github.com/aurigadl/uuid-js which bower enabled so I can take updates easily."}, {"tags": [], "down_vote_count": 1, "creation_date": 1391442856, "answer_id": 21531802, "path": "stack.bower.answer", "score": 6, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1391442856, "body_markdown": "Weird that no one has mentioned this yet but for completeness, there&#39;s a plethora of [guid generators on npm](https://npmjs.org/search?q=guid) I&#39;m willing to bet most of them work in browser too."}, {"tags": [], "down_vote_count": 1, "creation_date": 1393120016, "answer_id": 21963136, "path": "stack.bower.answer", "score": 279, "up_vote_count": 280, "is_accepted": false, "last_activity_date": 1393370169, "last_edit_date": 1393370169, "body_markdown": "broofa&#39;s answer is pretty slick, indeed - impressively clever, really...  rfc4122 compliant, somewhat readable, and compact.  Awesome!\r\n\r\nBut if you&#39;re looking at that regular expression, those many `replace()` callbacks, `toString()`&#39;s and `Math.random()` function calls (where he&#39;s only using 4 bits of the result and wasting the rest), you may start to wonder about performance.  Indeed, joelpt even decided to toss out rfc for generic GUID speed with `generateQuickGUID`.\r\n\r\n**But, can we get speed *and* rfc compliance?  I say, YES!**  Can we maintain readability?  Well...  Not really, but it&#39;s easy if you follow along.\r\n\r\nBut first, my results, compared to broofa, `guid` (the accepted answer), and the non-rfc-compliant `generateQuickGuid`:\r\n\r\n                      Desktop   Android\r\n               broofa: 1617ms   12869ms\r\n                   e1:  636ms    5778ms\r\n                   e2:  606ms    4754ms\r\n                   e3:  364ms    3003ms\r\n                   e4:  329ms    2015ms\r\n                   e5:  147ms    1156ms\r\n                   e6:  146ms    1035ms\r\n                   e7:  105ms     726ms\r\n                 guid:  962ms   10762ms\r\n    generateQuickGuid:  292ms    2961ms\r\n      - Note that results will vary by browser/cpu.\r\n\r\nSo by my 6th iteration of optimizations, I beat the most popular answer by over **12X**, the accepted answer by over **9X**, and the fast-non-compliant answer by **2-3X**.  And I&#39;m still rfc4122 compliant.\r\n\r\nInterested in how?  I&#39;ve put the full source on http://jsfiddle.net/jcward/7hyaC/3/ and on http://jsperf.com/uuid-generator-opt/4\r\n\r\nFor an explanation, let&#39;s start with broofa&#39;s code:\r\n\r\n    &#39;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#39;.replace(/[xy]/g, function(c) {\r\n      var r = Math.random()*16|0, v = c == &#39;x&#39; ? r : (r&amp;0x3|0x8);\r\n      return v.toString(16);\r\n    });\r\n\r\nSo it replaces `x` with any random hex digit, `y` with random data (except forcing the top 2 bits to `10` per the rfc spec), and the regex doesn&#39;t match the `-` or `4` characters, so he doesn&#39;t have to deal with them.  Very, very slick.\r\n\r\nThe first thing to know is that function calls are expensive, as are regular expressions (though he only uses 1, but it has 32 callbacks, one for each match, and in each of the 32 callbacks it calls Math.random() and v.toString(16)).\r\n\r\nThe first step toward performance is to eliminate the RegEx and its callback functions, and use a simple loop instead.  This means we have to deal with the `-` and `4` characters whereas broofa did not.  Also note that we can use String Array indexing to keep his slick String template architecture:\r\n\r\n    function e1() {\r\n      var u=&#39;&#39;,i=0;\r\n      while(i++&lt;36) {\r\n        var c=&#39;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#39;[i-1],r=Math.random()*16|0,v=c==&#39;x&#39;?r:(r&amp;0x3|0x8);\r\n        u+=(c==&#39;-&#39;||c==&#39;4&#39;)?c:v.toString(16)\r\n      }\r\n      return u;\r\n    }\r\n\r\nBasically the same inner logic, except we check for `-` or `4`, and the loop structure (instead of replace callbacks) gets us an almost 3X improvement!\r\n\r\nThe next step is a small one on desktop, but makes a decent difference on mobile.  Lets make fewer Math.random() calls and utilize all those random bits instead of throwing 87% of them away with a random buffer that gets shifted out each iteration.  Let&#39;s also move that template definition out of the loop, just in case it helps:\r\n\r\n    function e2() {\r\n      var u=&#39;&#39;,m=&#39;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#39;,i=0,rb=Math.random()*0xffffffff|0;\r\n      while(i++&lt;36) {\r\n        var c=m[i-1],r=rb&amp;0xf,v=c==&#39;x&#39;?r:(r&amp;0x3|0x8);\r\n        u+=(c==&#39;-&#39;||c==&#39;4&#39;)?c:v.toString(16);rb=i%8==0?Math.random()*0xffffffff|0:rb&gt;&gt;4\r\n      }\r\n      return u\r\n    }\r\n\r\nThis saves us 10-30% depending on platform.  Not bad.  But the next big step gets rid of the toString function calls altogether with an optimization classic - the look-up table.  A simple 16-element lookup table will perform the job of toString(16) in much less time:\r\n\r\n    function e3() {\r\n      var h=&#39;0123456789abcdef&#39;;\r\n      var k=&#39;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#39;;\r\n      /* same as e4() below */\r\n    }\r\n    function e4() {\r\n      var h=[&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;];\r\n      var k=[&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;-&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;-&#39;,&#39;4&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;-&#39;,&#39;y&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;-&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;];\r\n      var u=&#39;&#39;,i=0,rb=Math.random()*0xffffffff|0;\r\n      while(i++&lt;36) {\r\n        var c=k[i-1],r=rb&amp;0xf,v=c==&#39;x&#39;?r:(r&amp;0x3|0x8);\r\n        u+=(c==&#39;-&#39;||c==&#39;4&#39;)?c:h[v];rb=i%8==0?Math.random()*0xffffffff|0:rb&gt;&gt;4\r\n      }\r\n      return u\r\n    }\r\n\r\nThe next optimization is another classic.  Since we&#39;re only handling 4-bits of output in each loop iteration, let&#39;s cut the number of loops in half and process 8-bits each iteration.  This is tricky since we still have to handle the rfc compliant bit positions, but it&#39;s not too hard.  We then have to make a larger lookup table (16x16, or 256) to store 0x00 - 0xff, and we build it only once, outside the e5() function.\r\n\r\n    var lut = []; for (var i=0; i&lt;256; i++) { lut[i] = (i&lt;16?&#39;0&#39;:&#39;&#39;)+(i).toString(16); }\r\n    function e5() {\r\n      var k=[&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;-&#39;,&#39;x&#39;,&#39;x&#39;,&#39;-&#39;,&#39;4&#39;,&#39;x&#39;,&#39;-&#39;,&#39;y&#39;,&#39;x&#39;,&#39;-&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;,&#39;x&#39;];\r\n      var u=&#39;&#39;,i=0,rb=Math.random()*0xffffffff|0;\r\n      while(i++&lt;20) {\r\n        var c=k[i-1],r=rb&amp;0xff,v=c==&#39;x&#39;?r:(c==&#39;y&#39;?(r&amp;0x3f|0x80):(r&amp;0xf|0x40));\r\n        u+=(c==&#39;-&#39;)?c:lut[v];rb=i%4==0?Math.random()*0xffffffff|0:rb&gt;&gt;8\r\n      }\r\n      return u\r\n    }\r\n\r\nI tried an e6() that processes 16-bits at a time, still using the 256-element LUT, and it showed the diminishing returns of optimization.  Though it had fewer iterations, the inner logic was complicated by the increased processing, and it performed the same on desktop, and only ~10% faster on mobile.\r\n\r\nThe final optimization technique to apply - unroll the loop.  Since we&#39;re looping a fixed number of times, we can technically write this all out by hand.  I tried this once with a single random variable r that I kept re-assigning, and performance tanked.  But with four variables assigned random data up front, then using the lookup table, and applying the proper rfc bits, this version smokes them all:\r\n\r\n    var lut = []; for (var i=0; i&lt;256; i++) { lut[i] = (i&lt;16?&#39;0&#39;:&#39;&#39;)+(i).toString(16); }\r\n    function e7()\r\n    {\r\n      var d0 = Math.random()*0xffffffff|0;\r\n      var d1 = Math.random()*0xffffffff|0;\r\n      var d2 = Math.random()*0xffffffff|0;\r\n      var d3 = Math.random()*0xffffffff|0;\r\n      return lut[d0&amp;0xff]+lut[d0&gt;&gt;8&amp;0xff]+lut[d0&gt;&gt;16&amp;0xff]+lut[d0&gt;&gt;24&amp;0xff]+&#39;-&#39;+\r\n        lut[d1&amp;0xff]+lut[d1&gt;&gt;8&amp;0xff]+&#39;-&#39;+lut[d1&gt;&gt;16&amp;0x0f|0x40]+lut[d1&gt;&gt;24&amp;0xff]+&#39;-&#39;+\r\n        lut[d2&amp;0x3f|0x80]+lut[d2&gt;&gt;8&amp;0xff]+&#39;-&#39;+lut[d2&gt;&gt;16&amp;0xff]+lut[d2&gt;&gt;24&amp;0xff]+\r\n        lut[d3&amp;0xff]+lut[d3&gt;&gt;8&amp;0xff]+lut[d3&gt;&gt;16&amp;0xff]+lut[d3&gt;&gt;24&amp;0xff];\r\n    }\r\n\r\nModualized:  http://jcward.com/UUID.js - `UUID.generate()`\r\n\r\nThe funny thing is, generating 16 bytes of random data is the easy part.  The whole trick is expressing it in String format with RFC compliance, and it&#39;s most tightly accomplished with 16 bytes of random data, an unrolled loop and lookup table.\r\n\r\nI hope my logic is correct -- it&#39;s very easy to make a mistake in this kind of tedious bit-work.  But the outputs look good to me.  I hope you enjoyed this mad ride through code optimization!\r\n\r\n**Be advised:** my primary goal was to show and teach potential optimization strategies.  Other answers cover important topics such as collisions and truly random numbers, which are important for generating good UUIDs."}, {"tags": [], "down_vote_count": 1, "creation_date": 1394105694, "answer_id": 22223296, "path": "stack.bower.answer", "score": 7, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1394105694, "body_markdown": "This one is based on date, and add a random suffix to &quot;ensure&quot; uniqueness.\r\nWorks well for css identifiers.\r\nIt always returns something like and is easy to hack:\r\n\r\nuid-139410573297741\r\n\r\n\r\n    var getUniqueId = function (prefix) {\r\n                var d = new Date().getTime();\r\n                d += (parseInt(Math.random() * 100)).toString();\r\n                if (undefined === prefix) {\r\n                    prefix = &#39;uid-&#39;;\r\n                }\r\n                d = prefix + d;\r\n                return d;\r\n            };"}, {"tags": [], "down_vote_count": 1, "creation_date": 1396595614, "answer_id": 22856022, "path": "stack.bower.answer", "score": 3, "up_vote_count": 4, "is_accepted": false, "last_activity_date": 1396840994, "last_edit_date": 1396840994, "body_markdown": "I&#39;m using this below function, hope it may be useful.\r\n    \r\n        \r\n        function NewGuid()\r\n             {\r\n               var sGuid=&quot;&quot;;\r\n               for (var i=0; i&lt;32; i++)\r\n                {\r\n                  sGuid+=Math.floor(Math.random()*0xF).toString(0xF);\r\n                }\r\n               return sGuid;\r\n             }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1402234208, "answer_id": 24106634, "path": "stack.bower.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1402234208, "body_markdown": "For my use-case, I required id generation that was guaranteed to be unique globally; without exception. I struggled with the problem for a while, and came up with a solution called tuid (Truly Unique ID). It generates an id with the first 32 characters being system-generated and the remaining digits representing milliseconds since epoch. In situations where I need to generate id&#39;s on client-side javascript, it works well. Have a look:\r\n\r\nhttps://github.com/mongoh/tuid"}, {"tags": [], "down_vote_count": 0, "creation_date": 1406043103, "answer_id": 24891600, "path": "stack.bower.answer", "score": 20, "up_vote_count": 20, "is_accepted": false, "last_activity_date": 1460382671, "last_edit_date": 1460382671, "body_markdown": "Well, this has a bunch of answers already, but unfortunately there&#39;s not a &quot;true&quot; random in the bunch. The version below is an adaptation of broofa&#39;s answer, but updated to include a &quot;true&quot; random function that uses crypto libraries where available, and the Alea() function as a fallback.\r\n\r\n      Math.log2 = Math.log2 || function(n){ return Math.log(n) / Math.log(2); }\r\n      Math.trueRandom = (function() {\r\n      var crypt = window.crypto || window.msCrypto;\r\n\r\n      if (crypt &amp;&amp; crypt.getRandomValues) {\r\n          // if we have a crypto library, use it\r\n          var random = function(min, max) {\r\n              var rval = 0;\r\n              var range = max - min;\r\n              if (range &lt; 2) {\r\n                  return min;\r\n              }\r\n\r\n              var bits_needed = Math.ceil(Math.log2(range));\r\n              if (bits_needed &gt; 53) {\r\n                throw new Exception(&quot;We cannot generate numbers larger than 53 bits.&quot;);\r\n              }\r\n              var bytes_needed = Math.ceil(bits_needed / 8);\r\n              var mask = Math.pow(2, bits_needed) - 1;\r\n              // 7776 -&gt; (2^13 = 8192) -1 == 8191 or 0x00001111 11111111\r\n\r\n              // Create byte array and fill with N random numbers\r\n              var byteArray = new Uint8Array(bytes_needed);\r\n              crypt.getRandomValues(byteArray);\r\n\r\n              var p = (bytes_needed - 1) * 8;\r\n              for(var i = 0; i &lt; bytes_needed; i++ ) {\r\n                  rval += byteArray[i] * Math.pow(2, p);\r\n                  p -= 8;\r\n              }\r\n\r\n              // Use &amp; to apply the mask and reduce the number of recursive lookups\r\n              rval = rval &amp; mask;\r\n\r\n              if (rval &gt;= range) {\r\n                  // Integer out of acceptable range\r\n                  return random(min, max);\r\n              }\r\n              // Return an integer that falls within the range\r\n              return min + rval;\r\n          }\r\n          return function() {\r\n              var r = random(0, 1000000000) / 1000000000;\r\n              return r;\r\n          };\r\n      } else {\r\n          // From http://baagoe.com/en/RandomMusings/javascript/\r\n          // Johannes Baag&#195;&#184;e &lt;baagoe@baagoe.com&gt;, 2010\r\n          function Mash() {\r\n              var n = 0xefc8249d;\r\n\r\n              var mash = function(data) {\r\n                  data = data.toString();\r\n                  for (var i = 0; i &lt; data.length; i++) {\r\n                      n += data.charCodeAt(i);\r\n                      var h = 0.02519603282416938 * n;\r\n                      n = h &gt;&gt;&gt; 0;\r\n                      h -= n;\r\n                      h *= n;\r\n                      n = h &gt;&gt;&gt; 0;\r\n                      h -= n;\r\n                      n += h * 0x100000000; // 2^32\r\n                  }\r\n                  return (n &gt;&gt;&gt; 0) * 2.3283064365386963e-10; // 2^-32\r\n              };\r\n\r\n              mash.version = &#39;Mash 0.9&#39;;\r\n              return mash;\r\n          }\r\n\r\n          // From http://baagoe.com/en/RandomMusings/javascript/\r\n          function Alea() {\r\n              return (function(args) {\r\n                  // Johannes Baag&#195;&#184;e &lt;baagoe@baagoe.com&gt;, 2010\r\n                  var s0 = 0;\r\n                  var s1 = 0;\r\n                  var s2 = 0;\r\n                  var c = 1;\r\n\r\n                  if (args.length == 0) {\r\n                      args = [+new Date()];\r\n                  }\r\n                  var mash = Mash();\r\n                  s0 = mash(&#39; &#39;);\r\n                  s1 = mash(&#39; &#39;);\r\n                  s2 = mash(&#39; &#39;);\r\n\r\n                  for (var i = 0; i &lt; args.length; i++) {\r\n                      s0 -= mash(args[i]);\r\n                      if (s0 &lt; 0) {\r\n                          s0 += 1;\r\n                      }\r\n                      s1 -= mash(args[i]);\r\n                      if (s1 &lt; 0) {\r\n                          s1 += 1;\r\n                      }\r\n                      s2 -= mash(args[i]);\r\n                      if (s2 &lt; 0) {\r\n                          s2 += 1;\r\n                      }\r\n                  }\r\n                  mash = null;\r\n\r\n                  var random = function() {\r\n                      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\r\n                      s0 = s1;\r\n                      s1 = s2;\r\n                      return s2 = t - (c = t | 0);\r\n                  };\r\n                  random.uint32 = function() {\r\n                      return random() * 0x100000000; // 2^32\r\n                  };\r\n                  random.fract53 = function() {\r\n                      return random() +\r\n                          (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\r\n                  };\r\n                  random.version = &#39;Alea 0.9&#39;;\r\n                  random.args = args;\r\n                  return random;\r\n\r\n              }(Array.prototype.slice.call(arguments)));\r\n          };\r\n          return Alea();\r\n      }\r\n    }());\r\n\r\n    Math.guid = function() {\r\n        return &#39;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#39;.replace(/[xy]/g, function(c)    {\r\n          var r = Math.trueRandom() * 16 | 0,\r\n              v = c == &#39;x&#39; ? r : (r &amp; 0x3 | 0x8);\r\n          return v.toString(16);\r\n      });\r\n    };"}, {"tags": [], "down_vote_count": 0, "creation_date": 1425775171, "answer_id": 28921801, "path": "stack.bower.answer", "score": 8, "up_vote_count": 8, "is_accepted": false, "last_activity_date": 1487601981, "last_edit_date": 1487601981, "body_markdown": "I wanted to understand broofa&#39;s answer, so I expanded it and added comments:\r\n\r\n    var uuid = function () {\r\n        return &#39;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#39;.replace(\r\n            /[xy]/g,\r\n            function (match) {\r\n                /*\r\n                * Create a random nibble. The two clever bits of this code:\r\n                *\r\n                * - Bitwise operations will truncate floating point numbers\r\n                * - For a bitwise OR of any x, x | 0 = x\r\n                *\r\n                * So:\r\n                *\r\n                * Math.random * 16\r\n                *\r\n                * creates a random floating point number\r\n                * between 0 (inclusive) and 16 (exclusive) and\r\n                *\r\n                * | 0\r\n                *\r\n                * truncates the floating point number into an integer.\r\n                */\r\n                var randomNibble = Math.random() * 16 | 0;\r\n                \r\n                /*\r\n                * Resolves the variant field. If the variant field (delineated\r\n                * as y in the initial string) is matched, the nibble must\r\n                * match the mask (where x is a do-not-care bit):\r\n                *\r\n                * 10xx\r\n                *\r\n                * This is achieved by performing the following operations in\r\n                * sequence (where x is an intermediate result):\r\n                *\r\n                * - x &amp; 0x3, which is equivalent to x % 3\r\n                * - x | 0x8, which is equivalent to x + 8\r\n                *\r\n                * This results in a nibble between 8 inclusive and 11 exclusive,\r\n                * (or 1000 and 1011 in binary), all of which satisfy the variant\r\n                * field mask above.\r\n                */\r\n                var nibble = (match == &#39;y&#39;) ?\r\n                    (randomNibble &amp; 0x3 | 0x8) :\r\n                    randomNibble;\r\n\r\n                /*\r\n                * Ensure the nibble integer is encoded as base 16 (hexadecimal).\r\n                */\r\n                return nibble.toString(16);\r\n            }\r\n        );\r\n    };"}, {"tags": [], "down_vote_count": 0, "creation_date": 1432706457, "answer_id": 30474286, "path": "stack.bower.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1432706457, "body_markdown": "A simple solution to generate unique identification is to use time token and add random number to it. I prefer to prefix it with &quot;uuid-&quot;.&lt;br /&gt;&lt;br /&gt;\r\nBelow function will generate random string of type: &lt;strong&gt;uuid-14d93eb1b9b4533e6&lt;/strong&gt;. One doesn&#39;t need to generate 32 chars random string. 16 char random string is more than sufficient in this case to provide the unique UUIDs in javascript.\r\n&lt;pre&gt;\r\nvar createUUID = function() {\r\n  return&quot;uuid-&quot;+((new Date).getTime().toString(16)+Math.floor(1E7*Math.random()).toString(16));\r\n}\r\n&lt;/pre&gt;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1433293125, "answer_id": 30609091, "path": "stack.bower.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1433293125, "last_edit_date": 1495540056, "body_markdown": "Simple code that uses `crypto.getRandomValues(a)` on [supported browsers][1] (IE11+, iOS7+, FF21+, Chrome, Android Chrome). Avoids using `Math.random()` because that can cause collisions (for example 20 collisions for 4000 generated uuids in a real situation by [Muxa][2]).\r\n\r\n    function uuid() {\r\n    \tfunction randomDigit() {\r\n    \t\tif (crypto &amp;&amp; crypto.getRandomValues) {\r\n    \t\t\tvar rands = new Uint8Array(1);\r\n    \t\t\tcrypto.getRandomValues(rands);\r\n    \t\t\treturn (rands[0] % 16).toString(16);\r\n    \t\t} else {\r\n    \t\t\treturn ((Math.random() * 16) | 0).toString(16);\r\n    \t\t}\r\n    \t}\r\n    \tvar crypto = window.crypto || window.msCrypto;\r\n    \treturn &#39;xxxxxxxx-xxxx-4xxx-8xxx-xxxxxxxxxxxx&#39;.replace(/x/g, randomDigit);\r\n    }\r\n\r\nNotes:\r\n\r\n - Optimised for code readability not speed, so suitable for say a few hundred uuid&#39;s per second. Generates about 10000 uuid() per second in Chromium on my laptop using http://jsbin.com/fuwigo/1 to measure performance.\r\n - Only uses 8 for &quot;y&quot; because that simplifies code readability (y is allowed to be 8, 9, A or B).\r\n\r\n  [1]: http://caniuse.com/#search=getRandomValues\r\n  [2]: https://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1439540562, "answer_id": 32005477, "path": "stack.bower.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1439540562, "body_markdown": "Just thought I&#39;d post yet another way of doing the same thing.\r\n\r\n    function guid() {\r\n      var chars = [&quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;];\r\n      var str = &quot;&quot;;\r\n      for(var i=0;i&lt;36;i++) {\r\n        var str = str + ((i == 8 || i == 13 || i == 18 || i == 23) ? &quot;-&quot; : chars[Math.floor(Math.random()*chars.length)]);\r\n      };\r\n      return str;\r\n    }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1444701019, "answer_id": 33092860, "path": "stack.bower.answer", "score": 18, "up_vote_count": 18, "is_accepted": false, "last_activity_date": 1495697940, "last_edit_date": 1495697940, "body_markdown": "You can use node-uuid (https://github.com/kelektiv/node-uuid)\r\n\r\nSimple, fast generation of [RFC4122][1] UUIDS.\r\n\r\nFeatures:\r\n\r\n - Generate RFC4122 version 1 or version 4 UUIDs\r\n - Runs in node.js and browsers.\r\n - Cryptographically strong random # generation on supporting platforms.\r\n - Small footprint (Want something smaller? [Check this out!][2])\r\n\r\n---\r\n\r\n**Install Using NPM:**\r\n\r\n    npm install uuid\r\n\r\n---\r\n\r\n**Or Using uuid via browser:**\r\n\r\nDownload Raw File (uuid v1): https://raw.githubusercontent.com/kelektiv/node-uuid/master/v1.js\r\nDownload Raw File (uuid v4): https://raw.githubusercontent.com/kelektiv/node-uuid/master/v4.js\r\n\r\n---\r\n\r\nWant even smaller? Check this out: https://gist.github.com/jed/982883\r\n\r\n---\r\n\r\n**Usage:**\r\n\r\n    // Generate a v1 UUID (time-based)\r\n    const uuidV1 = require(&#39;uuid/v1&#39;);\r\n    uuidV1(); // -&gt; &#39;6c84fb90-12c4-11e1-840d-7b25c5ee775a&#39;\r\n\r\n    // Generate a v4 UUID (random)\r\n    const uuidV4 = require(&#39;uuid/v4&#39;);\r\n    uuidV4(); // -&gt; &#39;110ec58a-a0f2-4ac4-8393-c866d813b8d1&#39;\r\n\r\n    // Generate a v5 UUID (namespace)\r\n    const uuidV5 = require(&#39;uuid/v5&#39;);\r\n    \r\n    // ... using predefined DNS namespace (for domain names)\r\n    uuidV5(&#39;hello.example.com&#39;, v5.DNS)); // -&gt; &#39;fdda765f-fc57-5604-a269-52a7df8164ec&#39;\r\n    \r\n    // ... using predefined URL namespace (for, well, URLs)\r\n    uuidV5(&#39;http://example.com/hello&#39;, v5.URL); // -&gt; &#39;3bbcee75-cecc-5b56-8031-b6641c1ed1f1&#39;\r\n    \r\n    // ... using a custom namespace\r\n    const MY_NAMESPACE = &#39;(previously generated unique uuid string)&#39;;\r\n    uuidV5(&#39;hello&#39;, MY_NAMESPACE); // -&gt; &#39;90123e1c-7512-523e-bb28-76fab9f2f73d&#39;\r\n\r\n\r\n  [1]: http://www.ietf.org/rfc/rfc4122.txt\r\n  [2]: https://gist.github.com/982883"}, {"tags": [], "down_vote_count": 1, "creation_date": 1445934781, "answer_id": 33363081, "path": "stack.bower.answer", "score": 0, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1445983366, "last_edit_date": 1445983366, "body_markdown": "You could use the npm package *guid*, a guid generator and validator.\r\n\r\nhttps://www.npmjs.com/package/guid\r\n\r\n\r\nExample:\r\n\r\n    Guid.raw();\r\n    // -&gt; &#39;6fdf6ffc-ed77-94fa-407e-a7b86ed9e59d&#39;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1454343968, "answer_id": 35135400, "path": "stack.bower.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1454343968, "body_markdown": "Just in case anyone dropping by google is seeking a small utility library, ShortId (https://www.npmjs.com/package/shortid) meets all the requirements of this question. It allows specifying allowed characters and length, and guarantees non-sequential, non-repeating strings.\r\n\r\nTo make this more of a real answer, the core of that library uses the following logic to produce its short ids:\r\n\r\n    function encode(lookup, number) {\r\n        var loopCounter = 0;\r\n        var done;\r\n    \r\n        var str = &#39;&#39;;\r\n    \r\n        while (!done) {\r\n            str = str + lookup( ( (number &gt;&gt; (4 * loopCounter)) &amp; 0x0f ) | randomByte() );\r\n            done = number &lt; (Math.pow(16, loopCounter + 1 ) );\r\n            loopCounter++;\r\n        }\r\n        return str;\r\n    }\r\n    \r\n    /** Generates the short id */\r\n    function generate() {\r\n    \r\n        var str = &#39;&#39;;\r\n    \r\n        var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\r\n    \r\n        if (seconds === previousSeconds) {\r\n            counter++;\r\n        } else {\r\n            counter = 0;\r\n            previousSeconds = seconds;\r\n        }\r\n    \r\n        str = str + encode(alphabet.lookup, version);\r\n        str = str + encode(alphabet.lookup, clusterWorkerId);\r\n        if (counter &gt; 0) {\r\n            str = str + encode(alphabet.lookup, counter);\r\n        }\r\n        str = str + encode(alphabet.lookup, seconds);\r\n    \r\n        return str;\r\n    }\r\n\r\nI have not edited this to reflect _only_ the most basic parts of this approach, so the above code includes some additional logic from the library. If you are curious about everything it is doing, take a look at the source: https://github.com/dylang/shortid/tree/master/lib"}, {"tags": [], "down_vote_count": 0, "creation_date": 1458628657, "answer_id": 36147692, "path": "stack.bower.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1458628657, "body_markdown": "Hi here is an working example it generates 32-digit Unique UUID.   \r\n\r\n    function generateUUID() {\r\n          var d = new Date();\r\n          var k = d.getTime();\r\n         var str = k.toString(16).slice(1)\r\n        var UUID= &#39;xxxx-xxxx-4xxx-yxxx-xzx&#39;.replace(/[xy]/g, function (c)\r\n          {\r\n            var r = Math.random() * 16 | 0;\r\n            v = c == &#39;x&#39; ? r : (r &amp; 3 | 8);\r\n            return v.toString(16);\r\n          });\r\n          var newString = UUID.replace(/[z]/, str)\r\n          return newString;\r\n        }\r\n        var x = generateUUID()\r\n        console.log(x,x.length)\r\n\r\n  [1]: https://jsfiddle.net/ashish0019/b81z5y16/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1470939336, "answer_id": 38903464, "path": "stack.bower.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1470939336, "body_markdown": "I found this script useful for creating GUIDs in JavaScript\r\n\r\nhttps://github.com/addui/GUIDJS\r\n\r\n    var myGuid = GUID();"}, {"tags": [], "down_vote_count": 0, "creation_date": 1472659067, "answer_id": 39254139, "path": "stack.bower.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1472659067, "body_markdown": "This may be of use to someone...\r\n\r\n    var d = new Date().valueOf();\r\n    var n = d.toString();\r\n    var result = &#39;&#39;;\r\n    var length = 32;\r\n    var p = 0;\r\n    var chars = &#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;;\r\n    \r\n    for (var i = length; i &gt; 0; --i){\r\n    \tresult += ((i &amp; 1) &amp;&amp; n.charAt(p) ? &#39;&lt;b&gt;&#39; + n.charAt(p) + &#39;&lt;/b&gt;&#39; : chars[Math.floor(Math.random() * chars.length)]);\r\n    \tif(i &amp; 1) p++;\r\n    };\r\n\r\nhttps://jsfiddle.net/j0evrdf1/1/"}, {"tags": [], "down_vote_count": 0, "creation_date": 1473238055, "answer_id": 39365250, "path": "stack.bower.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1473238055, "body_markdown": "    function randomHex(length) {\r\n        var random_string = &#39;&#39;;\r\n        if(!length){\r\n            length = 1;\r\n        }\r\n        for(var i=0; i&lt;length; i+=1){\r\n            random_string += Math.floor(Math.random() * 15).toString(16);\r\n        }\r\n        return random_string;\r\n    }\r\n\r\n    function guid() {\r\n        return randomHex(8);\r\n    }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1476593040, "answer_id": 40066925, "path": "stack.bower.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1476593040, "body_markdown": "Here you can find a very small function that generates uuids https://gist.github.com/jed/982883\r\n\r\nOne of the final versions is:\r\n\r\n    function b(\r\n      a                  // placeholder\r\n    ){\r\n      var cryptoObj = window.crypto || window.msCrypto; // for IE 11\r\n      return a           // if the placeholder was passed, return\r\n        ? (              // a random number from 0 to 15\r\n          a ^            // unless b is 8,\r\n          cryptoObj.getRandomValues(new Uint8Array(1))[0]  // in which case\r\n          % 16           // a random number from\r\n          &gt;&gt; a/4         // 8 to 11\r\n          ).toString(16) // in hexadecimal\r\n        : (              // or otherwise a concatenated string:\r\n          [1e7] +        // 10000000 +\r\n          -1e3 +         // -1000 +\r\n          -4e3 +         // -4000 +\r\n          -8e3 +         // -80000000 +\r\n          -1e11          // -100000000000,\r\n          ).replace(     // replacing\r\n            /[018]/g,    // zeroes, ones, and eights with\r\n            b            // random hex digits\r\n          )\r\n    }"}, {"tags": [], "down_vote_count": 11, "creation_date": 1477492610, "answer_id": 40265174, "path": "stack.bower.answer", "score": -10, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1477492610, "body_markdown": "it has dependency on mongodb of course, but I personally have it somewhere around anyways, so generating new id is simple as this:\r\n\r\n    const ObjectID = require(&#39;mongodb&#39;).ObjectID;\r\n    let id = new ObjectID().toString();\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1487423595, "answer_id": 42315603, "path": "stack.bower.answer", "score": 0, "up_vote_count": 0, "is_accepted": false, "last_activity_date": 1487423595, "body_markdown": "The one I&#39;ve been using lately:\r\n\r\n    const uuid = function b(a) {\r\n      return a ? (a ^ Math.random() * 16 &gt;&gt; a / 4).toString(16) :\r\n          ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, b);\r\n    };"}, {"tags": [], "down_vote_count": 0, "creation_date": 1488323267, "answer_id": 42520442, "path": "stack.bower.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1488323267, "body_markdown": "You can use some of the npm packages (directly if node.js, browserify if on UI side)\r\n\r\n[uuid][1]\r\n\r\n[node-uuid][2]\r\n\r\n\r\n  [1]: https://www.npmjs.com/package/uuid &quot;uuid&quot;\r\n  [2]: https://www.npmjs.com/package/node-uuid &quot;node-uuid&quot;"}, {"tags": [], "down_vote_count": 0, "creation_date": 1494447226, "answer_id": 43901924, "path": "stack.bower.answer", "score": 3, "up_vote_count": 3, "is_accepted": false, "last_activity_date": 1494447226, "body_markdown": "If you just need a random 128 bit string in no particular format you can use:\r\n\r\n    function uuid() {\r\n        return crypto.getRandomValues(new Uint32Array(4)).join(&#39;-&#39;);\r\n    }\r\n\r\nWhich will return something like `2350143528-4164020887-938913176-2513998651`."}, {"tags": [], "down_vote_count": 1, "creation_date": 1495227022, "answer_id": 44078785, "path": "stack.bower.answer", "score": 44, "up_vote_count": 45, "is_accepted": false, "last_activity_date": 1519908070, "last_edit_date": 1519908070, "body_markdown": "    var uniqueId = Math.random().toString(36).substring(2) \r\n                   + (new Date()).getTime().toString(36);\r\n\r\nIf ID&#39;s are generated more than 1 millisecond apart, they are 100% unique.\r\n\r\nIf two ID&#39;s are generated at shorter intervals, and assuming that the random method is truly random, this would generate ID&#39;s that are 99.99999999999999% likely to be globally unique (collision in 1 of 10^15)\r\n\r\nYou can increase this number by adding more digits, but to generate 100% unique ID&#39;s you will need to use a global counter.\r\n\r\n\r\n\r\n&lt;!-- begin snippet: js hide: true console: false babel: false --&gt;\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    document.getElementById(&quot;unique&quot;).innerHTML =\r\n      Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);\r\n\r\n&lt;!-- language: lang-html --&gt;\r\n\r\n    &lt;div id=&quot;unique&quot;&gt;\r\n    &lt;/div&gt;\r\n\r\n&lt;!-- end snippet --&gt;\r\n\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1499605313, "answer_id": 44996682, "path": "stack.bower.answer", "score": 7, "up_vote_count": 7, "is_accepted": false, "last_activity_date": 1499605313, "body_markdown": "ES6 sample\r\n\r\n    const guid=()=&gt; {\r\n      const s4=()=&gt; Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);     \r\n      return `${s4() + s4()}-${s4()}-${s4()}-${s4()}-${s4() + s4() + s4()}`;\r\n    }"}, {"tags": [], "down_vote_count": 0, "creation_date": 1511532851, "answer_id": 47475081, "path": "stack.bower.answer", "score": 2, "up_vote_count": 2, "is_accepted": false, "last_activity_date": 1511532851, "body_markdown": "Just another more readable variant with just two mutations.\r\n\r\n    function uuid4()\r\n    {\r\n      function hex (s, b)\r\n      {\r\n        return s +\r\n          (b &gt;&gt;&gt; 4   ).toString (16) +  // high nibble\r\n          (b &amp; 0b1111).toString (16);   // low nibble\r\n      }\r\n    \r\n      let r = crypto.getRandomValues (new Uint8Array (16));\r\n    \r\n      r[6] = r[6] &gt;&gt;&gt; 4 | 0b01000000; // Set type 4: 0100\r\n      r[8] = r[8] &gt;&gt;&gt; 3 | 0b10000000; // Set variant: 100\r\n    \r\n      return\r\n        r.slice ( 0,  4).reduce (hex, &#39;&#39; ) +\r\n        r.slice ( 4,  6).reduce (hex, &#39;-&#39;) +\r\n        r.slice ( 6,  8).reduce (hex, &#39;-&#39;) +\r\n        r.slice ( 8, 10).reduce (hex, &#39;-&#39;) +\r\n        r.slice (10, 16).reduce (hex, &#39;-&#39;);\r\n    }\r\n"}, {"tags": [], "down_vote_count": 0, "creation_date": 1514810998, "answer_id": 48049791, "path": "stack.bower.answer", "score": 1, "up_vote_count": 1, "is_accepted": false, "last_activity_date": 1514810998, "body_markdown": "For those who are using Javascript on Windows (e.g. WScript / CScript / MSHTA). One can use `ActiveX`. Specifically, the `Scriptlet.Typelib` object:\r\n\r\n    WScript.Echo((new ActiveXObject(&quot;Scriptlet.TypeLib&quot;)).Guid)\r\n\r\nNote that this answer only works on the technologies I listed, it will not work any browser, not even Microsoft Edge! So, your mileage will vary with this answer."}], "title": "Create GUID / UUID in JavaScript?", "view_count": 1133295, "answer_count": 50, "code_snippet": ["<code>function guid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\n</code>", "<code>4</code>", "<code>var uuid = guid();\n</code>", "<code>function guid() {\r\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n    s4() + '-' + s4() + s4() + s4();\r\n}\r\n\r\nfunction s4() {\r\n  return Math.floor((1 + Math.random()) * 0x10000)\r\n    .toString(16)\r\n    .substring(1);\r\n}\r\n\r\ndocument.getElementById('jsGenId').addEventListener('click', function() {\r\n  document.getElementById('jsIdResult').value = guid();\r\n})</code>", "<code>input { font-family: monospace; }</code>", "<code>&lt;button id=\"jsGenId\" type=\"button\"&gt;Generate GUID&lt;/button&gt;\r\n&lt;br&gt;\r\n&lt;input id=\"jsIdResult\" type=\"text\" placeholder=\"Results will be placed here...\" readonly size=\"40\"/&gt;</code>", "<code>function uuidv4() {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r &amp; 0x3 | 0x8);\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\nconsole.log(uuidv4())</code>", "<code>Math.random()</code>", "<code>Math.random()</code>", "<code>crypto</code>", "<code>function uuidv4() {\r\n  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =&gt;\r\n    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] &amp; 15 &gt;&gt; c / 4).toString(16)\r\n  )\r\n}\r\n\r\nconsole.log(uuidv4());</code>", "<code>Math.random</code>", "<code>Math.random</code>", "<code>function generateUUID() { // Public Domain/MIT\n    var d = new Date().getTime();\n    if (typeof performance !== 'undefined' &amp;&amp; typeof performance.now === 'function'){\n        d += performance.now(); //use high-precision timer if available\n    }\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r &amp; 0x3 | 0x8)).toString(16);\n    });\n}\n</code>", "<code>new Date().getTime()</code>", "<code>Date.now()</code>", "<code>new Date().getTime()</code>", "<code>performance.now()</code>", "<code>replace()</code>", "<code>toString()</code>", "<code>Math.random()</code>", "<code>generateQuickGUID</code>", "<code>guid</code>", "<code>generateQuickGuid</code>", "<code>                  Desktop   Android\n           broofa: 1617ms   12869ms\n               e1:  636ms    5778ms\n               e2:  606ms    4754ms\n               e3:  364ms    3003ms\n               e4:  329ms    2015ms\n               e5:  147ms    1156ms\n               e6:  146ms    1035ms\n               e7:  105ms     726ms\n             guid:  962ms   10762ms\ngenerateQuickGuid:  292ms    2961ms\n  - Note that results will vary by browser/cpu.\n</code>", "<code>'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n  var r = Math.random()*16|0, v = c == 'x' ? r : (r&amp;0x3|0x8);\n  return v.toString(16);\n});\n</code>", "<code>x</code>", "<code>y</code>", "<code>10</code>", "<code>-</code>", "<code>4</code>", "<code>-</code>", "<code>4</code>", "<code>function e1() {\n  var u='',i=0;\n  while(i++&lt;36) {\n    var c='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'[i-1],r=Math.random()*16|0,v=c=='x'?r:(r&amp;0x3|0x8);\n    u+=(c=='-'||c=='4')?c:v.toString(16)\n  }\n  return u;\n}\n</code>", "<code>-</code>", "<code>4</code>", "<code>function e2() {\n  var u='',m='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx',i=0,rb=Math.random()*0xffffffff|0;\n  while(i++&lt;36) {\n    var c=m[i-1],r=rb&amp;0xf,v=c=='x'?r:(r&amp;0x3|0x8);\n    u+=(c=='-'||c=='4')?c:v.toString(16);rb=i%8==0?Math.random()*0xffffffff|0:rb&gt;&gt;4\n  }\n  return u\n}\n</code>", "<code>function e3() {\n  var h='0123456789abcdef';\n  var k='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n  /* same as e4() below */\n}\nfunction e4() {\n  var h=['0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'];\n  var k=['x','x','x','x','x','x','x','x','-','x','x','x','x','-','4','x','x','x','-','y','x','x','x','-','x','x','x','x','x','x','x','x','x','x','x','x'];\n  var u='',i=0,rb=Math.random()*0xffffffff|0;\n  while(i++&lt;36) {\n    var c=k[i-1],r=rb&amp;0xf,v=c=='x'?r:(r&amp;0x3|0x8);\n    u+=(c=='-'||c=='4')?c:h[v];rb=i%8==0?Math.random()*0xffffffff|0:rb&gt;&gt;4\n  }\n  return u\n}\n</code>", "<code>var lut = []; for (var i=0; i&lt;256; i++) { lut[i] = (i&lt;16?'0':'')+(i).toString(16); }\nfunction e5() {\n  var k=['x','x','x','x','-','x','x','-','4','x','-','y','x','-','x','x','x','x','x','x'];\n  var u='',i=0,rb=Math.random()*0xffffffff|0;\n  while(i++&lt;20) {\n    var c=k[i-1],r=rb&amp;0xff,v=c=='x'?r:(c=='y'?(r&amp;0x3f|0x80):(r&amp;0xf|0x40));\n    u+=(c=='-')?c:lut[v];rb=i%4==0?Math.random()*0xffffffff|0:rb&gt;&gt;8\n  }\n  return u\n}\n</code>", "<code>var lut = []; for (var i=0; i&lt;256; i++) { lut[i] = (i&lt;16?'0':'')+(i).toString(16); }\nfunction e7()\n{\n  var d0 = Math.random()*0xffffffff|0;\n  var d1 = Math.random()*0xffffffff|0;\n  var d2 = Math.random()*0xffffffff|0;\n  var d3 = Math.random()*0xffffffff|0;\n  return lut[d0&amp;0xff]+lut[d0&gt;&gt;8&amp;0xff]+lut[d0&gt;&gt;16&amp;0xff]+lut[d0&gt;&gt;24&amp;0xff]+'-'+\n    lut[d1&amp;0xff]+lut[d1&gt;&gt;8&amp;0xff]+'-'+lut[d1&gt;&gt;16&amp;0x0f|0x40]+lut[d1&gt;&gt;24&amp;0xff]+'-'+\n    lut[d2&amp;0x3f|0x80]+lut[d2&gt;&gt;8&amp;0xff]+'-'+lut[d2&gt;&gt;16&amp;0xff]+lut[d2&gt;&gt;24&amp;0xff]+\n    lut[d3&amp;0xff]+lut[d3&gt;&gt;8&amp;0xff]+lut[d3&gt;&gt;16&amp;0xff]+lut[d3&gt;&gt;24&amp;0xff];\n}\n</code>", "<code>UUID.generate()</code>", "<code>Math.random()*0xFFFFFFFF</code>", "<code>Math.random()*0x100000000</code>", "<code>&gt;&gt;&gt;0</code>", "<code>|0</code>", "<code>window.crypto.getRandomValues</code>", "<code>function createUUID() {\n    // http://www.ietf.org/rfc/rfc4122.txt\n    var s = [];\n    var hexDigits = \"0123456789abcdef\";\n    for (var i = 0; i &lt; 36; i++) {\n        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n    }\n    s[14] = \"4\";  // bits 12-15 of the time_hi_and_version field to 0010\n    s[19] = hexDigits.substr((s[19] &amp; 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01\n    s[8] = s[13] = s[18] = s[23] = \"-\";\n\n    var uuid = s.join(\"\");\n    return uuid;\n}\n</code>", "<code>var s = new Array(36);</code>", "<code>Guid.Parse()</code>", "<code>B42A153F1D9A4F92990392C11DD684D2</code>", "<code>XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX</code>", "<code>/**\n * Generates a GUID string.\n * @returns {String} The generated GUID.\n * @example af8a8416-6e18-a307-bd9c-f2c947bbb3aa\n * @author Slavik Meltser (slavik@meltser.info).\n * @link http://slavik.meltser.info/?p=142\n */\nfunction guid() {\n    function _p8(s) {\n        var p = (Math.random().toString(16)+\"000000000\").substr(2,8);\n        return s ? \"-\" + p.substr(0,4) + \"-\" + p.substr(4,4) : p ;\n    }\n    return _p8() + _p8(true) + _p8(true) + _p8();\n}\n</code>", "<code>console.time('t'); \nfor (var i = 0; i &lt; 10000000; i++) { \n    guid(); \n};\nconsole.timeEnd('t');\n</code>", "<code>Math.random()</code>", "<code>0.4363923368509859</code>", "<code>0.6fb7687f</code>", "<code>Math.random().toString(16)</code>", "<code>0.</code>", "<code>0.6fb7687f</code>", "<code>6fb7687f</code>", "<code>(Math.random().toString(16).substr(2,8)</code>", "<code>Math.random()</code>", "<code>0.4363</code>", "<code>0.4363000000000000</code>", "<code>\"000000000\"</code>", "<code>substr()</code>", "<code>Math.random()</code>", "<code>\"0\"+\"000000000\"</code>", "<code>\"1\"+\"000000000\"</code>", "<code>Math.random().toString(16)+\"000000000\").substr(2,8)</code>", "<code>XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX</code>", "<code>XXXXXXXX</code>", "<code>-XXXX-XXXX</code>", "<code>XXXXXXXX</code>", "<code>-XXXX-XXXX</code>", "<code>-XXXX-XXXX</code>", "<code>XXXXXXXX</code>", "<code>_p8(s)</code>", "<code>s</code>", "<code>_p8() + _p8(true) + _p8(true) + _p8()</code>", "<code>generateGUID = (typeof(window.crypto) != 'undefined' &amp;&amp; \n                typeof(window.crypto.getRandomValues) != 'undefined') ?\n    function() {\n        // If we have a cryptographically secure PRNG, use that\n        // https://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript\n        var buf = new Uint16Array(8);\n        window.crypto.getRandomValues(buf);\n        var S4 = function(num) {\n            var ret = num.toString(16);\n            while(ret.length &lt; 4){\n                ret = \"0\"+ret;\n            }\n            return ret;\n        };\n        return (S4(buf[0])+S4(buf[1])+\"-\"+S4(buf[2])+\"-\"+S4(buf[3])+\"-\"+S4(buf[4])+\"-\"+S4(buf[5])+S4(buf[6])+S4(buf[7]));\n    }\n\n    :\n\n    function() {\n        // Otherwise, just use Math.random\n        // https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random()*16|0, v = c == 'x' ? r : (r&amp;0x3|0x8);\n            return v.toString(16);\n        });\n    };\n</code>", "<code>, does not keep the Version 4 UUIDs format defined by RFC 4122. That is instead of </code>", "<code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code>", "<code>UUIDv4 = function b(a){return a?(a^Math.random()*16&gt;&gt;a/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,b)}\n</code>", "<code>UUIDv4 =\n\nfunction b(\n  a // placeholder\n){\n  return a // if the placeholder was passed, return\n    ? ( // a random number from 0 to 15\n      a ^ // unless b is 8,\n      Math.random() // in which case\n      * 16 // a random number from\n      &gt;&gt; a/4 // 8 to 11\n      ).toString(16) // in hexadecimal\n    : ( // or otherwise a concatenated string:\n      [1e7] + // 10000000 +\n      -1e3 + // -1000 +\n      -4e3 + // -4000 +\n      -8e3 + // -80000000 +\n      -1e11 // -100000000000,\n      ).replace( // replacing\n        /[018]/g, // zeroes, ones, and eights with\n        b // random hex digits\n      )\n}\n</code>", "<code>function generateQuickGuid() {\n    return Math.random().toString(36).substring(2, 15) +\n        Math.random().toString(36).substring(2, 15);\n}\n</code>", "<code>&gt;&gt;&gt; generateQuickGuid()\n\"nvcjf1hs7tf8yyk4lmlijqkuo9\"\n\"yq6gipxqta4kui8z05tgh9qeel\"\n\"36dh5sec7zdj90sk2rx7pjswi2\"\nruntime: 32.5s\n\n&gt;&gt;&gt; GUID() // John Millikin\n\"7a342ca2-e79f-528e-6302-8f901b0b6888\"\nruntime: 57.8s\n\n&gt;&gt;&gt; regexGuid() // broofa\n\"396e0c46-09e4-4b19-97db-bd423774a4b3\"\nruntime: 91.2s\n\n&gt;&gt;&gt; createUUID() // Kevin Hakanson\n\"403aa1ab-9f70-44ec-bc08-5d5ac56bd8a5\"\nruntime: 65.9s\n\n&gt;&gt;&gt; UUIDv4() // Jed Schmidt\n\"f4d7d31f-fa83-431a-b30c-3e6cc37cc6ee\"\nruntime: 282.4s\n\n&gt;&gt;&gt; Math.uuid() // broofa\n\"5BD52F55-E68F-40FC-93C2-90EE069CE545\"\nruntime: 225.8s\n\n&gt;&gt;&gt; Math.uuidFast() // broofa\n\"6CB97A68-23A2-473E-B75B-11263781BBE6\"\nruntime: 92.0s\n\n&gt;&gt;&gt; Math.uuidCompact() // broofa\n\"3d7b7a06-0a67-4b67-825c-e5c43ff8c1e8\"\nruntime: 229.0s\n\n&gt;&gt;&gt; bitwiseGUID() // jablko\n\"baeaa2f-7587-4ff1-af23-eeab3e92\"\nruntime: 79.6s\n\n&gt;&gt;&gt;&gt; betterWayGUID() // Andrea Turri\n\"383585b0-9753-498d-99c3-416582e9662c\"\nruntime: 60.0s\n\n&gt;&gt;&gt;&gt; UUID() // John Fowler\n\"855f997b-4369-4cdb-b7c9-7142ceaf39e8\"\nruntime: 62.2s\n</code>", "<code>var r;\nconsole.time('t'); \nfor (var i = 0; i &lt; 10000000; i++) { \n    r = FuncToTest(); \n};\nconsole.timeEnd('t');\n</code>", "<code>var uniqueId = Math.random().toString(36).substring(2) \n               + (new Date()).getTime().toString(36);\n</code>", "<code>document.getElementById(\"unique\").innerHTML =\r\n  Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);</code>", "<code>&lt;div id=\"unique\"&gt;\r\n&lt;/div&gt;</code>", "<code>function generateGuid() {\n  var result, i, j;\n  result = '';\n  for(j=0; j&lt;32; j++) {\n    if( j == 8 || j == 12|| j == 16|| j == 20) \n      result = result + '-';\n    i = Math.floor(Math.random()*16).toString(16).toUpperCase();\n    result = result + i;\n  }\n  return result;\n}\n</code>", "<code>var crypto = window.crypto || window.msCrypto || null; // IE11 fix\r\n\r\nvar Guid = Guid || (function() {\r\n\r\n  var EMPTY = '00000000-0000-0000-0000-000000000000';\r\n\r\n  var _padLeft = function(paddingString, width, replacementChar) {\r\n    return paddingString.length &gt;= width ? paddingString : _padLeft(replacementChar + paddingString, width, replacementChar || ' ');\r\n  };\r\n\r\n  var _s4 = function(number) {\r\n    var hexadecimalResult = number.toString(16);\r\n    return _padLeft(hexadecimalResult, 4, '0');\r\n  };\r\n\r\n  var _cryptoGuid = function() {\r\n    var buffer = new window.Uint16Array(8);\r\n    window.crypto.getRandomValues(buffer);\r\n    return [_s4(buffer[0]) + _s4(buffer[1]), _s4(buffer[2]), _s4(buffer[3]), _s4(buffer[4]), _s4(buffer[5]) + _s4(buffer[6]) + _s4(buffer[7])].join('-');\r\n  };\r\n\r\n  var _guid = function() {\r\n    var currentDateMilliseconds = new Date().getTime();\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(currentChar) {\r\n      var randomChar = (currentDateMilliseconds + Math.random() * 16) % 16 | 0;\r\n      currentDateMilliseconds = Math.floor(currentDateMilliseconds / 16);\r\n      return (currentChar === 'x' ? randomChar : (randomChar &amp; 0x7 | 0x8)).toString(16);\r\n    });\r\n  };\r\n\r\n  var create = function() {\r\n    var hasCrypto = crypto != 'undefined' &amp;&amp; crypto !== null,\r\n      hasRandomValues = typeof(window.crypto.getRandomValues) != 'undefined';\r\n    return (hasCrypto &amp;&amp; hasRandomValues) ? _cryptoGuid() : _guid();\r\n  };\r\n\r\n  return {\r\n    newGuid: create,\r\n    empty: EMPTY\r\n  };\r\n})();\r\n\r\n// DEMO: Create and show GUID\r\nconsole.log(Guid.newGuid());</code>", "<code>GUID</code>", "<code>string</code>", "<code>Uint16Array</code>", "<code>toString</code>", "<code>object</code>", "<code>_cryptoGuid</code>", "<code>_guid</code>", "<code>var uuid = function() {\n    var buf = new Uint32Array(4);\n    window.crypto.getRandomValues(buf);\n    var idx = -1;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        idx++;\n        var r = (buf[idx&gt;&gt;3] &gt;&gt; ((idx%8)*4))&amp;15;\n        var v = c == 'x' ? r : (r&amp;0x3|0x8);\n        return v.toString(16);\n    });\n};\n</code>", "<code>  Math.log2 = Math.log2 || function(n){ return Math.log(n) / Math.log(2); }\n  Math.trueRandom = (function() {\n  var crypt = window.crypto || window.msCrypto;\n\n  if (crypt &amp;&amp; crypt.getRandomValues) {\n      // if we have a crypto library, use it\n      var random = function(min, max) {\n          var rval = 0;\n          var range = max - min;\n          if (range &lt; 2) {\n              return min;\n          }\n\n          var bits_needed = Math.ceil(Math.log2(range));\n          if (bits_needed &gt; 53) {\n            throw new Exception(\"We cannot generate numbers larger than 53 bits.\");\n          }\n          var bytes_needed = Math.ceil(bits_needed / 8);\n          var mask = Math.pow(2, bits_needed) - 1;\n          // 7776 -&gt; (2^13 = 8192) -1 == 8191 or 0x00001111 11111111\n\n          // Create byte array and fill with N random numbers\n          var byteArray = new Uint8Array(bytes_needed);\n          crypt.getRandomValues(byteArray);\n\n          var p = (bytes_needed - 1) * 8;\n          for(var i = 0; i &lt; bytes_needed; i++ ) {\n              rval += byteArray[i] * Math.pow(2, p);\n              p -= 8;\n          }\n\n          // Use &amp; to apply the mask and reduce the number of recursive lookups\n          rval = rval &amp; mask;\n\n          if (rval &gt;= range) {\n              // Integer out of acceptable range\n              return random(min, max);\n          }\n          // Return an integer that falls within the range\n          return min + rval;\n      }\n      return function() {\n          var r = random(0, 1000000000) / 1000000000;\n          return r;\n      };\n  } else {\n      // From http://baagoe.com/en/RandomMusings/javascript/\n      // Johannes Baag\u00c3\u00b8e &lt;baagoe@baagoe.com&gt;, 2010\n      function Mash() {\n          var n = 0xefc8249d;\n\n          var mash = function(data) {\n              data = data.toString();\n              for (var i = 0; i &lt; data.length; i++) {\n                  n += data.charCodeAt(i);\n                  var h = 0.02519603282416938 * n;\n                  n = h &gt;&gt;&gt; 0;\n                  h -= n;\n                  h *= n;\n                  n = h &gt;&gt;&gt; 0;\n                  h -= n;\n                  n += h * 0x100000000; // 2^32\n              }\n              return (n &gt;&gt;&gt; 0) * 2.3283064365386963e-10; // 2^-32\n          };\n\n          mash.version = 'Mash 0.9';\n          return mash;\n      }\n\n      // From http://baagoe.com/en/RandomMusings/javascript/\n      function Alea() {\n          return (function(args) {\n              // Johannes Baag\u00c3\u00b8e &lt;baagoe@baagoe.com&gt;, 2010\n              var s0 = 0;\n              var s1 = 0;\n              var s2 = 0;\n              var c = 1;\n\n              if (args.length == 0) {\n                  args = [+new Date()];\n              }\n              var mash = Mash();\n              s0 = mash(' ');\n              s1 = mash(' ');\n              s2 = mash(' ');\n\n              for (var i = 0; i &lt; args.length; i++) {\n                  s0 -= mash(args[i]);\n                  if (s0 &lt; 0) {\n                      s0 += 1;\n                  }\n                  s1 -= mash(args[i]);\n                  if (s1 &lt; 0) {\n                      s1 += 1;\n                  }\n                  s2 -= mash(args[i]);\n                  if (s2 &lt; 0) {\n                      s2 += 1;\n                  }\n              }\n              mash = null;\n\n              var random = function() {\n                  var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n                  s0 = s1;\n                  s1 = s2;\n                  return s2 = t - (c = t | 0);\n              };\n              random.uint32 = function() {\n                  return random() * 0x100000000; // 2^32\n              };\n              random.fract53 = function() {\n                  return random() +\n                      (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n              };\n              random.version = 'Alea 0.9';\n              random.args = args;\n              return random;\n\n          }(Array.prototype.slice.call(arguments)));\n      };\n      return Alea();\n  }\n}());\n\nMath.guid = function() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)    {\n      var r = Math.trueRandom() * 16 | 0,\n          v = c == 'x' ? r : (r &amp; 0x3 | 0x8);\n      return v.toString(16);\n  });\n};\n</code>", "<code>rval = rval &amp; mask</code>", "<code>npm install uuid\n</code>", "<code>// Generate a v1 UUID (time-based)\nconst uuidV1 = require('uuid/v1');\nuuidV1(); // -&gt; '6c84fb90-12c4-11e1-840d-7b25c5ee775a'\n\n// Generate a v4 UUID (random)\nconst uuidV4 = require('uuid/v4');\nuuidV4(); // -&gt; '110ec58a-a0f2-4ac4-8393-c866d813b8d1'\n\n// Generate a v5 UUID (namespace)\nconst uuidV5 = require('uuid/v5');\n\n// ... using predefined DNS namespace (for domain names)\nuuidV5('hello.example.com', v5.DNS)); // -&gt; 'fdda765f-fc57-5604-a269-52a7df8164ec'\n\n// ... using predefined URL namespace (for, well, URLs)\nuuidV5('http://example.com/hello', v5.URL); // -&gt; '3bbcee75-cecc-5b56-8031-b6641c1ed1f1'\n\n// ... using a custom namespace\nconst MY_NAMESPACE = '(previously generated unique uuid string)';\nuuidV5('hello', MY_NAMESPACE); // -&gt; '90123e1c-7512-523e-bb28-76fab9f2f73d'\n</code>", "<code>import uuid from 'uuid/v4'; let id = uuid();</code>", "<code>function uuid()\n{\n   var chars = '0123456789abcdef'.split('');\n\n   var uuid = [], rnd = Math.random, r;\n   uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n   uuid[14] = '4'; // version 4\n\n   for (var i = 0; i &lt; 36; i++)\n   {\n      if (!uuid[i])\n      {\n         r = 0 | rnd()*16;\n\n         uuid[i] = chars[(i == 19) ? (r &amp; 0x3) | 0x8 : r &amp; 0xf];\n      }\n   }\n\n   return uuid.join('');\n}\n</code>", "<code>682db637-0f31-4847-9cdf-25ba9613a75c\n97d19478-3ab2-4aa1-b8cc-a1c3540f54aa\n2eed04c9-2692-456d-a0fd-51012f947136\n</code>", "<code>  // RFC 4122\n  //\n  // A UUID is 128 bits long\n  //\n  // String representation is five fields of 4, 2, 2, 2, and 6 bytes.\n  // Fields represented as lowercase, zero-filled, hexadecimal strings, and\n  // are separated by dash characters\n  //\n  // A version 4 UUID is generated by setting all but six bits to randomly\n  // chosen values\n  var uuid = [\n    Math.random().toString(16).slice(2, 10),\n    Math.random().toString(16).slice(2, 6),\n\n    // Set the four most significant bits (bits 12 through 15) of the\n    // time_hi_and_version field to the 4-bit version number from Section\n    // 4.1.3\n    (Math.random() * .0625 /* 0x.1 */ + .25 /* 0x.4 */).toString(16).slice(2, 6),\n\n    // Set the two most significant bits (bits 6 and 7) of the\n    // clock_seq_hi_and_reserved to zero and one, respectively\n    (Math.random() * .25 /* 0x.4 */ + .5 /* 0x.8 */).toString(16).slice(2, 6),\n\n    Math.random().toString(16).slice(2, 14)].join('-');\n</code>", "<code>//UUID/Guid Generator\n// use: UUID.create() or UUID.createSequential()\n// convenience:  UUID.empty, UUID.tryParse(string)\n(function(w){\n  // From http://baagoe.com/en/RandomMusings/javascript/\n  // Johannes Baag\u00c3\u00b8e &lt;baagoe@baagoe.com&gt;, 2010\n  //function Mash() {...};\n\n  // From http://baagoe.com/en/RandomMusings/javascript/\n  //function Kybos() {...};\n\n  var rnd = Kybos();\n\n  //UUID/GUID Implementation from http://frugalcoder.us/post/2012/01/13/javascript-guid-uuid-generator.aspx\n  var UUID = {\n    \"empty\": \"00000000-0000-0000-0000-000000000000\"\n    ,\"parse\": function(input) {\n      var ret = input.toString().trim().toLowerCase().replace(/^[\\s\\r\\n]+|[\\{\\}]|[\\s\\r\\n]+$/g, \"\");\n      if ((/[a-f0-9]{8}\\-[a-f0-9]{4}\\-[a-f0-9]{4}\\-[a-f0-9]{4}\\-[a-f0-9]{12}/).test(ret))\n        return ret;\n      else\n        throw new Error(\"Unable to parse UUID\");\n    }\n    ,\"createSequential\": function() {\n      var ret = new Date().valueOf().toString(16).replace(\"-\",\"\")\n      for (;ret.length &lt; 12; ret = \"0\" + ret);\n      ret = ret.substr(ret.length-12,12); //only least significant part\n      for (;ret.length &lt; 32;ret += Math.floor(rnd() * 0xffffffff).toString(16));\n      return [ret.substr(0,8), ret.substr(8,4), \"4\" + ret.substr(12,3), \"89AB\"[Math.floor(Math.random()*4)] + ret.substr(16,3),  ret.substr(20,12)].join(\"-\");\n    }\n    ,\"create\": function() {\n      var ret = \"\";\n      for (;ret.length &lt; 32;ret += Math.floor(rnd() * 0xffffffff).toString(16));\n      return [ret.substr(0,8), ret.substr(8,4), \"4\" + ret.substr(12,3), \"89AB\"[Math.floor(Math.random()*4)] + ret.substr(16,3),  ret.substr(20,12)].join(\"-\");\n    }\n    ,\"random\": function() {\n      return rnd();\n    }\n    ,\"tryParse\": function(input) {\n      try {\n        return UUID.parse(input);\n      } catch(ex) {\n        return UUID.empty;\n      }\n    }\n  };\n  UUID[\"new\"] = UUID.create;\n\n  w.UUID = w.Guid = UUID;\n}(window || this));</code>", "<code>function(\n  a,b                // placeholders\n){\n  for(               // loop :)\n      b=a='';        // b - result , a - numeric variable\n      a++&lt;36;        // \n      b+=a*51&amp;52  // if \"a\" is not 9 or 14 or 19 or 24\n                  ?  //  return a random number or 4\n         (\n           a^15      // if \"a\" is not 15\n              ?      // genetate a random number from 0 to 15\n           8^Math.random()*\n           (a^20?16:4)  // unless \"a\" is 20, in which case a random number from 8 to 11\n              :\n           4            //  otherwise 4\n           ).toString(16)\n                  :\n         '-'            //  in other cases (if \"a\" is 9,14,19,24) insert \"-\"\n      );\n  return b\n }\n</code>", "<code>function(a,b){for(b=a='';a++&lt;36;b+=a*51&amp;52?(a^15?8^Math.random()*(a^20?16:4):4).toString(16):'-');return b}\n</code>", "<code>function UUID() {\n    var nbr, randStr = \"\";\n    do {\n        randStr += (nbr = Math.random()).toString(16).substr(2);\n    } while (randStr.length &lt; 30);\n    return [\n        randStr.substr(0, 8), \"-\",\n        randStr.substr(8, 4), \"-4\",\n        randStr.substr(12, 3), \"-\",\n        ((nbr*4|0)+8).toString(16), // [89ab]\n        randStr.substr(15, 3), \"-\",\n        randStr.substr(18, 12)\n        ].join(\"\");\n}\n</code>", "<code>SP.Guid.newGuid</code>", "<code>var newGuid = function () {\n    var result = '';\n    var hexcodes = \"0123456789abcdef\".split(\"\");\n\n    for (var index = 0; index &lt; 32; index++) {\n        var value = Math.floor(Math.random() * 16);\n\n        switch (index) {\n        case 8:\n            result += '-';\n            break;\n        case 12:\n            value = 4;\n            result += '-';\n            break;\n        case 16:\n            value = value &amp; 3 | 8;\n            result += '-';\n            break;\n        case 20:\n            result += '-';\n            break;\n        }\n        result += hexcodes[value];\n    }\n    return result;\n};\n</code>", "<code>[WebMethod()]\npublic static string GenerateGuid()\n{\n    return Guid.NewGuid().ToString();\n}\n</code>", "<code>var myNewGuid = null;\nPageMethods.GenerateGuid(\n    function(result, userContext, methodName)\n    {\n        myNewGuid = result;\n    },\n    function()\n    {\n        alert(\"WebService call failed.\");\n    }\n);\n</code>", "<code>jQuery.Guid.Value()\n</code>", "<code>jQuery.Guid.New()\n</code>", "<code>jQuery.Guid.Empty()\n</code>", "<code>jQuery.Guid.IsEmpty()\n</code>", "<code>jQuery.Guid.IsValid()\n</code>", "<code>jQuery.Guid.Set()\n</code>", "<code>var uuid = function () {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n        /[xy]/g,\n        function (match) {\n            /*\n            * Create a random nibble. The two clever bits of this code:\n            *\n            * - Bitwise operations will truncate floating point numbers\n            * - For a bitwise OR of any x, x | 0 = x\n            *\n            * So:\n            *\n            * Math.random * 16\n            *\n            * creates a random floating point number\n            * between 0 (inclusive) and 16 (exclusive) and\n            *\n            * | 0\n            *\n            * truncates the floating point number into an integer.\n            */\n            var randomNibble = Math.random() * 16 | 0;\n\n            /*\n            * Resolves the variant field. If the variant field (delineated\n            * as y in the initial string) is matched, the nibble must\n            * match the mask (where x is a do-not-care bit):\n            *\n            * 10xx\n            *\n            * This is achieved by performing the following operations in\n            * sequence (where x is an intermediate result):\n            *\n            * - x &amp; 0x3, which is equivalent to x % 3\n            * - x | 0x8, which is equivalent to x + 8\n            *\n            * This results in a nibble between 8 inclusive and 11 exclusive,\n            * (or 1000 and 1011 in binary), all of which satisfy the variant\n            * field mask above.\n            */\n            var nibble = (match == 'y') ?\n                (randomNibble &amp; 0x3 | 0x8) :\n                randomNibble;\n\n            /*\n            * Ensure the nibble integer is encoded as base 16 (hexadecimal).\n            */\n            return nibble.toString(16);\n        }\n    );\n};\n</code>", "<code>var getUniqueId = function (prefix) {\n            var d = new Date().getTime();\n            d += (parseInt(Math.random() * 100)).toString();\n            if (undefined === prefix) {\n                prefix = 'uid-';\n            }\n            d = prefix + d;\n            return d;\n        };\n</code>", "<code>const guid=()=&gt; {\n  const s4=()=&gt; Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);     \n  return `${s4() + s4()}-${s4()}-${s4()}-${s4()}-${s4() + s4() + s4()}`;\n}\n</code>"], "path": "stack.browserify"}], "name": "browserify"}