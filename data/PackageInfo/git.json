[{
   "collaborators_cnt": "1",
   "repo_url": "https://github.com/ryancole/chunk",
   "star_cnt": "18",
   "homepage_url": "None",
   "last_push": "2014-10-06 05:01:53  UTC",
   "name": "git",
   "readMe": "Chunk converts arrays like `[1,2,3,4,5]` into arrays of arrays like `[[1,2], [3,4], [5]]`.\r\n\r\n![Chunk, from The Goonies](http://i.imgur.com/T3WCUmu.jpg \"Chunk, from The Goonies\")\r\n\r\nYou can install chunk using npm ...\r\n\r\n```\r\nnpm install chunk\r\n```\r\n\r\nor bower ...\r\n\r\n```\r\nbower install chunk\r\n```\r\n\r\n## Examples\r\n\r\nTo chunk an array into an array of smaller arrays, simply call chunk:\r\n\r\n```javascript\r\n> var chunk = require('chunk')\r\n> chunk([1,2,3])\r\n[ [ 1, 2 ], [ 3 ] ]\r\n\r\n```\r\n\r\nTo chunk an array into an array of N-sized arrays, call chunk with N:\r\n\r\n```javascript\r\n> chunk([1,2,3], 1)\r\n[ [ 1 ], [ 2 ], [ 3 ] ]\r\n> chunk([1,2,3], 3)\r\n[ [ 1, 2, 3 ] ]\r\n``` \r\n\r\nThe default chunk size is 2.",
   "pm_description": "None",
   "pm_dependency_cnt": "0",
   "fork_cnt": "3",
   "id": "8587033",
   "_childDocuments_": [
      {
         "title": "Why is it faster to process a sorted array than an unsorted array?",
         "code_snippet": "['<code>#include &lt;algorithm&gt;\\n#include &lt;ctime&gt;\\n#include &lt;iostream&gt;\\n\\nint main()\\n{\\n    // Generate data\\n    const unsigned arraySize = 32768;\\n    int data[arraySize];\\n\\n    for (unsigned c = 0; c &lt; arraySize; ++c)\\n        data[c] = std::rand() % 256;\\n\\n    // !!! With this, the next loop runs faster\\n    std::sort(data, data + arraySize);\\n\\n    // Test\\n    clock_t start = clock();\\n    long long sum = 0;\\n\\n    for (unsigned i = 0; i &lt; 100000; ++i)\\n    {\\n        // Primary loop\\n        for (unsigned c = 0; c &lt; arraySize; ++c)\\n        {\\n            if (data[c] &gt;= 128)\\n                sum += data[c];\\n        }\\n    }\\n\\n    double elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;\\n\\n    std::cout &lt;&lt; elapsedTime &lt;&lt; std::endl;\\n    std::cout &lt;&lt; \"sum = \" &lt;&lt; sum &lt;&lt; std::endl;\\n}\\n</code>', '<code>std::sort(data, data + arraySize);</code>', '<code>import java.util.Arrays;\\nimport java.util.Random;\\n\\npublic class Main\\n{\\n    public static void main(String[] args)\\n    {\\n        // Generate data\\n        int arraySize = 32768;\\n        int data[] = new int[arraySize];\\n\\n        Random rnd = new Random(0);\\n        for (int c = 0; c &lt; arraySize; ++c)\\n            data[c] = rnd.nextInt() % 256;\\n\\n        // !!! With this, the next loop runs faster\\n        Arrays.sort(data);\\n\\n        // Test\\n        long start = System.nanoTime();\\n        long sum = 0;\\n\\n        for (int i = 0; i &lt; 100000; ++i)\\n        {\\n            // Primary loop\\n            for (int c = 0; c &lt; arraySize; ++c)\\n            {\\n                if (data[c] &gt;= 128)\\n                    sum += data[c];\\n            }\\n        }\\n\\n        System.out.println((System.nanoTime() - start) / 1000000000.0);\\n        System.out.println(\"sum = \" + sum);\\n    }\\n}\\n</code>', '<code>cmov</code>', '<code>pcmpgtd</code>', '<code>if (data[c] &gt;= 128)\\n    sum += data[c];\\n</code>', '<code>T = branch taken\\nN = branch not taken\\n\\ndata[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...\\nbranch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...\\n\\n       = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)\\n</code>', '<code>data[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, 133, ...\\nbranch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T,   N  ...\\n\\n       = TTNTTTTNTNNTTTN ...   (completely random - hard to predict)\\n</code>', '<code>if (data[c] &gt;= 128)\\n    sum += data[c];\\n</code>', '<code>int t = (data[c] - 128) &gt;&gt; 31;\\nsum += ~t &amp; data[c];\\n</code>', '<code>data[]</code>', '<code>//  Branch - Random\\nseconds = 11.777\\n\\n//  Branch - Sorted\\nseconds = 2.352\\n\\n//  Branchless - Random\\nseconds = 2.564\\n\\n//  Branchless - Sorted\\nseconds = 2.587\\n</code>', '<code>//  Branch - Random\\nseconds = 10.93293813\\n\\n//  Branch - Sorted\\nseconds = 5.643797077\\n\\n//  Branchless - Random\\nseconds = 3.113581453\\n\\n//  Branchless - Sorted\\nseconds = 3.186068823\\n</code>', '<code>-O3</code>', '<code>-ftree-vectorize</code>', '<code>/Ox</code>', '<code>int t=-((data[c]&gt;=128))</code>', '<code>int t = (data[c] - 128) &gt;&gt; 31; sum += ~t &amp; data[c];</code>', '<code>data[c] &gt;= 128</code>', '<code>false</code>', '<code>true</code>', '<code>if (data[c] &gt;= 128)\\n    sum += data[c];\\n</code>', '<code>if... else...</code>', '<code>cmovl</code>', '<code>x86</code>', '<code>C</code>', '<code>C++</code>', '<code>x86</code>', '<code>... ? ... : ...</code>', '<code>sum += data[c] &gt;=128 ? data[c] : 0;\\n</code>', '<code>//  Branch - Random\\nseconds = 8.885\\n\\n//  Branch - Sorted\\nseconds = 1.528\\n\\n//  Branchless - Random\\nseconds = 3.716\\n\\n//  Branchless - Sorted\\nseconds = 3.71\\n</code>', '<code>//  Branch - Random\\nseconds = 11.302\\n\\n//  Branch - Sorted\\n seconds = 1.830\\n\\n//  Branchless - Random\\nseconds = 2.736\\n\\n//  Branchless - Sorted\\nseconds = 2.737\\n</code>', '<code>x86</code>', '<code>max1</code>', '<code>max2</code>', '<code>max1</code>', '<code>if... else ...</code>', '<code>int max1(int a, int b) {\\n    if (a &gt; b)\\n        return a;\\n    else\\n        return b;\\n}\\n</code>', '<code>max2</code>', '<code>... ? ... : ...</code>', '<code>int max2(int a, int b) {\\n    return a &gt; b ? a : b;\\n}\\n</code>', '<code>GCC -S</code>', '<code>:max1\\n    movl    %edi, -4(%rbp)\\n    movl    %esi, -8(%rbp)\\n    movl    -4(%rbp), %eax\\n    cmpl    -8(%rbp), %eax\\n    jle     .L2\\n    movl    -4(%rbp), %eax\\n    movl    %eax, -12(%rbp)\\n    jmp     .L4\\n.L2:\\n    movl    -8(%rbp), %eax\\n    movl    %eax, -12(%rbp)\\n.L4:\\n    movl    -12(%rbp), %eax\\n    leave\\n    ret\\n\\n:max2\\n    movl    %edi, -4(%rbp)\\n    movl    %esi, -8(%rbp)\\n    movl    -4(%rbp), %eax\\n    cmpl    %eax, -8(%rbp)\\n    cmovge  -8(%rbp), %eax\\n    leave\\n    ret\\n</code>', '<code>max2</code>', '<code>cmovge</code>', '<code>max2</code>', '<code>jmp</code>', '<code>x86</code>', '<code>Fetch</code>', '<code>Decode</code>', '<code>-O0</code>', '<code>for (unsigned i = 0; i &lt; 100000; ++i)\\n{\\n    for (unsigned j = 0; j &lt; arraySize; ++j)\\n    {\\n        if (data[j] &gt;= 128)\\n            sum += data[j];\\n    }\\n}\\n</code>', '<code>for (unsigned j = 0; j &lt; arraySize; ++j)\\n{\\n    for (unsigned i = 0; i &lt; 100000; ++i)\\n    {\\n        if (data[j] &gt;= 128)\\n            sum += data[j];\\n    }\\n}\\n</code>', '<code>if</code>', '<code>i</code>', '<code>if</code>', '<code>for (unsigned j = 0; j &lt; arraySize; ++j)\\n{\\n    if (data[j] &gt;= 128)\\n    {\\n        for (unsigned i = 0; i &lt; 100000; ++i)\\n        {\\n            sum += data[j];\\n        }\\n    }\\n}\\n</code>', '<code>for (unsigned j = 0; j &lt; arraySize; ++j)\\n{\\n    if (data[j] &gt;= 128)\\n    {\\n        sum += data[j] * 100000;\\n    }\\n}\\n</code>', '<code>i</code>', '<code>if</code>', '<code>sum += (data[j] &gt;= 128) ? data[j] * 100000 : 0;</code>', '<code>cmovge</code>', '<code>cachegrind</code>', '<code>--branch-sim=yes</code>', '<code>g++</code>', '<code>==32551== Branches:        656,645,130  (  656,609,208 cond +    35,922 ind)\\n==32551== Mispredicts:         169,556  (      169,095 cond +       461 ind)\\n==32551== Mispred rate:            0.0% (          0.0%     +       1.2%   )\\n</code>', '<code>==32555== Branches:        655,996,082  (  655,960,160 cond +  35,922 ind)\\n==32555== Mispredicts:     164,073,152  (  164,072,692 cond +     460 ind)\\n==32555== Mispred rate:           25.0% (         25.0%     +     1.2%   )\\n</code>', '<code>cg_annotate</code>', '<code>          Bc    Bcm Bi Bim\\n      10,001      4  0   0      for (unsigned i = 0; i &lt; 10000; ++i)\\n           .      .  .   .      {\\n           .      .  .   .          // primary loop\\n 327,690,000 10,016  0   0          for (unsigned c = 0; c &lt; arraySize; ++c)\\n           .      .  .   .          {\\n 327,680,000 10,006  0   0              if (data[c] &gt;= 128)\\n           0      0  0   0                  sum += data[c];\\n           .      .  .   .          }\\n           .      .  .   .      }\\n</code>', '<code>          Bc         Bcm Bi Bim\\n      10,001           4  0   0      for (unsigned i = 0; i &lt; 10000; ++i)\\n           .           .  .   .      {\\n           .           .  .   .          // primary loop\\n 327,690,000      10,038  0   0          for (unsigned c = 0; c &lt; arraySize; ++c)\\n           .           .  .   .          {\\n 327,680,000 164,050,007  0   0              if (data[c] &gt;= 128)\\n           0           0  0   0                  sum += data[c];\\n           .           .  .   .          }\\n           .           .  .   .      }\\n</code>', '<code>if (data[c] &gt;= 128)</code>', '<code>Bcm</code>', '<code>perf stat ./sumtest_sorted\\n</code>', \"<code> Performance counter stats for './sumtest_sorted':\\n\\n  11808.095776 task-clock                #    0.998 CPUs utilized          \\n         1,062 context-switches          #    0.090 K/sec                  \\n            14 CPU-migrations            #    0.001 K/sec                  \\n           337 page-faults               #    0.029 K/sec                  \\n26,487,882,764 cycles                    #    2.243 GHz                    \\n41,025,654,322 instructions              #    1.55  insns per cycle        \\n 6,558,871,379 branches                  #  555.455 M/sec                  \\n       567,204 branch-misses             #    0.01% of all branches        \\n\\n  11.827228330 seconds time elapsed\\n</code>\", \"<code> Performance counter stats for './sumtest_unsorted':\\n\\n  28877.954344 task-clock                #    0.998 CPUs utilized          \\n         2,584 context-switches          #    0.089 K/sec                  \\n            18 CPU-migrations            #    0.001 K/sec                  \\n           335 page-faults               #    0.012 K/sec                  \\n65,076,127,595 cycles                    #    2.253 GHz                    \\n41,032,528,741 instructions              #    0.63  insns per cycle        \\n 6,560,579,013 branches                  #  227.183 M/sec                  \\n 1,646,394,749 branch-misses             #   25.10% of all branches        \\n\\n  28.935500947 seconds time elapsed\\n</code>\", '<code>perf record -e branch-misses ./sumtest_unsorted\\nperf annotate -d sumtest_unsorted\\n</code>', '<code> Percent |      Source code &amp; Disassembly of sumtest_unsorted\\n------------------------------------------------\\n...\\n         :                      sum += data[c];\\n    0.00 :        400a1a:       mov    -0x14(%rbp),%eax\\n   39.97 :        400a1d:       mov    %eax,%eax\\n    5.31 :        400a1f:       mov    -0x20040(%rbp,%rax,4),%eax\\n    4.60 :        400a26:       cltq   \\n    0.00 :        400a28:       add    %rax,-0x30(%rbp)\\n...\\n</code>', '<code>data[c] &gt;= 128</code>', '<code>c &lt; arraySize</code>', '<code>for (int i=0; i&lt;array.Length; ++i)\\n   // use array[i]\\n</code>', '<code>&amp; 0x[something]FFF</code>', '<code>// generate data\\nint arraySize = 32768;\\nint[] data = new int[arraySize];\\n\\nRandom rnd = new Random(0);\\nfor (int c = 0; c &lt; arraySize; ++c)\\n    data[c] = rnd.Next(256);\\n\\n\\n// Too keep the spirit of the code in-tact I\\'ll make a separate lookup table\\n// (I assume we cannot modify \\'data\\' or the number of loops)\\nint[] lookup = new int[256];\\n\\nfor (int c = 0; c &lt; 256; ++c)\\n    lookup[c] = (c &gt;= 128) ? c : 0;\\n\\n// test\\nDateTime startTime = System.DateTime.Now;\\nlong sum = 0;\\n\\nfor (int i = 0; i &lt; 100000; ++i)\\n{\\n    // primary loop\\n    for (int j = 0; j &lt; arraySize; ++j)\\n    {\\n        // here you basically want to use simple operations - so no \\n        // random branches, but things like &amp;, |, *, -, +, etc are fine.\\n        sum += lookup[data[j]];\\n    }\\n}\\n\\nDateTime endTime = System.DateTime.Now;\\nConsole.WriteLine(endTime - startTime);\\nConsole.WriteLine(\"sum = \" + sum);\\n\\nConsole.ReadLine();\\n</code>', '<code>sum += lookup[data[j]]</code>', '<code>lookup</code>', '<code>if (data[c] &gt;= 128)\\n    sum += data[c];\\n</code>', '<code>for (int i = 0; i &lt; max; i++) if (condition) sum++;\\n</code>', '<code>Condition           Pattern              Time (ms)\\n\\n(i &amp; 0\u00d780000000) == 0   T repeated        322\\n\\n(i &amp; 0xffffffff) == 0   F repeated        276\\n\\n(i &amp; 1) == 0            TF alternating    760\\n\\n(i &amp; 3) == 0            TFFFTFFF\u2026         513\\n\\n(i &amp; 2) == 0            TTFFTTFF\u2026         1675\\n\\n(i &amp; 4) == 0            TTTTFFFFTTTTFFFF\u2026 1275\\n\\n(i &amp; 8) == 0            8T 8F 8T 8F \u2026     752\\n\\n(i &amp; 16) == 0           16T 16F 16T 16F \u2026 490\\n</code>', '<code>// Test\\nclock_t start = clock();\\nlong long a[] = {0, 0};\\nlong long sum;\\n\\nfor (unsigned i = 0; i &lt; 100000; ++i)\\n{\\n    // Primary loop\\n    for (unsigned c = 0; c &lt; arraySize; ++c)\\n    {\\n        int j = (data[c] &gt;&gt; 7);\\n        a[j] += data[c];\\n    }\\n}\\n\\ndouble elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;\\nsum = a[1];\\n</code>', '<code>lut</code>', '<code>// declare and then fill in the lookup table\\nint lut[256];\\nfor (unsigned c = 0; c &lt; 256; ++c)\\n    lut[c] = (c &gt;= 128) ? c : 0;\\n\\n// use the lookup table after it is built\\nfor (unsigned i = 0; i &lt; 100000; ++i)\\n{\\n    // Primary loop\\n    for (unsigned c = 0; c &lt; arraySize; ++c)\\n    {\\n        sum += lut[data[c]];\\n    }\\n}\\n</code>', '<code>if</code>', '<code>pLeft</code>', '<code>pRight</code>', '<code>if (x &lt; node-&gt;value)\\n    node = node-&gt;pLeft;\\nelse\\n    node = node-&gt;pRight;\\n</code>', '<code>i = (x &lt; node-&gt;value);\\nnode = node-&gt;link[i];\\n</code>', '<code>data[c]&gt;&gt;7</code>', '<code>typeof(int) = 4</code>', '<code>sizeof(int) == 4</code>', '<code>j</code>', '<code>j</code>', '<code>1-j</code>', '<code>j</code>', '<code>int c = data[j]; sum += c &amp; -(c &gt;&gt; 7);</code>', '<code>data &lt; 128</code>', '<code>data &gt;= 128</code>', '<code>Lg(arraySize) = 15</code>', '<code>int i= 0, j, k= arraySize;\\nwhile (i &lt; k)\\n{\\n  j= (i + k) &gt;&gt; 1;\\n  if (data[j] &gt;= 128)\\n    k= j;\\n  else\\n    i= j;\\n}\\nsum= 0;\\nfor (; i &lt; arraySize; i++)\\n  sum+= data[i];\\n</code>', '<code>int i, k, j= (i + k) &gt;&gt; 1;\\nfor (i= 0, k= arraySize; i &lt; k; (data[j] &gt;= 128 ? k : i)= j)\\n  j= (i + k) &gt;&gt; 1;\\nfor (sum= 0; i &lt; arraySize; i++)\\n  sum+= data[i];\\n</code>', '<code>sum= 3137536;</code>', '<code>sum= 3137536</code>', '<code>std::partition</code>', '<code>std::sort</code>', '<code>                        A) if (data[c] &gt;= 128)\\n                                /\\\\\\n                               /  \\\\\\n                              /    \\\\\\n                        true /      \\\\ false\\n                            /        \\\\\\n                           /          \\\\\\n                          /            \\\\\\n                         /              \\\\\\n              B) sum += data[c];          C) for loop or print().\\n</code>', '<code>data[c] = std::rand() % 256;\\n</code>', '<code>std::rand()</code>', '<code>if (likely( everything_is_ok ))\\n{\\n    /* Do something */\\n}\\n</code>', '<code>if (unlikely(very_improbable_condition))\\n{\\n    /* Do something */    \\n}\\n</code>', '<code>likely()</code>', '<code>unlikely()</code>', '<code>__builtin_expect</code>', '<code>0</code>', '<code>false</code>', '<code>1</code>', '<code>true</code>', '<code>0</code>', '<code>1</code>', '<code>0</code>', '<code>1</code>', '<code>bool a, b, c, d;\\nc = a &amp;&amp; b;\\nd = a || b;\\n</code>', '<code>bool a, b, c, d;\\nif (a != 0) {\\n    if (b != 0) {\\n        c = 1;\\n    }\\n    else {\\n        goto CFALSE;\\n    }\\n}\\nelse {\\n    CFALSE:\\n    c = 0;\\n}\\nif (a == 0) {\\n    if (b == 0) {\\n        d = 0;\\n    }\\n    else {\\n        goto DTRUE;\\n    }\\n}\\nelse {\\n    DTRUE:\\n    d = 1;\\n}\\n</code>', '<code>0</code>', '<code>1</code>', '<code>a</code>', '<code>b</code>', '<code>char a = 0, b = 1, c, d;\\nc = a &amp; b;\\nd = a | b;\\n</code>', '<code>char</code>', '<code>bool</code>', '<code>&amp;</code>', '<code>|</code>', '<code>&amp;&amp;</code>', '<code>||</code>', '<code>|</code>', '<code>a</code>', '<code>b</code>', '<code>0</code>', '<code>1</code>', '<code>&amp;</code>', '<code>^</code>', '<code>0</code>', '<code>1</code>', '<code>~</code>', '<code>0</code>', '<code>1</code>', '<code>1</code>', '<code>bool a, b;\\nb = !a;\\n</code>', '<code>char a = 0, b;\\nb = a ^ 1;\\n</code>', '<code>a &amp;&amp; b</code>', '<code>a &amp; b</code>', '<code>b</code>', '<code>a</code>', '<code>false</code>', '<code>&amp;&amp;</code>', '<code>b</code>', '<code>&amp;</code>', '<code>a || b</code>', '<code>a | b</code>', '<code>b</code>', '<code>a</code>', '<code>true</code>', '<code>bool a; double x, y, z;\\na = x &gt; y &amp;&amp; z &lt; 5.0;\\n</code>', '<code>&amp;&amp;</code>', '<code>data[c] &gt;= 128</code>', '<code>if (expression)\\n{\\n    // run 1\\n} else {\\n    // run 2\\n}\\n</code>', '<code>if-else</code>', '<code>switch</code>', '<code>if</code>', '<code>if</code>', '<code> O       route1  /-------------------------------\\n/|\\\\             /\\n |  ---------##/    \\n/ \\\\            \\\\ \\n                \\\\\\n         route2  \\\\--------------------------------\\n</code>', '<code> // sort backwards (higher values first)\\n std::sort(data, data + arraySize, std::greater&lt;int&gt;());\\n\\n for (unsigned c = 0; c &lt; arraySize; ++c)\\n {\\n       if (data[c] &lt; 128)\\n              break;\\n       sum += data[c];               \\n }\\n</code>', '<code>MOV R0, #0     // R0 = sum = 0\\nMOV R1, #0     // R1 = c = 0\\nADR R2, data   // R2 = addr of data array (put this instruction outside outer loop)\\n.inner_loop    // Inner loop branch label\\n    LDRB R3, [R2, R1]     // R3 = data[c]\\n    CMP R3, #128          // compare R3 to 128\\n    ADDGE R0, R0, R3      // if R3 &gt;= 128, then sum += data[c] -- no branch needed!\\n    ADD R1, R1, #1        // c++\\n    CMP R1, #arraySize    // compare c to arraySize\\n    BLT inner_loop        // Branch to inner_loop if c &lt; arraySize\\n</code>']",
         "body_markdown": "Here is a piece of C++ code that seems very peculiar. For some strange reason, sorting the data miraculously makes the code almost six times faster.\r\n\r\n&lt;!-- language: lang-cpp --&gt;\r\n\r\n    #include &lt;algorithm&gt;\r\n    #include &lt;ctime&gt;\r\n    #include &lt;iostream&gt;\r\n\r\n    int main()\r\n    {\r\n        // Generate data\r\n        const unsigned arraySize = 32768;\r\n        int data[arraySize];\r\n\r\n        for (unsigned c = 0; c &lt; arraySize; ++c)\r\n            data[c] = std::rand() % 256;\r\n\r\n        // !!! With this, the next loop runs faster\r\n        std::sort(data, data + arraySize);\r\n\r\n        // Test\r\n        clock_t start = clock();\r\n        long long sum = 0;\r\n\r\n        for (unsigned i = 0; i &lt; 100000; ++i)\r\n        {\r\n            // Primary loop\r\n            for (unsigned c = 0; c &lt; arraySize; ++c)\r\n            {\r\n                if (data[c] &gt;= 128)\r\n                    sum += data[c];\r\n            }\r\n        }\r\n\r\n        double elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;\r\n\r\n        std::cout &lt;&lt; elapsedTime &lt;&lt; std::endl;\r\n        std::cout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; std::endl;\r\n    }\r\n\r\n - Without `std::sort(data, data + arraySize);`, the code runs in 11.54 seconds.\r\n - With the sorted data, the code runs in 1.93 seconds.\r\n\r\nInitially, I thought this might be just a language or compiler anomaly. So I tried it in Java.\r\n\r\n&lt;!-- language: lang-java --&gt;\r\n\r\n    import java.util.Arrays;\r\n    import java.util.Random;\r\n\r\n    public class Main\r\n    {\r\n        public static void main(String[] args)\r\n        {\r\n            // Generate data\r\n            int arraySize = 32768;\r\n            int data[] = new int[arraySize];\r\n\r\n            Random rnd = new Random(0);\r\n            for (int c = 0; c &lt; arraySize; ++c)\r\n                data[c] = rnd.nextInt() % 256;\r\n\r\n            // !!! With this, the next loop runs faster\r\n            Arrays.sort(data);\r\n\r\n            // Test\r\n            long start = System.nanoTime();\r\n            long sum = 0;\r\n\r\n            for (int i = 0; i &lt; 100000; ++i)\r\n            {\r\n                // Primary loop\r\n                for (int c = 0; c &lt; arraySize; ++c)\r\n                {\r\n                    if (data[c] &gt;= 128)\r\n                        sum += data[c];\r\n                }\r\n            }\r\n\r\n            System.out.println((System.nanoTime() - start) / 1000000000.0);\r\n            System.out.println(&quot;sum = &quot; + sum);\r\n        }\r\n    }\r\n\r\nWith a somewhat similar but less extreme result.\r\n\r\n----------\r\n\r\nMy first thought was that sorting brings the data into the cache, but then I thought how silly that is because the array was just generated.\r\n\r\n - What is going on?\r\n - Why is it faster to process a sorted array than an unsorted array?\r\n - The code is summing up some independent terms, and the order should not matter.\r\n\r\n",
         "up_vote_count": "20754",
         "view_count": "1167058",
         "id": "8587033-0",
         "answer_count": "21",
         "tags": "['java', 'c++', 'performance', 'optimization', 'branch-prediction']",
         "path": "2.stack",
         "_childDocuments_": [
            {
               "answer_id": 11227877,
               "score": 3452,
               "body_markdown": "**Branch prediction.**\r\n\r\n With a sorted array, the condition `data[c] &gt;= 128` is first `false` for a streak of values, then becomes `true` for all later values. That&#39;s easy to predict. With an unsorted array, you pay for the branching cost.",
               "up_vote_count": 3465,
               "down_vote_count": 13,
               "id": "11227877",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1340805285,
               "last_edit_date": 1470383590,
               "last_activity_date": 1470383590
            },
            {
               "answer_id": 11227902,
               "score": 27459,
               "body_markdown": "**You are a victim of [branch prediction][1] fail.**\r\n\r\n----------\r\n\r\n##What is Branch Prediction?\r\n \r\nConsider a railroad junction:\r\n\r\n[![Licensed Image][2]][5]\r\n&lt;sub&gt;[Image][5] by Mecanismo, via Wikimedia Commons. Used under the [CC-By-SA 3.0](//creativecommons.org/licenses/by-sa/3.0/deed.en) license.&lt;/sub&gt;\r\n\r\nNow for the sake of argument, suppose this is back in the 1800s - before long distance or radio communication.\r\n\r\nYou are the operator of a junction and you hear a train coming. You have no idea which way it is supposed to go. You stop the train to ask the driver which direction they want. And then you set the switch appropriately.\r\n\r\n*Trains are heavy and have a lot of inertia. So they take forever to start up and slow down.*\r\n\r\nIs there a better way? You guess which direction the train will go!\r\n\r\n - If you guessed right, it continues on.\r\n - If you guessed wrong, the captain will stop, back up, and yell at you to flip the switch. Then it can restart down the other path.\r\n\r\n**If you guess right every time**, the train will never have to stop.&lt;br&gt;\r\n**If you guess wrong too often**, the train will spend a lot of time stopping, backing up, and restarting.\r\n\r\n----------\r\n\r\n**Consider an if-statement:** At the processor level, it is a branch instruction:\r\n\r\n![image2][3]\r\n\r\nYou are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.\r\n\r\n*Modern processors are complicated and have long pipelines. So they take forever to &quot;warm up&quot; and &quot;slow down&quot;.*\r\n\r\nIs there a better way? You guess which direction the branch will go!\r\n\r\n - If you guessed right, you continue executing.\r\n - If you guessed wrong, you need to flush the pipeline and roll back to the branch. Then you can restart down the other path.\r\n\r\n**If you guess right every time**, the execution will never have to stop.&lt;br&gt;\r\n**If you guess wrong too often**, you spend a lot of time stalling, rolling back, and restarting.\r\n\r\n----------\r\n\r\nThis is branch prediction. I admit it&#39;s not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn&#39;t know which direction a branch will go until the last moment.\r\n\r\nSo how would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every 3 times, you guess the same...\r\n\r\n***In other words, you try to identify a pattern and follow it.*** This is more or less how branch predictors work.\r\n\r\nMost applications have well-behaved branches. So modern branch predictors will typically achieve &gt;90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.\r\n\r\nFurther reading: [&quot;Branch predictor&quot; article on Wikipedia][1].\r\n\r\n----------\r\n\r\n##As hinted from above, the culprit is this if-statement:\r\n\r\n    if (data[c] &gt;= 128)\r\n        sum += data[c];\r\n\r\nNotice that the data is evenly distributed between 0 and 255. \r\nWhen the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.\r\n\r\nThis is very friendly to the branch predictor since the branch consecutively goes the same direction many times.\r\nEven a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.\r\n\r\n**Quick visualization:**\r\n\r\n    T = branch taken\r\n    N = branch not taken\r\n\r\n    data[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...\r\n    branch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...\r\n\r\n           = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)\r\n\r\nHowever, when the data is completely random, the branch predictor is rendered useless because it can&#39;t predict random data.\r\nThus there will probably be around 50% misprediction. (no better than random guessing)\r\n\r\n    data[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, 133, ...\r\n    branch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T,   N  ...\r\n\r\n           = TTNTTTTNTNNTTTN ...   (completely random - hard to predict)\r\n\r\n----------\r\n\r\n**So what can be done?**\r\n\r\nIf the compiler isn&#39;t able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.\r\n\r\nReplace:\r\n\r\n    if (data[c] &gt;= 128)\r\n        sum += data[c];\r\n\r\nwith:\r\n\r\n    int t = (data[c] - 128) &gt;&gt; 31;\r\n    sum += ~t &amp; data[c];\r\n\r\nThis eliminates the branch and replaces it with some bitwise operations.\r\n\r\n&lt;sub&gt;(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it&#39;s valid for all the input values of `data[]`.)&lt;/sub&gt;\r\n\r\n**Benchmarks: Core i7 920 @ 3.5 GHz**\r\n\r\nC++ - Visual Studio 2010 - x64 Release\r\n\r\n    //  Branch - Random\r\n    seconds = 11.777\r\n\r\n    //  Branch - Sorted\r\n    seconds = 2.352\r\n\r\n    //  Branchless - Random\r\n    seconds = 2.564\r\n\r\n    //  Branchless - Sorted\r\n    seconds = 2.587\r\n\r\nJava - Netbeans 7.1.1 JDK 7 - x64\r\n\r\n    //  Branch - Random\r\n    seconds = 10.93293813\r\n\r\n    //  Branch - Sorted\r\n    seconds = 5.643797077\r\n\r\n    //  Branchless - Random\r\n    seconds = 3.113581453\r\n\r\n    //  Branchless - Sorted\r\n    seconds = 3.186068823\r\n\r\nObservations:\r\n\r\n - **With the Branch:** There is a huge difference between the sorted and unsorted data.\r\n - **With the Hack:** There is no difference between sorted and unsorted data.\r\n - In the C++ case, the hack is actually a tad slower than with the branch when the data is sorted.\r\n\r\nA general rule of thumb is to avoid data-dependent branching in critical loops. (such as in this example)\r\n\r\n----------\r\n\r\n**Update:**\r\n\r\n - GCC 4.6.1 with `-O3` or `-ftree-vectorize` on x64 is able to generate a conditional move. So there is no difference between the sorted and unsorted data - both are fast.\r\n\r\n - VC++ 2010 is unable to generate conditional moves for this branch even under `/Ox`.\r\n\r\n - Intel Compiler 11 does something miraculous. It [interchanges the two loops][4], thereby hoisting the unpredictable branch to the outer loop. So not only is it immune the mispredictions, it is also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...\r\n\r\n - If you give the Intel Compiler the branchless code, it just out-right vectorizes it... and is just as fast as with the branch (with the loop interchange).\r\n\r\nThis goes to show that even mature modern compilers can vary wildly in their ability to optimize code...\r\n\r\n\r\n  [1]: //en.wikipedia.org/wiki/Branch_predictor\r\n  [2]: //i.stack.imgur.com/muxnt.jpg\r\n  [3]: //i.stack.imgur.com/pyfwC.png\r\n  [4]: //en.wikipedia.org/wiki/Loop_interchange\r\n  [5]: //commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG",
               "up_vote_count": 27478,
               "down_vote_count": 19,
               "id": "11227902",
               "tags": [],
               "is_accepted": true,
               "path": "3.stack.answer",
               "creation_date": 1340805402,
               "last_edit_date": 1519187096,
               "last_activity_date": 1519187096
            },
            {
               "answer_id": 11237235,
               "score": 2802,
               "body_markdown": "The reason why performance improves drastically when the data is sorted is that the branch prediction penalty is removed, as explained beautifully in [Mysticial][1]&#39;s answer.\r\n\r\nNow, if we look at the code\r\n\r\n    if (data[c] &gt;= 128)\r\n        sum += data[c];\r\n\r\nwe can find that the meaning of this particular `if... else...` branch is to add something when a condition is satisfied. This type of branch can be easily transformed into a **conditional move** statement, which would be compiled into a conditional move instruction: `cmovl`, in an `x86` system. The branch and thus the potential branch prediction penalty is removed.\r\n\r\nIn `C`, thus `C++`, the statement, which would compile directly (without any optimization) into the conditional move instruction in `x86`, is the ternary operator `... ? ... : ...`. So we rewrite the above statement into an equivalent one:\r\n\r\n    sum += data[c] &gt;=128 ? data[c] : 0;\r\n\r\nWhile maintaining readability, we can check the speedup factor.\r\n\r\nOn an Intel [Core i7][2]-2600K @ 3.4&amp;nbsp;GHz and Visual Studio 2010 Release Mode, the benchmark is (format copied from Mysticial):\r\n\r\n**x86**\r\n\r\n    //  Branch - Random\r\n    seconds = 8.885\r\n\r\n    //  Branch - Sorted\r\n    seconds = 1.528\r\n\r\n    //  Branchless - Random\r\n    seconds = 3.716\r\n\r\n    //  Branchless - Sorted\r\n    seconds = 3.71\r\n\r\n**x64**\r\n\r\n    //  Branch - Random\r\n    seconds = 11.302\r\n\r\n    //  Branch - Sorted\r\n     seconds = 1.830\r\n\r\n    //  Branchless - Random\r\n    seconds = 2.736\r\n\r\n    //  Branchless - Sorted\r\n    seconds = 2.737\r\n\r\nThe result is robust in multiple tests. We get a great speedup when the branch result is unpredictable, but we suffer a little bit when it is predictable. In fact, when using a conditional move, the performance is the same regardless of the data pattern.\r\n\r\nNow let&#39;s look more closely by investigating the `x86` assembly they generate. For simplicity, we use two functions `max1` and `max2`.\r\n\r\n`max1` uses the conditional branch `if... else ...`:\r\n\r\n    int max1(int a, int b) {\r\n        if (a &gt; b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n`max2` uses the ternary operator `... ? ... : ...`:\r\n\r\n    int max2(int a, int b) {\r\n        return a &gt; b ? a : b;\r\n    }\r\n\r\nOn a x86-64 machine, `GCC -S` generates the assembly below.\r\n\r\n    :max1\r\n        movl    %edi, -4(%rbp)\r\n        movl    %esi, -8(%rbp)\r\n        movl    -4(%rbp), %eax\r\n        cmpl    -8(%rbp), %eax\r\n        jle     .L2\r\n        movl    -4(%rbp), %eax\r\n        movl    %eax, -12(%rbp)\r\n        jmp     .L4\r\n    .L2:\r\n        movl    -8(%rbp), %eax\r\n        movl    %eax, -12(%rbp)\r\n    .L4:\r\n        movl    -12(%rbp), %eax\r\n        leave\r\n        ret\r\n\r\n    :max2\r\n        movl    %edi, -4(%rbp)\r\n        movl    %esi, -8(%rbp)\r\n        movl    -4(%rbp), %eax\r\n        cmpl    %eax, -8(%rbp)\r\n        cmovge  -8(%rbp), %eax\r\n        leave\r\n        ret\r\n\r\n`max2` uses much less code due to the usage of instruction `cmovge`. But the real gain is that `max2` does not involve branch jumps, `jmp`, which would have a significant performance penalty if the predicted result is not right.\r\n\r\nSo why does a conditional move perform better?\r\n\r\nIn a typical `x86` processor, the execution of an instruction is divided into several stages. Roughly, we have different hardware to deal with different stages. So we do not have to wait for one instruction to finish to start a new one. This is called **[pipelining][3]**.\r\n\r\nIn a branch case, the following instruction is determined by the preceding one, so we cannot do pipelining. We have to either wait or predict.\r\n\r\nIn a conditional move case, the execution conditional move instruction is divided into several stages, but the earlier stages like `Fetch` and `Decode` does not depend on the result of the previous instruction; only latter stages need the result. Thus, we wait a fraction of one instruction&#39;s execution time. This is why the conditional move version is slower than the branch when prediction is easy.\r\n\r\nThe book *[Computer Systems: A Programmer&#39;s Perspective, second edition][4]* explains this in detail. You can check Section 3.6.6 for *Conditional Move Instructions*, entire Chapter 4 for *Processor Architecture*, and Section 5.11.2 for a special treatment for *Branch Prediction and Misprediction Penalties*.\r\n\r\nSometimes, some modern compilers can optimize our code to assembly with better performance, sometimes some compilers can&#39;t (the code in question is using Visual Studio&#39;s native compiler). Knowing the performance difference between branch and conditional move when unpredictable can help us write code with better performance when the scenario gets so complex that the compiler can not optimize them automatically.\r\n\r\n  [1]: https://stackoverflow.com/users/922184/mysticial\r\n  [2]: http://en.wikipedia.org/wiki/Intel_Core#Core_i7\r\n  [3]: http://en.wikipedia.org/wiki/Pipeline_%28computing%29\r\n  [4]: http://www.amazon.com/Computer-Systems-Programmers-Perspective-Edition/dp/0136108040/\r\n",
               "up_vote_count": 2813,
               "down_vote_count": 11,
               "id": "11237235",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1340849643,
               "last_edit_date": 1495540989,
               "last_activity_date": 1479089100
            },
            {
               "answer_id": 11303693,
               "score": 1917,
               "body_markdown": "If you are curious about even more optimizations that can be done to this code, consider this:\r\n\r\nStarting with the original loop:\r\n\r\n    for (unsigned i = 0; i &lt; 100000; ++i)\r\n    {\r\n        for (unsigned j = 0; j &lt; arraySize; ++j)\r\n        {\r\n            if (data[j] &gt;= 128)\r\n                sum += data[j];\r\n        }\r\n    }\r\n\r\nWith loop interchange, we can safely change this loop to:\r\n\r\n    for (unsigned j = 0; j &lt; arraySize; ++j)\r\n    {\r\n        for (unsigned i = 0; i &lt; 100000; ++i)\r\n        {\r\n            if (data[j] &gt;= 128)\r\n                sum += data[j];\r\n        }\r\n    }\r\n\r\nThen, you can see that the `if` conditional is constant throughout the execution of the `i` loop, so you can hoist the `if` out:\r\n\r\n    for (unsigned j = 0; j &lt; arraySize; ++j)\r\n    {\r\n        if (data[j] &gt;= 128)\r\n        {\r\n            for (unsigned i = 0; i &lt; 100000; ++i)\r\n            {\r\n                sum += data[j];\r\n            }\r\n        }\r\n    }\r\n\r\nThen, you see that the inner loop can be collapsed into one single expression, assuming the floating point model allows it (/fp:fast is thrown, for example)\r\n\r\n    for (unsigned j = 0; j &lt; arraySize; ++j)\r\n    {\r\n        if (data[j] &gt;= 128)\r\n        {\r\n            sum += data[j] * 100000;\r\n        }\r\n    }\r\n\r\nThat one is 100,000x faster than before \r\n",
               "up_vote_count": 1938,
               "down_vote_count": 21,
               "id": "11303693",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1341282330,
               "last_edit_date": 1500210560,
               "last_activity_date": 1500210560
            },
            {
               "answer_id": 12853037,
               "score": 1597,
               "body_markdown": "No doubt some of us would be interested in ways of identifying code that is problematic for the CPU&#39;s branch-predictor. The Valgrind tool `cachegrind` has a branch-predictor simulator, enabled by using the `--branch-sim=yes` flag. Running it over the examples in this question, with the number of outer loops reduced to 10000 and compiled with `g++`, gives these results:\r\n\r\n**Sorted:**\r\n\r\n    ==32551== Branches:        656,645,130  (  656,609,208 cond +    35,922 ind)\r\n    ==32551== Mispredicts:         169,556  (      169,095 cond +       461 ind)\r\n    ==32551== Mispred rate:            0.0% (          0.0%     +       1.2%   )\r\n\r\n**Unsorted:**\r\n\r\n    ==32555== Branches:        655,996,082  (  655,960,160 cond +  35,922 ind)\r\n    ==32555== Mispredicts:     164,073,152  (  164,072,692 cond +     460 ind)\r\n    ==32555== Mispred rate:           25.0% (         25.0%     +     1.2%   )\r\n\r\nDrilling down into the line-by-line output produced by `cg_annotate` we see for the loop in question:\r\n\r\n**Sorted:**\r\n\r\n              Bc    Bcm Bi Bim\r\n          10,001      4  0   0      for (unsigned i = 0; i &lt; 10000; ++i)\r\n               .      .  .   .      {\r\n               .      .  .   .          // primary loop\r\n     327,690,000 10,016  0   0          for (unsigned c = 0; c &lt; arraySize; ++c)\r\n               .      .  .   .          {\r\n     327,680,000 10,006  0   0              if (data[c] &gt;= 128)\r\n               0      0  0   0                  sum += data[c];\r\n               .      .  .   .          }\r\n               .      .  .   .      }\r\n\r\n**Unsorted:**\r\n\r\n              Bc         Bcm Bi Bim\r\n          10,001           4  0   0      for (unsigned i = 0; i &lt; 10000; ++i)\r\n               .           .  .   .      {\r\n               .           .  .   .          // primary loop\r\n     327,690,000      10,038  0   0          for (unsigned c = 0; c &lt; arraySize; ++c)\r\n               .           .  .   .          {\r\n     327,680,000 164,050,007  0   0              if (data[c] &gt;= 128)\r\n               0           0  0   0                  sum += data[c];\r\n               .           .  .   .          }\r\n               .           .  .   .      }\r\n\r\nThis lets you easily identify the problematic line - in the unsorted version the `if (data[c] &gt;= 128)` line is causing 164,050,007 mispredicted conditional branches (`Bcm`) under cachegrind&#39;s branch-predictor model, whereas it&#39;s only causing 10,006 in the sorted version.\r\n\r\n----------\r\n\r\nAlternatively, on Linux you can use the performance counters subsystem to accomplish the same task, but with native performance using CPU counters.\r\n\r\n    perf stat ./sumtest_sorted\r\n\r\n**Sorted:**\r\n\r\n     Performance counter stats for &#39;./sumtest_sorted&#39;:\r\n\r\n      11808.095776 task-clock                #    0.998 CPUs utilized          \r\n             1,062 context-switches          #    0.090 K/sec                  \r\n                14 CPU-migrations            #    0.001 K/sec                  \r\n               337 page-faults               #    0.029 K/sec                  \r\n    26,487,882,764 cycles                    #    2.243 GHz                    \r\n    41,025,654,322 instructions              #    1.55  insns per cycle        \r\n     6,558,871,379 branches                  #  555.455 M/sec                  \r\n           567,204 branch-misses             #    0.01% of all branches        \r\n\r\n      11.827228330 seconds time elapsed\r\n\r\n**Unsorted:**\r\n\r\n     Performance counter stats for &#39;./sumtest_unsorted&#39;:\r\n\r\n      28877.954344 task-clock                #    0.998 CPUs utilized          \r\n             2,584 context-switches          #    0.089 K/sec                  \r\n                18 CPU-migrations            #    0.001 K/sec                  \r\n               335 page-faults               #    0.012 K/sec                  \r\n    65,076,127,595 cycles                    #    2.253 GHz                    \r\n    41,032,528,741 instructions              #    0.63  insns per cycle        \r\n     6,560,579,013 branches                  #  227.183 M/sec                  \r\n     1,646,394,749 branch-misses             #   25.10% of all branches        \r\n\r\n      28.935500947 seconds time elapsed\r\n\r\nIt can also do source code annotation with dissassembly.\r\n\r\n    perf record -e branch-misses ./sumtest_unsorted\r\n    perf annotate -d sumtest_unsorted\r\n&lt;div&gt;&lt;/div&gt;\r\n     Percent |      Source code &amp; Disassembly of sumtest_unsorted\r\n    ------------------------------------------------\r\n    ...\r\n             :                      sum += data[c];\r\n        0.00 :        400a1a:       mov    -0x14(%rbp),%eax\r\n       39.97 :        400a1d:       mov    %eax,%eax\r\n        5.31 :        400a1f:       mov    -0x20040(%rbp,%rax,4),%eax\r\n        4.60 :        400a26:       cltq   \r\n        0.00 :        400a28:       add    %rax,-0x30(%rbp)\r\n    ...\r\n\r\nSee [the performance tutorial][1] for more details.\r\n\r\n  [1]: https://perf.wiki.kernel.org/index.php/Tutorial\r\n",
               "up_vote_count": 1600,
               "down_vote_count": 3,
               "id": "12853037",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1350021213,
               "last_edit_date": 1350588021,
               "last_activity_date": 1350588021
            },
            {
               "answer_id": 14889969,
               "score": 954,
               "body_markdown": "As data is distributed between 0 and 255 when array is sorted, around first half of the iterations will not enter the if-statement (if statement shared below).\r\n\r\n    if (data[c] &gt;= 128)\r\n        sum += data[c];\r\n\r\nQuestion is what make the above statement not execute in certain case as in case of sorted data? Here comes the &quot;Branch predictor&quot; a branch predictor is a digital circuit that tries to guess which way a branch (e.g. an if-then-else structure) will go before this is known for sure. The purpose of the branch predictor is to improve the flow in the instruction pipeline. Branch predictors play a critical role in achieving high effective performance!\r\n\r\n**Lets do some bench marking to understand it better**\r\n\r\nThe performance of an if-statement depends on whether its condition has a predictable pattern. If the condition is always true or always false, the branch prediction logic in the processor will pick up the pattern. On the other hand, if the pattern is unpredictable, the if-statement will be much more expensive.\r\n\r\nLet\u2019s measure the performance of this loop with different conditions:\r\n\r\n    for (int i = 0; i &lt; max; i++) if (condition) sum++;\r\n\r\nHere are the timings of the loop with different True-False patterns:\r\n\r\n\r\n    Condition\t        Pattern\t             Time (ms)\r\n    \r\n    (i &amp; 0&#215;80000000) == 0\tT repeated\t      322\r\n    \r\n    (i &amp; 0xffffffff) == 0\tF repeated\t      276\r\n    \r\n    (i &amp; 1) == 0\t        TF alternating    760\r\n    \r\n    (i &amp; 3) == 0\t        TFFFTFFF\u2026\t      513\r\n    \r\n    (i &amp; 2) == 0\t        TTFFTTFF\u2026\t      1675\r\n    \r\n    (i &amp; 4) == 0\t        TTTTFFFFTTTTFFFF\u2026 1275\r\n    \r\n    (i &amp; 8) == 0\t        8T 8F 8T 8F \u2026     752\r\n    \r\n    (i &amp; 16) == 0\t        16T 16F 16T 16F \u2026 490\r\n\r\nA \u201c**bad**\u201d true-false pattern can make an if-statement up to six times slower than a \u201c**good**\u201d pattern! Of course, which pattern is good and which is bad depends on the exact instructions generated by the compiler and on the specific processor.\r\n\r\nSo there is no doubt about impact of branch prediction on performance!",
               "up_vote_count": 956,
               "down_vote_count": 2,
               "id": "14889969",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1360913056,
               "last_edit_date": 1363954810,
               "last_activity_date": 1363954810
            },
            {
               "answer_id": 16184827,
               "score": 1071,
               "body_markdown": "Just read up on the thread and I feel an answer is missing. A common way to eliminate branch prediction that I&#39;ve found to work particularly good in managed languages is a table lookup instead of using a branch. (although I haven&#39;t tested it in this case)\r\n\r\nThis approach works in general if:\r\n\r\n1. It&#39;s a small table and is likely to be cached in the processor\r\n2. You are running things in a quite tight loop and/or the processor can pre-load the data\r\n\r\n**Background and why**\r\n\r\nPfew, so what the hell is that supposed to mean?\r\n\r\nFrom a processor perspective, your memory is slow. To compensate for the difference in speed, they build in a couple of caches in your processor (L1/L2 cache) that compensate for that. So imagine that you&#39;re doing your nice calculations and figure out that you need a piece of memory. The processor will get his &#39;load&#39; operation and loads the piece of memory into cache - and then uses the cache to do the rest of the calculations. Because memory is relatively slow, this &#39;load&#39; will slow down your program. \r\n\r\nLike branch prediction, this was optimized in the Pentium processors: the processor predicts that it needs to load a piece of data and attempts to load that into the cache before the operation actually hits the cache. As we&#39;ve already seen, branch prediction sometimes goes horribly wrong -- in the worst case scenario you need to go back and actually wait for a memory load, which will take forever (**in other words: failing branch prediction is bad, a memory load after a branch prediction fail is just horrible!**).\r\n\r\nFortunately for us, if the memory access pattern is predictable, the processor will load it in its fast cache and all is well.\r\n\r\nFirst thing we need to know is what is *small*? While smaller is generally better, a rule of thumb is to stick to lookup tables that are &lt;=4096 bytes in size. As an upper limit: if your lookup table is larger than 64K it&#39;s probably worth reconsidering.\r\n\r\n**Constructing a table**\r\n\r\nSo we&#39;ve figured out that we can create a small table. Next thing to do is get a lookup function in place. Lookup functions are usually small functions that use a couple of basic integer operations (and, or, xor, shift, add, remove and perhaps a multiply). What you want is to have your input translated by the lookup function to some kind of &#39;unique key&#39; in your table, which then simply gives you the answer of all the work you wanted it to do.\r\n\r\nIn this case: &gt;=128 means we can keep the value, &lt;128 means we get rid of it. The easiest way to do that is by using an &#39;AND&#39;: if we keep it, we AND it with 7FFFFFFF ; if we want to get rid of it, we AND it with 0. Notice also that 128 is a power of 2 -- so we can go ahead and make a table of 32768/128 integers and fill it with one zero and a lot of 7FFFFFFFF&#39;s.\r\n\r\n**Managed languages**\r\n\r\nYou might wonder why this works well in managed languages. After all, managed languages check the boundaries of the arrays with a branch to ensure you don&#39;t mess up...\r\n\r\nWell, not exactly... :-)\r\n\r\nThere has been quite some work on eliminating this branch for managed languages. For example:\r\n\r\n    for (int i=0; i&lt;array.Length; ++i)\r\n       // use array[i]\r\n\r\nin this case it&#39;s obvious to the compiler that the boundary condition will never hit. At least the Microsoft JIT compiler (but I expect Java does similar things) will notice this and remove the check all together. WOW - that means no branch. Similarly, it will deal with other obvious cases.\r\n\r\nIf you run into trouble with lookups on managed languages - the key is to add a `&amp; 0x[something]FFF` to your lookup function to make the boundary check predictable - and watch it going faster.\r\n\r\n**The result for this case**\r\n\r\n    // generate data\r\n    int arraySize = 32768;\r\n    int[] data = new int[arraySize];\r\n\r\n    Random rnd = new Random(0);\r\n    for (int c = 0; c &lt; arraySize; ++c)\r\n        data[c] = rnd.Next(256);\r\n\r\n\r\n    // Too keep the spirit of the code in-tact I&#39;ll make a separate lookup table\r\n    // (I assume we cannot modify &#39;data&#39; or the number of loops)\r\n    int[] lookup = new int[256];\r\n\r\n    for (int c = 0; c &lt; 256; ++c)\r\n        lookup[c] = (c &gt;= 128) ? c : 0;\r\n\r\n    // test\r\n    DateTime startTime = System.DateTime.Now;\r\n    long sum = 0;\r\n\r\n    for (int i = 0; i &lt; 100000; ++i)\r\n    {\r\n        // primary loop\r\n        for (int j = 0; j &lt; arraySize; ++j)\r\n        {\r\n            // here you basically want to use simple operations - so no \r\n            // random branches, but things like &amp;, |, *, -, +, etc are fine.\r\n            sum += lookup[data[j]];\r\n        }\r\n    }\r\n\r\n    DateTime endTime = System.DateTime.Now;\r\n    Console.WriteLine(endTime - startTime);\r\n    Console.WriteLine(&quot;sum = &quot; + sum);\r\n\r\n    Console.ReadLine();",
               "up_vote_count": 1072,
               "down_vote_count": 1,
               "id": "16184827",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1366784788,
               "last_edit_date": 1395051672,
               "last_activity_date": 1395051672
            },
            {
               "answer_id": 17782979,
               "score": 899,
               "body_markdown": "One way to avoid branch prediction errors is to build a lookup table, and index it using the data.  Stefan de Bruijn discussed that in his answer.\r\n\r\nBut in this case, we know values are in the range [0, 255] and we only care about values &gt;= 128.  That means we can easily extract a single bit that will tell us whether we want a value or not: by shifting the data to the right 7 bits, we are left with a 0 bit or a 1 bit, and we only want to add the value when we have a 1 bit.  Let&#39;s call this bit the &quot;decision bit&quot;.\r\n\r\nBy using the 0/1 value of the decision bit as an index into an array, we can make code that will be equally fast whether the data is sorted or not sorted.  Our code will always add a value, but when the decision bit is 0, we will add the value somewhere we don&#39;t care about.  Here&#39;s the code:\r\n\r\n    // Test\r\n    clock_t start = clock();\r\n    long long a[] = {0, 0};\r\n    long long sum;\r\n\r\n    for (unsigned i = 0; i &lt; 100000; ++i)\r\n    {\r\n        // Primary loop\r\n        for (unsigned c = 0; c &lt; arraySize; ++c)\r\n        {\r\n            int j = (data[c] &gt;&gt; 7);\r\n            a[j] += data[c];\r\n        }\r\n    }\r\n\r\n    double elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;\r\n    sum = a[1];\r\n\r\n\r\nThis code wastes half of the adds, but never has a branch prediction failure.  It&#39;s tremendously faster on random data than the version with an actual if statement.\r\n\r\nBut in my testing, an explicit lookup table was slightly faster than this, probably because indexing into a lookup table was slightly faster than bit shifting.  This shows how my code sets up and uses the lookup table (unimaginatively called `lut` for &quot;LookUp Table&quot; in the code).  Here&#39;s the C++ code:\r\n\r\n    // declare and then fill in the lookup table\r\n    int lut[256];\r\n    for (unsigned c = 0; c &lt; 256; ++c)\r\n        lut[c] = (c &gt;= 128) ? c : 0;\r\n\r\n    // use the lookup table after it is built\r\n    for (unsigned i = 0; i &lt; 100000; ++i)\r\n    {\r\n        // Primary loop\r\n        for (unsigned c = 0; c &lt; arraySize; ++c)\r\n        {\r\n            sum += lut[data[c]];\r\n        }\r\n    }\r\n\r\n\r\nIn this case the lookup table was only 256 bytes, so it fit nicely in cache and all was fast.  This technique wouldn&#39;t work well if the data was 24-bit values and we only wanted half of them... the lookup table would be far too big to be practical.  On the other hand, we can combine the two techniques shown above: first shift the bits over, then index a lookup table.  For a 24-bit value that we only want the top half value, we could potentially shift the data right by 12 bits, and be left with a 12-bit value for a table index.  A 12-bit table index implies a table of 4096 values, which might be practical.\r\n\r\n\r\nEDIT: One thing I forgot to put in.\r\n\r\nThe technique of indexing into an array, instead of using an `if` statement, can be used for deciding which pointer to use.  I saw a library that implemented binary trees, and instead of having two named pointers (`pLeft` and `pRight` or whatever) had a length-2 array of pointers, and used the &quot;decision bit&quot; technique to decide which one to follow.  For example, instead of:\r\n\r\n    if (x &lt; node-&gt;value)\r\n        node = node-&gt;pLeft;\r\n    else\r\n        node = node-&gt;pRight;\r\n\r\nthis library would do something like:\r\n\r\n    i = (x &lt; node-&gt;value);\r\n    node = node-&gt;link[i];\r\n\r\nHere&#39;s a link to this code: [Red Black Trees](http://www.eternallyconfuzzled.com/tuts/datastructures/jsw_tut_rbtree.aspx), *Eternally Confuzzled*\r\n",
               "up_vote_count": 901,
               "down_vote_count": 2,
               "id": "17782979",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1374481770,
               "last_edit_date": 1440357142,
               "last_activity_date": 1440357142
            },
            {
               "answer_id": 17828251,
               "score": 828,
               "body_markdown": "In the sorted case, you can do better than relying on successful branch prediction or any branchless comparison trick: completely remove the branch.\r\n\r\nIndeed, the array is partitioned in a contiguous zone with `data &lt; 128` and another with `data &gt;= 128`. So you should find the partition point with a dichotomic search (using `Lg(arraySize) = 15` comparisons), then do a straight accumulation from that point.\r\n\r\nSomething like (unchecked)\r\n\r\n    int i= 0, j, k= arraySize;\r\n    while (i &lt; k)\r\n    {\r\n      j= (i + k) &gt;&gt; 1;\r\n      if (data[j] &gt;= 128)\r\n        k= j;\r\n      else\r\n        i= j;\r\n    }\r\n    sum= 0;\r\n    for (; i &lt; arraySize; i++)\r\n      sum+= data[i];\r\n\r\nor, slightly more obfuscated\r\n\r\n    int i, k, j= (i + k) &gt;&gt; 1;\r\n    for (i= 0, k= arraySize; i &lt; k; (data[j] &gt;= 128 ? k : i)= j)\r\n      j= (i + k) &gt;&gt; 1;\r\n    for (sum= 0; i &lt; arraySize; i++)\r\n      sum+= data[i];\r\n\r\nA yet faster approach, that gives an **approximate** solution for both sorted or unsorted is: `sum= 3137536;` (assuming a truly uniform distribution, 16384 samples with expected value 191.5) **:-)**\r\n\r\n\r\n\r\n\r\n",
               "up_vote_count": 829,
               "down_vote_count": 1,
               "id": "17828251",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1374652659,
               "last_edit_date": 1429736844,
               "last_activity_date": 1429736844
            },
            {
               "answer_id": 31210295,
               "score": 627,
               "body_markdown": "The above behavior is happening because of Branch prediction.\r\n\r\nTo understand branch prediction one must first understand **Instruction Pipeline**:\r\n\r\nAny instruction is broken into sequence of steps so that different steps can be executed concurrently in parallel. This technique is known as instruction pipeline and this is used to increase throughput in modern processors. To understand this better please see this [example on Wikipedia][1].\r\n\r\nGenerally modern processors have quite long pipelines, but for ease let&#39;s consider these 4 steps only.\r\n&lt;ol&gt;  \r\n  &lt;li&gt;IF -- Fetch the instruction from memory \r\n  &lt;li&gt;ID -- Decode the instruction\r\n  &lt;li&gt;EX -- Execute the instruction \r\n  &lt;li&gt;WB -- Write back to CPU register\r\n&lt;/ol&gt;\r\n ***4-stage pipeline in general for 2 instructions.***\r\n![4-stage pipeline in general][2]\r\n\r\nMoving back to the above question let&#39;s consider the following instructions:\r\n\r\n\t\t\t\t\t\t\tA) if (data[c] &gt;= 128)\r\n\t\t\t\t\t                /\\\r\n\t\t\t\t                   /  \\\r\n\t\t\t\t                  /    \\\r\n                            true /      \\ false\r\n\t\t\t                    /        \\\r\n                               /          \\\r\n                              /            \\\r\n                             /              \\\r\n                  B) sum += data[c];          C) for loop or print().\r\n\r\n\r\nWithout branch prediction the following would occur:\r\n\r\nTo execute instruction B or instruction C the processor will have to wait till the instruction A doesn&#39;t reach till EX stage in the pipeline, as the decision to go to instruction B or instruction C depends on the result of instruction A. So the pipeline will look like this.\r\n\r\n***when if condition returns true:***\r\n![enter image description here][3]\r\n\r\n***When if condition returns false:***\r\n![enter image description here][4]\r\n\r\nAs a result of waiting for the result of instruction A, the total CPU cycles spent in the above case (without branch prediction; for both true and false) is 7.\r\n\r\n**So what is branch prediction?**\r\n\r\nBranch predictor will try to guess which way a branch (an if-then-else structure) will go before this is known for sure. It will not wait for the instruction A to reach the EX stage of the pipeline, but it will guess the decision and go onto that instruction (B or C in case of our example).\r\n\r\n***In case of a correct guess, the pipeline looks something like this:***\r\n![enter image description here][5]\r\n\r\nIf it is later detected that the guess was wrong then the partially executed instructions are discarded and the pipeline starts over with the correct branch, incurring a delay. \r\nThe time that is wasted in case of a branch misprediction is equal to the number of stages in the pipeline from the fetch stage to the execute stage. Modern microprocessors tend to have quite long pipelines so that the misprediction delay is between 10 and 20 clock cycles. The longer the pipeline the greater the need for a good [branch predictor][6].\r\n\r\nIn the OP&#39;s code, the first time when the conditional, the branch predictor does not have any information to base up prediction, so first time it will randomly choose the next instruction. Later in the for loop it can base the prediction on the history. \r\nFor an array sorted in ascending order, there are three possibilities:\r\n&lt;ol&gt;\r\n&lt;li&gt; All the elements are less than 128\r\n&lt;li&gt; All the elements are greater than 128\r\n&lt;li&gt; Some starting new elements are less than 128 and later it become greater than 128\r\n&lt;/ol&gt;\r\n\r\nLet us assume that the predictor will always assume the true branch on the first run.\r\n\r\nSo in the first case it will always take the true branch since historically all its predictions are correct.\r\nIn the 2nd case, initially it will predict wrong, but after a few iterations it will predict correctly.\r\nIn the 3rd case it will initially predict correctly till the elements are less than 128. After which it will fail for some time and the correct itself when it see branch prediction failure in history. \r\n \r\nIn all these cases the failure will be too less in number and as a result only few times it will need to discard the partially executed instructions and start over with the correct branch, resulting in less CPU cycles. \r\n\r\nBut in case of random unsorted array, the prediction will need to discard the partially executed instructions and start over with the correct branch most of the time and result in more CPU cycles compared to the sorted array.\r\n\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Pipeline_(computing)#Concept_and_motivation\r\n  [2]: http://i.stack.imgur.com/PqBBR.png\r\n  [3]: http://i.stack.imgur.com/0H4gP.png\r\n  [4]: http://i.stack.imgur.com/APpca.png\r\n  [5]: http://i.stack.imgur.com/ZYUbs.png\r\n  [6]: https://en.wikipedia.org/wiki/Branch_predictor",
               "up_vote_count": 627,
               "down_vote_count": 0,
               "id": "31210295",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1435937752,
               "last_edit_date": 1503528762,
               "last_activity_date": 1503528762
            },
            {
               "answer_id": 32742980,
               "score": 527,
               "body_markdown": "In the same line (I think this was not highlighted by any answer) it&#39;s good to mention that sometimes (specially in software where the performance matters\u2014like in the Linux kernel) you can find some if statements like the following:\r\n\r\n    if (likely( everything_is_ok ))\r\n    {\r\n        /* Do something */\r\n    }\r\n\r\nor similarly:\r\n\r\n    if (unlikely(very_improbable_condition))\r\n    {\r\n        /* Do something */    \r\n    }\r\n\r\nBoth `likely()` and `unlikely()` are in fact macros that are defined by using something like the GCC&#39;s `__builtin_expect` to help the compiler insert prediction code to favour the condition taking into account the information provided by the user. GCC supports other builtins that could change the behavior of the running program or emit low level instructions like clearing the cache, etc. See [this documentation][1] that goes through the available GCC&#39;s builtins.\r\n\r\nNormally this kind of optimizations are mainly found in hard-real time applications or embedded systems where execution time matters and it&#39;s critical. For example, if you are checking for some error condition that only happens 1/10000000 times, then why not inform the compiler about this? This way, by default, the branch prediction would assume that the condition is false.\r\n\r\n\r\n  [1]: https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html",
               "up_vote_count": 529,
               "down_vote_count": 2,
               "id": "32742980",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1443020267,
               "last_edit_date": 1477650491,
               "last_activity_date": 1477650491
            },
            {
               "answer_id": 33048998,
               "score": 507,
               "body_markdown": "Frequently used Boolean operations in C++ produce many branches in compiled program. If these branches are inside loops and are hard to predict they can slow down execution significantly. Boolean variables are stored as 8-bit integers with the value `0` for `false` and `1` for `true`.\r\n\r\nBoolean variables are overdetermined in the sense that all operators that have Boolean variables as input check if the inputs have any other value than `0` or `1`, but operators that have Booleans as output can produce no other value than `0` or `1`. This makes operations with Boolean variables as input less efficient than necessary.\r\nConsider example:\r\n\r\n    bool a, b, c, d;\r\n    c = a &amp;&amp; b;\r\n    d = a || b;\r\nThis is typically implemented by the compiler in the following way:\r\n\r\n    bool a, b, c, d;\r\n    if (a != 0) {\r\n        if (b != 0) {\r\n            c = 1;\r\n        }\r\n        else {\r\n            goto CFALSE;\r\n        }\r\n    }\r\n    else {\r\n        CFALSE:\r\n        c = 0;\r\n    }\r\n    if (a == 0) {\r\n        if (b == 0) {\r\n            d = 0;\r\n        }\r\n        else {\r\n            goto DTRUE;\r\n        }\r\n    }\r\n    else {\r\n        DTRUE:\r\n        d = 1;\r\n    }\r\nThis code is far from optimal. The branches may take a long time in case of mispredictions. The Boolean operations can be made much more efficient if it is known with certainty that the operands have no other values than `0` and `1`. The reason why the compiler does not make such an assumption is that the variables might have other values if they are uninitialized or come from unknown sources. The above code can be optimized if `a` and `b` have been initialized to valid values or if they come from operators that produce Boolean output. The optimized code looks like this:\r\n\r\n    char a = 0, b = 1, c, d;\r\n    c = a &amp; b;\r\n    d = a | b;\r\n`char` is used instead of `bool` in order to make it possible to use the bitwise operators (`&amp;` and `|`) instead of the Boolean operators (`&amp;&amp;` and `||`). The bitwise operators are single instructions that take only one clock cycle. The OR operator (`|`) works even if `a` and `b` have other values than `0` or `1`. The AND operator (`&amp;`) and the EXCLUSIVE OR operator (`^`) may give inconsistent results if the operands have other values than `0` and `1`.\r\n\r\n`~` can not be used for NOT. Instead, you can make a Boolean NOT on a variable which is known to be `0` or `1` by XOR&#39;ing it with `1`:\r\n\r\n    bool a, b;\r\n    b = !a;\r\ncan be optimized to:\r\n\r\n    char a = 0, b;\r\n    b = a ^ 1;\r\n`a &amp;&amp; b` cannot be replaced with `a &amp; b` if `b` is an expression that should not be evaluated if `a` is `false` ( `&amp;&amp;` will not evaluate `b`, `&amp;` will). Likewise, `a || b` can not be replaced with `a | b` if `b` is an expression that should not be evaluated if `a` is `true`.\r\n\r\nUsing bitwise operators is more advantageous if the operands are variables than if the operands are comparisons:\r\n\r\n    bool a; double x, y, z;\r\n    a = x &gt; y &amp;&amp; z &lt; 5.0;\r\nis optimal in most cases (unless you expect the `&amp;&amp;` expression to generate many branch mispredictions).",
               "up_vote_count": 509,
               "down_vote_count": 2,
               "id": "33048998",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1444437042,
               "last_edit_date": 1444439481,
               "last_activity_date": 1444439481
            },
            {
               "answer_id": 33070112,
               "score": 560,
               "body_markdown": "An official answer would be from\r\n\r\n 1. [Intel - Avoiding the Cost of Branch Misprediction][1]\r\n 2. [Intel - Branch and Loop Reorganization to Prevent Mispredicts][2]\r\n 3. [Scientific papers - branch prediction computer architecture][3]\r\n 4. Books: J.L. Hennessy, D.A. Patterson: Computer architecture: a quantitative approach\r\n 5. Articles in scientific publications: T.Y. Yeh, Y.N. Patt made a lot of these on branch predictions.\r\n\r\nYou can also see from this lovely [diagram][4] why the branch predictor gets confused.\r\n\r\n[![2-bit state diagram][5]][5]\r\n\r\nEach element in the original code is a random value\r\n\r\n    data[c] = std::rand() % 256;\r\n\r\nso the predictor will change sides as the `std::rand()` blow.\r\n\r\nOn the other hand, once it&#39;s sorted, the predictor will first move into a state of strongly not taken and when the values change to the high value the predictor will in three runs through change all the way from strongly not taken to strongly taken.\r\n\r\n  [1]: https://software.intel.com/en-us/articles/avoiding-the-cost-of-branch-misprediction\r\n  [2]: https://software.intel.com/en-us/articles/branch-and-loop-reorganization-to-prevent-mispredicts\r\n  [3]: https://scholar.google.com/scholar?q=branch%20prediction%20computer%20architecture&amp;hl=da&amp;as_sdt=0&amp;as_vis=1&amp;oi=scholart\r\n  [4]: https://en.wikipedia.org/wiki/Branch_predictor#/media/File:Branch_prediction_2bit_saturating_counter-dia.svg\r\n  [5]: https://i.stack.imgur.com/pBMV2.png\r\n** **\r\n\r\n\r\n\r\n\r\n\r\n",
               "up_vote_count": 561,
               "down_vote_count": 1,
               "id": "33070112",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1444597518,
               "last_edit_date": 1485862773,
               "last_activity_date": 1485862773
            },
            {
               "answer_id": 41603849,
               "score": 175,
               "body_markdown": "This question has already been answered excellently many times over. Still I&#39;d like to draw the group&#39;s attention to yet another interesting analysis.\r\n\r\nRecently this example (modified very slightly) was also used as a way to demonstrate how a piece of code can be profiled within the program itself on Windows. Along the way, the author also shows how to use the results to determine where the code is spending most of its time in both the sorted &amp; unsorted case. Finally the piece also shows how to use a little known feature of the HAL (Hardware Abstraction Layer) to determine just how much branch misprediction is happening in the unsorted case.\r\n\r\nThe link is here:\r\nhttp://www.geoffchappell.com/studies/windows/km/ntoskrnl/api/ex/profile/demo.htm\r\n",
               "up_vote_count": 176,
               "down_vote_count": 1,
               "id": "41603849",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1484185828,
               "last_edit_date": 1484676151,
               "last_activity_date": 1484676151
            },
            {
               "answer_id": 44614591,
               "score": 158,
               "body_markdown": "That&#39;s for sure!...\r\n\r\n**Branch Prediction** makes the logic run slower, because of the switching which happens in the code! It&#39;s like you are going a straight street or a street with a lot of turnings, for sure the straight one gonna be done quicker!...\r\n\r\nIf the array is sorted, your condition is false at the first step: `data[c] &gt;= 128`, then becomes a true value for the whole way to the end of the street. That&#39;s how you get to the end of the logic faster. on the other hand, using unsorted array, you need alot of turning and processing which make your code run slower for sure...\r\n\r\nLook at the image I created for you below, which street gonna be finished faster?\r\n\r\n[![Branch Prediction][1]][1]\r\n\r\nSo programmatically, **Branch Prediction** causes the process be slower...\r\n\r\nAlso at the end, it&#39;s good to know we have 2 kinds of branch predictions that each gonna effects your code differently:\r\n\r\n **1. static**\r\n\r\n **2. dynamic**\r\n\r\n[![enter image description here][2]][2]\r\n\r\n&gt; Static branch prediction is used by the microprocessor the first time\r\n&gt; a conditional branch is encountered, and dynamic branch prediction is\r\n&gt; used for succeeding executions of the conditional branch code.\r\n\r\n&gt; In order to effectively write your code to take advantage of these\r\n&gt; rules, when writing **if-else** or **switch** statements, check the most\r\n&gt; common cases first and work progressively down to the least common.\r\n&gt; Loops do not necessarily require any special ordering of code for\r\n&gt; static branch prediction, as only the condition of the loop iterator\r\n&gt; is normally used.\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/cSmCa.jpg\r\n  [2]: https://i.stack.imgur.com/ZfhDu.jpg",
               "up_vote_count": 158,
               "down_vote_count": 0,
               "id": "44614591",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1497786043,
               "last_edit_date": 1515054227,
               "last_activity_date": 1515054227
            },
            {
               "answer_id": 45503985,
               "score": 81,
               "body_markdown": "**Branch-prediction gain!**. It is important to understand, branch misprediction doesn&#39;t slow down programs. Cost of missed prediction is just as if branch prediction didn&#39;t exist and you waited for the evaluation of the expression to decide what code to run (further explanation in the next paragraph).\r\n\r\n\r\n    if (expression)\r\n    {\r\n        // run 1\r\n    } else {\r\n        // run 2\r\n    }\r\n\r\n&lt;br&gt;Whenever there&#39;s an `if-else` \\ `switch` statement, the expression has to be evaluated to determine which block should be executed. In the assembly code generated by the compiler, conditional [branch][1] instructions are inserted. A branch instruction can cause a computer to begin executing a different instruction sequence and thus deviate from its default behavior of executing instructions in order (i.e. if the expression is false, the program skips the code of the `if` block) depending on some condition, which is the expression evaluation in our case.\r\n\r\nThat being said, the compiler tries to predict the outcome prior to it being actually evaluated. It will fetch instructions from the `if` block, if the expression turns out to be true, then wonderful! we gained the time it took to evaluate it and made progress in the code, if not then we are running the wrong code, the pipeline is flushed and the correct block is run. \r\n\r\n**Visualization:**\r\nLets say you need to pick route 1 or route 2. Waiting for your partner to check the map, you have stopped at ## and waited, or you could just pick route1 and if you were lucky (route 1 is the correct route), then great you didn&#39;t have to wait for your partner to check the map (you saved the time it would have taken him to check the map), otherwise you will just turn back. While flushing pipelines is super fast now-a-day taking this gamble is worthy. Predicting sorted data or a data that changes slowly is always easier and better than predicting fast changes. \r\n\r\n    \r\n     O       route1  /-------------------------------\r\n    /|\\             /\r\n     |  ---------##/    \r\n    / \\            \\ \r\n                    \\\r\n             route2  \\--------------------------------\r\n\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Branch_(computer_science)",
               "up_vote_count": 81,
               "down_vote_count": 0,
               "id": "45503985",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1501841232,
               "last_edit_date": 1501870345,
               "last_activity_date": 1501870345
            },
            {
               "path": "3.stack.answer",
               "answer_id": 46541691,
               "score": 42,
               "creation_date": 1507024074,
               "body_markdown": "It&#39;s about branch prediction, what is it?\r\n\r\n\u2022Branch predictor is one of the ancient performance improving techniques which still finds \r\nrelevance into modern architectures. While the simple prediction techniques provide fast \r\nlookup and power efficiency they suffer from high misprediction rate. \r\n\r\n\u2022On the other hand, complex branch predictions \u2013either neural based or variants of two-level branch prediction \u2013provide better prediction accuracy but consume more power and complexity increases exponentially.\r\n\r\n\u2022In addition to this, in complex prediction techniques the time taken to predict the branches is itself very high \u2013ranging from 2 to 5 cycles \u2013which is comparable to the execution time of actual branches.   \r\n\r\n\r\n\u2022Branch prediction is essentially an optimization (minimization) problem where the emphasis is on to achieve lowest possible miss rate, low power consumption and low complexity with minimum resources. \r\n\r\n\r\nThere really are three different kinds of branches: \r\n\r\n**Forward conditional branches** - based on a run-time condition, the PC (Program Counter) is changed to point to an address forward in the instruction stream. \r\n\r\n**Backward conditional branches** - the PC is changed to point backward in the instruction stream. The branch is based on some condition, such as branching backwards to the beginning of a program loop when a test at the end of the loop states the loop should be executed again. \r\n\r\n**Unconditional branches** - this includes jumps, procedure calls and returns that have no \r\nspecific condition. For example, an unconditional jump instruction might be coded in assembly language as simply &quot;jmp&quot;, and the instruction stream must immediately be directed to the target location pointed to by the jump instruction, whereas a conditional jump that might be coded as &quot;jmpne&quot; would redirect the instruction stream only if the result of a comparison of two values in a previous &quot;compare&quot; instructions shows the values to not be equal. (The segmented addressing scheme used by the x86 architecture adds extra complexity, since jumps can be either &quot;near&quot; (within a segment) or &quot;far&quot; (outside the segment). Each type has different effects on branch prediction algorithms.) \r\n\r\n\r\n**Static/dynamic Branch Prediction** : Static branch prediction is used by the microprocessor the first time a conditional branch is encountered, and dynamic branch prediction is used for succeeding executions of the conditional branch code.\r\n\r\n\r\nRefrences:\r\n\r\nhttps://en.wikipedia.org/wiki/Branch_predictor\r\n\r\nhttp://www.geoffchappell.com/studies/windows/km/ntoskrnl/api/ex/profile/demo.htm\r\n\r\nhttps://courses.cs.washington.edu/courses/csep548/06au/lectures/branchPred.pdf\r\n\r\nhttps://web.njit.edu/~rlopes/Mod5.3.pdf",
               "up_vote_count": 42,
               "down_vote_count": 0,
               "id": "46541691",
               "last_activity_date": 1507024074,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 47141245,
               "score": 66,
               "creation_date": 1509984916,
               "body_markdown": "As what has already been mentioned by others, what behind the mystery is [Branch Predictor][1]. \r\n\r\nI&#39;m not trying to add something but explaining the concept in another way. \r\nThere is concise introduction on the wiki which contains text and diagram.\r\nI do like the explanation below which uses diagram to elaborate the Branch Predictor intuitively.\r\n\r\n&gt; In computer architecture, a branch predictor is a\r\n&gt; digital circuit that tries to guess which way a branch (e.g. an\r\n&gt; if-then-else structure) will go before this is known for sure. The\r\n&gt; purpose of the branch predictor is to improve the flow in the\r\n&gt; instruction pipeline. Branch predictors play a critical role in\r\n&gt; achieving high effective performance in many modern pipelined\r\n&gt; microprocessor architectures such as x86.\r\n&gt; \r\n&gt; Two-way branching is usually implemented with a conditional jump\r\n&gt; instruction. A conditional jump can either be &quot;not taken&quot; and continue\r\n&gt; execution with the first branch of code which follows immediately\r\n&gt; after the conditional jump, or it can be &quot;taken&quot; and jump to a\r\n&gt; different place in program memory where the second branch of code is\r\n&gt; stored. It is not known for certain whether a conditional jump will be\r\n&gt; taken or not taken until the condition has been calculated and the\r\n&gt; conditional jump has passed the execution stage in the instruction\r\n&gt; pipeline (see fig. 1).\r\n\r\n\r\n\r\n [![figure 1][2]][2]\r\n\r\nBased on described scenario, I have written an animation demo to show how instructions are executed in pipeline in different situations.\r\n\r\n 1. Without the Branch Predictor. \r\n\r\n&gt;  Without branch prediction, the processor would have to wait until the\r\n&gt; conditional jump instruction has passed the execute stage before the\r\n&gt; next instruction can enter the fetch stage in the pipeline.\r\n\r\nThe example contains three instructions and the first one is a conditional jump instruction. The latter two instructions can go into the pipeline until the conditional jump instruction is executed. \r\n\r\n[![without branch predictor][3]][3]\r\n\r\nIt will take 9 clock cycles for 3 instructions to be completed.\r\n\r\n 2. Use Branch Predictor and don&#39;t take conditional jump. Let&#39;s assume that the predict is **not** taking the conditional jump.\r\n\r\n[![enter image description here][4]][4]\r\n\r\nIt will take 7 clock cycles for 3 instructions to be completed.\r\n\r\n 3. Use Branch Predictor and take conditional jump. Let&#39;s assume that the predict is **not** taking the conditional jump.\r\n\r\n[![enter image description here][5]][5]\r\n\r\nIt will take 9 clock cycles for 3 instructions to be completed.\r\n\r\n&gt; The time that is wasted in case of a branch misprediction is equal to\r\n&gt; the number of stages in the pipeline from the fetch stage to the\r\n&gt; execute stage. Modern microprocessors tend to have quite long\r\n&gt; pipelines so that the misprediction delay is between 10 and 20 clock\r\n&gt; cycles. As a result, making a pipeline longer increases the need for a\r\n&gt; more advanced branch predictor.\r\n\r\nAs you can see, it seems we don&#39;t have reason not to use Branch Predictor.\r\n\r\nIt&#39;s quite a simple demo that clarifies the very basic part of Branch Predictor. If those gifs are annoying, please feel free to remove them from the answer and visitors can also get the demo from [git][6]\r\n\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Branch_predictor\r\n  [2]: https://i.stack.imgur.com/unxnb.png\r\n  [3]: https://i.stack.imgur.com/GMFQ6.gif\r\n  [4]: https://i.stack.imgur.com/Ms5p1.gif\r\n  [5]: https://i.stack.imgur.com/HIpG3.gif\r\n  [6]: https://github.com/Gearon/BPViewer.git",
               "up_vote_count": 66,
               "down_vote_count": 0,
               "id": "47141245",
               "last_activity_date": 1509984916,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 47457772,
               "score": 26,
               "body_markdown": "Besides the fact that the branch prediction may slow you down, a sorted array has another advantage:   \r\nYou can have a stop condition instead of just checking the value, this way you only loop over the relevant data, and ignore the rest.   \r\nThe branch prediction will miss only once.\r\n\r\n     // sort backwards (higher values first)\r\n     std::sort(data, data + arraySize, std::greater&lt;int&gt;());\r\n\r\n     for (unsigned c = 0; c &lt; arraySize; ++c)\r\n     {\r\n           if (data[c] &lt; 128)\r\n                  break;\r\n           sum += data[c];               \r\n     }",
               "up_vote_count": 27,
               "down_vote_count": 1,
               "id": "47457772",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1511447309,
               "last_edit_date": 1514721984,
               "last_activity_date": 1514721984
            },
            {
               "answer_id": 47700573,
               "score": 5,
               "body_markdown": "In Simple Words: Summary of everyone&#39;s wonderful answers for beginners...&lt;br&gt;\r\nThis happens due to something called the branch prediction. &lt;br&gt;\r\nBasically what happens is that the computer predicts the next step and executes it, if its wrong, it comes one step back and executes with another prediction and if its right, then it will just continue. The answer your question is very simple. If the array is unsorted, the computer has to make many predictions which may lead to an increased chance of errors. But if the data is sorted, the computer makes fewer predictions and there is less chance of error.&lt;br&gt;\r\n\r\nSorted Array: Striaght Road&lt;br&gt;\r\n____________________________________________________________________________&lt;br&gt;\r\n-&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; -&amp;nbsp; &lt;br&gt;\r\nTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT&lt;br&gt;\r\n\r\nUnsorted Array: Curved Road&lt;br&gt;\r\n______&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_______&lt;br&gt;\r\n|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|__|\r\n\r\nBranch Prediction: Guessing/Predicting Which road is staight and following it without checking&lt;br&gt;\r\n___________________________________________ Straight Road&lt;br&gt;\r\n&amp;nbsp;&amp;nbsp;&amp;nbsp;|_________________________________________|Longer Road&lt;br&gt;\r\nAlthough Both the road reach the same destination, Straight road is shorter and the other is longer. If the you choose the other by mistake, there is no turning back and so you will waste some extra time if you choose the longer road. THis is similar to what happens in the computer, I hope this helped you understand better.&lt;br&gt;\r\nThank you.",
               "up_vote_count": 16,
               "down_vote_count": 11,
               "id": "47700573",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1512667709,
               "last_edit_date": 1513330156,
               "last_activity_date": 1513330156
            },
            {
               "path": "3.stack.answer",
               "answer_id": 47942152,
               "score": 19,
               "creation_date": 1513948385,
               "body_markdown": "On ARM, there is no branch needed, because every instruction has a 4-bit condition field, which is tested at zero cost. This eliminates the need for short branches. The inner loop would look something like the following, and there would be no branch prediction hit. Therefore, the sorted version would run slower than the unsorted version on ARM, because of the extra overhead of sorting:\r\n\r\n    MOV R0, #0     // R0 = sum = 0\r\n    MOV R1, #0     // R1 = c = 0\r\n    ADR R2, data   // R2 = addr of data array (put this instruction outside outer loop)\r\n    .inner_loop    // Inner loop branch label\r\n        LDRB R3, [R2, R1]     // R3 = data[c]\r\n        CMP R3, #128          // compare R3 to 128\r\n        ADDGE R0, R0, R3      // if R3 &gt;= 128, then sum += data[c] -- no branch needed!\r\n        ADD R1, R1, #1        // c++\r\n        CMP R1, #arraySize    // compare c to arraySize\r\n        BLT inner_loop        // Branch to inner_loop if c &lt; arraySize\r\n\r\n",
               "up_vote_count": 19,
               "down_vote_count": 0,
               "id": "47942152",
               "last_activity_date": 1513948385,
               "tags": [],
               "is_accepted": false
            }
         ],
         "last_edit_date": "1519930284",
         "link": "https://stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array",
         "creation_date": "1340805096"
      },
      {
         "title": "How to undo the most recent commits in Git",
         "code_snippet": "['<code>git reset --bla foo</code>', '<code>git --force push [--all] [somewhere-else-than-origin]</code>', '<code>git pull</code>', '<code>git fetch [--all]</code>', '<code>git rebase origin/master</code>', '<code>origin</code>', '<code>[bla]</code>', '<code>$ git commit -m \"Something terribly misguided\"              (1)\\n$ git reset HEAD~                                           (2)\\n&lt;&lt; edit files as necessary &gt;&gt;                               (3)\\n$ git add ...                                               (4)\\n$ git commit -c ORIG_HEAD                                   (5)\\n</code>', '<code>git status</code>', '<code>git reset --soft HEAD~</code>', '<code>git reset HEAD~</code>', '<code>HEAD~</code>', '<code>HEAD~1</code>', '<code>git add</code>', '<code>reset</code>', '<code>.git/ORIG_HEAD</code>', '<code>commit</code>', '<code>-c ORIG_HEAD</code>', '<code>-C</code>', '<code>git reset</code>', '<code>git commit --amend</code>', '<code>commit --amend</code>', '<code>git checkout theRightBranch</code>', '<code>git reset --soft HEAD^</code>', '<code>git reset --soft HEAD~1</code>', '<code>--soft</code>', '<code>git reset HEAD~1</code>', \"<code>git reset --soft 'HEAD^'</code>\", '<code>--mixed</code>', '<code>--mixed</code>', '<code>--soft</code>', '<code>zsh: no matches found: HEAD^</code>', '<code>git reset --soft HEAD\\\\^</code>', '<code>   (F)\\nA-B-C\\n    \u2191\\n  master\\n</code>', '<code>git reset --hard HEAD~1\\n</code>', '<code> (F)\\nA-B\\n  \u2191\\nmaster\\n</code>', '<code>--hard</code>', '<code>   (F)\\nA-B-C\\n    \u2191\\n  master\\n</code>', '<code>--hard</code>', '<code>git reset HEAD~1\\n</code>', '<code>   (F)\\nA-B-C\\n  \u2191\\nmaster\\n</code>', '<code>git reset HEAD~1</code>', '<code>--hard</code>', '<code>git status</code>', '<code>git reset --soft HEAD~1\\n</code>', '<code>git status</code>', '<code>git commit</code>', '<code>git reflog</code>', '<code>git checkout -b someNewBranchName shaYouDestroyed\\n</code>', '<code>git reset --hard HEAD^^</code>', '<code>git branch -f &lt;branch&gt; &lt;commit-id&gt;</code>', \"<code>git log\\n    commit 101: bad commit    # latest commit, this would be called 'HEAD'\\n    commit 100: good commit   # second to last commit, this is the one we want\\n</code>\", '<code>reset</code>', '<code>HEAD</code>', \"<code>git reset --soft HEAD^     # use --soft if you want to keep your changes\\ngit reset --hard HEAD^     # use --hard if you don't care about keeping the changes you made\\n</code>\", '<code>git log</code>', '<code>git revert HEAD\\n</code>', \"<code>git commit -m 'restoring the file I removed by accident'\\ngit log\\n    commit 102: restoring the file I removed by accident\\n    commit 101: removing a file we don't need\\n    commit 100: adding a file that we need\\n</code>\", '<code>git revert HEAD^</code>', '<code>git revert HEAD</code>', '<code>git rm classdir\\ngit add sourcedir\\n</code>', '<code>git commit --amend\\n</code>', '<code>git commit --amend</code>', '<code>git commit</code>', '<code>git reset --soft &lt;oldref&gt;</code>', '<code>git reflog</code>', '<code>git commit</code>', '<code>git rm yourfiles/*.class\\ngit commit -a -m \"deleted all class files in folder \\'yourfiles\\'\"\\n</code>', '<code>git reset --hard HEAD~1\\n</code>', '<code>.java</code>', '<code>hard reset</code>', '<code>HEAD-1</code>', '<code>git commit -a -m \"\"</code>', '<code>git commit -am \"\"</code>', '<code>git stash</code>', '<code>git stash pop</code>', '<code>git rm --cached *.class\\ngit add *.java\\n</code>', '<code>git commit --amend\\n</code>', \"<code>git commit -m 'Replace .class files with .java files'\\n</code>\", '<code>*.class</code>', '<code>reset</code>', '<code>git reset @~N\\n</code>', '<code>N</code>', '<code>HEAD</code>', '<code>@~</code>', '<code>git reset @~\\ngit add *.java\\ngit commit -m \"Add .java files\"\\n</code>', '<code>git help reset</code>', '<code>--soft</code>', '<code>--mixed</code>', '<code>--hard</code>', \"<code>$ git reset @~\\n$ git reflog\\nc4f708b HEAD@{0}: reset: moving to @~\\n2c52489 HEAD@{1}: commit: added some .class files\\n$ git reset 2c52489\\n... and you're back where you started\\n</code>\", '<code>git revert commit-id</code>', '<code>git log</code>', '<code>git revert commit-id</code>', '<code>git cherry-pick &lt;&lt;erroneous-commit-sha&gt;&gt;</code>', '<code>git reset --hard HEAD^1\\n</code>', '<code>git add</code>', '<code>git reset --soft HEAD^1\\n</code>', '<code>git reset HEAD\\n</code>', '<code>git undo</code>', '<code>git undo 3</code>', '<code>prompt&gt; git reset --hard 5a7404742c85\\nHEAD is now at 5a74047 Added one more page to catalogue\\nprompt&gt; git push origin master --force\\nTotal 0 (delta 0), reused 0 (delta 0)\\nremote: bb/acl: neoneye is allowed. accepted payload.\\nTo git@bitbucket.org:thecompany/prometheus.git\\n + 09a6480...5a74047 master -&gt; master (forced update)\\nprompt&gt;\\n</code>', '<code>git rebase -i</code>', '<code>git rebase -i HEAD~3\\n</code>', '<code>pick aa28ba7 Sanity check for RtmpSrv port\\npick c26c541 RtmpSrv version option\\npick 58d6909 Better URL decoding support\\n</code>', '<code>git commit --amend</code>', '<code>gitk</code>', '<code>git rebase</code>', '<code>git reset HEAD~1</code>', '<code>git reset</code>', '<code>git revert --no-edit HEAD\\n</code>', '<code>gitk --all $(git reflog | cut -c1-7)&amp;</code>', '<code>git reset</code>', '<code>git reset --soft HEAD~1\\n</code>', '<code>git revert HEAD\\n</code>', '<code>HEAD~1</code>', '<code>git log --stat</code>', '<code>git reflog</code>', '<code>git log \\n</code>', '<code>git reset --hard &lt;commit_id&gt;\\n\\ngit push origin &lt;branch_name&gt; -f\\n</code>', '<code>git reset --hard</code>', '<code>-f</code>', '<code>git revert\\n</code>', \"<code>git reset --soft HEAD^ # Use --soft if you want to keep your changes.\\ngit reset --hard HEAD^ # Use --hard if you don't care about keeping your changes.\\n</code>\", \"<code>git reset --soft 'HEAD^' \\n</code>\", '<code>git reset --hard HEAD^\\n</code>', '<code>git reset --soft HEAD^\\n</code>', '<code>git</code>', '<code>git reset --soft HEAD~1\\n</code>', '<code>git reset</code>', '<code>reset</code>', '<code>--soft</code>', '<code>HEAD</code>', '<code>~1</code>', '<code>HEAD^</code>', '<code>git reflog\\n</code>', '<code>git reset --hard f3cb6e2\\n</code>', '<code>git reflog\\n</code>', '<code>git reset --hard ActionIdFromRefLog\\n</code>', '<code>git reset --hard HEAD^ \\n</code>', '<code>git clean    \\n</code>', '<code>git reset --hard</code>', '<code>git -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME\\n</code>', '<code>git log</code>', '<code>git reset &lt;the previous co&gt;\\n</code>', '<code>git reset --soft HEAD^</code>', '<code>git reset --soft HEAD~</code>', '<code>--soft</code>', '<code>HEAD~</code>', '<code>HEAD^</code>', '<code>git commit --amend -m \"message\"\\n</code>', '<code>git reset --soft HEAD^\\ngit rm --cached [files you do not need]\\ngit add [files you need]\\ngit commit -c ORIG_HEAD\\n</code>', '<code>git rm</code>', '<code>--amend</code>', '<code>git rm &lt;pathToFile&gt;\\n</code>', '<code>-r</code>', \"<code>git rm -r &lt;pathToDirectory&gt;\\ngit rm $(find -name '*.class')\\n</code>\", '<code>git commit --amend -C HEAD # the -C option is to use the same commit message\\n</code>', '<code>git push</code>', '<code>-f</code>', '<code>--amend</code>', '<code>git reset --soft HEAD~ \\n</code>', '<code>git reset --hard HEAD~1\\n</code>', '<code>--soft</code>', '<code>uncommitted changes</code>', '<code>--hard</code>', '<code>git reset --hard</code>', '<code>git</code>', '<code>git reset --hard</code>', '<code>git revert dd61ab32\\n</code>']",
         "body_markdown": "I accidentally committed wrong files to [Git][1], but I haven&#39;t pushed the commit to the server yet.\r\n\r\nHow can I undo those commits from the local repository? \r\n\r\n  [1]: http://en.wikipedia.org/wiki/Git_%28software%29\r\n\r\n",
         "up_vote_count": "16721",
         "view_count": "6043820",
         "id": "8587033-1",
         "answer_count": "67",
         "tags": "['git', 'git-commit', 'git-reset', 'git-revert']",
         "path": "2.stack",
         "_childDocuments_": [
            {
               "answer_id": 927378,
               "score": 801,
               "body_markdown": "&lt;!-- language: lang-bash --&gt;\r\n\r\n    git rm yourfiles/*.class\r\n    git commit -a -m &quot;deleted all class files in folder &#39;yourfiles&#39;&quot;\r\n\r\nor\r\n\r\n    git reset --hard HEAD~1\r\n\r\n**Warning: The above command will permanently remove the modifications to the `.java` files (and any other files) that you wanted to commit.**\r\n\r\n\r\nThe `hard reset` to `HEAD-1` will set your working copy to the state of the commit before your wrong commit.",
               "up_vote_count": 819,
               "down_vote_count": 18,
               "id": "927378",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1243620787,
               "last_edit_date": 1513202608,
               "last_activity_date": 1513202608
            },
            {
               "answer_id": 927386,
               "score": 17771,
               "body_markdown": "### Undo a commit and redo\r\n\r\n&lt;!-- language: bash --&gt;\r\n\r\n    $ git commit -m &quot;Something terribly misguided&quot;              (1)\r\n    $ git reset HEAD~                                           (2)\r\n    &lt;&lt; edit files as necessary &gt;&gt;                               (3)\r\n    $ git add ...                                               (4)\r\n    $ git commit -c ORIG_HEAD                                   (5)\r\n\r\n1. This is what you want to undo\r\n2. This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they&#39;ll appear as &quot;Changes not staged for commit&quot; in `git status`, and you&#39;ll need to add them again before committing). If you *only* want to *add* more changes to the previous commit, or change the commit message&lt;sup&gt;1&lt;/sup&gt;, you could use `git reset --soft HEAD~` instead, which is like `git reset HEAD~` (where `HEAD~` is the same as `HEAD~1`) but leaves your existing changes staged.\r\n3. Make corrections to working tree files.\r\n4. `git add` anything that you want to include in your new commit.\r\n5. Commit the changes, reusing the old commit message. `reset` copied the old head to `.git/ORIG_HEAD`; `commit` with `-c ORIG_HEAD` will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the `-C` option.\r\n\r\n-----\r\n\r\n&lt;sup&gt;1&lt;/sup&gt; Note, however, that you don&#39;t need to reset to an earlier commit if you just made a mistake in your *commit message*. The easier option is to `git reset` (to upstage any changes you&#39;ve made since) and then [`git commit --amend`][1], which will open your default commit message editor pre-populated with the last commit message. \r\n\r\nBeware however that if you have added any new changes to the index, using `commit --amend` will add them to your previous commit.\r\n\r\n  [1]: https://stackoverflow.com/q/179123/1146608\r\n  [2]: https://git-scm.com/docs/git-reset\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
               "up_vote_count": 17852,
               "down_vote_count": 81,
               "id": "927386",
               "tags": [],
               "is_accepted": true,
               "path": "3.stack.answer",
               "creation_date": 1243620822,
               "last_edit_date": 1512569572,
               "last_activity_date": 1512569572
            },
            {
               "answer_id": 927397,
               "score": 1564,
               "body_markdown": "Add/remove files to get things the way you want:\r\n\r\n    git rm classdir\r\n    git add sourcedir\r\n\r\nThen amend the commit:\r\n\r\n    git commit --amend\r\n\r\nThe previous, erroneous commit will be edited to reflect the new index state - in other words, it&#39;ll be like you never made the mistake in the first place.\r\n\r\nNote that you should only do this if you haven&#39;t pushed yet. If you have pushed, then you&#39;ll just have to commit a fix normally.",
               "up_vote_count": 1582,
               "down_vote_count": 18,
               "id": "927397",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1243620986,
               "last_edit_date": 1476254755,
               "last_activity_date": 1476254755
            },
            {
               "answer_id": 3377569,
               "score": 632,
               "body_markdown": "## To change the last commit\r\n\r\nReplace the files in the index:\r\n\r\n    git rm --cached *.class\r\n    git add *.java\r\n\r\nThen, if it&#39;s a private branch, **amend** the commit:\r\n\r\n    git commit --amend\r\n\r\nOr, if it&#39;s a shared branch, make a new commit:\r\n\r\n    git commit -m &#39;Replace .class files with .java files&#39;\r\n&lt;br&gt;\r\n*(**to change a previous commit**, use the awesome [interactive rebase])*\r\n\r\n\r\n----------\r\n\r\nProTip\u2122: &#160; Add `*.class` to a [gitignore] to stop this happening again.\r\n\r\n----------\r\n\r\n## To revert a commit\r\n\r\nAmending a commit is the ideal solution if you need to change the last commit, but a more general solution is `reset`.\r\n\r\nYou can reset git to any commit with:\r\n\r\n    git reset @~N\r\n\r\nWhere `N` is the number of commits before `HEAD`, and `@~` resets to the previous commit.\r\n\r\nSo, instead of amending the commit, you could use:\r\n\r\n    git reset @~\r\n    git add *.java\r\n    git commit -m &quot;Add .java files&quot;\r\n\r\nCheck out `git help reset`, specifically the sections on `--soft` `--mixed` and `--hard`, for a better understanding of what this does.\r\n\r\n## Reflog\r\n\r\nIf you mess up, you can always use the reflog to find dropped commits:\r\n\r\n    $ git reset @~\r\n    $ git reflog\r\n    c4f708b HEAD@{0}: reset: moving to @~\r\n    2c52489 HEAD@{1}: commit: added some .class files\r\n    $ git reset 2c52489\r\n    ... and you&#39;re back where you started\r\n\r\n&lt;br&gt;\r\n\r\n\r\n  [gitignore]: https://help.github.com/articles/ignoring-files\r\n  [interactive rebase]: https://stackoverflow.com/a/28421811/405550",
               "up_vote_count": 636,
               "down_vote_count": 4,
               "id": "3377569",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1280569153,
               "last_edit_date": 1495540989,
               "last_activity_date": 1450390361
            },
            {
               "answer_id": 6376039,
               "score": 1575,
               "body_markdown": "This took me a while to figure out, so maybe this will help someone...\r\n\r\nThere are two ways to &quot;undo&quot; your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):\r\n\r\n##How to undo a local commit\r\nLet&#39;s say I committed locally, but now want to remove that commit.\r\n\r\n    git log\r\n        commit 101: bad commit    # latest commit, this would be called &#39;HEAD&#39;\r\n        commit 100: good commit   # second to last commit, this is the one we want\r\n\r\nTo restore everything back to the way it was prior to the last commit, we need to `reset` to the commit before `HEAD`:\r\n\r\n    git reset --soft HEAD^     # use --soft if you want to keep your changes\r\n    git reset --hard HEAD^     # use --hard if you don&#39;t care about keeping the changes you made\r\n\r\nNow `git log` will show that our last commit has been removed.\r\n\r\n##How to undo a public commit\r\n\r\nIf you have already made your commits public, you will want to create a new commit which will &quot;revert&quot; the changes you made in your previous commit (current HEAD).\r\n\r\n    git revert HEAD\r\n\r\nYour changes will now be reverted and ready for you to commit:\r\n\r\n    git commit -m &#39;restoring the file I removed by accident&#39;\r\n    git log\r\n        commit 102: restoring the file I removed by accident\r\n        commit 101: removing a file we don&#39;t need\r\n        commit 100: adding a file that we need\r\n\r\nFor more info, check out [Git Basics - Undoing Things][1]\r\n\r\n\r\n  [1]: https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things",
               "up_vote_count": 1583,
               "down_vote_count": 8,
               "id": "6376039",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1308245243,
               "last_edit_date": 1517354844,
               "last_activity_date": 1517354844
            },
            {
               "answer_id": 6866485,
               "score": 9370,
               "body_markdown": "Undoing a commit is a little scary if you don&#39;t know how it works.  But it&#39;s actually amazingly easy if you do understand.\r\n\r\nSay you have this, where C is your HEAD and (F) is the state of your files.\r\n\r\n       (F)\r\n    A-B-C\r\n        \u2191\r\n      master\r\n\r\nYou want to **nuke commit C and never see it again**.  You do this:\r\n\r\n    git reset --hard HEAD~1\r\n\r\nThe result is:\r\n\r\n     (F)\r\n    A-B\r\n      \u2191\r\n    master\r\n\r\nNow B is the HEAD.  Because you used `--hard`, your files are reset to their state at commit B.\r\n\r\nAh, but suppose commit C wasn&#39;t a disaster, but just a bit off.  You want to **undo the commit but keep your changes** for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:\r\n\r\n       (F)\r\n    A-B-C\r\n        \u2191\r\n      master\r\n\r\nYou can do this, leaving off the `--hard`:\r\n\r\n    git reset HEAD~1\r\n\r\nIn this case the result is:\r\n\r\n       (F)\r\n    A-B-C\r\n      \u2191\r\n    master\r\n\r\nIn both cases, HEAD is just a pointer to the latest commit.  When you do a `git reset HEAD~1`, you tell Git to move the HEAD pointer back one commit.  But (unless you use `--hard`) you leave your files as they were.  So now `git status` shows the changes you had checked into C.  You haven&#39;t lost a thing!\r\n\r\nFor the lightest touch, you can even **undo your commit but leave your files and your [index](https://git.wiki.kernel.org/index.php/WhatIsTheIndex)**:\r\n\r\n    git reset --soft HEAD~1\r\n\r\nThis not only leaves your files alone, it even leaves your *index* alone.  When you do `git status`, you&#39;ll see that the same files are in the index as before.  In fact, right after this command, you could do `git commit` and you&#39;d be redoing the same commit you just had.\r\n\r\nOne more thing: **Suppose you destroy a commit** as in the first example, **but then discover you needed it after all**?  Tough luck, right?\r\n\r\nNope, there&#39;s *still* a way to get it back.  Type `git reflog` and you&#39;ll see a list of (partial) commit shas that you&#39;ve moved around in.  Find the commit you destroyed, and do this:\r\n\r\n    git checkout -b someNewBranchName shaYouDestroyed\r\n\r\nYou&#39;ve now resurrected that commit.  Commits don&#39;t actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn&#39;t mean to get rid of.",
               "up_vote_count": 9386,
               "down_vote_count": 16,
               "id": "6866485",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1311891740,
               "last_edit_date": 1479898858,
               "last_activity_date": 1479898858
            },
            {
               "path": "3.stack.answer",
               "answer_id": 8487487,
               "score": 401,
               "creation_date": 1323771511,
               "body_markdown": "If you have [Git Extras](https://github.com/visionmedia/git-extras) installed, you can run `git undo` to undo the latest commit. `git undo 3` will undo the last 3 commits.",
               "up_vote_count": 404,
               "down_vote_count": 3,
               "id": "8487487",
               "last_activity_date": 1323771511,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 10044540,
               "score": 370,
               "creation_date": 1333720732,
               "body_markdown": "I wanted to undo the lastest 5 commits in our shared repository. I looked up the revision id that I wanted to rollback to. Then I typed in the following.\r\n\r\n    prompt&gt; git reset --hard 5a7404742c85\r\n    HEAD is now at 5a74047 Added one more page to catalogue\r\n    prompt&gt; git push origin master --force\r\n    Total 0 (delta 0), reused 0 (delta 0)\r\n    remote: bb/acl: neoneye is allowed. accepted payload.\r\n    To git@bitbucket.org:thecompany/prometheus.git\r\n     + 09a6480...5a74047 master -&gt; master (forced update)\r\n    prompt&gt;",
               "up_vote_count": 375,
               "down_vote_count": 5,
               "id": "10044540",
               "last_activity_date": 1333720732,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 10757800,
               "score": 507,
               "body_markdown": "Use `git revert SHA-Of-The-Commit-You-Want-To-Revert`\r\n\r\nTo get the `SHA`, just use `git log`",
               "up_vote_count": 510,
               "down_vote_count": 3,
               "id": "10757800",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1337961869,
               "last_edit_date": 1346418622,
               "last_activity_date": 1346418622
            },
            {
               "answer_id": 13061212,
               "score": 358,
               "body_markdown": "I prefer to use `git rebase -i` for this job, because a nice list pops up where I can choose the commits to get rid of. It might not be as direct as some other answers here, but it just *feels right*.\r\n\r\nChoose how many commits you want to list, then invoke like this (to enlist last three)\r\n\r\n    git rebase -i HEAD~3\r\n\r\nSample list\r\n\r\n    pick aa28ba7 Sanity check for RtmpSrv port\r\n    pick c26c541 RtmpSrv version option\r\n    pick 58d6909 Better URL decoding support\r\n\r\nThen git will remove commits for any line that you remove.",
               "up_vote_count": 363,
               "down_vote_count": 5,
               "id": "13061212",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1351136480,
               "last_edit_date": 1468574690,
               "last_activity_date": 1468574690
            },
            {
               "answer_id": 14620228,
               "score": 404,
               "body_markdown": "If you are planning undoing a local commit entirely, whatever you changes you did on the commit, and if you don&#39;t worry anything about that, just do the following command.\r\n\r\n    git reset --hard HEAD^1\r\n\r\n(This command will ignore your entire commit and your changes will be lost completely from your local working tree). If you want to undo your commit, but you want your changes in the staging area (before commit just like after `git add`) then do the following command.\r\n\r\n    git reset --soft HEAD^1\r\n\r\nNow your committed files comes into the staging area. Suppose if you want to unstage the files, because you need to edit some wrong conent, then do the following command\r\n\r\n    git reset HEAD\r\n\r\nNow committed files come from the staged area into the unstaged area. Now files are ready to edit, so whatever you changes, you want go edit and added it and make a fresh/new commit.\r\n\r\n[More][1]\r\n\r\n  [1]: http://madhan-tech-updates.blogspot.in/2013/01/how-to-undo-your-local-git-commit.html\r\n",
               "up_vote_count": 406,
               "down_vote_count": 2,
               "id": "14620228",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1359615970,
               "last_edit_date": 1479214559,
               "last_activity_date": 1479214559
            },
            {
               "answer_id": 16175525,
               "score": 318,
               "body_markdown": "## How to fix the previous local commit  ##\r\n\r\nUse git-gui (or similar) to perform a `git commit --amend`. From the GUI you can add or remove individual files from the commit. You can also modify the commit message. \r\n\r\n## How to undo the previous local commit ##\r\n\r\nJust reset your branch to the previous location (for example, using `gitk` or `git rebase`). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use `git reset HEAD~1`.\r\n\r\n**Word of warning**: *Careless use of `git reset` is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.*\r\n\r\n## How to undo a public commit ##\r\n\r\nPerform a [reverse cherry pick][1] ([git-revert][2]) to undo the changes.\r\n\r\nIf you haven&#39;t yet pulled other changes onto your branch, you can simply do...\r\n\r\n    git revert --no-edit HEAD\r\n\r\nThen push your updated branch to the shared repository.\r\n\r\n  [1]: https://stackoverflow.com/a/1624724/86967\r\n  [2]: http://git-scm.com/docs/git-revert.html",
               "up_vote_count": 320,
               "down_vote_count": 2,
               "id": "16175525",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1366738065,
               "last_edit_date": 1495541913,
               "last_activity_date": 1436954672
            },
            {
               "answer_id": 16527510,
               "score": 124,
               "body_markdown": "Another way:\r\n\r\nCheckout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected &quot;Reset BRANCHNAME to this commit&quot;.\r\n\r\nThen navigate to your repository&#39;s local directory and run this command:\r\n\r\n    git -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME\r\n\r\nThis will erase all commits after the current one in your local repository but only for that one branch.\r\n",
               "up_vote_count": 126,
               "down_vote_count": 2,
               "id": "16527510",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1368465145,
               "last_edit_date": 1435138461,
               "last_activity_date": 1435138461
            },
            {
               "answer_id": 16565962,
               "score": 120,
               "body_markdown": "Type `git log` and find the last commit hash code and then enter:\r\n\r\n    git reset &lt;the previous co&gt;\r\n\r\n",
               "up_vote_count": 122,
               "down_vote_count": 2,
               "id": "16565962",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1368623549,
               "last_edit_date": 1435138458,
               "last_activity_date": 1435138458
            },
            {
               "answer_id": 16609755,
               "score": 272,
               "body_markdown": "If you want to permanently undo it and you have cloned some repository \r\n\r\nThe commit id can be seen by \r\n\r\n    git log \r\n\r\nThen you can do -\r\n   \r\n\r\n    git reset --hard &lt;commit_id&gt;\r\n\r\n    git push origin &lt;branch_name&gt; -f\r\n\r\n\r\n",
               "up_vote_count": 276,
               "down_vote_count": 4,
               "id": "16609755",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1368795733,
               "last_edit_date": 1435138455,
               "last_activity_date": 1435138455
            },
            {
               "answer_id": 17362437,
               "score": 231,
               "body_markdown": "On [SourceTree][1] (GUI for GitHub), you may right-click the commit and do a &#39;Reverse Commit&#39;. This should undo your changes.\r\n\r\nOn the terminal:\r\n\r\nYou may alternatively use:\r\n\r\n    git revert\r\n\r\nOr:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git reset --soft HEAD^ # Use --soft if you want to keep your changes.\r\n    git reset --hard HEAD^ # Use --hard if you don&#39;t care about keeping your changes.\r\n\r\n  [1]: https://www.atlassian.com/software/sourcetree/overview\r\n",
               "up_vote_count": 232,
               "down_vote_count": 1,
               "id": "17362437",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1372414709,
               "last_edit_date": 1435138451,
               "last_activity_date": 1435138451
            },
            {
               "answer_id": 17716319,
               "score": 117,
               "body_markdown": "In my case I accidentally committed some files I did not want to. So I did the following and it worked:\r\n\r\n    git reset --soft HEAD^\r\n    git rm --cached [files you do not need]\r\n    git add [files you need]\r\n    git commit -c ORIG_HEAD\r\n\r\nVerify the results with gitk or git log --stat",
               "up_vote_count": 117,
               "down_vote_count": 0,
               "id": "17716319",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1374129676,
               "last_edit_date": 1435138449,
               "last_activity_date": 1435138449
            },
            {
               "answer_id": 18516122,
               "score": 100,
               "body_markdown": "Use [SourceTree][1] (graphical tool for Git) to see your commits and tree. You can manually reset it directly by right clicking it.\r\n\r\n  [1]: https://www.atlassian.com/software/sourcetree/overview\r\n",
               "up_vote_count": 102,
               "down_vote_count": 2,
               "id": "18516122",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1377793119,
               "last_edit_date": 1497273708,
               "last_activity_date": 1497273708
            },
            {
               "answer_id": 19159566,
               "score": 137,
               "body_markdown": "&quot;Reset the working tree to the last commit&quot;\r\n\r\n    git reset --hard HEAD^ \r\n\r\n&quot;Clean unknown files from the working tree&quot;\r\n\r\n    git clean    \r\nsee - [Git Quick Reference][1]\r\n\r\n\r\n  [1]: http://jonas.nitro.dk/git/quick-reference.html\r\n\r\n**NOTE:** This command will delete your previous commit, so use with caution! `git reset --hard` is safer \u2013",
               "up_vote_count": 137,
               "down_vote_count": 0,
               "id": "19159566",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1380804237,
               "last_edit_date": 1513202688,
               "last_activity_date": 1513202688
            },
            {
               "answer_id": 19320941,
               "score": 138,
               "body_markdown": "First run: \r\n\r\n    git reflog\r\n\r\nIt will show you all the possible actions you have performed on your repository, for example, commit, merge, pull, etc.\r\n\r\nThen do:\r\n\r\n    git reset --hard ActionIdFromRefLog\r\n",
               "up_vote_count": 138,
               "down_vote_count": 0,
               "id": "19320941",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1381502476,
               "last_edit_date": 1435138400,
               "last_activity_date": 1435138400
            },
            {
               "path": "3.stack.answer",
               "answer_id": 20960584,
               "score": 152,
               "creation_date": 1389047646,
               "body_markdown": "Use reflog to find a correct state\r\n\r\n    git reflog\r\n\r\n![reflog before][1]\r\n_REFLOG BEFORE RESET_\r\n\r\nSelect the correct reflog (f3cb6e2 in my case) and type \r\n\r\n    git reset --hard f3cb6e2\r\n\r\nAfter that the repo HEAD will be reset to that HEADid\r\n![reset effect][2]\r\n_LOG AFTER RESET_\r\n\r\nFinally the reflog looks like the picture below\r\n\r\n![reflog after][3]\r\n_REFLOG FINAL_\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/c7e7D.png\r\n  [2]: http://i.stack.imgur.com/GdnDT.png\r\n  [3]: http://i.stack.imgur.com/Fhhub.png",
               "up_vote_count": 153,
               "down_vote_count": 1,
               "id": "20960584",
               "last_activity_date": 1389047646,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 21615125,
               "score": 77,
               "creation_date": 1391724511,
               "body_markdown": "This **article** has an **excellent explanation** as to how to go **about various scenarios** (where a commit has been done as well as the push OR just a commit, before the push):\r\n\r\nhttp://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html\r\n\r\nFrom the article, the **easiest command** I saw to **revert a previous commit by its commit id**, was:\r\n\r\n    git revert dd61ab32",
               "up_vote_count": 77,
               "down_vote_count": 0,
               "id": "21615125",
               "last_activity_date": 1391724511,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 22163029,
               "score": 64,
               "body_markdown": "### For a local commit\r\n\r\n    git reset --soft HEAD~1\r\n\r\nor if you do not remember exactly in which commit it is, you might use\r\n\r\n    git rm --cached &lt;file&gt;\r\n\r\n### For a pushed commit\r\n\r\nThe proper way of removing files from the repository history is using `git filter-branch`. That is,\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git filter-branch --index-filter &#39;git rm --cached &lt;file&gt;&#39; HEAD\r\n\r\nBut I recomnend you use this command with care. Read more at *[git-filter-branch(1) Manual Page][1]*.\r\n\r\n  [1]: https://www.kernel.org/pub/software/scm/git/docs/git-filter-branch.html\r\n",
               "up_vote_count": 64,
               "down_vote_count": 0,
               "id": "22163029",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1393907718,
               "last_edit_date": 1405973708,
               "last_activity_date": 1405973708
            },
            {
               "answer_id": 22199804,
               "score": 217,
               "body_markdown": "A single command:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git reset --soft &#39;HEAD^&#39; \r\n\r\nIt works great to undo the last local commit!\r\n",
               "up_vote_count": 218,
               "down_vote_count": 1,
               "id": "22199804",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1394027735,
               "last_edit_date": 1405973614,
               "last_activity_date": 1405973614
            },
            {
               "answer_id": 23242764,
               "score": 183,
               "body_markdown": "**How to undo the last Git commit?**\r\n\r\nTo restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD.\r\n\r\n1. If you don&#39;t want to keep your changes that you made:\r\n\r\n        git reset --hard HEAD^\r\n\r\n2. If you want to keep your changes:\r\n\r\n        git reset --soft HEAD^\r\n\r\nNow check your git log. It will show that our last commit has been removed.\r\n",
               "up_vote_count": 183,
               "down_vote_count": 0,
               "id": "23242764",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1398252080,
               "last_edit_date": 1490429641,
               "last_activity_date": 1490429641
            },
            {
               "answer_id": 25553225,
               "score": 82,
               "body_markdown": "To reset to the previous revision, permanently deleting all uncommitted changes: \r\n\r\n    git reset --hard HEAD~1",
               "up_vote_count": 86,
               "down_vote_count": 4,
               "id": "25553225",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1409241784,
               "last_edit_date": 1474010701,
               "last_activity_date": 1474010701
            },
            {
               "answer_id": 25638420,
               "score": 277,
               "body_markdown": "If you have committed junk but not pushed,\r\n\r\n    git reset --soft HEAD~1\r\n\r\n&gt; \r\n**HEAD~1** is a shorthand for the commit before head. Alternatively you can refer to the **SHA-1** of the hash if you want to reset to. *--soft* option will delete the commit but it will leave all your changed files &quot;Changes to be committed&quot;, as git status would put it.\r\n\r\n&gt;    If you want to get rid of any changes to tracked files in the working tree since the commit before head use &quot;**--hard**&quot; instead.\r\n\r\nOR\r\n\r\n&gt;If you already pushed and someone pulled which is usually my case, you can&#39;t use *git reset*. You can however do a *git revert*,\r\n\r\n\r\n    git revert HEAD\r\n\r\n&gt;This will create a new commit that reverses everything introduced by the accidental commit.",
               "up_vote_count": 278,
               "down_vote_count": 1,
               "id": "25638420",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1409728530,
               "last_edit_date": 1411631905,
               "last_activity_date": 1411631905
            },
            {
               "answer_id": 25811069,
               "score": 103,
               "body_markdown": "There are two main scenarios\r\n\r\n**You haven&#39;t pushed the commit yet**\r\n\r\nIf the problem was extra files you commited (and you don&#39;t want those on repository), you can remove them using `git rm` and then commiting with `--amend`\r\n\r\n    git rm &lt;pathToFile&gt;\r\n\r\nYou can also remove entire directories with `-r`, or even combine with other [Bash][1] commands\r\n\r\n    git rm -r &lt;pathToDirectory&gt;\r\n    git rm $(find -name &#39;*.class&#39;)\r\n\r\nAfter removing the files, you can commit, with **--amend** option\r\n\r\n    git commit --amend -C HEAD # the -C option is to use the same commit message\r\n\r\nThis will rewrite your recent local commit removing the extra files, so, these files will never be sent on push and also will be removed from your local .git repository by GC.\r\n\r\n**You already pushed the commit**\r\n\r\nYou can apply the same solution of the other scenario and then doing `git push` with the `-f` option, but it is **not recommended** since it overwrites the remote history with a divergent change (it can mess your repository).\r\n\r\nInstead, you have to do the commit without `--amend` (remember this about -amend`: That option rewrites the history on the last commit).\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\r\n",
               "up_vote_count": 103,
               "down_vote_count": 0,
               "id": "25811069",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1410533461,
               "last_edit_date": 1452556247,
               "last_activity_date": 1452556247
            },
            {
               "path": "3.stack.answer",
               "answer_id": 27002094,
               "score": 51,
               "creation_date": 1416337868,
               "body_markdown": "Usually, you want to **undo** a commit because you made a mistake and you want to fix it - essentially what the OP did when he asked the question. So really, you actually want to **redo** a commit.\r\n\r\nMost of the answers here focus on the command line. While the command line is the best way to use Git when you&#39;re comfortable with it, its probably a bit alien to those coming from other version control systems to Git. \r\n\r\nHere&#39;s how to do it using a GUI. If you have Git installed, you already have everything you need to follow these instructions.\r\n\r\n**NOTE:** I will assume here that you realised the commit was wrong before you pushed it. If you don&#39;t know what pushing is, you probably haven&#39;t pushed, so carry on with the instructions. If you have pushed the faulty commit, the least risky way is just to follow up the faulty commit with a new commit that fixes things, the way you would do it in a version control system that does not allow you to rewrite history. \r\n\r\nThat said, here&#39;s how to fix your most recent fault commit using a GUI:\r\n\r\n 1. Navigate to your repository on the command line and start the gui with `git gui`\r\n 2. Choose &quot;Amend last commit&quot;. You will see your last commit message, the files you staged and the files you didn&#39;t.\r\n 3. Now change things to how you want them to look and click Commit. ",
               "up_vote_count": 51,
               "down_vote_count": 0,
               "id": "27002094",
               "last_activity_date": 1416337868,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 30118831,
               "score": 41,
               "body_markdown": "Just undo the last commit: \r\n\r\n    git reset --soft HEAD~\r\n\r\nOr undo the time before last time commit: \r\n\r\n    git reset --soft HEAD~2\r\n\r\nOr undo any previous commit: \r\n\r\n    git reset --soft &lt;commitID&gt;\r\n\r\n \r\n\r\n(you can get the commitID using `git reflog`)\r\n\r\nWhen you undo a previous commit, remember to clean the workplace with\r\n\r\n    git clean\r\n    \r\nMore details can be found in the docs: [git-reset][0]\r\n\r\n\r\n  [0]: http://git-scm.com/docs/git-reset",
               "up_vote_count": 42,
               "down_vote_count": 1,
               "id": "30118831",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1431072263,
               "last_edit_date": 1431968134,
               "last_activity_date": 1431968134
            },
            {
               "answer_id": 30428348,
               "score": 30,
               "body_markdown": "You need to do the easy and fast\r\n\r\n        git commit --amend\r\n\r\nif it&#39;s a private branch or\r\n\r\n        git commit -m &#39;Replace .class files with .java files&#39;\r\n\r\nif it&#39;s a shared or public branch.\r\n",
               "up_vote_count": 30,
               "down_vote_count": 0,
               "id": "30428348",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1432501744,
               "last_edit_date": 1490429689,
               "last_activity_date": 1490429689
            },
            {
               "path": "3.stack.answer",
               "answer_id": 31241087,
               "score": 25,
               "creation_date": 1436171420,
               "body_markdown": "Use this command\r\n\r\n    git checkout -b old-state 0d1d7fc32",
               "up_vote_count": 26,
               "down_vote_count": 1,
               "id": "31241087",
               "last_activity_date": 1436171420,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 31944160,
               "score": 26,
               "creation_date": 1439302274,
               "body_markdown": "In my case I committed and pushed to the wrong branch, so what I wanted was to have all my changes back so I can commit them to a new correct branch, so I did this:\r\n\r\nOn the same branch that you committed and pushed, if you type &quot;git status&quot; you wont&#39;t see anything new because you committed and pushed, now type:\r\n\r\n`    git reset --soft HEAD~1`\r\n\r\nThis will get all your changes(files) back in the stage area, now to get them back in the working directory(unstage) you just type:\r\n\r\n    git reset FILE\r\n\r\nWhere &quot;File&quot; is the file that you want to commit again. Now this FILE should be in the working directory(unstaged) with all the changes that you did. Now you can change to whatever branch that you want and commit the changes in that branch. Hope this helps other people that made the same mistake I did. Of course the initial branch that you committed is still there with all changes, but in my case that was ok, if it is not for you you can look for ways to revert that commit in that branch.",
               "up_vote_count": 26,
               "down_vote_count": 0,
               "id": "31944160",
               "last_activity_date": 1439302274,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 34093958,
               "score": 22,
               "creation_date": 1449249650,
               "body_markdown": "**Remove a wrong commit that is already pushed to Github**\r\n\r\n    git push origin +(previous good commit id):(branch name)\r\nPlease specify the last good commit id you would like to reset back in Github.\r\n\r\nFor example. If latest commit id is wrong then specify the previous commit id in above git command with branch name. \r\n\r\nYou can get previous commit id using `git log`",
               "up_vote_count": 22,
               "down_vote_count": 0,
               "id": "34093958",
               "last_activity_date": 1449249650,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 34195835,
               "score": 22,
               "body_markdown": "You can always do a `git checkout` (SHA code) of the previous version and then commit again with the new code.\r\n",
               "up_vote_count": 22,
               "down_vote_count": 0,
               "id": "34195835",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1449731835,
               "last_edit_date": 1490429716,
               "last_activity_date": 1490429716
            },
            {
               "answer_id": 34547846,
               "score": 37,
               "body_markdown": "###A Typical Git Cycle\r\n\r\nIn speaking of Git-related commands in the previous answers, I would like to share my typical Git cycles with all readers which may helpful. Here is how I work with Git,\r\n\r\n1. Cloning the first time from the remote server\r\n\r\n    `git clone $project`\r\n\r\n2. Pulling from remote (when I don&#39;t have a pending local commit to push)\r\n\r\n    `git pull`\r\n\r\n3. Adding a new local file1 into $to_be_committed_list (just imagine $to_be_committed_list means `staged` area)\r\n\r\n    `git add $file1`\r\n\r\n4. Removing mistakenly added file2 from $to_be_committed_list (assume that file2 is added like step 3, which I didn&#39;t want)\r\n\r\n    `git reset $file2`\r\n\r\n5. Committing file1 which is in $to_be_committed_list\r\n\r\n    `git commit -m &quot;commit message description&quot;`\r\n\r\n6. Syncing local commit with remote repository before pushing\r\n\r\n    `git pull --rebase`\r\n\r\n7. Resolving when conflict occurs [prerequisite configure mergetool][1]\r\n\r\n    `git mergetool #resolve merging here, also can manually merge`\r\n\r\n8. Adding conflict-resolved files, let&#39;s say `file1`:\r\n\r\n    `git add $file1`\r\n\r\n9. Continuing my previous rebase command\r\n\r\n    `git rebase --continue`\r\n\r\n10. Pushing ready and already synced last local commit\r\n\r\n    `git push origin head:refs/for/$branch # branch = master, dev, etc.`\r\n\r\n  [1]: https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration\r\n",
               "up_vote_count": 37,
               "down_vote_count": 0,
               "id": "34547846",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1451572465,
               "last_edit_date": 1490429813,
               "last_activity_date": 1490429813
            },
            {
               "answer_id": 34583071,
               "score": 39,
               "body_markdown": "To undo your local commit you use `git reset &lt;file&gt;`. Also [that tutorial][1] is very helpful to show you how it works.\r\n\r\nAlternatively, you can use `git revert &lt;commit&gt;`: [reverting][2] should be used when you want to add another commit that rolls back the changes (but keeps them in the project history).\r\n\r\n  [1]: https://www.atlassian.com/git/tutorials/undoing-changes/git-reset\r\n  [2]: https://www.atlassian.com/git/tutorials/undoing-changes/git-revert/\r\n",
               "up_vote_count": 39,
               "down_vote_count": 0,
               "id": "34583071",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1451865582,
               "last_edit_date": 1490429882,
               "last_activity_date": 1490429882
            },
            {
               "answer_id": 34635179,
               "score": 89,
               "body_markdown": "Simple, run this in your command line:\r\n\r\n    git reset --soft HEAD~ \r\n\r\n",
               "up_vote_count": 89,
               "down_vote_count": 0,
               "id": "34635179",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1452089412,
               "last_edit_date": 1453154313,
               "last_activity_date": 1453154313
            },
            {
               "answer_id": 35472255,
               "score": 70,
               "body_markdown": "There are many ways to do it:\r\n\r\nGit command to undo the last commit/ previous commits:\r\n\r\n**Basic command to revert the commit in Git is:**\r\n\r\n    $ git reset --hard &lt;COMMIT -ID&gt;\r\n\r\nor\r\n\r\n    $ git reset --hard HEAD~&lt;n&gt;\r\n\r\n**COMMIT-ID**: ID for the commit\r\n\r\n**n:**  is number of last commits you want to revert\r\n\r\nYou can get the commit id as shown below:\r\n\r\n    $ **git log --oneline**\r\n\r\n    d81d3f1 function to subtract two numbers\r\n\r\n    be20eb8 function to add two numbers\r\n\r\n    bedgfgg function to mulitply two numbers\r\n\r\nwhere **d81d3f1** and **be20eb8** are commit id.\r\n\r\n**Now let&#39;s see some cases:**\r\n\r\n*Suppose you want to revert the last commit &#39;d81d3f1&#39;. Below are the ways:*\r\n\r\n    $ git reset --hard d81d3f1\r\n\r\nor\r\n\r\n    $ git reset --hard HEAD~1\r\n\r\n*Suppose you want to revert the commit &#39;be20eb8&#39;. Below are the way:*\r\n\r\n    $ git reset --hard be20eb8\r\n\r\nFor more detailed information you can refer and try out some other commands too for resetting head to a specified state:\r\n\r\n    $ git reset --help\r\n",
               "up_vote_count": 71,
               "down_vote_count": 1,
               "id": "35472255",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1455766058,
               "last_edit_date": 1490429959,
               "last_activity_date": 1490429959
            },
            {
               "answer_id": 35826537,
               "score": 120,
               "body_markdown": "## Undo last commit: ##\r\n\r\n`git reset --soft HEAD^` or `git reset --soft HEAD~`\r\n\r\nThis will undo the last commit.\r\n\r\nHere `--soft` means reset into staging.\r\n\r\n`HEAD~` or `HEAD^` means to move to commit before HEAD.\r\n\r\n----------\r\n\r\n## Replace last commit to new commit: ##\r\n\r\n    git commit --amend -m &quot;message&quot;\r\n\r\nIt will replace the last commit with the new commit.\r\n\r\n",
               "up_vote_count": 121,
               "down_vote_count": 1,
               "id": "35826537",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1457265202,
               "last_edit_date": 1513202720,
               "last_activity_date": 1513202720
            },
            {
               "answer_id": 36040444,
               "score": 28,
               "body_markdown": "I got the commit ID from `bitbucket` and then did:\r\n\r\n    git checkout commitID .\r\n\r\nExample:\r\n\r\n    git checkout 7991072 .\r\n\r\nAnd it reverted it back up to that working copy of that commit.\r\n",
               "up_vote_count": 30,
               "down_vote_count": 2,
               "id": "36040444",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1458142910,
               "last_edit_date": 1490430071,
               "last_activity_date": 1490430071
            },
            {
               "answer_id": 36876212,
               "score": 34,
               "body_markdown": "**VISUAL STUDIO USERS (2015, etc.)**\r\n\r\nIf you cannot synchronise in Visual Studio as you are not allowed to push to a branch like &quot;development&quot; then as much as I tried, in Visual Studio NEITHER the **REVERT** NOR the **RESET** (hard or soft) would work.\r\n\r\nPer the answer with TONS OF VOTES:\r\n\r\nUse this at the command prompt of root of your project to nuke anything that will attempt to get pushed:\r\n\r\n    git reset --hard HEAD~1\r\n\r\nBackup or zip your files just in case you don&#39;t wish to lose any work, etc...\r\n",
               "up_vote_count": 34,
               "down_vote_count": 0,
               "id": "36876212",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1461706553,
               "last_edit_date": 1490430164,
               "last_activity_date": 1490430164
            },
            {
               "path": "3.stack.answer",
               "answer_id": 37510994,
               "score": 15,
               "creation_date": 1464531677,
               "body_markdown": "Just use `git reset --hard &lt;last good SHA&gt;` to reset your changes and give new commit. You can also use `git checkout -- &lt;bad filename&gt;`.",
               "up_vote_count": 16,
               "down_vote_count": 1,
               "id": "37510994",
               "last_activity_date": 1464531677,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 38091882,
               "score": 50,
               "body_markdown": "You can use:\r\n\r\n    git reset HEAD@{1}\r\n\r\nThis command will delete your wrong commit without a Git log.\r\n",
               "up_vote_count": 52,
               "down_vote_count": 2,
               "id": "38091882",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1467181706,
               "last_edit_date": 1490430193,
               "last_activity_date": 1490430193
            },
            {
               "answer_id": 38629666,
               "score": 46,
               "body_markdown": "## WHAT TO USE, `reset --soft` or `reset --hard`?\r\n\r\nI am just adding two cents for @Kyralessa&#39;s answer:\r\n\r\nIf you are unsure what to use go for `--soft` (I used this convention to remember it --**s**oft for safe).\r\n\r\n### Why ?\r\nIf you choose `--hard` by mistake you will **LOSE** your changes as it wasn&#39;t before.\r\nIf you choose `--soft` by mistake you can achieve the same results of `--hard` by applying additional commands\r\n\r\n    git reset HEAD file.html\r\n    git checkout -- file.html\r\n\r\n### Full example\r\n\r\n    echo &quot;some changes...&quot; &gt; file.html\r\n    git add file.html\r\n    git commit -m &quot;wrong commit&quot;\r\n\r\n    # I need to reset\r\n    git reset --hard HEAD~1 (cancel changes)\r\n    # OR\r\n    git reset --soft HEAD~1 # Back to staging\r\n    git reset HEAD file.html # back to working directory\r\n    git checkout -- file.html # cancel changes\r\n\r\nCredits goes to @Kyralessa.\r\n",
               "up_vote_count": 46,
               "down_vote_count": 0,
               "id": "38629666",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1469690662,
               "last_edit_date": 1490430271,
               "last_activity_date": 1490430271
            },
            {
               "answer_id": 38656254,
               "score": 43,
               "body_markdown": "If you are working with **[SourceTree][1]**, this will help you.\r\n\r\n**Right click** on the commit then **select** &quot;*Reset (current branch)/master to this commit*&quot; and last **select**  *&quot;Soft&quot; reset*.\r\n\r\n [![Enter image description here][2]][2]\r\n\r\n  [1]: https://www.sourcetreeapp.com/\r\n  [2]: http://i.stack.imgur.com/BSMo2.png\r\n",
               "up_vote_count": 43,
               "down_vote_count": 0,
               "id": "38656254",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1469787268,
               "last_edit_date": 1490433739,
               "last_activity_date": 1490433739
            },
            {
               "answer_id": 40445749,
               "score": 21,
               "body_markdown": "In order to get rid of (all the changes in) last commit, last 2 commits and last n commits:\r\n\r\n    git reset --hard HEAD~1\r\n    git reset --hard HEAD~2\r\n    ...\r\n    git reset --hard HEAD~n\r\n\r\nAnd, to get rid of anything after a specific commit:\r\n\r\n    git reset --hard &lt;commit sha&gt;\r\n\r\ne.g., \r\n\r\n    git reset --hard 0d12345\r\n\r\n&gt; PS:  \r\n&gt; 1- Be careful, because of &quot;hard&quot; option, it deletes the local changes\r\n&gt; in your repo as well and reverts to the previous mentioned commit. You\r\n&gt; should run this if you are sure you messed up in your last commit(s)\r\n&gt; and would like to go back in time. \r\n&gt; \r\n&gt; 2- Usually 7 letters of &quot;commit sha&quot; is enough, but in bigger\r\n&gt; projects, you may need up to 12 letters to guarantee be unique. You\r\n&gt; also can mention the whole 40 letters sha.\r\n&gt; \r\n&gt; 3- The above commands work in Github for Windows as well.",
               "up_vote_count": 21,
               "down_vote_count": 0,
               "id": "40445749",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1478403522,
               "last_edit_date": 1478404182,
               "last_activity_date": 1478404182
            },
            {
               "path": "3.stack.answer",
               "answer_id": 40619708,
               "score": 9,
               "creation_date": 1479244072,
               "body_markdown": "[![enter image description here][1]][1]\r\n\r\nAssuming you&#39;re working in Visual Studio, if you go in to you branch history and look at all of your commits, simply select the event prior to the commit you want to undo, right-click it, and select `Revert`.  Easy as that.\r\n  [1]: https://i.stack.imgur.com/ueFVY.png",
               "up_vote_count": 9,
               "down_vote_count": 0,
               "id": "40619708",
               "last_activity_date": 1479244072,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 40672892,
               "score": 38,
               "body_markdown": "Think we have ***code.txt*** file.\r\nWe make some changes on it and commit.\r\n**We can undo this commit in three ways**, but first you should know what is the staged file...\r\nAn staged file is a file that ready to commit and if you run `git status` this file will be shown with green color and if this is not staged for commit will be shown with red color:\r\n\r\n[![enter image description here][1]][1]\r\n\r\nIt means if you commit your change, your changes on this file is not saved.\r\nYou can add this file in your stage with `git add code.txt` and then commit your change:\r\n\r\n[![enter image description here][2]][2]\r\n\r\n**Undo last commit:**\r\n\r\n1. Now if we want just undo commit without any other changes, we can use\r\n\r\n    `git reset --soft HEAD^` \r\n\r\n    [![enter image description here][3]][3]\r\n\r\n2. If we want undo commit and its changes (***THIS IS DANGEROUS, because your change will lost***), we can use\r\n\r\n    `git reset --hard HEAD^`\r\n\r\n    [![enter image description here][4]][4]\r\n\r\n3. And if we want undo commit and remove changes from stage, we can use\r\n\r\n    `git reset --mixed HEAD^` or in a short form `git reset HEAD^`\r\n\r\n    [![enter image description here][5]][5]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/ymNKl.png\r\n  [2]: https://i.stack.imgur.com/36Yag.png\r\n  [3]: https://i.stack.imgur.com/Tx6x1.png\r\n  [4]: https://i.stack.imgur.com/8NDBS.png\r\n  [5]: https://i.stack.imgur.com/jg8g0.png",
               "up_vote_count": 38,
               "down_vote_count": 0,
               "id": "40672892",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1479459459,
               "last_edit_date": 1510781116,
               "last_activity_date": 1510781116
            },
            {
               "answer_id": 41168796,
               "score": 7,
               "body_markdown": "I have found [this][1] site which describes how to undo things that you have committed into the repository.\r\n\r\nSome commands:\r\n\r\n    git commit --amend        # Change last commit\r\n    git reset HEAD~ --soft    # Undo last commit\r\n\r\n  [1]: http://ohshitgit.com/\r\n",
               "up_vote_count": 11,
               "down_vote_count": 4,
               "id": "41168796",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1481818888,
               "last_edit_date": 1490433800,
               "last_activity_date": 1490433800
            },
            {
               "answer_id": 41340201,
               "score": 17,
               "body_markdown": "You just have to use a single command:\r\n\r\n    git reset --soft &#39;HEAD^&#39; \r\n\r\nIt works to undo the last local commit to your Git repository.\r\n",
               "up_vote_count": 18,
               "down_vote_count": 1,
               "id": "41340201",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1482820605,
               "last_edit_date": 1490433829,
               "last_activity_date": 1490433829
            },
            {
               "answer_id": 41350510,
               "score": 23,
               "body_markdown": "Use this command:\r\n\r\n    git checkout -b old-state number_commit\r\n",
               "up_vote_count": 23,
               "down_vote_count": 0,
               "id": "41350510",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1482864171,
               "last_edit_date": 1490433842,
               "last_activity_date": 1490433842
            },
            {
               "answer_id": 41568578,
               "score": 64,
               "body_markdown": "If you want remove files in the last commit, you can use this:  \r\n\r\n    git reset --hard HEAD~1\r\n\r\nAnd if need files in the last commit, you can use this:  \r\n\r\n    git reset --soft HEAD~1\r\n",
               "up_vote_count": 64,
               "down_vote_count": 0,
               "id": "41568578",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1484050351,
               "last_edit_date": 1490433858,
               "last_activity_date": 1490433858
            },
            {
               "path": "3.stack.answer",
               "answer_id": 41905003,
               "score": 24,
               "creation_date": 1485562213,
               "body_markdown": "You have several options to undo your last commit. \r\nHere are some of your options summarize into a single answer with code snippets\r\n\r\n**First of all you need to figure which are the &quot;wrong&quot; commits which you wish to discard.** We will use `git reflog` to find it.\r\n\r\n---\r\n\r\n###[`git reflog`](https://git-scm.com/docs/git-reflog)\r\nYou can always use the `reflog` as well.  \r\n`git reflog ` will display any change which updated the `HEAD` and checking out the desired reflog entry will set the `HEAD` back to this commit. \r\n\r\n**Every time the HEAD is modified there will be a new entry in the `reflog`**.  \r\nThe `reflog` is similar to unix history command and is kept locally on your machine.\r\n\r\n    git reflog\r\n    git checkout HEAD@{...}\r\n    # or\r\n    git checkout &lt;sha-1&gt;\r\n    \r\nUsing the checkout you can go back to any desired commit and you can create branch or any other options that git checkout will allow you to do.\r\n\r\n[![enter image description here][1]][1]\r\n\r\n---\r\n\r\n###***[`git reset HEAD --hard &lt;commit_id&gt;`](https://git-scm.com/docs/git-reset)***\r\n**&quot;Move&quot;** your head back to the desired commit.  \r\nGit reset will checkout the desired commit content to your staging area and/or to your working directory based upon the value `--hard/--soft/--mixed` you choose to pick. `--hard` will update both stage area and working directory with the given &lt;sha-1&gt; content and will &quot;detach&quot; any other commits beyond this point on your local branch. \r\n\r\nIf those commits are not part of any other branch they will become &quot;dangle&quot;.  \r\n&quot;dangle&quot; content means that there is a un-reachable content in your local repository which is not part of any other branch and can be removed or will be removed by the `gc`.\r\n\r\n    # This will destroy any local modifications.\r\n    # Don&#39;t do it if you have uncommitted work you want to keep.\r\n    git reset --hard 0d1d7fc32\r\n\r\n    # Alternatively, if there&#39;s work to keep:\r\n    git stash\r\n    git reset --hard 0d1d7fc32\r\n    git stash pop\r\n    # This saves the modifications, then reapplies that patch after resetting.\r\n    # You could get merge conflicts, if you&#39;ve modified things which were\r\n    # changed since the commit you reset to.\r\n\r\n---\r\n\r\nThis schema illustrate which command does what.  \r\nAs you can see there `reset &amp;&amp; checkout` modify the `HEAD`.\r\n\r\n[![enter image description here][2]][2]\r\n\r\n\r\n[1]: http://i.stack.imgur.com/atW9w.png\r\n[2]: http://i.stack.imgur.com/NuThL.png\r\n",
               "up_vote_count": 24,
               "down_vote_count": 0,
               "id": "41905003",
               "last_activity_date": 1485562213,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 42512807,
               "score": 20,
               "body_markdown": "Use:\r\n\r\n    git reset HEAD~1 --soft\r\n\r\nMake changes, add, and commit the changes.\r\n\r\n",
               "up_vote_count": 21,
               "down_vote_count": 1,
               "id": "42512807",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1488295946,
               "last_edit_date": 1490433894,
               "last_activity_date": 1490433894
            },
            {
               "path": "3.stack.answer",
               "answer_id": 42844988,
               "score": 4,
               "creation_date": 1489699251,
               "body_markdown": "    git reset --hard your_last_good_commit_hash_here\r\n\r\n    git push --force origin master",
               "up_vote_count": 5,
               "down_vote_count": 1,
               "id": "42844988",
               "last_activity_date": 1489699251,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 43128168,
               "score": 16,
               "body_markdown": "Reference: [How to undo last commit in Git?][1]\r\n\r\nIf you have Git Extensions installed you can easily undo/revert any commit (you can download git extensions from [here][2]).\r\n\r\nOpen Git Extensions, right click on the commit you want to revert then select &quot;Revert commit&quot;. \r\n\r\n[![Git Extensions screen shot][3]][3]\r\n\r\n\r\nA popup will be opened (see the screenshot below)\r\n\r\n[![Revert commit popup][4]][4]\r\n\r\n\r\nSelect &quot;Automatically create a commit&quot; if you want to directly commit the reverted changes or if you want to manually commit the reverted changes keep the box un-selected and click on &quot;Revert this commit&quot; button.\r\n\r\n\r\n  [1]: http://www.coding-issues.com/2017/03/how-to-undo-or-revert-last-commits-in-git.html\r\n  [2]: https://gitextensions.github.io/\r\n  [3]: https://i.stack.imgur.com/j2fK1.png\r\n  [4]: https://i.stack.imgur.com/Skufo.jpg",
               "up_vote_count": 17,
               "down_vote_count": 1,
               "id": "43128168",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1490907419,
               "last_edit_date": 1491993095,
               "last_activity_date": 1491993095
            },
            {
               "answer_id": 43826836,
               "score": 25,
               "body_markdown": "Suppose you made a wrong commit locally and pushed it to remote repo. You can undo the mess with these two commands.\r\n\r\nFirst we need to correct our local repo by going back to the commit that we desire:\r\n\r\n    git reset --hard &lt;previous good commit id where you want local repo to go&gt;\r\n\r\nNow we forcefully push this good commit on the remote repo by using this command:\r\n\r\n    git push --force-with-lease\r\n\r\nThe &#39;with-lease&#39; version of the force option will prevent accidental deletion of new commits you do not know about (i.e. coming from another source since your last pull).",
               "up_vote_count": 25,
               "down_vote_count": 0,
               "id": "43826836",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1494118866,
               "last_edit_date": 1501538652,
               "last_activity_date": 1501538652
            },
            {
               "path": "3.stack.answer",
               "answer_id": 44347830,
               "score": 7,
               "creation_date": 1496518336,
               "body_markdown": "Find the last commit hash code by seeing the log by :\r\n\r\n    git log\r\n\r\nThen\r\n\r\n    git reset &lt;the previous co&gt;",
               "up_vote_count": 8,
               "down_vote_count": 1,
               "id": "44347830",
               "last_activity_date": 1496518336,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 44649998,
               "score": 8,
               "body_markdown": "In IntelliJ IDEA you can just open Git Repository Log by pressing &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;9&lt;/kbd&gt;, then right mouse button click at some tag from commits list and select: &quot;Reset Current Branch to Here...&quot;",
               "up_vote_count": 8,
               "down_vote_count": 0,
               "id": "44649998",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1497953121,
               "last_edit_date": 1500209638,
               "last_activity_date": 1500209638
            },
            {
               "answer_id": 44672195,
               "score": 172,
               "body_markdown": "Just reset it doing the command below using `git`:\r\n\r\n    git reset --soft HEAD~1\r\n\r\n**Explain:** what `git reset` does, it&#39;s basically `reset` to any commit you&#39;d like to go back to, then if you combine it with `--soft` key, it will go back, but keep the  changes in your file(s), so you get back to the stage which the file was just added, `HEAD` is the head of the branch and if you combine with `~1` (in this case you also use `HEAD^`), it will go back only one commit which what you want...\r\n\r\nI create the steps in the image below in more details for you, including all steps that may happens in real situations and committing the code:\r\n\r\n[![How to undo the last commits in Git?][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/7zrzb.jpg",
               "up_vote_count": 173,
               "down_vote_count": 1,
               "id": "44672195",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1498037599,
               "last_edit_date": 1509108394,
               "last_activity_date": 1509108394
            },
            {
               "answer_id": 44790317,
               "score": 7,
               "body_markdown": "For the sake of completeness, I will give the one glaringly obvious method that was overlooked by the previous answers. \r\n\r\nSince the commit was not pushed, the remote was unchanged, so:\r\n\r\n 1. Delete the local repo.\r\n 2. Clone the remote repo.\r\n\r\nThis is sometimes necessary if your fancy git client goes bye-bye.&lt;br&gt;\r\nDon&#39;t forget to re-commit your *saved* changes since the last push.\r\n",
               "up_vote_count": 8,
               "down_vote_count": 1,
               "id": "44790317",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1498599267,
               "last_edit_date": 1500319624,
               "last_activity_date": 1500319624
            },
            {
               "path": "3.stack.answer",
               "answer_id": 45164987,
               "score": 6,
               "creation_date": 1500375917,
               "body_markdown": "**HEAD:**\r\n\r\n   Before reset commit we should know about HEAD... HEAD is nothing but your current state in your working directory.. it is represented by commit number...\r\n\r\n**git commmit:**\r\n\r\nEach changes assigned under commit which is represented by unique tag.. Commits can&#39;t be deleted. so if you want your last commit you can simply dive into it using `git reset`\r\n\r\nyou can dive into last commit using 2 method,\r\n\r\n**Method 1:** ( if you dont know commit number but want to move onto very first) \r\n\r\n    git reset HEAD~1  #it will move your head to last commit\r\n\r\n**Method 2:** ( if you know commit you simply reset onto your known commit)\r\n\r\n`git reset 0xab3` # commit number \r\n\r\n\r\n**Note:**  if you want to know recent commit try this, `git log -p -1` \r\n\r\nhere is the graphical representation,\r\n\r\n[![enter image description here][1]][1]\r\n\r\n   \r\n\r\n  \r\n\r\n\r\n  [1]: https://i.stack.imgur.com/boiKO.png",
               "up_vote_count": 7,
               "down_vote_count": 1,
               "id": "45164987",
               "last_activity_date": 1500375917,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 45456148,
               "score": 13,
               "creation_date": 1501664314,
               "body_markdown": "You can undo your git commits in two ways:-\r\nFirst is you can use git revert, if you want to keep your commit history.\r\n\r\n    git revert HEAD~3\r\n    git revert &lt;hashcode of commit&gt;\r\n\r\nSecond is you can use git reset, which would delete all your commit history and bring your head to commit where you want it.\r\n\r\n    git reset &lt;hashcode of commit&gt;\r\n    git reset HEAD~3\r\n\r\nYou can also use --hard keyword if any of it start behaving otherwise. But , I would recommend until it&#39;s extremely necessary.",
               "up_vote_count": 13,
               "down_vote_count": 0,
               "id": "45456148",
               "last_activity_date": 1501664314,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 46210590,
               "score": 25,
               "body_markdown": "**Undo the Last Commit**\r\n\r\nThere are tons of situations where you really want to undo that last commit into your code. E.g. because you&#39;d like to restructure it extensively - or even discard it altogether!\r\n\r\nIn these cases, the &quot;reset&quot; command is your best friend:\r\n\r\n    $ git reset --soft HEAD~1\r\n\r\nThe above command (reset) will rewind your current HEAD branch to the specified revision. In our example above, we&#39;d like to return to the one before the current revision - effectively making our last commit undone.\r\n\r\nNote the `--soft` flag: this makes sure that the changes in undone revisions are preserved. After running the command, you&#39;ll find the changes as uncommitted local modifications in your working copy.\r\n\r\nIf you don&#39;t want to keep these changes, simply use the `--hard` flag. Be sure to only do this when you&#39;re sure you don&#39;t need these changes any more.\r\n\r\n    $ git reset --hard HEAD~1\r\n\r\n[![Enter image description here][1]][1]\r\n\r\n  [1]: https://i.stack.imgur.com/hqetQ.png\r\n",
               "up_vote_count": 26,
               "down_vote_count": 1,
               "id": "46210590",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1505363632,
               "last_edit_date": 1517175299,
               "last_activity_date": 1517175299
            },
            {
               "path": "3.stack.answer",
               "answer_id": 48801644,
               "score": 3,
               "creation_date": 1518678495,
               "body_markdown": "**Undo last commit:**\r\n\r\n    git reset --soft HEAD^ or git reset --soft HEAD~\r\n\r\n**This will undo the last commit.**\r\n\r\nHere `--soft` means reset into staging.\r\n\r\n`HEAD~ or HEAD^` means to move to commit before HEAD.\r\n\r\nReplace last commit to new commit:\r\n\r\n    git commit --amend -m &quot;message&quot;\r\n\r\nIt will replace the last commit with the new commit.\r\n",
               "up_vote_count": 3,
               "down_vote_count": 0,
               "id": "48801644",
               "last_activity_date": 1518678495,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 49025156,
               "score": 0,
               "creation_date": 1519806898,
               "body_markdown": "Here is site: [`Oh shit, git!`](http://ohshitgit.com/).  \r\n\r\nHere are many recipes how to undo things in git. Some of them:\r\n\r\n&gt;Oh shit, I need to change the message on my last commit!\r\n\r\n    git commit --amend\r\n    # follow prompts to change the commit message\r\n\r\n&gt;Oh shit, I accidentally committed something to master that should have been on a brand new branch!\r\n\r\n    # create a new branch from the current state of master\r\n    git branch some-new-branch-name\r\n    # remove the commit from the master branch\r\n    git reset HEAD~ --hard\r\n    git checkout some-new-branch-name\r\n    # your commit lives in this branch now :)",
               "up_vote_count": 0,
               "down_vote_count": 0,
               "id": "49025156",
               "last_activity_date": 1519806898,
               "tags": [],
               "is_accepted": false
            }
         ],
         "last_edit_date": "1518818337",
         "link": "https://stackoverflow.com/questions/927358/how-to-undo-the-most-recent-commits-in-git",
         "creation_date": "1243620554"
      },
      {
         "title": "What is the correct JSON content type?",
         "code_snippet": "['<code>application/json\\napplication/x-javascript\\ntext/javascript\\ntext/x-javascript\\ntext/x-json\\n</code>', '<code>application/json</code>', '<code>application/javascript</code>', '<code>text/html</code>', '<code>application/json</code>', '<code>application/json</code>', '<code>text/json</code>', '<code>application/*</code>', '<code>text/*</code>', '<code>text/*</code>', '<code>application/*</code>', '<code>application/json</code>', '<code>text</code>', '<code>text/xml/xhtml</code>', '<code>.jpg</code>', '<code>cat file.jpg</code>', '<code>Content-Type: application/json\\n</code>', '<code>Content-Type: application/javascript\\n</code>', '<code>application/json</code>', '<code>uploadForm.getForm().addListener(new FormListenerAdapter()\\n{\\n    @Override\\n    public void onActionFailed(Form form, int httpStatus, String responseText) \\n    {\\n        MessageBox.alert(\"Error\");\\n    }\\n\\n    @Override\\n    public void onActionComplete(Form form, int httpStatus, String responseText) \\n    {\\n        MessageBox.alert(\"Success\");\\n    }\\n});\\n</code>', '<code>return new AbstractUrlBasedView() \\n{\\n    @SuppressWarnings(\"unchecked\")\\n    @Override\\n    protected void renderMergedOutputModel(Map model, HttpServletRequest request,\\n                                           HttpServletResponse response) throws Exception \\n    {\\n        response.setContentType(\"text/html\");\\n        response.getWriter().write(json);\\n    }\\n};\\n</code>', '<code>{ \"Name\": \"Foo\", \"Id\": 1234, \"Rank\": 7 }\\n</code>', '<code>application/json</code>', '<code>functionCall({\"Name\": \"Foo\", \"Id\": 1234, \"Rank\": 7});\\n</code>', '<code>application/javascript</code>', '<code>application/json json\\n</code>', '<code>sudo service apache2 restart\\n</code>', '<code>application/json</code>', '<code>content-Type: text/plain</code>', '<code>content-Type: application/json</code>', '<code>content-Type: application/json; charset=UTF-8</code>', '<code>contentType: \"application/x-www-form-urlencoded; charset=UTF-8\"</code>', '<code>application/json</code>', '<code>application/javascript</code>', '<code>application/json</code>', '<code>application/x-javascript</code>', '<code>web.config</code>', '<code>&lt;httpCompression&gt;\\n    &lt;scheme name=\"gzip\" dll=\"%Windir%\\\\system32\\\\inetsrv\\\\gzip.dll\"/&gt;\\n    &lt;dynamicTypes&gt;\\n        &lt;add mimeType=\"text/*\" enabled=\"true\"/&gt;\\n        &lt;add mimeType=\"message/*\" enabled=\"true\"/&gt;\\n        &lt;add mimeType=\"application/javascript\" enabled=\"true\"/&gt;\\n        &lt;add mimeType=\"*/*\" enabled=\"false\"/&gt;\\n    &lt;/dynamicTypes&gt;\\n    &lt;staticTypes&gt;\\n        &lt;add mimeType=\"text/*\" enabled=\"true\"/&gt;\\n        &lt;add mimeType=\"message/*\" enabled=\"true\"/&gt;\\n        &lt;add mimeType=\"application/javascript\" enabled=\"true\"/&gt;\\n        &lt;add mimeType=\"*/*\" enabled=\"false\"/&gt;\\n    &lt;/staticTypes&gt;\\n&lt;/httpCompression&gt;\\n&lt;urlCompression doStaticCompression=\"true\" doDynamicCompression=\"true\"/&gt;\\n</code>', '<code>&lt;add mimeType=\"application/json\" enabled=\"true\"/&gt;\\n</code>', '<code>&lt;add mimeType=\"application/x-javascript\" enabled=\"true\"/&gt;\\n</code>', '<code>application/x-javascript\\n</code>', '<code>application/x-javascript\\n</code>', '<code>application/json</code>', '<code>application/json</code>', '<code>application/json</code>', '<code>&lt;iframe&gt;</code>', '<code>Content-Type</code>', '<code>text/html</code>', '<code>application/json</code>', '<code>iframe</code>', '<code>load</code>', '<code>application/javascript</code>', '<code>application/x-javascript</code>', '<code>text/javascript</code>', '<code>text/plain</code>', '<code>application/json</code>', '<code>text/html</code>', '<code>application/json</code>', '<code>text/plain</code>', '<code>application/json</code>', '<code>text/plain</code>', '<code>text/plain</code>', '<code>text/HTML</code>', '<code>application/json</code>', '<code>text/html</code>', '<code>Content-Type: application/json\\n</code>', '<code>application/json</code>', '<code>application/x-javascript</code>', '<code>application/javascript</code>', '<code>text/javascript</code>', '<code>application/javascript</code>', '<code>text/x-javascript</code>', '<code>text/x-json</code>', '<code>application/json</code>', '<code>text/javascript</code>', '<code>&lt;script type=\"text/javascript\" ...</code>', '<code>type=\"text/javascript\"</code>', '<code>&lt;script&gt;...&lt;/script&gt;</code>', '<code>&lt;%@ page language=\"java\" contentType=\"application/json; charset=UTF-8\"\\n    pageEncoding=\"UTF-8\"%&gt;\\n</code>', '<code>application/json</code>', '<code>application/json</code>', \"<code>def ajaxFindSystems = {\\n  def result = Systems.list()\\n  render(contentType:'application/json') {\\n    results {\\n      result.each{sys-&gt;\\n        system(id:sys.id, name:sys.name)\\n      }\\n    }\\n    resultset (rows:result.size())\\n  }\\n}\\n</code>\", '<code>application/json</code>', '<code>application/javascript</code>', '<code>application/json</code>', '<code>text/json</code>', '<code>text/javascript</code>', '<code>text/plain</code>', '<code>text/xml</code>', '<code>text/html</code>', '<code>curl -I http://ajax.googleapis.com:80/ajax/services/search/web\\\\?q\\\\=json\\n</code>', '<code>Content-Type: text/html</code>', '<code>curl -I https://www.flickr.com/services/rest/?method=flickr.test.echo&amp;format=json&amp;api_key=f82254c1491d894f1204d8408f645a93\\n</code>', '<code>Content-Type: text/xml</code>', '<code>application/json</code>', '<code>text/html\\n\\napplication/javascript\\n</code>', \"<code>contentType: 'application/json',\\ndata: JSON.stringify(SendData),\\n</code>\", '<code>@RequestMapping(value=\"location\", method = RequestMethod.POST, headers = \"Accept=application/json\")\\n</code>', '<code>HttpHeaders headers = new HttpHeaders();\\nheaders.add(\"Content-Type\", \"application/json\");\\n</code>', '<code>MediaType.APPLICATION_JSON_VALUE</code>', '<code>application/json</code>', '<code>$context = stream_context_create([\\n    \\'gs\\' =&gt; [\\n        \\'acl\\'=&gt;\\'public-read\\', \\n        \\'Content-Type\\' =&gt; \\'application/json\\',\\n    ]\\n]);\\n\\nfile_put_contents(\\n    \"gs://BUCKETNAME/FILENAME.json\", \\n    json_encode((object) $array), \\n    false, \\n    $context\\n);\\n</code>', '<code>$data = json_decode(file_get_contents(\"gs://BUCKETNAME/FILENAME.json\"));\\n</code>', '<code>application/jsonp</code>', '<code>application/json</code>', '<code> Content-Type: application/json\\n</code>', '<code>For JSON data: Content-Type:application/json\\nFor HTML data: Content-Type:text/html,\\nFor XHTML data: Content-Type:application/xhtml+xml,\\nFor XML data: Content-Type:text/xml, application/xml\\n</code>', '<code>&lt;?php\\n    header(\"Content-type: application/json\");\\n\\n    // Do something here...\\n?&gt;\\n</code>', '<code>application/x-resource+json</code>', '<code>application/x-collection+json</code>', '<code>application/vnd.api+json</code>', '<code>application/json</code>', '<code>application/vnd.api+json</code>', '<code>application/json.\\n</code>', '<code>application/javascript,</code>', '<code>text/javascript</code>', '<code>text/javascript</code>', '<code>application/javascript</code>', '<code>text/javascript</code>', '<code>application/javascript</code>', '<code> Content-type: application/json,json\\n Content-Type: application/javascript, json-P\\n Content-type: application/x-javascript, javascript\\n Content-type: text/javascript, javascript BUT obsolete, older IE versions \\n used to use as html attribute\\n Content-type: text/x-javascript, JavaScript Media Types BUT obsolete\\n Content-type: text/x-json, json before application/json got officially registered.\\n</code>']",
         "body_markdown": "I&#39;ve been messing around with [JSON][1] for some time, just pushing it out as text and it hasn&#39;t hurt anybody (that I know of), but I&#39;d like to start doing things properly.\r\n\r\nI have seen *so* many purported &quot;standards&quot; for the JSON content type:\r\n\r\n    application/json\r\n    application/x-javascript\r\n    text/javascript\r\n    text/x-javascript\r\n    text/x-json\r\n\r\nBut which is correct, or best? I gather that there are security and browser support issues varying between them.\r\n\r\nI know there&#39;s a similar question, *[What MIME type if JSON is being returned by a REST API?][2]*, but I&#39;d like a slightly more targeted answer.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/JSON\r\n  [2]: https://stackoverflow.com/questions/404470/what-mime-type-if-json-is-being-returned-by-a-rest-api\r\n",
         "up_vote_count": "8823",
         "view_count": "2045352",
         "id": "8587033-2",
         "answer_count": "33",
         "tags": "['json', 'content-type']",
         "path": "2.stack",
         "_childDocuments_": [
            {
               "answer_id": 477819,
               "score": 8839,
               "body_markdown": "For JSON text:\r\n\r\n&gt; The MIME media type for JSON text is **`application/json`**. The default encoding is UTF-8. (Source: [RFC 4627][1]).\r\n\r\nFor [JSONP][2] with callback:\r\n\r\n&gt; **`application/javascript`**\r\n\r\nHere are some blog posts that were mentioned in the comments that are relevant.\r\n \r\n - [Why you shouldn&#39;t use `text/html` for JSON][3]\r\n - [Internet&amp;nbsp;Explorer sometimes has issues with `application/json`][4]\r\n - [A rather complete list of Mimetypes and what to use them for][5]\r\n\r\n  [1]: http://www.ietf.org/rfc/rfc4627.txt\r\n  [2]: http://en.wikipedia.org/wiki/JSONP\r\n  [3]: http://jibbering.com/blog/?p=514\r\n  [4]: http://www.entwicklungsgedanken.de/2008/06/06/problems-with-internet-explorer-and-applicationjson/\r\n  [5]: https://github.com/h5bp/server-configs-nginx/blob/master/mime.types\r\n",
               "up_vote_count": 8851,
               "down_vote_count": 12,
               "id": "477819",
               "tags": [],
               "is_accepted": true,
               "path": "3.stack.answer",
               "creation_date": 1232897249,
               "last_edit_date": 1519431178,
               "last_activity_date": 1519431178
            },
            {
               "answer_id": 477821,
               "score": 350,
               "body_markdown": "If you&#39;re calling ASP.NET Web Services from the client-side you have to use `application/json` for it to work. I believe this is the same for the [jQuery][1] and [Ext][2] frameworks. \r\n\r\n  [1]: http://en.wikipedia.org/wiki/JQuery\r\n  [2]: http://en.wikipedia.org/wiki/Ext_%28JavaScript_library%29\r\n",
               "up_vote_count": 351,
               "down_vote_count": 1,
               "id": "477821",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1232897498,
               "last_edit_date": 1401158298,
               "last_activity_date": 1401158298
            },
            {
               "answer_id": 1532020,
               "score": 564,
               "body_markdown": "Of course, the correct MIME media type for JSON is `application/json`, but it&#39;s necessary to realize what type of data is expected in your application.\r\n\r\nFor example, I use [Ext GWT][1] and the server response must go as **text/html** but contains JSON data.\r\n\r\n*Client side, Ext GWT form listener*\r\n\r\n    uploadForm.getForm().addListener(new FormListenerAdapter()\r\n    {\r\n        @Override\r\n        public void onActionFailed(Form form, int httpStatus, String responseText) \r\n        {\r\n            MessageBox.alert(&quot;Error&quot;);\r\n        }\r\n\r\n        @Override\r\n        public void onActionComplete(Form form, int httpStatus, String responseText) \r\n        {\r\n            MessageBox.alert(&quot;Success&quot;);\r\n        }\r\n    });\r\n\r\nIn case of using **application/json** response type, the browser suggests me to save the file.\r\n\r\n*Server side source code snippet using [Spring MVC][2]*\r\n\r\n    return new AbstractUrlBasedView() \r\n    {\r\n        @SuppressWarnings(&quot;unchecked&quot;)\r\n        @Override\r\n        protected void renderMergedOutputModel(Map model, HttpServletRequest request,\r\n                                               HttpServletResponse response) throws Exception \r\n        {\r\n            response.setContentType(&quot;text/html&quot;);\r\n            response.getWriter().write(json);\r\n        }\r\n    };\r\n\r\n  [1]: http://www.sencha.com/products/extgwt/\r\n  [2]: http://en.wikipedia.org/wiki/Spring_Framework#Model-view-controller_framework\r\n",
               "up_vote_count": 571,
               "down_vote_count": 7,
               "id": "1532020",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1254926136,
               "last_edit_date": 1430779034,
               "last_activity_date": 1430779034
            },
            {
               "answer_id": 2590013,
               "score": 1411,
               "body_markdown": "[IANA](http://www.iana.org) has registered the official MIME Type for JSON as **`application/json`**.\r\n\r\n\r\n\r\nWhen asked about why not `text/json`, Crockford seems to have said JSON is not really JavaScript nor text and also IANA was more likely to hand out `application/*` than `text/*`.\r\n\r\nMore resources:\r\n\r\n - [Media Types][1]\r\n - [Request for Comments 4627][2]\r\n - [bluesmoon: JSON has a type][3]\r\n\r\n\r\n  [1]: http://www.iana.org/assignments/media-types/application/\r\n  [2]: http://www.ietf.org/rfc/rfc4627.txt\r\n  [3]: http://bluesmoon.livejournal.com/227190.html",
               "up_vote_count": 1413,
               "down_vote_count": 2,
               "id": "2590013",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1270614775,
               "last_edit_date": 1484686434,
               "last_activity_date": 1484686434
            },
            {
               "answer_id": 4199917,
               "score": 363,
               "body_markdown": "If you are using Ubuntu or Debian and you serve .json files through Apache, you might want to serve the files with the correct content type. I am doing this primarily because I want to use the Firefox extension [JSONView][1]\r\n\r\nThe Apache module [mod_mime](http://httpd.apache.org/docs/current/mod/mod_mime.html) will help to do this easily. However, with Ubuntu you need to edit the file */etc/mime.types* and add the line\r\n\r\n    application/json json\r\n\r\nThen restart Apache:\r\n\r\n    sudo service apache2 restart\r\n\r\n\r\n  [1]: https://addons.mozilla.org/en-US/firefox/addon/10869/\r\n",
               "up_vote_count": 368,
               "down_vote_count": 5,
               "id": "4199917",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1289948305,
               "last_edit_date": 1404147386,
               "last_activity_date": 1404147386
            },
            {
               "answer_id": 7328339,
               "score": 223,
               "body_markdown": "Not everything works for content type `application/json`.\r\n\r\nIf you are using [Ext&amp;nbsp;JS][1] form submit to upload file, be aware that the server response is parsed by the browser to create the document for the `&lt;iframe&gt;`.\r\n\r\nIf the server is using JSON to send the return object, then the `Content-Type` header must be set to `text/html` in order to tell the browser to insert the text unchanged into the document body.\r\n\r\nSee [the Ext JS 3.4.0 API documentation][2].\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Ext_JS\r\n  [2]: http://dev.sencha.com/deploy/ext-3.4.0/docs/\r\n",
               "up_vote_count": 225,
               "down_vote_count": 2,
               "id": "7328339",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1315363260,
               "last_edit_date": 1375458782,
               "last_activity_date": 1375458782
            },
            {
               "answer_id": 8322081,
               "score": 248,
               "body_markdown": "Only when using `application/json` as the [MIME][1] type I have the following (as of November 2011 with the most recent versions of Chrome, Firefox with [Firebug][2]):\r\n\r\n - No more warnings from Chrome when the JSON is loaded from the server.\r\n - Firebug will add a tab to the response showing you the JSON data\r\n   formatted. If the MIME type is different, it will just show up as\r\n   &#39;Response content&#39;.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/MIME\r\n  [2]: http://en.wikipedia.org/wiki/Firebug_%28software%29\r\n",
               "up_vote_count": 250,
               "down_vote_count": 2,
               "id": "8322081",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1322635341,
               "last_edit_date": 1374767553,
               "last_activity_date": 1374767553
            },
            {
               "answer_id": 10117198,
               "score": 280,
               "body_markdown": "The right content type for JSON is `application/json` UNLESS you&#39;re using [JSONP][1], also known as JSON with Padding, which is actually JavaScript and so the right content type would be `application/javascript`.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/JSONP\r\n",
               "up_vote_count": 281,
               "down_vote_count": 1,
               "id": "10117198",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1334203237,
               "last_edit_date": 1401158365,
               "last_activity_date": 1401158365
            },
            {
               "answer_id": 10205560,
               "score": 267,
               "body_markdown": "There is no doubt that `application/json` is the best [MIME][1] type for a JSON response.\r\n\r\nBut I had some experience where I had to use `application/x-javascript` because of some compression issues. My hosting environment is shared hosting with [GoDaddy][2]. They do not allow me to change server configurations. I had added the following code to my `web.config` file for compressing responses.\r\n\r\n    &lt;httpCompression&gt;\r\n        &lt;scheme name=&quot;gzip&quot; dll=&quot;%Windir%\\system32\\inetsrv\\gzip.dll&quot;/&gt;\r\n        &lt;dynamicTypes&gt;\r\n            &lt;add mimeType=&quot;text/*&quot; enabled=&quot;true&quot;/&gt;\r\n            &lt;add mimeType=&quot;message/*&quot; enabled=&quot;true&quot;/&gt;\r\n            &lt;add mimeType=&quot;application/javascript&quot; enabled=&quot;true&quot;/&gt;\r\n            &lt;add mimeType=&quot;*/*&quot; enabled=&quot;false&quot;/&gt;\r\n        &lt;/dynamicTypes&gt;\r\n        &lt;staticTypes&gt;\r\n            &lt;add mimeType=&quot;text/*&quot; enabled=&quot;true&quot;/&gt;\r\n            &lt;add mimeType=&quot;message/*&quot; enabled=&quot;true&quot;/&gt;\r\n            &lt;add mimeType=&quot;application/javascript&quot; enabled=&quot;true&quot;/&gt;\r\n            &lt;add mimeType=&quot;*/*&quot; enabled=&quot;false&quot;/&gt;\r\n        &lt;/staticTypes&gt;\r\n    &lt;/httpCompression&gt;\r\n    &lt;urlCompression doStaticCompression=&quot;true&quot; doDynamicCompression=&quot;true&quot;/&gt;\r\n\r\nBy using this, the .aspx pages was compressed with g-zip but JSON responses were not. I added\r\n\r\n    &lt;add mimeType=&quot;application/json&quot; enabled=&quot;true&quot;/&gt;\r\n\r\nin the static and dynamic types sections. **But this does not compress JSON responses at all.**\r\n\r\nAfter that I removed this newly added type and added\r\n\r\n    &lt;add mimeType=&quot;application/x-javascript&quot; enabled=&quot;true&quot;/&gt;\r\n\r\nin both the static and dynamic types sections, and changed the response type in\r\n\r\n.ashx (asynchronous handler) to\r\n\r\n    application/x-javascript\r\n\r\nAnd now I found that my JSON responses were compressed with g-zip. So I personally recommend to use\r\n\r\n    application/x-javascript\r\n\r\nonly if you want to compress your JSON responses on a **shared hosting environment**. Because in shared hosting, they do not allow you to change [IIS][3] configurations.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/MIME\r\n  [2]: http://en.wikipedia.org/wiki/Go_Daddy\r\n  [3]: http://en.wikipedia.org/wiki/Internet_Information_Services\r\n",
               "up_vote_count": 274,
               "down_vote_count": 7,
               "id": "10205560",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1334737343,
               "last_edit_date": 1510216319,
               "last_activity_date": 1510216319
            },
            {
               "answer_id": 10354432,
               "score": 194,
               "body_markdown": "If you&#39;re in a client-side environment, investigating about the cross-browser support is mandatory for a well supported web application.\r\n\r\nThe right HTTP Content-Type would be `application/json`, as others already highlighted too, but some clients do not handle it very well, that&#39;s why jQuery recommends the default `text/html`.",
               "up_vote_count": 194,
               "down_vote_count": 0,
               "id": "10354432",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1335544049,
               "last_edit_date": 1361633875,
               "last_activity_date": 1361633875
            },
            {
               "answer_id": 10591822,
               "score": 210,
               "body_markdown": "JSON is a [domain-specific language][1] (DSL) and a data format independent of JavaScript, and as such has its own [MIME][2] type, `application/json`. Respect for MIME types is of course client driven, so `text/plain` may do for transfer of bytes, but then you would be pushing up interpretation to the vendor application domain unnecessarily - `application/json`. Would you transfer XML via `text/plain`?\r\n\r\nBut honestly, your choice of MIME type is advice to the client as to how to interpret the data- `text/plain` or `text/HTML` (when it&#39;s not HTML) is like type erasure- it&#39;s as uninformative as making all your objects of type Object in a typed language.\r\n\r\nNo browser runtime I know of will take a JSON document and automatically make it available to the runtime as a JavaScript accessible object without intervention, but if you are working with a crippled client, that&#39;s an entirely different matter. But that&#39;s not the whole story- [RESTful][3] JSON services often don&#39;t have JavaScript runtimes, but it doesn&#39;t stop them using JSON as a viable data interchange format. If clients are that crippled... then I would consider perhaps HTML injection via an [Ajax][4] templating service instead.\r\n\r\nApplication/JSON!\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Domain-specific_language\r\n  [2]: http://en.wikipedia.org/wiki/MIME\r\n  [3]: http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services\r\n  [4]: http://en.wikipedia.org/wiki/Ajax_%28programming%29\r\n",
               "up_vote_count": 211,
               "down_vote_count": 1,
               "id": "10591822",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1337033988,
               "last_edit_date": 1418316497,
               "last_activity_date": 1418316497
            },
            {
               "answer_id": 11112320,
               "score": 753,
               "body_markdown": "**For JSON:**\r\n\r\n&lt;!-- language-all: none --&gt;\r\n\r\n    Content-Type: application/json\r\n\r\n**For [JSON-P][1]:**\r\n\r\n    Content-Type: application/javascript\r\n\r\n  [1]: http://en.wikipedia.org/wiki/JSONP",
               "up_vote_count": 754,
               "down_vote_count": 1,
               "id": "11112320",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1340161853,
               "last_edit_date": 1401158138,
               "last_activity_date": 1401158138
            },
            {
               "answer_id": 14098284,
               "score": 151,
               "body_markdown": "The correct answer is:\r\n\r\n    Content-Type: application/json\r\n",
               "up_vote_count": 159,
               "down_vote_count": 8,
               "id": "14098284",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1356935356,
               "last_edit_date": 1416654691,
               "last_activity_date": 1416654691
            },
            {
               "answer_id": 14412490,
               "score": 133,
               "body_markdown": "In [JSP][1], you can use this in page directive:\r\n\r\n    &lt;%@ page language=&quot;java&quot; contentType=&quot;application/json; charset=UTF-8&quot;\r\n        pageEncoding=&quot;UTF-8&quot;%&gt;\r\n\r\nThe correct [MIME][2] media type for JSON is `application/json`.  JSP will use it for sending a response to the client.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/JavaServer_Pages\r\n  [2]: http://en.wikipedia.org/wiki/MIME\r\n",
               "up_vote_count": 134,
               "down_vote_count": 1,
               "id": "14412490",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1358583742,
               "last_edit_date": 1407222485,
               "last_activity_date": 1407222485
            },
            {
               "answer_id": 15088495,
               "score": 102,
               "body_markdown": "\u201c`application/json`\u201d is the correct JSON content type.\r\n\r\n    def ajaxFindSystems = {\r\n      def result = Systems.list()\r\n      render(contentType:&#39;application/json&#39;) {\r\n        results {\r\n          result.each{sys-&gt;\r\n            system(id:sys.id, name:sys.name)\r\n          }\r\n        }\r\n        resultset (rows:result.size())\r\n      }\r\n    }",
               "up_vote_count": 104,
               "down_vote_count": 2,
               "id": "15088495",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1361879727,
               "last_edit_date": 1393351197,
               "last_activity_date": 1393351197
            },
            {
               "answer_id": 15676686,
               "score": 418,
               "body_markdown": "**JSON:**\r\n---------\r\nResponse is dynamically generated data, according to the query parameters passed in the URL.\r\n\r\n**Example:**\r\n\r\n    { &quot;Name&quot;: &quot;Foo&quot;, &quot;Id&quot;: 1234, &quot;Rank&quot;: 7 }\r\n\r\n**Content-Type:** `application/json`\r\n\r\n\r\n----------\r\n\r\n**JSON-P:**\r\n-----------\r\nJSON with padding.\r\nResponse is JSON data, with a function call wrapped around it.\r\n\r\n**Example:**\r\n\r\n    functionCall({&quot;Name&quot;: &quot;Foo&quot;, &quot;Id&quot;: 1234, &quot;Rank&quot;: 7});\r\n    \r\n**Content-Type:** `application/javascript`\r\n\r\n\r\n",
               "up_vote_count": 424,
               "down_vote_count": 6,
               "id": "15676686",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1364457264,
               "last_edit_date": 1406898583,
               "last_activity_date": 1406898583
            },
            {
               "answer_id": 15762612,
               "score": 149,
               "body_markdown": "As many others have mentioned, `application/json` is the correct answer.\r\n\r\nBut what haven&#39;t been explained yet is what the other options you proposed mean.\r\n\r\n - `application/x-javascript`: Experimental MIME type for JavaScript before `application/javascript` was made standard.\r\n\r\n\r\n - `text/javascript`: Now obsolete. You should use `application/javascript` when using javascript.\r\n\r\n - `text/x-javascript`: Experimental MIME type for the above situation.\r\n\r\n - `text/x-json`: Experimental MIME type for JSON before `application/json` got officially registered.\r\n\r\nAll in all, whenever you have any doubts about content types, you should check [this link][1] \r\n\r\n\r\n  [1]: http://www.iana.org/assignments/media-types/media-types.xhtml",
               "up_vote_count": 149,
               "down_vote_count": 0,
               "id": "15762612",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1364901056,
               "last_edit_date": 1439841926,
               "last_activity_date": 1439841926
            },
            {
               "answer_id": 16363110,
               "score": 78,
               "body_markdown": "The right MIME type is **`application/json`**\r\n\r\n**BUT**\r\n\r\nI experienced many situations where the browser type or the framework user needed:\r\n\r\n    text/html\r\n\r\n    application/javascript",
               "up_vote_count": 82,
               "down_vote_count": 4,
               "id": "16363110",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1367596828,
               "last_edit_date": 1393351187,
               "last_activity_date": 1393351187
            },
            {
               "answer_id": 16587806,
               "score": 66,
               "body_markdown": "I use the below\r\n\r\n    contentType: &#39;application/json&#39;,\r\n    data: JSON.stringify(SendData),",
               "up_vote_count": 69,
               "down_vote_count": 3,
               "id": "16587806",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1368708232,
               "last_edit_date": 1368784333,
               "last_activity_date": 1368784333
            },
            {
               "answer_id": 17238862,
               "score": 44,
               "body_markdown": "If the JSON is with padding then it will be `application/jsonp`. If the JSON is without padding then it will be `application/json`.\r\n\r\nTo deal with both, it is a good practice to use: &#39;application/javascript&#39; without bothering whether it is with padding or without padding.\r\n",
               "up_vote_count": 51,
               "down_vote_count": 7,
               "id": "17238862",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1371828132,
               "last_edit_date": 1373494597,
               "last_activity_date": 1373494597
            },
            {
               "answer_id": 17378317,
               "score": 52,
               "body_markdown": "In [Spring][1] you have a defined type: `MediaType.APPLICATION_JSON_VALUE` which is equivalent to *application/json*.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Spring_Framework\r\n",
               "up_vote_count": 52,
               "down_vote_count": 0,
               "id": "17378317",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1372494893,
               "last_edit_date": 1373494631,
               "last_activity_date": 1373494631
            },
            {
               "path": "3.stack.answer",
               "answer_id": 18144996,
               "score": 59,
               "creation_date": 1376045358,
               "body_markdown": "The **Content-Type** header should be set to &#39;**application/json**&#39; when posting. Server listening for the request should include &quot;**Accept=application/json**&quot;.\r\nIn Spring MVC you can do it like this:\r\n\r\n    @RequestMapping(value=&quot;location&quot;, method = RequestMethod.POST, headers = &quot;Accept=application/json&quot;)\r\n        \r\nAdd headers to the response:\r\n    \r\n    HttpHeaders headers = new HttpHeaders();\r\n    headers.add(&quot;Content-Type&quot;, &quot;application/json&quot;);",
               "up_vote_count": 59,
               "down_vote_count": 0,
               "id": "18144996",
               "last_activity_date": 1376045358,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 21733365,
               "score": 90,
               "body_markdown": "The [IANA registration for `application/json`](http://www.iana.org/assignments/media-types/application/json) says\r\n&gt; Applications that use this media type:  JSON has been used to\r\n   exchange data between applications written in all of these\r\n   programming languages: ActionScript, C, C#, Clojure, ColdFusion,\r\n   Common Lisp, E, Erlang, Go, Java, JavaScript, Lua, Objective CAML,\r\n   Perl, PHP, Python, Rebol, Ruby, Scala, and Scheme.\r\n\r\nYou&#39;ll notice that IANA.org [doesn&#39;t list any of these other media types](http://www.iana.org/assignments/media-types/media-types.xhtml), in fact even `application/javascript` is now obsolete. So `application/json` is really the only possible *correct* answer. \r\n\r\nBrowser support is another thing. \r\n\r\nThe most widely supported non-standard media types `text/json` or `text/javascript`. But some big names even use `text/plain`. Even more strange is the Content-Type header sent by Flickr, who returns a JSON string with `text/xml`. \r\nGoogle example included as well, responding with `text/html` yet a JSON string.\r\n\r\nExamples:\r\n\r\n    curl -I http://ajax.googleapis.com:80/ajax/services/search/web\\?q\\=json\r\n\r\nOutput: `Content-Type: text/html`\r\n\r\n    curl -I https://www.flickr.com/services/rest/?method=flickr.test.echo&amp;format=json&amp;api_key=f82254c1491d894f1204d8408f645a93\r\n\r\nOutput: `Content-Type: text/xml`\r\n\r\n",
               "up_vote_count": 93,
               "down_vote_count": 3,
               "id": "21733365",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1392221554,
               "last_edit_date": 1451939238,
               "last_activity_date": 1451939238
            },
            {
               "answer_id": 22727561,
               "score": 37,
               "body_markdown": "PHP developers use this:\r\n\r\n    &lt;?php\r\n        header(&quot;Content-type: application/json&quot;);\r\n\r\n        // Do something here...\r\n    ?&gt;\r\n",
               "up_vote_count": 39,
               "down_vote_count": 2,
               "id": "22727561",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1396071785,
               "last_edit_date": 1405806582,
               "last_activity_date": 1405806582
            },
            {
               "answer_id": 28365370,
               "score": 43,
               "body_markdown": "For JSON, I am using:\r\n\r\n     Content-Type: application/json\r\n\r\nThis described in the IETF&#39;s JSON Data Interchange Format 7158 proposal, [Section 1.2: Specifications of JSON][1.2].\r\n\r\n[1.2]: http://tools.ietf.org/html/rfc7158#section-1.2\r\n\r\n",
               "up_vote_count": 43,
               "down_vote_count": 0,
               "id": "28365370",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1423224074,
               "last_edit_date": 1451707402,
               "last_activity_date": 1451707402
            },
            {
               "answer_id": 29395746,
               "score": 46,
               "body_markdown": "&gt; The `application/json` works great in PHP to store an array or object\r\n&gt; data.\r\n\r\n   \r\nI use this code to put data in JSON on [*Google Cloud Storage (GCS)*][1] which is set [publically viewable][2]:\r\n\r\n    $context = stream_context_create([\r\n    \t&#39;gs&#39; =&gt; [\r\n    \t\t&#39;acl&#39;=&gt;&#39;public-read&#39;, \r\n    \t\t&#39;Content-Type&#39; =&gt; &#39;application/json&#39;,\r\n    \t]\r\n    ]);\r\n    \t\r\n    file_put_contents(\r\n    \t&quot;gs://BUCKETNAME/FILENAME.json&quot;, \r\n    \tjson_encode((object) $array), \r\n    \tfalse, \r\n    \t$context\r\n    );\r\n\r\nTo get back the data is straight forward:\r\n\r\n    $data = json_decode(file_get_contents(&quot;gs://BUCKETNAME/FILENAME.json&quot;));\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/35738814/4058484\r\n  [2]: https://stackoverflow.com/a/38866924/4058484",
               "up_vote_count": 46,
               "down_vote_count": 0,
               "id": "29395746",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1427904824,
               "last_edit_date": 1516156424,
               "last_activity_date": 1516156424
            },
            {
               "answer_id": 30740848,
               "score": 36,
               "body_markdown": "Extending the accepted responses, when you are using JSON in a REST context...\r\n\r\nThere is a [strong argument][1] about using `application/x-resource+json` and `application/x-collection+json` when you are representing REST resources and collections.\r\n\r\nAnd if you decide to follow the **jsonapi** specification, [you should][2] use of `application/vnd.api+json`, as it is documented.\r\n\r\nAltough there is not an universal standard, it is clear that the added semantic to the resources being transfered justify a more explicit *Content-Type* than just `application/json`.\r\n\r\nFollowing this reasoning, other contexts could justify a more specific *Content-Type*.\r\n\r\n  [1]: http://restful-api-design.readthedocs.org/en/latest/resources.html#content-types\r\n  [2]: http://jsonapi.org/format/#content-negotiation",
               "up_vote_count": 36,
               "down_vote_count": 0,
               "id": "30740848",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1433877176,
               "last_edit_date": 1469581043,
               "last_activity_date": 1469581043
            },
            {
               "path": "3.stack.answer",
               "answer_id": 35400991,
               "score": 21,
               "creation_date": 1455506443,
               "body_markdown": "[JSON][1] (JavaScript Object Notation) and [JSONP][2] (&quot;JSON with padding&quot;) formats seems to be very similar and therefor it might be very confusing which MIME type they should be using. Even though the formats seems to be very similar, there are some subtle differences between them.\r\n\r\nSo whenever in any doubts, I have very simple approach (which works perfectly find in most cases), namely, go and check corresponding RFC document.\r\n\r\n\r\n\r\n**JSON**\r\n[RFC 4627][3] (The application/json Media Type for JavaScript Object Notation (JSON)) is a specifications of JSON format. It says in section 6, that the MIME media type for JSON text is \r\n                           \r\n    application/json.\r\n\r\n\r\n\r\n**JSONP**\r\nJSONP (&quot;JSON with padding&quot;) is handled different way than JSON, in a browser. JSONP is treated as a regular JavaScript script and therefor it should use `application/javascript,` the current official MIME type for JavaScript. In many cases, however, `text/javascript` MIME type will work fine too.\r\n\r\nNote that `text/javascript` has been marked as obsolete by [RFC 4329][4] (Scripting Media Types) document and it is recommended to use `application/javascript` type instead. However, due to legacy reasons, `text/javascript` is still widely used and it has cross-browser support (which is not always a case with `application/javascript` MIME type, especially with older browsers).\r\n\r\n\r\n  [1]: https://en.wikipedia.org/wiki/JSON\r\n  [2]: https://en.wikipedia.org/wiki/JSONP\r\n  [3]: http://www.ietf.org/rfc/rfc4627.txt\r\n  [4]: http://www.rfc-editor.org/rfc/rfc4329.txt",
               "up_vote_count": 21,
               "down_vote_count": 0,
               "id": "35400991",
               "last_activity_date": 1455506443,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 36544505,
               "score": 38,
               "body_markdown": "If you get data from REST API in JSON so you have to use content-type \r\n\r\n    For JSON data: Content-Type:application/json\r\n    For HTML data: Content-Type:text/html,\r\n    For XHTML data: Content-Type:application/xhtml+xml,\r\n    For XML data: Content-Type:text/xml, application/xml\r\n\r\n",
               "up_vote_count": 38,
               "down_vote_count": 0,
               "id": "36544505",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1460366126,
               "last_edit_date": 1461228280,
               "last_activity_date": 1461228280
            },
            {
               "answer_id": 39315895,
               "score": 5,
               "body_markdown": "For specifying the interesting JSON result, you add &quot;application/json&quot; in your request header like below:\r\n\r\n&quot;Accept:application/json&quot; is a desired response format.\r\n\r\n&quot;Content-Type:application/json&quot; specifies the content format of your request, but sometimes you specify both `application/json` and `application/xml`, but the quality of these might be different. Which server will send back the different response formats, look at the example:\r\n\r\n    Accept:application/json;q=0.4,application/xml;q=8\r\n\r\nThis will return XML, because XML has higher quality.\r\n",
               "up_vote_count": 9,
               "down_vote_count": 4,
               "id": "39315895",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1472984480,
               "last_edit_date": 1489428853,
               "last_activity_date": 1489428853
            },
            {
               "answer_id": 40096127,
               "score": 3,
               "body_markdown": "The proper current standard is `application/json`. While the default encoding is UTF-8, it is worth mentioning that it could also be UTF-16 or utf-32. When JSON is\r\nwritten in UTF-16 or UTF-32, binary content-transfer-encoding must be used.\r\n\r\nThere is more information about json here: https://tools.ietf.org/html/rfc4627\r\n\r\nmore information on binary transfer encoding here: https://www.w3.org/Protocols/rfc1341/5_Content-Transfer-Encoding.html ",
               "up_vote_count": 4,
               "down_vote_count": 1,
               "id": "40096127",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1476740446,
               "last_edit_date": 1516163881,
               "last_activity_date": 1516163881
            },
            {
               "path": "3.stack.answer",
               "answer_id": 41453240,
               "score": 2,
               "creation_date": 1483481721,
               "body_markdown": "To complement the rest of the answers, the MIME type for JSON linked data (JSON-LD) [according to W3C][1] is:\r\n\r\n&gt; `application/ld+json`\r\n\r\n&gt; **Type name:** application\r\n\r\n&gt; **Subtype name:** ld+json\r\n\r\nAdditionally, from the same source:\r\n\r\n&gt; **File extension(s)**:\r\n\r\n&gt; `.jsonld`\r\n\r\n\r\n  [1]: https://www.w3.org/TR/json-ld-syntax/#iana-considerations",
               "up_vote_count": 4,
               "down_vote_count": 2,
               "id": "41453240",
               "last_activity_date": 1483481721,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 45558981,
               "score": 7,
               "creation_date": 1502164199,
               "body_markdown": "     Content-type: application/json,json\r\n     Content-Type: application/javascript, json-P\r\n     Content-type: application/x-javascript, javascript\r\n     Content-type: text/javascript, javascript BUT obsolete, older IE versions \r\n     used to use as html attribute\r\n     Content-type: text/x-javascript, JavaScript Media Types BUT obsolete\r\n     Content-type: text/x-json, json before application/json got officially registered.",
               "up_vote_count": 8,
               "down_vote_count": 1,
               "id": "45558981",
               "last_activity_date": 1502164199,
               "tags": [],
               "is_accepted": false
            }
         ],
         "last_edit_date": "1495540503",
         "link": "https://stackoverflow.com/questions/477816/what-is-the-correct-json-content-type",
         "creation_date": "1232897119"
      },
      {
         "title": "What is the difference between &#39;git pull&#39; and &#39;git fetch&#39;?",
         "code_snippet": "['<code>git pull</code>', '<code>git fetch</code>', '<code>git fetch; git reset --hard origin/master</code>', '<code>git pull</code>', '<code>git fetch</code>', '<code>git merge</code>', '<code>git fetch</code>', '<code>refs/remotes/&lt;remote&gt;/</code>', '<code>refs/heads</code>', '<code>git fetch</code>', '<code>git pull</code>', '<code>git pull</code>', '<code>git remote</code>', '<code>git pull</code>', '<code>/home/alice/</code>', '<code>git fetch /home/bob</code>', '<code>git merge</code>', '<code>pull</code>', '<code>fetch</code>', '<code>merge</code>', '<code>merge</code>', '<code>pull</code>', '<code>pull</code>', '<code>pull</code>', '<code>fetch</code>', '<code>merge</code>', '<code>git fetch</code>', '<code>.git/</code>', '<code>.git/</code>', '<code>master</code>', '<code>remotes/origin/master</code>', '<code>git branch -avv</code>', '<code>git remote update</code>', '<code>git fetch</code>', '<code>.git/refs/remotes/origin/</code>', '<code>.git</code>', '<code>git fetch</code>', '<code>git pull</code>', '<code>git pull</code>', '<code>git fetch</code>', '<code>remoteName/</code>', '<code>git clone</code>', '<code>git merge</code>', '<code>git clone</code>', '<code>git merge</code>', '<code>git merge</code>', '<code>merge</code>', '<code>pull</code>', '<code>pull</code>', '<code>git fetch</code>', '<code>git fetch\\ngit diff ...origin\\n</code>', '<code>git diff ..origin</code>', '<code>git diff ...origin</code>', '<code>git diff $(git-merge-base HEAD origin) origin</code>', '<code>git diff [--options] &lt;commit&gt;...&lt;commit&gt; [--] [&lt;path&gt;\u2026]</code>', '<code>git diff origin</code>', '<code>git diff ...origin</code>', '<code>origin</code>', '<code>origin</code>', '<code>git diff origin</code>', '<code>origin</code>', '<code>master</code>', '<code>HEAD</code>', '<code>HEAD</code>', '<code>HEAD</code>', '<code>git fetch</code>', '<code>HEAD</code>', '<code>git pull</code>', '<code>HEAD</code>', '<code>git fetch</code>', '<code>git pull</code>', '<code>git fetch</code>', '<code>pull</code>', '<code>refs</code>', '<code>objects</code>', '<code>origin/master</code>', '<code>master</code>', '<code>git pull</code>', '<code>git clone</code>', '<code>git rebase</code>', '<code>git pull -rebase</code>', '<code>git branch -a</code>', '<code>git pull</code>', '<code>git fetch</code>', '<code>git clone</code>', '<code>git rebase</code>', '<code>git rebase origin</code>', '<code>git clone</code>', '<code>git fetch</code>', '<code>merge</code>', '<code>origin</code>', '<code>master</code>', '<code>origin/master</code>', '<code>git checkout master                                                  \\ngit fetch                                        \\ngit diff origin/master\\ngit rebase origin master\\n</code>', '<code>git pull</code>', '<code>git fetch</code>', '<code>git merge</code>', '<code>git pull</code>', '<code>origin</code>', '<code>master</code>', '<code>git diff origin/master</code>', '<code>git rebase</code>', '<code>git pull origin master\\ngit checkout foo-branch\\ngit rebase master\\ngit push origin foo-branch\\n</code>', '<code>git pull --rebase</code>', '<code>man</code>', '<code>git-pull</code>', '<code>2.3.5</code>', '<code>git pull --rebase</code>', '<code>rebase</code>', '<code>rebase</code>', '<code>merge</code>', '<code>git pull --rebase</code>', '<code>git pull</code>', '<code>git pull --rebase</code>', \"<code>                                         LOCAL SYSTEM\\n                  . =====================================================    \\n================= . =================  ===================  =============\\nREMOTE REPOSITORY . REMOTE REPOSITORY  LOCAL REPOSITORY     WORKING COPY\\n(ORIGIN)          . (CACHED)           \\nfor example,      . mirror of the      \\na github repo.    . remote repo\\nCan also be       .\\nmultiple repo's   .\\n                  .\\n                  .\\nFETCH  *------------------&gt;*\\nYour local cache of the remote is updated with the origin (or multiple\\nexternal sources, that is git's distributed nature)\\n                  .\\nPULL   *--------------------------------------------------------&gt;*\\nchanges are merged directly into your local copy. when conflicts occur, \\nyou are asked for decisions.\\n                  .\\nCOMMIT            .                             *&lt;---------------*\\nWhen coming from, for example, subversion, you might think that a commit\\nwill update the origin. In git, a commit is only done to your local repo.\\n                  .\\nPUSH   *&lt;---------------------------------------*\\nSynchronizes your changes back into the origin.\\n</code>\", '<code>git pull</code>', '<code>git fetch</code>', '<code>git pull</code>', '<code>git pull</code>', '<code>git fetch</code>', '<code>git merge FETCH_HEAD</code>', '<code>---------------------     -----------------------     -----------------------\\n- Remote Repo       -     - Remote Repo         -     - Remote Repo         -\\n-                   -     - gets pushed         -     -                     -\\n- @ R01             -     - @ R02               -     - @ R02               -\\n---------------------     -----------------------     -----------------------\\n\\n---------------------     -----------------------     -----------------------\\n- Local Repo        -     - Local Repo          -     - Local Repo          -\\n- pull              -     -                     -     - fetch               -\\n- @ R01             -     - @ R01               -     - @ R02               -\\n---------------------     -----------------------     -----------------------\\n\\n---------------------     -----------------------     -----------------------\\n- Local Sandbox     -     - Local Sandbox       -     - Local Sandbox       -\\n- Checkout          -     - new work done       -     -                     -\\n- @ R01             -     - @ R01+              -     - @R01+               -\\n---------------------     -----------------------     -----------------------\\n</code>', '<code>---------------------     -----------------------     -----------------------\\n- Remote Repo       -     - Remote Repo         -     - Remote Repo         -\\n-                   -     - gets pushed         -     -                     -\\n- @ R01             -     - @ R02               -     - @ R02               -\\n---------------------     -----------------------     -----------------------\\n\\n---------------------     -----------------------     -----------------------\\n- Local Repo        -     - Local Repo          -     - Local Repo          -\\n- pull              -     -                     -     - pull                -\\n- @ R01             -     - @ R01               -     - @ R02               -\\n---------------------     -----------------------     -----------------------\\n\\n---------------------     -----------------------     -----------------------\\n- Local Sandbox     -     - Local Sandbox       -     - Local Sandbox       -\\n- Checkout          -     - new work done       -     - merged with R02     -\\n- @ R01             -     - @ R01+              -     - @R02+               -\\n---------------------     -----------------------     -----------------------\\n</code>', '<code>git pull == git fetch + git merge\\n</code>', '<code>git pull</code>', '<code>git fetch</code>', '<code>git merge</code>', '<code>git pull == git fetch + git merge</code>', '<code>git pull --rebase = git fetch + git rebase</code>', '<code>git fetch</code>', '<code>origin</code>', '<code>origin/</code>', '<code>origin/master</code>', '<code>origin/mybranch-123</code>', '<code>git pull</code>', '<code>git fetch</code>', '<code>git fetch</code>', '<code>git fetch</code>', '<code>git diff</code>', '<code>git merge</code>', '<code>git pull</code>', '<code>git fetch</code>', '<code>git pull</code>', '<code>git fetch</code>', '<code>git fetch</code>', '<code>git pull</code>', '<code>git pull</code>', '<code>git fetch</code>', '<code>git pull</code>', '<code>git fetch</code>', '<code>rm -rf</code>', '<code>master@remote &gt;&gt; remote/origin/master@local</code>', '<code>remote/origin/master@local &gt;&gt; master@local</code>', '<code>git</code>', '<code>git fetch</code>', '<code>git merge</code>', '<code>git rebase</code>', '<code>git pull</code>', '<code>git fetch</code>', '<code>git merge</code>', '<code>git pull</code>', '<code>git fetch</code>', '<code>git fetch</code>', '<code>git pull</code>', '<code>git pull</code>', '<code>git fetch</code>', '<code>git fetch origin master</code>', '<code>git log -p master..origin/master</code>', '<code>git merge origin/master</code>', '<code>git pull origin master</code>', '<code>git fetch</code>', '<code>git merge</code>', '<code>git fetch</code>', '<code>git fetch</code>', '<code>git pull</code>', '<code>git pull</code>', '<code>git fetch</code>', '<code>git fetch</code>', '<code>git pull</code>', '<code>git pull</code>', '<code>shortcut</code>', '<code>git pull = git fetch + git merge \\n</code>', '<code>fetch</code>', '<code>git pull</code>', '<code>git clone</code>', '<code>git pull</code>']",
         "body_markdown": "What are the differences between `git pull` and `git fetch`?",
         "up_vote_count": "9459",
         "view_count": "2135095",
         "id": "8587033-3",
         "answer_count": "46",
         "tags": "['git', 'git-pull', 'git-fetch']",
         "path": "2.stack",
         "_childDocuments_": [
            {
               "answer_id": 292359,
               "score": 7911,
               "body_markdown": "In the simplest terms, `git pull` does a `git fetch` followed by a `git merge`.\r\n\r\nYou can do a `git fetch` at any time to update your remote-tracking branches under `refs/remotes/&lt;remote&gt;/`.\r\n\r\nThis operation never changes any of your own local branches under `refs/heads`, and is safe to do without changing your working copy. I have even heard of people running `git fetch` periodically in a cron job in the background (although I wouldn&#39;t recommend doing this).\r\n\r\nA `git pull` is what you would do to bring a local branch up-to-date with its remote version, while also updating your other remote-tracking branches.\r\n\r\nGit documentation: [**git pull**][1]\r\n\r\n  [1]: http://git-scm.com/docs/git-pull\r\n",
               "up_vote_count": 7921,
               "down_vote_count": 10,
               "id": "292359",
               "tags": [],
               "is_accepted": true,
               "path": "3.stack.answer",
               "creation_date": 1226742760,
               "last_edit_date": 1480485894,
               "last_activity_date": 1480485894
            },
            {
               "path": "3.stack.answer",
               "answer_id": 292360,
               "score": 142,
               "creation_date": 1226742770,
               "body_markdown": "&lt;pre&gt;\r\ngit-pull - Fetch from and merge with another repository or a local branch\r\nSYNOPSIS\r\n\r\ngit pull &lt;options&gt; &lt;repository&gt; &lt;refspec&gt;\u2026\r\nDESCRIPTION\r\n\r\nRuns git-fetch with the given parameters, and calls git-merge to merge the \r\nretrieved head(s) into the current branch. With --rebase, calls git-rebase \r\ninstead of git-merge.\r\n\r\nNote that you can use . (current directory) as the &amp;lt;repository&gt; to pull \r\nfrom the local repository \u2014 this is useful when merging local branches \r\ninto the current branch.\r\n\r\nAlso note that options meant for git-pull itself and underlying git-merge \r\nmust be given before the options meant for git-fetch.\r\n&lt;/pre&gt;\r\n\r\nYou would pull if you want the histories merged, you&#39;d fetch if you just &#39;want the codez&#39; as some person has been tagging some articles around here.",
               "up_vote_count": 146,
               "down_vote_count": 4,
               "id": "292360",
               "last_activity_date": 1226742770,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 2791156,
               "score": 402,
               "body_markdown": "One use case of `git fetch` is that the following will tell you any changes in the remote branch since your last pull... so you can check before doing an actual pull, which could change files in your current branch and working copy.\r\n\r\n    git fetch\r\n    git diff ...origin\r\n",
               "up_vote_count": 405,
               "down_vote_count": 3,
               "id": "2791156",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1273260217,
               "last_edit_date": 1375385889,
               "last_activity_date": 1375385889
            },
            {
               "answer_id": 5376768,
               "score": 133,
               "body_markdown": "You can fetch from a remote repository, see the differences and then pull or merge.\r\n\r\nThis is an example for a remote repository called `origin` and a branch called `master` tracking the remote branch `origin/master`:\r\n\r\n    git checkout master                                                  \r\n    git fetch                                        \r\n    git diff origin/master\r\n    git rebase origin master\r\n",
               "up_vote_count": 136,
               "down_vote_count": 3,
               "id": "5376768",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1300705640,
               "last_edit_date": 1426458004,
               "last_activity_date": 1426458004
            },
            {
               "answer_id": 6011169,
               "score": 124,
               "body_markdown": "The short and easy answer is that `git pull` is simply `git fetch` followed by `git merge`.\r\n\r\nIt is very important to note that `git pull` will **automatically merge whether you like it or not**. This could, of course, result in merge conflicts. Let&#39;s say your remote is `origin` and your branch is `master`. If you `git diff origin/master` before pulling, you should have some idea of potential merge conflicts and could prepare your local branch accordingly. \r\n\r\nIn addition to pulling and pushing, [some workflows][1] involve `git rebase`, such as this one, which I paraphrase from the linked article:\r\n\r\n    git pull origin master\r\n    git checkout foo-branch\r\n    git rebase master\r\n    git push origin foo-branch\r\n\r\nIf you find yourself in such a situation, you may be tempted to `git pull --rebase`. Unless you really, really know what you are doing, I would advise against that. This warning is from the `man` page for `git-pull`, version `2.3.5`:\r\n\r\n&gt; This is a potentially dangerous mode of operation. It rewrites\r\n&gt; history, which does not bode well when you published that history\r\n&gt; already. Do not use this option unless you have read git-rebase(1)\r\n&gt; carefully.\r\n\r\n  [1]: http://mettadore.com/2011/09/07/the-ever-deployable-github-workflow/\r\n",
               "up_vote_count": 126,
               "down_vote_count": 2,
               "id": "6011169",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1305492784,
               "last_edit_date": 1427959641,
               "last_activity_date": 1427959641
            },
            {
               "answer_id": 7104747,
               "score": 1734,
               "body_markdown": " - When you use `pull`, Git tries to automatically do your work for you. **It is context sensitive**, so Git will merge any pulled commits into the branch you are currently working in.  `pull` **automatically merges the commits without letting you review them first**. If you don\u2019t closely manage your branches, you may run into frequent conflicts.\r\n\r\n - When you `fetch`, Git gathers any commits from the target branch that do not exist in your current branch and **stores them in your local repository**. However, **it does not merge them with your current branch**. This is particularly useful if you need to keep your repository up to date, but are working on something that might break if you update your files. \r\nTo integrate the commits into your master branch, you use `merge`.\r\n",
               "up_vote_count": 1737,
               "down_vote_count": 3,
               "id": "7104747",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1313657602,
               "last_edit_date": 1429382834,
               "last_activity_date": 1429382834
            },
            {
               "answer_id": 10556826,
               "score": 322,
               "body_markdown": "It cost me a little bit to understand what was the difference, but this is a simple explanation. `master` in your localhost is a branch.\r\n\r\nWhen you clone a repository you fetch the entire repository to you local host. This means that at that time you have an origin/master pointer to `HEAD` and master pointing to the same `HEAD`.\r\n\r\nwhen you start working and do commits you advance the master pointer to `HEAD` + your commits. But the origin/master pointer is still pointing to what it was when you cloned.\r\n\r\nSo the difference will be:\r\n\r\n- If you do a `git fetch` it will just fetch all the changes in the remote repository ([GitHub][1]) and move the origin/master pointer to `HEAD`. Meanwhile your local branch master will keep pointing to where it has.\r\n- If you do a `git pull`, it will do basically fetch (as explained previously) and merge any new changes to your master branch and move the pointer to `HEAD`.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/GitHub\r\n",
               "up_vote_count": 324,
               "down_vote_count": 2,
               "id": "10556826",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1336761447,
               "last_edit_date": 1451710369,
               "last_activity_date": 1451710369
            },
            {
               "answer_id": 11527075,
               "score": 85,
               "body_markdown": "I have struggled with this as well.  In fact I got here with a google search of exactly the same question.  Reading all these answers finally painted a picture in my head and I decided to try to get this down looking at the state of the 2 repositories and 1 sandbox and actions performed over time while watching the version of them.  So here is what I came up with.  Please correct me if I messed up anywhere.\r\n\r\nThe three repos with a fetch:\r\n\r\n    ---------------------     -----------------------     -----------------------\r\n    - Remote Repo       -     - Remote Repo         -     - Remote Repo         -\r\n    -                   -     - gets pushed         -     -                     -\r\n    - @ R01             -     - @ R02               -     - @ R02               -\r\n    ---------------------     -----------------------     -----------------------\r\n    \r\n    ---------------------     -----------------------     -----------------------\r\n    - Local Repo        -     - Local Repo          -     - Local Repo          -\r\n    - pull              -     -                     -     - fetch               -\r\n    - @ R01             -     - @ R01               -     - @ R02               -\r\n    ---------------------     -----------------------     -----------------------\r\n    \r\n    ---------------------     -----------------------     -----------------------\r\n    - Local Sandbox     -     - Local Sandbox       -     - Local Sandbox       -\r\n    - Checkout          -     - new work done       -     -                     -\r\n    - @ R01             -     - @ R01+              -     - @R01+               -\r\n    ---------------------     -----------------------     -----------------------\r\n\r\nThe three repos with a pull\r\n\r\n    ---------------------     -----------------------     -----------------------\r\n    - Remote Repo       -     - Remote Repo         -     - Remote Repo         -\r\n    -                   -     - gets pushed         -     -                     -\r\n    - @ R01             -     - @ R02               -     - @ R02               -\r\n    ---------------------     -----------------------     -----------------------\r\n    \r\n    ---------------------     -----------------------     -----------------------\r\n    - Local Repo        -     - Local Repo          -     - Local Repo          -\r\n    - pull              -     -                     -     - pull                -\r\n    - @ R01             -     - @ R01               -     - @ R02               -\r\n    ---------------------     -----------------------     -----------------------\r\n    \r\n    ---------------------     -----------------------     -----------------------\r\n    - Local Sandbox     -     - Local Sandbox       -     - Local Sandbox       -\r\n    - Checkout          -     - new work done       -     - merged with R02     -\r\n    - @ R01             -     - @ R01+              -     - @R02+               -\r\n    ---------------------     -----------------------     -----------------------\r\n\r\nThis helped me understand why a fetch is pretty important.",
               "up_vote_count": 87,
               "down_vote_count": 2,
               "id": "11527075",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1342543391,
               "last_edit_date": 1496259676,
               "last_activity_date": 1496259676
            },
            {
               "answer_id": 13573856,
               "score": 65,
               "body_markdown": "`git fetch` will retrieve remote branches so that you can `git diff` or `git merge` them with the current branch. `git pull` will run fetch on the remote brach tracked by the current branch and then merge the result. You can use `git fetch` to see if there are any updates to the remote branch without necessary merging them with your local branch.\r\n",
               "up_vote_count": 66,
               "down_vote_count": 1,
               "id": "13573856",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1353967081,
               "last_edit_date": 1362861108,
               "last_activity_date": 1362861108
            },
            {
               "answer_id": 15003413,
               "score": 71,
               "body_markdown": "We simply say:\r\n\r\n    git pull == git fetch + git merge\r\n\r\nIf you run `git pull`, you do not need to merge the data to local. If you run `git fetch`, it means you must run `git merge` for getting the latest code to your local machine. Otherwise, the local machine code would not be changed without merge. \r\n\r\nSo in the Git Gui, when you do fetch, you have to merge the data. Fetch itself won&#39;t make the code changes at your local. You can check that when you update the code by fetching\r\nonce fetch and see; the code it won&#39;t change. Then you merge... You will see the changed code.\r\n\r\n \r\n",
               "up_vote_count": 72,
               "down_vote_count": 1,
               "id": "15003413",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1361453103,
               "last_edit_date": 1374068156,
               "last_activity_date": 1374068156
            },
            {
               "answer_id": 15733096,
               "score": 928,
               "body_markdown": "It is important to contrast the design philosophy of git with the philosophy of a more traditional source control tool like SVN.\r\n\r\nSubversion was designed and built with a client/server model. There is a single repository that is the server, and several clients can fetch code from the server, work on it, then commit it back to the server. The assumption is that the client can always contact the server when it needs to perform an operation.\r\n\r\nGit was designed to support a more distributed model with no need for a central repository (though you can certainly use one if you like). Also git was designed so that the client and the &quot;server&quot; don&#39;t need to be online at the same time. Git was designed so that people on an unreliable link could exchange code via email, even. It is possible to work completely disconnected and burn a CD to exchange code via git.\r\n\r\nIn order to support this model git maintains a local repository with your code and also an additional local repository that mirrors the state of the remote repository. By keeping a copy of the remote repository locally, git can figure out the changes needed even when the remote repository is not reachable.  Later when you need to send the changes to someone else, git can transfer them as a set of changes from a point in time known to the remote repository.\r\n\r\n- **`git fetch`** is the command that says &quot;bring my local copy of the remote repository up to date.&quot; \r\n\r\n- **`git pull`** says &quot;bring the changes in the remote repository where I keep my own code.&quot;\r\n\r\nNormally **`git pull`** does this by doing a **`git fetch`** to bring the local copy of the remote repository up to date, and then merging the changes into your own code repository and possibly your working copy.\r\n\r\nThe take away is to keep in mind that there are often at least **three copies** of a project on your workstation. One copy is your own repository with your own commit history. The second copy is your working copy where you are editing and building. The third copy is your local &quot;cached&quot; copy of a remote repository.",
               "up_vote_count": 930,
               "down_vote_count": 2,
               "id": "15733096",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1364755427,
               "last_edit_date": 1513203429,
               "last_activity_date": 1513203429
            },
            {
               "answer_id": 15990759,
               "score": 153,
               "body_markdown": "**Briefly**\r\n\r\n`git fetch` is similar to `pull` but doesn&#39;t merge. i.e. it fetches remote updates (`refs` and `objects`) but your local stays the same (i.e. `origin/master` gets updated but `master` stays the same) .\r\n\r\n`git pull` pulls down from a remote and instantly merges.\r\n\r\n**More**\r\n\r\n`git clone` clones a repo.\r\n\r\n`git rebase` saves stuff from your current branch that isn&#39;t in the upstream branch to a temporary area. Your branch is now the same as before you started your changes. So, `git pull -rebase` will pull down the remote changes, rewind your local branch, replay your changes over the top of your current branch one by one until you&#39;re up-to-date.\r\n\r\nAlso, `git branch -a` will show you exactly what\u2019s going on with all your branches - local and remote.\r\n\r\nThis blog post was useful:\r\n\r\n[The difference between git pull, git fetch and git clone (and git rebase) - Mike Pearce][1]\r\n\r\nand covers `git pull`, `git fetch`, `git clone` and `git rebase`.\r\n\r\n\r\n====\r\n\r\nUPDATE\r\n\r\nI thought I&#39;d update this to show how you&#39;d actually use this in practice. \r\n\r\n1. Update your local repo from the remote (but don&#39;t merge):\r\n\r\n    git fetch \r\n\r\n2. After downloading the updates, let&#39;s see the differences:\r\n\r\n    git diff master origin/master \r\n\r\n3. If you&#39;re happy with those updates, then merge:\r\n\r\n    git pull\r\n\r\nNotes:\r\n\r\nOn step 2: For more on diffs between local and remotes, see: https://stackoverflow.com/questions/1800783/compare-local-git-branch-with-remote-branch\r\n\r\nOn step 3: It&#39;s probably more accurate (e.g. on a fast changing repo) to do a `git rebase origin` here. See @Justin Ohms comment in another answer.\r\n\r\nSee also: http://longair.net/blog/2009/04/16/git-fetch-and-merge/ \r\n\r\n  [1]: http://blog.mikepearce.net/2010/05/18/the-difference-between-git-pull-git-fetch-and-git-clone-and-git-rebase/",
               "up_vote_count": 155,
               "down_vote_count": 2,
               "id": "15990759",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1365874294,
               "last_edit_date": 1495540513,
               "last_activity_date": 1427206504
            },
            {
               "answer_id": 16920037,
               "score": 42,
               "body_markdown": "The only difference between `git pull` and `git fetch` is that :\r\n\r\n`git pull` pulls from a remote branch and merges it.\r\n\r\n`git fetch ` only fetches from the remote branch but it does not merge\r\n\r\ni.e. git pull = git fetch + git merge ...",
               "up_vote_count": 44,
               "down_vote_count": 2,
               "id": "16920037",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1370354896,
               "last_edit_date": 1370447226,
               "last_activity_date": 1370447226
            },
            {
               "answer_id": 18903881,
               "score": 67,
               "body_markdown": "`git fetch` pulls down the code from the remote server to your tracking branches in your local repository.  If your remote is named `origin` (the default) then these branches will be within `origin/`, for example `origin/master`, `origin/mybranch-123`, etc.  These are not your current branches, they are *local* copies of those branches from the server.\r\n\r\n`git pull` does a `git fetch` but then **also** merges the code from the tracking branch into your current local version of that branch.  If you&#39;re not ready for that changes yet, just `git fetch` first.",
               "up_vote_count": 69,
               "down_vote_count": 2,
               "id": "18903881",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1379620906,
               "last_edit_date": 1464742789,
               "last_activity_date": 1464742789
            },
            {
               "path": "3.stack.answer",
               "answer_id": 18906104,
               "score": 28,
               "creation_date": 1379630471,
               "body_markdown": "git pull == ( git fetch + git merge) \r\n\r\ngit fetch does not changes to local branches.\r\n\r\nIf you already have a local repository with a remote set up for the desired project, you can grab all branches and tags for the existing remote using git fetch &lt;REMOTENAME&gt;. ... Fetch does not make any changes to local branches, so you will need to merge a remote branch with a paired local branch to incorporate newly fetch changes. [from github][1]\r\n\r\n\r\n  [1]: https://help.github.com/articles/fetching-a-remote",
               "up_vote_count": 29,
               "down_vote_count": 1,
               "id": "18906104",
               "last_activity_date": 1379630471,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 20271460,
               "score": 37,
               "creation_date": 1385658225,
               "body_markdown": "Git allows chronologically older commits to be applied after newer commits.\r\nBecause of this, the act of transferring commits between repositories is split into two steps:\r\n\r\n 1. Copying new commits from remote branch to copy of this remote branch inside local repo.  \r\n\r\n   (repo to repo operation) `master@remote &gt;&gt; remote/origin/master@local`\r\n\r\n 2. Integrating new commits to local branch\r\n\r\n   (inside-repo operation) `remote/origin/master@local &gt;&gt; master@local`\r\n\r\nThere are two ways of doing step 2. You can:\r\n\r\n 1. Fork local branch after last common ancestor and add new commits parallel to commits which are unique to local repository, finalized by merging commit, closing the fork. \r\n 2. Insert new commits after last common ancestor and reapply commits unique to local repository.\r\n\r\nIn `git` terminology, step 1 is `git fetch`, step 2 is `git merge` or `git rebase`\r\n\r\n`git pull` is `git fetch` and `git merge`",
               "up_vote_count": 38,
               "down_vote_count": 1,
               "id": "20271460",
               "last_activity_date": 1385658225,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 21892643,
               "score": 98,
               "body_markdown": "I like to have some visual representation of the situation to grasp these things. Maybe other developers would like to see it too, so here&#39;s my addition. I&#39;m not totally sure that it all is correct, so please comment if you find any mistakes.\r\n\r\n                                             LOCAL SYSTEM\r\n                      . =====================================================    \r\n    ================= . =================  ===================  =============\r\n    REMOTE REPOSITORY . REMOTE REPOSITORY  LOCAL REPOSITORY     WORKING COPY\r\n    (ORIGIN)          . (CACHED)           \r\n    for example,      . mirror of the      \r\n    a github repo.    . remote repo\r\n    Can also be       .\r\n    multiple repo&#39;s   .\r\n                      .\r\n                      .\r\n    FETCH  *------------------&gt;*\r\n    Your local cache of the remote is updated with the origin (or multiple\r\n    external sources, that is git&#39;s distributed nature)\r\n                      .\r\n    PULL   *--------------------------------------------------------&gt;*\r\n    changes are merged directly into your local copy. when conflicts occur, \r\n    you are asked for decisions.\r\n                      .\r\n    COMMIT            .                             *&lt;---------------*\r\n    When coming from, for example, subversion, you might think that a commit\r\n    will update the origin. In git, a commit is only done to your local repo.\r\n                      .\r\n    PUSH   *&lt;---------------------------------------*\r\n    Synchronizes your changes back into the origin.\r\n\r\nSome major advantages for having a fetched mirror of the remote are:\r\n\r\n * **Performance** (scroll through all commits and messages without trying to squeeze it through the network)\r\n * **Feedback** about the state of your local repo (for example, I use Atlassian&#39;s SourceTree, which will give me a bulb indicating if I&#39;m commits ahead or behind compared to the origin. This information can be updated with a GIT FETCH).",
               "up_vote_count": 98,
               "down_vote_count": 0,
               "id": "21892643",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1392844734,
               "last_edit_date": 1406271695,
               "last_activity_date": 1406271695
            },
            {
               "answer_id": 24991188,
               "score": 23,
               "body_markdown": "From [Pro Git &amp;sect; 2.5 Git Basics - Working with Remotes: Fetching and Pulling from Your Remotes](http://git-scm.com/book/en/Git-Basics-Working-with-Remotes#Fetching-and-Pulling-from-Your-Remotes):\r\n\r\n&gt; It\u2019s important to note that the `fetch` command pulls the data to your local repository \u2014 it doesn\u2019t\r\n&gt; automatically merge it with any of your work or modify what you\u2019re\r\n&gt; currently working on. You have to merge it manually into your work\r\n&gt; when you\u2019re ready.\r\n&gt; \r\n&gt; If you have a branch set up to track a remote branch, you can use the\r\n&gt; `git pull` command to automatically fetch and then merge a remote\r\n&gt; branch into your current branch. This may be an easier or more\r\n&gt; comfortable workflow for you; and by default, the `git clone` command\r\n&gt; automatically sets up your local master branch to track the remote\r\n&gt; master branch on the server you cloned from (assuming the remote has a\r\n&gt; master branch). Running `git pull` generally fetches data from the\r\n&gt; server you originally cloned from and automatically tries to merge it\r\n&gt; into the code you\u2019re currently working on.",
               "up_vote_count": 24,
               "down_vote_count": 1,
               "id": "24991188",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1406536135,
               "last_edit_date": 1406538249,
               "last_activity_date": 1406538249
            },
            {
               "path": "3.stack.answer",
               "answer_id": 25255924,
               "score": 29,
               "creation_date": 1407816007,
               "body_markdown": "Git obtains the branch of the latest version from the remote to the local using two commands: \r\n\r\n 1. git fetch: Git is going to get the latest version from remote to local,  but it do not automatically merge.\r\n&#160;&#160;&#160;&#160;\r\n`git fetch origin master`\r\n`git log -p master..origin/master`\r\n`git merge origin/master`\r\n\r\n\r\n&#160;&#160;&#160;&#160; The commands above mean that download latest version of the main branch from origin from the remote to origin master branch. And then compares the local master branch and origin master branch. Finally, merge. \r\n\r\n 2. git pull: Git is going to get the latest version from the remote and merge into the local.\r\n\r\n&#160;&#160;&#160;\r\n    `git pull origin master`\r\n\r\n&#160;&#160;&#160;&#160; The command above is the equivalent to `git fetch` and `git merge`. In practice, `git fetch` maybe more secure because before the merge we can see the changes and decide whether to merge.",
               "up_vote_count": 29,
               "down_vote_count": 0,
               "id": "25255924",
               "last_activity_date": 1407816007,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 28365125,
               "score": 98,
               "body_markdown": "![enter image description here][1]\r\n\r\nThis interactive graphical representation is very helpful in understanging git: http://ndpsoftware.com/git-cheatsheet.html \r\n\r\n`git fetch` just &quot;downloads&quot; the changes from the remote to your local repository. `git pull` downloads the changes and merges them into your current branch. &quot;In its default mode, `git pull` is shorthand for `git fetch` followed by `git merge FETCH_HEAD`.&quot;\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/aiQDJ.png",
               "up_vote_count": 99,
               "down_vote_count": 1,
               "id": "28365125",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1423223293,
               "last_edit_date": 1481277721,
               "last_activity_date": 1481277721
            },
            {
               "path": "3.stack.answer",
               "answer_id": 28527676,
               "score": 20,
               "creation_date": 1424014038,
               "body_markdown": "**Git Pull:**\r\n\r\nFrom what I understand, git pull will pull down from a remote whatever you ask (so, whatever trunk you\u2019re asking for) and instantly merge it into the branch you\u2019re in when you make the request. Pull is a high-level request that runs \u2018fetch\u2019 then a \u2018merge\u2019 by default, or a rebase with \u2018\u2013rebase\u2019. You could do without it, it\u2019s just a convenience.\r\n\r\n    %&gt; git checkout localBranch\r\n    %&gt; git pull origin master\r\n    %&gt; git branch\r\n    master\r\n    * localBranch\r\n\r\nThe above will merge the remote \u201cmaster\u201d branch into the local \u201clocalBranch\u201d.\r\n\r\n\r\n----------\r\n\r\n\r\n**Git fetch:**\r\n\r\nFetch is similar to pull, except it won\u2019t do any merging.\r\n\r\n    %&gt; git checkout localBranch\r\n    %&gt; git fetch origin remoteBranch\r\n    %&gt; git branch\r\n    master\r\n    * localBranch\r\n    remoteBranch\r\n\r\nSo, the fetch will have pulled down the remoteBranch and put it into a local branch called \u201cremoteBranch\u201d. creates a local copy of a remote branch which you shouldn\u2019t manipulate directly; instead create a proper local branch and work on that. \u2018git checkout\u2019 has a confusing feature though. If you \u2018checkout\u2019 a local copy of a remote branch, it creates a local copy and sets up a merge to it by default.",
               "up_vote_count": 21,
               "down_vote_count": 1,
               "id": "28527676",
               "last_activity_date": 1424014038,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 30324983,
               "score": 30,
               "body_markdown": "&gt; What is the difference between `git pull` and `git fetch`?\r\n\r\nTo understand this, you first need to understand that your local git maintains not only your local repository, but it also maintains a local copy of the remote repository.\r\n\r\n`git fetch` brings your local copy of the remote repository up to date. For example, if your remote repository is GitHub - you may want to fetch any changes made in the remote repository to your local copy of it the remote repository. This will allow you to perform operations such as compare or merge.\r\n\r\n`git pull` on the other hand will bring down the changes in the remote repository to where you keep your own code. Typically, `git pull` will do a `git fetch` first to bring the local copy of the remote repository up to date, and then it will merge the changes into your own code repository and possibly your working copy. ",
               "up_vote_count": 31,
               "down_vote_count": 1,
               "id": "30324983",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1432036640,
               "last_edit_date": 1436610166,
               "last_activity_date": 1436610166
            },
            {
               "answer_id": 30733500,
               "score": 527,
               "body_markdown": "Here is [Oliver Steele&#39;s image of how all it all fits together][1]:\r\n\r\n![enter image description here][2]\r\n\r\nIf there is sufficient interest, I suppose I could update the image to add `git clone` and `git merge`... \r\n\r\n  [1]: https://stackoverflow.com/questions/3329943/git-branch-fork-fetch-merge-rebase-and-clone-what-are-the-differences/\r\n  [2]: http://i.stack.imgur.com/XwVzT.png",
               "up_vote_count": 530,
               "down_vote_count": 3,
               "id": "30733500",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1433856639,
               "last_edit_date": 1495540513,
               "last_activity_date": 1442222620
            },
            {
               "path": "3.stack.answer",
               "answer_id": 31364215,
               "score": 24,
               "creation_date": 1436673292,
               "body_markdown": "    git pull = git fetch + git merge ",
               "up_vote_count": 26,
               "down_vote_count": 2,
               "id": "31364215",
               "last_activity_date": 1436673292,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 31364749,
               "score": 20,
               "body_markdown": "**git pull** \r\n\r\nIt performs two functions using a single command.\r\n\r\nIt fetches all the changes that were made to the remote branch and then merges those changes into your local branch. You can also modify the behaviour of pull by passing --rebase. The difference between merge and rebase can be read [here][1]\r\n\r\n**git fetch**\r\n\r\nGit fetch does only half the work of git pull. It just brings the remote changes into your local repo but does not apply them onto your branches.You have to explicitly apply those changes. This can be done as follows:\r\n\r\n    git fetch\r\n    git rebase origin/master\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/16666089/whats-the-difference-between-git-merge-and-git-rebase",
               "up_vote_count": 20,
               "down_vote_count": 0,
               "id": "31364749",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1436679597,
               "last_edit_date": 1495542389,
               "last_activity_date": 1436679597
            },
            {
               "path": "3.stack.answer",
               "answer_id": 31708577,
               "score": 25,
               "creation_date": 1438195128,
               "body_markdown": "Trying to be clear and simple.\r\n\r\n\r\nThe **git pull** command is actually a `shortcut` for **git fetch** followed by the **git merge** or the **git rebase** command depending on your configuration. You can configure your Git repository so that **git pull** is a fetch followed by a rebase.\r\n\r\n",
               "up_vote_count": 26,
               "down_vote_count": 1,
               "id": "31708577",
               "last_activity_date": 1438195128,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 32041658,
               "score": 19,
               "creation_date": 1439775457,
               "body_markdown": "From [git cheat sheet](http://www.git-tower.com/blog/git-cheat-sheet/):  \r\n\r\n    git fetch &lt;remote&gt; // Download all changes from &lt;remote&gt;, but don&#39;t integrate into HEAD\r\n    git pull &lt;remote&gt; &lt;branch&gt; // Download changes and directly merge/integrate into HEAD",
               "up_vote_count": 19,
               "down_vote_count": 0,
               "id": "32041658",
               "last_activity_date": 1439775457,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 32426129,
               "score": 19,
               "creation_date": 1441559407,
               "body_markdown": "**fetch vs pull**\r\n\r\nfetch will download any changes from the remote branch, updating your repository data, but leaving your local branch unchanged.\r\n\r\npull will perform a fetch and additionally merge the changes into your local branch.\r\n\r\n***What&#39;s the difference?*** pull updates you local branch with changes from the pulled branch. A fetch does not advance your local branch.",
               "up_vote_count": 20,
               "down_vote_count": 1,
               "id": "32426129",
               "last_activity_date": 1441559407,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 32553304,
               "score": 26,
               "body_markdown": "Actually Git maintains a copy of your own code and \r\nthe remote repository.\r\n\r\n The command `git fetch` makes your local copy up to date by getting data from remote repository. The reason we need this is because somebody else might have made some changes to the code and you want to keep yourself updated.  \r\n\r\nThe command `git pull` brings the changes in the remote repository to where you keep your own code. Normally, `git pull` does this by doing a \u2018git fetch\u2019 first to bring the local copy of the remote repository up to date, and then it merges the changes into your own code repository and possibly your working copy.",
               "up_vote_count": 27,
               "down_vote_count": 1,
               "id": "32553304",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1442170098,
               "last_edit_date": 1503003106,
               "last_activity_date": 1503003106
            },
            {
               "path": "3.stack.answer",
               "answer_id": 32779410,
               "score": 19,
               "creation_date": 1443174408,
               "body_markdown": "One must keep in mind the nature of git. You have remotes and your local branches ( not necessarily the same ) . In comparison to other source control systems this can be a bit perplexing. \r\n\r\nUsually when you checkout a remote a local copy is created that tracks the remote. \r\n\r\ngit fetch will work with the remote branch and update your information. \r\n\r\nIt is actually the case if other SWEs are working one the same branch, and rarely the case in small one dev - one branch - one project scenarios.\r\n\r\nYour work on the local branch is still intact. In order to bring the changes to your local branch you have to merge/rebase the changes from the remote branch.\r\n\r\ngit pull does exactly these two steps ( i.e. --rebase to rebase instead of merge )\r\n\r\nIf your local history and the remote history have conflicts the you will be forced to do the merge during a git push to publish your changes.\r\n\r\nThus it really depends on the nature of your work environment and experience what to use.",
               "up_vote_count": 19,
               "down_vote_count": 0,
               "id": "32779410",
               "last_activity_date": 1443174408,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 34438903,
               "score": 101,
               "body_markdown": "###Bonus:###\r\nIn speaking of pull &amp; fetch in the above answers, I would like to share an interesting trick,\r\n\r\n#**`git pull --rebase`**#\r\n\r\nThis above command is the most useful command in my git life which saved a lots of time.\r\n\r\nBefore pushing your new commits to server, try this command and it will automatically sync latest server changes (with a fetch + merge) and will place your commit at the top in git log. No need to worry about manual pull/merge.\r\n\r\nFind details at: http://gitolite.com/git-pull--rebase",
               "up_vote_count": 102,
               "down_vote_count": 1,
               "id": "34438903",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1450884663,
               "last_edit_date": 1470675377,
               "last_activity_date": 1470675377
            },
            {
               "path": "3.stack.answer",
               "answer_id": 34998582,
               "score": 157,
               "creation_date": 1453742930,
               "body_markdown": "Sometimes a visual representation helps.\r\n\r\n\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/zUInQ.png",
               "up_vote_count": 159,
               "down_vote_count": 2,
               "id": "34998582",
               "last_activity_date": 1453742930,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 36369604,
               "score": 14,
               "creation_date": 1459575254,
               "body_markdown": "From what I understood, \r\n\r\n**Git pull** - Pulls down from a specified remote (Specified by the user) and will instantly merge it into a branch we are presently on. It is basically a mix of Fetch and Merge commands.\r\n\r\n**Git Fetch** - It is same as *Pull*, but it won&#39;t do any merging. So you can carefully monitor the files before merging it. \r\n\r\nThis url must be of help for further understanding : [The difference between git pull, git fetch and git clone (and git rebase).][1]\r\n\r\n\r\n  [1]: http://blog.mikepearce.net/2010/05/18/the-difference-between-git-pull-git-fetch-and-git-clone-and-git-rebase/",
               "up_vote_count": 15,
               "down_vote_count": 1,
               "id": "36369604",
               "last_activity_date": 1459575254,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 38361930,
               "score": 57,
               "body_markdown": "**Git Fetch**\r\n\r\nYou download changes to your local branch from origin through fetch. Fetch asks the remote repo for all commits that others have made but you don&#39;t have on your local repo. Fetch downloads these commits and adds them to the local repository.\r\n\r\n\r\n**Git Merge**\r\n\r\nYou can apply changes downloaded through fetch using the merge command. Merge will take the commits retrieved from fetch and try to add them to your local branch. The merge will keep the commit history of your local changes so that when you share your branch with push, Git will know how others can merge your changes.\r\n\r\n\r\n**Git Pull**\r\n\r\nFetch and merge run together often enough that a command that combines the two, pull, was created. Pull does a fetch and then a merge to add the downloaded commits into your local branch.\r\n",
               "up_vote_count": 58,
               "down_vote_count": 1,
               "id": "38361930",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1468444989,
               "last_edit_date": 1497636910,
               "last_activity_date": 1497636910
            },
            {
               "answer_id": 40783672,
               "score": 2,
               "body_markdown": "Git fetch syncs the catalog of the remote repository to your local. It will not merge the file/code changes from remote to your local branch.\r\n\r\nGit pull downloads the changes related to your current local branch and then merge it.",
               "up_vote_count": 3,
               "down_vote_count": 1,
               "id": "40783672",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1479982655,
               "last_edit_date": 1479990690,
               "last_activity_date": 1479990690
            },
            {
               "path": "3.stack.answer",
               "answer_id": 40881298,
               "score": 11,
               "creation_date": 1480485364,
               "body_markdown": "In a simplest manner we can define as:\r\n--------------------------------------\r\n\r\n&gt; **Fetch**\r\n\r\n$ git fetch origin\r\n\r\nGit Fetch only downloads new data from a remote repository \u2013 but it doesn\u2019t integrate any of this new data into your working files. Fetch is great for getting a fresh view on all the things that happened in a remote repository.\r\n\r\nDue to its harmless nature, you can be assured that fetch will never manipulate, destroy, or screw up anything. This means you can never fetch often enough.\r\n\r\n&gt; **Pull**\r\n\r\n$ git pull origin master\r\n\r\nGit Pull, in contrast, is used with a different goal in mind: to update your current HEAD branch with the latest changes from the remote server. This means that pull not only downloads new data but also directly integrates it into your current working copy files.\r\n\r\n*This has a couple of consequences:*\r\n\r\n - Since \u201cgit pull\u201d tries to merge remote changes with your local ones, a so-called \u201cmerge conflict\u201d can occur. \r\n   \r\n - Like for many other actions, it\u2019s highly recommended to start a \u201cgit pull\u201d only with a clean working copy.\r\n\r\n - This means that you should not have any uncommitted local changes before you pull. Use Git\u2019s Stash feature to save your local changes temporarily.\r\n",
               "up_vote_count": 11,
               "down_vote_count": 0,
               "id": "40881298",
               "last_activity_date": 1480485364,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 42092094,
               "score": 48,
               "creation_date": 1486476906,
               "body_markdown": "The Difference between **GIT Fetch** and **GIT Pull** can be explained with the following scenario:\r\n*(Keeping in mind that pictures speak louder than words!, I have provided pictorial representation)*\r\n\r\nLet\u2019s take a example that You are working on a project with your team members. So their will be one main Branch of the project  and all the contributors must fork it to their own local repository and then work on this local branch to modify/Add modules then push back to the main branch.\r\n\r\nSo, \r\n**Initial State** of the two Branches when you forked the main project on your local repository will be like this- (A.B,C are Modules already completed of the project)\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\nNow, you have started working on the new module (suppose \u2018D\u2019)  and when you have completed the D module you want to push it to the main branch, But meanwhile what happens is that one of your teammates has developed new Module \u2018E\u2019,\u2019F\u2019 and modified \u2018C\u2019.\r\nSo now what has happened is that your local repository is lacking behind the original progress of the project and thus pushing of your changes to main branch can lead to conflict and may cause your Module \u2018D\u2019 to malfunction.\r\n\r\n[![enter image description here][2]][2]\r\n\r\n\r\nTo avoid such issues and to work parallel with the original progress of the project their are Two ways:\r\n\r\n**1. Git Fetch-** This will Download all the changes that have been made to the origin/main branch project which are not present in your local branch. And will wait for the Git Merge command to apply the changes that have been fetched to your Repository or branch.\r\n\r\n[![enter image description here][3]][3]\r\n\r\n\r\nSo now You can carefully monitor the files before merging it to your repository. And you can also modify \u2018D\u2019 if required because of Modified \u2018C\u2019.\r\n\r\n[![enter image description here][4]][4]\r\n\r\n\r\n**2. Git Pull-** This will update your local branch with the origin/main branch i.e. actually what it does is combination of Git Fetch and Git merge one after another.\r\n*But this may Cause Conflicts to occur, so it\u2019s recommended to use Git Pull with a clean copy.*\r\n\r\n[![enter image description here][5]][5]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/SPky3.png\r\n  [2]: https://i.stack.imgur.com/SpIlX.png\r\n  [3]: https://i.stack.imgur.com/8qhgH.png\r\n  [4]: https://i.stack.imgur.com/JYA7S.png\r\n  [5]: https://i.stack.imgur.com/O1vk0.png",
               "up_vote_count": 49,
               "down_vote_count": 1,
               "id": "42092094",
               "last_activity_date": 1486476906,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 44672602,
               "score": 46,
               "body_markdown": "**OK**, here are some information about `git pull` and `git fetch`, so you can understand the actual differences... in simple words, **fetch** gets the latest data, but not the code changes and not going to mess with your current code, but pull get the code changes and merge it your local branch, read on to get more details about each:\r\n\r\n&lt;h2&gt;git fetch&lt;/h2&gt;\r\n\r\nIt will download all refs and object and any new branches to local Repository...\r\n\r\n&gt; Fetch branches and/or tags (collectively, &quot;refs&quot;) from one or more\r\n&gt; other repositories, along with the objects necessary to complete their\r\n&gt; histories. Remote-tracking branches are updated (see the description\r\n&gt; of &lt;refspec&gt; below for ways to control this behavior).\r\n&gt; \r\n&gt; By default, any tag that points into the histories being fetched is\r\n&gt; also fetched; the effect is to fetch tags that point at branches that\r\n&gt; you are interested in. This default behavior can be changed by using\r\n&gt; the --tags or --no-tags options or by configuring\r\n&gt; remote.&lt;name&gt;.tagOpt. By using a refspec that fetches tags explicitly,\r\n&gt; you can fetch tags that do not point into branches you are interested\r\n&gt; in as well.\r\n&gt; \r\n&gt; git fetch can fetch from either a single named repository or URL, or\r\n&gt; from several repositories at once if &lt;group&gt; is given and there is a\r\n&gt; remotes.&lt;group&gt; entry in the configuration file. (See git-config[1]).\r\n&gt; \r\n&gt; When no remote is specified, by default the origin remote will be\r\n&gt; used, unless there\u2019s an upstream branch configured for the current\r\n&gt; branch.\r\n&gt; \r\n&gt; The names of refs that are fetched, together with the object names\r\n&gt; they point at, are written to .git/FETCH_HEAD. This information may be\r\n&gt; used by scripts or other git commands, such as git-pull.\r\n\r\n&lt;hr&gt;\r\n\r\n&lt;h2&gt;git pull&lt;/h2&gt;\r\n\r\nIt will apply the changes from remote to the current branch in local...\r\n\r\n&gt; Incorporates changes from a remote repository into the current branch.\r\n&gt; In its default mode, git pull is shorthand for git fetch followed by\r\n&gt; git merge FETCH_HEAD.\r\n&gt; \r\n&gt; More precisely, git pull runs git fetch with the given parameters and\r\n&gt; calls git merge to merge the retrieved branch heads into the current\r\n&gt; branch. With --rebase, it runs git rebase instead of git merge.\r\n&gt; \r\n&gt; &lt;repository&gt; should be the name of a remote repository as passed to\r\n&gt; git-fetch[1]. &lt;refspec&gt; can name an arbitrary remote ref (for example,\r\n&gt; the name of a tag) or even a collection of refs with corresponding\r\n&gt; remote-tracking branches (e.g., refs/heads/*:refs/remotes/origin/*),\r\n&gt; but usually it is the name of a branch in the remote repository.\r\n&gt; \r\n&gt; Default values for &lt;repository&gt; and &lt;branch&gt; are read from the\r\n&gt; &quot;remote&quot; and &quot;merge&quot; configuration for the current branch as set by\r\n&gt; git-branch --track.\r\n\r\n&lt;hr&gt;\r\n\r\nI also create the **visual** below to show you how `git fetch` and `git pull` working together...\r\n\r\n[![git pull and git fetch][1]][1]\r\n\r\n  [1]: https://i.stack.imgur.com/nWYnQ.png",
               "up_vote_count": 46,
               "down_vote_count": 0,
               "id": "44672602",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1498038501,
               "last_edit_date": 1514447423,
               "last_activity_date": 1514447423
            },
            {
               "path": "3.stack.answer",
               "answer_id": 45049899,
               "score": 16,
               "creation_date": 1499840621,
               "body_markdown": "A simple Graphical Representation for Beginners,\r\n\r\n[![enter image description here][1]][1]\r\n\r\nhere,\r\n\r\n    git pull  \r\nwill fetch code from repository and rebase with your local... in git pull there is possibility of new commits getting created.\r\n\r\nbut in , \r\n \r\n\r\ngit fetch \r\n\r\nwill fetch code from repository and we need to rebase it manually by using `git rebase`\r\n\r\neg: i am going to fetch from server master and rebase it in my local master.\r\n\r\n1) git pull ( rebase will done automatically):\r\n\r\n    git pull origin master\r\nhere **origin** is your remote repo **master** is your branch\r\n\r\n2) git fetch (need to rebase manually):\r\n\r\n    git fetch origin master\r\nit will fetch server changes from origin. and it will be in your local until you rebase it on your own. we need to fix conflicts manually by checking codes.\r\n\r\n    git rebase origin/master\r\nthis will rebase code into local. before that ensure you&#39;re in right branch.\r\n\r\n  [1]: https://i.stack.imgur.com/fEvk2.jpg",
               "up_vote_count": 16,
               "down_vote_count": 0,
               "id": "45049899",
               "last_activity_date": 1499840621,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 47222496,
               "score": 1,
               "body_markdown": "git pull and git fetch have different uses, even if in general usage they do fairly similar tasks. It is important to understand which to use and when.\r\n\r\ngit fetch downloads the latest changes from the remote, but does not affect your working copy, or branches on your local repository. The downloaded branch is stored in &lt;remote&gt;/&lt;branch&gt;, e.g. origin/master.\r\n\r\ngit pull is effectively git fetch followed by git merge &lt;remote&gt;/&lt;branch&gt;. Any changes in the remote repository are merged into your local branch. This is useful if you just want your local repository to reflect the changes that have happened in the remote, but is generally counterproductive when you are developing in your local branches and collaborating with others on the remote.",
               "up_vote_count": 2,
               "down_vote_count": 1,
               "id": "47222496",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1510315889,
               "last_edit_date": 1516184138,
               "last_activity_date": 1516184138
            },
            {
               "path": "3.stack.answer",
               "answer_id": 47453209,
               "score": -1,
               "creation_date": 1511432860,
               "body_markdown": "Take a look at the picture below, it is a sourcetree example or fetched but not pulled changes. \r\n\r\n1) After the fetch, these digits show how many changesets are not merged to the current working copy. In an ST&#39;s log view your selected changeset will _NOT_ be the last by date (red arrow) in selected branch. The workspace will not be affected after the fetch, cause it is just a synchronization of made changesets with a remote repo.\r\n\r\n2) If press Pull, current work copy will be updated with all these changesets and in a log view your selected changeset WILL be the last in working branch. Also, merging conflicts could appear.\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/NmvvA.png",
               "up_vote_count": 0,
               "down_vote_count": 1,
               "id": "47453209",
               "last_activity_date": 1511432860,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 47785867,
               "score": -1,
               "creation_date": 1513141726,
               "body_markdown": "-  `git pull`: \r\n - Incorporates changes from a remote repository into the current branch. \r\n - In its default mode, `git pull` is shorthand for `git fetch` followed by `git merge FETCH_HEAD`.\r\n- `git fetch` \r\n - Download objects and refs from another repository.\r\n\r\nWhile doing pull request in eclipse, we can see git fetch and Update results as follows:  \r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/lZQmn.jpg",
               "up_vote_count": 0,
               "down_vote_count": 1,
               "id": "47785867",
               "last_activity_date": 1513141726,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 47947099,
               "score": 2,
               "creation_date": 1513974983,
               "body_markdown": "**Git Fetch**\r\n\r\nHelps you to get known about the latest updates from a `git repository`. Let&#39;s say you working in a team using `GitFlow`, where team working on multiple `branches` ( features ). With `git fetch --all` `command` you can get known about all new `branches` within `repository`.\r\n\r\nMostly `git fetch` is used with `git reset`. For example you want to revert all your local changes to the current repository state.\r\n\r\n    git fetch --all // get known about latest updates\r\n    git reset --hard origin/[branch] // revert to current branch state\r\n\r\n\r\n**Git pull**\r\n\r\nThis command update your `branch` with current `repository` `branch` state. Let&#39;s continue with `GitFlow`. Multiple feature `branches` was `merged` to `develop` branch and when you want to develop new features for the project you must go to the develop `branch` and do a `git pull` to get the current state of `develop` `branch`\r\n\r\n&gt; Documentation for GitFlow https://gist.github.com/peterdeweese/4251497",
               "up_vote_count": 2,
               "down_vote_count": 0,
               "id": "47947099",
               "last_activity_date": 1513974983,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 48078345,
               "score": 0,
               "creation_date": 1514985935,
               "body_markdown": "`git pull` is used to download git repository changes, \r\nwhere as `git fetch` is use to fetch branch changes, e.g. if someone created new branch you can update that branch on your local git repository by using `git fetch`.",
               "up_vote_count": 2,
               "down_vote_count": 2,
               "id": "48078345",
               "last_activity_date": 1514985935,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 48565337,
               "score": 1,
               "creation_date": 1517495999,
               "body_markdown": "In short and simple terms:\r\n\r\n`git fetch`: Look if there is new stuff.\r\n\r\n`git pull`: Take the new stuff and put it on top of your stuff. ",
               "up_vote_count": 3,
               "down_vote_count": 2,
               "id": "48565337",
               "last_activity_date": 1517495999,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 48691562,
               "score": -1,
               "creation_date": 1518111418,
               "body_markdown": "**git fetch** fetches the new changes from repository and stores log into pipe between local and remote repo.\n\nWhile **git pull** first fetches all the changes and then Merge them to upstream/master(remotes master).\n\nBut it is preferred to use **git fetch** and **git merge upstream/master** instead of **git pull** as there might be conflicts if you directly pull changes without checking for them.",
               "up_vote_count": 0,
               "down_vote_count": 1,
               "id": "48691562",
               "last_activity_date": 1518111418,
               "tags": [],
               "is_accepted": false
            }
         ],
         "last_edit_date": "1486974674",
         "link": "https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch",
         "creation_date": "1226742669"
      },
      {
         "title": "How do I delete a Git branch both locally and remotely?",
         "code_snippet": "[\"<code>$ git branch -d remotes/origin/bugfix\\nerror: branch 'remotes/origin/bugfix' not found.\\n\\n$ git branch -d origin/bugfix\\nerror: branch 'origin/bugfix' not found.\\n\\n$ git branch -rd origin/bugfix\\nDeleted remote branch origin/bugfix (was 2a14ef7).\\n\\n$ git push\\nEverything up-to-date\\n\\n$ git pull\\nFrom github.com:gituser/gitproject\\n* [new branch] bugfix -&gt; origin/bugfix\\nAlready up-to-date.\\n</code>\", '<code>remotes/origin/bugfix</code>', '<code>deleted remote-tracking branch</code>', '<code>$ git push -d &lt;remote_name&gt; &lt;branch_name&gt;\\n$ git branch -d &lt;branch_name&gt;\\n</code>', '<code>origin</code>', '<code>$ git branch -d branch_name\\n$ git branch -D branch_name\\n</code>', '<code>-d</code>', '<code>--delete</code>', '<code>-D</code>', '<code>--delete --force</code>', '<code>man git-branch</code>', '<code>$ git push &lt;remote_name&gt; --delete &lt;branch_name&gt;\\n</code>', '<code>$ git push &lt;remote_name&gt; :&lt;branch_name&gt;\\n</code>', '<code>git push</code>', '<code>-d</code>', '<code>--delete</code>', '<code>git push [remotename] :[branch]</code>', '<code>$ git push origin :serverfix\\nTo git@github.com:schacon/simplegit.git\\n - [deleted]         serverfix\\n</code>', '<code>git push [remotename] [localbranch]:[remotebranch]</code>', '<code>[localbranch]</code>', '<code>[remotebranch]</code>', '<code>git push origin :bugfix</code>', '<code>git fetch --all --prune\\n</code>', '<code>git push origin local_branch:remote_branch</code>', '<code>git push origin :remote_branch</code>', '<code>:</code>', '<code>git fetch --all --prune</code>', '<code>git branch -d</code>', '<code>git push origin --delete</code>', '<code>git branch -a</code>', '<code>git fetch --all --prune</code>', '<code>git branch -a</code>', '<code>git branch -r</code>', '<code>git remote show origin</code>', '<code>git branch -D Branch_Name</code>', '<code>git branch -d {the_local_branch}</code>', '<code>-D</code>', '<code>git push origin --delete {the_remote_branch}</code>', '<code>-D</code>', '<code>-d</code>', \"<code>'git branch -d your_branch</code>\", \"<code>error: The branch 'your_branch' is not fully merged. If you are sure you want to delete it, run 'git branch -D your_branch'.</code>\", '<code>git remote prune &lt;name&gt;</code>', '<code>git remote prune origin</code>', '<code>git push origin --delete &lt;branch&gt;  # Git version 1.7.0 or newer\\ngit push origin :&lt;branch&gt;          # Git versions older than 1.7.0\\n</code>', '<code>git branch --delete &lt;branch&gt;\\ngit branch -d &lt;branch&gt; # Shorter version\\ngit branch -D &lt;branch&gt; # Force delete un-merged branches\\n</code>', '<code>git branch --delete --remotes &lt;remote&gt;/&lt;branch&gt;\\ngit branch -dr &lt;remote&gt;/&lt;branch&gt; # Shorter\\n\\ngit fetch &lt;remote&gt; --prune # Delete multiple obsolete tracking branches\\ngit fetch &lt;remote&gt; -p      # Shorter\\n</code>', '<code>X</code>', '<code>X</code>', '<code>origin/X</code>', '<code>X</code>', '<code>git branch -rd origin/bugfix\\n</code>', '<code>origin/bugfix</code>', '<code>bugfix</code>', '<code>origin</code>', '<code>git push origin --delete bugfix\\n</code>', '<code>X</code>', '<code>git push</code>', '<code>origin/X</code>', '<code>git fetch --prune</code>', '<code>git fetch -p</code>', '<code>origin/X</code>', '<code># View just remote-tracking branches\\ngit branch --remotes\\ngit branch -r\\n\\n# View both strictly local as well as remote-tracking branches\\ngit branch --all\\ngit branch -a\\n</code>', '<code>X</code>', '<code>origin/X</code>', '<code>git fetch</code>', '<code>--prune</code>', '<code>-p</code>', '<code>git fetch origin --prune\\ngit fetch origin -p # Shorter\\n</code>', '<code>--all</code>', '<code>--multiple</code>', '<code>--prune</code>', '<code>git fetch -p</code>', '<code>--remote</code>', '<code>-r</code>', '<code>git branch --delete --remotes origin/X\\ngit branch -dr origin/X # Shorter\\n</code>', '<code>X</code>', '<code>origin/X</code>', '<code>X</code>', '<code>git push --delete origin serverfix\\n</code>', '<code>git push origin :serverfix\\n</code>', '<code>git branch -d &lt;local_branch&gt;</code>', '<code>git branch -D &lt;local_branch&gt;</code>', '<code>git push origin --delete &lt;your_branch&gt; \\n</code>', '<code>git branch -D &lt;branch_name&gt; \\n</code>', '<code>git push origin --delete</code>', '<code>git branch -D</code>', '<code>-D</code>', '<code>--delete --force</code>', '<code>-d</code>', '<code>--delete</code>', '<code>git branch -a</code>', '<code>git checkout other_than_branch_to_be_deleted\\n</code>', '<code>git branch -D branch_to_be_deleted\\n</code>', '<code>git push origin --delete branch_to_be_deleted\\n</code>', '<code>git branch -d &lt;branchname&gt;    # deletes local branch\\n</code>', '<code>git push origin :&lt;branchname&gt; # deletes remote branch\\n</code>', '<code>git branch -a</code>', '<code>git remote prune &lt;repository&gt;\\n</code>', '<code>git remote prune origin</code>', '<code>git push</code>', '<code>git remote prune</code>', '<code>git fetch --prune</code>', '<code>git fetch -p</code>', '<code>git branch -D &lt;name-of-branch&gt;\\ngit branch -D -r origin/&lt;name-of-branch&gt;\\ngit push origin :&lt;name-of-branch&gt;\\n</code>', '<code>-D</code>', '<code>-d</code>', '<code>git branch -d example\\n</code>', '<code>example</code>', '<code>git push origin :example\\n</code>', '<code>git push --prune origin\\n</code>', '<code>git push --mirror\\n</code>', '<code>git push --prune origin</code>', '<code>alias git-shoot=\"git push origin --delete\"\\n</code>', '<code>git-shoot branchname\\n</code>', '<code>git push origin --delete $1</code>', '<code>git-shoot</code>', '<code>git shoot branchname</code>', '<code>~/.gitconfig</code>', '<code>[alias]\\n    rmbranch = \"!f(){ git branch -d ${1} &amp;&amp; git push origin --delete ${1}; };f\"\\n</code>', \"<code>git config --global alias.rmbranch \\\\\\n'!f(){ git branch -d ${1} &amp;&amp; git push origin --delete ${1}; };f'\\n</code>\", '<code>-d</code>', '<code>-D</code>', '<code>&amp;&amp;</code>', '<code>;</code>', '<code>git branch -d branch_name \\n</code>', '<code>-D</code>', '<code>-d</code>', '<code>git branch -D branch_name\\n</code>', '<code>git push origin :branchname  \\n\\ngit push origin --delete branchname \\n</code>', '<code>git checkout master</code>', '<code>git push origin --delete &lt;branch-name&gt;</code>', '<code>git branch --delete &lt;branch-name&gt;</code>', '<code>git remote prune origin</code>', '<code>$ git remote prune origin\\nPruning origin\\nURL: git@example.com/yourrepo.git\\n * [pruned] origin/some-branchs\\n</code>', '<code>git branch -r</code>', '<code>grb delete branch\\n</code>', '<code>publish</code>', '<code>track</code>', '<code>$ git branch -d contact-form\\n</code>', '<code>git push origin --delete contact-form\\n</code>', '<code>git push origin :&lt;branchname&gt;</code>', '<code>git branch -D &lt;branchname&gt;</code>', '<code>git push origin :&lt;branchname&gt;</code>', '<code>D=branch-name; git branch -D $D; git push origin :$D</code>', '<code>git kill branch-name</code>', '<code>[alias]\\n    kill = \"!f(){ git branch -D \\\\\"$1\\\\\";  git push origin --delete \\\\\"$1\\\\\"; };f\"\\n</code>', '<code>git branch -D</code>', '<code>-d</code>', '<code>git branch -d &lt;branch-name&gt;\\ngit push origin :&lt;branch-name&gt;\\n</code>', '<code>git push origin --delete branchName\\n</code>', '<code>git push origin :branchName\\n</code>', '<code>git branch -d my_branch\\n</code>', '<code>Rebase/Merge in progress</code>', '<code>git branch -D my_branch\\n</code>', '<code>git push --delete origin my_branch\\n</code>', '<code>git push origin :my_branch   # easy to remember both will do the same.\\n</code>', \"<code>$ git push origin :branch-or-tag-name\\nerror: dst refspec branch-or-tag-name matches more than one.\\nerror: failed to push some refs to 'git@github.com:SomeName/some-repo.git'\\n</code>\", '<code>git push origin :refs/heads/branch-or-tag-name\\n</code>', '<code>git push origin :refs/tags/branch-or-tag-name\\n</code>', '<code>function gitdelete(){\\n    git push origin --delete $1\\n    git branch -D $1\\n}\\n</code>', '<code>master</code>', '<code>gitdelete my-branch-name\\n</code>', '<code>my-branch-name</code>', '<code>origin</code>', '<code>--delete \"$@\"</code>', '<code>-D \"$@\"</code>', '<code>$1</code>', '<code>git branch -d</code>', '<code>&amp;&amp;</code>', '<code>git branch -D branch_to_delete</code>', '<code>some_other_branch</code>', '<code>git checkout some_other_branch\\ngit push origin :branch_to_delete\\ngit branch -d branch_to_delete\\n</code>', '<code>git fetch</code>', '<code>git remote prune origin</code>', '<code>git fetch\\ngit remote prune origin\\ngit branch -r\\n</code>', '<code>git push origin :bugfix  # Deletes remote branch\\ngit branch -d bugfix     # Must delete local branch manually\\n</code>', '<code>git branch -D bugfix\\n</code>', '<code>git remote prune origin\\n</code>', '<code>git branch --delete &lt;branch&gt;\\n</code>', '<code>git ls-remote\\n</code>', '<code>&lt;branch&gt;</code>', '<code>branch</code>', '<code>git-remove</code>', '<code>git remove temp</code>', '<code>#!/usr/bin/env ruby\\nrequire \\'io/console\\'\\n\\nif __FILE__ == $0\\n      branch_name = ARGV[0] if (ARGV[0])\\n      print \"Press Y to force delete local and remote branch #{branch_name}...\"\\n    response = STDIN.getch\\n    if [\\'Y\\', \\'y\\', \\'yes\\'].include?(response)\\n      puts \"\\\\nContinuing.\"\\n      `git branch -D #{branch_name}`\\n      `git branch -D -r origin/#{branch_name}`\\n      `git push origin --delete #{branch_name}` \\n    else\\n      puts \"\\\\nQuitting.\"\\n    end\\nend\\n</code>']",
         "body_markdown": "I want to delete a branch both locally and on my remote project fork on [GitHub][1].\r\n\r\n### Failed Attempts to Delete Remote Branch\r\n\r\n    $ git branch -d remotes/origin/bugfix\r\n    error: branch &#39;remotes/origin/bugfix&#39; not found.\r\n\r\n    $ git branch -d origin/bugfix\r\n    error: branch &#39;origin/bugfix&#39; not found.\r\n\r\n    $ git branch -rd origin/bugfix\r\n    Deleted remote branch origin/bugfix (was 2a14ef7).\r\n\r\n    $ git push\r\n    Everything up-to-date\r\n\r\n    $ git pull\r\n    From github.com:gituser/gitproject\r\n    * [new branch] bugfix -&gt; origin/bugfix\r\n    Already up-to-date.\r\n\r\nWhat do I need to do differently to successfully delete the\r\n`remotes/origin/bugfix` branch both locally and on GitHub?\r\n\r\n  [1]: http://en.wikipedia.org/wiki/GitHub\r\n",
         "up_vote_count": "12726",
         "view_count": "5293815",
         "id": "8587033-4",
         "answer_count": "40",
         "tags": "['git', 'git-branch', 'git-remote']",
         "path": "2.stack",
         "_childDocuments_": [
            {
               "answer_id": 2003515,
               "score": 15726,
               "body_markdown": "# Executive Summary\r\n\r\n    $ git push -d &lt;remote_name&gt; &lt;branch_name&gt;\r\n    $ git branch -d &lt;branch_name&gt;\r\n\r\nNote that in most cases the remote name is `origin`.\r\n\r\n# Delete Local Branch\r\n\r\nTo delete the *local* branch use one of the following:\r\n\r\n    $ git branch -d branch_name\r\n    $ git branch -D branch_name\r\n\r\n**Note:** The `-d` option is an alias for `--delete`, which only deletes the branch if it has already been fully merged in its upstream branch. You could also use `-D`, which is an alias for `--delete --force`, which deletes the branch &quot;irrespective of its merged status.&quot; [Source: `man git-branch`] \r\n\r\n# Delete Remote Branch [Updated on 8-Sep-2017]\r\n\r\nAs of [Git v1.7.0][git-1.7.0], you can delete a ***remote*** branch using\r\n\r\n    $ git push &lt;remote_name&gt; --delete &lt;branch_name&gt;\r\n\r\nwhich might be easier to remember than\r\n\r\n    $ git push &lt;remote_name&gt; :&lt;branch_name&gt;\r\n\r\nwhich was added in [Git v1.5.0][git-1.5.0] &quot;to delete a remote branch or a tag.&quot;\r\n\r\nStarting on [Git v2.8.0][git-2.8.0] you can also use `git push` with the `-d` option as an alias for `--delete`.\r\n\r\nTherefore, the version of Git you have installed will dictate whether you need to use the easier or harder syntax.\r\n\r\n## Delete Remote Branch [Original Answer from 5-Jan-2010]\r\n\r\nFrom Chapter 3 of [*Pro Git*][#progit] by Scott Chacon:\r\n\r\n&gt; ### Deleting Remote Branches ###\r\n&gt; \r\n&gt; Suppose you\u2019re done with a remote branch \u2014 say, you and your collaborators are finished with a feature and have merged it into your remote\u2019s master branch (or whatever branch your stable codeline is in). You can delete a remote branch using the rather obtuse syntax `git push [remotename] :[branch]`. If you want to delete your serverfix branch from the server, you run the following:\r\n&gt; \r\n    $ git push origin :serverfix\r\n    To git@github.com:schacon/simplegit.git\r\n     - [deleted]         serverfix\r\n\r\n&gt; Boom. No more branch on your server. You may want to dog-ear this page, because you\u2019ll need that command, and you\u2019ll likely forget the syntax. A way to remember this command is by recalling the `git push [remotename] [localbranch]:[remotebranch]` syntax that we went over a bit earlier. If you leave off the `[localbranch]` portion, then you\u2019re basically saying, \u201cTake nothing on my side and make it be `[remotebranch]`.\u201d\r\n\r\nI issued `git push origin :bugfix` and it worked beautifully. Scott Chacon was right\u2014I will want to [dog ear][1] that page (or virtually dog ear by answering this on Stack&amp;nbsp;Overflow).\r\n\r\n[#progit]: http://git-scm.com/book/en/Git-Branching-Remote-Branches\r\n\r\n[git-2.8.0]:\r\nhttps://github.com/git/git/blob/master/Documentation/RelNotes/2.8.0.txt\r\n\r\n[git-1.7.0]: https://github.com/gitster/git/blob/master/Documentation/RelNotes/1.7.0.txt\r\n\r\n[git-1.5.0]: https://github.com/gitster/git/blob/master/Documentation/RelNotes/1.5.0.txt\r\n\r\n  [1]: http://en.wiktionary.org/wiki/dogear#Verb\r\n\r\nThen you should execute this on other machines\r\n\r\n    git fetch --all --prune\r\n\r\nto propagate changes.\r\n",
               "up_vote_count": 15737,
               "down_vote_count": 11,
               "id": "2003515",
               "tags": [],
               "is_accepted": true,
               "path": "3.stack.answer",
               "creation_date": 1262654035,
               "last_edit_date": 1514124225,
               "last_activity_date": 1514124225
            },
            {
               "answer_id": 7923161,
               "score": 649,
               "body_markdown": "You can also use the following to delete the remote branch.\r\n\r\n    git push --delete origin serverfix\r\n\r\nWhich does the same thing as\r\n\r\n    git push origin :serverfix\r\n\r\nbut it may be easier to remember.\r\n",
               "up_vote_count": 651,
               "down_vote_count": 2,
               "id": "7923161",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1319754173,
               "last_edit_date": 1422557823,
               "last_activity_date": 1422557823
            },
            {
               "answer_id": 9848609,
               "score": 86,
               "body_markdown": "In addition to the other answers, I often use the [git_remote_branch][1] tool. It&#39;s an extra install, but it gets you a convenient way to interact with remote branches. In this case, to delete:\r\n\r\n    grb delete branch\r\n\r\nI find that I also use the `publish` and `track` commands quite often.\r\n\r\n  [1]: https://github.com/webmat/git_remote_branch",
               "up_vote_count": 91,
               "down_vote_count": 5,
               "id": "9848609",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1332555708,
               "last_edit_date": 1375533186,
               "last_activity_date": 1375533186
            },
            {
               "answer_id": 10999165,
               "score": 2685,
               "body_markdown": "Matthew&#39;s answer is great for removing *remote* branches and I also appreciate the explanation, but to make a simple distinction between the two commands:\r\n\r\nTo remove a ***local branch*** from your machine:\r\n\r\n`git branch -d {the_local_branch}` (use `-D` instead to force deleting the branch without checking merged status)\r\n\r\nTo remove a ***remote branch*** from the server:\r\n\r\n`git push origin --delete {the_remote_branch}`\r\n\r\nReference: https://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote",
               "up_vote_count": 2690,
               "down_vote_count": 5,
               "id": "10999165",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1339512703,
               "last_edit_date": 1513600393,
               "last_activity_date": 1513600393
            },
            {
               "answer_id": 13270340,
               "score": 314,
               "body_markdown": "Tip: When you delete branches using\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git branch -d &lt;branchname&gt;    # deletes local branch\r\n\r\nor\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git push origin :&lt;branchname&gt; # deletes remote branch\r\n\r\nonly the references are deleted. Even though the branch is actually removed on the remote the references to it still exists in the local repositories of your team members. This means that for other team members the deleted branches are still visible when they do a `git branch -a`.\r\n\r\nTo solve this your team members can prune the deleted branches with\r\n\r\n    git remote prune &lt;repository&gt;\r\n\r\nThis is typically `git remote prune origin`.\r\n",
               "up_vote_count": 319,
               "down_vote_count": 5,
               "id": "13270340",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1352293334,
               "last_edit_date": 1422557886,
               "last_activity_date": 1422557886
            },
            {
               "answer_id": 13437928,
               "score": 169,
               "body_markdown": "Another approach is\r\n\r\n    git push --prune origin\r\n\r\n***WARNING:*** *This will delete all remote branches that do not exist locally.* Or more comprehensively,\r\n\r\n    git push --mirror\r\n\r\nwill effectively make the remote repository look like the local copy of the repository (local heads, remotes and tags are mirrored on remote).\r\n",
               "up_vote_count": 176,
               "down_vote_count": 7,
               "id": "13437928",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1353219094,
               "last_edit_date": 1420852271,
               "last_activity_date": 1420852271
            },
            {
               "answer_id": 14345010,
               "score": 102,
               "body_markdown": "If you want to complete both these steps with a single command, you can make an alias for it by adding the below to your `~/.gitconfig`:\r\n\r\n    [alias]\r\n    \trmbranch = &quot;!f(){ git branch -d ${1} &amp;&amp; git push origin --delete ${1}; };f&quot;\r\n\r\nAlternatively, you can add this to your global config from the command line using\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git config --global alias.rmbranch \\\r\n    &#39;!f(){ git branch -d ${1} &amp;&amp; git push origin --delete ${1}; };f&#39;\r\n\r\n**NOTE**: If using `-d` (lowercase d), the branch will only be deleted if it has been merged. To force the delete to happen, you will need to use `-D` (uppercase D).",
               "up_vote_count": 103,
               "down_vote_count": 1,
               "id": "14345010",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1358276713,
               "last_edit_date": 1402503977,
               "last_activity_date": 1402503977
            },
            {
               "answer_id": 15364667,
               "score": 88,
               "body_markdown": "You can also do this using `git remote prune origin`:\r\n\r\n    $ git remote prune origin\r\n    Pruning origin\r\n    URL: git@example.com/yourrepo.git\r\n     * [pruned] origin/some-branchs\r\n\r\nIt prunes and deletes remote-tracking branches from a `git branch -r` listing.\r\n",
               "up_vote_count": 89,
               "down_vote_count": 1,
               "id": "15364667",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1363100268,
               "last_edit_date": 1417242386,
               "last_activity_date": 1417242386
            },
            {
               "answer_id": 15775364,
               "score": 141,
               "body_markdown": "I use the following in my [Bash][1] settings:\r\n\r\n    alias git-shoot=&quot;git push origin --delete&quot;\r\n\r\nThen you can call:\r\n\r\n    git-shoot branchname\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\r\n",
               "up_vote_count": 144,
               "down_vote_count": 3,
               "id": "15775364",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1364940684,
               "last_edit_date": 1417242422,
               "last_activity_date": 1417242422
            },
            {
               "answer_id": 16276586,
               "score": 109,
               "body_markdown": "Since January 2013, GitHub included a &lt;kbd&gt;Delete branch&lt;/kbd&gt; button next to each branch in your &quot;Branches&quot; page.\r\n\r\nRelevant blog post: [Create and delete branches][1]\r\n\r\n\r\n  [1]: https://github.com/blog/1377-create-and-delete-branches",
               "up_vote_count": 114,
               "down_vote_count": 5,
               "id": "16276586",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1367231975,
               "last_edit_date": 1401158586,
               "last_activity_date": 1401158586
            },
            {
               "answer_id": 19572740,
               "score": 237,
               "body_markdown": "    git branch -D &lt;name-of-branch&gt;\r\n    git branch -D -r origin/&lt;name-of-branch&gt;\r\n    git push origin :&lt;name-of-branch&gt;\r\n\r\n",
               "up_vote_count": 240,
               "down_vote_count": 3,
               "id": "19572740",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1382636183,
               "last_edit_date": 1407528243,
               "last_activity_date": 1407528243
            },
            {
               "answer_id": 20081966,
               "score": 35,
               "body_markdown": "Mashup of all the other answers. Requires Ruby 1.9.3+, tested **only** on OS X.\r\n\r\nCall this file `git-remove`, make it executable, and put it in your path. Then use, for example, `git remove temp`. \r\n\r\n&lt;!-- language: lang-ruby --&gt;\r\n\r\n    #!/usr/bin/env ruby\r\n    require &#39;io/console&#39;\r\n    \r\n    if __FILE__ == $0\r\n    \t  branch_name = ARGV[0] if (ARGV[0])\r\n    \t  print &quot;Press Y to force delete local and remote branch #{branch_name}...&quot;\r\n        response = STDIN.getch\r\n        if [&#39;Y&#39;, &#39;y&#39;, &#39;yes&#39;].include?(response)\r\n          puts &quot;\\nContinuing.&quot;\r\n          `git branch -D #{branch_name}`\r\n          `git branch -D -r origin/#{branch_name}`\r\n          `git push origin --delete #{branch_name}`\t\r\n        else\r\n          puts &quot;\\nQuitting.&quot;\r\n        end\r\n    end",
               "up_vote_count": 35,
               "down_vote_count": 0,
               "id": "20081966",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1384894951,
               "last_edit_date": 1401474841,
               "last_activity_date": 1401474841
            },
            {
               "path": "3.stack.answer",
               "answer_id": 20233127,
               "score": 40,
               "creation_date": 1385521495,
               "body_markdown": "Many of the other answers will lead to errors/warnings. This approach is relatively fool proof although you may still need `git branch -D branch_to_delete` if it&#39;s not fully merged into `some_other_branch`, for example.\r\n\r\n    git checkout some_other_branch\r\n    git push origin :branch_to_delete\r\n    git branch -d branch_to_delete\r\n    \r\nRemote pruning isn&#39;t needed if you deleted the remote branch. It&#39;s only used to get the most up to date remotes available on a repo you&#39;re tracking. I&#39;ve observed `git fetch` will add remotes, not remove them. Here&#39;s an example of when `git remote prune origin` will actually do something:\r\n\r\nUser A does the steps above. User B would run the following commands to see the most up to date remote branches\r\n\r\n    git fetch\r\n    git remote prune origin\r\n    git branch -r\r\n",
               "up_vote_count": 41,
               "down_vote_count": 1,
               "id": "20233127",
               "last_activity_date": 1385521495,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 23961231,
               "score": 1527,
               "body_markdown": "# The Short Answers\r\n\r\nIf you want more detailed explanations of the following commands, then see the long answers in the next section.\r\n\r\nDeleting a remote branch:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git push origin --delete &lt;branch&gt;  # Git version 1.7.0 or newer\r\n    git push origin :&lt;branch&gt;          # Git versions older than 1.7.0\r\n\r\nDeleting a local branch:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git branch --delete &lt;branch&gt;\r\n    git branch -d &lt;branch&gt; # Shorter version\r\n    git branch -D &lt;branch&gt; # Force delete un-merged branches\r\n\r\nDeleting a local remote-tracking branch:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git branch --delete --remotes &lt;remote&gt;/&lt;branch&gt;\r\n    git branch -dr &lt;remote&gt;/&lt;branch&gt; # Shorter\r\n\r\n    git fetch &lt;remote&gt; --prune # Delete multiple obsolete tracking branches\r\n    git fetch &lt;remote&gt; -p      # Shorter\r\n\r\n# The Long Answer: there are 3 different branches to delete!\r\n\r\nWhen you&#39;re dealing with deleting branches both locally and remotely, keep in mind that **there are 3 different branches involved**:\r\n\r\n1. The local branch `X`.\r\n2. The remote origin branch `X`.\r\n2. The local remote-tracking branch `origin/X` that tracks the remote branch `X`.\r\n\r\n![Visualization of 3 branches][1]\r\n\r\nThe original poster used\r\n\r\n    git branch -rd origin/bugfix\r\n\r\nwhich only deleted his **local remote-tracking branch** `origin/bugfix`, and not the actual remote branch `bugfix` on `origin`.\r\n\r\n![Diagram 2][2]\r\n\r\n**To delete that actual remote branch**, you need\r\n\r\n    git push origin --delete bugfix\r\n\r\n![Diagram 3][3]\r\n\r\n# Additional Details\r\n\r\nThe following sections describe additional details to consider when deleting your remote and remote-tracking branches.\r\n\r\n## Pushing to delete remote branches also deletes remote-tracking branches\r\n\r\nNote that deleting the remote branch `X` from the command line using a `git push` **will also delete the local remote-tracking branch** `origin/X`, so it is not necessary to prune the obsolete remote-tracking branch with `git fetch --prune` or `git fetch -p`, though it wouldn&#39;t hurt if you did it anyway.\r\n\r\nYou can verify that the remote-tracking branch `origin/X` was also deleted by running the following:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    # View just remote-tracking branches\r\n    git branch --remotes\r\n    git branch -r\r\n\r\n    # View both strictly local as well as remote-tracking branches\r\n    git branch --all\r\n    git branch -a\r\n\r\n## Pruning the obsolete local remote-tracking branch origin/X\r\n\r\nIf you didn&#39;t delete your remote branch `X` from the command line (like above), then your local repo will still contain (a now obsolete) remote-tracking branch `origin/X`. This can happen if you deleted a remote branch directly through GitHub&#39;s web interface, for example.\r\n\r\nA typical way to remove these obsolete remote-tracking branches (since Git version 1.6.6) is to simply run `git fetch` with the `--prune` or shorter `-p`. **Note that this removes all obsolete local remote-tracking branches for any remote branches that no longer exist on the remote**:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git fetch origin --prune\r\n    git fetch origin -p # Shorter\r\n\r\nHere is the relevant quote from the [1.6.6 release notes][notes] (emphasis mine):\r\n\r\n&gt; **&quot;git fetch&quot; learned** `--all` and `--multiple `options, to run fetch from\r\n&gt; many repositories, and **`--prune` option to remove remote tracking\r\n&gt; branches that went stale.**  These make &quot;git remote update&quot; and &quot;git\r\n&gt; remote prune&quot; less necessary (there is no plan to remove &quot;remote\r\n&gt; update&quot; nor &quot;remote prune&quot;, though).\r\n\r\n### Alternative to above automatic pruning for obsolete remote-tracking branches\r\n\r\nAlternatively, instead of pruning your obsolete local remote-tracking branches through `git fetch -p`, *you can avoid making the extra network operation* by just manually removing the branch(es) with the `--remote` or `-r` flags:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git branch --delete --remotes origin/X\r\n    git branch -dr origin/X # Shorter\r\n\r\n## See Also\r\n\r\n* [git-branch(1) Manual Page][branch].\r\n* [git-fetch(1) Manual Page][fetch].\r\n* [Pro Git &amp;sect; 3.5 Git Branching - Remote Branches][pro].\r\n\r\n[matt]: https://stackoverflow.com/a/2003515/456814\r\n[notes]: https://github.com/git/git/blob/v2.0.0/Documentation/RelNotes/1.6.6.txt#L162-L166\r\n[branch]: https://jk.gs/git-branch.html\r\n[fetch]: https://jk.gs/git-fetch.html\r\n[pro]: https://git-scm.com/book/en/Git-Branching-Remote-Branches\r\n[push-prune]: http://stackoverflow.com/a/13437928/456814\r\n[push]: https://www.kernel.org/pub/software/scm/git/docs/git-push.html\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/NLAqw.png\r\n  [2]: https://i.stack.imgur.com/iCOnz.png\r\n  [3]: https://i.stack.imgur.com/6Z3GY.png",
               "up_vote_count": 1527,
               "down_vote_count": 0,
               "id": "23961231",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1401474755,
               "last_edit_date": 1457612426,
               "last_activity_date": 1457612426
            },
            {
               "answer_id": 25011664,
               "score": 54,
               "body_markdown": "This won&#39;t work if you have a tag with the same name as the branch on the remote:\r\n\r\n    $ git push origin :branch-or-tag-name\r\n    error: dst refspec branch-or-tag-name matches more than one.\r\n    error: failed to push some refs to &#39;git@github.com:SomeName/some-repo.git&#39;\r\n\r\nIn that case you need to specify that you want to delete the branch, not the tag:\r\n\r\n    git push origin :refs/heads/branch-or-tag-name\r\n\r\nSimilarly, to delete the tag instead of the branch you would use:\r\n\r\n    git push origin :refs/tags/branch-or-tag-name\r\n",
               "up_vote_count": 54,
               "down_vote_count": 0,
               "id": "25011664",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1406624568,
               "last_edit_date": 1413804652,
               "last_activity_date": 1413804652
            },
            {
               "answer_id": 26237660,
               "score": 330,
               "body_markdown": "If you want to delete a branch, first checkout to the branch other than the branch to be deleted.\r\n\r\n    git checkout other_than_branch_to_be_deleted\r\n\r\nDeleting the local branch:\r\n\r\n    git branch -D branch_to_be_deleted\r\n\r\nDeleting the remote branch:\r\n\r\n    git push origin --delete branch_to_be_deleted\r\n\r\n",
               "up_vote_count": 332,
               "down_vote_count": 2,
               "id": "26237660",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1412689929,
               "last_edit_date": 1433815442,
               "last_activity_date": 1433815442
            },
            {
               "answer_id": 28527604,
               "score": 200,
               "body_markdown": "This is simple: Just run the following command:\r\n\r\nTo delete a Git branch both locally and remotely, first delete the local branch using command:\r\n\r\n    git branch -d example\r\n\r\n(here `example` is the branch name)\r\n\r\nAnd after that delete remote branch using command:\r\n\r\n    git push origin :example",
               "up_vote_count": 202,
               "down_vote_count": 2,
               "id": "28527604",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1424013632,
               "last_edit_date": 1433815394,
               "last_activity_date": 1433815394
            },
            {
               "answer_id": 29831148,
               "score": 72,
               "body_markdown": "Simply say:\r\n\r\n    git branch -d &lt;branch-name&gt;\r\n    git push origin :&lt;branch-name&gt;\r\n",
               "up_vote_count": 72,
               "down_vote_count": 0,
               "id": "29831148",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1429812393,
               "last_edit_date": 1466859121,
               "last_activity_date": 1466859121
            },
            {
               "answer_id": 30001477,
               "score": 62,
               "body_markdown": "    git push origin --delete branchName\r\n\r\nis easier to remember than\r\n\r\n    git push origin branchName\r\n\r\n",
               "up_vote_count": 62,
               "down_vote_count": 0,
               "id": "30001477",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1430564380,
               "last_edit_date": 1432029926,
               "last_activity_date": 1432029926
            },
            {
               "answer_id": 30410815,
               "score": 95,
               "body_markdown": "**Delete locally:**\r\n\r\nTo delete a local branch, you can use:\r\n\r\n    git branch -d branch_name \r\n\r\nTo delete a branch forcibly, use `-D` instead of `-d`. \r\n   \r\n\r\n    git branch -D branch_name\r\n\r\n          \r\n\r\n     \r\n**Delete remotely:**\r\n\r\nThere are two options:\r\n\r\n    git push origin :branchname  \r\n\r\n    git push origin --delete branchname \r\n\r\n  \r\n \r\nI would suggest you use the 2nd way as it is more intuitive.\r\n\r\n",
               "up_vote_count": 95,
               "down_vote_count": 0,
               "id": "30410815",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1432371370,
               "last_edit_date": 1433673413,
               "last_activity_date": 1433673413
            },
            {
               "answer_id": 33275647,
               "score": 68,
               "body_markdown": "Now you can do it with the [GitHub Desktop](https://desktop.github.com/) app.\r\n\r\nAfter launching the app\r\n\r\n1. Click on the project containing the branch\r\n2. Switch to the branch you would like to delete [![switching branch][1]][1]\r\n3. From the &quot;Branch&quot; menu, select, &quot;Unpublish...&quot;, to have the branch deleted from the GitHub servers. [![unpublish branch][2]][2]\r\n4. From the &quot;Branch&quot; menu, select, &#39;Delete &quot;*branch_name*&quot;...&#39;, to have the branch deleted off of your local machine (aka the machine you are currently working on) [![delete local branch][3]][3]\r\n\r\n  [1]: https://i.stack.imgur.com/c0ged.png\r\n  [2]: https://i.stack.imgur.com/1u8oS.png\r\n  [3]: https://i.stack.imgur.com/TTuLO.png",
               "up_vote_count": 80,
               "down_vote_count": 12,
               "id": "33275647",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1445499528,
               "last_edit_date": 1481860730,
               "last_activity_date": 1481860730
            },
            {
               "answer_id": 33436213,
               "score": 80,
               "body_markdown": "[Deleting Branches][1]\r\n\r\n&gt; Let&#39;s assume our work on branch &quot;contact-form&quot; is done and we&#39;ve already integrated it into &quot;master&quot;. Since we don&#39;t need it anymore, we can delete it (locally):\r\n\r\n&gt;     $ git branch -d contact-form\r\n\r\n\r\nAnd for deleting the remote branch:\r\n\r\n    git push origin --delete contact-form\r\n\r\n  [1]: http://www.git-tower.com/learn/git/ebook/command-line/remote-repositories/deleting-branches",
               "up_vote_count": 82,
               "down_vote_count": 2,
               "id": "33436213",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1446208784,
               "last_edit_date": 1447876273,
               "last_activity_date": 1447876273
            },
            {
               "answer_id": 34544089,
               "score": 76,
               "body_markdown": "Delete remote branch\r\n\r\n`git push origin :&lt;branchname&gt;`\r\n\r\nDelete local branch\r\n\r\n`git branch -D &lt;branchname&gt;`\r\n\r\nDelete local branch steps:\r\n\r\n1. checkout to another branch\r\n2. delete local branch",
               "up_vote_count": 78,
               "down_vote_count": 2,
               "id": "34544089",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1451553772,
               "last_edit_date": 1455905146,
               "last_activity_date": 1455905146
            },
            {
               "answer_id": 34581636,
               "score": 92,
               "body_markdown": "To delete your branch locally and remotely \r\n\r\n - Checkout to master branch -  `git checkout master`\r\n\r\n - Delete your remote branch - `git push origin --delete &lt;branch-name&gt;`\r\n\r\n - Delete your local branch - `git branch --delete &lt;branch-name&gt;`\r\n\r\n\r\n",
               "up_vote_count": 93,
               "down_vote_count": 1,
               "id": "34581636",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1451855323,
               "last_edit_date": 1513203051,
               "last_activity_date": 1513203051
            },
            {
               "answer_id": 35213755,
               "score": 27,
               "body_markdown": "An alternative option to the command line for deleting remote branches is the **GitHub branches page**.\r\n\r\nSee for example: [https://github.com/angular/angular.js/branches](https://github.com/angular/angular.js/branches)\r\n\r\nFound in the `Code` -&gt; `Branches` page of a GitHub repository.\r\n\r\nI generally prefer command line myself but this **GitHub page shows you lots more information** about the branches, such as **last updated date and user**, and **number of commits ahead and behind**. It is useful when dealing with a large number of branches.\r\n",
               "up_vote_count": 30,
               "down_vote_count": 3,
               "id": "35213755",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1454628880,
               "last_edit_date": 1466859200,
               "last_activity_date": 1466859200
            },
            {
               "answer_id": 35324551,
               "score": 41,
               "body_markdown": "I got sick of googling for this answer, so I took a similar approach\r\nto [the answer that crizCraig posted][1] earlier.\r\n\r\nAdded the following to my Bash profile:\r\n\r\n    function gitdelete(){\r\n        git push origin --delete $1\r\n        git branch -D $1\r\n    }\r\n\r\nThen every time I&#39;m done with a branch (merged into `master`, for example) I run the following in my terminal:\r\n\r\n    gitdelete my-branch-name\r\n\r\n...which then deletes `my-branch-name` from `origin` as as well as locally.\r\n\r\n  [1]: https://stackoverflow.com/a/15775364/551436\r\n",
               "up_vote_count": 45,
               "down_vote_count": 4,
               "id": "35324551",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1455133656,
               "last_edit_date": 1495542898,
               "last_activity_date": 1466859337
            },
            {
               "path": "3.stack.answer",
               "answer_id": 36775924,
               "score": 38,
               "creation_date": 1461257376,
               "body_markdown": "    git push origin :bugfix  # Deletes remote branch\r\n    git branch -d bugfix     # Must delete local branch manually\r\n    \r\nIf you are sure you want to delete it, run \r\n   \r\n\r\n    git branch -D bugfix\r\nNow to clean up deleted remote branches run\r\n\r\n    git remote prune origin\r\n\r\n",
               "up_vote_count": 38,
               "down_vote_count": 0,
               "id": "36775924",
               "last_activity_date": 1461257376,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 36980415,
               "score": 26,
               "creation_date": 1462185431,
               "body_markdown": "I also had similar issues, and this seems to work:\r\nThis deletes local branch.\r\n`git branch -d the_local_branch`\r\n\r\nThis removes remote branch\r\n`git push origin :the_remote_branch`\r\n\r\n[Source: Makandra Cards][1]\r\n\r\n\r\n  [1]: http://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote",
               "up_vote_count": 27,
               "down_vote_count": 1,
               "id": "36980415",
               "last_activity_date": 1462185431,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 37356297,
               "score": 36,
               "body_markdown": "Before executing\r\n\r\n    git branch --delete &lt;branch&gt;\r\n\r\nmake sure you determine first what the EXACT name of the remote branch is by executing:\r\n\r\n    git ls-remote\r\n\r\nThis will tell you what to enter EXACTLY for `&lt;branch&gt;` value. (`branch` is case sensitive!)\r\n",
               "up_vote_count": 38,
               "down_vote_count": 2,
               "id": "37356297",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1463780577,
               "last_edit_date": 1466859369,
               "last_activity_date": 1466859369
            },
            {
               "path": "3.stack.answer",
               "answer_id": 38776671,
               "score": 21,
               "creation_date": 1470341722,
               "body_markdown": "There are good answer, but, in case that you have a ton of branches, deleting them one by one locally and remotly, would be a tedious tasks. You can use this script to automate this tasks. \r\n\r\n    branch_not_delete=( &quot;master&quot; &quot;develop&quot; &quot;our-branch-1&quot; &quot;our-branch-2&quot;)\r\n    \r\n    \r\n    for branch in `git branch -a | grep remotes | grep -v HEAD | grep -v master`; do\r\n    \r\n    \t# delete prefix remotes/origin/ from branch name\r\n    \tbranch_name=&quot;$(awk &#39;{gsub(&quot;remotes/origin/&quot;, &quot;&quot;);print}&#39; &lt;&lt;&lt; $branch)&quot;\r\n    \t\r\n    \tif ! [[ &quot; ${branch_not_delete[*]} &quot; == *&quot; $branch_name &quot;* ]]; then\r\n    \t\t# delete branch remotly and locally\r\n        \tgit push origin :$branch_name\r\n    \tfi\r\n    done \r\n\r\n- List the branches that you don&#39;t want to delete\r\n- Iterate over remotes branch and if they aren&#39;t in our &quot;preserve list&quot;, we deleted. \r\n\r\n\r\nSource: [removing-git-branches-at-once](http://levipy.com/removing-git-branches-at-once/)\r\n",
               "up_vote_count": 21,
               "down_vote_count": 0,
               "id": "38776671",
               "last_activity_date": 1470341722,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 40645071,
               "score": 75,
               "body_markdown": "**One liner** command delete *both local, and remote*:\r\n\r\n`D=branch-name; git branch -D $D; git push origin :$D`\r\n\r\nor add the alias below to your *~/.gitconfig*; usage: `git kill branch-name`\r\n\r\n    [alias]\r\n        kill = &quot;!f(){ git branch -D \\&quot;$1\\&quot;;  git push origin --delete \\&quot;$1\\&quot;; };f&quot;",
               "up_vote_count": 75,
               "down_vote_count": 0,
               "id": "40645071",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1479344636,
               "last_edit_date": 1484469043,
               "last_activity_date": 1484469043
            },
            {
               "answer_id": 42193447,
               "score": 17,
               "body_markdown": "Using **GitBash** you can execute the following:\r\n\r\n    git branch --delete &lt;branch&gt;\r\n\r\nOR \r\n-\r\nFrom the GitHub desktop app, when you have the branch checked out, you can delete the **Local** branch via the *Branch* menu strip:\r\n\r\n[![enter image description here][1]][1]\r\n\r\nIf you **ARE NOT** using the GitHub desktop app, and are using an IDE like Visual Studio for your local source control, all you have to do is a couple quick steps: \r\n\r\n 1. Check out a branch other than the one you wish to delete.\r\n 2. Right-click the branch you wish to delete.\r\n 3. Select the **Delete** option from the context menu.\r\n\r\nThen, once logged in to your GitHub account online, go to the repository and click the ***All Branches*** tab.  From there, just click the little trash can icon on the right on the name of the brach you wish to delete.  \r\n\r\n[![enter image description here][2]][2]\r\n\r\n*Keep in mind - if the branch isn&#39;t published, there&#39;s no need to try to delete it from your online repository.\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/b6dQg.png\r\n  [2]: https://i.stack.imgur.com/hbXpP.png",
               "up_vote_count": 21,
               "down_vote_count": 4,
               "id": "42193447",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1486934712,
               "last_edit_date": 1487114295,
               "last_activity_date": 1487114295
            },
            {
               "answer_id": 42398224,
               "score": 35,
               "body_markdown": "I added the following aliases to my `.gitconfig` file.  This allows me to delete branches with or without specifying the branch name.  Branch name is defaulted to the current branch if no argument is passed in.\r\n\r\n\r\n    [alias]\r\n        branch-name = rev-parse --abbrev-ref HEAD     \r\n    \r\n        rm-remote-branch = !&quot;f() { branch=${1-$(git branch-name)}; git push origin :$branch; }; f&quot;\r\n        rm-local-branch = !&quot;f() { branch=${1-$(git branch-name)}; git checkout master; git branch -d $branch; }; f&quot;\r\n        rm-branch-fully = !&quot;f() { branch=${1-$(git branch-name)}; git rm-local-branch $branch; git rm-remote-branch $branch; }; f&quot;",
               "up_vote_count": 35,
               "down_vote_count": 0,
               "id": "42398224",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1487784038,
               "last_edit_date": 1493845321,
               "last_activity_date": 1493845321
            },
            {
               "path": "3.stack.answer",
               "answer_id": 44074506,
               "score": -13,
               "creation_date": 1495210034,
               "body_markdown": "This commands works best for me:\r\n\r\n    git branch -D &lt;branch name&gt;\r\n\r\n",
               "up_vote_count": 5,
               "down_vote_count": 18,
               "id": "44074506",
               "last_activity_date": 1495210034,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 44714712,
               "score": 60,
               "body_markdown": "**To delete Locally - (Normal),** \r\n\r\n    git branch -d my_branch\r\n\r\nIf your branch in rebasing/merging progress and that was not done properly means, you will get an error `Rebase/Merge in progress` so in that case, you won&#39;t be able to delete your branch.\r\n\r\nSo either your need to solve rebasing/merging otherwise you can do force Delete by using,\r\n\r\n    git branch -D my_branch\r\n\r\n\r\n**To delete in Remote:**\r\n  \r\n\r\n    git push --delete origin my_branch\r\n \r\n**can do the same using ,**\r\n\r\n    git push origin :my_branch   # easy to remember both will do the same.\r\n\r\n**Graphical Representation,**\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/Y7NmS.png",
               "up_vote_count": 61,
               "down_vote_count": 1,
               "id": "44714712",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1498200168,
               "last_edit_date": 1511087043,
               "last_activity_date": 1511087043
            },
            {
               "answer_id": 44781228,
               "score": 563,
               "body_markdown": "&lt;h3&gt;Steps for deleting a branch:&lt;/h3&gt;\r\nfor deleting the **remote branch:**\r\n  \r\n    git push origin --delete &lt;your_branch&gt; \r\n\r\nfor deleting the **local branch:**\r\n\r\n    git branch -D &lt;branch_name&gt; \r\n\r\n**Explain:** OK, just explain what&#39;s going on here!\r\n\r\nSimply do `git push origin --delete` to delete your remote branch, add the name of the branch at the end and this will delete and push it to remote at the same time...\r\n\r\nAlso, `git branch -D`, which simply delete the local branch **Only**!...\r\n\r\n`-D` stands for `--delete --force` which will delete the branch even it&#39;s not merged(force delete), but you can also use `-d` which stands for `--delete` which throw an error respective of the branch merge status...\r\n\r\nI also create the image below to show the steps:\r\n\r\n\r\n[![delete a remote and local branch in git][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/AKWYx.jpg",
               "up_vote_count": 564,
               "down_vote_count": 1,
               "id": "44781228",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1498569195,
               "last_edit_date": 1516018666,
               "last_activity_date": 1516018666
            },
            {
               "answer_id": 45793291,
               "score": 5,
               "body_markdown": "I use the following in my Bash settings:\r\n\r\n    alias git-shoot=&quot;git push origin --delete&quot;\r\n\r\nThen you can call:\r\n\r\n    git-shoot branchname",
               "up_vote_count": 6,
               "down_vote_count": 1,
               "id": "45793291",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1503306650,
               "last_edit_date": 1504880835,
               "last_activity_date": 1504880835
            },
            {
               "path": "3.stack.answer",
               "answer_id": 46412667,
               "score": 6,
               "creation_date": 1506367200,
               "body_markdown": "I created the following function:\r\n\r\n    git-delete-branch() \r\n    { \r\n        if [[ -n $1 ]]; then\r\n            git checkout master &gt; /dev/null;\r\n            branch_name=&quot;$1&quot;;\r\n            echo &quot;Deleting local $branch_name branch...&quot;;\r\n            git branch -D &quot;$branch_name&quot;;\r\n            echo &quot;Deleting remote $branch_name branch...&quot;;\r\n            git push origin --delete &quot;$branch_name&quot;;\r\n            git remote prune origin;\r\n            echo &quot;Your current branches are:&quot;;\r\n            git branch -a;\r\n        else\r\n            echo &quot;Usage: git-delete-branch &lt;branch_name&gt;&quot;;\r\n        fi\r\n    }\r\n\r\n\r\n",
               "up_vote_count": 6,
               "down_vote_count": 0,
               "id": "46412667",
               "last_activity_date": 1506367200,
               "tags": [],
               "is_accepted": false
            },
            {
               "path": "3.stack.answer",
               "answer_id": 46888156,
               "score": 11,
               "creation_date": 1508757797,
               "body_markdown": "According to latest document using terminal we can delete following way.\r\n\r\n**delete in local:**\r\n\r\n    git branch -D usermanagement\r\n\r\n**delete in remote location:**\r\n\r\n    git push --delete origin usermanagement\r\n\r\n",
               "up_vote_count": 11,
               "down_vote_count": 0,
               "id": "46888156",
               "last_activity_date": 1508757797,
               "tags": [],
               "is_accepted": false
            },
            {
               "answer_id": 47696235,
               "score": 6,
               "body_markdown": "&gt; Its very simple\r\n\r\n\r\n**To delete remote branch**\r\n\r\n    git push -d origin &lt;branch-name&gt;\r\nOR\r\n\r\n    git push origin :&lt;branch-name&gt;\r\n\r\n**To delete local branch**\r\n\r\n    git branch -D &lt;branch-name&gt;",
               "up_vote_count": 8,
               "down_vote_count": 2,
               "id": "47696235",
               "tags": [],
               "is_accepted": false,
               "path": "3.stack.answer",
               "creation_date": 1512653383,
               "last_edit_date": 1513590638,
               "last_activity_date": 1513590638
            }
         ],
         "last_edit_date": "1514124699",
         "link": "https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-remotely",
         "creation_date": "1262653935"
      }
   ],
   "license": "None",
   "last_update": "2018-01-30 15:55:07  UTC",
   "language": "JavaScript",
   "repo_keywords": "NaN",
   "github_id": "8587033",
   "owner": "ryancole",
   "repo_description": "Chunk converts arrays like `[1,2,3,4,5]` into arrays of arrays like `[[1,2], [3,4], [5]]`.",
   "private": "False",
   "pm_name": "Bower",
   "repo_status": "NaN",
   "size": "164",
   "created_time": "2013-03-05 19:19:16 UTC",
   "path": "1.git",
   "pm_keywords": "array,chunk",
   "homepage_content": "None",
   "watcher_cnt": "18",
   "version_cnt": "2",
   "repo_dependency_cnt": "2"
}]